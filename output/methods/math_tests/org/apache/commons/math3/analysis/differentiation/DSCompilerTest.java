@Test [EOL] public void testSize() { [EOL]     for (int i = 0; i < 6; ++i) { [EOL]         for (int j = 0; j < 6; ++j) { [EOL]             long expected = CombinatoricsUtils.binomialCoefficient(i + j, i); [EOL]             Assert.assertEquals(expected, DSCompiler.getCompiler(i, j).getSize()); [EOL]             Assert.assertEquals(expected, DSCompiler.getCompiler(j, i).getSize()); [EOL]         } [EOL]     } [EOL] } <line_num>: 35,44
@Test [EOL] public void testIndices() { [EOL]     DSCompiler c = DSCompiler.getCompiler(0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), new int[0]); [EOL]     c = DSCompiler.getCompiler(0, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), new int[0]); [EOL]     c = DSCompiler.getCompiler(1, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0); [EOL]     c = DSCompiler.getCompiler(1, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1); [EOL]     c = DSCompiler.getCompiler(1, 2); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 2); [EOL]     c = DSCompiler.getCompiler(2, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 0, 1); [EOL]     c = DSCompiler.getCompiler(1, 3); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 2); [EOL]     checkIndices(c.getPartialDerivativeOrders(3), 3); [EOL]     c = DSCompiler.getCompiler(2, 2); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 2, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(3), 0, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(4), 1, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(5), 0, 2); [EOL]     c = DSCompiler.getCompiler(3, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 0, 1, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(3), 0, 0, 1); [EOL]     c = DSCompiler.getCompiler(1, 4); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 2); [EOL]     checkIndices(c.getPartialDerivativeOrders(3), 3); [EOL]     checkIndices(c.getPartialDerivativeOrders(4), 4); [EOL]     c = DSCompiler.getCompiler(2, 3); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 2, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(3), 3, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(4), 0, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(5), 1, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(6), 2, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(7), 0, 2); [EOL]     checkIndices(c.getPartialDerivativeOrders(8), 1, 2); [EOL]     checkIndices(c.getPartialDerivativeOrders(9), 0, 3); [EOL]     c = DSCompiler.getCompiler(3, 2); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 2, 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(3), 0, 1, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(4), 1, 1, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(5), 0, 2, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(6), 0, 0, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(7), 1, 0, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(8), 0, 1, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(9), 0, 0, 2); [EOL]     c = DSCompiler.getCompiler(4, 1); [EOL]     checkIndices(c.getPartialDerivativeOrders(0), 0, 0, 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(1), 1, 0, 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(2), 0, 1, 0, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(3), 0, 0, 1, 0); [EOL]     checkIndices(c.getPartialDerivativeOrders(4), 0, 0, 0, 1); [EOL] } <line_num>: 46,130
@Test(expected = DimensionMismatchException.class) [EOL] public void testIncompatibleParams() { [EOL]     DSCompiler.getCompiler(3, 2).checkCompatibility(DSCompiler.getCompiler(4, 2)); [EOL] } <line_num>: 132,135
@Test(expected = DimensionMismatchException.class) [EOL] public void testIncompatibleOrder() { [EOL]     DSCompiler.getCompiler(3, 3).checkCompatibility(DSCompiler.getCompiler(3, 2)); [EOL] } <line_num>: 137,140
@Test [EOL] public void testSymmetry() { [EOL]     for (int i = 0; i < 6; ++i) { [EOL]         for (int j = 0; j < 6; ++j) { [EOL]             DSCompiler c = DSCompiler.getCompiler(i, j); [EOL]             for (int k = 0; k < c.getSize(); ++k) { [EOL]                 Assert.assertEquals(k, c.getPartialDerivativeIndex(c.getPartialDerivativeOrders(k))); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 142,152
@Test [EOL] public void testMultiplicationRules() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException { [EOL]     Map<String, String> referenceRules = new HashMap<String, String>(); [EOL]     referenceRules.put("(f*g)", "f * g"); [EOL]     referenceRules.put("d(f*g)/dx", "f * dg/dx + df/dx * g"); [EOL]     referenceRules.put("d(f*g)/dy", referenceRules.get("d(f*g)/dx").replaceAll("x", "y")); [EOL]     referenceRules.put("d(f*g)/dz", referenceRules.get("d(f*g)/dx").replaceAll("x", "z")); [EOL]     referenceRules.put("d(f*g)/dt", referenceRules.get("d(f*g)/dx").replaceAll("x", "t")); [EOL]     referenceRules.put("d2(f*g)/dx2", "f * d2g/dx2 + 2 * df/dx * dg/dx + d2f/dx2 * g"); [EOL]     referenceRules.put("d2(f*g)/dy2", referenceRules.get("d2(f*g)/dx2").replaceAll("x", "y")); [EOL]     referenceRules.put("d2(f*g)/dz2", referenceRules.get("d2(f*g)/dx2").replaceAll("x", "z")); [EOL]     referenceRules.put("d2(f*g)/dt2", referenceRules.get("d2(f*g)/dx2").replaceAll("x", "t")); [EOL]     referenceRules.put("d2(f*g)/dxdy", "f * d2g/dxdy + df/dy * dg/dx + df/dx * dg/dy + d2f/dxdy * g"); [EOL]     referenceRules.put("d2(f*g)/dxdz", referenceRules.get("d2(f*g)/dxdy").replaceAll("y", "z")); [EOL]     referenceRules.put("d2(f*g)/dxdt", referenceRules.get("d2(f*g)/dxdy").replaceAll("y", "t")); [EOL]     referenceRules.put("d2(f*g)/dydz", referenceRules.get("d2(f*g)/dxdz").replaceAll("x", "y")); [EOL]     referenceRules.put("d2(f*g)/dydt", referenceRules.get("d2(f*g)/dxdt").replaceAll("x", "y")); [EOL]     referenceRules.put("d2(f*g)/dzdt", referenceRules.get("d2(f*g)/dxdt").replaceAll("x", "z")); [EOL]     referenceRules.put("d3(f*g)/dx3", "f * d3g/dx3 +" + " 3 * df/dx * d2g/dx2 +" + " 3 * d2f/dx2 * dg/dx +" + " d3f/dx3 * g"); [EOL]     referenceRules.put("d3(f*g)/dy3", referenceRules.get("d3(f*g)/dx3").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f*g)/dz3", referenceRules.get("d3(f*g)/dx3").replaceAll("x", "z")); [EOL]     referenceRules.put("d3(f*g)/dt3", referenceRules.get("d3(f*g)/dx3").replaceAll("x", "t")); [EOL]     referenceRules.put("d3(f*g)/dx2dy", "f * d3g/dx2dy +" + " df/dy * d2g/dx2 +" + " 2 * df/dx * d2g/dxdy +" + " 2 * d2f/dxdy * dg/dx +" + " d2f/dx2 * dg/dy +" + " d3f/dx2dy * g"); [EOL]     referenceRules.put("d3(f*g)/dxdy2", "f * d3g/dxdy2 +" + " 2 * df/dy * d2g/dxdy +" + " d2f/dy2 * dg/dx +" + " df/dx * d2g/dy2 +" + " 2 * d2f/dxdy * dg/dy +" + " d3f/dxdy2 * g"); [EOL]     referenceRules.put("d3(f*g)/dx2dz", referenceRules.get("d3(f*g)/dx2dy").replaceAll("y", "z")); [EOL]     referenceRules.put("d3(f*g)/dy2dz", referenceRules.get("d3(f*g)/dx2dz").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f*g)/dxdz2", referenceRules.get("d3(f*g)/dxdy2").replaceAll("y", "z")); [EOL]     referenceRules.put("d3(f*g)/dydz2", referenceRules.get("d3(f*g)/dxdz2").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f*g)/dx2dt", referenceRules.get("d3(f*g)/dx2dz").replaceAll("z", "t")); [EOL]     referenceRules.put("d3(f*g)/dy2dt", referenceRules.get("d3(f*g)/dx2dt").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f*g)/dz2dt", referenceRules.get("d3(f*g)/dx2dt").replaceAll("x", "z")); [EOL]     referenceRules.put("d3(f*g)/dxdt2", referenceRules.get("d3(f*g)/dxdy2").replaceAll("y", "t")); [EOL]     referenceRules.put("d3(f*g)/dydt2", referenceRules.get("d3(f*g)/dxdt2").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f*g)/dzdt2", referenceRules.get("d3(f*g)/dxdt2").replaceAll("x", "z")); [EOL]     referenceRules.put("d3(f*g)/dxdydz", "f * d3g/dxdydz +" + " df/dz * d2g/dxdy +" + " df/dy * d2g/dxdz +" + " d2f/dydz * dg/dx +" + " df/dx * d2g/dydz +" + " d2f/dxdz * dg/dy +" + " d2f/dxdy * dg/dz +" + " d3f/dxdydz * g"); [EOL]     referenceRules.put("d3(f*g)/dxdydt", referenceRules.get("d3(f*g)/dxdydz").replaceAll("z", "t")); [EOL]     referenceRules.put("d3(f*g)/dxdzdt", referenceRules.get("d3(f*g)/dxdydt").replaceAll("y", "z")); [EOL]     referenceRules.put("d3(f*g)/dydzdt", referenceRules.get("d3(f*g)/dxdzdt").replaceAll("x", "y")); [EOL]     Field multFieldArrayField = DSCompiler.class.getDeclaredField("multIndirection"); [EOL]     multFieldArrayField.setAccessible(true); [EOL]     for (int i = 0; i < 5; ++i) { [EOL]         for (int j = 0; j < 4; ++j) { [EOL]             DSCompiler compiler = DSCompiler.getCompiler(i, j); [EOL]             int[][][] multIndirection = (int[][][]) multFieldArrayField.get(compiler); [EOL]             for (int k = 0; k < multIndirection.length; ++k) { [EOL]                 String product = ordersToString(compiler.getPartialDerivativeOrders(k), "(f*g)", "x", "y", "z", "t"); [EOL]                 StringBuilder rule = new StringBuilder(); [EOL]                 for (int[] term : multIndirection[k]) { [EOL]                     if (rule.length() > 0) { [EOL]                         rule.append(" + "); [EOL]                     } [EOL]                     if (term[0] > 1) { [EOL]                         rule.append(term[0]).append(" * "); [EOL]                     } [EOL]                     rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[1]), "f", "x", "y", "z", "t")); [EOL]                     rule.append(" * "); [EOL]                     rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[2]), "g", "x", "y", "z", "t")); [EOL]                 } [EOL]                 Assert.assertEquals(product, referenceRules.get(product), rule.toString()); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 154,241
@Test [EOL] public void testCompositionRules() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException { [EOL]     Map<String, String> referenceRules = new HashMap<String, String>(); [EOL]     referenceRules.put("(f(g))", "(f(g))"); [EOL]     referenceRules.put("d(f(g))/dx", "d(f(g))/dg * dg/dx"); [EOL]     referenceRules.put("d(f(g))/dy", referenceRules.get("d(f(g))/dx").replaceAll("x", "y")); [EOL]     referenceRules.put("d(f(g))/dz", referenceRules.get("d(f(g))/dx").replaceAll("x", "z")); [EOL]     referenceRules.put("d(f(g))/dt", referenceRules.get("d(f(g))/dx").replaceAll("x", "t")); [EOL]     referenceRules.put("d2(f(g))/dx2", "d2(f(g))/dg2 * dg/dx * dg/dx + d(f(g))/dg * d2g/dx2"); [EOL]     referenceRules.put("d2(f(g))/dy2", referenceRules.get("d2(f(g))/dx2").replaceAll("x", "y")); [EOL]     referenceRules.put("d2(f(g))/dz2", referenceRules.get("d2(f(g))/dx2").replaceAll("x", "z")); [EOL]     referenceRules.put("d2(f(g))/dt2", referenceRules.get("d2(f(g))/dx2").replaceAll("x", "t")); [EOL]     referenceRules.put("d2(f(g))/dxdy", "d2(f(g))/dg2 * dg/dx * dg/dy + d(f(g))/dg * d2g/dxdy"); [EOL]     referenceRules.put("d2(f(g))/dxdz", referenceRules.get("d2(f(g))/dxdy").replaceAll("y", "z")); [EOL]     referenceRules.put("d2(f(g))/dxdt", referenceRules.get("d2(f(g))/dxdy").replaceAll("y", "t")); [EOL]     referenceRules.put("d2(f(g))/dydz", referenceRules.get("d2(f(g))/dxdz").replaceAll("x", "y")); [EOL]     referenceRules.put("d2(f(g))/dydt", referenceRules.get("d2(f(g))/dxdt").replaceAll("x", "y")); [EOL]     referenceRules.put("d2(f(g))/dzdt", referenceRules.get("d2(f(g))/dxdt").replaceAll("x", "z")); [EOL]     referenceRules.put("d3(f(g))/dx3", "d3(f(g))/dg3 * dg/dx * dg/dx * dg/dx +" + " 3 * d2(f(g))/dg2 * dg/dx * d2g/dx2 +" + " d(f(g))/dg * d3g/dx3"); [EOL]     referenceRules.put("d3(f(g))/dy3", referenceRules.get("d3(f(g))/dx3").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f(g))/dz3", referenceRules.get("d3(f(g))/dx3").replaceAll("x", "z")); [EOL]     referenceRules.put("d3(f(g))/dt3", referenceRules.get("d3(f(g))/dx3").replaceAll("x", "t")); [EOL]     referenceRules.put("d3(f(g))/dxdy2", "d3(f(g))/dg3 * dg/dx * dg/dy * dg/dy +" + " 2 * d2(f(g))/dg2 * dg/dy * d2g/dxdy +" + " d2(f(g))/dg2 * dg/dx * d2g/dy2 +" + " d(f(g))/dg * d3g/dxdy2"); [EOL]     referenceRules.put("d3(f(g))/dxdz2", referenceRules.get("d3(f(g))/dxdy2").replaceAll("y", "z")); [EOL]     referenceRules.put("d3(f(g))/dxdt2", referenceRules.get("d3(f(g))/dxdy2").replaceAll("y", "t")); [EOL]     referenceRules.put("d3(f(g))/dydz2", referenceRules.get("d3(f(g))/dxdz2").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f(g))/dydt2", referenceRules.get("d3(f(g))/dxdt2").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f(g))/dzdt2", referenceRules.get("d3(f(g))/dxdt2").replaceAll("x", "z")); [EOL]     referenceRules.put("d3(f(g))/dx2dy", "d3(f(g))/dg3 * dg/dx * dg/dx * dg/dy +" + " 2 * d2(f(g))/dg2 * dg/dx * d2g/dxdy +" + " d2(f(g))/dg2 * d2g/dx2 * dg/dy +" + " d(f(g))/dg * d3g/dx2dy"); [EOL]     referenceRules.put("d3(f(g))/dx2dz", referenceRules.get("d3(f(g))/dx2dy").replaceAll("y", "z")); [EOL]     referenceRules.put("d3(f(g))/dx2dt", referenceRules.get("d3(f(g))/dx2dy").replaceAll("y", "t")); [EOL]     referenceRules.put("d3(f(g))/dy2dz", referenceRules.get("d3(f(g))/dx2dz").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f(g))/dy2dt", referenceRules.get("d3(f(g))/dx2dt").replaceAll("x", "y")); [EOL]     referenceRules.put("d3(f(g))/dz2dt", referenceRules.get("d3(f(g))/dx2dt").replaceAll("x", "z")); [EOL]     referenceRules.put("d3(f(g))/dxdydz", "d3(f(g))/dg3 * dg/dx * dg/dy * dg/dz +" + " d2(f(g))/dg2 * dg/dy * d2g/dxdz +" + " d2(f(g))/dg2 * dg/dx * d2g/dydz +" + " d2(f(g))/dg2 * d2g/dxdy * dg/dz +" + " d(f(g))/dg * d3g/dxdydz"); [EOL]     referenceRules.put("d3(f(g))/dxdydt", referenceRules.get("d3(f(g))/dxdydz").replaceAll("z", "t")); [EOL]     referenceRules.put("d3(f(g))/dxdzdt", referenceRules.get("d3(f(g))/dxdydt").replaceAll("y", "z")); [EOL]     referenceRules.put("d3(f(g))/dydzdt", referenceRules.get("d3(f(g))/dxdzdt").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dx4", "d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dx +" + " 6 * d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dx2 +" + " 3 * d2(f(g))/dg2 * d2g/dx2 * d2g/dx2 +" + " 4 * d2(f(g))/dg2 * dg/dx * d3g/dx3 +" + " d(f(g))/dg * d4g/dx4"); [EOL]     referenceRules.put("d4(f(g))/dy4", referenceRules.get("d4(f(g))/dx4").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dz4", referenceRules.get("d4(f(g))/dx4").replaceAll("x", "z")); [EOL]     referenceRules.put("d4(f(g))/dt4", referenceRules.get("d4(f(g))/dx4").replaceAll("x", "t")); [EOL]     referenceRules.put("d4(f(g))/dx3dy", "d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dy +" + " 3 * d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dxdy +" + " 3 * d3(f(g))/dg3 * dg/dx * d2g/dx2 * dg/dy +" + " 3 * d2(f(g))/dg2 * d2g/dx2 * d2g/dxdy +" + " 3 * d2(f(g))/dg2 * dg/dx * d3g/dx2dy +" + " d2(f(g))/dg2 * d3g/dx3 * dg/dy +" + " d(f(g))/dg * d4g/dx3dy"); [EOL]     referenceRules.put("d4(f(g))/dx3dz", referenceRules.get("d4(f(g))/dx3dy").replaceAll("y", "z")); [EOL]     referenceRules.put("d4(f(g))/dx3dt", referenceRules.get("d4(f(g))/dx3dy").replaceAll("y", "t")); [EOL]     referenceRules.put("d4(f(g))/dxdy3", "d4(f(g))/dg4 * dg/dx * dg/dy * dg/dy * dg/dy +" + " 3 * d3(f(g))/dg3 * dg/dy * dg/dy * d2g/dxdy +" + " 3 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dy2 +" + " 3 * d2(f(g))/dg2 * d2g/dxdy * d2g/dy2 +" + " 3 * d2(f(g))/dg2 * dg/dy * d3g/dxdy2 +" + " d2(f(g))/dg2 * dg/dx * d3g/dy3 +" + " d(f(g))/dg * d4g/dxdy3"); [EOL]     referenceRules.put("d4(f(g))/dxdz3", referenceRules.get("d4(f(g))/dxdy3").replaceAll("y", "z")); [EOL]     referenceRules.put("d4(f(g))/dxdt3", referenceRules.get("d4(f(g))/dxdy3").replaceAll("y", "t")); [EOL]     referenceRules.put("d4(f(g))/dy3dz", referenceRules.get("d4(f(g))/dx3dz").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dy3dt", referenceRules.get("d4(f(g))/dx3dt").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dydz3", referenceRules.get("d4(f(g))/dxdz3").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dydt3", referenceRules.get("d4(f(g))/dxdt3").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dz3dt", referenceRules.get("d4(f(g))/dx3dt").replaceAll("x", "z")); [EOL]     referenceRules.put("d4(f(g))/dzdt3", referenceRules.get("d4(f(g))/dxdt3").replaceAll("x", "z")); [EOL]     referenceRules.put("d4(f(g))/dx2dy2", "d4(f(g))/dg4 * dg/dx * dg/dx * dg/dy * dg/dy +" + " 4 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dxdy +" + " d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dy2 +" + " 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dxdy +" + " 2 * d2(f(g))/dg2 * dg/dx * d3g/dxdy2 +" + " d3(f(g))/dg3 * d2g/dx2 * dg/dy * dg/dy +" + " 2 * d2(f(g))/dg2 * dg/dy * d3g/dx2dy +" + " d2(f(g))/dg2 * d2g/dx2 * d2g/dy2 +" + " d(f(g))/dg * d4g/dx2dy2"); [EOL]     referenceRules.put("d4(f(g))/dx2dz2", referenceRules.get("d4(f(g))/dx2dy2").replaceAll("y", "z")); [EOL]     referenceRules.put("d4(f(g))/dx2dt2", referenceRules.get("d4(f(g))/dx2dy2").replaceAll("y", "t")); [EOL]     referenceRules.put("d4(f(g))/dy2dz2", referenceRules.get("d4(f(g))/dx2dz2").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dy2dt2", referenceRules.get("d4(f(g))/dx2dt2").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dz2dt2", referenceRules.get("d4(f(g))/dx2dt2").replaceAll("x", "z")); [EOL]     referenceRules.put("d4(f(g))/dx2dydz", "d4(f(g))/dg4 * dg/dx * dg/dx * dg/dy * dg/dz +" + " 2 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dxdz +" + " d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dydz +" + " 2 * d3(f(g))/dg3 * dg/dx * d2g/dxdy * dg/dz +" + " 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dxdz +" + " 2 * d2(f(g))/dg2 * dg/dx * d3g/dxdydz +" + " d3(f(g))/dg3 * d2g/dx2 * dg/dy * dg/dz +" + " d2(f(g))/dg2 * dg/dy * d3g/dx2dz +" + " d2(f(g))/dg2 * d2g/dx2 * d2g/dydz +" + " d2(f(g))/dg2 * d3g/dx2dy * dg/dz +" + " d(f(g))/dg * d4g/dx2dydz"); [EOL]     referenceRules.put("d4(f(g))/dx2dydt", referenceRules.get("d4(f(g))/dx2dydz").replaceAll("z", "t")); [EOL]     referenceRules.put("d4(f(g))/dx2dzdt", referenceRules.get("d4(f(g))/dx2dydt").replaceAll("y", "z")); [EOL]     referenceRules.put("d4(f(g))/dxdy2dz", "d4(f(g))/dg4 * dg/dx * dg/dy * dg/dy * dg/dz +" + " d3(f(g))/dg3 * dg/dy * dg/dy * d2g/dxdz +" + " 2 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dydz +" + " 2 * d3(f(g))/dg3 * dg/dy * d2g/dxdy * dg/dz +" + " 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dydz +" + " 2 * d2(f(g))/dg2 * dg/dy * d3g/dxdydz +" + " d3(f(g))/dg3 * dg/dx * d2g/dy2 * dg/dz +" + " d2(f(g))/dg2 * d2g/dy2 * d2g/dxdz +" + " d2(f(g))/dg2 * dg/dx * d3g/dy2dz +" + " d2(f(g))/dg2 * d3g/dxdy2 * dg/dz +" + " d(f(g))/dg * d4g/dxdy2dz"); [EOL]     referenceRules.put("d4(f(g))/dxdy2dt", referenceRules.get("d4(f(g))/dxdy2dz").replaceAll("z", "t")); [EOL]     referenceRules.put("d4(f(g))/dy2dzdt", referenceRules.get("d4(f(g))/dx2dzdt").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dxdydz2", "d4(f(g))/dg4 * dg/dx * dg/dy * dg/dz * dg/dz +" + " 2 * d3(f(g))/dg3 * dg/dy * dg/dz * d2g/dxdz +" + " 2 * d3(f(g))/dg3 * dg/dx * dg/dz * d2g/dydz +" + " d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dz2 +" + " 2 * d2(f(g))/dg2 * d2g/dxdz * d2g/dydz +" + " d2(f(g))/dg2 * dg/dy * d3g/dxdz2 +" + " d2(f(g))/dg2 * dg/dx * d3g/dydz2 +" + " d3(f(g))/dg3 * d2g/dxdy * dg/dz * dg/dz +" + " 2 * d2(f(g))/dg2 * dg/dz * d3g/dxdydz +" + " d2(f(g))/dg2 * d2g/dxdy * d2g/dz2 +" + " d(f(g))/dg * d4g/dxdydz2"); [EOL]     referenceRules.put("d4(f(g))/dxdz2dt", referenceRules.get("d4(f(g))/dxdy2dt").replaceAll("y", "z")); [EOL]     referenceRules.put("d4(f(g))/dydz2dt", referenceRules.get("d4(f(g))/dxdz2dt").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dxdydt2", referenceRules.get("d4(f(g))/dxdydz2").replaceAll("z", "t")); [EOL]     referenceRules.put("d4(f(g))/dxdzdt2", referenceRules.get("d4(f(g))/dxdydt2").replaceAll("y", "z")); [EOL]     referenceRules.put("d4(f(g))/dydzdt2", referenceRules.get("d4(f(g))/dxdzdt2").replaceAll("x", "y")); [EOL]     referenceRules.put("d4(f(g))/dxdydzdt", "d4(f(g))/dg4 * dg/dx * dg/dy * dg/dz * dg/dt +" + " d3(f(g))/dg3 * dg/dy * dg/dz * d2g/dxdt +" + " d3(f(g))/dg3 * dg/dx * dg/dz * d2g/dydt +" + " d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dzdt +" + " d3(f(g))/dg3 * dg/dy * d2g/dxdz * dg/dt +" + " d2(f(g))/dg2 * d2g/dxdz * d2g/dydt +" + " d2(f(g))/dg2 * dg/dy * d3g/dxdzdt +" + " d3(f(g))/dg3 * dg/dx * d2g/dydz * dg/dt +" + " d2(f(g))/dg2 * d2g/dydz * d2g/dxdt +" + " d2(f(g))/dg2 * dg/dx * d3g/dydzdt +" + " d3(f(g))/dg3 * d2g/dxdy * dg/dz * dg/dt +" + " d2(f(g))/dg2 * dg/dz * d3g/dxdydt +" + " d2(f(g))/dg2 * d2g/dxdy * d2g/dzdt +" + " d2(f(g))/dg2 * d3g/dxdydz * dg/dt +" + " d(f(g))/dg * d4g/dxdydzdt"); [EOL]     Field compFieldArrayField = DSCompiler.class.getDeclaredField("compIndirection"); [EOL]     compFieldArrayField.setAccessible(true); [EOL]     for (int i = 0; i < 5; ++i) { [EOL]         for (int j = 0; j < 5; ++j) { [EOL]             DSCompiler compiler = DSCompiler.getCompiler(i, j); [EOL]             int[][][] compIndirection = (int[][][]) compFieldArrayField.get(compiler); [EOL]             for (int k = 0; k < compIndirection.length; ++k) { [EOL]                 String product = ordersToString(compiler.getPartialDerivativeOrders(k), "(f(g))", "x", "y", "z", "t"); [EOL]                 StringBuilder rule = new StringBuilder(); [EOL]                 for (int[] term : compIndirection[k]) { [EOL]                     if (rule.length() > 0) { [EOL]                         rule.append(" + "); [EOL]                     } [EOL]                     if (term[0] > 1) { [EOL]                         rule.append(term[0]).append(" * "); [EOL]                     } [EOL]                     rule.append(orderToString(term[1], "(f(g))", "g")); [EOL]                     for (int l = 2; l < term.length; ++l) { [EOL]                         rule.append(" * "); [EOL]                         rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[l]), "g", "x", "y", "z", "t")); [EOL]                     } [EOL]                 } [EOL]                 Assert.assertEquals(product, referenceRules.get(product), rule.toString()); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 243,429
private void checkIndices(int[] indices, int... expected) { [EOL]     Assert.assertEquals(expected.length, indices.length); [EOL]     for (int i = 0; i < expected.length; ++i) { [EOL]         Assert.assertEquals(expected[i], indices[i]); [EOL]     } [EOL] } <line_num>: 431,436
private String orderToString(int order, String functionName, String parameterName) { [EOL]     if (order == 0) { [EOL]         return functionName; [EOL]     } else if (order == 1) { [EOL]         return "d" + functionName + "/d" + parameterName; [EOL]     } else { [EOL]         return "d" + order + functionName + "/d" + parameterName + order; [EOL]     } [EOL] } <line_num>: 438,446
private String ordersToString(int[] orders, String functionName, String... parametersNames) { [EOL]     int sumOrders = 0; [EOL]     for (int order : orders) { [EOL]         sumOrders += order; [EOL]     } [EOL]     if (sumOrders == 0) { [EOL]         return functionName; [EOL]     } [EOL]     StringBuilder builder = new StringBuilder(); [EOL]     builder.append('d'); [EOL]     if (sumOrders > 1) { [EOL]         builder.append(sumOrders); [EOL]     } [EOL]     builder.append(functionName).append('/'); [EOL]     for (int i = 0; i < orders.length; ++i) { [EOL]         if (orders[i] > 0) { [EOL]             builder.append('d').append(parametersNames[i]); [EOL]             if (orders[i] > 1) { [EOL]                 builder.append(orders[i]); [EOL]             } [EOL]         } [EOL]     } [EOL]     return builder.toString(); [EOL] } <line_num>: 448,475
