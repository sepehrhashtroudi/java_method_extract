@Test [EOL] public void testConstructor() { [EOL]     PolynomialSplineFunction spline = new PolynomialSplineFunction(knots, polynomials); [EOL]     Assert.assertTrue(Arrays.equals(knots, spline.getKnots())); [EOL]     Assert.assertEquals(1d, spline.getPolynomials()[0].getCoefficients()[2], 0); [EOL]     Assert.assertEquals(3, spline.getN()); [EOL]     try { [EOL]         new PolynomialSplineFunction(new double[] { 0 }, polynomials); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new PolynomialSplineFunction(new double[] { 0, 1, 2, 3, 4 }, polynomials); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new PolynomialSplineFunction(new double[] { 0, 1, 3, 2 }, polynomials); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 62,90
@Test [EOL] public void testValues() { [EOL]     PolynomialSplineFunction spline = new PolynomialSplineFunction(knots, polynomials); [EOL]     UnivariateFunction dSpline = spline.derivative(); [EOL]     double x = -1; [EOL]     int index = 0; [EOL]     for (int i = 0; i < 10; i++) { [EOL]         x += 0.25; [EOL]         index = findKnot(knots, x); [EOL]         Assert.assertEquals("spline function evaluation failed for x=" + x, polynomials[index].value(x - knots[index]), spline.value(x), tolerance); [EOL]         Assert.assertEquals("spline derivative evaluation failed for x=" + x, dp.value(x - knots[index]), dSpline.value(x), tolerance); [EOL]     } [EOL]     for (int i = 0; i < 3; i++) { [EOL]         Assert.assertEquals("spline function evaluation failed for knot=" + knots[i], polynomials[i].value(0), spline.value(knots[i]), tolerance); [EOL]         Assert.assertEquals("spline function evaluation failed for knot=" + knots[i], dp.value(0), dSpline.value(knots[i]), tolerance); [EOL]     } [EOL]     try { [EOL]         x = spline.value(-1.5); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL]     try { [EOL]         x = spline.value(2.5); [EOL]         Assert.fail("Expecting OutOfRangeException"); [EOL]     } catch (OutOfRangeException ex) { [EOL]     } [EOL] } <line_num>: 92,135
@Test [EOL] public void testIsValidPoint() { [EOL]     final PolynomialSplineFunction spline = new PolynomialSplineFunction(knots, polynomials); [EOL]     final double xMin = knots[0]; [EOL]     final double xMax = knots[knots.length - 1]; [EOL]     double x; [EOL]     x = xMin; [EOL]     Assert.assertTrue(spline.isValidPoint(x)); [EOL]     spline.value(x); [EOL]     x = xMax; [EOL]     Assert.assertTrue(spline.isValidPoint(x)); [EOL]     spline.value(x); [EOL]     final double xRange = xMax - xMin; [EOL]     x = xMin + xRange / 3.4; [EOL]     Assert.assertTrue(spline.isValidPoint(x)); [EOL]     spline.value(x); [EOL]     final double small = 1e-8; [EOL]     x = xMin - small; [EOL]     Assert.assertFalse(spline.isValidPoint(x)); [EOL]     try { [EOL]         spline.value(x); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException expected) { [EOL]     } [EOL] } <line_num>: 137,170
protected int findKnot(double[] knots, double x) { [EOL]     if (x < knots[0] || x >= knots[knots.length - 1]) { [EOL]         throw new OutOfRangeException(x, knots[0], knots[knots.length - 1]); [EOL]     } [EOL]     for (int i = 0; i < knots.length; i++) { [EOL]         if (knots[i] > x) { [EOL]             return i - 1; [EOL]         } [EOL]     } [EOL]     throw new MathIllegalStateException(); [EOL] } <line_num>: 176,186
