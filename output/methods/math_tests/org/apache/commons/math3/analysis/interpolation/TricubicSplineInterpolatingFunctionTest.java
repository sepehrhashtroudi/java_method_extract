@Test [EOL] public void testPreconditions() { [EOL]     double[] xval = new double[] { 3, 4, 5, 6.5 }; [EOL]     double[] yval = new double[] { -4, -3, -1, 2.5 }; [EOL]     double[] zval = new double[] { -12, -8, -5.5, -3, 0, 2.5 }; [EOL]     double[][][] fval = new double[xval.length][yval.length][zval.length]; [EOL]     @SuppressWarnings("unused") [EOL]     TrivariateFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, fval, fval, fval); [EOL]     double[] wxval = new double[] { 3, 2, 5, 6.5 }; [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(wxval, yval, zval, fval, fval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     double[] wyval = new double[] { -4, -1, -1, 2.5 }; [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, wyval, zval, fval, fval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     double[] wzval = new double[] { -12, -8, -9, -3, 0, 2.5 }; [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, wzval, fval, fval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     double[][][] wfval = new double[xval.length - 1][yval.length - 1][zval.length]; [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, wfval, fval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, wfval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, wfval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, wfval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, wfval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, wfval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, fval, wfval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, fval, fval, wfval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     wfval = new double[xval.length][yval.length - 1][zval.length]; [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, wfval, fval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, wfval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, wfval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, wfval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, wfval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, wfval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, fval, wfval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, fval, fval, wfval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     wfval = new double[xval.length][yval.length][zval.length - 1]; [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, wfval, fval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, wfval, fval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, wfval, fval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, wfval, fval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, wfval, fval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, wfval, fval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, fval, wfval, fval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, fval, fval, fval, fval, fval, fval, wfval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL] } <line_num>: 35,269
public double value(double x, double y, double z) { [EOL]     return 2 * x - 3 * y - 4 * z + 5; [EOL] } <line_num>: 285,287
@Test [EOL] public void testPlane() { [EOL]     double[] xval = new double[] { 3, 4, 5, 6.5 }; [EOL]     double[] yval = new double[] { -4, -3, -1, 2, 2.5 }; [EOL]     double[] zval = new double[] { -12, -8, -5.5, -3, 0, 2.5 }; [EOL]     TrivariateFunction f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return 2 * x - 3 * y - 4 * z + 5; [EOL]         } [EOL]     }; [EOL]     double[][][] fval = new double[xval.length][yval.length][zval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 fval[i][j][k] = f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] dFdX = new double[xval.length][yval.length][zval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 dFdX[i][j][k] = 2; [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] dFdY = new double[xval.length][yval.length][zval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 dFdY[i][j][k] = -3; [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] dFdZ = new double[xval.length][yval.length][zval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 dFdZ[i][j][k] = -4; [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] d2FdXdY = new double[xval.length][yval.length][zval.length]; [EOL]     double[][][] d2FdXdZ = new double[xval.length][yval.length][zval.length]; [EOL]     double[][][] d2FdYdZ = new double[xval.length][yval.length][zval.length]; [EOL]     double[][][] d3FdXdYdZ = new double[xval.length][yval.length][zval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 d2FdXdY[i][j][k] = 0; [EOL]                 d2FdXdZ[i][j][k] = 0; [EOL]                 d2FdYdZ[i][j][k] = 0; [EOL]                 d3FdXdYdZ[i][j][k] = 0; [EOL]             } [EOL]         } [EOL]     } [EOL]     TrivariateFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, dFdX, dFdY, dFdZ, d2FdXdY, d2FdXdZ, d2FdYdZ, d3FdXdYdZ); [EOL]     double x, y, z; [EOL]     double expected, result; [EOL]     x = 4; [EOL]     y = -3; [EOL]     z = 0; [EOL]     expected = f.value(x, y, z); [EOL]     result = tcf.value(x, y, z); [EOL]     Assert.assertEquals("On sample point", expected, result, 1e-15); [EOL]     x = 4.5; [EOL]     y = -1.5; [EOL]     z = -4.25; [EOL]     expected = f.value(x, y, z); [EOL]     result = tcf.value(x, y, z); [EOL]     Assert.assertEquals("Half-way between sample points (middle of the patch)", expected, result, 0.3); [EOL]     x = 3.5; [EOL]     y = -3.5; [EOL]     z = -10; [EOL]     expected = f.value(x, y, z); [EOL]     result = tcf.value(x, y, z); [EOL]     Assert.assertEquals("Half-way between sample points (border of the patch)", expected, result, 0.3); [EOL] } <line_num>: 277,373
public double value(double x, double y, double z) { [EOL]     return a * FastMath.cos(omega * z - kx * x - ky * y); [EOL] } <line_num>: 395,397
public double value(double x, double y, double z) { [EOL]     return a * FastMath.sin(omega * z - kx * x - ky * y) * kx; [EOL] } <line_num>: 412,414
public double value(double x, double y, double z) { [EOL]     return a * FastMath.sin(omega * z - kx * x - ky * y) * ky; [EOL] } <line_num>: 427,429
public double value(double x, double y, double z) { [EOL]     return -a * FastMath.sin(omega * z - kx * x - ky * y) * omega; [EOL] } <line_num>: 442,444
public double value(double x, double y, double z) { [EOL]     return -a * FastMath.cos(omega * z - kx * x - ky * y) * kx * ky; [EOL] } <line_num>: 457,459
public double value(double x, double y, double z) { [EOL]     return a * FastMath.cos(omega * z - kx * x - ky * y) * kx * omega; [EOL] } <line_num>: 472,474
public double value(double x, double y, double z) { [EOL]     return a * FastMath.cos(omega * z - kx * x - ky * y) * ky * omega; [EOL] } <line_num>: 487,489
public double value(double x, double y, double z) { [EOL]     return a * FastMath.sin(omega * z - kx * x - ky * y) * kx * ky * omega; [EOL] } <line_num>: 502,504
@Test [EOL] public void testWave() { [EOL]     double[] xval = new double[] { 3, 4, 5, 6.5 }; [EOL]     double[] yval = new double[] { -4, -3, -1, 2, 2.5 }; [EOL]     double[] zval = new double[] { -12, -8, -5.5, -3, 0, 4 }; [EOL]     final double a = 0.2; [EOL]     final double omega = 0.5; [EOL]     final double kx = 2; [EOL]     final double ky = 1; [EOL]     TrivariateFunction f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return a * FastMath.cos(omega * z - kx * x - ky * y); [EOL]         } [EOL]     }; [EOL]     double[][][] fval = new double[xval.length][yval.length][zval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 fval[i][j][k] = f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] dFdX = new double[xval.length][yval.length][zval.length]; [EOL]     TrivariateFunction dFdX_f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return a * FastMath.sin(omega * z - kx * x - ky * y) * kx; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 dFdX[i][j][k] = dFdX_f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] dFdY = new double[xval.length][yval.length][zval.length]; [EOL]     TrivariateFunction dFdY_f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return a * FastMath.sin(omega * z - kx * x - ky * y) * ky; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 dFdY[i][j][k] = dFdY_f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] dFdZ = new double[xval.length][yval.length][zval.length]; [EOL]     TrivariateFunction dFdZ_f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return -a * FastMath.sin(omega * z - kx * x - ky * y) * omega; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 dFdZ[i][j][k] = dFdZ_f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] d2FdXdY = new double[xval.length][yval.length][zval.length]; [EOL]     TrivariateFunction d2FdXdY_f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return -a * FastMath.cos(omega * z - kx * x - ky * y) * kx * ky; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 d2FdXdY[i][j][k] = d2FdXdY_f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] d2FdXdZ = new double[xval.length][yval.length][zval.length]; [EOL]     TrivariateFunction d2FdXdZ_f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return a * FastMath.cos(omega * z - kx * x - ky * y) * kx * omega; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 d2FdXdZ[i][j][k] = d2FdXdZ_f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] d2FdYdZ = new double[xval.length][yval.length][zval.length]; [EOL]     TrivariateFunction d2FdYdZ_f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return a * FastMath.cos(omega * z - kx * x - ky * y) * ky * omega; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 d2FdYdZ[i][j][k] = d2FdYdZ_f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     double[][][] d3FdXdYdZ = new double[xval.length][yval.length][zval.length]; [EOL]     TrivariateFunction d3FdXdYdZ_f = new TrivariateFunction() { [EOL]  [EOL]         public double value(double x, double y, double z) { [EOL]             return a * FastMath.sin(omega * z - kx * x - ky * y) * kx * ky * omega; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             for (int k = 0; k < zval.length; k++) { [EOL]                 d3FdXdYdZ[i][j][k] = d3FdXdYdZ_f.value(xval[i], yval[j], zval[k]); [EOL]             } [EOL]         } [EOL]     } [EOL]     TrivariateFunction tcf = new TricubicSplineInterpolatingFunction(xval, yval, zval, fval, dFdX, dFdY, dFdZ, d2FdXdY, d2FdXdZ, d2FdYdZ, d3FdXdYdZ); [EOL]     double x, y, z; [EOL]     double expected, result; [EOL]     x = 4; [EOL]     y = -3; [EOL]     z = 0; [EOL]     expected = f.value(x, y, z); [EOL]     result = tcf.value(x, y, z); [EOL]     Assert.assertEquals("On sample point", expected, result, 1e-14); [EOL]     x = 4.5; [EOL]     y = -1.5; [EOL]     z = -4.25; [EOL]     expected = f.value(x, y, z); [EOL]     result = tcf.value(x, y, z); [EOL]     Assert.assertEquals("Half-way between sample points (middle of the patch)", expected, result, 0.1); [EOL]     x = 3.5; [EOL]     y = -3.5; [EOL]     z = -10; [EOL]     expected = f.value(x, y, z); [EOL]     result = tcf.value(x, y, z); [EOL]     Assert.assertEquals("Half-way between sample points (border of the patch)", expected, result, 0.1); [EOL] } <line_num>: 382,544
