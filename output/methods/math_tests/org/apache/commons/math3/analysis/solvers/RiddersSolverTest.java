@Test [EOL] public void testSinFunction() { [EOL]     UnivariateFunction f = new Sin(); [EOL]     UnivariateSolver solver = new RiddersSolver(); [EOL]     double min, max, expected, result, tolerance; [EOL]     min = 3.0; [EOL]     max = 4.0; [EOL]     expected = FastMath.PI; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -1.0; [EOL]     max = 1.5; [EOL]     expected = 0.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 44,61
@Test [EOL] public void testQuinticFunction() { [EOL]     UnivariateFunction f = new QuinticFunction(); [EOL]     UnivariateSolver solver = new RiddersSolver(); [EOL]     double min, max, expected, result, tolerance; [EOL]     min = -0.4; [EOL]     max = 0.2; [EOL]     expected = 0.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = 0.75; [EOL]     max = 1.5; [EOL]     expected = 1.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -0.9; [EOL]     max = -0.2; [EOL]     expected = -0.5; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 66,89
@Test [EOL] public void testExpm1Function() { [EOL]     UnivariateFunction f = new Expm1(); [EOL]     UnivariateSolver solver = new RiddersSolver(); [EOL]     double min, max, expected, result, tolerance; [EOL]     min = -1.0; [EOL]     max = 2.0; [EOL]     expected = 0.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -20.0; [EOL]     max = 10.0; [EOL]     expected = 0.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -50.0; [EOL]     max = 100.0; [EOL]     expected = 0.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 94,117
@Test [EOL] public void testParameters() { [EOL]     UnivariateFunction f = new Sin(); [EOL]     UnivariateSolver solver = new RiddersSolver(); [EOL]     try { [EOL]         solver.solve(100, f, 1, -1); [EOL]         Assert.fail("Expecting NumberIsTooLargeException - bad interval"); [EOL]     } catch (NumberIsTooLargeException ex) { [EOL]     } [EOL]     try { [EOL]         solver.solve(100, f, 2, 3); [EOL]         Assert.fail("Expecting NoBracketingException - no bracketing"); [EOL]     } catch (NoBracketingException ex) { [EOL]     } [EOL] } <line_num>: 122,141
