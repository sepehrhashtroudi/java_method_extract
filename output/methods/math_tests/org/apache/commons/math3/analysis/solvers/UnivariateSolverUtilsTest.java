@Test(expected = MathIllegalArgumentException.class) [EOL] public void testSolveNull() { [EOL]     UnivariateSolverUtils.solve(null, 0.0, 4.0); [EOL] } <line_num>: 35,38
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testSolveBadEndpoints() { [EOL]     double root = UnivariateSolverUtils.solve(sin, 4.0, -0.1, 1e-6); [EOL]     System.out.println("root=" + root); [EOL] } <line_num>: 40,44
@Test [EOL] public void testSolveBadAccuracy() { [EOL]     try { [EOL]         UnivariateSolverUtils.solve(sin, 0.0, 4.0, 0.0); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 46,54
@Test [EOL] public void testSolveSin() { [EOL]     double x = UnivariateSolverUtils.solve(sin, 1.0, 4.0); [EOL]     Assert.assertEquals(FastMath.PI, x, 1.0e-4); [EOL] } <line_num>: 56,60
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testSolveAccuracyNull() { [EOL]     double accuracy = 1.0e-6; [EOL]     UnivariateSolverUtils.solve(null, 0.0, 4.0, accuracy); [EOL] } <line_num>: 62,66
@Test [EOL] public void testSolveAccuracySin() { [EOL]     double accuracy = 1.0e-6; [EOL]     double x = UnivariateSolverUtils.solve(sin, 1.0, 4.0, accuracy); [EOL]     Assert.assertEquals(FastMath.PI, x, accuracy); [EOL] } <line_num>: 68,74
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testSolveNoRoot() { [EOL]     UnivariateSolverUtils.solve(sin, 1.0, 1.5); [EOL] } <line_num>: 76,79
@Test [EOL] public void testBracketSin() { [EOL]     double[] result = UnivariateSolverUtils.bracket(sin, 0.0, -2.0, 2.0); [EOL]     Assert.assertTrue(sin.value(result[0]) < 0); [EOL]     Assert.assertTrue(sin.value(result[1]) > 0); [EOL] } <line_num>: 81,87
@Test [EOL] public void testBracketEndpointRoot() { [EOL]     double[] result = UnivariateSolverUtils.bracket(sin, 1.5, 0, 2.0); [EOL]     Assert.assertEquals(0.0, sin.value(result[0]), 1.0e-15); [EOL]     Assert.assertTrue(sin.value(result[1]) > 0); [EOL] } <line_num>: 89,94
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testNullFunction() { [EOL]     UnivariateSolverUtils.bracket(null, 1.5, 0, 2.0); [EOL] } <line_num>: 96,99
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testBadInitial() { [EOL]     UnivariateSolverUtils.bracket(sin, 2.5, 0, 2.0); [EOL] } <line_num>: 101,104
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testBadEndpoints() { [EOL]     UnivariateSolverUtils.bracket(sin, 1.5, 2.0, 1.0); [EOL] } <line_num>: 106,110
@Test(expected = MathIllegalArgumentException.class) [EOL] public void testBadMaximumIterations() { [EOL]     UnivariateSolverUtils.bracket(sin, 1.5, 0, 2.0, 0); [EOL] } <line_num>: 112,116
@Test [EOL] public void testMisc() { [EOL]     UnivariateFunction f = new QuinticFunction(); [EOL]     double result; [EOL]     result = UnivariateSolverUtils.solve(f, -0.2, 0.2); [EOL]     Assert.assertEquals(result, 0, 1E-8); [EOL]     result = UnivariateSolverUtils.solve(f, -0.1, 0.3); [EOL]     Assert.assertEquals(result, 0, 1E-8); [EOL]     result = UnivariateSolverUtils.solve(f, -0.3, 0.45); [EOL]     Assert.assertEquals(result, 0, 1E-6); [EOL]     result = UnivariateSolverUtils.solve(f, 0.3, 0.7); [EOL]     Assert.assertEquals(result, 0.5, 1E-6); [EOL]     result = UnivariateSolverUtils.solve(f, 0.2, 0.6); [EOL]     Assert.assertEquals(result, 0.5, 1E-6); [EOL]     result = UnivariateSolverUtils.solve(f, 0.05, 0.95); [EOL]     Assert.assertEquals(result, 0.5, 1E-6); [EOL]     result = UnivariateSolverUtils.solve(f, 0.85, 1.25); [EOL]     Assert.assertEquals(result, 1.0, 1E-6); [EOL]     result = UnivariateSolverUtils.solve(f, 0.8, 1.2); [EOL]     Assert.assertEquals(result, 1.0, 1E-6); [EOL]     result = UnivariateSolverUtils.solve(f, 0.85, 1.75); [EOL]     Assert.assertEquals(result, 1.0, 1E-6); [EOL]     result = UnivariateSolverUtils.solve(f, 0.55, 1.45); [EOL]     Assert.assertEquals(result, 1.0, 1E-6); [EOL]     result = UnivariateSolverUtils.solve(f, 0.85, 5); [EOL]     Assert.assertEquals(result, 1.0, 1E-6); [EOL] } <line_num>: 118,145
