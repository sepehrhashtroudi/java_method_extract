@Test [EOL] public void testSinZero() { [EOL]     DifferentiableUnivariateFunction f = new Sin(); [EOL]     double result; [EOL]     NewtonSolver solver = new NewtonSolver(); [EOL]     result = solver.solve(100, f, 3, 4); [EOL]     Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 1, 4); [EOL]     Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy()); [EOL]     Assert.assertTrue(solver.getEvaluations() > 0); [EOL] } <line_num>: 39,52
public double value(double x) { [EOL]     return q.value(x); [EOL] } <line_num>: 62,64
public double value(double x) { [EOL]     return q.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1); [EOL] } <line_num>: 68,70
public UnivariateFunction derivative() { [EOL]     return new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return q.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1); [EOL]         } [EOL]     }; [EOL] } <line_num>: 66,72
@Test [EOL] public void testQuinticZero() { [EOL]     final UnivariateDifferentiableFunction q = new QuinticFunction(); [EOL]     DifferentiableUnivariateFunction f = new DifferentiableUnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return q.value(x); [EOL]         } [EOL]  [EOL]         public UnivariateFunction derivative() { [EOL]             return new UnivariateFunction() { [EOL]  [EOL]                 public double value(double x) { [EOL]                     return q.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1); [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL]     double result; [EOL]     NewtonSolver solver = new NewtonSolver(); [EOL]     result = solver.solve(100, f, -0.2, 0.2); [EOL]     Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, -0.1, 0.3); [EOL]     Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, -0.3, 0.45); [EOL]     Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 0.3, 0.7); [EOL]     Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 0.2, 0.6); [EOL]     Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 0.05, 0.95); [EOL]     Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 0.85, 1.25); [EOL]     Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 0.8, 1.2); [EOL]     Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 0.85, 1.75); [EOL]     Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 0.55, 1.45); [EOL]     Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy()); [EOL]     result = solver.solve(100, f, 0.85, 5); [EOL]     Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy()); [EOL] } <line_num>: 57,110
