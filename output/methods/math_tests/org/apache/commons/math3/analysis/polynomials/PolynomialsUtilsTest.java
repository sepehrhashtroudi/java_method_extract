@Test [EOL] public void testFirstChebyshevPolynomials() { [EOL]     checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(3), "-3 x + 4 x^3"); [EOL]     checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(2), "-1 + 2 x^2"); [EOL]     checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(1), "x"); [EOL]     checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(0), "1"); [EOL]     checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(7), "-7 x + 56 x^3 - 112 x^5 + 64 x^7"); [EOL]     checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(6), "-1 + 18 x^2 - 48 x^4 + 32 x^6"); [EOL]     checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(5), "5 x - 20 x^3 + 16 x^5"); [EOL]     checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(4), "1 - 8 x^2 + 8 x^4"); [EOL] } <line_num>: 34,46
@Test [EOL] public void testChebyshevBounds() { [EOL]     for (int k = 0; k < 12; ++k) { [EOL]         PolynomialFunction Tk = PolynomialsUtils.createChebyshevPolynomial(k); [EOL]         for (double x = -1; x <= 1; x += 0.02) { [EOL]             Assert.assertTrue(k + " " + Tk.value(x), FastMath.abs(Tk.value(x)) < (1 + 1e-12)); [EOL]         } [EOL]     } [EOL] } <line_num>: 48,56
@Test [EOL] public void testChebyshevDifferentials() { [EOL]     for (int k = 0; k < 12; ++k) { [EOL]         PolynomialFunction Tk0 = PolynomialsUtils.createChebyshevPolynomial(k); [EOL]         PolynomialFunction Tk1 = Tk0.polynomialDerivative(); [EOL]         PolynomialFunction Tk2 = Tk1.polynomialDerivative(); [EOL]         PolynomialFunction g0 = new PolynomialFunction(new double[] { k * k }); [EOL]         PolynomialFunction g1 = new PolynomialFunction(new double[] { 0, -1 }); [EOL]         PolynomialFunction g2 = new PolynomialFunction(new double[] { 1, 0, -1 }); [EOL]         PolynomialFunction Tk0g0 = Tk0.multiply(g0); [EOL]         PolynomialFunction Tk1g1 = Tk1.multiply(g1); [EOL]         PolynomialFunction Tk2g2 = Tk2.multiply(g2); [EOL]         checkNullPolynomial(Tk0g0.add(Tk1g1.add(Tk2g2))); [EOL]     } [EOL] } <line_num>: 58,77
public double value(double x) { [EOL]     return 1 / FastMath.sqrt(1 - x * x); [EOL] } <line_num>: 82,84
@Test [EOL] public void testChebyshevOrthogonality() { [EOL]     UnivariateFunction weight = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return 1 / FastMath.sqrt(1 - x * x); [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         PolynomialFunction pi = PolynomialsUtils.createChebyshevPolynomial(i); [EOL]         for (int j = 0; j <= i; ++j) { [EOL]             PolynomialFunction pj = PolynomialsUtils.createChebyshevPolynomial(j); [EOL]             checkOrthogonality(pi, pj, weight, -0.9999, 0.9999, 1.5, 0.03); [EOL]         } [EOL]     } [EOL] } <line_num>: 79,93
@Test [EOL] public void testFirstHermitePolynomials() { [EOL]     checkPolynomial(PolynomialsUtils.createHermitePolynomial(3), "-12 x + 8 x^3"); [EOL]     checkPolynomial(PolynomialsUtils.createHermitePolynomial(2), "-2 + 4 x^2"); [EOL]     checkPolynomial(PolynomialsUtils.createHermitePolynomial(1), "2 x"); [EOL]     checkPolynomial(PolynomialsUtils.createHermitePolynomial(0), "1"); [EOL]     checkPolynomial(PolynomialsUtils.createHermitePolynomial(7), "-1680 x + 3360 x^3 - 1344 x^5 + 128 x^7"); [EOL]     checkPolynomial(PolynomialsUtils.createHermitePolynomial(6), "-120 + 720 x^2 - 480 x^4 + 64 x^6"); [EOL]     checkPolynomial(PolynomialsUtils.createHermitePolynomial(5), "120 x - 160 x^3 + 32 x^5"); [EOL]     checkPolynomial(PolynomialsUtils.createHermitePolynomial(4), "12 - 48 x^2 + 16 x^4"); [EOL] } <line_num>: 95,107
@Test [EOL] public void testHermiteDifferentials() { [EOL]     for (int k = 0; k < 12; ++k) { [EOL]         PolynomialFunction Hk0 = PolynomialsUtils.createHermitePolynomial(k); [EOL]         PolynomialFunction Hk1 = Hk0.polynomialDerivative(); [EOL]         PolynomialFunction Hk2 = Hk1.polynomialDerivative(); [EOL]         PolynomialFunction g0 = new PolynomialFunction(new double[] { 2 * k }); [EOL]         PolynomialFunction g1 = new PolynomialFunction(new double[] { 0, -2 }); [EOL]         PolynomialFunction g2 = new PolynomialFunction(new double[] { 1 }); [EOL]         PolynomialFunction Hk0g0 = Hk0.multiply(g0); [EOL]         PolynomialFunction Hk1g1 = Hk1.multiply(g1); [EOL]         PolynomialFunction Hk2g2 = Hk2.multiply(g2); [EOL]         checkNullPolynomial(Hk0g0.add(Hk1g1.add(Hk2g2))); [EOL]     } [EOL] } <line_num>: 109,128
public double value(double x) { [EOL]     return FastMath.exp(-x * x); [EOL] } <line_num>: 133,135
@Test [EOL] public void testHermiteOrthogonality() { [EOL]     UnivariateFunction weight = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return FastMath.exp(-x * x); [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         PolynomialFunction pi = PolynomialsUtils.createHermitePolynomial(i); [EOL]         for (int j = 0; j <= i; ++j) { [EOL]             PolynomialFunction pj = PolynomialsUtils.createHermitePolynomial(j); [EOL]             checkOrthogonality(pi, pj, weight, -50, 50, 1.5, 1.0e-8); [EOL]         } [EOL]     } [EOL] } <line_num>: 130,144
@Test [EOL] public void testFirstLaguerrePolynomials() { [EOL]     checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(3), 6l, "6 - 18 x + 9 x^2 - x^3"); [EOL]     checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(2), 2l, "2 - 4 x + x^2"); [EOL]     checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(1), 1l, "1 - x"); [EOL]     checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(0), 1l, "1"); [EOL]     checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(7), 5040l, "5040 - 35280 x + 52920 x^2 - 29400 x^3" + " + 7350 x^4 - 882 x^5 + 49 x^6 - x^7"); [EOL]     checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(6), 720l, "720 - 4320 x + 5400 x^2 - 2400 x^3 + 450 x^4" + " - 36 x^5 + x^6"); [EOL]     checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(5), 120l, "120 - 600 x + 600 x^2 - 200 x^3 + 25 x^4 - x^5"); [EOL]     checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(4), 24l, "24 - 96 x + 72 x^2 - 16 x^3 + x^4"); [EOL] } <line_num>: 146,164
@Test [EOL] public void testLaguerreDifferentials() { [EOL]     for (int k = 0; k < 12; ++k) { [EOL]         PolynomialFunction Lk0 = PolynomialsUtils.createLaguerrePolynomial(k); [EOL]         PolynomialFunction Lk1 = Lk0.polynomialDerivative(); [EOL]         PolynomialFunction Lk2 = Lk1.polynomialDerivative(); [EOL]         PolynomialFunction g0 = new PolynomialFunction(new double[] { k }); [EOL]         PolynomialFunction g1 = new PolynomialFunction(new double[] { 1, -1 }); [EOL]         PolynomialFunction g2 = new PolynomialFunction(new double[] { 0, 1 }); [EOL]         PolynomialFunction Lk0g0 = Lk0.multiply(g0); [EOL]         PolynomialFunction Lk1g1 = Lk1.multiply(g1); [EOL]         PolynomialFunction Lk2g2 = Lk2.multiply(g2); [EOL]         checkNullPolynomial(Lk0g0.add(Lk1g1.add(Lk2g2))); [EOL]     } [EOL] } <line_num>: 166,185
public double value(double x) { [EOL]     return FastMath.exp(-x); [EOL] } <line_num>: 190,192
@Test [EOL] public void testLaguerreOrthogonality() { [EOL]     UnivariateFunction weight = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return FastMath.exp(-x); [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         PolynomialFunction pi = PolynomialsUtils.createLaguerrePolynomial(i); [EOL]         for (int j = 0; j <= i; ++j) { [EOL]             PolynomialFunction pj = PolynomialsUtils.createLaguerrePolynomial(j); [EOL]             checkOrthogonality(pi, pj, weight, 0.0, 100.0, 0.99999, 1.0e-13); [EOL]         } [EOL]     } [EOL] } <line_num>: 187,201
@Test [EOL] public void testFirstLegendrePolynomials() { [EOL]     checkPolynomial(PolynomialsUtils.createLegendrePolynomial(3), 2l, "-3 x + 5 x^3"); [EOL]     checkPolynomial(PolynomialsUtils.createLegendrePolynomial(2), 2l, "-1 + 3 x^2"); [EOL]     checkPolynomial(PolynomialsUtils.createLegendrePolynomial(1), 1l, "x"); [EOL]     checkPolynomial(PolynomialsUtils.createLegendrePolynomial(0), 1l, "1"); [EOL]     checkPolynomial(PolynomialsUtils.createLegendrePolynomial(7), 16l, "-35 x + 315 x^3 - 693 x^5 + 429 x^7"); [EOL]     checkPolynomial(PolynomialsUtils.createLegendrePolynomial(6), 16l, "-5 + 105 x^2 - 315 x^4 + 231 x^6"); [EOL]     checkPolynomial(PolynomialsUtils.createLegendrePolynomial(5), 8l, "15 x - 70 x^3 + 63 x^5"); [EOL]     checkPolynomial(PolynomialsUtils.createLegendrePolynomial(4), 8l, "3 - 30 x^2 + 35 x^4"); [EOL] } <line_num>: 203,215
@Test [EOL] public void testLegendreDifferentials() { [EOL]     for (int k = 0; k < 12; ++k) { [EOL]         PolynomialFunction Pk0 = PolynomialsUtils.createLegendrePolynomial(k); [EOL]         PolynomialFunction Pk1 = Pk0.polynomialDerivative(); [EOL]         PolynomialFunction Pk2 = Pk1.polynomialDerivative(); [EOL]         PolynomialFunction g0 = new PolynomialFunction(new double[] { k * (k + 1) }); [EOL]         PolynomialFunction g1 = new PolynomialFunction(new double[] { 0, -2 }); [EOL]         PolynomialFunction g2 = new PolynomialFunction(new double[] { 1, 0, -1 }); [EOL]         PolynomialFunction Pk0g0 = Pk0.multiply(g0); [EOL]         PolynomialFunction Pk1g1 = Pk1.multiply(g1); [EOL]         PolynomialFunction Pk2g2 = Pk2.multiply(g2); [EOL]         checkNullPolynomial(Pk0g0.add(Pk1g1.add(Pk2g2))); [EOL]     } [EOL] } <line_num>: 217,236
public double value(double x) { [EOL]     return 1; [EOL] } <line_num>: 241,243
@Test [EOL] public void testLegendreOrthogonality() { [EOL]     UnivariateFunction weight = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         PolynomialFunction pi = PolynomialsUtils.createLegendrePolynomial(i); [EOL]         for (int j = 0; j <= i; ++j) { [EOL]             PolynomialFunction pj = PolynomialsUtils.createLegendrePolynomial(j); [EOL]             checkOrthogonality(pi, pj, weight, -1, 1, 0.1, 1.0e-13); [EOL]         } [EOL]     } [EOL] } <line_num>: 238,252
@Test [EOL] public void testHighDegreeLegendre() { [EOL]     PolynomialsUtils.createLegendrePolynomial(40); [EOL]     double[] l40 = PolynomialsUtils.createLegendrePolynomial(40).getCoefficients(); [EOL]     double denominator = 274877906944d; [EOL]     double[] numerators = new double[] { +34461632205d, -28258538408100d, +3847870979902950d, -207785032914759300d, +5929294332103310025d, -103301483474866556880d, +1197358103913226000200d, -9763073770369381232400d, +58171647881784229843050d, -260061484647976556945400d, +888315281771246239250340d, -2345767627188139419665400d, +4819022625419112503443050d, -7710436200670580005508880d, +9566652323054238154983240d, -9104813935044723209570256d, +6516550296251767619752905d, -3391858621221953912598660d, +1211378079007840683070950d, -265365894974690562152100d, +26876802183334044115405d }; [EOL]     for (int i = 0; i < l40.length; ++i) { [EOL]         if (i % 2 == 0) { [EOL]             double ci = numerators[i / 2] / denominator; [EOL]             Assert.assertEquals(ci, l40[i], FastMath.abs(ci) * 1e-15); [EOL]         } else { [EOL]             Assert.assertEquals(0, l40[i], 0); [EOL]         } [EOL]     } [EOL] } <line_num>: 254,275
@Test [EOL] public void testJacobiLegendre() { [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         PolynomialFunction legendre = PolynomialsUtils.createLegendrePolynomial(i); [EOL]         PolynomialFunction jacobi = PolynomialsUtils.createJacobiPolynomial(i, 0, 0); [EOL]         checkNullPolynomial(legendre.subtract(jacobi)); [EOL]     } [EOL] } <line_num>: 277,284
@Test [EOL] public void testJacobiEvaluationAt1() { [EOL]     for (int v = 0; v < 10; ++v) { [EOL]         for (int w = 0; w < 10; ++w) { [EOL]             for (int i = 0; i < 10; ++i) { [EOL]                 PolynomialFunction jacobi = PolynomialsUtils.createJacobiPolynomial(i, v, w); [EOL]                 double binomial = CombinatoricsUtils.binomialCoefficient(v + i, i); [EOL]                 Assert.assertTrue(Precision.equals(binomial, jacobi.value(1.0), 1)); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 286,297
public double value(double x) { [EOL]     return FastMath.pow(1 - x, vv) * FastMath.pow(1 + x, ww); [EOL] } <line_num>: 306,308
@Test [EOL] public void testJacobiOrthogonality() { [EOL]     for (int v = 0; v < 5; ++v) { [EOL]         for (int w = v; w < 5; ++w) { [EOL]             final int vv = v; [EOL]             final int ww = w; [EOL]             UnivariateFunction weight = new UnivariateFunction() { [EOL]  [EOL]                 public double value(double x) { [EOL]                     return FastMath.pow(1 - x, vv) * FastMath.pow(1 + x, ww); [EOL]                 } [EOL]             }; [EOL]             for (int i = 0; i < 10; ++i) { [EOL]                 PolynomialFunction pi = PolynomialsUtils.createJacobiPolynomial(i, v, w); [EOL]                 for (int j = 0; j <= i; ++j) { [EOL]                     PolynomialFunction pj = PolynomialsUtils.createJacobiPolynomial(j, v, w); [EOL]                     checkOrthogonality(pi, pj, weight, -1, 1, 0.1, 1.0e-12); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 299,319
@Test [EOL] public void testShift() { [EOL]     PolynomialFunction f1x = new PolynomialFunction(new double[] { 1, 1, 2 }); [EOL]     PolynomialFunction f1x1 = new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(), 1)); [EOL]     checkPolynomial(f1x1, "4 + 5 x + 2 x^2"); [EOL]     PolynomialFunction f1xM1 = new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(), -1)); [EOL]     checkPolynomial(f1xM1, "2 - 3 x + 2 x^2"); [EOL]     PolynomialFunction f1x3 = new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(), 3)); [EOL]     checkPolynomial(f1x3, "22 + 13 x + 2 x^2"); [EOL]     PolynomialFunction f2x = new PolynomialFunction(new double[] { 2, 0, 3, 8, 0, 121 }); [EOL]     PolynomialFunction f2x1 = new PolynomialFunction(PolynomialsUtils.shift(f2x.getCoefficients(), 1)); [EOL]     checkPolynomial(f2x1, "134 + 635 x + 1237 x^2 + 1218 x^3 + 605 x^4 + 121 x^5"); [EOL]     PolynomialFunction f2x3 = new PolynomialFunction(PolynomialsUtils.shift(f2x.getCoefficients(), 3)); [EOL]     checkPolynomial(f2x3, "29648 + 49239 x + 32745 x^2 + 10898 x^3 + 1815 x^4 + 121 x^5"); [EOL] } <line_num>: 321,348
private void checkPolynomial(PolynomialFunction p, long denominator, String reference) { [EOL]     PolynomialFunction q = new PolynomialFunction(new double[] { denominator }); [EOL]     Assert.assertEquals(reference, p.multiply(q).toString()); [EOL] } <line_num>: 351,354
private void checkPolynomial(PolynomialFunction p, String reference) { [EOL]     Assert.assertEquals(reference, p.toString()); [EOL] } <line_num>: 356,358
private void checkNullPolynomial(PolynomialFunction p) { [EOL]     for (double coefficient : p.getCoefficients()) { [EOL]         Assert.assertEquals(0, coefficient, 1e-13); [EOL]     } [EOL] } <line_num>: 360,364
public double value(double x) { [EOL]     return weight.value(x) * p1.value(x) * p2.value(x); [EOL] } <line_num>: 373,375
private void checkOrthogonality(final PolynomialFunction p1, final PolynomialFunction p2, final UnivariateFunction weight, final double a, final double b, final double nonZeroThreshold, final double zeroThreshold) { [EOL]     UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return weight.value(x) * p1.value(x) * p2.value(x); [EOL]         } [EOL]     }; [EOL]     double dotProduct = new IterativeLegendreGaussIntegrator(5, 1.0e-9, 1.0e-8, 2, 15).integrate(1000000, f, a, b); [EOL]     if (p1.degree() == p2.degree()) { [EOL]         Assert.assertTrue("I(" + p1.degree() + ", " + p2.degree() + ") = " + dotProduct, FastMath.abs(dotProduct) > nonZeroThreshold); [EOL]     } else { [EOL]         Assert.assertEquals("I(" + p1.degree() + ", " + p2.degree() + ") = " + dotProduct, 0.0, FastMath.abs(dotProduct), zeroThreshold); [EOL]     } [EOL] } <line_num>: 366,388
