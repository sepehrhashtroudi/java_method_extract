@Test [EOL] public void test2DDistance() { [EOL]     EuclideanDistance f = new EuclideanDistance(); [EOL]     GradientFunction g = new GradientFunction(f); [EOL]     for (double x = -10; x < 10; x += 0.5) { [EOL]         for (double y = -10; y < 10; y += 0.5) { [EOL]             double[] point = new double[] { x, y }; [EOL]             TestUtils.assertEquals(f.gradient(point), g.value(point), 1.0e-15); [EOL]         } [EOL]     } [EOL] } <line_num>: 32,42
@Test [EOL] public void test3DDistance() { [EOL]     EuclideanDistance f = new EuclideanDistance(); [EOL]     GradientFunction g = new GradientFunction(f); [EOL]     for (double x = -10; x < 10; x += 0.5) { [EOL]         for (double y = -10; y < 10; y += 0.5) { [EOL]             for (double z = -10; z < 10; z += 0.5) { [EOL]                 double[] point = new double[] { x, y, z }; [EOL]                 TestUtils.assertEquals(f.gradient(point), g.value(point), 1.0e-15); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 44,56
public double value(double[] point) { [EOL]     double d2 = 0; [EOL]     for (double x : point) { [EOL]         d2 += x * x; [EOL]     } [EOL]     return FastMath.sqrt(d2); [EOL] } <line_num>: 60,66
public DerivativeStructure value(DerivativeStructure[] point) throws DimensionMismatchException, MathIllegalArgumentException { [EOL]     DerivativeStructure d2 = point[0].getField().getZero(); [EOL]     for (DerivativeStructure x : point) { [EOL]         d2 = d2.add(x.multiply(x)); [EOL]     } [EOL]     return d2.sqrt(); [EOL] } <line_num>: 68,75
public double[] gradient(double[] point) { [EOL]     double[] gradient = new double[point.length]; [EOL]     double d = value(point); [EOL]     for (int i = 0; i < point.length; ++i) { [EOL]         gradient[i] = point[i] / d; [EOL]     } [EOL]     return gradient; [EOL] } <line_num>: 77,84
