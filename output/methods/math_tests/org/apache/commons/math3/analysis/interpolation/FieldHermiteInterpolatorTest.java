@Test [EOL] public void testZero() { [EOL]     FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>(); [EOL]     interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(0) }); [EOL]     for (int x = -10; x < 10; x++) { [EOL]         BigFraction y = interpolator.value(new BigFraction(x))[0]; [EOL]         Assert.assertEquals(BigFraction.ZERO, y); [EOL]         BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(x), 1); [EOL]         Assert.assertEquals(BigFraction.ZERO, derivatives[0][0]); [EOL]         Assert.assertEquals(BigFraction.ZERO, derivatives[1][0]); [EOL]     } [EOL] } <line_num>: 32,43
@Test [EOL] public void testQuadratic() { [EOL]     FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>(); [EOL]     interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(2) }); [EOL]     interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(0) }); [EOL]     interpolator.addSamplePoint(new BigFraction(2), new BigFraction[] { new BigFraction(0) }); [EOL]     for (double x = -10; x < 10; x += 1.0) { [EOL]         BigFraction y = interpolator.value(new BigFraction(x))[0]; [EOL]         Assert.assertEquals((x - 1) * (x - 2), y.doubleValue(), 1.0e-15); [EOL]         BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(x), 3); [EOL]         Assert.assertEquals((x - 1) * (x - 2), derivatives[0][0].doubleValue(), 1.0e-15); [EOL]         Assert.assertEquals(2 * x - 3, derivatives[1][0].doubleValue(), 1.0e-15); [EOL]         Assert.assertEquals(2, derivatives[2][0].doubleValue(), 1.0e-15); [EOL]         Assert.assertEquals(0, derivatives[3][0].doubleValue(), 1.0e-15); [EOL]     } [EOL] } <line_num>: 45,60
@Test [EOL] public void testMixedDerivatives() { [EOL]     FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>(); [EOL]     interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(1) }, new BigFraction[] { new BigFraction(2) }); [EOL]     interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(4) }); [EOL]     interpolator.addSamplePoint(new BigFraction(2), new BigFraction[] { new BigFraction(5) }, new BigFraction[] { new BigFraction(2) }); [EOL]     BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(0), 5); [EOL]     Assert.assertEquals(new BigFraction(1), derivatives[0][0]); [EOL]     Assert.assertEquals(new BigFraction(2), derivatives[1][0]); [EOL]     Assert.assertEquals(new BigFraction(8), derivatives[2][0]); [EOL]     Assert.assertEquals(new BigFraction(-24), derivatives[3][0]); [EOL]     Assert.assertEquals(new BigFraction(24), derivatives[4][0]); [EOL]     Assert.assertEquals(new BigFraction(0), derivatives[5][0]); [EOL]     derivatives = interpolator.derivatives(new BigFraction(1), 5); [EOL]     Assert.assertEquals(new BigFraction(4), derivatives[0][0]); [EOL]     Assert.assertEquals(new BigFraction(2), derivatives[1][0]); [EOL]     Assert.assertEquals(new BigFraction(-4), derivatives[2][0]); [EOL]     Assert.assertEquals(new BigFraction(0), derivatives[3][0]); [EOL]     Assert.assertEquals(new BigFraction(24), derivatives[4][0]); [EOL]     Assert.assertEquals(new BigFraction(0), derivatives[5][0]); [EOL]     derivatives = interpolator.derivatives(new BigFraction(2), 5); [EOL]     Assert.assertEquals(new BigFraction(5), derivatives[0][0]); [EOL]     Assert.assertEquals(new BigFraction(2), derivatives[1][0]); [EOL]     Assert.assertEquals(new BigFraction(8), derivatives[2][0]); [EOL]     Assert.assertEquals(new BigFraction(24), derivatives[3][0]); [EOL]     Assert.assertEquals(new BigFraction(24), derivatives[4][0]); [EOL]     Assert.assertEquals(new BigFraction(0), derivatives[5][0]); [EOL] } <line_num>: 62,89
@Test [EOL] public void testRandomPolynomialsValuesOnly() { [EOL]     Random random = new Random(0x42b1e7dbd361a932l); [EOL]     for (int i = 0; i < 100; ++i) { [EOL]         int maxDegree = 0; [EOL]         PolynomialFunction[] p = new PolynomialFunction[5]; [EOL]         for (int k = 0; k < p.length; ++k) { [EOL]             int degree = random.nextInt(7); [EOL]             p[k] = randomPolynomial(degree, random); [EOL]             maxDegree = FastMath.max(maxDegree, degree); [EOL]         } [EOL]         DfpField field = new DfpField(30); [EOL]         Dfp step = field.getOne().divide(field.newDfp(10)); [EOL]         FieldHermiteInterpolator<Dfp> interpolator = new FieldHermiteInterpolator<Dfp>(); [EOL]         for (int j = 0; j < 1 + maxDegree; ++j) { [EOL]             Dfp x = field.newDfp(j).multiply(step); [EOL]             Dfp[] values = new Dfp[p.length]; [EOL]             for (int k = 0; k < p.length; ++k) { [EOL]                 values[k] = field.newDfp(p[k].value(x.getReal())); [EOL]             } [EOL]             interpolator.addSamplePoint(x, values); [EOL]         } [EOL]         for (int j = 0; j < 20; ++j) { [EOL]             Dfp x = field.newDfp(j).multiply(step); [EOL]             Dfp[] values = interpolator.value(x); [EOL]             Assert.assertEquals(p.length, values.length); [EOL]             for (int k = 0; k < p.length; ++k) { [EOL]                 Assert.assertEquals(p[k].value(x.getReal()), values[k].getReal(), 1.0e-8 * FastMath.abs(p[k].value(x.getReal()))); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 91,131
@Test [EOL] public void testRandomPolynomialsFirstDerivative() { [EOL]     Random random = new Random(0x570803c982ca5d3bl); [EOL]     for (int i = 0; i < 100; ++i) { [EOL]         int maxDegree = 0; [EOL]         PolynomialFunction[] p = new PolynomialFunction[5]; [EOL]         PolynomialFunction[] pPrime = new PolynomialFunction[5]; [EOL]         for (int k = 0; k < p.length; ++k) { [EOL]             int degree = random.nextInt(7); [EOL]             p[k] = randomPolynomial(degree, random); [EOL]             pPrime[k] = p[k].polynomialDerivative(); [EOL]             maxDegree = FastMath.max(maxDegree, degree); [EOL]         } [EOL]         DfpField field = new DfpField(30); [EOL]         Dfp step = field.getOne().divide(field.newDfp(10)); [EOL]         FieldHermiteInterpolator<Dfp> interpolator = new FieldHermiteInterpolator<Dfp>(); [EOL]         for (int j = 0; j < 1 + maxDegree / 2; ++j) { [EOL]             Dfp x = field.newDfp(j).multiply(step); [EOL]             Dfp[] values = new Dfp[p.length]; [EOL]             Dfp[] derivatives = new Dfp[p.length]; [EOL]             for (int k = 0; k < p.length; ++k) { [EOL]                 values[k] = field.newDfp(p[k].value(x.getReal())); [EOL]                 derivatives[k] = field.newDfp(pPrime[k].value(x.getReal())); [EOL]             } [EOL]             interpolator.addSamplePoint(x, values, derivatives); [EOL]         } [EOL]         Dfp h = step.divide(field.newDfp(100000)); [EOL]         for (int j = 0; j < 20; ++j) { [EOL]             Dfp x = field.newDfp(j).multiply(step); [EOL]             Dfp[] y = interpolator.value(x); [EOL]             Dfp[] yP = interpolator.value(x.add(h)); [EOL]             Dfp[] yM = interpolator.value(x.subtract(h)); [EOL]             Assert.assertEquals(p.length, y.length); [EOL]             for (int k = 0; k < p.length; ++k) { [EOL]                 Assert.assertEquals(p[k].value(x.getReal()), y[k].getReal(), 1.0e-8 * FastMath.abs(p[k].value(x.getReal()))); [EOL]                 Assert.assertEquals(pPrime[k].value(x.getReal()), yP[k].subtract(yM[k]).divide(h.multiply(2)).getReal(), 4.0e-8 * FastMath.abs(p[k].value(x.getReal()))); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 133,182
@Test [EOL] public void testSine() { [EOL]     DfpField field = new DfpField(30); [EOL]     FieldHermiteInterpolator<Dfp> interpolator = new FieldHermiteInterpolator<Dfp>(); [EOL]     for (Dfp x = field.getZero(); x.getReal() < FastMath.PI; x = x.add(0.5)) { [EOL]         interpolator.addSamplePoint(x, new Dfp[] { x.sin() }); [EOL]     } [EOL]     for (Dfp x = field.newDfp(0.1); x.getReal() < 2.9; x = x.add(0.01)) { [EOL]         Dfp y = interpolator.value(x)[0]; [EOL]         Assert.assertEquals(x.sin().getReal(), y.getReal(), 3.5e-5); [EOL]     } [EOL] } <line_num>: 184,195
@Test [EOL] public void testSquareRoot() { [EOL]     DfpField field = new DfpField(30); [EOL]     FieldHermiteInterpolator<Dfp> interpolator = new FieldHermiteInterpolator<Dfp>(); [EOL]     for (Dfp x = field.getOne(); x.getReal() < 3.6; x = x.add(0.5)) { [EOL]         interpolator.addSamplePoint(x, new Dfp[] { x.sqrt() }); [EOL]     } [EOL]     for (Dfp x = field.newDfp(1.1); x.getReal() < 3.5; x = x.add(0.01)) { [EOL]         Dfp y = interpolator.value(x)[0]; [EOL]         Assert.assertEquals(x.sqrt().getReal(), y.getReal(), 1.5e-4); [EOL]     } [EOL] } <line_num>: 197,208
@Test [EOL] public void testWikipedia() { [EOL]     FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>(); [EOL]     interpolator.addSamplePoint(new BigFraction(-1), new BigFraction[] { new BigFraction(2) }, new BigFraction[] { new BigFraction(-8) }, new BigFraction[] { new BigFraction(56) }); [EOL]     interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(1) }, new BigFraction[] { new BigFraction(0) }, new BigFraction[] { new BigFraction(0) }); [EOL]     interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(2) }, new BigFraction[] { new BigFraction(8) }, new BigFraction[] { new BigFraction(56) }); [EOL]     for (BigFraction x = new BigFraction(-1); x.doubleValue() <= 1.0; x = x.add(new BigFraction(1, 8))) { [EOL]         BigFraction y = interpolator.value(x)[0]; [EOL]         BigFraction x2 = x.multiply(x); [EOL]         BigFraction x4 = x2.multiply(x2); [EOL]         BigFraction x8 = x4.multiply(x4); [EOL]         Assert.assertEquals(x8.add(new BigFraction(1)), y); [EOL]     } [EOL] } <line_num>: 210,234
@Test [EOL] public void testOnePointParabola() { [EOL]     FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>(); [EOL]     interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(1) }, new BigFraction[] { new BigFraction(1) }, new BigFraction[] { new BigFraction(2) }); [EOL]     for (BigFraction x = new BigFraction(-1); x.doubleValue() <= 1.0; x = x.add(new BigFraction(1, 8))) { [EOL]         BigFraction y = interpolator.value(x)[0]; [EOL]         Assert.assertEquals(BigFraction.ONE.add(x.multiply(BigFraction.ONE.add(x))), y); [EOL]     } [EOL] } <line_num>: 236,247
private PolynomialFunction randomPolynomial(int degree, Random random) { [EOL]     double[] coeff = new double[1 + degree]; [EOL]     for (int j = 0; j < degree; ++j) { [EOL]         coeff[j] = random.nextDouble(); [EOL]     } [EOL]     return new PolynomialFunction(coeff); [EOL] } <line_num>: 249,255
@Test(expected = NoDataException.class) [EOL] public void testEmptySampleValue() { [EOL]     new FieldHermiteInterpolator<BigFraction>().value(BigFraction.ZERO); [EOL] } <line_num>: 257,260
@Test(expected = NoDataException.class) [EOL] public void testEmptySampleDerivative() { [EOL]     new FieldHermiteInterpolator<BigFraction>().derivatives(BigFraction.ZERO, 1); [EOL] } <line_num>: 262,265
@Test(expected = IllegalArgumentException.class) [EOL] public void testDuplicatedAbscissa() { [EOL]     FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>(); [EOL]     interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(0) }); [EOL]     interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(1) }); [EOL] } <line_num>: 267,272
