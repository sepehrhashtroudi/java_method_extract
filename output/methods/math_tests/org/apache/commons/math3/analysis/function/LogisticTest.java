@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testPreconditions1() { [EOL]     new Logistic(1, 0, 1, 1, 0, -1); [EOL] } <line_num>: 36,39
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testPreconditions2() { [EOL]     new Logistic(1, 0, 1, 1, 0, 0); [EOL] } <line_num>: 41,44
@Test [EOL] public void testCompareSigmoid() { [EOL]     final UnivariateFunction sig = new Sigmoid(); [EOL]     final UnivariateFunction sigL = new Logistic(1, 0, 1, 1, 0, 1); [EOL]     final double min = -2; [EOL]     final double max = 2; [EOL]     final int n = 100; [EOL]     final double delta = (max - min) / n; [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double x = min + i * delta; [EOL]         Assert.assertEquals("x=" + x, sig.value(x), sigL.value(x), EPS); [EOL]     } [EOL] } <line_num>: 46,59
@Test [EOL] public void testSomeValues() { [EOL]     final double k = 4; [EOL]     final double m = 5; [EOL]     final double b = 2; [EOL]     final double q = 3; [EOL]     final double a = -1; [EOL]     final double n = 2; [EOL]     final UnivariateFunction f = new Logistic(k, m, b, q, a, n); [EOL]     double x; [EOL]     x = m; [EOL]     Assert.assertEquals("x=" + x, a + (k - a) / FastMath.sqrt(1 + q), f.value(x), EPS); [EOL]     x = Double.NEGATIVE_INFINITY; [EOL]     Assert.assertEquals("x=" + x, a, f.value(x), EPS); [EOL]     x = Double.POSITIVE_INFINITY; [EOL]     Assert.assertEquals("x=" + x, k, f.value(x), EPS); [EOL] } <line_num>: 61,81
@Test [EOL] public void testCompareDerivativeSigmoid() { [EOL]     final double k = 3; [EOL]     final double a = 2; [EOL]     final Logistic f = new Logistic(k, 0, 1, 1, a, 1); [EOL]     final Sigmoid g = new Sigmoid(a, k); [EOL]     final double min = -10; [EOL]     final double max = 10; [EOL]     final double n = 20; [EOL]     final double delta = (max - min) / n; [EOL]     for (int i = 0; i < n; i++) { [EOL]         final DerivativeStructure x = new DerivativeStructure(1, 5, 0, min + i * delta); [EOL]         for (int order = 0; order <= x.getOrder(); ++order) { [EOL]             Assert.assertEquals("x=" + x.getValue(), g.value(x).getPartialDerivative(order), f.value(x).getPartialDerivative(order), 3.0e-15); [EOL]         } [EOL]     } [EOL] } <line_num>: 83,104
@Test(expected = NullArgumentException.class) [EOL] public void testParametricUsage1() { [EOL]     final Logistic.Parametric g = new Logistic.Parametric(); [EOL]     g.value(0, null); [EOL] } <line_num>: 106,110
@Test(expected = DimensionMismatchException.class) [EOL] public void testParametricUsage2() { [EOL]     final Logistic.Parametric g = new Logistic.Parametric(); [EOL]     g.value(0, new double[] { 0 }); [EOL] } <line_num>: 112,116
@Test(expected = NullArgumentException.class) [EOL] public void testParametricUsage3() { [EOL]     final Logistic.Parametric g = new Logistic.Parametric(); [EOL]     g.gradient(0, null); [EOL] } <line_num>: 118,122
@Test(expected = DimensionMismatchException.class) [EOL] public void testParametricUsage4() { [EOL]     final Logistic.Parametric g = new Logistic.Parametric(); [EOL]     g.gradient(0, new double[] { 0 }); [EOL] } <line_num>: 124,128
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testParametricUsage5() { [EOL]     final Logistic.Parametric g = new Logistic.Parametric(); [EOL]     g.value(0, new double[] { 1, 0, 1, 1, 0, 0 }); [EOL] } <line_num>: 130,134
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testParametricUsage6() { [EOL]     final Logistic.Parametric g = new Logistic.Parametric(); [EOL]     g.gradient(0, new double[] { 1, 0, 1, 1, 0, 0 }); [EOL] } <line_num>: 136,140
@Test [EOL] public void testGradientComponent0Component4() { [EOL]     final double k = 3; [EOL]     final double a = 2; [EOL]     final Logistic.Parametric f = new Logistic.Parametric(); [EOL]     final Sigmoid.Parametric g = new Sigmoid.Parametric(); [EOL]     final double x = 0.12345; [EOL]     final double[] gf = f.gradient(x, new double[] { k, 0, 1, 1, a, 1 }); [EOL]     final double[] gg = g.gradient(x, new double[] { a, k }); [EOL]     Assert.assertEquals(gg[0], gf[4], EPS); [EOL]     Assert.assertEquals(gg[1], gf[0], EPS); [EOL] } <line_num>: 142,157
@Test [EOL] public void testGradientComponent5() { [EOL]     final double m = 1.2; [EOL]     final double k = 3.4; [EOL]     final double a = 2.3; [EOL]     final double q = 0.567; [EOL]     final double b = -FastMath.log(q); [EOL]     final double n = 3.4; [EOL]     final Logistic.Parametric f = new Logistic.Parametric(); [EOL]     final double x = m - 1; [EOL]     final double qExp1 = 2; [EOL]     final double[] gf = f.gradient(x, new double[] { k, m, b, q, a, n }); [EOL]     Assert.assertEquals((k - a) * FastMath.log(qExp1) / (n * n * FastMath.pow(qExp1, 1 / n)), gf[5], EPS); [EOL] } <line_num>: 159,177
@Test [EOL] public void testGradientComponent1Component2Component3() { [EOL]     final double m = 1.2; [EOL]     final double k = 3.4; [EOL]     final double a = 2.3; [EOL]     final double b = 0.567; [EOL]     final double q = 1 / FastMath.exp(b * m); [EOL]     final double n = 3.4; [EOL]     final Logistic.Parametric f = new Logistic.Parametric(); [EOL]     final double x = 0; [EOL]     final double qExp1 = 2; [EOL]     final double[] gf = f.gradient(x, new double[] { k, m, b, q, a, n }); [EOL]     final double factor = (a - k) / (n * FastMath.pow(qExp1, 1 / n + 1)); [EOL]     Assert.assertEquals(factor * b, gf[1], EPS); [EOL]     Assert.assertEquals(factor * m, gf[2], EPS); [EOL]     Assert.assertEquals(factor / q, gf[3], EPS); [EOL] } <line_num>: 179,199
