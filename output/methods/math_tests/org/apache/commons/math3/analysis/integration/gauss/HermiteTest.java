public double value(double y) { [EOL]     return oneOverSqrtPi; [EOL] } <line_num>: 49,51
@Test [EOL] public void testNormalDistribution() { [EOL]     final double oneOverSqrtPi = 1 / FastMath.sqrt(Math.PI); [EOL]     final double mu = 12345.6789; [EOL]     final double sigma = 987.654321; [EOL]     final int numPoints = 1; [EOL]     final UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double y) { [EOL]             return oneOverSqrtPi; [EOL]         } [EOL]     }; [EOL]     final GaussIntegrator integrator = factory.hermite(numPoints); [EOL]     final double result = integrator.integrate(f); [EOL]     final double expected = 1; [EOL]     Assert.assertEquals(expected, result, Math.ulp(expected)); [EOL] } <line_num>: 32,58
public double value(double y) { [EOL]     return oneOverSqrtPi * (sqrtTwo * sigma * y + mu); [EOL] } <line_num>: 76,78
@Test [EOL] public void testNormalMean() { [EOL]     final double sqrtTwo = FastMath.sqrt(2); [EOL]     final double oneOverSqrtPi = 1 / FastMath.sqrt(Math.PI); [EOL]     final double mu = 12345.6789; [EOL]     final double sigma = 987.654321; [EOL]     final int numPoints = 5; [EOL]     final UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double y) { [EOL]             return oneOverSqrtPi * (sqrtTwo * sigma * y + mu); [EOL]         } [EOL]     }; [EOL]     final GaussIntegrator integrator = factory.hermite(numPoints); [EOL]     final double result = integrator.integrate(f); [EOL]     final double expected = mu; [EOL]     Assert.assertEquals(expected, result, Math.ulp(expected)); [EOL] } <line_num>: 60,85
public double value(double y) { [EOL]     return twoOverSqrtPi * sigma2 * y * y; [EOL] } <line_num>: 103,105
@Test [EOL] public void testNormalVariance() { [EOL]     final double twoOverSqrtPi = 2 / FastMath.sqrt(Math.PI); [EOL]     final double mu = 12345.6789; [EOL]     final double sigma = 987.654321; [EOL]     final double sigma2 = sigma * sigma; [EOL]     final int numPoints = 5; [EOL]     final UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double y) { [EOL]             return twoOverSqrtPi * sigma2 * y * y; [EOL]         } [EOL]     }; [EOL]     final GaussIntegrator integrator = factory.hermite(numPoints); [EOL]     final double result = integrator.integrate(f); [EOL]     final double expected = sigma2; [EOL]     Assert.assertEquals(expected, result, 10 * Math.ulp(expected)); [EOL] } <line_num>: 87,112
