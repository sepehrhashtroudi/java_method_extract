@Test [EOL] public void testLinearFunction() { [EOL]     double min, max, expected, result, tolerance; [EOL]     double[] coefficients = { -1.0, 4.0 }; [EOL]     PolynomialFunction f = new PolynomialFunction(coefficients); [EOL]     LaguerreSolver solver = new LaguerreSolver(); [EOL]     min = 0.0; [EOL]     max = 1.0; [EOL]     expected = 0.25; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 42,56
@Test [EOL] public void testQuadraticFunction() { [EOL]     double min, max, expected, result, tolerance; [EOL]     double[] coefficients = { -3.0, 5.0, 2.0 }; [EOL]     PolynomialFunction f = new PolynomialFunction(coefficients); [EOL]     LaguerreSolver solver = new LaguerreSolver(); [EOL]     min = 0.0; [EOL]     max = 2.0; [EOL]     expected = 0.5; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -4.0; [EOL]     max = -1.0; [EOL]     expected = -3.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 61,81
@Test [EOL] public void testQuinticFunction() { [EOL]     double min, max, expected, result, tolerance; [EOL]     double[] coefficients = { -12.0, -1.0, 1.0, -12.0, -1.0, 1.0 }; [EOL]     PolynomialFunction f = new PolynomialFunction(coefficients); [EOL]     LaguerreSolver solver = new LaguerreSolver(); [EOL]     min = -2.0; [EOL]     max = 2.0; [EOL]     expected = -1.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -5.0; [EOL]     max = -2.5; [EOL]     expected = -3.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = 3.0; [EOL]     max = 6.0; [EOL]     expected = 4.0; [EOL]     tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected * solver.getRelativeAccuracy())); [EOL]     result = solver.solve(100, f, min, max); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 86,112
@Test [EOL] public void testQuinticFunction2() { [EOL]     final double[] coefficients = { 4.0, 0.0, 1.0, 4.0, 0.0, 1.0 }; [EOL]     final LaguerreSolver solver = new LaguerreSolver(); [EOL]     final Complex[] result = solver.solveAllComplex(coefficients, 0); [EOL]     for (Complex expected : new Complex[] { new Complex(0, -2), new Complex(0, 2), new Complex(0.5, 0.5 * FastMath.sqrt(3)), new Complex(-1, 0), new Complex(0.5, -0.5 * FastMath.sqrt(3.0)) }) { [EOL]         final double tolerance = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(expected.abs() * solver.getRelativeAccuracy())); [EOL]         TestUtils.assertContains(result, expected, tolerance); [EOL]     } [EOL] } <line_num>: 118,134
@Test [EOL] public void testParameters() { [EOL]     double[] coefficients = { -3.0, 5.0, 2.0 }; [EOL]     PolynomialFunction f = new PolynomialFunction(coefficients); [EOL]     LaguerreSolver solver = new LaguerreSolver(); [EOL]     try { [EOL]         solver.solve(100, f, 1, -1); [EOL]         Assert.fail("Expecting NumberIsTooLargeException - bad interval"); [EOL]     } catch (NumberIsTooLargeException ex) { [EOL]     } [EOL]     try { [EOL]         solver.solve(100, f, 2, 3); [EOL]         Assert.fail("Expecting NoBracketingException - no bracketing"); [EOL]     } catch (NoBracketingException ex) { [EOL]     } [EOL] } <line_num>: 139,159
