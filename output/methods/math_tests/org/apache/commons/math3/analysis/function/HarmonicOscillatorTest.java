@Test [EOL] public void testSomeValues() { [EOL]     final double a = -1.2; [EOL]     final double w = 0.34; [EOL]     final double p = 5.6; [EOL]     final UnivariateFunction f = new HarmonicOscillator(a, w, p); [EOL]     final double d = 0.12345; [EOL]     for (int i = 0; i < 10; i++) { [EOL]         final double v = i * d; [EOL]         Assert.assertEquals(a * FastMath.cos(w * v + p), f.value(v), 0); [EOL]     } [EOL] } <line_num>: 35,47
@Test [EOL] public void testDerivative() { [EOL]     final double a = -1.2; [EOL]     final double w = 0.34; [EOL]     final double p = 5.6; [EOL]     final HarmonicOscillator f = new HarmonicOscillator(a, w, p); [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         final double d = 0.12345; [EOL]         for (int i = 0; i < 10; i++) { [EOL]             final double v = i * d; [EOL]             final DerivativeStructure h = f.value(new DerivativeStructure(1, maxOrder, 0, v)); [EOL]             for (int k = 0; k <= maxOrder; ++k) { [EOL]                 final double trigo; [EOL]                 switch(k % 4) { [EOL]                     case 0: [EOL]                         trigo = +FastMath.cos(w * v + p); [EOL]                         break; [EOL]                     case 1: [EOL]                         trigo = -FastMath.sin(w * v + p); [EOL]                         break; [EOL]                     case 2: [EOL]                         trigo = -FastMath.cos(w * v + p); [EOL]                         break; [EOL]                     default: [EOL]                         trigo = +FastMath.sin(w * v + p); [EOL]                         break; [EOL]                 } [EOL]                 Assert.assertEquals(a * FastMath.pow(w, k) * trigo, h.getPartialDerivative(k), Precision.EPSILON); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 49,83
@Test(expected = NullArgumentException.class) [EOL] public void testParametricUsage1() { [EOL]     final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric(); [EOL]     g.value(0, null); [EOL] } <line_num>: 85,89
@Test(expected = DimensionMismatchException.class) [EOL] public void testParametricUsage2() { [EOL]     final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric(); [EOL]     g.value(0, new double[] { 0 }); [EOL] } <line_num>: 91,95
@Test(expected = NullArgumentException.class) [EOL] public void testParametricUsage3() { [EOL]     final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric(); [EOL]     g.gradient(0, null); [EOL] } <line_num>: 97,101
@Test(expected = DimensionMismatchException.class) [EOL] public void testParametricUsage4() { [EOL]     final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric(); [EOL]     g.gradient(0, new double[] { 0 }); [EOL] } <line_num>: 103,107
@Test [EOL] public void testParametricValue() { [EOL]     final double amplitude = 2; [EOL]     final double omega = 3; [EOL]     final double phase = 4; [EOL]     final HarmonicOscillator f = new HarmonicOscillator(amplitude, omega, phase); [EOL]     final HarmonicOscillator.Parametric g = new HarmonicOscillator.Parametric(); [EOL]     Assert.assertEquals(f.value(-1), g.value(-1, new double[] { amplitude, omega, phase }), 0); [EOL]     Assert.assertEquals(f.value(0), g.value(0, new double[] { amplitude, omega, phase }), 0); [EOL]     Assert.assertEquals(f.value(2), g.value(2, new double[] { amplitude, omega, phase }), 0); [EOL] } <line_num>: 109,120
@Test [EOL] public void testParametricGradient() { [EOL]     final double amplitude = 2; [EOL]     final double omega = 3; [EOL]     final double phase = 4; [EOL]     final HarmonicOscillator.Parametric f = new HarmonicOscillator.Parametric(); [EOL]     final double x = 1; [EOL]     final double[] grad = f.gradient(1, new double[] { amplitude, omega, phase }); [EOL]     final double xTimesOmegaPlusPhase = omega * x + phase; [EOL]     final double a = FastMath.cos(xTimesOmegaPlusPhase); [EOL]     Assert.assertEquals(a, grad[0], EPS); [EOL]     final double w = -amplitude * x * FastMath.sin(xTimesOmegaPlusPhase); [EOL]     Assert.assertEquals(w, grad[1], EPS); [EOL]     final double p = -amplitude * FastMath.sin(xTimesOmegaPlusPhase); [EOL]     Assert.assertEquals(p, grad[2], EPS); [EOL] } <line_num>: 122,138
