public SphereMapping(final double radius) { [EOL]     this.radius = radius; [EOL] } <line_num>: 54,56
@Test [EOL] public void testSphere() { [EOL]     SphereMapping f = new SphereMapping(10.0); [EOL]     JacobianFunction j = new JacobianFunction(f); [EOL]     for (double latitude = -1.5; latitude < 1.5; latitude += 0.1) { [EOL]         for (double longitude = -3.1; longitude < 3.1; longitude += 0.1) { [EOL]             double[] point = new double[] { latitude, longitude }; [EOL]             double[][] referenceJacobian = f.jacobian(point); [EOL]             double[][] testJacobian = j.value(point); [EOL]             Assert.assertEquals(referenceJacobian.length, testJacobian.length); [EOL]             for (int i = 0; i < 3; ++i) { [EOL]                 TestUtils.assertEquals(referenceJacobian[i], testJacobian[i], 2.0e-15); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 32,47
public double[] value(double[] point) { [EOL]     final double cLat = FastMath.cos(point[0]); [EOL]     final double sLat = FastMath.sin(point[0]); [EOL]     final double cLon = FastMath.cos(point[1]); [EOL]     final double sLon = FastMath.sin(point[1]); [EOL]     return new double[] { radius * cLon * cLat, radius * sLon * cLat, radius * sLat }; [EOL] } <line_num>: 58,68
public DerivativeStructure[] value(DerivativeStructure[] point) { [EOL]     final DerivativeStructure cLat = point[0].cos(); [EOL]     final DerivativeStructure sLat = point[0].sin(); [EOL]     final DerivativeStructure cLon = point[1].cos(); [EOL]     final DerivativeStructure sLon = point[1].sin(); [EOL]     return new DerivativeStructure[] { cLon.multiply(cLat).multiply(radius), sLon.multiply(cLat).multiply(radius), sLat.multiply(radius) }; [EOL] } <line_num>: 70,80
public double[][] jacobian(double[] point) { [EOL]     final double cLat = FastMath.cos(point[0]); [EOL]     final double sLat = FastMath.sin(point[0]); [EOL]     final double cLon = FastMath.cos(point[1]); [EOL]     final double sLon = FastMath.sin(point[1]); [EOL]     return new double[][] { { -radius * cLon * sLat, -radius * sLon * cLat }, { -radius * sLon * sLat, radius * cLon * cLat }, { radius * cLat, 0 } }; [EOL] } <line_num>: 82,92
