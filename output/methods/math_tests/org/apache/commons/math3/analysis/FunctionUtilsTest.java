@Test [EOL] public void testCompose() { [EOL]     UnivariateFunction id = new Identity(); [EOL]     Assert.assertEquals(3, FunctionUtils.compose(id, id, id).value(3), EPS); [EOL]     UnivariateFunction c = new Constant(4); [EOL]     Assert.assertEquals(4, FunctionUtils.compose(id, c).value(3), EPS); [EOL]     Assert.assertEquals(4, FunctionUtils.compose(c, id).value(3), EPS); [EOL]     UnivariateFunction m = new Minus(); [EOL]     Assert.assertEquals(-3, FunctionUtils.compose(m).value(3), EPS); [EOL]     Assert.assertEquals(3, FunctionUtils.compose(m, m).value(3), EPS); [EOL]     UnivariateFunction inv = new Inverse(); [EOL]     Assert.assertEquals(-0.25, FunctionUtils.compose(inv, m, c, id).value(3), EPS); [EOL]     UnivariateFunction pow = new Power(2); [EOL]     Assert.assertEquals(81, FunctionUtils.compose(pow, pow).value(3), EPS); [EOL] } <line_num>: 51,69
@Test [EOL] public void testComposeDifferentiable() { [EOL]     UnivariateDifferentiableFunction id = new Identity(); [EOL]     Assert.assertEquals(1, FunctionUtils.compose(id, id, id).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS); [EOL]     UnivariateDifferentiableFunction c = new Constant(4); [EOL]     Assert.assertEquals(0, FunctionUtils.compose(id, c).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS); [EOL]     Assert.assertEquals(0, FunctionUtils.compose(c, id).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS); [EOL]     UnivariateDifferentiableFunction m = new Minus(); [EOL]     Assert.assertEquals(-1, FunctionUtils.compose(m).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS); [EOL]     Assert.assertEquals(1, FunctionUtils.compose(m, m).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS); [EOL]     UnivariateDifferentiableFunction inv = new Inverse(); [EOL]     Assert.assertEquals(0.25, FunctionUtils.compose(inv, m, id).value(new DerivativeStructure(1, 1, 0, 2)).getPartialDerivative(1), EPS); [EOL]     UnivariateDifferentiableFunction pow = new Power(2); [EOL]     Assert.assertEquals(108, FunctionUtils.compose(pow, pow).value(new DerivativeStructure(1, 1, 0, 3)).getPartialDerivative(1), EPS); [EOL]     UnivariateDifferentiableFunction log = new Log(); [EOL]     double a = 9876.54321; [EOL]     Assert.assertEquals(pow.value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1) / pow.value(a), FunctionUtils.compose(log, pow).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS); [EOL] } <line_num>: 71,94
@Test [EOL] public void testAdd() { [EOL]     UnivariateFunction id = new Identity(); [EOL]     UnivariateFunction c = new Constant(4); [EOL]     UnivariateFunction m = new Minus(); [EOL]     UnivariateFunction inv = new Inverse(); [EOL]     Assert.assertEquals(4.5, FunctionUtils.add(inv, m, c, id).value(2), EPS); [EOL]     Assert.assertEquals(4 + 2, FunctionUtils.add(c, id).value(2), EPS); [EOL]     Assert.assertEquals(4 - 2, FunctionUtils.add(c, FunctionUtils.compose(m, id)).value(2), EPS); [EOL] } <line_num>: 96,106
@Test [EOL] public void testAddDifferentiable() { [EOL]     UnivariateDifferentiableFunction sin = new Sin(); [EOL]     UnivariateDifferentiableFunction c = new Constant(4); [EOL]     UnivariateDifferentiableFunction m = new Minus(); [EOL]     UnivariateDifferentiableFunction inv = new Inverse(); [EOL]     final double a = 123.456; [EOL]     Assert.assertEquals(-1 / (a * a) - 1 + Math.cos(a), FunctionUtils.add(inv, m, c, sin).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS); [EOL] } <line_num>: 108,119
@Test [EOL] public void testMultiply() { [EOL]     UnivariateFunction c = new Constant(4); [EOL]     Assert.assertEquals(16, FunctionUtils.multiply(c, c).value(12345), EPS); [EOL]     UnivariateFunction inv = new Inverse(); [EOL]     UnivariateFunction pow = new Power(2); [EOL]     Assert.assertEquals(1, FunctionUtils.multiply(FunctionUtils.compose(inv, pow), pow).value(3.5), EPS); [EOL] } <line_num>: 121,129
@Test [EOL] public void testMultiplyDifferentiable() { [EOL]     UnivariateDifferentiableFunction c = new Constant(4); [EOL]     UnivariateDifferentiableFunction id = new Identity(); [EOL]     final double a = 1.2345678; [EOL]     Assert.assertEquals(8 * a, FunctionUtils.multiply(c, id, id).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS); [EOL]     UnivariateDifferentiableFunction inv = new Inverse(); [EOL]     UnivariateDifferentiableFunction pow = new Power(2.5); [EOL]     UnivariateDifferentiableFunction cos = new Cos(); [EOL]     Assert.assertEquals(1.5 * Math.sqrt(a) * Math.cos(a) - Math.pow(a, 1.5) * Math.sin(a), FunctionUtils.multiply(inv, pow, cos).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), EPS); [EOL]     UnivariateDifferentiableFunction cosh = new Cosh(); [EOL]     Assert.assertEquals(1.5 * Math.sqrt(a) * Math.cosh(a) + Math.pow(a, 1.5) * Math.sinh(a), FunctionUtils.multiply(inv, pow, cosh).value(new DerivativeStructure(1, 1, 0, a)).getPartialDerivative(1), 8 * EPS); [EOL] } <line_num>: 131,147
@Test [EOL] public void testCombine() { [EOL]     BivariateFunction bi = new Add(); [EOL]     UnivariateFunction id = new Identity(); [EOL]     UnivariateFunction m = new Minus(); [EOL]     UnivariateFunction c = FunctionUtils.combine(bi, id, m); [EOL]     Assert.assertEquals(0, c.value(2.3456), EPS); [EOL]     bi = new Multiply(); [EOL]     UnivariateFunction inv = new Inverse(); [EOL]     c = FunctionUtils.combine(bi, id, inv); [EOL]     Assert.assertEquals(1, c.value(2.3456), EPS); [EOL] } <line_num>: 149,161
@Test [EOL] public void testCollector() { [EOL]     BivariateFunction bi = new Add(); [EOL]     MultivariateFunction coll = FunctionUtils.collector(bi, 0); [EOL]     Assert.assertEquals(10, coll.value(new double[] { 1, 2, 3, 4 }), EPS); [EOL]     bi = new Multiply(); [EOL]     coll = FunctionUtils.collector(bi, 1); [EOL]     Assert.assertEquals(24, coll.value(new double[] { 1, 2, 3, 4 }), EPS); [EOL]     bi = new Max(); [EOL]     coll = FunctionUtils.collector(bi, Double.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(10, coll.value(new double[] { 1, -2, 7.5, 10, -24, 9.99 }), 0); [EOL]     bi = new Min(); [EOL]     coll = FunctionUtils.collector(bi, Double.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(-24, coll.value(new double[] { 1, -2, 7.5, 10, -24, 9.99 }), 0); [EOL] } <line_num>: 163,180
@Test [EOL] public void testSinc() { [EOL]     BivariateFunction div = new Divide(); [EOL]     UnivariateFunction sin = new Sin(); [EOL]     UnivariateFunction id = new Identity(); [EOL]     UnivariateFunction sinc1 = FunctionUtils.combine(div, sin, id); [EOL]     UnivariateFunction sinc2 = new Sinc(); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         double x = Math.random(); [EOL]         Assert.assertEquals(sinc1.value(x), sinc2.value(x), EPS); [EOL]     } [EOL] } <line_num>: 182,194
@Test [EOL] public void testFixingArguments() { [EOL]     UnivariateFunction scaler = FunctionUtils.fix1stArgument(new Multiply(), 10); [EOL]     Assert.assertEquals(1.23456, scaler.value(0.123456), EPS); [EOL]     UnivariateFunction pow1 = new Power(2); [EOL]     UnivariateFunction pow2 = FunctionUtils.fix2ndArgument(new Pow(), 2); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         double x = Math.random() * 10; [EOL]         Assert.assertEquals(pow1.value(x), pow2.value(x), 0); [EOL]     } [EOL] } <line_num>: 196,208
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testSampleWrongBounds() { [EOL]     FunctionUtils.sample(new Sin(), Math.PI, 0.0, 10); [EOL] } <line_num>: 210,213
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testSampleNegativeNumberOfPoints() { [EOL]     FunctionUtils.sample(new Sin(), 0.0, Math.PI, -1); [EOL] } <line_num>: 215,218
@Test(expected = NotStrictlyPositiveException.class) [EOL] public void testSampleNullNumberOfPoints() { [EOL]     FunctionUtils.sample(new Sin(), 0.0, Math.PI, 0); [EOL] } <line_num>: 220,223
@Test [EOL] public void testSample() { [EOL]     final int n = 11; [EOL]     final double min = 0.0; [EOL]     final double max = Math.PI; [EOL]     final double[] actual = FunctionUtils.sample(new Sin(), min, max, n); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double x = min + (max - min) / n * i; [EOL]         Assert.assertEquals("x = " + x, FastMath.sin(x), actual[i], 0.0); [EOL]     } [EOL] } <line_num>: 225,235
@Test [EOL] @Deprecated [EOL] public void testToDifferentiableUnivariateFunction() { [EOL]     Sin sin = new Sin(); [EOL]     DifferentiableUnivariateFunction converted = FunctionUtils.toDifferentiableUnivariateFunction(sin); [EOL]     for (double x = 0.1; x < 0.5; x += 0.01) { [EOL]         Assert.assertEquals(sin.value(x), converted.value(x), 1.0e-10); [EOL]         Assert.assertEquals(sin.derivative().value(x), converted.derivative().value(x), 1.0e-10); [EOL]     } [EOL] } <line_num>: 237,249
@Test [EOL] @Deprecated [EOL] public void testToUnivariateDifferential() { [EOL]     Sin sin = new Sin(); [EOL]     UnivariateDifferentiableFunction converted = FunctionUtils.toUnivariateDifferential(sin); [EOL]     for (double x = 0.1; x < 0.5; x += 0.01) { [EOL]         DerivativeStructure t = new DerivativeStructure(2, 1, x, 1.0, 2.0); [EOL]         Assert.assertEquals(sin.value(t).getValue(), converted.value(t).getValue(), 1.0e-10); [EOL]         Assert.assertEquals(sin.value(t).getPartialDerivative(1, 0), converted.value(t).getPartialDerivative(1, 0), 1.0e-10); [EOL]         Assert.assertEquals(sin.value(t).getPartialDerivative(0, 1), converted.value(t).getPartialDerivative(0, 1), 1.0e-10); [EOL]     } [EOL] } <line_num>: 251,269
public double value(double[] point) { [EOL]     return FastMath.hypot(point[0], point[1]); [EOL] } <line_num>: 277,279
public DerivativeStructure value(DerivativeStructure[] point) { [EOL]     return DerivativeStructure.hypot(point[0], point[1]); [EOL] } <line_num>: 281,283
@Test [EOL] @Deprecated [EOL] public void testToDifferentiableMultivariateFunction() { [EOL]     MultivariateDifferentiableFunction hypot = new MultivariateDifferentiableFunction() { [EOL]  [EOL]         public double value(double[] point) { [EOL]             return FastMath.hypot(point[0], point[1]); [EOL]         } [EOL]  [EOL]         public DerivativeStructure value(DerivativeStructure[] point) { [EOL]             return DerivativeStructure.hypot(point[0], point[1]); [EOL]         } [EOL]     }; [EOL]     DifferentiableMultivariateFunction converted = FunctionUtils.toDifferentiableMultivariateFunction(hypot); [EOL]     for (double x = 0.1; x < 0.5; x += 0.01) { [EOL]         for (double y = 0.1; y < 0.5; y += 0.01) { [EOL]             double[] point = new double[] { x, y }; [EOL]             Assert.assertEquals(hypot.value(point), converted.value(point), 1.0e-10); [EOL]             Assert.assertEquals(x / hypot.value(point), converted.gradient().value(point)[0], 1.0e-10); [EOL]             Assert.assertEquals(y / hypot.value(point), converted.gradient().value(point)[1], 1.0e-10); [EOL]         } [EOL]     } [EOL] } <line_num>: 271,296
public double value(double[] point) { [EOL]     return FastMath.hypot(point[0], point[1]); [EOL] } <line_num>: 304,306
public double value(double[] point) { [EOL]     return point[k] / FastMath.hypot(point[0], point[1]); [EOL] } <line_num>: 310,312
public MultivariateFunction partialDerivative(final int k) { [EOL]     return new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] point) { [EOL]             return point[k] / FastMath.hypot(point[0], point[1]); [EOL]         } [EOL]     }; [EOL] } <line_num>: 308,314
public double[] value(double[] point) { [EOL]     final double h = FastMath.hypot(point[0], point[1]); [EOL]     return new double[] { point[0] / h, point[1] / h }; [EOL] } <line_num>: 318,321
public MultivariateVectorFunction gradient() { [EOL]     return new MultivariateVectorFunction() { [EOL]  [EOL]         public double[] value(double[] point) { [EOL]             final double h = FastMath.hypot(point[0], point[1]); [EOL]             return new double[] { point[0] / h, point[1] / h }; [EOL]         } [EOL]     }; [EOL] } <line_num>: 316,323
@Test [EOL] @Deprecated [EOL] public void testToMultivariateDifferentiableFunction() { [EOL]     DifferentiableMultivariateFunction hypot = new DifferentiableMultivariateFunction() { [EOL]  [EOL]         public double value(double[] point) { [EOL]             return FastMath.hypot(point[0], point[1]); [EOL]         } [EOL]  [EOL]         public MultivariateFunction partialDerivative(final int k) { [EOL]             return new MultivariateFunction() { [EOL]  [EOL]                 public double value(double[] point) { [EOL]                     return point[k] / FastMath.hypot(point[0], point[1]); [EOL]                 } [EOL]             }; [EOL]         } [EOL]  [EOL]         public MultivariateVectorFunction gradient() { [EOL]             return new MultivariateVectorFunction() { [EOL]  [EOL]                 public double[] value(double[] point) { [EOL]                     final double h = FastMath.hypot(point[0], point[1]); [EOL]                     return new double[] { point[0] / h, point[1] / h }; [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL]     MultivariateDifferentiableFunction converted = FunctionUtils.toMultivariateDifferentiableFunction(hypot); [EOL]     for (double x = 0.1; x < 0.5; x += 0.01) { [EOL]         for (double y = 0.1; y < 0.5; y += 0.01) { [EOL]             DerivativeStructure[] t = new DerivativeStructure[] { new DerivativeStructure(3, 1, x, 1.0, 2.0, 3.0), new DerivativeStructure(3, 1, y, 4.0, 5.0, 6.0) }; [EOL]             DerivativeStructure h = DerivativeStructure.hypot(t[0], t[1]); [EOL]             Assert.assertEquals(h.getValue(), converted.value(t).getValue(), 1.0e-10); [EOL]             Assert.assertEquals(h.getPartialDerivative(1, 0, 0), converted.value(t).getPartialDerivative(1, 0, 0), 1.0e-10); [EOL]             Assert.assertEquals(h.getPartialDerivative(0, 1, 0), converted.value(t).getPartialDerivative(0, 1, 0), 1.0e-10); [EOL]             Assert.assertEquals(h.getPartialDerivative(0, 0, 1), converted.value(t).getPartialDerivative(0, 0, 1), 1.0e-10); [EOL]         } [EOL]     } [EOL] } <line_num>: 298,347
