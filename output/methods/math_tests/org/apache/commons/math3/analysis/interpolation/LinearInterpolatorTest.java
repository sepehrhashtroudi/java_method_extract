@Test [EOL] public void testInterpolateLinearDegenerateTwoSegment() { [EOL]     double[] x = { 0.0, 0.5, 1.0 }; [EOL]     double[] y = { 0.0, 0.5, 1.0 }; [EOL]     UnivariateInterpolator i = new LinearInterpolator(); [EOL]     UnivariateFunction f = i.interpolate(x, y); [EOL]     verifyInterpolation(f, x, y); [EOL]     PolynomialFunction[] polynomials = ((PolynomialSplineFunction) f).getPolynomials(); [EOL]     double[] target = { y[0], 1d }; [EOL]     TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); [EOL]     target = new double[] { y[1], 1d }; [EOL]     TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); [EOL]     Assert.assertEquals(0.0, f.value(0.0), interpolationTolerance); [EOL]     Assert.assertEquals(0.4, f.value(0.4), interpolationTolerance); [EOL]     Assert.assertEquals(1.0, f.value(1.0), interpolationTolerance); [EOL] } <line_num>: 43,63
@Test [EOL] public void testInterpolateLinearDegenerateThreeSegment() { [EOL]     double[] x = { 0.0, 0.5, 1.0, 1.5 }; [EOL]     double[] y = { 0.0, 0.5, 1.0, 1.5 }; [EOL]     UnivariateInterpolator i = new LinearInterpolator(); [EOL]     UnivariateFunction f = i.interpolate(x, y); [EOL]     verifyInterpolation(f, x, y); [EOL]     PolynomialFunction[] polynomials = ((PolynomialSplineFunction) f).getPolynomials(); [EOL]     double[] target = { y[0], 1d }; [EOL]     TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); [EOL]     target = new double[] { y[1], 1d }; [EOL]     TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); [EOL]     target = new double[] { y[2], 1d }; [EOL]     TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance); [EOL]     Assert.assertEquals(0, f.value(0), interpolationTolerance); [EOL]     Assert.assertEquals(1.4, f.value(1.4), interpolationTolerance); [EOL]     Assert.assertEquals(1.5, f.value(1.5), interpolationTolerance); [EOL] } <line_num>: 65,87
@Test [EOL] public void testInterpolateLinear() { [EOL]     double[] x = { 0.0, 0.5, 1.0 }; [EOL]     double[] y = { 0.0, 0.5, 0.0 }; [EOL]     UnivariateInterpolator i = new LinearInterpolator(); [EOL]     UnivariateFunction f = i.interpolate(x, y); [EOL]     verifyInterpolation(f, x, y); [EOL]     PolynomialFunction[] polynomials = ((PolynomialSplineFunction) f).getPolynomials(); [EOL]     double[] target = { y[0], 1d }; [EOL]     TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); [EOL]     target = new double[] { y[1], -1d }; [EOL]     TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); [EOL] } <line_num>: 89,103
@Test [EOL] public void testIllegalArguments() { [EOL]     UnivariateInterpolator i = new LinearInterpolator(); [EOL]     try { [EOL]         double[] xval = { 0.0, 1.0 }; [EOL]         double[] yval = { 0.0, 1.0, 2.0 }; [EOL]         i.interpolate(xval, yval); [EOL]         Assert.fail("Failed to detect data set array with different sizes."); [EOL]     } catch (DimensionMismatchException iae) { [EOL]     } [EOL]     try { [EOL]         double[] xval = { 0.0, 1.0, 0.5 }; [EOL]         double[] yval = { 0.0, 1.0, 2.0 }; [EOL]         i.interpolate(xval, yval); [EOL]         Assert.fail("Failed to detect unsorted arguments."); [EOL]     } catch (NonMonotonicSequenceException iae) { [EOL]     } [EOL]     try { [EOL]         double[] xval = { 0.0 }; [EOL]         double[] yval = { 0.0 }; [EOL]         i.interpolate(xval, yval); [EOL]         Assert.fail("Failed to detect unsorted arguments."); [EOL]     } catch (NumberIsTooSmallException iae) { [EOL]     } [EOL] } <line_num>: 105,135
protected void verifyInterpolation(UnivariateFunction f, double[] x, double[] y) { [EOL]     for (int i = 0; i < x.length; i++) { [EOL]         Assert.assertEquals(f.value(x[i]), y[i], knotTolerance); [EOL]     } [EOL] } <line_num>: 140,145
