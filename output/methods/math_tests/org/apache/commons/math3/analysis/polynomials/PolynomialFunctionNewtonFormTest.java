@Test [EOL] public void testLinearFunction() { [EOL]     PolynomialFunctionNewtonForm p; [EOL]     double coefficients[], z, expected, result, tolerance = 1E-12; [EOL]     double[] a = { 2.0, 1.5 }; [EOL]     double[] c = { 4.0 }; [EOL]     p = new PolynomialFunctionNewtonForm(a, c); [EOL]     z = 2.0; [EOL]     expected = -1.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = 4.5; [EOL]     expected = 2.75; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = 6.0; [EOL]     expected = 5.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     Assert.assertEquals(1, p.degree()); [EOL]     coefficients = p.getCoefficients(); [EOL]     Assert.assertEquals(2, coefficients.length); [EOL]     Assert.assertEquals(-4.0, coefficients[0], tolerance); [EOL]     Assert.assertEquals(1.5, coefficients[1], tolerance); [EOL] } <line_num>: 37,62
@Test [EOL] public void testQuadraticFunction() { [EOL]     PolynomialFunctionNewtonForm p; [EOL]     double coefficients[], z, expected, result, tolerance = 1E-12; [EOL]     double[] a = { 4.0, 3.0, 2.0 }; [EOL]     double[] c = { 1.0, -2.0 }; [EOL]     p = new PolynomialFunctionNewtonForm(a, c); [EOL]     z = 1.0; [EOL]     expected = 4.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = 2.5; [EOL]     expected = 22.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = -2.0; [EOL]     expected = -5.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     Assert.assertEquals(2, p.degree()); [EOL]     coefficients = p.getCoefficients(); [EOL]     Assert.assertEquals(3, coefficients.length); [EOL]     Assert.assertEquals(-3.0, coefficients[0], tolerance); [EOL]     Assert.assertEquals(5.0, coefficients[1], tolerance); [EOL]     Assert.assertEquals(2.0, coefficients[2], tolerance); [EOL] } <line_num>: 67,93
@Test [EOL] public void testQuinticFunction() { [EOL]     PolynomialFunctionNewtonForm p; [EOL]     double coefficients[], z, expected, result, tolerance = 1E-12; [EOL]     double[] a = { 0.0, 6.0, -6.0, -6.0, 1.0, 1.0 }; [EOL]     double[] c = { 0.0, 0.0, 1.0, -1.0, 2.0 }; [EOL]     p = new PolynomialFunctionNewtonForm(a, c); [EOL]     z = 0.0; [EOL]     expected = 0.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = -2.0; [EOL]     expected = 0.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = 4.0; [EOL]     expected = 360.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     Assert.assertEquals(5, p.degree()); [EOL]     coefficients = p.getCoefficients(); [EOL]     Assert.assertEquals(6, coefficients.length); [EOL]     Assert.assertEquals(0.0, coefficients[0], tolerance); [EOL]     Assert.assertEquals(6.0, coefficients[1], tolerance); [EOL]     Assert.assertEquals(1.0, coefficients[2], tolerance); [EOL]     Assert.assertEquals(-7.0, coefficients[3], tolerance); [EOL]     Assert.assertEquals(-1.0, coefficients[4], tolerance); [EOL]     Assert.assertEquals(1.0, coefficients[5], tolerance); [EOL] } <line_num>: 98,128
@Test [EOL] public void testDerivative() { [EOL]     PolynomialFunctionNewtonForm p = new PolynomialFunctionNewtonForm(new double[] { 0, 1, 3, 1 }, new double[] { 0, 1, 2 }); [EOL]     double eps = 2.0e-14; [EOL]     for (double t = 0.0; t < 10.0; t += 0.1) { [EOL]         DerivativeStructure x = new DerivativeStructure(1, 4, 0, t); [EOL]         DerivativeStructure y = p.value(x); [EOL]         Assert.assertEquals(t * t * t, y.getValue(), eps * t * t * t); [EOL]         Assert.assertEquals(3.0 * t * t, y.getPartialDerivative(1), eps * 3.0 * t * t); [EOL]         Assert.assertEquals(6.0 * t, y.getPartialDerivative(2), eps * 6.0 * t); [EOL]         Assert.assertEquals(6.0, y.getPartialDerivative(3), eps * 6.0); [EOL]         Assert.assertEquals(0.0, y.getPartialDerivative(4), eps); [EOL]     } [EOL] } <line_num>: 133,152
@Test [EOL] public void testParameters() { [EOL]     try { [EOL]         double[] a = { 1.0 }; [EOL]         double[] c = { 2.0 }; [EOL]         new PolynomialFunctionNewtonForm(a, c); [EOL]         Assert.fail("Expecting MathIllegalArgumentException - bad input array length"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         double[] a = { 1.0, 2.0, 3.0, 4.0 }; [EOL]         double[] c = { 4.0, 3.0, 2.0, 1.0 }; [EOL]         new PolynomialFunctionNewtonForm(a, c); [EOL]         Assert.fail("Expecting MathIllegalArgumentException - mismatch input arrays"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 157,178
