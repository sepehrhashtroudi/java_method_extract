public double value(double[] x) { [EOL]     if (x.length != 2) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     return 2 * x[0] - 3 * x[1] + 5; [EOL] } <line_num>: 38,43
@Test [EOL] public void testLinearFunction2D() { [EOL]     MultivariateFunction f = new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] x) { [EOL]             if (x.length != 2) { [EOL]                 throw new IllegalArgumentException(); [EOL]             } [EOL]             return 2 * x[0] - 3 * x[1] + 5; [EOL]         } [EOL]     }; [EOL]     MultivariateInterpolator interpolator = new MicrosphereInterpolator(); [EOL]     final int n = 9; [EOL]     final int dim = 2; [EOL]     double[][] x = new double[n][dim]; [EOL]     double[] y = new double[n]; [EOL]     int index = 0; [EOL]     for (int i = -1; i <= 1; i++) { [EOL]         for (int j = -1; j <= 1; j++) { [EOL]             x[index][0] = i; [EOL]             x[index][1] = j; [EOL]             y[index] = f.value(x[index]); [EOL]             ++index; [EOL]         } [EOL]     } [EOL]     MultivariateFunction p = interpolator.interpolate(x, y); [EOL]     double[] c = new double[dim]; [EOL]     double expected, result; [EOL]     c[0] = 0; [EOL]     c[1] = 0; [EOL]     expected = f.value(c); [EOL]     result = p.value(c); [EOL]     Assert.assertEquals("On sample point", expected, result, FastMath.ulp(1d)); [EOL]     c[0] = 0 + 1e-5; [EOL]     c[1] = 1 - 1e-5; [EOL]     expected = f.value(c); [EOL]     result = p.value(c); [EOL]     Assert.assertEquals("1e-5 away from sample point", expected, result, 1e-4); [EOL] } <line_num>: 35,79
public double value(double[] x) { [EOL]     if (x.length != 2) { [EOL]         throw new IllegalArgumentException(); [EOL]     } [EOL]     return 2 * x[0] * x[0] - 3 * x[1] * x[1] + 4 * x[0] * x[1] - 5; [EOL] } <line_num>: 90,95
@Test [EOL] public void testParaboloid2D() { [EOL]     MultivariateFunction f = new MultivariateFunction() { [EOL]  [EOL]         public double value(double[] x) { [EOL]             if (x.length != 2) { [EOL]                 throw new IllegalArgumentException(); [EOL]             } [EOL]             return 2 * x[0] * x[0] - 3 * x[1] * x[1] + 4 * x[0] * x[1] - 5; [EOL]         } [EOL]     }; [EOL]     MultivariateInterpolator interpolator = new MicrosphereInterpolator(); [EOL]     final int n = 121; [EOL]     final int dim = 2; [EOL]     double[][] x = new double[n][dim]; [EOL]     double[] y = new double[n]; [EOL]     int index = 0; [EOL]     for (int i = -10; i <= 10; i += 2) { [EOL]         for (int j = -10; j <= 10; j += 2) { [EOL]             x[index][0] = i; [EOL]             x[index][1] = j; [EOL]             y[index] = f.value(x[index]); [EOL]             ++index; [EOL]         } [EOL]     } [EOL]     MultivariateFunction p = interpolator.interpolate(x, y); [EOL]     double[] c = new double[dim]; [EOL]     double expected, result; [EOL]     c[0] = 0; [EOL]     c[1] = 0; [EOL]     expected = f.value(c); [EOL]     result = p.value(c); [EOL]     Assert.assertEquals("On sample point", expected, result, FastMath.ulp(1d)); [EOL]     c[0] = 2 + 1e-5; [EOL]     c[1] = 2 - 1e-5; [EOL]     expected = f.value(c); [EOL]     result = p.value(c); [EOL]     Assert.assertEquals("1e-5 away from sample point", expected, result, 1e-3); [EOL] } <line_num>: 87,131
