@Test [EOL] public void testPreconditions() { [EOL]     double[] xval = new double[] { 3, 4, 5, 6.5 }; [EOL]     double[] yval = new double[] { -4, -3, -1, 2.5 }; [EOL]     double[][] zval = new double[xval.length][yval.length]; [EOL]     BivariateGridInterpolator interpolator = new SmoothingPolynomialBicubicSplineInterpolator(0); [EOL]     @SuppressWarnings("unused") [EOL]     BivariateFunction p = interpolator.interpolate(xval, yval, zval); [EOL]     double[] wxval = new double[] { 3, 2, 5, 6.5 }; [EOL]     try { [EOL]         p = interpolator.interpolate(wxval, yval, zval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     double[] wyval = new double[] { -4, -3, -1, -1 }; [EOL]     try { [EOL]         p = interpolator.interpolate(xval, wyval, zval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     double[][] wzval = new double[xval.length][yval.length + 1]; [EOL]     try { [EOL]         p = interpolator.interpolate(xval, yval, wzval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     wzval = new double[xval.length - 1][yval.length]; [EOL]     try { [EOL]         p = interpolator.interpolate(xval, yval, wzval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     wzval = new double[xval.length][yval.length - 1]; [EOL]     try { [EOL]         p = interpolator.interpolate(xval, yval, wzval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL] } <line_num>: 35,83
public double value(double x, double y) { [EOL]     return 2 * x - 3 * y + 5 + ((int) (FastMath.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1); [EOL] } <line_num>: 93,96
@Test [EOL] public void testPlane() { [EOL]     BivariateFunction f = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             return 2 * x - 3 * y + 5 + ((int) (FastMath.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1); [EOL]         } [EOL]     }; [EOL]     BivariateGridInterpolator interpolator = new SmoothingPolynomialBicubicSplineInterpolator(1); [EOL]     double[] xval = new double[] { 3, 4, 5, 6.5 }; [EOL]     double[] yval = new double[] { -4, -3, -1, 2, 2.5 }; [EOL]     double[][] zval = new double[xval.length][yval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             zval[i][j] = f.value(xval[i], yval[j]); [EOL]         } [EOL]     } [EOL]     BivariateFunction p = interpolator.interpolate(xval, yval, zval); [EOL]     double x, y; [EOL]     double expected, result; [EOL]     x = 4; [EOL]     y = -3; [EOL]     expected = f.value(x, y); [EOL]     result = p.value(x, y); [EOL]     Assert.assertEquals("On sample point", expected, result, 2); [EOL]     x = 4.5; [EOL]     y = -1.5; [EOL]     expected = f.value(x, y); [EOL]     result = p.value(x, y); [EOL]     Assert.assertEquals("half-way between sample points (middle of the patch)", expected, result, 2); [EOL]     x = 3.5; [EOL]     y = -3.5; [EOL]     expected = f.value(x, y); [EOL]     result = p.value(x, y); [EOL]     Assert.assertEquals("half-way between sample points (border of the patch)", expected, result, 2); [EOL] } <line_num>: 90,131
public double value(double x, double y) { [EOL]     return 2 * x * x - 3 * y * y + 4 * x * y - 5 + ((int) (FastMath.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1); [EOL] } <line_num>: 141,144
@Test [EOL] public void testParaboloid() { [EOL]     BivariateFunction f = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             return 2 * x * x - 3 * y * y + 4 * x * y - 5 + ((int) (FastMath.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1); [EOL]         } [EOL]     }; [EOL]     BivariateGridInterpolator interpolator = new SmoothingPolynomialBicubicSplineInterpolator(4); [EOL]     double[] xval = new double[] { 3, 4, 5, 6.5 }; [EOL]     double[] yval = new double[] { -4, -3, -2, -1, 0.5, 2.5 }; [EOL]     double[][] zval = new double[xval.length][yval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             zval[i][j] = f.value(xval[i], yval[j]); [EOL]         } [EOL]     } [EOL]     BivariateFunction p = interpolator.interpolate(xval, yval, zval); [EOL]     double x, y; [EOL]     double expected, result; [EOL]     x = 5; [EOL]     y = 0.5; [EOL]     expected = f.value(x, y); [EOL]     result = p.value(x, y); [EOL]     Assert.assertEquals("On sample point", expected, result, 2); [EOL]     x = 4.5; [EOL]     y = -1.5; [EOL]     expected = f.value(x, y); [EOL]     result = p.value(x, y); [EOL]     Assert.assertEquals("half-way between sample points (middle of the patch)", expected, result, 2); [EOL]     x = 3.5; [EOL]     y = -3.5; [EOL]     expected = f.value(x, y); [EOL]     result = p.value(x, y); [EOL]     Assert.assertEquals("half-way between sample points (border of the patch)", expected, result, 2); [EOL] } <line_num>: 138,179
