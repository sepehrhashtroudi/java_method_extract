public double value(double x) { [EOL]     return Math.sqrt(x); [EOL] } <line_num>: 32,34
@Test [EOL] public void testComparison() { [EOL]     final Sqrt s = new Sqrt(); [EOL]     final UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return Math.sqrt(x); [EOL]         } [EOL]     }; [EOL]     for (double x = 1e-30; x < 1e10; x *= 2) { [EOL]         final double fX = f.value(x); [EOL]         final double sX = s.value(x); [EOL]         Assert.assertEquals("x=" + x, fX, sX, 0); [EOL]     } [EOL] } <line_num>: 28,42
public double value(double x) { [EOL]     return 1 / (2 * Math.sqrt(x)); [EOL] } <line_num>: 48,50
@Test [EOL] public void testDerivativeComparison() { [EOL]     final UnivariateDifferentiableFunction sPrime = new Sqrt(); [EOL]     final UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             return 1 / (2 * Math.sqrt(x)); [EOL]         } [EOL]     }; [EOL]     for (double x = 1e-30; x < 1e10; x *= 2) { [EOL]         final double fX = f.value(x); [EOL]         final double sX = sPrime.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1); [EOL]         Assert.assertEquals("x=" + x, fX, sX, FastMath.ulp(fX)); [EOL]     } [EOL] } <line_num>: 44,58
@Test [EOL] public void testDerivativesHighOrder() { [EOL]     DerivativeStructure s = new Sqrt().value(new DerivativeStructure(1, 5, 0, 1.2)); [EOL]     Assert.assertEquals(1.0954451150103322269, s.getPartialDerivative(0), 1.0e-16); [EOL]     Assert.assertEquals(0.45643546458763842789, s.getPartialDerivative(1), 1.0e-16); [EOL]     Assert.assertEquals(-0.1901814435781826783, s.getPartialDerivative(2), 1.0e-16); [EOL]     Assert.assertEquals(0.23772680447272834785, s.getPartialDerivative(3), 1.0e-16); [EOL]     Assert.assertEquals(-0.49526417598485072465, s.getPartialDerivative(4), 1.0e-16); [EOL]     Assert.assertEquals(1.4445205132891479465, s.getPartialDerivative(5), 5.0e-16); [EOL] } <line_num>: 60,69
