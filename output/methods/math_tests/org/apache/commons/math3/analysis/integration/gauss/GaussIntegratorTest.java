@Test [EOL] public void testGetWeights() { [EOL]     final double[] points = { 0, 1.2, 3.4 }; [EOL]     final double[] weights = { 9.8, 7.6, 5.4 }; [EOL]     final GaussIntegrator integrator = new GaussIntegrator(new Pair<double[], double[]>(points, weights)); [EOL]     Assert.assertEquals(weights.length, integrator.getNumberOfPoints()); [EOL]     for (int i = 0; i < integrator.getNumberOfPoints(); i++) { [EOL]         Assert.assertEquals(weights[i], integrator.getWeight(i), 0d); [EOL]     } [EOL] } <line_num>: 31,44
@Test [EOL] public void testGetPoints() { [EOL]     final double[] points = { 0, 1.2, 3.4 }; [EOL]     final double[] weights = { 9.8, 7.6, 5.4 }; [EOL]     final GaussIntegrator integrator = new GaussIntegrator(new Pair<double[], double[]>(points, weights)); [EOL]     Assert.assertEquals(points.length, integrator.getNumberOfPoints()); [EOL]     for (int i = 0; i < integrator.getNumberOfPoints(); i++) { [EOL]         Assert.assertEquals(points[i], integrator.getPoint(i), 0d); [EOL]     } [EOL] } <line_num>: 46,59
@Test [EOL] public void testIntegrate() { [EOL]     final double[] points = { 0, 1, 2, 3, 4, 5 }; [EOL]     final double[] weights = { 1, 1, 1, 1, 1, 1 }; [EOL]     final GaussIntegrator integrator = new GaussIntegrator(new Pair<double[], double[]>(points, weights)); [EOL]     final double val = 123.456; [EOL]     final UnivariateFunction c = new Constant(val); [EOL]     final double s = integrator.integrate(c); [EOL]     Assert.assertEquals(points.length * val, s, 0d); [EOL] } <line_num>: 61,74
