@Test [EOL] public void testLinearFunction() { [EOL]     PolynomialFunctionLagrangeForm p; [EOL]     double c[], z, expected, result, tolerance = 1E-12; [EOL]     double[] x = { 0.0, 3.0 }; [EOL]     double[] y = { -4.0, 0.5 }; [EOL]     p = new PolynomialFunctionLagrangeForm(x, y); [EOL]     z = 2.0; [EOL]     expected = -1.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = 4.5; [EOL]     expected = 2.75; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = 6.0; [EOL]     expected = 5.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     Assert.assertEquals(1, p.degree()); [EOL]     c = p.getCoefficients(); [EOL]     Assert.assertEquals(2, c.length); [EOL]     Assert.assertEquals(-4.0, c[0], tolerance); [EOL]     Assert.assertEquals(1.5, c[1], tolerance); [EOL] } <line_num>: 37,62
@Test [EOL] public void testQuadraticFunction() { [EOL]     PolynomialFunctionLagrangeForm p; [EOL]     double c[], z, expected, result, tolerance = 1E-12; [EOL]     double[] x = { 0.0, -1.0, 0.5 }; [EOL]     double[] y = { -3.0, -6.0, 0.0 }; [EOL]     p = new PolynomialFunctionLagrangeForm(x, y); [EOL]     z = 1.0; [EOL]     expected = 4.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = 2.5; [EOL]     expected = 22.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = -2.0; [EOL]     expected = -5.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     Assert.assertEquals(2, p.degree()); [EOL]     c = p.getCoefficients(); [EOL]     Assert.assertEquals(3, c.length); [EOL]     Assert.assertEquals(-3.0, c[0], tolerance); [EOL]     Assert.assertEquals(5.0, c[1], tolerance); [EOL]     Assert.assertEquals(2.0, c[2], tolerance); [EOL] } <line_num>: 67,93
@Test [EOL] public void testQuinticFunction() { [EOL]     PolynomialFunctionLagrangeForm p; [EOL]     double c[], z, expected, result, tolerance = 1E-12; [EOL]     double[] x = { 1.0, -1.0, 2.0, 3.0, -3.0, 0.5 }; [EOL]     double[] y = { 0.0, 0.0, -24.0, 0.0, -144.0, 2.34375 }; [EOL]     p = new PolynomialFunctionLagrangeForm(x, y); [EOL]     z = 0.0; [EOL]     expected = 0.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = -2.0; [EOL]     expected = 0.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     z = 4.0; [EOL]     expected = 360.0; [EOL]     result = p.value(z); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     Assert.assertEquals(5, p.degree()); [EOL]     c = p.getCoefficients(); [EOL]     Assert.assertEquals(6, c.length); [EOL]     Assert.assertEquals(0.0, c[0], tolerance); [EOL]     Assert.assertEquals(6.0, c[1], tolerance); [EOL]     Assert.assertEquals(1.0, c[2], tolerance); [EOL]     Assert.assertEquals(-7.0, c[3], tolerance); [EOL]     Assert.assertEquals(-1.0, c[4], tolerance); [EOL]     Assert.assertEquals(1.0, c[5], tolerance); [EOL] } <line_num>: 98,127
@Test [EOL] public void testParameters() { [EOL]     try { [EOL]         double[] x = { 1.0 }; [EOL]         double[] y = { 2.0 }; [EOL]         new PolynomialFunctionLagrangeForm(x, y); [EOL]         Assert.fail("Expecting MathIllegalArgumentException - bad input array length"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         double[] x = { 1.0, 2.0, 3.0, 4.0 }; [EOL]         double[] y = { 0.0, -4.0, -24.0 }; [EOL]         new PolynomialFunctionLagrangeForm(x, y); [EOL]         Assert.fail("Expecting MathIllegalArgumentException - mismatch input arrays"); [EOL]     } catch (MathIllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 132,153
