@Test [EOL] public void testSine() { [EOL]     final int n = 30; [EOL]     final double[] xval = new double[n]; [EOL]     final double[] yval = new double[n]; [EOL]     final double period = 12.3; [EOL]     final double offset = 45.67; [EOL]     double delta = 0; [EOL]     for (int i = 0; i < n; i++) { [EOL]         delta += rng.nextDouble() * period / n; [EOL]         xval[i] = offset + delta; [EOL]         yval[i] = FastMath.sin(xval[i]); [EOL]     } [EOL]     final UnivariateInterpolator inter = new LinearInterpolator(); [EOL]     final UnivariateFunction f = inter.interpolate(xval, yval); [EOL]     final UnivariateInterpolator interP = new UnivariatePeriodicInterpolator(new LinearInterpolator(), period, 1); [EOL]     final UnivariateFunction fP = interP.interpolate(xval, yval); [EOL]     final double xMin = xval[0]; [EOL]     final double xMax = xval[n - 1]; [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double x = xMin + (xMax - xMin) * rng.nextDouble(); [EOL]         final double y = f.value(x); [EOL]         final double yP = fP.value(x); [EOL]         Assert.assertEquals("x=" + x, y, yP, Math.ulp(1d)); [EOL]     } [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double xIn = offset + rng.nextDouble() * period; [EOL]         final double xOut = xIn + rng.nextInt(123456789) * period; [EOL]         final double yIn = fP.value(xIn); [EOL]         final double yOut = fP.value(xOut); [EOL]         Assert.assertEquals(yIn, yOut, 1e-7); [EOL]     } [EOL] } <line_num>: 35,78
@Test [EOL] public void testLessThanOnePeriodCoverage() { [EOL]     final int n = 30; [EOL]     final double[] xval = new double[n]; [EOL]     final double[] yval = new double[n]; [EOL]     final double period = 12.3; [EOL]     final double offset = 45.67; [EOL]     double delta = period / 2; [EOL]     for (int i = 0; i < n; i++) { [EOL]         delta += period / (2 * n) * rng.nextDouble(); [EOL]         xval[i] = offset + delta; [EOL]         yval[i] = FastMath.sin(xval[i]); [EOL]     } [EOL]     final UnivariateInterpolator interP = new UnivariatePeriodicInterpolator(new LinearInterpolator(), period, 1); [EOL]     final UnivariateFunction fP = interP.interpolate(xval, yval); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double xIn = offset + rng.nextDouble() * period; [EOL]         final double xOut = xIn + rng.nextInt(123456789) * period; [EOL]         final double yIn = fP.value(xIn); [EOL]         final double yOut = fP.value(xOut); [EOL]         Assert.assertEquals(yIn, yOut, 1e-7); [EOL]     } [EOL] } <line_num>: 80,109
@Test [EOL] public void testMoreThanOnePeriodCoverage() { [EOL]     final int n = 30; [EOL]     final double[] xval = new double[n]; [EOL]     final double[] yval = new double[n]; [EOL]     final double period = 12.3; [EOL]     final double offset = 45.67; [EOL]     double delta = period / 2; [EOL]     for (int i = 0; i < n; i++) { [EOL]         delta += 10 * period / n * rng.nextDouble(); [EOL]         xval[i] = offset + delta; [EOL]         yval[i] = FastMath.sin(xval[i]); [EOL]     } [EOL]     final UnivariateInterpolator interP = new UnivariatePeriodicInterpolator(new LinearInterpolator(), period, 1); [EOL]     final UnivariateFunction fP = interP.interpolate(xval, yval); [EOL]     for (int i = 0; i < n; i++) { [EOL]         final double xIn = offset + rng.nextDouble() * period; [EOL]         final double xOut = xIn + rng.nextInt(123456789) * period; [EOL]         final double yIn = fP.value(xIn); [EOL]         final double yOut = fP.value(xOut); [EOL]         Assert.assertEquals(yIn, yOut, 1e-6); [EOL]     } [EOL] } <line_num>: 111,140
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testTooFewSamples() { [EOL]     final double[] xval = { 2, 3, 7 }; [EOL]     final double[] yval = { 1, 6, 5 }; [EOL]     final double period = 10; [EOL]     final UnivariateInterpolator interpolator = new UnivariatePeriodicInterpolator(new LinearInterpolator(), period); [EOL]     interpolator.interpolate(xval, yval); [EOL] } <line_num>: 142,151
@Test(expected = NonMonotonicSequenceException.class) [EOL] public void testUnsortedSamples() { [EOL]     final double[] xval = { 2, 3, 7, 4, 6 }; [EOL]     final double[] yval = { 1, 6, 5, -1, -2 }; [EOL]     final double period = 10; [EOL]     final UnivariateInterpolator interpolator = new UnivariatePeriodicInterpolator(new LinearInterpolator(), period); [EOL]     interpolator.interpolate(xval, yval); [EOL] } <line_num>: 153,162
