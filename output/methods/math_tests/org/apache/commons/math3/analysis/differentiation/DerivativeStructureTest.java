@Override [EOL] protected DerivativeStructure build(final double x) { [EOL]     return new DerivativeStructure(2, 1, 0, x); [EOL] } <line_num>: 40,43
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testWrongVariableIndex() { [EOL]     new DerivativeStructure(3, 1, 3, 1.0); [EOL] } <line_num>: 45,48
@Test(expected = DimensionMismatchException.class) [EOL] public void testMissingOrders() { [EOL]     new DerivativeStructure(3, 1, 0, 1.0).getPartialDerivative(0, 1); [EOL] } <line_num>: 50,53
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testTooLargeOrder() { [EOL]     new DerivativeStructure(3, 1, 0, 1.0).getPartialDerivative(1, 1, 2); [EOL] } <line_num>: 55,58
@Test [EOL] public void testVariableWithoutDerivative0() { [EOL]     DerivativeStructure v = new DerivativeStructure(1, 0, 0, 1.0); [EOL]     Assert.assertEquals(1.0, v.getValue(), 1.0e-15); [EOL] } <line_num>: 60,64
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testVariableWithoutDerivative1() { [EOL]     DerivativeStructure v = new DerivativeStructure(1, 0, 0, 1.0); [EOL]     Assert.assertEquals(1.0, v.getPartialDerivative(1), 1.0e-15); [EOL] } <line_num>: 66,70
@Test [EOL] public void testVariable() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0), 1.0, 1.0, 0.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0), 2.0, 0.0, 1.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0), 3.0, 0.0, 0.0, 1.0); [EOL]     } [EOL] } <line_num>: 72,82
@Test [EOL] public void testConstant() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, FastMath.PI), FastMath.PI, 0.0, 0.0, 0.0); [EOL]     } [EOL] } <line_num>: 84,90
@Test [EOL] public void testCreateConstant() { [EOL]     DerivativeStructure a = new DerivativeStructure(3, 2, 0, 1.3); [EOL]     DerivativeStructure b = a.createConstant(2.5); [EOL]     Assert.assertEquals(a.getFreeParameters(), b.getFreeParameters()); [EOL]     Assert.assertEquals(a.getOrder(), b.getOrder()); [EOL]     checkEquals(a.getField().getOne().multiply(2.5), b, 1.0e-15); [EOL] } <line_num>: 92,99
@Test [EOL] public void testPrimitiveAdd() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).add(5), 6.0, 1.0, 0.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).add(5), 7.0, 0.0, 1.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).add(5), 8.0, 0.0, 0.0, 1.0); [EOL]     } [EOL] } <line_num>: 101,108
@Test [EOL] public void testAdd() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0); [EOL]         DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0); [EOL]         DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0); [EOL]         DerivativeStructure xyz = x.add(y.add(z)); [EOL]         checkF0F1(xyz, x.getValue() + y.getValue() + z.getValue(), 1.0, 1.0, 1.0); [EOL]     } [EOL] } <line_num>: 110,119
@Test [EOL] public void testPrimitiveSubtract() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).subtract(5), -4.0, 1.0, 0.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).subtract(5), -3.0, 0.0, 1.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).subtract(5), -2.0, 0.0, 0.0, 1.0); [EOL]     } [EOL] } <line_num>: 121,128
@Test [EOL] public void testSubtract() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0); [EOL]         DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0); [EOL]         DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0); [EOL]         DerivativeStructure xyz = x.subtract(y.subtract(z)); [EOL]         checkF0F1(xyz, x.getValue() - (y.getValue() - z.getValue()), 1.0, -1.0, 1.0); [EOL]     } [EOL] } <line_num>: 130,139
@Test [EOL] public void testPrimitiveMultiply() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).multiply(5), 5.0, 5.0, 0.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).multiply(5), 10.0, 0.0, 5.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).multiply(5), 15.0, 0.0, 0.0, 5.0); [EOL]     } [EOL] } <line_num>: 141,148
@Test [EOL] public void testMultiply() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0); [EOL]         DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0); [EOL]         DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0); [EOL]         DerivativeStructure xyz = x.multiply(y.multiply(z)); [EOL]         for (int i = 0; i <= maxOrder; ++i) { [EOL]             for (int j = 0; j <= maxOrder; ++j) { [EOL]                 for (int k = 0; k <= maxOrder; ++k) { [EOL]                     if (i + j + k <= maxOrder) { [EOL]                         Assert.assertEquals((i == 0 ? x.getValue() : (i == 1 ? 1.0 : 0.0)) * (j == 0 ? y.getValue() : (j == 1 ? 1.0 : 0.0)) * (k == 0 ? z.getValue() : (k == 1 ? 1.0 : 0.0)), xyz.getPartialDerivative(i, j, k), 1.0e-15); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 150,171
@Test [EOL] public void testNegate() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 0, 1.0).negate(), -1.0, -1.0, 0.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 1, 2.0).negate(), -2.0, 0.0, -1.0, 0.0); [EOL]         checkF0F1(new DerivativeStructure(3, maxOrder, 2, 3.0).negate(), -3.0, 0.0, 0.0, -1.0); [EOL]     } [EOL] } <line_num>: 173,180
@Test [EOL] public void testReciprocal() { [EOL]     for (double x = 0.1; x < 1.2; x += 0.1) { [EOL]         DerivativeStructure r = new DerivativeStructure(1, 6, 0, x).reciprocal(); [EOL]         Assert.assertEquals(1 / x, r.getValue(), 1.0e-15); [EOL]         for (int i = 1; i < r.getOrder(); ++i) { [EOL]             double expected = ArithmeticUtils.pow(-1, i) * CombinatoricsUtils.factorial(i) / FastMath.pow(x, i + 1); [EOL]             Assert.assertEquals(expected, r.getPartialDerivative(i), 1.0e-15 * FastMath.abs(expected)); [EOL]         } [EOL]     } [EOL] } <line_num>: 182,193
@Test [EOL] public void testPow() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         for (int n = 0; n < 10; ++n) { [EOL]             DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0); [EOL]             DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 2.0); [EOL]             DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 3.0); [EOL]             List<DerivativeStructure> list = Arrays.asList(x, y, z, x.add(y).add(z), x.multiply(y).multiply(z)); [EOL]             if (n == 0) { [EOL]                 for (DerivativeStructure ds : list) { [EOL]                     checkEquals(ds.getField().getOne(), ds.pow(n), 1.0e-15); [EOL]                 } [EOL]             } else if (n == 1) { [EOL]                 for (DerivativeStructure ds : list) { [EOL]                     checkEquals(ds, ds.pow(n), 1.0e-15); [EOL]                 } [EOL]             } else { [EOL]                 for (DerivativeStructure ds : list) { [EOL]                     DerivativeStructure p = ds.getField().getOne(); [EOL]                     for (int i = 0; i < n; ++i) { [EOL]                         p = p.multiply(ds); [EOL]                     } [EOL]                     checkEquals(p, ds.pow(n), 1.0e-15); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 195,226
@Test [EOL] public void testPowDoubleDS() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 0.1); [EOL]         DerivativeStructure y = new DerivativeStructure(3, maxOrder, 1, 0.2); [EOL]         DerivativeStructure z = new DerivativeStructure(3, maxOrder, 2, 0.3); [EOL]         List<DerivativeStructure> list = Arrays.asList(x, y, z, x.add(y).add(z), x.multiply(y).multiply(z)); [EOL]         for (DerivativeStructure ds : list) { [EOL]             for (double a : new double[] { 0.0, 0.1, 1.0, 2.0, 5.0 }) { [EOL]                 DerivativeStructure reference = (a == 0) ? x.getField().getZero() : new DerivativeStructure(3, maxOrder, a).pow(ds); [EOL]                 DerivativeStructure result = DerivativeStructure.pow(a, ds); [EOL]                 checkEquals(reference, result, 1.0e-15); [EOL]             } [EOL]         } [EOL]         DerivativeStructure negEvenInteger = DerivativeStructure.pow(-2.0, new DerivativeStructure(3, maxOrder, 0, 2.0)); [EOL]         Assert.assertEquals(4.0, negEvenInteger.getValue(), 1.0e-15); [EOL]         Assert.assertTrue(Double.isNaN(negEvenInteger.getPartialDerivative(1, 0, 0))); [EOL]         DerivativeStructure negOddInteger = DerivativeStructure.pow(-2.0, new DerivativeStructure(3, maxOrder, 0, 3.0)); [EOL]         Assert.assertEquals(-8.0, negOddInteger.getValue(), 1.0e-15); [EOL]         Assert.assertTrue(Double.isNaN(negOddInteger.getPartialDerivative(1, 0, 0))); [EOL]         DerivativeStructure negNonInteger = DerivativeStructure.pow(-2.0, new DerivativeStructure(3, maxOrder, 0, 2.001)); [EOL]         Assert.assertTrue(Double.isNaN(negNonInteger.getValue())); [EOL]         Assert.assertTrue(Double.isNaN(negNonInteger.getPartialDerivative(1, 0, 0))); [EOL]         DerivativeStructure zeroNeg = DerivativeStructure.pow(0.0, new DerivativeStructure(3, maxOrder, 0, -1.0)); [EOL]         Assert.assertTrue(Double.isNaN(zeroNeg.getValue())); [EOL]         Assert.assertTrue(Double.isNaN(zeroNeg.getPartialDerivative(1, 0, 0))); [EOL]         DerivativeStructure posNeg = DerivativeStructure.pow(2.0, new DerivativeStructure(3, maxOrder, 0, -2.0)); [EOL]         Assert.assertEquals(1.0 / 4.0, posNeg.getValue(), 1.0e-15); [EOL]         Assert.assertEquals(FastMath.log(2.0) / 4.0, posNeg.getPartialDerivative(1, 0, 0), 1.0e-15); [EOL]         DerivativeStructure zeroZero = DerivativeStructure.pow(0.0, new DerivativeStructure(3, maxOrder, 0, 0.0)); [EOL]         Assert.assertEquals(1.0, zeroZero.getValue(), 1.0e-15); [EOL]         Assert.assertEquals(Double.NEGATIVE_INFINITY, zeroZero.getPartialDerivative(1, 0, 0), 1.0e-15); [EOL]         Assert.assertTrue(Double.isNaN(zeroZero.getPartialDerivative(0, 1, 0))); [EOL]         Assert.assertTrue(Double.isNaN(zeroZero.getPartialDerivative(0, 0, 1))); [EOL]         if (maxOrder > 1) { [EOL]             Assert.assertTrue(Double.isNaN(zeroZero.getPartialDerivative(2, 0, 0))); [EOL]             Assert.assertTrue(Double.isNaN(zeroZero.getPartialDerivative(0, 2, 0))); [EOL]             Assert.assertTrue(Double.isNaN(zeroZero.getPartialDerivative(0, 0, 2))); [EOL]             Assert.assertTrue(Double.isNaN(zeroZero.getPartialDerivative(1, 1, 0))); [EOL]             Assert.assertTrue(Double.isNaN(zeroZero.getPartialDerivative(0, 1, 1))); [EOL]             Assert.assertTrue(Double.isNaN(zeroZero.getPartialDerivative(1, 1, 0))); [EOL]         } [EOL]     } [EOL] } <line_num>: 228,326
@Test [EOL] public void testExpression() { [EOL]     double epsilon = 2.5e-13; [EOL]     for (double x = 0; x < 2; x += 0.2) { [EOL]         DerivativeStructure dsX = new DerivativeStructure(3, 5, 0, x); [EOL]         for (double y = 0; y < 2; y += 0.2) { [EOL]             DerivativeStructure dsY = new DerivativeStructure(3, 5, 1, y); [EOL]             for (double z = 0; z > -2; z -= 0.2) { [EOL]                 DerivativeStructure dsZ = new DerivativeStructure(3, 5, 2, z); [EOL]                 DerivativeStructure ds = new DerivativeStructure(1, dsX, 5, dsX.multiply(dsY), -2, dsZ, 1, new DerivativeStructure(8, dsZ.multiply(dsX), -1, dsY).pow(3)); [EOL]                 DerivativeStructure dsOther = new DerivativeStructure(1, dsX, 5, dsX.multiply(dsY), -2, dsZ).add(new DerivativeStructure(8, dsZ.multiply(dsX), -1, dsY).pow(3)); [EOL]                 double f = x + 5 * x * y - 2 * z + FastMath.pow(8 * z * x - y, 3); [EOL]                 Assert.assertEquals(f, ds.getValue(), FastMath.abs(epsilon * f)); [EOL]                 Assert.assertEquals(f, dsOther.getValue(), FastMath.abs(epsilon * f)); [EOL]                 double dfdx = 1 + 5 * y + 24 * z * FastMath.pow(8 * z * x - y, 2); [EOL]                 Assert.assertEquals(dfdx, ds.getPartialDerivative(1, 0, 0), FastMath.abs(epsilon * dfdx)); [EOL]                 Assert.assertEquals(dfdx, dsOther.getPartialDerivative(1, 0, 0), FastMath.abs(epsilon * dfdx)); [EOL]                 double dfdxdy = 5 + 48 * z * (y - 8 * z * x); [EOL]                 Assert.assertEquals(dfdxdy, ds.getPartialDerivative(1, 1, 0), FastMath.abs(epsilon * dfdxdy)); [EOL]                 Assert.assertEquals(dfdxdy, dsOther.getPartialDerivative(1, 1, 0), FastMath.abs(epsilon * dfdxdy)); [EOL]                 double dfdxdydz = 48 * (y - 16 * z * x); [EOL]                 Assert.assertEquals(dfdxdydz, ds.getPartialDerivative(1, 1, 1), FastMath.abs(epsilon * dfdxdydz)); [EOL]                 Assert.assertEquals(dfdxdydz, dsOther.getPartialDerivative(1, 1, 1), FastMath.abs(epsilon * dfdxdydz)); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 328,381
@Test [EOL] public void testCompositionOneVariableX() { [EOL]     double epsilon = 1.0e-13; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.1) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             for (double y = 0.1; y < 1.2; y += 0.1) { [EOL]                 DerivativeStructure dsY = new DerivativeStructure(1, maxOrder, y); [EOL]                 DerivativeStructure f = dsX.divide(dsY).sqrt(); [EOL]                 double f0 = FastMath.sqrt(x / y); [EOL]                 Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0)); [EOL]                 if (f.getOrder() > 0) { [EOL]                     double f1 = 1 / (2 * FastMath.sqrt(x * y)); [EOL]                     Assert.assertEquals(f1, f.getPartialDerivative(1), FastMath.abs(epsilon * f1)); [EOL]                     if (f.getOrder() > 1) { [EOL]                         double f2 = -f1 / (2 * x); [EOL]                         Assert.assertEquals(f2, f.getPartialDerivative(2), FastMath.abs(epsilon * f2)); [EOL]                         if (f.getOrder() > 2) { [EOL]                             double f3 = (f0 + x / (2 * y * f0)) / (4 * x * x * x); [EOL]                             Assert.assertEquals(f3, f.getPartialDerivative(3), FastMath.abs(epsilon * f3)); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 383,409
@Test [EOL] public void testTrigo() { [EOL]     double epsilon = 2.0e-12; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.1) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(3, maxOrder, 0, x); [EOL]             for (double y = 0.1; y < 1.2; y += 0.1) { [EOL]                 DerivativeStructure dsY = new DerivativeStructure(3, maxOrder, 1, y); [EOL]                 for (double z = 0.1; z < 1.2; z += 0.1) { [EOL]                     DerivativeStructure dsZ = new DerivativeStructure(3, maxOrder, 2, z); [EOL]                     DerivativeStructure f = dsX.divide(dsY.cos().add(dsZ.tan())).sin(); [EOL]                     double a = FastMath.cos(y) + FastMath.tan(z); [EOL]                     double f0 = FastMath.sin(x / a); [EOL]                     Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0)); [EOL]                     if (f.getOrder() > 0) { [EOL]                         double dfdx = FastMath.cos(x / a) / a; [EOL]                         Assert.assertEquals(dfdx, f.getPartialDerivative(1, 0, 0), FastMath.abs(epsilon * dfdx)); [EOL]                         double dfdy = x * FastMath.sin(y) * dfdx / a; [EOL]                         Assert.assertEquals(dfdy, f.getPartialDerivative(0, 1, 0), FastMath.abs(epsilon * dfdy)); [EOL]                         double cz = FastMath.cos(z); [EOL]                         double cz2 = cz * cz; [EOL]                         double dfdz = -x * dfdx / (a * cz2); [EOL]                         Assert.assertEquals(dfdz, f.getPartialDerivative(0, 0, 1), FastMath.abs(epsilon * dfdz)); [EOL]                         if (f.getOrder() > 1) { [EOL]                             double df2dx2 = -(f0 / (a * a)); [EOL]                             Assert.assertEquals(df2dx2, f.getPartialDerivative(2, 0, 0), FastMath.abs(epsilon * df2dx2)); [EOL]                             double df2dy2 = x * FastMath.cos(y) * dfdx / a - x * x * FastMath.sin(y) * FastMath.sin(y) * f0 / (a * a * a * a) + 2 * FastMath.sin(y) * dfdy / a; [EOL]                             Assert.assertEquals(df2dy2, f.getPartialDerivative(0, 2, 0), FastMath.abs(epsilon * df2dy2)); [EOL]                             double c4 = cz2 * cz2; [EOL]                             double df2dz2 = x * (2 * a * (1 - a * cz * FastMath.sin(z)) * dfdx - x * f0 / a) / (a * a * a * c4); [EOL]                             Assert.assertEquals(df2dz2, f.getPartialDerivative(0, 0, 2), FastMath.abs(epsilon * df2dz2)); [EOL]                             double df2dxdy = dfdy / x - x * FastMath.sin(y) * f0 / (a * a * a); [EOL]                             Assert.assertEquals(df2dxdy, f.getPartialDerivative(1, 1, 0), FastMath.abs(epsilon * df2dxdy)); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 411,452
@Test [EOL] public void testSqrtDefinition() { [EOL]     double[] epsilon = new double[] { 5.0e-16, 5.0e-16, 2.0e-15, 5.0e-14, 2.0e-12 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure sqrt1 = dsX.pow(0.5); [EOL]             DerivativeStructure sqrt2 = dsX.sqrt(); [EOL]             DerivativeStructure zero = sqrt1.subtract(sqrt2); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 454,468
@Test [EOL] public void testRootNSingularity() { [EOL]     for (int n = 2; n < 10; ++n) { [EOL]         for (int maxOrder = 0; maxOrder < 12; ++maxOrder) { [EOL]             DerivativeStructure dsZero = new DerivativeStructure(1, maxOrder, 0, 0.0); [EOL]             DerivativeStructure rootN = dsZero.rootN(n); [EOL]             Assert.assertEquals(0.0, rootN.getValue(), 1.0e-20); [EOL]             if (maxOrder > 0) { [EOL]                 Assert.assertTrue(Double.isInfinite(rootN.getPartialDerivative(1))); [EOL]                 Assert.assertTrue(rootN.getPartialDerivative(1) > 0); [EOL]                 for (int order = 2; order <= maxOrder; ++order) { [EOL]                     Assert.assertTrue(Double.isNaN(rootN.getPartialDerivative(order))); [EOL]                 } [EOL]             } [EOL]             double[] gDerivatives = new double[1 + maxOrder]; [EOL]             gDerivatives[0] = 0.0; [EOL]             for (int k = 1; k <= maxOrder; ++k) { [EOL]                 gDerivatives[k] = FastMath.pow(-1.0, k + 1); [EOL]             } [EOL]             DerivativeStructure correctRoot = new DerivativeStructure(1, maxOrder, gDerivatives).rootN(n); [EOL]             Assert.assertEquals(0.0, correctRoot.getValue(), 1.0e-20); [EOL]             if (maxOrder > 0) { [EOL]                 Assert.assertTrue(Double.isInfinite(correctRoot.getPartialDerivative(1))); [EOL]                 Assert.assertTrue(correctRoot.getPartialDerivative(1) > 0); [EOL]                 for (int order = 2; order <= maxOrder; ++order) { [EOL]                     Assert.assertTrue(Double.isInfinite(correctRoot.getPartialDerivative(order))); [EOL]                     if ((order % 2) == 0) { [EOL]                         Assert.assertTrue(correctRoot.getPartialDerivative(order) < 0); [EOL]                     } else { [EOL]                         Assert.assertTrue(correctRoot.getPartialDerivative(order) > 0); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 470,531
@Test [EOL] public void testSqrtPow2() { [EOL]     double[] epsilon = new double[] { 1.0e-16, 3.0e-16, 2.0e-15, 6.0e-14, 6.0e-12 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.multiply(dsX).sqrt(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 533,546
@Test [EOL] public void testCbrtDefinition() { [EOL]     double[] epsilon = new double[] { 4.0e-16, 9.0e-16, 6.0e-15, 2.0e-13, 4.0e-12 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure cbrt1 = dsX.pow(1.0 / 3.0); [EOL]             DerivativeStructure cbrt2 = dsX.cbrt(); [EOL]             DerivativeStructure zero = cbrt1.subtract(cbrt2); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 548,562
@Test [EOL] public void testCbrtPow3() { [EOL]     double[] epsilon = new double[] { 1.0e-16, 5.0e-16, 8.0e-15, 3.0e-13, 4.0e-11 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.multiply(dsX.multiply(dsX)).cbrt(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 564,577
@Test [EOL] public void testPowReciprocalPow() { [EOL]     double[] epsilon = new double[] { 2.0e-15, 2.0e-14, 3.0e-13, 8.0e-12, 3.0e-10 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.01) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x); [EOL]             for (double y = 0.1; y < 1.2; y += 0.01) { [EOL]                 DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y); [EOL]                 DerivativeStructure rebuiltX = dsX.pow(dsY).pow(dsY.reciprocal()); [EOL]                 DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]                 for (int n = 0; n <= maxOrder; ++n) { [EOL]                     for (int m = 0; m <= maxOrder; ++m) { [EOL]                         if (n + m <= maxOrder) { [EOL]                             Assert.assertEquals(0.0, zero.getPartialDerivative(n, m), epsilon[n + m]); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 579,599
@Test [EOL] public void testHypotDefinition() { [EOL]     double epsilon = 1.0e-20; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = -1.7; x < 2; x += 0.2) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x); [EOL]             for (double y = -1.7; y < 2; y += 0.2) { [EOL]                 DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y); [EOL]                 DerivativeStructure hypot = DerivativeStructure.hypot(dsY, dsX); [EOL]                 DerivativeStructure ref = dsX.multiply(dsX).add(dsY.multiply(dsY)).sqrt(); [EOL]                 DerivativeStructure zero = hypot.subtract(ref); [EOL]                 for (int n = 0; n <= maxOrder; ++n) { [EOL]                     for (int m = 0; m <= maxOrder; ++m) { [EOL]                         if (n + m <= maxOrder) { [EOL]                             Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 601,622
@Test [EOL] public void testHypotNoOverflow() { [EOL]     DerivativeStructure dsX = new DerivativeStructure(2, 5, 0, +3.0e250); [EOL]     DerivativeStructure dsY = new DerivativeStructure(2, 5, 1, -4.0e250); [EOL]     DerivativeStructure hypot = DerivativeStructure.hypot(dsX, dsY); [EOL]     Assert.assertEquals(5.0e250, hypot.getValue(), 1.0e235); [EOL]     Assert.assertEquals(dsX.getValue() / hypot.getValue(), hypot.getPartialDerivative(1, 0), 1.0e-10); [EOL]     Assert.assertEquals(dsY.getValue() / hypot.getValue(), hypot.getPartialDerivative(0, 1), 1.0e-10); [EOL]     DerivativeStructure sqrt = dsX.multiply(dsX).add(dsY.multiply(dsY)).sqrt(); [EOL]     Assert.assertTrue(Double.isInfinite(sqrt.getValue())); [EOL] } <line_num>: 624,637
@Test [EOL] public void testHypotNeglectible() { [EOL]     DerivativeStructure dsSmall = new DerivativeStructure(2, 5, 0, +3.0e-10); [EOL]     DerivativeStructure dsLarge = new DerivativeStructure(2, 5, 1, -4.0e25); [EOL]     Assert.assertEquals(dsLarge.abs().getValue(), DerivativeStructure.hypot(dsSmall, dsLarge).getValue(), 1.0e-10); [EOL]     Assert.assertEquals(0, DerivativeStructure.hypot(dsSmall, dsLarge).getPartialDerivative(1, 0), 1.0e-10); [EOL]     Assert.assertEquals(-1, DerivativeStructure.hypot(dsSmall, dsLarge).getPartialDerivative(0, 1), 1.0e-10); [EOL]     Assert.assertEquals(dsLarge.abs().getValue(), DerivativeStructure.hypot(dsLarge, dsSmall).getValue(), 1.0e-10); [EOL]     Assert.assertEquals(0, DerivativeStructure.hypot(dsLarge, dsSmall).getPartialDerivative(1, 0), 1.0e-10); [EOL]     Assert.assertEquals(-1, DerivativeStructure.hypot(dsLarge, dsSmall).getPartialDerivative(0, 1), 1.0e-10); [EOL] } <line_num>: 639,665
@Test [EOL] public void testHypotSpecial() { [EOL]     Assert.assertTrue(Double.isNaN(DerivativeStructure.hypot(new DerivativeStructure(2, 5, 0, Double.NaN), new DerivativeStructure(2, 5, 0, +3.0e250)).getValue())); [EOL]     Assert.assertTrue(Double.isNaN(DerivativeStructure.hypot(new DerivativeStructure(2, 5, 0, +3.0e250), new DerivativeStructure(2, 5, 0, Double.NaN)).getValue())); [EOL]     Assert.assertTrue(Double.isInfinite(DerivativeStructure.hypot(new DerivativeStructure(2, 5, 0, Double.POSITIVE_INFINITY), new DerivativeStructure(2, 5, 0, +3.0e250)).getValue())); [EOL]     Assert.assertTrue(Double.isInfinite(DerivativeStructure.hypot(new DerivativeStructure(2, 5, 0, +3.0e250), new DerivativeStructure(2, 5, 0, Double.POSITIVE_INFINITY)).getValue())); [EOL] } <line_num>: 667,677
@Test [EOL] public void testPrimitiveRemainder() { [EOL]     double epsilon = 1.0e-15; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = -1.7; x < 2; x += 0.2) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x); [EOL]             for (double y = -1.7; y < 2; y += 0.2) { [EOL]                 DerivativeStructure remainder = dsX.remainder(y); [EOL]                 DerivativeStructure ref = dsX.subtract(x - FastMath.IEEEremainder(x, y)); [EOL]                 DerivativeStructure zero = remainder.subtract(ref); [EOL]                 for (int n = 0; n <= maxOrder; ++n) { [EOL]                     for (int m = 0; m <= maxOrder; ++m) { [EOL]                         if (n + m <= maxOrder) { [EOL]                             Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 679,699
@Test [EOL] public void testRemainder() { [EOL]     double epsilon = 2.0e-15; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = -1.7; x < 2; x += 0.2) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x); [EOL]             for (double y = -1.7; y < 2; y += 0.2) { [EOL]                 DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y); [EOL]                 DerivativeStructure remainder = dsX.remainder(dsY); [EOL]                 DerivativeStructure ref = dsX.subtract(dsY.multiply((x - FastMath.IEEEremainder(x, y)) / y)); [EOL]                 DerivativeStructure zero = remainder.subtract(ref); [EOL]                 for (int n = 0; n <= maxOrder; ++n) { [EOL]                     for (int m = 0; m <= maxOrder; ++m) { [EOL]                         if (n + m <= maxOrder) { [EOL]                             Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 701,722
@Override [EOL] @Test [EOL] public void testExp() { [EOL]     double[] epsilon = new double[] { 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16, 1.0e-16 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             double refExp = FastMath.exp(x); [EOL]             DerivativeStructure exp = new DerivativeStructure(1, maxOrder, 0, x).exp(); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(refExp, exp.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 724,737
@Test [EOL] public void testExpm1Definition() { [EOL]     double epsilon = 3.0e-16; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure expm11 = dsX.expm1(); [EOL]             DerivativeStructure expm12 = dsX.exp().subtract(dsX.getField().getOne()); [EOL]             DerivativeStructure zero = expm11.subtract(expm12); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 739,753
@Override [EOL] @Test [EOL] public void testLog() { [EOL]     double[] epsilon = new double[] { 1.0e-16, 1.0e-16, 3.0e-14, 7.0e-13, 3.0e-11 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure log = new DerivativeStructure(1, maxOrder, 0, x).log(); [EOL]             Assert.assertEquals(FastMath.log(x), log.getValue(), epsilon[0]); [EOL]             for (int n = 1; n <= maxOrder; ++n) { [EOL]                 double refDer = -CombinatoricsUtils.factorial(n - 1) / FastMath.pow(-x, n); [EOL]                 Assert.assertEquals(refDer, log.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 755,769
@Test [EOL] public void testLog1pDefinition() { [EOL]     double epsilon = 3.0e-16; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure log1p1 = dsX.log1p(); [EOL]             DerivativeStructure log1p2 = dsX.add(dsX.getField().getOne()).log(); [EOL]             DerivativeStructure zero = log1p1.subtract(log1p2); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 771,785
@Test [EOL] public void testLog10Definition() { [EOL]     double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 8.0e-15, 3.0e-13, 8.0e-12 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure log101 = dsX.log10(); [EOL]             DerivativeStructure log102 = dsX.log().divide(FastMath.log(10.0)); [EOL]             DerivativeStructure zero = log101.subtract(log102); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 787,801
@Test [EOL] public void testLogExp() { [EOL]     double[] epsilon = new double[] { 2.0e-16, 2.0e-16, 3.0e-16, 2.0e-15, 6.0e-15 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.exp().log(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 803,816
@Test [EOL] public void testLog1pExpm1() { [EOL]     double[] epsilon = new double[] { 6.0e-17, 3.0e-16, 5.0e-16, 9.0e-16, 6.0e-15 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.expm1().log1p(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 818,831
@Test [EOL] public void testLog10Power() { [EOL]     double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 9.0e-16, 6.0e-15, 6.0e-14 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = new DerivativeStructure(1, maxOrder, 10.0).pow(dsX).log10(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 833,846
@Test [EOL] public void testSinCos() { [EOL]     double epsilon = 5.0e-16; [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure sin = dsX.sin(); [EOL]             DerivativeStructure cos = dsX.cos(); [EOL]             double s = FastMath.sin(x); [EOL]             double c = FastMath.cos(x); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 switch(n % 4) { [EOL]                     case 0: [EOL]                         Assert.assertEquals(s, sin.getPartialDerivative(n), epsilon); [EOL]                         Assert.assertEquals(c, cos.getPartialDerivative(n), epsilon); [EOL]                         break; [EOL]                     case 1: [EOL]                         Assert.assertEquals(c, sin.getPartialDerivative(n), epsilon); [EOL]                         Assert.assertEquals(-s, cos.getPartialDerivative(n), epsilon); [EOL]                         break; [EOL]                     case 2: [EOL]                         Assert.assertEquals(-s, sin.getPartialDerivative(n), epsilon); [EOL]                         Assert.assertEquals(-c, cos.getPartialDerivative(n), epsilon); [EOL]                         break; [EOL]                     default: [EOL]                         Assert.assertEquals(-c, sin.getPartialDerivative(n), epsilon); [EOL]                         Assert.assertEquals(s, cos.getPartialDerivative(n), epsilon); [EOL]                         break; [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 848,880
@Test [EOL] public void testSinAsin() { [EOL]     double[] epsilon = new double[] { 3.0e-16, 5.0e-16, 3.0e-15, 2.0e-14, 4.0e-13 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.sin().asin(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 882,895
@Test [EOL] public void testCosAcos() { [EOL]     double[] epsilon = new double[] { 6.0e-16, 6.0e-15, 2.0e-13, 4.0e-12, 2.0e-10 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.cos().acos(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 897,910
@Test [EOL] public void testTanAtan() { [EOL]     double[] epsilon = new double[] { 6.0e-17, 2.0e-16, 2.0e-15, 4.0e-14, 2.0e-12 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.tan().atan(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 912,925
@Test [EOL] public void testTangentDefinition() { [EOL]     double[] epsilon = new double[] { 5.0e-16, 2.0e-15, 3.0e-14, 5.0e-13, 2.0e-11 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure tan1 = dsX.sin().divide(dsX.cos()); [EOL]             DerivativeStructure tan2 = dsX.tan(); [EOL]             DerivativeStructure zero = tan1.subtract(tan2); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 927,941
@Override [EOL] @Test [EOL] public void testAtan2() { [EOL]     double[] epsilon = new double[] { 5.0e-16, 3.0e-15, 2.2e-14, 1.0e-12, 8.0e-11 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = -1.7; x < 2; x += 0.2) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x); [EOL]             for (double y = -1.7; y < 2; y += 0.2) { [EOL]                 DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y); [EOL]                 DerivativeStructure atan2 = DerivativeStructure.atan2(dsY, dsX); [EOL]                 DerivativeStructure ref = dsY.divide(dsX).atan(); [EOL]                 if (x < 0) { [EOL]                     ref = (y < 0) ? ref.subtract(FastMath.PI) : ref.add(FastMath.PI); [EOL]                 } [EOL]                 DerivativeStructure zero = atan2.subtract(ref); [EOL]                 for (int n = 0; n <= maxOrder; ++n) { [EOL]                     for (int m = 0; m <= maxOrder; ++m) { [EOL]                         if (n + m <= maxOrder) { [EOL]                             Assert.assertEquals(0, zero.getPartialDerivative(n, m), epsilon[n + m]); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 943,968
@Test [EOL] public void testAtan2SpecialCases() { [EOL]     DerivativeStructure pp = DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0), new DerivativeStructure(2, 2, 1, +0.0)); [EOL]     Assert.assertEquals(0, pp.getValue(), 1.0e-15); [EOL]     Assert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15); [EOL]     DerivativeStructure pn = DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0), new DerivativeStructure(2, 2, 1, -0.0)); [EOL]     Assert.assertEquals(FastMath.PI, pn.getValue(), 1.0e-15); [EOL]     DerivativeStructure np = DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0), new DerivativeStructure(2, 2, 1, +0.0)); [EOL]     Assert.assertEquals(0, np.getValue(), 1.0e-15); [EOL]     Assert.assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15); [EOL]     DerivativeStructure nn = DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0), new DerivativeStructure(2, 2, 1, -0.0)); [EOL]     Assert.assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15); [EOL] } <line_num>: 970,995
@Test [EOL] public void testSinhDefinition() { [EOL]     double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 5.0e-16, 2.0e-15, 6.0e-15 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure sinh1 = dsX.exp().subtract(dsX.exp().reciprocal()).multiply(0.5); [EOL]             DerivativeStructure sinh2 = dsX.sinh(); [EOL]             DerivativeStructure zero = sinh1.subtract(sinh2); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 997,1011
@Test [EOL] public void testCoshDefinition() { [EOL]     double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 5.0e-16, 2.0e-15, 6.0e-15 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure cosh1 = dsX.exp().add(dsX.exp().reciprocal()).multiply(0.5); [EOL]             DerivativeStructure cosh2 = dsX.cosh(); [EOL]             DerivativeStructure zero = cosh1.subtract(cosh2); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1013,1027
@Test [EOL] public void testTanhDefinition() { [EOL]     double[] epsilon = new double[] { 3.0e-16, 5.0e-16, 7.0e-16, 3.0e-15, 2.0e-14 }; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure tanh1 = dsX.exp().subtract(dsX.exp().reciprocal()).divide(dsX.exp().add(dsX.exp().reciprocal())); [EOL]             DerivativeStructure tanh2 = dsX.tanh(); [EOL]             DerivativeStructure zero = tanh1.subtract(tanh2); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1029,1043
@Test [EOL] public void testSinhAsinh() { [EOL]     double[] epsilon = new double[] { 3.0e-16, 3.0e-16, 4.0e-16, 7.0e-16, 3.0e-15, 8.0e-15 }; [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.sinh().asinh(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1045,1058
@Test [EOL] public void testCoshAcosh() { [EOL]     double[] epsilon = new double[] { 2.0e-15, 1.0e-14, 2.0e-13, 6.0e-12, 3.0e-10, 2.0e-8 }; [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.cosh().acosh(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1060,1073
@Test [EOL] public void testTanhAtanh() { [EOL]     double[] epsilon = new double[] { 3.0e-16, 2.0e-16, 7.0e-16, 4.0e-15, 3.0e-14, 4.0e-13 }; [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.tanh().atanh(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1075,1088
@Test [EOL] public void testCompositionOneVariableY() { [EOL]     double epsilon = 1.0e-13; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.1) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, x); [EOL]             for (double y = 0.1; y < 1.2; y += 0.1) { [EOL]                 DerivativeStructure dsY = new DerivativeStructure(1, maxOrder, 0, y); [EOL]                 DerivativeStructure f = dsX.divide(dsY).sqrt(); [EOL]                 double f0 = FastMath.sqrt(x / y); [EOL]                 Assert.assertEquals(f0, f.getValue(), FastMath.abs(epsilon * f0)); [EOL]                 if (f.getOrder() > 0) { [EOL]                     double f1 = -x / (2 * y * y * f0); [EOL]                     Assert.assertEquals(f1, f.getPartialDerivative(1), FastMath.abs(epsilon * f1)); [EOL]                     if (f.getOrder() > 1) { [EOL]                         double f2 = (f0 - x / (4 * y * f0)) / (y * y); [EOL]                         Assert.assertEquals(f2, f.getPartialDerivative(2), FastMath.abs(epsilon * f2)); [EOL]                         if (f.getOrder() > 2) { [EOL]                             double f3 = (x / (8 * y * f0) - 2 * f0) / (y * y * y); [EOL]                             Assert.assertEquals(f3, f.getPartialDerivative(3), FastMath.abs(epsilon * f3)); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1090,1116
@Test [EOL] public void testTaylorPolynomial() { [EOL]     for (double x = 0; x < 1.2; x += 0.1) { [EOL]         DerivativeStructure dsX = new DerivativeStructure(3, 4, 0, x); [EOL]         for (double y = 0; y < 1.2; y += 0.2) { [EOL]             DerivativeStructure dsY = new DerivativeStructure(3, 4, 1, y); [EOL]             for (double z = 0; z < 1.2; z += 0.2) { [EOL]                 DerivativeStructure dsZ = new DerivativeStructure(3, 4, 2, z); [EOL]                 DerivativeStructure f = dsX.multiply(dsY).add(dsZ).multiply(dsX).multiply(dsY); [EOL]                 for (double dx = -0.2; dx < 0.2; dx += 0.2) { [EOL]                     for (double dy = -0.2; dy < 0.2; dy += 0.1) { [EOL]                         for (double dz = -0.2; dz < 0.2; dz += 0.1) { [EOL]                             double ref = (x + dx) * (y + dy) * ((x + dx) * (y + dy) + (z + dz)); [EOL]                             Assert.assertEquals(ref, f.taylor(dx, dy, dz), 2.0e-15); [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1118,1138
@Test [EOL] public void testTaylorAtan2() { [EOL]     double[] expected = new double[] { 0.214, 0.0241, 0.00422, 6.48e-4, 8.04e-5 }; [EOL]     double x0 = 0.1; [EOL]     double y0 = -0.3; [EOL]     for (int maxOrder = 0; maxOrder < 5; ++maxOrder) { [EOL]         DerivativeStructure dsX = new DerivativeStructure(2, maxOrder, 0, x0); [EOL]         DerivativeStructure dsY = new DerivativeStructure(2, maxOrder, 1, y0); [EOL]         DerivativeStructure atan2 = DerivativeStructure.atan2(dsY, dsX); [EOL]         double maxError = 0; [EOL]         for (double dx = -0.05; dx < 0.05; dx += 0.001) { [EOL]             for (double dy = -0.05; dy < 0.05; dy += 0.001) { [EOL]                 double ref = FastMath.atan2(y0 + dy, x0 + dx); [EOL]                 maxError = FastMath.max(maxError, FastMath.abs(ref - atan2.taylor(dx, dy))); [EOL]             } [EOL]         } [EOL]         Assert.assertEquals(0.0, expected[maxOrder] - maxError, 0.01 * expected[maxOrder]); [EOL]     } [EOL] } <line_num>: 1140,1158
@Override [EOL] @Test [EOL] public void testAbs() { [EOL]     DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0); [EOL]     Assert.assertEquals(+1.0, minusOne.abs().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, minusOne.abs().getPartialDerivative(1), 1.0e-15); [EOL]     DerivativeStructure plusOne = new DerivativeStructure(1, 1, 0, +1.0); [EOL]     Assert.assertEquals(+1.0, plusOne.abs().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, plusOne.abs().getPartialDerivative(1), 1.0e-15); [EOL]     DerivativeStructure minusZero = new DerivativeStructure(1, 1, 0, -0.0); [EOL]     Assert.assertEquals(+0.0, minusZero.abs().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, minusZero.abs().getPartialDerivative(1), 1.0e-15); [EOL]     DerivativeStructure plusZero = new DerivativeStructure(1, 1, 0, +0.0); [EOL]     Assert.assertEquals(+0.0, plusZero.abs().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, plusZero.abs().getPartialDerivative(1), 1.0e-15); [EOL] } <line_num>: 1160,1180
@Override [EOL] @Test [EOL] public void testSignum() { [EOL]     DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0); [EOL]     Assert.assertEquals(-1.0, minusOne.signum().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(0.0, minusOne.signum().getPartialDerivative(1), 1.0e-15); [EOL]     DerivativeStructure plusOne = new DerivativeStructure(1, 1, 0, +1.0); [EOL]     Assert.assertEquals(+1.0, plusOne.signum().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(0.0, plusOne.signum().getPartialDerivative(1), 1.0e-15); [EOL]     DerivativeStructure minusZero = new DerivativeStructure(1, 1, 0, -0.0); [EOL]     Assert.assertEquals(-0.0, minusZero.signum().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertTrue(Double.doubleToLongBits(minusZero.signum().getValue()) < 0); [EOL]     Assert.assertEquals(0.0, minusZero.signum().getPartialDerivative(1), 1.0e-15); [EOL]     DerivativeStructure plusZero = new DerivativeStructure(1, 1, 0, +0.0); [EOL]     Assert.assertEquals(+0.0, plusZero.signum().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertTrue(Double.doubleToLongBits(plusZero.signum().getValue()) == 0); [EOL]     Assert.assertEquals(0.0, plusZero.signum().getPartialDerivative(1), 1.0e-15); [EOL] } <line_num>: 1182,1204
@Test [EOL] public void testCeilFloorRintLong() { [EOL]     DerivativeStructure x = new DerivativeStructure(1, 1, 0, -1.5); [EOL]     Assert.assertEquals(-1.5, x.getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, x.getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, x.ceil().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+0.0, x.ceil().getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(-2.0, x.floor().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+0.0, x.floor().getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(-2.0, x.rint().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+0.0, x.rint().getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(-2.0, x.subtract(x.getField().getOne()).rint().getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(-1l, x.round()); [EOL] } <line_num>: 1206,1221
@Test [EOL] public void testCopySign() { [EOL]     DerivativeStructure minusOne = new DerivativeStructure(1, 1, 0, -1.0); [EOL]     Assert.assertEquals(+1.0, minusOne.copySign(+1.0).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, minusOne.copySign(+1.0).getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, minusOne.copySign(-1.0).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, minusOne.copySign(-1.0).getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, minusOne.copySign(+0.0).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, minusOne.copySign(+0.0).getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, minusOne.copySign(-0.0).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, minusOne.copySign(-0.0).getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, minusOne.copySign(Double.NaN).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, minusOne.copySign(Double.NaN).getPartialDerivative(1), 1.0e-15); [EOL]     DerivativeStructure plusOne = new DerivativeStructure(1, 1, 0, +1.0); [EOL]     Assert.assertEquals(+1.0, plusOne.copySign(+1.0).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, plusOne.copySign(+1.0).getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, plusOne.copySign(-1.0).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, plusOne.copySign(-1.0).getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, plusOne.copySign(+0.0).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, plusOne.copySign(+0.0).getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, plusOne.copySign(-0.0).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(-1.0, plusOne.copySign(-0.0).getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, plusOne.copySign(Double.NaN).getPartialDerivative(0), 1.0e-15); [EOL]     Assert.assertEquals(+1.0, plusOne.copySign(Double.NaN).getPartialDerivative(1), 1.0e-15); [EOL] } <line_num>: 1223,1250
@Test [EOL] public void testToDegreesDefinition() { [EOL]     double epsilon = 3.0e-16; [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             Assert.assertEquals(FastMath.toDegrees(x), dsX.toDegrees().getValue(), epsilon); [EOL]             for (int n = 1; n <= maxOrder; ++n) { [EOL]                 if (n == 1) { [EOL]                     Assert.assertEquals(180 / FastMath.PI, dsX.toDegrees().getPartialDerivative(1), epsilon); [EOL]                 } else { [EOL]                     Assert.assertEquals(0.0, dsX.toDegrees().getPartialDerivative(n), epsilon); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1252,1268
@Test [EOL] public void testToRadiansDefinition() { [EOL]     double epsilon = 3.0e-16; [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             Assert.assertEquals(FastMath.toRadians(x), dsX.toRadians().getValue(), epsilon); [EOL]             for (int n = 1; n <= maxOrder; ++n) { [EOL]                 if (n == 1) { [EOL]                     Assert.assertEquals(FastMath.PI / 180, dsX.toRadians().getPartialDerivative(1), epsilon); [EOL]                 } else { [EOL]                     Assert.assertEquals(0.0, dsX.toRadians().getPartialDerivative(n), epsilon); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1270,1286
@Test [EOL] public void testDegRad() { [EOL]     double epsilon = 3.0e-16; [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure rebuiltX = dsX.toDegrees().toRadians(); [EOL]             DerivativeStructure zero = rebuiltX.subtract(dsX); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1288,1301
@Test(expected = DimensionMismatchException.class) [EOL] public void testComposeMismatchedDimensions() { [EOL]     new DerivativeStructure(1, 3, 0, 1.2).compose(new double[3]); [EOL] } <line_num>: 1303,1306
@Test [EOL] public void testCompose() { [EOL]     double[] epsilon = new double[] { 1.0e-20, 5.0e-14, 2.0e-13, 3.0e-13, 2.0e-13, 1.0e-20 }; [EOL]     PolynomialFunction poly = new PolynomialFunction(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 }); [EOL]     for (int maxOrder = 0; maxOrder < 6; ++maxOrder) { [EOL]         PolynomialFunction[] p = new PolynomialFunction[maxOrder + 1]; [EOL]         p[0] = poly; [EOL]         for (int i = 1; i <= maxOrder; ++i) { [EOL]             p[i] = p[i - 1].polynomialDerivative(); [EOL]         } [EOL]         for (double x = 0.1; x < 1.2; x += 0.001) { [EOL]             DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x); [EOL]             DerivativeStructure dsY1 = dsX.getField().getZero(); [EOL]             for (int i = poly.degree(); i >= 0; --i) { [EOL]                 dsY1 = dsY1.multiply(dsX).add(poly.getCoefficients()[i]); [EOL]             } [EOL]             double[] f = new double[maxOrder + 1]; [EOL]             for (int i = 0; i < f.length; ++i) { [EOL]                 f[i] = p[i].value(x); [EOL]             } [EOL]             DerivativeStructure dsY2 = dsX.compose(f); [EOL]             DerivativeStructure zero = dsY1.subtract(dsY2); [EOL]             for (int n = 0; n <= maxOrder; ++n) { [EOL]                 Assert.assertEquals(0.0, zero.getPartialDerivative(n), epsilon[n]); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 1308,1336
@Test [EOL] public void testField() { [EOL]     for (int maxOrder = 1; maxOrder < 5; ++maxOrder) { [EOL]         DerivativeStructure x = new DerivativeStructure(3, maxOrder, 0, 1.0); [EOL]         checkF0F1(x.getField().getZero(), 0.0, 0.0, 0.0, 0.0); [EOL]         checkF0F1(x.getField().getOne(), 1.0, 0.0, 0.0, 0.0); [EOL]         Assert.assertEquals(maxOrder, x.getField().getZero().getOrder()); [EOL]         Assert.assertEquals(3, x.getField().getZero().getFreeParameters()); [EOL]         Assert.assertEquals(DerivativeStructure.class, x.getField().getRuntimeClass()); [EOL]     } [EOL] } <line_num>: 1338,1348
@Test [EOL] public void testOneParameterConstructor() { [EOL]     double x = 1.2; [EOL]     double cos = FastMath.cos(x); [EOL]     double sin = FastMath.sin(x); [EOL]     DerivativeStructure yRef = new DerivativeStructure(1, 4, 0, x).cos(); [EOL]     try { [EOL]         new DerivativeStructure(1, 4, 0.0, 0.0); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException dme) { [EOL]     } catch (Exception e) { [EOL]         Assert.fail("wrong exceptionc caught " + e.getClass().getName()); [EOL]     } [EOL]     double[] derivatives = new double[] { cos, -sin, -cos, sin, cos }; [EOL]     DerivativeStructure y = new DerivativeStructure(1, 4, derivatives); [EOL]     checkEquals(yRef, y, 1.0e-15); [EOL]     TestUtils.assertEquals(derivatives, y.getAllDerivatives(), 1.0e-15); [EOL] } <line_num>: 1350,1368
@Test [EOL] public void testOneOrderConstructor() { [EOL]     double x = 1.2; [EOL]     double y = 2.4; [EOL]     double z = 12.5; [EOL]     DerivativeStructure xRef = new DerivativeStructure(3, 1, 0, x); [EOL]     DerivativeStructure yRef = new DerivativeStructure(3, 1, 1, y); [EOL]     DerivativeStructure zRef = new DerivativeStructure(3, 1, 2, z); [EOL]     try { [EOL]         new DerivativeStructure(3, 1, x + y - z, 1.0, 1.0); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException dme) { [EOL]     } catch (Exception e) { [EOL]         Assert.fail("wrong exceptionc caught " + e.getClass().getName()); [EOL]     } [EOL]     double[] derivatives = new double[] { x + y - z, 1.0, 1.0, -1.0 }; [EOL]     DerivativeStructure t = new DerivativeStructure(3, 1, derivatives); [EOL]     checkEquals(xRef.add(yRef.subtract(zRef)), t, 1.0e-15); [EOL]     TestUtils.assertEquals(derivatives, xRef.add(yRef.subtract(zRef)).getAllDerivatives(), 1.0e-15); [EOL] } <line_num>: 1370,1390
@Test [EOL] public void testLinearCombination1DSDS() { [EOL]     final DerivativeStructure[] a = new DerivativeStructure[] { new DerivativeStructure(6, 1, 0, -1321008684645961.0 / 268435456.0), new DerivativeStructure(6, 1, 1, -5774608829631843.0 / 268435456.0), new DerivativeStructure(6, 1, 2, -7645843051051357.0 / 8589934592.0) }; [EOL]     final DerivativeStructure[] b = new DerivativeStructure[] { new DerivativeStructure(6, 1, 3, -5712344449280879.0 / 2097152.0), new DerivativeStructure(6, 1, 4, -4550117129121957.0 / 2097152.0), new DerivativeStructure(6, 1, 5, 8846951984510141.0 / 131072.0) }; [EOL]     final DerivativeStructure abSumInline = a[0].linearCombination(a[0], b[0], a[1], b[1], a[2], b[2]); [EOL]     final DerivativeStructure abSumArray = a[0].linearCombination(a, b); [EOL]     Assert.assertEquals(abSumInline.getValue(), abSumArray.getValue(), 0); [EOL]     Assert.assertEquals(-1.8551294182586248737720779899, abSumInline.getValue(), 1.0e-15); [EOL]     Assert.assertEquals(b[0].getValue(), abSumInline.getPartialDerivative(1, 0, 0, 0, 0, 0), 1.0e-15); [EOL]     Assert.assertEquals(b[1].getValue(), abSumInline.getPartialDerivative(0, 1, 0, 0, 0, 0), 1.0e-15); [EOL]     Assert.assertEquals(b[2].getValue(), abSumInline.getPartialDerivative(0, 0, 1, 0, 0, 0), 1.0e-15); [EOL]     Assert.assertEquals(a[0].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 1, 0, 0), 1.0e-15); [EOL]     Assert.assertEquals(a[1].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 0, 1, 0), 1.0e-15); [EOL]     Assert.assertEquals(a[2].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 0, 0, 1), 1.0e-15); [EOL] } <line_num>: 1392,1417
@Test [EOL] public void testLinearCombination1DoubleDS() { [EOL]     final double[] a = new double[] { -1321008684645961.0 / 268435456.0, -5774608829631843.0 / 268435456.0, -7645843051051357.0 / 8589934592.0 }; [EOL]     final DerivativeStructure[] b = new DerivativeStructure[] { new DerivativeStructure(3, 1, 0, -5712344449280879.0 / 2097152.0), new DerivativeStructure(3, 1, 1, -4550117129121957.0 / 2097152.0), new DerivativeStructure(3, 1, 2, 8846951984510141.0 / 131072.0) }; [EOL]     final DerivativeStructure abSumInline = b[0].linearCombination(a[0], b[0], a[1], b[1], a[2], b[2]); [EOL]     final DerivativeStructure abSumArray = b[0].linearCombination(a, b); [EOL]     Assert.assertEquals(abSumInline.getValue(), abSumArray.getValue(), 0); [EOL]     Assert.assertEquals(-1.8551294182586248737720779899, abSumInline.getValue(), 1.0e-15); [EOL]     Assert.assertEquals(a[0], abSumInline.getPartialDerivative(1, 0, 0), 1.0e-15); [EOL]     Assert.assertEquals(a[1], abSumInline.getPartialDerivative(0, 1, 0), 1.0e-15); [EOL]     Assert.assertEquals(a[2], abSumInline.getPartialDerivative(0, 0, 1), 1.0e-15); [EOL] } <line_num>: 1419,1443
@Test [EOL] public void testLinearCombination2DSDS() { [EOL]     Well1024a random = new Well1024a(0xc6af886975069f11l); [EOL]     for (int i = 0; i < 10000; ++i) { [EOL]         final DerivativeStructure[] u = new DerivativeStructure[4]; [EOL]         final DerivativeStructure[] v = new DerivativeStructure[4]; [EOL]         for (int j = 0; j < u.length; ++j) { [EOL]             u[j] = new DerivativeStructure(u.length, 1, j, 1e17 * random.nextDouble()); [EOL]             v[j] = new DerivativeStructure(u.length, 1, 1e17 * random.nextDouble()); [EOL]         } [EOL]         DerivativeStructure lin = u[0].linearCombination(u[0], v[0], u[1], v[1]); [EOL]         double ref = u[0].getValue() * v[0].getValue() + u[1].getValue() * v[1].getValue(); [EOL]         Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref)); [EOL]         Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue())); [EOL]         Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue())); [EOL]         lin = u[0].linearCombination(u[0], v[0], u[1], v[1], u[2], v[2]); [EOL]         ref = u[0].getValue() * v[0].getValue() + u[1].getValue() * v[1].getValue() + u[2].getValue() * v[2].getValue(); [EOL]         Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref)); [EOL]         Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue())); [EOL]         Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue())); [EOL]         Assert.assertEquals(v[2].getValue(), lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue())); [EOL]         lin = u[0].linearCombination(u[0], v[0], u[1], v[1], u[2], v[2], u[3], v[3]); [EOL]         ref = u[0].getValue() * v[0].getValue() + u[1].getValue() * v[1].getValue() + u[2].getValue() * v[2].getValue() + u[3].getValue() * v[3].getValue(); [EOL]         Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref)); [EOL]         Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue())); [EOL]         Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue())); [EOL]         Assert.assertEquals(v[2].getValue(), lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue())); [EOL]         Assert.assertEquals(v[3].getValue(), lin.getPartialDerivative(0, 0, 0, 1), 1.0e-15 * FastMath.abs(v[3].getValue())); [EOL]     } [EOL] } <line_num>: 1445,1487
@Test [EOL] public void testLinearCombination2DoubleDS() { [EOL]     Well1024a random = new Well1024a(0xc6af886975069f11l); [EOL]     for (int i = 0; i < 10000; ++i) { [EOL]         final double[] u = new double[4]; [EOL]         final DerivativeStructure[] v = new DerivativeStructure[4]; [EOL]         for (int j = 0; j < u.length; ++j) { [EOL]             u[j] = 1e17 * random.nextDouble(); [EOL]             v[j] = new DerivativeStructure(u.length, 1, j, 1e17 * random.nextDouble()); [EOL]         } [EOL]         DerivativeStructure lin = v[0].linearCombination(u[0], v[0], u[1], v[1]); [EOL]         double ref = u[0] * v[0].getValue() + u[1] * v[1].getValue(); [EOL]         Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref)); [EOL]         Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue())); [EOL]         Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue())); [EOL]         lin = v[0].linearCombination(u[0], v[0], u[1], v[1], u[2], v[2]); [EOL]         ref = u[0] * v[0].getValue() + u[1] * v[1].getValue() + u[2] * v[2].getValue(); [EOL]         Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref)); [EOL]         Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue())); [EOL]         Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue())); [EOL]         Assert.assertEquals(u[2], lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue())); [EOL]         lin = v[0].linearCombination(u[0], v[0], u[1], v[1], u[2], v[2], u[3], v[3]); [EOL]         ref = u[0] * v[0].getValue() + u[1] * v[1].getValue() + u[2] * v[2].getValue() + u[3] * v[3].getValue(); [EOL]         Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref)); [EOL]         Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue())); [EOL]         Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue())); [EOL]         Assert.assertEquals(u[2], lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue())); [EOL]         Assert.assertEquals(u[3], lin.getPartialDerivative(0, 0, 0, 1), 1.0e-15 * FastMath.abs(v[3].getValue())); [EOL]     } [EOL] } <line_num>: 1489,1531
@Test [EOL] public void testSerialization() { [EOL]     DerivativeStructure a = new DerivativeStructure(3, 2, 0, 1.3); [EOL]     DerivativeStructure b = (DerivativeStructure) TestUtils.serializeAndRecover(a); [EOL]     Assert.assertEquals(a.getFreeParameters(), b.getFreeParameters()); [EOL]     Assert.assertEquals(a.getOrder(), b.getOrder()); [EOL]     checkEquals(a, b, 1.0e-15); [EOL] } <line_num>: 1533,1540
private void checkF0F1(DerivativeStructure ds, double value, double... derivatives) { [EOL]     Assert.assertEquals(derivatives.length, ds.getFreeParameters()); [EOL]     Assert.assertEquals(value, ds.getValue(), 1.0e-15); [EOL]     Assert.assertEquals(value, ds.getPartialDerivative(new int[ds.getFreeParameters()]), 1.0e-15); [EOL]     for (int i = 0; i < derivatives.length; ++i) { [EOL]         int[] orders = new int[derivatives.length]; [EOL]         orders[i] = 1; [EOL]         Assert.assertEquals(derivatives[i], ds.getPartialDerivative(orders), 1.0e-15); [EOL]     } [EOL] } <line_num>: 1542,1558
private void checkEquals(DerivativeStructure ds1, DerivativeStructure ds2, double epsilon) { [EOL]     Assert.assertEquals(ds1.getFreeParameters(), ds2.getFreeParameters()); [EOL]     Assert.assertEquals(ds1.getOrder(), ds2.getOrder()); [EOL]     int[] derivatives = new int[ds1.getFreeParameters()]; [EOL]     int sum = 0; [EOL]     while (true) { [EOL]         if (sum <= ds1.getOrder()) { [EOL]             Assert.assertEquals(ds1.getPartialDerivative(derivatives), ds2.getPartialDerivative(derivatives), epsilon); [EOL]         } [EOL]         boolean increment = true; [EOL]         sum = 0; [EOL]         for (int i = derivatives.length - 1; i >= 0; --i) { [EOL]             if (increment) { [EOL]                 if (derivatives[i] == ds1.getOrder()) { [EOL]                     derivatives[i] = 0; [EOL]                 } else { [EOL]                     derivatives[i]++; [EOL]                     increment = false; [EOL]                 } [EOL]             } [EOL]             sum += derivatives[i]; [EOL]         } [EOL]         if (increment) { [EOL]             return; [EOL]         } [EOL]     } [EOL] } <line_num>: 1560,1595
