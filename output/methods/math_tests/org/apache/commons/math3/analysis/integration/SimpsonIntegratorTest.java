@Test [EOL] public void testSinFunction() { [EOL]     UnivariateFunction f = new Sin(); [EOL]     UnivariateIntegrator integrator = new SimpsonIntegrator(); [EOL]     double min, max, expected, result, tolerance; [EOL]     min = 0; [EOL]     max = FastMath.PI; [EOL]     expected = 2; [EOL]     tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     result = integrator.integrate(1000, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < 100); [EOL]     Assert.assertTrue(integrator.getIterations() < 10); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -FastMath.PI / 3; [EOL]     max = 0; [EOL]     expected = -0.5; [EOL]     tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     result = integrator.integrate(1000, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < 50); [EOL]     Assert.assertTrue(integrator.getIterations() < 10); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 42,61
@Test [EOL] public void testQuinticFunction() { [EOL]     UnivariateFunction f = new QuinticFunction(); [EOL]     UnivariateIntegrator integrator = new SimpsonIntegrator(); [EOL]     double min, max, expected, result, tolerance; [EOL]     min = 0; [EOL]     max = 1; [EOL]     expected = -1.0 / 48; [EOL]     tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     result = integrator.integrate(1000, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < 150); [EOL]     Assert.assertTrue(integrator.getIterations() < 10); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = 0; [EOL]     max = 0.5; [EOL]     expected = 11.0 / 768; [EOL]     tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     result = integrator.integrate(1000, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < 100); [EOL]     Assert.assertTrue(integrator.getIterations() < 10); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL]     min = -1; [EOL]     max = 4; [EOL]     expected = 2048 / 3.0 - 78 + 1.0 / 48; [EOL]     tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy()); [EOL]     result = integrator.integrate(1000, f, min, max); [EOL]     Assert.assertTrue(integrator.getEvaluations() < 150); [EOL]     Assert.assertTrue(integrator.getIterations() < 10); [EOL]     Assert.assertEquals(expected, result, tolerance); [EOL] } <line_num>: 66,92
@Test [EOL] public void testParameters() { [EOL]     UnivariateFunction f = new Sin(); [EOL]     try { [EOL]         new SimpsonIntegrator().integrate(1000, f, 1, -1); [EOL]         Assert.fail("Expecting NumberIsTooLargeException - bad interval"); [EOL]     } catch (NumberIsTooLargeException ex) { [EOL]     } [EOL]     try { [EOL]         new SimpsonIntegrator(5, 4); [EOL]         Assert.fail("Expecting NumberIsTooSmallException - bad iteration limits"); [EOL]     } catch (NumberIsTooSmallException ex) { [EOL]     } [EOL]     try { [EOL]         new SimpsonIntegrator(10, 99); [EOL]         Assert.fail("Expecting NumberIsTooLargeException - bad iteration limits"); [EOL]     } catch (NumberIsTooLargeException ex) { [EOL]     } [EOL] } <line_num>: 97,121
