@Test [EOL] public void testZero() { [EOL]     HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]     interpolator.addSamplePoint(0.0, new double[] { 0.0 }); [EOL]     for (double x = -10; x < 10; x += 1.0) { [EOL]         DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0]; [EOL]         Assert.assertEquals(0.0, y.getValue(), 1.0e-15); [EOL]         Assert.assertEquals(0.0, y.getPartialDerivative(1), 1.0e-15); [EOL]     } [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 0.0 }), interpolator.getPolynomials()[0]); [EOL] } <line_num>: 30,41
@Test [EOL] public void testQuadratic() { [EOL]     HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]     interpolator.addSamplePoint(0.0, new double[] { 2.0 }); [EOL]     interpolator.addSamplePoint(1.0, new double[] { 0.0 }); [EOL]     interpolator.addSamplePoint(2.0, new double[] { 0.0 }); [EOL]     for (double x = -10; x < 10; x += 1.0) { [EOL]         DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0]; [EOL]         Assert.assertEquals((x - 1.0) * (x - 2.0), y.getValue(), 1.0e-15); [EOL]         Assert.assertEquals(2 * x - 3.0, y.getPartialDerivative(1), 1.0e-15); [EOL]     } [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 2.0, -3.0, 1.0 }), interpolator.getPolynomials()[0]); [EOL] } <line_num>: 43,56
@Test [EOL] public void testMixedDerivatives() { [EOL]     HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]     interpolator.addSamplePoint(0.0, new double[] { 1.0 }, new double[] { 2.0 }); [EOL]     interpolator.addSamplePoint(1.0, new double[] { 4.0 }); [EOL]     interpolator.addSamplePoint(2.0, new double[] { 5.0 }, new double[] { 2.0 }); [EOL]     Assert.assertEquals(4, interpolator.getPolynomials()[0].degree()); [EOL]     DerivativeStructure y0 = interpolator.value(new DerivativeStructure(1, 1, 0, 0.0))[0]; [EOL]     Assert.assertEquals(1.0, y0.getValue(), 1.0e-15); [EOL]     Assert.assertEquals(2.0, y0.getPartialDerivative(1), 1.0e-15); [EOL]     Assert.assertEquals(4.0, interpolator.value(1.0)[0], 1.0e-15); [EOL]     DerivativeStructure y2 = interpolator.value(new DerivativeStructure(1, 1, 0, 2.0))[0]; [EOL]     Assert.assertEquals(5.0, y2.getValue(), 1.0e-15); [EOL]     Assert.assertEquals(2.0, y2.getPartialDerivative(1), 1.0e-15); [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 1.0, 2.0, 4.0, -4.0, 1.0 }), interpolator.getPolynomials()[0]); [EOL] } <line_num>: 58,74
@Test [EOL] public void testRandomPolynomialsValuesOnly() { [EOL]     Random random = new Random(0x42b1e7dbd361a932l); [EOL]     for (int i = 0; i < 100; ++i) { [EOL]         int maxDegree = 0; [EOL]         PolynomialFunction[] p = new PolynomialFunction[5]; [EOL]         for (int k = 0; k < p.length; ++k) { [EOL]             int degree = random.nextInt(7); [EOL]             p[k] = randomPolynomial(degree, random); [EOL]             maxDegree = FastMath.max(maxDegree, degree); [EOL]         } [EOL]         HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]         for (int j = 0; j < 1 + maxDegree; ++j) { [EOL]             double x = 0.1 * j; [EOL]             double[] values = new double[p.length]; [EOL]             for (int k = 0; k < p.length; ++k) { [EOL]                 values[k] = p[k].value(x); [EOL]             } [EOL]             interpolator.addSamplePoint(x, values); [EOL]         } [EOL]         for (double x = 0; x < 2; x += 0.1) { [EOL]             double[] values = interpolator.value(x); [EOL]             Assert.assertEquals(p.length, values.length); [EOL]             for (int k = 0; k < p.length; ++k) { [EOL]                 Assert.assertEquals(p[k].value(x), values[k], 1.0e-8 * FastMath.abs(p[k].value(x))); [EOL]             } [EOL]         } [EOL]         PolynomialFunction[] result = interpolator.getPolynomials(); [EOL]         for (int k = 0; k < p.length; ++k) { [EOL]             checkPolynomial(p[k], result[k]); [EOL]         } [EOL]     } [EOL] } <line_num>: 76,115
@Test [EOL] public void testRandomPolynomialsFirstDerivative() { [EOL]     Random random = new Random(0x570803c982ca5d3bl); [EOL]     for (int i = 0; i < 100; ++i) { [EOL]         int maxDegree = 0; [EOL]         PolynomialFunction[] p = new PolynomialFunction[5]; [EOL]         PolynomialFunction[] pPrime = new PolynomialFunction[5]; [EOL]         for (int k = 0; k < p.length; ++k) { [EOL]             int degree = random.nextInt(7); [EOL]             p[k] = randomPolynomial(degree, random); [EOL]             pPrime[k] = p[k].polynomialDerivative(); [EOL]             maxDegree = FastMath.max(maxDegree, degree); [EOL]         } [EOL]         HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]         for (int j = 0; j < 1 + maxDegree / 2; ++j) { [EOL]             double x = 0.1 * j; [EOL]             double[] values = new double[p.length]; [EOL]             double[] derivatives = new double[p.length]; [EOL]             for (int k = 0; k < p.length; ++k) { [EOL]                 values[k] = p[k].value(x); [EOL]                 derivatives[k] = pPrime[k].value(x); [EOL]             } [EOL]             interpolator.addSamplePoint(x, values, derivatives); [EOL]         } [EOL]         for (double x = 0; x < 2; x += 0.1) { [EOL]             DerivativeStructure[] y = interpolator.value(new DerivativeStructure(1, 1, 0, x)); [EOL]             Assert.assertEquals(p.length, y.length); [EOL]             for (int k = 0; k < p.length; ++k) { [EOL]                 Assert.assertEquals(p[k].value(x), y[k].getValue(), 1.0e-8 * FastMath.abs(p[k].value(x))); [EOL]                 Assert.assertEquals(pPrime[k].value(x), y[k].getPartialDerivative(1), 4.0e-8 * FastMath.abs(p[k].value(x))); [EOL]             } [EOL]         } [EOL]         PolynomialFunction[] result = interpolator.getPolynomials(); [EOL]         for (int k = 0; k < p.length; ++k) { [EOL]             checkPolynomial(p[k], result[k]); [EOL]         } [EOL]     } [EOL] } <line_num>: 117,161
@Test [EOL] public void testSine() { [EOL]     HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]     for (double x = 0; x < FastMath.PI; x += 0.5) { [EOL]         interpolator.addSamplePoint(x, new double[] { FastMath.sin(x) }); [EOL]     } [EOL]     for (double x = 0.1; x <= 2.9; x += 0.01) { [EOL]         DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 2, 0, x))[0]; [EOL]         Assert.assertEquals(FastMath.sin(x), y.getValue(), 3.5e-5); [EOL]         Assert.assertEquals(FastMath.cos(x), y.getPartialDerivative(1), 1.3e-4); [EOL]         Assert.assertEquals(-FastMath.sin(x), y.getPartialDerivative(2), 2.9e-3); [EOL]     } [EOL] } <line_num>: 163,175
@Test [EOL] public void testSquareRoot() { [EOL]     HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]     for (double x = 1.0; x < 3.6; x += 0.5) { [EOL]         interpolator.addSamplePoint(x, new double[] { FastMath.sqrt(x) }); [EOL]     } [EOL]     for (double x = 1.1; x < 3.5; x += 0.01) { [EOL]         DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0]; [EOL]         Assert.assertEquals(FastMath.sqrt(x), y.getValue(), 1.5e-4); [EOL]         Assert.assertEquals(0.5 / FastMath.sqrt(x), y.getPartialDerivative(1), 8.5e-4); [EOL]     } [EOL] } <line_num>: 177,188
@Test [EOL] public void testWikipedia() { [EOL]     HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]     interpolator.addSamplePoint(-1, new double[] { 2 }, new double[] { -8 }, new double[] { 56 }); [EOL]     interpolator.addSamplePoint(0, new double[] { 1 }, new double[] { 0 }, new double[] { 0 }); [EOL]     interpolator.addSamplePoint(1, new double[] { 2 }, new double[] { 8 }, new double[] { 56 }); [EOL]     for (double x = -1.0; x <= 1.0; x += 0.125) { [EOL]         DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0]; [EOL]         double x2 = x * x; [EOL]         double x4 = x2 * x2; [EOL]         double x8 = x4 * x4; [EOL]         Assert.assertEquals(x8 + 1, y.getValue(), 1.0e-15); [EOL]         Assert.assertEquals(8 * x4 * x2 * x, y.getPartialDerivative(1), 1.0e-15); [EOL]     } [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 1, 0, 0, 0, 0, 0, 0, 0, 1 }), interpolator.getPolynomials()[0]); [EOL] } <line_num>: 190,208
@Test [EOL] public void testOnePointParabola() { [EOL]     HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]     interpolator.addSamplePoint(0, new double[] { 1 }, new double[] { 1 }, new double[] { 2 }); [EOL]     for (double x = -1.0; x <= 1.0; x += 0.125) { [EOL]         DerivativeStructure y = interpolator.value(new DerivativeStructure(1, 1, 0, x))[0]; [EOL]         Assert.assertEquals(1 + x * (1 + x), y.getValue(), 1.0e-15); [EOL]         Assert.assertEquals(1 + 2 * x, y.getPartialDerivative(1), 1.0e-15); [EOL]     } [EOL]     checkPolynomial(new PolynomialFunction(new double[] { 1, 1, 1 }), interpolator.getPolynomials()[0]); [EOL] } <line_num>: 210,221
private PolynomialFunction randomPolynomial(int degree, Random random) { [EOL]     double[] coeff = new double[1 + degree]; [EOL]     for (int j = 0; j < degree; ++j) { [EOL]         coeff[j] = random.nextDouble(); [EOL]     } [EOL]     return new PolynomialFunction(coeff); [EOL] } <line_num>: 223,229
@Test(expected = NoDataException.class) [EOL] public void testEmptySample() { [EOL]     new HermiteInterpolator().value(0.0); [EOL] } <line_num>: 231,234
@Test(expected = IllegalArgumentException.class) [EOL] public void testDuplicatedAbscissa() { [EOL]     HermiteInterpolator interpolator = new HermiteInterpolator(); [EOL]     interpolator.addSamplePoint(1.0, new double[] { 0.0 }); [EOL]     interpolator.addSamplePoint(1.0, new double[] { 1.0 }); [EOL] } <line_num>: 236,241
private void checkPolynomial(PolynomialFunction expected, PolynomialFunction result) { [EOL]     Assert.assertTrue(result.degree() >= expected.degree()); [EOL]     double[] cE = expected.getCoefficients(); [EOL]     double[] cR = result.getCoefficients(); [EOL]     for (int i = 0; i < cE.length; ++i) { [EOL]         Assert.assertEquals(cE[i], cR[i], 1.0e-8 * FastMath.abs(cE[i])); [EOL]     } [EOL]     for (int i = cE.length; i < cR.length; ++i) { [EOL]         Assert.assertEquals(0.0, cR[i], 1.0e-9); [EOL]     } [EOL] } <line_num>: 243,253
