@Test [EOL] public void testPreconditions() { [EOL]     double[] xval = new double[] { 3, 4, 5, 6.5 }; [EOL]     double[] yval = new double[] { -4, -3, -1, 2.5 }; [EOL]     double[][] zval = new double[xval.length][yval.length]; [EOL]     BivariateGridInterpolator interpolator = new BicubicSplineInterpolator(); [EOL]     @SuppressWarnings("unused") [EOL]     BivariateFunction p = interpolator.interpolate(xval, yval, zval); [EOL]     double[] wxval = new double[] { 3, 2, 5, 6.5 }; [EOL]     try { [EOL]         p = interpolator.interpolate(wxval, yval, zval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     double[] wyval = new double[] { -4, -3, -1, -1 }; [EOL]     try { [EOL]         p = interpolator.interpolate(xval, wyval, zval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     double[][] wzval = new double[xval.length][yval.length + 1]; [EOL]     try { [EOL]         p = interpolator.interpolate(xval, yval, wzval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     wzval = new double[xval.length - 1][yval.length]; [EOL]     try { [EOL]         p = interpolator.interpolate(xval, yval, wzval); [EOL]         Assert.fail("an exception should have been thrown"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL] } <line_num>: 37,78
public double value(double x, double y) { [EOL]     return 2 * x - 3 * y + 5; [EOL] } <line_num>: 99,101
@Test [EOL] public void testInterpolation1() { [EOL]     final int sz = 21; [EOL]     double[] xval = new double[sz]; [EOL]     double[] yval = new double[sz]; [EOL]     final double delta = 1d / (sz - 1); [EOL]     for (int i = 0; i < sz; i++) { [EOL]         xval[i] = -1 + 15 * i * delta; [EOL]         yval[i] = -20 + 30 * i * delta; [EOL]     } [EOL]     BivariateFunction f = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             return 2 * x - 3 * y + 5; [EOL]         } [EOL]     }; [EOL]     double[][] zval = new double[xval.length][yval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             zval[i][j] = f.value(xval[i], yval[j]); [EOL]         } [EOL]     } [EOL]     BivariateGridInterpolator interpolator = new BicubicSplineInterpolator(); [EOL]     BivariateFunction p = interpolator.interpolate(xval, yval, zval); [EOL]     double x, y; [EOL]     final RandomGenerator rng = new Well19937c(1234567L); [EOL]     final UniformRealDistribution distX = new UniformRealDistribution(rng, xval[0], xval[xval.length - 1]); [EOL]     final UniformRealDistribution distY = new UniformRealDistribution(rng, yval[0], yval[yval.length - 1]); [EOL]     final int numSamples = 50; [EOL]     final double tol = 6; [EOL]     for (int i = 0; i < numSamples; i++) { [EOL]         x = distX.sample(); [EOL]         for (int j = 0; j < numSamples; j++) { [EOL]             y = distY.sample(); [EOL]             Assert.assertEquals(f.value(x, y), p.value(x, y), tol); [EOL]         } [EOL]     } [EOL] } <line_num>: 85,131
public double value(double x, double y) { [EOL]     return 2 * x * x - 3 * y * y + 4 * x * y - 5; [EOL] } <line_num>: 152,154
@Test [EOL] public void testInterpolation2() { [EOL]     final int sz = 21; [EOL]     double[] xval = new double[sz]; [EOL]     double[] yval = new double[sz]; [EOL]     final double delta = 1d / (sz - 1); [EOL]     for (int i = 0; i < sz; i++) { [EOL]         xval[i] = -1 + 15 * i * delta; [EOL]         yval[i] = -20 + 30 * i * delta; [EOL]     } [EOL]     BivariateFunction f = new BivariateFunction() { [EOL]  [EOL]         public double value(double x, double y) { [EOL]             return 2 * x * x - 3 * y * y + 4 * x * y - 5; [EOL]         } [EOL]     }; [EOL]     double[][] zval = new double[xval.length][yval.length]; [EOL]     for (int i = 0; i < xval.length; i++) { [EOL]         for (int j = 0; j < yval.length; j++) { [EOL]             zval[i][j] = f.value(xval[i], yval[j]); [EOL]         } [EOL]     } [EOL]     BivariateGridInterpolator interpolator = new BicubicSplineInterpolator(); [EOL]     BivariateFunction p = interpolator.interpolate(xval, yval, zval); [EOL]     double x, y; [EOL]     final RandomGenerator rng = new Well19937c(1234567L); [EOL]     final UniformRealDistribution distX = new UniformRealDistribution(rng, xval[0], xval[xval.length - 1]); [EOL]     final UniformRealDistribution distY = new UniformRealDistribution(rng, yval[0], yval[yval.length - 1]); [EOL]     final int numSamples = 50; [EOL]     final double tol = 251; [EOL]     for (int i = 0; i < numSamples; i++) { [EOL]         x = distX.sample(); [EOL]         for (int j = 0; j < numSamples; j++) { [EOL]             y = distY.sample(); [EOL]             Assert.assertEquals(f.value(x, y), p.value(x, y), tol); [EOL]         } [EOL]     } [EOL] } <line_num>: 138,184
