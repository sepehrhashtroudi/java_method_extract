public double value(double x) { [EOL]     Dfp dfpX = new DfpField(25).newDfp(x); [EOL]     return DfpMath.sin(dfpX).divide(dfpX).toDouble(); [EOL] } <line_num>: 34,37
@Test [EOL] public void testShortcut() { [EOL]     final Sinc s = new Sinc(); [EOL]     final UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             Dfp dfpX = new DfpField(25).newDfp(x); [EOL]             return DfpMath.sin(dfpX).divide(dfpX).toDouble(); [EOL]         } [EOL]     }; [EOL]     for (double x = 1e-30; x < 1e10; x *= 2) { [EOL]         final double fX = f.value(x); [EOL]         final double sX = s.value(x); [EOL]         Assert.assertEquals("x=" + x, fX, sX, 2.0e-16); [EOL]     } [EOL] } <line_num>: 30,45
@Test [EOL] public void testCrossings() { [EOL]     final Sinc s = new Sinc(true); [EOL]     final int numCrossings = 1000; [EOL]     final double tol = 2e-16; [EOL]     for (int i = 1; i <= numCrossings; i++) { [EOL]         Assert.assertEquals("i=" + i, 0, s.value(i), tol); [EOL]     } [EOL] } <line_num>: 47,55
@Test [EOL] public void testZero() { [EOL]     final Sinc s = new Sinc(); [EOL]     Assert.assertEquals(1d, s.value(0), 0); [EOL] } <line_num>: 57,61
@Test [EOL] public void testEuler() { [EOL]     final Sinc s = new Sinc(); [EOL]     final double x = 123456.789; [EOL]     double prod = 1; [EOL]     double xOverPow2 = x / 2; [EOL]     while (xOverPow2 > 0) { [EOL]         prod *= FastMath.cos(xOverPow2); [EOL]         xOverPow2 /= 2; [EOL]     } [EOL]     Assert.assertEquals(prod, s.value(x), 1e-13); [EOL] } <line_num>: 63,74
@Test [EOL] public void testDerivativeZero() { [EOL]     final DerivativeStructure s0 = new Sinc(true).value(new DerivativeStructure(1, 1, 0, 0.0)); [EOL]     Assert.assertEquals(0, s0.getPartialDerivative(1), 0); [EOL] } <line_num>: 76,80
@Test [EOL] public void testDerivatives1Dot2Unnormalized() { [EOL]     DerivativeStructure s = new Sinc(false).value(new DerivativeStructure(1, 5, 0, 1.2)); [EOL]     Assert.assertEquals(0.77669923830602195806, s.getPartialDerivative(0), 1.0e-16); [EOL]     Assert.assertEquals(-0.34528456985779031701, s.getPartialDerivative(1), 1.0e-16); [EOL]     Assert.assertEquals(-0.2012249552097047631, s.getPartialDerivative(2), 1.0e-16); [EOL]     Assert.assertEquals(0.2010975926270339262, s.getPartialDerivative(3), 4.0e-16); [EOL]     Assert.assertEquals(0.106373929549242204, s.getPartialDerivative(4), 1.0e-15); [EOL]     Assert.assertEquals(-0.1412599110579478695, s.getPartialDerivative(5), 3.0e-15); [EOL] } <line_num>: 82,91
@Test [EOL] public void testDerivatives1Dot2Normalized() { [EOL]     DerivativeStructure s = new Sinc(true).value(new DerivativeStructure(1, 5, 0, 1.2)); [EOL]     Assert.assertEquals(-0.15591488063143983888, s.getPartialDerivative(0), 6.0e-17); [EOL]     Assert.assertEquals(-0.54425176145292298767, s.getPartialDerivative(1), 2.0e-16); [EOL]     Assert.assertEquals(2.4459044611635856107, s.getPartialDerivative(2), 9.0e-16); [EOL]     Assert.assertEquals(0.5391369206235909586, s.getPartialDerivative(3), 7.0e-16); [EOL]     Assert.assertEquals(-16.984649869728849865, s.getPartialDerivative(4), 8.0e-15); [EOL]     Assert.assertEquals(5.0980327462666316586, s.getPartialDerivative(5), 9.0e-15); [EOL] } <line_num>: 93,102
public double value(double x) { [EOL]     Dfp dfpX = new DfpField(25).newDfp(x); [EOL]     return DfpMath.cos(dfpX).subtract(DfpMath.sin(dfpX).divide(dfpX)).divide(dfpX).toDouble(); [EOL] } <line_num>: 108,111
@Test [EOL] public void testDerivativeShortcut() { [EOL]     final Sinc sinc = new Sinc(); [EOL]     final UnivariateFunction f = new UnivariateFunction() { [EOL]  [EOL]         public double value(double x) { [EOL]             Dfp dfpX = new DfpField(25).newDfp(x); [EOL]             return DfpMath.cos(dfpX).subtract(DfpMath.sin(dfpX).divide(dfpX)).divide(dfpX).toDouble(); [EOL]         } [EOL]     }; [EOL]     for (double x = 1e-30; x < 1e10; x *= 2) { [EOL]         final double fX = f.value(x); [EOL]         final DerivativeStructure sX = sinc.value(new DerivativeStructure(1, 1, 0, x)); [EOL]         Assert.assertEquals("x=" + x, fX, sX.getPartialDerivative(1), 3.0e-13); [EOL]     } [EOL] } <line_num>: 104,119
