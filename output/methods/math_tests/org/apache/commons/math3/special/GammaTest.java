private void testRegularizedGamma(double expected, double a, double x) { [EOL]     double actualP = Gamma.regularizedGammaP(a, x); [EOL]     double actualQ = Gamma.regularizedGammaQ(a, x); [EOL]     TestUtils.assertEquals(expected, actualP, 10e-15); [EOL]     TestUtils.assertEquals(actualP, 1.0 - actualQ, 10e-15); [EOL] } <line_num>: 30,35
private void testLogGamma(double expected, double x) { [EOL]     double actual = Gamma.logGamma(x); [EOL]     TestUtils.assertEquals(expected, actual, 10e-15); [EOL] } <line_num>: 37,40
@Test [EOL] public void testRegularizedGammaNanPositive() { [EOL]     testRegularizedGamma(Double.NaN, Double.NaN, 1.0); [EOL] } <line_num>: 42,45
@Test [EOL] public void testRegularizedGammaPositiveNan() { [EOL]     testRegularizedGamma(Double.NaN, 1.0, Double.NaN); [EOL] } <line_num>: 47,50
@Test [EOL] public void testRegularizedGammaNegativePositive() { [EOL]     testRegularizedGamma(Double.NaN, -1.5, 1.0); [EOL] } <line_num>: 52,55
@Test [EOL] public void testRegularizedGammaPositiveNegative() { [EOL]     testRegularizedGamma(Double.NaN, 1.0, -1.0); [EOL] } <line_num>: 57,60
@Test [EOL] public void testRegularizedGammaZeroPositive() { [EOL]     testRegularizedGamma(Double.NaN, 0.0, 1.0); [EOL] } <line_num>: 62,65
@Test [EOL] public void testRegularizedGammaPositiveZero() { [EOL]     testRegularizedGamma(0.0, 1.0, 0.0); [EOL] } <line_num>: 67,70
@Test [EOL] public void testRegularizedGammaPositivePositive() { [EOL]     testRegularizedGamma(0.632120558828558, 1.0, 1.0); [EOL] } <line_num>: 72,75
@Test [EOL] public void testLogGammaNan() { [EOL]     testLogGamma(Double.NaN, Double.NaN); [EOL] } <line_num>: 77,80
@Test [EOL] public void testLogGammaNegative() { [EOL]     testLogGamma(Double.NaN, -1.0); [EOL] } <line_num>: 82,85
@Test [EOL] public void testLogGammaZero() { [EOL]     testLogGamma(Double.NaN, 0.0); [EOL] } <line_num>: 87,90
@Test [EOL] public void testLogGammaPositive() { [EOL]     testLogGamma(0.6931471805599457, 3.0); [EOL] } <line_num>: 92,95
@Test [EOL] public void testDigammaLargeArgs() { [EOL]     double eps = 1e-8; [EOL]     Assert.assertEquals(4.6001618527380874002, Gamma.digamma(100), eps); [EOL]     Assert.assertEquals(3.9019896734278921970, Gamma.digamma(50), eps); [EOL]     Assert.assertEquals(2.9705239922421490509, Gamma.digamma(20), eps); [EOL]     Assert.assertEquals(2.9958363947076465821, Gamma.digamma(20.5), eps); [EOL]     Assert.assertEquals(2.2622143570941481605, Gamma.digamma(10.1), eps); [EOL]     Assert.assertEquals(2.1168588189004379233, Gamma.digamma(8.8), eps); [EOL]     Assert.assertEquals(1.8727843350984671394, Gamma.digamma(7), eps); [EOL]     Assert.assertEquals(0.42278433509846713939, Gamma.digamma(2), eps); [EOL]     Assert.assertEquals(-100.56088545786867450, Gamma.digamma(0.01), eps); [EOL]     Assert.assertEquals(-4.0390398965921882955, Gamma.digamma(-0.8), eps); [EOL]     Assert.assertEquals(4.2003210041401844726, Gamma.digamma(-6.3), eps); [EOL] } <line_num>: 97,111
@Test [EOL] public void testDigammaSmallArgs() { [EOL]     double[] expected = { -10.423754940411076795, -100.56088545786867450, -1000.5755719318103005, -10000.577051183514335, -100000.57719921568107, -1.0000005772140199687e6, -1.0000000577215500408e7, -1.0000000057721564845e8, -1.0000000005772156633e9, -1.0000000000577215665e10, -1.0000000000057721566e11, -1.0000000000005772157e12, -1.0000000000000577216e13, -1.0000000000000057722e14, -1.0000000000000005772e15, -1e+16, -1e+17, -1e+18, -1e+19, -1e+20, -1e+21, -1e+22, -1e+23, -1e+24, -1e+25, -1e+26, -1e+27, -1e+28, -1e+29, -1e+30 }; [EOL]     for (double n = 1; n < 30; n++) { [EOL]         checkRelativeError(String.format("Test %.0f: ", n), expected[(int) (n - 1)], Gamma.digamma(FastMath.pow(10.0, -n)), 1e-8); [EOL]     } [EOL] } <line_num>: 113,126
@Test [EOL] public void testTrigamma() { [EOL]     double eps = 1e-8; [EOL]     double[] data = { 1e-4, 1.0000000164469368793e8, 1e-3, 1.0000016425331958690e6, 1e-2, 10001.621213528313220, 1e-1, 101.43329915079275882, 1, 1.6449340668482264365, 2, 0.64493406684822643647, 3, 0.39493406684822643647, 4, 0.28382295573711532536, 5, 0.22132295573711532536, 10, 0.10516633568168574612, 20, 0.051270822935203119832, 50, 0.020201333226697125806, 100, 0.010050166663333571395 }; [EOL]     for (int i = data.length - 2; i >= 0; i -= 2) { [EOL]         Assert.assertEquals(String.format("trigamma %.0f", data[i]), data[i + 1], Gamma.trigamma(data[i]), eps); [EOL]     } [EOL] } <line_num>: 128,152
@Test [EOL] public void testLogGamma() { [EOL]     final int ulps = 3; [EOL]     for (int i = 0; i < LOG_GAMMA_REF.length; i++) { [EOL]         final double[] data = LOG_GAMMA_REF[i]; [EOL]         final double x = data[0]; [EOL]         final double expected = data[1]; [EOL]         final double actual = Gamma.logGamma(x); [EOL]         final double tol; [EOL]         if (expected == 0.0) { [EOL]             tol = 1E-15; [EOL]         } else { [EOL]             tol = ulps * FastMath.ulp(expected); [EOL]         } [EOL]         Assert.assertEquals(Double.toString(x), expected, actual, tol); [EOL]     } [EOL] } <line_num>: 306,322
@Test [EOL] public void testLogGammaPrecondition1() { [EOL]     Assert.assertTrue(Double.isNaN(Gamma.logGamma(0.0))); [EOL] } <line_num>: 324,327
@Test [EOL] public void testLogGammaPrecondition2() { [EOL]     Assert.assertTrue(Double.isNaN(Gamma.logGamma(-1.0))); [EOL] } <line_num>: 329,332
@Test [EOL] public void testInvGamma1pm1() { [EOL]     final int ulps = 3; [EOL]     for (int i = 0; i < INV_GAMMA1P_M1_REF.length; i++) { [EOL]         final double[] ref = INV_GAMMA1P_M1_REF[i]; [EOL]         final double x = ref[0]; [EOL]         final double expected = ref[1]; [EOL]         final double actual = Gamma.invGamma1pm1(x); [EOL]         final double tol = ulps * FastMath.ulp(expected); [EOL]         Assert.assertEquals(Double.toString(x), expected, actual, tol); [EOL]     } [EOL] } <line_num>: 375,387
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testInvGamma1pm1Precondition1() { [EOL]     Gamma.invGamma1pm1(-0.51); [EOL] } <line_num>: 389,393
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testInvGamma1pm1Precondition2() { [EOL]     Gamma.invGamma1pm1(1.51); [EOL] } <line_num>: 395,399
@Test [EOL] public void testLogGamma1p() { [EOL]     final int ulps = 3; [EOL]     for (int i = 0; i < LOG_GAMMA1P_REF.length; i++) { [EOL]         final double[] ref = LOG_GAMMA1P_REF[i]; [EOL]         final double x = ref[0]; [EOL]         final double expected = ref[1]; [EOL]         final double actual = Gamma.logGamma1p(x); [EOL]         final double tol = ulps * FastMath.ulp(expected); [EOL]         Assert.assertEquals(Double.toString(x), expected, actual, tol); [EOL]     } [EOL] } <line_num>: 421,433
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testLogGamma1pPrecondition1() { [EOL]     Gamma.logGamma1p(-0.51); [EOL] } <line_num>: 435,439
@Test(expected = NumberIsTooLargeException.class) [EOL] public void testLogGamma1pPrecondition2() { [EOL]     Gamma.logGamma1p(1.51); [EOL] } <line_num>: 441,445
@Test [EOL] public void testGamma() { [EOL]     for (int i = 0; i < GAMMA_REF.length; i++) { [EOL]         final double[] ref = GAMMA_REF[i]; [EOL]         final double x = ref[0]; [EOL]         final double expected = ref[1]; [EOL]         final double actual = Gamma.gamma(x); [EOL]         final double absX = FastMath.abs(x); [EOL]         final int ulps; [EOL]         if (absX <= 8.0) { [EOL]             ulps = 3; [EOL]         } else if (absX <= 20.0) { [EOL]             ulps = 5; [EOL]         } else if (absX <= 30.0) { [EOL]             ulps = 50; [EOL]         } else if (absX <= 50.0) { [EOL]             ulps = 180; [EOL]         } else { [EOL]             ulps = 500; [EOL]         } [EOL]         final double tol = ulps * FastMath.ulp(expected); [EOL]         Assert.assertEquals(Double.toString(x), expected, actual, tol); [EOL]     } [EOL] } <line_num>: 930,954
@Test [EOL] public void testGammaNegativeInteger() { [EOL]     for (int i = -100; i <= 0; i++) { [EOL]         Assert.assertTrue(Integer.toString(i), Double.isNaN(Gamma.gamma(i))); [EOL]     } [EOL] } <line_num>: 956,962
private void checkRelativeError(String msg, double expected, double actual, double tolerance) { [EOL]     Assert.assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual)); [EOL] } <line_num>: 964,968
