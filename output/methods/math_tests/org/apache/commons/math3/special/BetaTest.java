private void testRegularizedBeta(double expected, double x, double a, double b) { [EOL]     double actual = Beta.regularizedBeta(x, a, b); [EOL]     TestUtils.assertEquals(expected, actual, 10e-15); [EOL] } <line_num>: 76,80
private void testLogBeta(double expected, double a, double b) { [EOL]     double actual = Beta.logBeta(a, b); [EOL]     TestUtils.assertEquals(expected, actual, 10e-15); [EOL] } <line_num>: 82,85
@Test [EOL] public void testRegularizedBetaNanPositivePositive() { [EOL]     testRegularizedBeta(Double.NaN, Double.NaN, 1.0, 1.0); [EOL] } <line_num>: 87,90
@Test [EOL] public void testRegularizedBetaPositiveNanPositive() { [EOL]     testRegularizedBeta(Double.NaN, 0.5, Double.NaN, 1.0); [EOL] } <line_num>: 92,95
@Test [EOL] public void testRegularizedBetaPositivePositiveNan() { [EOL]     testRegularizedBeta(Double.NaN, 0.5, 1.0, Double.NaN); [EOL] } <line_num>: 97,100
@Test [EOL] public void testRegularizedBetaNegativePositivePositive() { [EOL]     testRegularizedBeta(Double.NaN, -0.5, 1.0, 2.0); [EOL] } <line_num>: 102,105
@Test [EOL] public void testRegularizedBetaPositiveNegativePositive() { [EOL]     testRegularizedBeta(Double.NaN, 0.5, -1.0, 2.0); [EOL] } <line_num>: 107,110
@Test [EOL] public void testRegularizedBetaPositivePositiveNegative() { [EOL]     testRegularizedBeta(Double.NaN, 0.5, 1.0, -2.0); [EOL] } <line_num>: 112,115
@Test [EOL] public void testRegularizedBetaZeroPositivePositive() { [EOL]     testRegularizedBeta(0.0, 0.0, 1.0, 2.0); [EOL] } <line_num>: 117,120
@Test [EOL] public void testRegularizedBetaPositiveZeroPositive() { [EOL]     testRegularizedBeta(Double.NaN, 0.5, 0.0, 2.0); [EOL] } <line_num>: 122,125
@Test [EOL] public void testRegularizedBetaPositivePositiveZero() { [EOL]     testRegularizedBeta(Double.NaN, 0.5, 1.0, 0.0); [EOL] } <line_num>: 127,130
@Test [EOL] public void testRegularizedBetaPositivePositivePositive() { [EOL]     testRegularizedBeta(0.75, 0.5, 1.0, 2.0); [EOL] } <line_num>: 132,135
@Test [EOL] public void testLogBetaNanPositive() { [EOL]     testLogBeta(Double.NaN, Double.NaN, 2.0); [EOL] } <line_num>: 137,140
@Test [EOL] public void testLogBetaPositiveNan() { [EOL]     testLogBeta(Double.NaN, 1.0, Double.NaN); [EOL] } <line_num>: 142,145
@Test [EOL] public void testLogBetaNegativePositive() { [EOL]     testLogBeta(Double.NaN, -1.0, 2.0); [EOL] } <line_num>: 147,150
@Test [EOL] public void testLogBetaPositiveNegative() { [EOL]     testLogBeta(Double.NaN, 1.0, -2.0); [EOL] } <line_num>: 152,155
@Test [EOL] public void testLogBetaZeroPositive() { [EOL]     testLogBeta(Double.NaN, 0.0, 2.0); [EOL] } <line_num>: 157,160
@Test [EOL] public void testLogBetaPositiveZero() { [EOL]     testLogBeta(Double.NaN, 1.0, 0.0); [EOL] } <line_num>: 162,165
@Test [EOL] public void testLogBetaPositivePositive() { [EOL]     testLogBeta(-0.693147180559945, 1.0, 2.0); [EOL] } <line_num>: 167,170
private static double logGammaSum(final double a, final double b) { [EOL]     try { [EOL]         return ((Double) LOG_GAMMA_SUM_METHOD.invoke(null, a, b)).doubleValue(); [EOL]     } catch (final IllegalAccessException e) { [EOL]         Assert.fail(e.getMessage()); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         Assert.fail(e.getMessage()); [EOL]     } catch (final InvocationTargetException e) { [EOL]         final Throwable te = e.getTargetException(); [EOL]         if (te instanceof MathIllegalArgumentException) { [EOL]             throw (MathIllegalArgumentException) te; [EOL]         } [EOL]         Assert.fail(e.getMessage()); [EOL]     } [EOL]     return Double.NaN; [EOL] } <line_num>: 277,296
@Test [EOL] public void testLogGammaSum() { [EOL]     final int ulps = 2; [EOL]     for (int i = 0; i < LOG_GAMMA_SUM_REF.length; i++) { [EOL]         final double[] ref = LOG_GAMMA_SUM_REF[i]; [EOL]         final double a = ref[0]; [EOL]         final double b = ref[1]; [EOL]         final double expected = ref[2]; [EOL]         final double actual = logGammaSum(a, b); [EOL]         final double tol = ulps * FastMath.ulp(expected); [EOL]         final StringBuilder builder = new StringBuilder(); [EOL]         builder.append(a).append(", ").append(b); [EOL]         Assert.assertEquals(builder.toString(), expected, actual, tol); [EOL]     } [EOL] } <line_num>: 298,312
@Test(expected = OutOfRangeException.class) [EOL] public void testLogGammaSumPrecondition1() { [EOL]     logGammaSum(0.0, 1.0); [EOL] } <line_num>: 314,318
@Test(expected = OutOfRangeException.class) [EOL] public void testLogGammaSumPrecondition2() { [EOL]     logGammaSum(3.0, 1.0); [EOL] } <line_num>: 320,324
@Test(expected = OutOfRangeException.class) [EOL] public void testLogGammaSumPrecondition3() { [EOL]     logGammaSum(1.0, 0.0); [EOL] } <line_num>: 326,330
@Test(expected = OutOfRangeException.class) [EOL] public void testLogGammaSumPrecondition4() { [EOL]     logGammaSum(1.0, 3.0); [EOL] } <line_num>: 332,336
private static double logGammaMinusLogGammaSum(final double a, final double b) { [EOL]     try { [EOL]         final Method m = LOG_GAMMA_MINUS_LOG_GAMMA_SUM_METHOD; [EOL]         return ((Double) m.invoke(null, a, b)).doubleValue(); [EOL]     } catch (final IllegalAccessException e) { [EOL]         Assert.fail(e.getMessage()); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         Assert.fail(e.getMessage()); [EOL]     } catch (final InvocationTargetException e) { [EOL]         final Throwable te = e.getTargetException(); [EOL]         if (te instanceof MathIllegalArgumentException) { [EOL]             throw (MathIllegalArgumentException) te; [EOL]         } [EOL]         Assert.fail(e.getMessage()); [EOL]     } [EOL]     return Double.NaN; [EOL] } <line_num>: 462,482
@Test [EOL] public void testLogGammaMinusLogGammaSum() { [EOL]     final int ulps = 4; [EOL]     for (int i = 0; i < LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF.length; i++) { [EOL]         final double[] ref = LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF[i]; [EOL]         final double a = ref[0]; [EOL]         final double b = ref[1]; [EOL]         final double expected = ref[2]; [EOL]         final double actual = logGammaMinusLogGammaSum(a, b); [EOL]         final double tol = ulps * FastMath.ulp(expected); [EOL]         final StringBuilder builder = new StringBuilder(); [EOL]         builder.append(a).append(", ").append(b); [EOL]         Assert.assertEquals(builder.toString(), expected, actual, tol); [EOL]     } [EOL] } <line_num>: 484,498
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testLogGammaMinusLogGammaSumPrecondition1() { [EOL]     logGammaMinusLogGammaSum(-1.0, 8.0); [EOL] } <line_num>: 500,503
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testLogGammaMinusLogGammaSumPrecondition2() { [EOL]     logGammaMinusLogGammaSum(1.0, 7.0); [EOL] } <line_num>: 505,508
private static double sumDeltaMinusDeltaSum(final double a, final double b) { [EOL]     try { [EOL]         final Method m = SUM_DELTA_MINUS_DELTA_SUM_METHOD; [EOL]         return ((Double) m.invoke(null, a, b)).doubleValue(); [EOL]     } catch (final IllegalAccessException e) { [EOL]         Assert.fail(e.getMessage()); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         Assert.fail(e.getMessage()); [EOL]     } catch (final InvocationTargetException e) { [EOL]         final Throwable te = e.getTargetException(); [EOL]         if (te instanceof MathIllegalArgumentException) { [EOL]             throw (MathIllegalArgumentException) te; [EOL]         } [EOL]         Assert.fail(e.getMessage()); [EOL]     } [EOL]     return Double.NaN; [EOL] } <line_num>: 634,655
@Test [EOL] public void testSumDeltaMinusDeltaSum() { [EOL]     final int ulps = 3; [EOL]     for (int i = 0; i < SUM_DELTA_MINUS_DELTA_SUM_REF.length; i++) { [EOL]         final double[] ref = SUM_DELTA_MINUS_DELTA_SUM_REF[i]; [EOL]         final double a = ref[0]; [EOL]         final double b = ref[1]; [EOL]         final double expected = ref[2]; [EOL]         final double actual = sumDeltaMinusDeltaSum(a, b); [EOL]         final double tol = ulps * FastMath.ulp(expected); [EOL]         final StringBuilder builder = new StringBuilder(); [EOL]         builder.append(a).append(", ").append(b); [EOL]         Assert.assertEquals(builder.toString(), expected, actual, tol); [EOL]     } [EOL] } <line_num>: 657,672
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testSumDeltaMinusDeltaSumPrecondition1() { [EOL]     sumDeltaMinusDeltaSum(9.0, 10.0); [EOL] } <line_num>: 674,678
@Test(expected = NumberIsTooSmallException.class) [EOL] public void testSumDeltaMinusDeltaSumPrecondition2() { [EOL]     sumDeltaMinusDeltaSum(10.0, 9.0); [EOL] } <line_num>: 680,684
@Test [EOL] public void testLogBeta() { [EOL]     final int ulps = 3; [EOL]     for (int i = 0; i < LOG_BETA_REF.length; i++) { [EOL]         final double[] ref = LOG_BETA_REF[i]; [EOL]         final double a = ref[0]; [EOL]         final double b = ref[1]; [EOL]         final double expected = ref[2]; [EOL]         final double actual = Beta.logBeta(a, b); [EOL]         final double tol = ulps * FastMath.ulp(expected); [EOL]         final StringBuilder builder = new StringBuilder(); [EOL]         builder.append(a).append(", ").append(b); [EOL]         Assert.assertEquals(builder.toString(), expected, actual, tol); [EOL]     } [EOL] } <line_num>: 945,959
