protected abstract T build(double x); <line_num>: 28,28
@Test [EOL] public void testAddField() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(x + y, build(x).add(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 30,37
@Test [EOL] public void testAddDouble() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(x + y, build(x).add(y)); [EOL]         } [EOL]     } [EOL] } <line_num>: 39,46
@Test [EOL] public void testSubtractField() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(x - y, build(x).subtract(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 48,55
@Test [EOL] public void testSubtractDouble() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(x - y, build(x).subtract(y)); [EOL]         } [EOL]     } [EOL] } <line_num>: 57,64
@Test [EOL] public void testMultiplyField() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(x * y, build(x).multiply(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 66,73
@Test [EOL] public void testMultiplyDouble() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(x * y, build(x).multiply(y)); [EOL]         } [EOL]     } [EOL] } <line_num>: 75,82
@Test [EOL] public void testMultiplyInt() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (int y = -10; y < 10; y += 1) { [EOL]             checkRelative(x * y, build(x).multiply(y)); [EOL]         } [EOL]     } [EOL] } <line_num>: 84,91
@Test [EOL] public void testDivideField() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(x / y, build(x).divide(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 93,100
@Test [EOL] public void testDivideDouble() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(x / y, build(x).divide(y)); [EOL]         } [EOL]     } [EOL] } <line_num>: 102,109
@Test [EOL] public void testRemainderField() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(FastMath.IEEEremainder(x, y), build(x).remainder(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 111,118
@Test [EOL] public void testRemainderDouble() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3.2; y < 3.2; y += 0.25) { [EOL]             checkRelative(FastMath.IEEEremainder(x, y), build(x).remainder(y)); [EOL]         } [EOL]     } [EOL] } <line_num>: 120,127
@Test [EOL] public void testCos() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.cos(x), build(x).cos()); [EOL]     } [EOL] } <line_num>: 129,134
@Test [EOL] public void testAcos() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.acos(x), build(x).acos()); [EOL]     } [EOL] } <line_num>: 136,141
@Test [EOL] public void testSin() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.sin(x), build(x).sin()); [EOL]     } [EOL] } <line_num>: 143,148
@Test [EOL] public void testAsin() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.asin(x), build(x).asin()); [EOL]     } [EOL] } <line_num>: 150,155
@Test [EOL] public void testTan() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.tan(x), build(x).tan()); [EOL]     } [EOL] } <line_num>: 157,162
@Test [EOL] public void testAtan() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.atan(x), build(x).atan()); [EOL]     } [EOL] } <line_num>: 164,169
@Test [EOL] public void testAtan2() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(FastMath.atan2(x, y), build(x).atan2(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 171,178
@Test [EOL] public void testCosh() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.cosh(x), build(x).cosh()); [EOL]     } [EOL] } <line_num>: 180,185
@Test [EOL] public void testAcosh() { [EOL]     for (double x = 1.1; x < 5.0; x += 0.05) { [EOL]         checkRelative(FastMath.acosh(x), build(x).acosh()); [EOL]     } [EOL] } <line_num>: 187,192
@Test [EOL] public void testSinh() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.sinh(x), build(x).sinh()); [EOL]     } [EOL] } <line_num>: 194,199
@Test [EOL] public void testAsinh() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.asinh(x), build(x).asinh()); [EOL]     } [EOL] } <line_num>: 201,206
@Test [EOL] public void testTanh() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.tanh(x), build(x).tanh()); [EOL]     } [EOL] } <line_num>: 208,213
@Test [EOL] public void testAtanh() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.atanh(x), build(x).atanh()); [EOL]     } [EOL] } <line_num>: 215,220
@Test [EOL] public void testSqrt() { [EOL]     for (double x = 0.01; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.sqrt(x), build(x).sqrt()); [EOL]     } [EOL] } <line_num>: 222,227
@Test [EOL] public void testCbrt() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.cbrt(x), build(x).cbrt()); [EOL]     } [EOL] } <line_num>: 229,234
@Test [EOL] public void testHypot() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(FastMath.hypot(x, y), build(x).hypot(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 236,243
@Test [EOL] public void testRootN() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         for (int n = 1; n < 5; ++n) { [EOL]             if (x < 0) { [EOL]                 if (n % 2 == 1) { [EOL]                     checkRelative(-FastMath.pow(-x, 1.0 / n), build(x).rootN(n)); [EOL]                 } [EOL]             } else { [EOL]                 checkRelative(FastMath.pow(x, 1.0 / n), build(x).rootN(n)); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 245,258
@Test [EOL] public void testPowField() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         for (double y = 0.1; y < 4; y += 0.2) { [EOL]             checkRelative(FastMath.pow(x, y), build(x).pow(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 260,267
@Test [EOL] public void testPowDouble() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         for (double y = 0.1; y < 4; y += 0.2) { [EOL]             checkRelative(FastMath.pow(x, y), build(x).pow(y)); [EOL]         } [EOL]     } [EOL] } <line_num>: 269,276
@Test [EOL] public void testPowInt() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         for (int n = 0; n < 5; ++n) { [EOL]             checkRelative(FastMath.pow(x, n), build(x).pow(n)); [EOL]         } [EOL]     } [EOL] } <line_num>: 278,285
@Test [EOL] public void testExp() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.exp(x), build(x).exp()); [EOL]     } [EOL] } <line_num>: 287,292
@Test [EOL] public void testExpm1() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.expm1(x), build(x).expm1()); [EOL]     } [EOL] } <line_num>: 294,299
@Test [EOL] public void testLog() { [EOL]     for (double x = 0.01; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.log(x), build(x).log()); [EOL]     } [EOL] } <line_num>: 301,306
@Test [EOL] public void testLog1p() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.log1p(x), build(x).log1p()); [EOL]     } [EOL] } <line_num>: 308,313
@Test [EOL] public void testAbs() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.abs(x), build(x).abs()); [EOL]     } [EOL] } <line_num>: 324,329
@Test [EOL] public void testCeil() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.ceil(x), build(x).ceil()); [EOL]     } [EOL] } <line_num>: 331,336
@Test [EOL] public void testFloor() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.floor(x), build(x).floor()); [EOL]     } [EOL] } <line_num>: 338,343
@Test [EOL] public void testRint() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.rint(x), build(x).rint()); [EOL]     } [EOL] } <line_num>: 345,350
@Test [EOL] public void testRound() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         Assert.assertEquals(FastMath.round(x), build(x).round()); [EOL]     } [EOL] } <line_num>: 352,357
@Test [EOL] public void testSignum() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         checkRelative(FastMath.signum(x), build(x).signum()); [EOL]     } [EOL] } <line_num>: 359,364
@Test [EOL] public void testCopySignField() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(FastMath.copySign(x, y), build(x).copySign(build(y))); [EOL]         } [EOL]     } [EOL] } <line_num>: 366,373
@Test [EOL] public void testCopySignDouble() { [EOL]     for (double x = -3; x < 3; x += 0.2) { [EOL]         for (double y = -3; y < 3; y += 0.2) { [EOL]             checkRelative(FastMath.copySign(x, y), build(x).copySign(y)); [EOL]         } [EOL]     } [EOL] } <line_num>: 375,382
@Test [EOL] public void testScalb() { [EOL]     for (double x = -0.9; x < 0.9; x += 0.05) { [EOL]         for (int n = -100; n < 100; ++n) { [EOL]             checkRelative(FastMath.scalb(x, n), build(x).scalb(n)); [EOL]         } [EOL]     } [EOL] } <line_num>: 384,391
@Test [EOL] public void testLinearCombinationFaFa() { [EOL]     RandomGenerator r = new Well1024a(0xfafal); [EOL]     for (int i = 0; i < 50; ++i) { [EOL]         double[] aD = generateDouble(r, 10); [EOL]         double[] bD = generateDouble(r, 10); [EOL]         T[] aF = toFieldArray(aD); [EOL]         T[] bF = toFieldArray(bD); [EOL]         checkRelative(MathArrays.linearCombination(aD, bD), aF[0].linearCombination(aF, bF)); [EOL]     } [EOL] } <line_num>: 393,404
@Test [EOL] public void testLinearCombinationDaFa() { [EOL]     RandomGenerator r = new Well1024a(0xdafal); [EOL]     for (int i = 0; i < 50; ++i) { [EOL]         double[] aD = generateDouble(r, 10); [EOL]         double[] bD = generateDouble(r, 10); [EOL]         T[] bF = toFieldArray(bD); [EOL]         checkRelative(MathArrays.linearCombination(aD, bD), bF[0].linearCombination(aD, bF)); [EOL]     } [EOL] } <line_num>: 406,416
@Test [EOL] public void testLinearCombinationFF2() { [EOL]     RandomGenerator r = new Well1024a(0xff2l); [EOL]     for (int i = 0; i < 50; ++i) { [EOL]         double[] aD = generateDouble(r, 2); [EOL]         double[] bD = generateDouble(r, 2); [EOL]         T[] aF = toFieldArray(aD); [EOL]         T[] bF = toFieldArray(bD); [EOL]         checkRelative(MathArrays.linearCombination(aD[0], bD[0], aD[1], bD[1]), aF[0].linearCombination(aF[0], bF[0], aF[1], bF[1])); [EOL]     } [EOL] } <line_num>: 418,429
@Test [EOL] public void testLinearCombinationDF2() { [EOL]     RandomGenerator r = new Well1024a(0xdf2l); [EOL]     for (int i = 0; i < 50; ++i) { [EOL]         double[] aD = generateDouble(r, 2); [EOL]         double[] bD = generateDouble(r, 2); [EOL]         T[] bF = toFieldArray(bD); [EOL]         checkRelative(MathArrays.linearCombination(aD[0], bD[0], aD[1], bD[1]), bF[0].linearCombination(aD[0], bF[0], aD[1], bF[1])); [EOL]     } [EOL] } <line_num>: 431,441
@Test [EOL] public void testLinearCombinationFF3() { [EOL]     RandomGenerator r = new Well1024a(0xff3l); [EOL]     for (int i = 0; i < 50; ++i) { [EOL]         double[] aD = generateDouble(r, 3); [EOL]         double[] bD = generateDouble(r, 3); [EOL]         T[] aF = toFieldArray(aD); [EOL]         T[] bF = toFieldArray(bD); [EOL]         checkRelative(MathArrays.linearCombination(aD[0], bD[0], aD[1], bD[1], aD[2], bD[2]), aF[0].linearCombination(aF[0], bF[0], aF[1], bF[1], aF[2], bF[2])); [EOL]     } [EOL] } <line_num>: 443,454
@Test [EOL] public void testLinearCombinationDF3() { [EOL]     RandomGenerator r = new Well1024a(0xdf3l); [EOL]     for (int i = 0; i < 50; ++i) { [EOL]         double[] aD = generateDouble(r, 3); [EOL]         double[] bD = generateDouble(r, 3); [EOL]         T[] bF = toFieldArray(bD); [EOL]         checkRelative(MathArrays.linearCombination(aD[0], bD[0], aD[1], bD[1], aD[2], bD[2]), bF[0].linearCombination(aD[0], bF[0], aD[1], bF[1], aD[2], bF[2])); [EOL]     } [EOL] } <line_num>: 456,466
@Test [EOL] public void testLinearCombinationFF4() { [EOL]     RandomGenerator r = new Well1024a(0xff4l); [EOL]     for (int i = 0; i < 50; ++i) { [EOL]         double[] aD = generateDouble(r, 4); [EOL]         double[] bD = generateDouble(r, 4); [EOL]         T[] aF = toFieldArray(aD); [EOL]         T[] bF = toFieldArray(bD); [EOL]         checkRelative(MathArrays.linearCombination(aD[0], bD[0], aD[1], bD[1], aD[2], bD[2], aD[3], bD[3]), aF[0].linearCombination(aF[0], bF[0], aF[1], bF[1], aF[2], bF[2], aF[3], bF[3])); [EOL]     } [EOL] } <line_num>: 468,479
@Test [EOL] public void testLinearCombinationDF4() { [EOL]     RandomGenerator r = new Well1024a(0xdf4l); [EOL]     for (int i = 0; i < 50; ++i) { [EOL]         double[] aD = generateDouble(r, 4); [EOL]         double[] bD = generateDouble(r, 4); [EOL]         T[] bF = toFieldArray(bD); [EOL]         checkRelative(MathArrays.linearCombination(aD[0], bD[0], aD[1], bD[1], aD[2], bD[2], aD[3], bD[3]), bF[0].linearCombination(aD[0], bF[0], aD[1], bF[1], aD[2], bF[2], aD[3], bF[3])); [EOL]     } [EOL] } <line_num>: 481,491
@Test [EOL] public void testGetField() { [EOL]     checkRelative(1.0, build(-10).getField().getOne()); [EOL]     checkRelative(0.0, build(-10).getField().getZero()); [EOL] } <line_num>: 493,497
private void checkRelative(double expected, T obtained) { [EOL]     Assert.assertEquals(expected, obtained.getReal(), 1.0e-15 * (1 + FastMath.abs(expected))); [EOL] } <line_num>: 499,501
@Test [EOL] public void testEquals() { [EOL]     T t1a = build(1.0); [EOL]     T t1b = build(1.0); [EOL]     T t2 = build(2.0); [EOL]     Assert.assertTrue(t1a.equals(t1a)); [EOL]     Assert.assertTrue(t1a.equals(t1b)); [EOL]     Assert.assertFalse(t1a.equals(t2)); [EOL]     Assert.assertFalse(t1a.equals(new Object())); [EOL] } <line_num>: 503,512
@Test [EOL] public void testHash() { [EOL]     T t1a = build(1.0); [EOL]     T t1b = build(1.0); [EOL]     T t2 = build(2.0); [EOL]     Assert.assertEquals(t1a.hashCode(), t1b.hashCode()); [EOL]     Assert.assertTrue(t1a.hashCode() != t2.hashCode()); [EOL] } <line_num>: 514,521
private double[] generateDouble(final RandomGenerator r, int n) { [EOL]     double[] a = new double[n]; [EOL]     for (int i = 0; i < n; ++i) { [EOL]         a[i] = r.nextDouble(); [EOL]     } [EOL]     return a; [EOL] } <line_num>: 523,529
private T[] toFieldArray(double[] a) { [EOL]     T[] f = MathArrays.buildArray(build(0).getField(), a.length); [EOL]     for (int i = 0; i < a.length; ++i) { [EOL]         f[i] = build(a[i]); [EOL]     } [EOL]     return f; [EOL] } <line_num>: 531,537
