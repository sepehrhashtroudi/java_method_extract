@Test [EOL] public void testPreconditions() { [EOL]     MultidimensionalCounter c; [EOL]     try { [EOL]         c = new MultidimensionalCounter(0, 1); [EOL]         Assert.fail("NotStrictlyPositiveException expected"); [EOL]     } catch (NotStrictlyPositiveException e) { [EOL]     } [EOL]     try { [EOL]         c = new MultidimensionalCounter(2, 0); [EOL]         Assert.fail("NotStrictlyPositiveException expected"); [EOL]     } catch (NotStrictlyPositiveException e) { [EOL]     } [EOL]     try { [EOL]         c = new MultidimensionalCounter(-1, 1); [EOL]         Assert.fail("NotStrictlyPositiveException expected"); [EOL]     } catch (NotStrictlyPositiveException e) { [EOL]     } [EOL]     c = new MultidimensionalCounter(2, 3); [EOL]     try { [EOL]         c.getCount(1, 1, 1); [EOL]         Assert.fail("DimensionMismatchException expected"); [EOL]     } catch (DimensionMismatchException e) { [EOL]     } [EOL]     try { [EOL]         c.getCount(3, 1); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         c.getCount(0, -1); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         c.getCounts(-1); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL]     try { [EOL]         c.getCounts(6); [EOL]         Assert.fail("OutOfRangeException expected"); [EOL]     } catch (OutOfRangeException e) { [EOL]     } [EOL] } <line_num>: 30,84
@Test [EOL] public void testIteratorPreconditions() { [EOL]     MultidimensionalCounter.Iterator iter = (new MultidimensionalCounter(2, 3)).iterator(); [EOL]     try { [EOL]         iter.getCount(-1); [EOL]         Assert.fail("IndexOutOfBoundsException expected"); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         iter.getCount(2); [EOL]         Assert.fail("IndexOutOfBoundsException expected"); [EOL]     } catch (IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 86,101
@Test [EOL] public void testMulti2UniConversion() { [EOL]     final MultidimensionalCounter c = new MultidimensionalCounter(2, 4, 5); [EOL]     Assert.assertEquals(c.getCount(1, 2, 3), 33); [EOL] } <line_num>: 103,107
@Test [EOL] public void testAccessors() { [EOL]     final int[] originalSize = new int[] { 2, 6, 5 }; [EOL]     final MultidimensionalCounter c = new MultidimensionalCounter(originalSize); [EOL]     final int nDim = c.getDimension(); [EOL]     Assert.assertEquals(nDim, originalSize.length); [EOL]     final int[] size = c.getSizes(); [EOL]     for (int i = 0; i < nDim; i++) { [EOL]         Assert.assertEquals(originalSize[i], size[i]); [EOL]     } [EOL] } <line_num>: 109,120
@Test [EOL] public void testIterationConsistency() { [EOL]     final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 4); [EOL]     final int[][] expected = new int[][] { { 0, 0, 0 }, { 0, 0, 1 }, { 0, 0, 2 }, { 0, 0, 3 }, { 0, 1, 0 }, { 0, 1, 1 }, { 0, 1, 2 }, { 0, 1, 3 }, { 0, 2, 0 }, { 0, 2, 1 }, { 0, 2, 2 }, { 0, 2, 3 }, { 1, 0, 0 }, { 1, 0, 1 }, { 1, 0, 2 }, { 1, 0, 3 }, { 1, 1, 0 }, { 1, 1, 1 }, { 1, 1, 2 }, { 1, 1, 3 }, { 1, 2, 0 }, { 1, 2, 1 }, { 1, 2, 2 }, { 1, 2, 3 } }; [EOL]     final int totalSize = c.getSize(); [EOL]     final int nDim = c.getDimension(); [EOL]     final MultidimensionalCounter.Iterator iter = c.iterator(); [EOL]     for (int i = 0; i < totalSize; i++) { [EOL]         if (!iter.hasNext()) { [EOL]             Assert.fail("Too short"); [EOL]         } [EOL]         final int uniDimIndex = iter.next().intValue(); [EOL]         Assert.assertEquals("Wrong iteration at " + i, i, uniDimIndex); [EOL]         for (int dimIndex = 0; dimIndex < nDim; dimIndex++) { [EOL]             Assert.assertEquals("Wrong multidimensional index for [" + i + "][" + dimIndex + "]", expected[i][dimIndex], iter.getCount(dimIndex)); [EOL]         } [EOL]         Assert.assertEquals("Wrong unidimensional index for [" + i + "]", c.getCount(expected[i]), uniDimIndex); [EOL]         final int[] indices = c.getCounts(uniDimIndex); [EOL]         for (int dimIndex = 0; dimIndex < nDim; dimIndex++) { [EOL]             Assert.assertEquals("Wrong multidimensional index for [" + i + "][" + dimIndex + "]", expected[i][dimIndex], indices[dimIndex]); [EOL]         } [EOL]     } [EOL]     if (iter.hasNext()) { [EOL]         Assert.fail("Too long"); [EOL]     } [EOL] } <line_num>: 122,180
