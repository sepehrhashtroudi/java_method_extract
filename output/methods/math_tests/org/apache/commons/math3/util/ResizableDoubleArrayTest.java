@After [EOL] public void tearDown() throws Exception { [EOL]     da = null; [EOL]     ra = null; [EOL] } <line_num>: 35,39
@Before [EOL] public void setUp() throws Exception { [EOL]     da = new ResizableDoubleArray(); [EOL]     ra = new ResizableDoubleArray(); [EOL] } <line_num>: 41,45
@Test [EOL] public void testConstructors() { [EOL]     float defaultExpansionFactor = 2.0f; [EOL]     float defaultContractionCriteria = 2.5f; [EOL]     int defaultMode = ResizableDoubleArray.MULTIPLICATIVE_MODE; [EOL]     ResizableDoubleArray testDa = new ResizableDoubleArray(2); [EOL]     Assert.assertEquals(0, testDa.getNumElements()); [EOL]     Assert.assertEquals(2, testDa.getCapacity()); [EOL]     Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0); [EOL]     Assert.assertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0); [EOL]     Assert.assertEquals(defaultMode, testDa.getExpansionMode()); [EOL]     try { [EOL]         da = new ResizableDoubleArray(-1); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     testDa = new ResizableDoubleArray((double[]) null); [EOL]     Assert.assertEquals(0, testDa.getNumElements()); [EOL]     double[] initialArray = new double[] { 0, 1, 2 }; [EOL]     testDa = new ResizableDoubleArray(initialArray); [EOL]     Assert.assertEquals(3, testDa.getNumElements()); [EOL]     testDa = new ResizableDoubleArray(2, 2.0f); [EOL]     Assert.assertEquals(0, testDa.getNumElements()); [EOL]     Assert.assertEquals(2, testDa.getCapacity()); [EOL]     Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0); [EOL]     Assert.assertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0); [EOL]     Assert.assertEquals(defaultMode, testDa.getExpansionMode()); [EOL]     try { [EOL]         da = new ResizableDoubleArray(2, 0.5f); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     testDa = new ResizableDoubleArray(2, 3.0f); [EOL]     Assert.assertEquals(3.0f, testDa.getExpansionFactor(), 0); [EOL]     Assert.assertEquals(3.5f, testDa.getContractionCriteria(), 0); [EOL]     testDa = new ResizableDoubleArray(2, 2.0f, 3.0f); [EOL]     Assert.assertEquals(0, testDa.getNumElements()); [EOL]     Assert.assertEquals(2, testDa.getCapacity()); [EOL]     Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0); [EOL]     Assert.assertEquals(3.0f, testDa.getContractionCriteria(), 0); [EOL]     Assert.assertEquals(defaultMode, testDa.getExpansionMode()); [EOL]     try { [EOL]         da = new ResizableDoubleArray(2, 2.0f, 1.5f); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     testDa = new ResizableDoubleArray(2, 2.0f, 3.0f, ResizableDoubleArray.ADDITIVE_MODE); [EOL]     Assert.assertEquals(0, testDa.getNumElements()); [EOL]     Assert.assertEquals(2, testDa.getCapacity()); [EOL]     Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0); [EOL]     Assert.assertEquals(3.0f, testDa.getContractionCriteria(), 0); [EOL]     Assert.assertEquals(ResizableDoubleArray.ADDITIVE_MODE, testDa.getExpansionMode()); [EOL]     try { [EOL]         da = new ResizableDoubleArray(2, 2.0f, 2.5f, -1); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     testDa = new ResizableDoubleArray(2, 2.0f, 3.0f, ResizableDoubleArray.ADDITIVE_MODE); [EOL]     testDa.addElement(2.0); [EOL]     testDa.addElement(3.2); [EOL]     ResizableDoubleArray copyDa = new ResizableDoubleArray(testDa); [EOL]     Assert.assertEquals(copyDa, testDa); [EOL]     Assert.assertEquals(testDa, copyDa); [EOL] } <line_num>: 47,129
@Test [EOL] public void testSetElementArbitraryExpansion1() { [EOL]     da.addElement(2.0); [EOL]     da.addElement(4.0); [EOL]     da.addElement(6.0); [EOL]     da.setElement(1, 3.0); [EOL]     da.setElement(1000, 3.4); [EOL]     Assert.assertEquals("The number of elements should now be 1001, it isn't", da.getNumElements(), 1001); [EOL]     Assert.assertEquals("Uninitialized Elements are default value of 0.0, index 766 wasn't", 0.0, da.getElement(760), Double.MIN_VALUE); [EOL]     Assert.assertEquals("The 1000th index should be 3.4, it isn't", 3.4, da.getElement(1000), Double.MIN_VALUE); [EOL]     Assert.assertEquals("The 0th index should be 2.0, it isn't", 2.0, da.getElement(0), Double.MIN_VALUE); [EOL] } <line_num>: 132,154
@Test [EOL] public void testSetElementArbitraryExpansion2() { [EOL]     da.addElement(2.0); [EOL]     da.addElement(4.0); [EOL]     da.addElement(6.0); [EOL]     Assert.assertEquals(16, ((ResizableDoubleArray) da).getCapacity()); [EOL]     Assert.assertEquals(3, da.getNumElements()); [EOL]     da.setElement(3, 7.0); [EOL]     Assert.assertEquals(16, ((ResizableDoubleArray) da).getCapacity()); [EOL]     Assert.assertEquals(4, da.getNumElements()); [EOL]     da.setElement(10, 10.0); [EOL]     Assert.assertEquals(16, ((ResizableDoubleArray) da).getCapacity()); [EOL]     Assert.assertEquals(11, da.getNumElements()); [EOL]     da.setElement(9, 10.0); [EOL]     Assert.assertEquals(16, ((ResizableDoubleArray) da).getCapacity()); [EOL]     Assert.assertEquals(11, da.getNumElements()); [EOL]     try { [EOL]         da.setElement(-2, 3); [EOL]         Assert.fail("Expecting ArrayIndexOutOfBoundsException for negative index"); [EOL]     } catch (ArrayIndexOutOfBoundsException ex) { [EOL]     } [EOL]     ResizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 3.0f, ResizableDoubleArray.ADDITIVE_MODE); [EOL]     Assert.assertEquals(2, testDa.getCapacity()); [EOL]     testDa.addElement(1d); [EOL]     testDa.addElement(1d); [EOL]     Assert.assertEquals(2, testDa.getCapacity()); [EOL]     testDa.addElement(1d); [EOL]     Assert.assertEquals(4, testDa.getCapacity()); [EOL] } <line_num>: 156,191
@Override [EOL] @Test [EOL] public void testAdd1000() { [EOL]     super.testAdd1000(); [EOL]     Assert.assertEquals("Internal Storage length should be 1024 if we started out with initial capacity of " + "16 and an expansion factor of 2.0", 1024, ((ResizableDoubleArray) da).getCapacity()); [EOL] } <line_num>: 193,200
@Test [EOL] public void testAddElements() { [EOL]     ResizableDoubleArray testDa = new ResizableDoubleArray(); [EOL]     testDa.addElements(new double[] { 4, 5, 6 }); [EOL]     Assert.assertEquals(3, testDa.getNumElements(), 0); [EOL]     Assert.assertEquals(4, testDa.getElement(0), 0); [EOL]     Assert.assertEquals(5, testDa.getElement(1), 0); [EOL]     Assert.assertEquals(6, testDa.getElement(2), 0); [EOL]     testDa.addElements(new double[] { 4, 5, 6 }); [EOL]     Assert.assertEquals(6, testDa.getNumElements()); [EOL]     testDa = new ResizableDoubleArray(2, 2.0f, 2.5f, ResizableDoubleArray.ADDITIVE_MODE); [EOL]     Assert.assertEquals(2, testDa.getCapacity()); [EOL]     testDa.addElements(new double[] { 1d }); [EOL]     testDa.addElements(new double[] { 2d }); [EOL]     testDa.addElements(new double[] { 3d }); [EOL]     Assert.assertEquals(1d, testDa.getElement(0), 0); [EOL]     Assert.assertEquals(2d, testDa.getElement(1), 0); [EOL]     Assert.assertEquals(3d, testDa.getElement(2), 0); [EOL]     Assert.assertEquals(4, testDa.getCapacity()); [EOL]     Assert.assertEquals(3, testDa.getNumElements()); [EOL] } <line_num>: 202,228
@Override [EOL] @Test [EOL] public void testAddElementRolling() { [EOL]     super.testAddElementRolling(); [EOL]     da.clear(); [EOL]     da.addElement(1); [EOL]     da.addElement(2); [EOL]     da.addElementRolling(3); [EOL]     Assert.assertEquals(3, da.getElement(1), 0); [EOL]     da.addElementRolling(4); [EOL]     Assert.assertEquals(3, da.getElement(0), 0); [EOL]     Assert.assertEquals(4, da.getElement(1), 0); [EOL]     da.addElement(5); [EOL]     Assert.assertEquals(5, da.getElement(2), 0); [EOL]     da.addElementRolling(6); [EOL]     Assert.assertEquals(4, da.getElement(0), 0); [EOL]     Assert.assertEquals(5, da.getElement(1), 0); [EOL]     Assert.assertEquals(6, da.getElement(2), 0); [EOL]     ResizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 2.5f, ResizableDoubleArray.ADDITIVE_MODE); [EOL]     Assert.assertEquals(2, testDa.getCapacity()); [EOL]     testDa.addElement(1d); [EOL]     testDa.addElement(2d); [EOL]     testDa.addElement(3d); [EOL]     Assert.assertEquals(1d, testDa.getElement(0), 0); [EOL]     Assert.assertEquals(2d, testDa.getElement(1), 0); [EOL]     Assert.assertEquals(3d, testDa.getElement(2), 0); [EOL]     Assert.assertEquals(4, testDa.getCapacity()); [EOL]     Assert.assertEquals(3, testDa.getNumElements()); [EOL]     testDa.addElementRolling(4d); [EOL]     Assert.assertEquals(2d, testDa.getElement(0), 0); [EOL]     Assert.assertEquals(3d, testDa.getElement(1), 0); [EOL]     Assert.assertEquals(4d, testDa.getElement(2), 0); [EOL]     Assert.assertEquals(4, testDa.getCapacity()); [EOL]     Assert.assertEquals(3, testDa.getNumElements()); [EOL]     testDa.addElementRolling(5d); [EOL]     Assert.assertEquals(3d, testDa.getElement(0), 0); [EOL]     Assert.assertEquals(4d, testDa.getElement(1), 0); [EOL]     Assert.assertEquals(5d, testDa.getElement(2), 0); [EOL]     Assert.assertEquals(4, testDa.getCapacity()); [EOL]     Assert.assertEquals(3, testDa.getNumElements()); [EOL]     try { [EOL]         testDa.getElement(4); [EOL]         Assert.fail("Expecting ArrayIndexOutOfBoundsException"); [EOL]     } catch (ArrayIndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         testDa.getElement(-1); [EOL]         Assert.fail("Expecting ArrayIndexOutOfBoundsException"); [EOL]     } catch (ArrayIndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 230,287
@Test [EOL] public void testSetNumberOfElements() { [EOL]     da.addElement(1.0); [EOL]     da.addElement(1.0); [EOL]     da.addElement(1.0); [EOL]     da.addElement(1.0); [EOL]     da.addElement(1.0); [EOL]     da.addElement(1.0); [EOL]     Assert.assertEquals("Number of elements should equal 6", da.getNumElements(), 6); [EOL]     ((ResizableDoubleArray) da).setNumElements(3); [EOL]     Assert.assertEquals("Number of elements should equal 3", da.getNumElements(), 3); [EOL]     try { [EOL]         ((ResizableDoubleArray) da).setNumElements(-3); [EOL]         Assert.fail("Setting number of elements to negative should've thrown an exception"); [EOL]     } catch (IllegalArgumentException iae) { [EOL]     } [EOL]     ((ResizableDoubleArray) da).setNumElements(1024); [EOL]     Assert.assertEquals("Number of elements should now be 1024", da.getNumElements(), 1024); [EOL]     Assert.assertEquals("Element 453 should be a default double", da.getElement(453), 0.0, Double.MIN_VALUE); [EOL] } <line_num>: 289,312
@Test [EOL] public void testWithInitialCapacity() { [EOL]     ResizableDoubleArray eDA2 = new ResizableDoubleArray(2); [EOL]     Assert.assertEquals("Initial number of elements should be 0", 0, eDA2.getNumElements()); [EOL]     final IntegerDistribution randomData = new UniformIntegerDistribution(100, 1000); [EOL]     final int iterations = randomData.sample(); [EOL]     for (int i = 0; i < iterations; i++) { [EOL]         eDA2.addElement(i); [EOL]     } [EOL]     Assert.assertEquals("Number of elements should be equal to " + iterations, iterations, eDA2.getNumElements()); [EOL]     eDA2.addElement(2.0); [EOL]     Assert.assertEquals("Number of elements should be equals to " + (iterations + 1), iterations + 1, eDA2.getNumElements()); [EOL] } <line_num>: 314,333
@Test [EOL] public void testWithInitialCapacityAndExpansionFactor() { [EOL]     ResizableDoubleArray eDA3 = new ResizableDoubleArray(3, 3.0f, 3.5f); [EOL]     Assert.assertEquals("Initial number of elements should be 0", 0, eDA3.getNumElements()); [EOL]     final IntegerDistribution randomData = new UniformIntegerDistribution(100, 3000); [EOL]     final int iterations = randomData.sample(); [EOL]     for (int i = 0; i < iterations; i++) { [EOL]         eDA3.addElement(i); [EOL]     } [EOL]     Assert.assertEquals("Number of elements should be equal to " + iterations, iterations, eDA3.getNumElements()); [EOL]     eDA3.addElement(2.0); [EOL]     Assert.assertEquals("Number of elements should be equals to " + (iterations + 1), iterations + 1, eDA3.getNumElements()); [EOL]     Assert.assertEquals("Expansion factor should equal 3.0", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE); [EOL] } <line_num>: 335,356
@Test [EOL] public void testDiscard() { [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     Assert.assertEquals("Number of elements should be 11", 11, da.getNumElements()); [EOL]     ((ResizableDoubleArray) da).discardFrontElements(5); [EOL]     Assert.assertEquals("Number of elements should be 6", 6, da.getNumElements()); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     Assert.assertEquals("Number of elements should be 10", 10, da.getNumElements()); [EOL]     ((ResizableDoubleArray) da).discardMostRecentElements(2); [EOL]     Assert.assertEquals("Number of elements should be 8", 8, da.getNumElements()); [EOL]     try { [EOL]         ((ResizableDoubleArray) da).discardFrontElements(-1); [EOL]         Assert.fail("Trying to discard a negative number of element is not allowed"); [EOL]     } catch (Exception e) { [EOL]     } [EOL]     try { [EOL]         ((ResizableDoubleArray) da).discardMostRecentElements(-1); [EOL]         Assert.fail("Trying to discard a negative number of element is not allowed"); [EOL]     } catch (Exception e) { [EOL]     } [EOL]     try { [EOL]         ((ResizableDoubleArray) da).discardFrontElements(10000); [EOL]         Assert.fail("You can't discard more elements than the array contains"); [EOL]     } catch (Exception e) { [EOL]     } [EOL]     try { [EOL]         ((ResizableDoubleArray) da).discardMostRecentElements(10000); [EOL]         Assert.fail("You can't discard more elements than the array contains"); [EOL]     } catch (Exception e) { [EOL]     } [EOL] } <line_num>: 358,409
@Test [EOL] public void testSubstitute() { [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     da.addElement(2.0); [EOL]     Assert.assertEquals("Number of elements should be 11", 11, da.getNumElements()); [EOL]     ((ResizableDoubleArray) da).substituteMostRecentElement(24); [EOL]     Assert.assertEquals("Number of elements should be 11", 11, da.getNumElements()); [EOL]     try { [EOL]         ((ResizableDoubleArray) da).discardMostRecentElements(10); [EOL]     } catch (Exception e) { [EOL]         Assert.fail("Trying to discard a negative number of element is not allowed"); [EOL]     } [EOL]     ((ResizableDoubleArray) da).substituteMostRecentElement(24); [EOL]     Assert.assertEquals("Number of elements should be 1", 1, da.getNumElements()); [EOL] } <line_num>: 411,441
@Test [EOL] public void testMutators() { [EOL]     ((ResizableDoubleArray) da).setContractionCriteria(10f); [EOL]     Assert.assertEquals(10f, ((ResizableDoubleArray) da).getContractionCriteria(), 0); [EOL]     ((ResizableDoubleArray) da).setExpansionFactor(8f); [EOL]     Assert.assertEquals(8f, ((ResizableDoubleArray) da).getExpansionFactor(), 0); [EOL]     try { [EOL]         ((ResizableDoubleArray) da).setExpansionFactor(11f); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     ((ResizableDoubleArray) da).setExpansionMode(ResizableDoubleArray.ADDITIVE_MODE); [EOL]     Assert.assertEquals(ResizableDoubleArray.ADDITIVE_MODE, ((ResizableDoubleArray) da).getExpansionMode()); [EOL]     try { [EOL]         ((ResizableDoubleArray) da).setExpansionMode(-1); [EOL]         Assert.fail("Expecting IllegalArgumentException"); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 443,465
@Test [EOL] public void testEqualsAndHashCode() throws Exception { [EOL]     ResizableDoubleArray first = new ResizableDoubleArray(); [EOL]     Double other = new Double(2); [EOL]     Assert.assertFalse(first.equals(other)); [EOL]     other = null; [EOL]     Assert.assertFalse(first.equals(other)); [EOL]     Assert.assertTrue(first.equals(first)); [EOL]     ResizableDoubleArray second = new ResizableDoubleArray(); [EOL]     verifyEquality(first, second); [EOL]     ResizableDoubleArray third = new ResizableDoubleArray(3, 2.0f, 2.0f); [EOL]     verifyInequality(third, first); [EOL]     ResizableDoubleArray fourth = new ResizableDoubleArray(3, 2.0f, 2.0f); [EOL]     ResizableDoubleArray fifth = new ResizableDoubleArray(2, 2.0f, 2.0f); [EOL]     verifyEquality(third, fourth); [EOL]     verifyInequality(third, fifth); [EOL]     third.addElement(4.1); [EOL]     third.addElement(4.2); [EOL]     third.addElement(4.3); [EOL]     fourth.addElement(4.1); [EOL]     fourth.addElement(4.2); [EOL]     fourth.addElement(4.3); [EOL]     verifyEquality(third, fourth); [EOL]     fourth.addElement(4.4); [EOL]     verifyInequality(third, fourth); [EOL]     third.addElement(4.4); [EOL]     verifyEquality(third, fourth); [EOL]     fourth.addElement(4.4); [EOL]     verifyInequality(third, fourth); [EOL]     third.addElement(4.4); [EOL]     verifyEquality(third, fourth); [EOL]     fourth.addElementRolling(4.5); [EOL]     third.addElementRolling(4.5); [EOL]     verifyEquality(third, fourth); [EOL]     third.discardFrontElements(1); [EOL]     verifyInequality(third, fourth); [EOL]     fourth.discardFrontElements(1); [EOL]     verifyEquality(third, fourth); [EOL]     third.discardMostRecentElements(2); [EOL]     fourth.discardMostRecentElements(2); [EOL]     verifyEquality(third, fourth); [EOL]     third.addElement(18); [EOL]     fourth.addElement(17); [EOL]     third.addElement(17); [EOL]     fourth.addElement(18); [EOL]     verifyInequality(third, fourth); [EOL]     ResizableDoubleArray.copy(fourth, fifth); [EOL]     verifyEquality(fourth, fifth); [EOL]     verifyEquality(fourth, new ResizableDoubleArray(fourth)); [EOL]     verifyEquality(fourth, fourth.copy()); [EOL] } <line_num>: 467,542
@Test [EOL] public void testGetArrayRef() { [EOL]     final ResizableDoubleArray a = new ResizableDoubleArray(); [EOL]     final int index = 20; [EOL]     final double v1 = 1.2; [EOL]     a.setElement(index, v1); [EOL]     final double v2 = v1 + 3.4; [EOL]     final double[] aInternalArray = a.getArrayRef(); [EOL]     aInternalArray[a.getStartIndex() + index] = v2; [EOL]     Assert.assertEquals(v2, a.getElement(index), 0d); [EOL] } <line_num>: 544,559
public double evaluate(double[] a, int index, int num) { [EOL]     double sum = 0; [EOL]     final int max = index + num; [EOL]     for (int i = index; i < max; i++) { [EOL]         sum += a[i]; [EOL]     } [EOL]     return sum; [EOL] } <line_num>: 570,577
public double evaluate(double[] a) { [EOL]     return evaluate(a, 0, a.length); [EOL] } <line_num>: 578,580
@Test [EOL] public void testCompute() { [EOL]     final ResizableDoubleArray a = new ResizableDoubleArray(); [EOL]     final int max = 20; [EOL]     for (int i = 1; i <= max; i++) { [EOL]         a.setElement(i, i); [EOL]     } [EOL]     final MathArrays.Function add = new MathArrays.Function() { [EOL]  [EOL]         public double evaluate(double[] a, int index, int num) { [EOL]             double sum = 0; [EOL]             final int max = index + num; [EOL]             for (int i = index; i < max; i++) { [EOL]                 sum += a[i]; [EOL]             } [EOL]             return sum; [EOL]         } [EOL]  [EOL]         public double evaluate(double[] a) { [EOL]             return evaluate(a, 0, a.length); [EOL]         } [EOL]     }; [EOL]     final double sum = a.compute(add); [EOL]     Assert.assertEquals(0.5 * max * (max + 1), sum, 0); [EOL] } <line_num>: 561,585
private void verifyEquality(ResizableDoubleArray a, ResizableDoubleArray b) { [EOL]     Assert.assertTrue(b.equals(a)); [EOL]     Assert.assertTrue(a.equals(b)); [EOL]     Assert.assertEquals(a.hashCode(), b.hashCode()); [EOL] } <line_num>: 587,591
private void verifyInequality(ResizableDoubleArray a, ResizableDoubleArray b) { [EOL]     Assert.assertFalse(b.equals(a)); [EOL]     Assert.assertFalse(a.equals(b)); [EOL]     Assert.assertFalse(a.hashCode() == b.hashCode()); [EOL] } <line_num>: 593,597
