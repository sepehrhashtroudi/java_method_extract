@SuppressWarnings("boxing") [EOL] @BeforeClass [EOL] public static void header() { [EOL]     System.out.println(String.format(FMT_HDR, "Name", "StrictMath", "FastMath", "Math", RUNS, System.getProperty("java.version"), System.getProperty("java.runtime.version", "?"), System.getProperty("java.vm.name"), System.getProperty("java.vm.version"))); [EOL] } <line_num>: 42,52
@SuppressWarnings("boxing") [EOL] private static void report(String name, long strictMathTime, long fastMathTime, long mathTime) { [EOL]     long unitTime = strictMathTime; [EOL]     System.out.println(String.format(FMT_DTL, name, strictMathTime / RUNS, (double) strictMathTime / unitTime, fastMathTime / RUNS, (double) fastMathTime / unitTime, mathTime / RUNS, (double) mathTime / unitTime)); [EOL] } <line_num>: 54,63
@Test [EOL] public void testLog() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.log(0.01 + i); [EOL]     } [EOL]     long strictMath = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.log(0.01 + i); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.log(0.01 + i); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("log", strictMath, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 65,90
@Test [EOL] public void testLog10() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.log10(0.01 + i); [EOL]     } [EOL]     long strictMath = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.log10(0.01 + i); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.log10(0.01 + i); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("log10", strictMath, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 92,117
@Test [EOL] public void testLog1p() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.log1p(-0.9 + i); [EOL]     } [EOL]     long strictMath = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.log1p(-0.9 + i); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.log1p(-0.9 + i); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("log1p", strictMath, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 119,144
@Test [EOL] public void testPow() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.pow(0.01 + i * F1, i * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.pow(0.01 + i * F1, i * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.pow(0.01 + i * F1, i * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("pow", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 146,170
@Test [EOL] public void testExp() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.exp(100 * i * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.exp(100 * i * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.exp(100 * i * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("exp", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 172,197
@Test [EOL] public void testSin() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.sin(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.sin(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.sin(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("sin", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 199,224
@Test [EOL] public void testAsin() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.asin(0.999 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.asin(0.999 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.asin(0.999 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("asin", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 226,251
@Test [EOL] public void testCos() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.cos(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.cos(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.cos(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("cos", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 253,278
@Test [EOL] public void testAcos() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.acos(0.999 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.acos(0.999 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.acos(0.999 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("acos", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 280,304
@Test [EOL] public void testTan() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.tan(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.tan(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.tan(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("tan", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 306,331
@Test [EOL] public void testAtan() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.atan(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.atan(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.atan(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("atan", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 333,358
@Test [EOL] public void testAtan2() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     int max = (int) FastMath.floor(FastMath.sqrt(RUNS)); [EOL]     for (int i = 0; i < max; i++) { [EOL]         for (int j = 0; j < max; j++) { [EOL]             x += StrictMath.atan2((i - max / 2) * (100.0 / max), (j - max / 2) * (100.0 / max)); [EOL]         } [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < max; i++) { [EOL]         for (int j = 0; j < max; j++) { [EOL]             x += FastMath.atan2((i - max / 2) * (100.0 / max), (j - max / 2) * (100.0 / max)); [EOL]         } [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < max; i++) { [EOL]         for (int j = 0; j < max; j++) { [EOL]             x += Math.atan2((i - max / 2) * (100.0 / max), (j - max / 2) * (100.0 / max)); [EOL]         } [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("atan2", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 360,392
@Test [EOL] public void testHypot() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     int max = (int) FastMath.floor(FastMath.sqrt(RUNS)); [EOL]     for (int i = 0; i < max; i++) { [EOL]         for (int j = 0; j < max; j++) { [EOL]             x += StrictMath.atan2((i - max / 2) * (100.0 / max), (j - max / 2) * (100.0 / max)); [EOL]         } [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < max; i++) { [EOL]         for (int j = 0; j < max; j++) { [EOL]             x += FastMath.atan2((i - max / 2) * (100.0 / max), (j - max / 2) * (100.0 / max)); [EOL]         } [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < max; i++) { [EOL]         for (int j = 0; j < max; j++) { [EOL]             x += Math.atan2((i - max / 2) * (100.0 / max), (j - max / 2) * (100.0 / max)); [EOL]         } [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("hypot", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 394,426
@Test [EOL] public void testCbrt() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.cbrt(100 * i * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.cbrt(100 * i * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.cbrt(100 * i * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("cbrt", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 428,453
@Test [EOL] public void testSqrt() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.sqrt(100 * i * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.sqrt(100 * i * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.sqrt(100 * i * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("sqrt", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 455,480
@Test [EOL] public void testCosh() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.cosh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.cosh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.cosh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("cosh", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 482,507
@Test [EOL] public void testSinh() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.sinh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.sinh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.sinh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("sinh", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 509,534
@Test [EOL] public void testTanh() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.tanh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.tanh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.tanh(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("tanh", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 536,561
@Test [EOL] public void testExpm1() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.expm1(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.expm1(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.expm1(100 * (i - RUNS / 2) * F1); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("expm1", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 563,587
@Test [EOL] public void testAbs() { [EOL]     double x = 0; [EOL]     long time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += StrictMath.abs(i * (1 - 0.5 * RUNS)); [EOL]     } [EOL]     long strictTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += FastMath.abs(i * (1 - 0.5 * RUNS)); [EOL]     } [EOL]     long fastTime = System.nanoTime() - time; [EOL]     x = 0; [EOL]     time = System.nanoTime(); [EOL]     for (int i = 0; i < RUNS; i++) { [EOL]         x += Math.abs(i * (1 - 0.5 * RUNS)); [EOL]     } [EOL]     long mathTime = System.nanoTime() - time; [EOL]     report("abs", strictTime, fastTime, mathTime); [EOL]     Assert.assertTrue(!Double.isNaN(x)); [EOL] } <line_num>: 589,614
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.log(x); [EOL] } <line_num>: 634,637
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.log(x); [EOL] } <line_num>: 640,643
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.log(x); [EOL] } <line_num>: 646,649
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.log10(x); [EOL] } <line_num>: 657,660
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.log10(x); [EOL] } <line_num>: 663,666
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.log10(x); [EOL] } <line_num>: 669,672
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.log1p(x); [EOL] } <line_num>: 680,683
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.log1p(x); [EOL] } <line_num>: 686,689
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.log1p(x); [EOL] } <line_num>: 692,695
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.pow(x, y); [EOL] } <line_num>: 703,706
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.pow(x, y); [EOL] } <line_num>: 709,712
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.pow(x, y); [EOL] } <line_num>: 715,718
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.exp(x); [EOL] } <line_num>: 726,729
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.exp(x); [EOL] } <line_num>: 732,735
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.exp(x); [EOL] } <line_num>: 738,741
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.sin(x); [EOL] } <line_num>: 749,752
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.sin(x); [EOL] } <line_num>: 755,758
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.sin(x); [EOL] } <line_num>: 761,764
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.asin(x); [EOL] } <line_num>: 772,775
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.asin(x); [EOL] } <line_num>: 778,781
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.asin(x); [EOL] } <line_num>: 784,787
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.cos(x); [EOL] } <line_num>: 795,798
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.cos(x); [EOL] } <line_num>: 801,804
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.cos(x); [EOL] } <line_num>: 807,810
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.acos(x); [EOL] } <line_num>: 818,821
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.acos(x); [EOL] } <line_num>: 824,827
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.acos(x); [EOL] } <line_num>: 830,833
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.tan(x); [EOL] } <line_num>: 841,844
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.tan(x); [EOL] } <line_num>: 847,850
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.tan(x); [EOL] } <line_num>: 853,856
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.atan(x); [EOL] } <line_num>: 864,867
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.atan(x); [EOL] } <line_num>: 870,873
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.atan(x); [EOL] } <line_num>: 876,879
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.atan2(x, y); [EOL] } <line_num>: 887,890
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.atan2(x, y); [EOL] } <line_num>: 893,896
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.atan2(x, y); [EOL] } <line_num>: 899,902
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.hypot(x, y); [EOL] } <line_num>: 910,913
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.hypot(x, y); [EOL] } <line_num>: 916,919
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.hypot(x, y); [EOL] } <line_num>: 922,925
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.cbrt(x); [EOL] } <line_num>: 934,937
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.cbrt(x); [EOL] } <line_num>: 940,943
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.cbrt(x); [EOL] } <line_num>: 946,949
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.sqrt(x); [EOL] } <line_num>: 957,960
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.sqrt(x); [EOL] } <line_num>: 963,966
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.sqrt(x); [EOL] } <line_num>: 969,972
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.cosh(x); [EOL] } <line_num>: 980,983
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.cosh(x); [EOL] } <line_num>: 986,989
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.cosh(x); [EOL] } <line_num>: 992,995
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.sinh(x); [EOL] } <line_num>: 1003,1006
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.sinh(x); [EOL] } <line_num>: 1009,1012
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.sinh(x); [EOL] } <line_num>: 1015,1018
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.tanh(x); [EOL] } <line_num>: 1026,1029
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.tanh(x); [EOL] } <line_num>: 1032,1035
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.tanh(x); [EOL] } <line_num>: 1038,1041
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.expm1(x); [EOL] } <line_num>: 1049,1052
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.expm1(x); [EOL] } <line_num>: 1055,1058
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.expm1(x); [EOL] } <line_num>: 1061,1064
@Override [EOL] public Double call() throws Exception { [EOL]     return StrictMath.abs(x); [EOL] } <line_num>: 1072,1075
@Override [EOL] public Double call() throws Exception { [EOL]     return Math.abs(x); [EOL] } <line_num>: 1078,1081
@Override [EOL] public Double call() throws Exception { [EOL]     return FastMath.abs(x); [EOL] } <line_num>: 1084,1087
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testSimpleBenchmark() { [EOL]     final String SM = "StrictMath"; [EOL]     final String M = "Math"; [EOL]     final String FM = "FastMath"; [EOL]     final int numStat = 100; [EOL]     final int numCall = RUNS / numStat; [EOL]     final double x = Math.random(); [EOL]     final double y = Math.random(); [EOL]     PerfTestUtils.timeAndReport("log", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.log(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.log(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.log(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("log10", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.log10(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.log10(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.log10(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("log1p", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.log1p(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.log1p(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.log1p(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("pow", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.pow(x, y); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.pow(x, y); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.pow(x, y); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("exp", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.exp(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.exp(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.exp(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("sin", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.sin(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.sin(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.sin(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("asin", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.asin(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.asin(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.asin(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("cos", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.cos(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.cos(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.cos(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("acos", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.acos(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.acos(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.acos(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("tan", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.tan(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.tan(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.tan(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("atan", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.atan(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.atan(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.atan(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("atan2", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.atan2(x, y); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.atan2(x, y); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.atan2(x, y); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("hypot", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.hypot(x, y); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.hypot(x, y); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.hypot(x, y); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("cbrt", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.cbrt(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.cbrt(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.cbrt(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("sqrt", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.sqrt(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.sqrt(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.sqrt(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("cosh", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.cosh(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.cosh(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.cosh(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("sinh", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.sinh(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.sinh(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.sinh(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("tanh", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.tanh(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.tanh(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.tanh(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("expm1", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.expm1(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.expm1(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.expm1(x); [EOL]         } [EOL]     }); [EOL]     PerfTestUtils.timeAndReport("abs", numCall, numStat, false, new PerfTestUtils.RunTest(SM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return StrictMath.abs(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(M) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return Math.abs(x); [EOL]         } [EOL]     }, new PerfTestUtils.RunTest(FM) { [EOL]  [EOL]         @Override [EOL]         public Double call() throws Exception { [EOL]             return FastMath.abs(x); [EOL]         } [EOL]     }); [EOL] } <line_num>: 616,1089
