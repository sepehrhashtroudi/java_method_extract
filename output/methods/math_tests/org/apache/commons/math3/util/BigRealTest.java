@Test [EOL] public void testConstructor() { [EOL]     Assert.assertEquals(1.625, new BigReal(new BigDecimal("1.625")).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(-5.0, new BigReal(new BigInteger("-5")).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(-5.0, new BigReal(new BigInteger("-5"), MathContext.DECIMAL64).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(0.125, new BigReal(new BigInteger("125"), 3).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(0.125, new BigReal(new BigInteger("125"), 3, MathContext.DECIMAL64).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5, MathContext.DECIMAL64).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }, MathContext.DECIMAL64).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(1.625, new BigReal(1.625).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(1.625, new BigReal(1.625, MathContext.DECIMAL64).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(-5.0, new BigReal(-5).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(-5.0, new BigReal(-5, MathContext.DECIMAL64).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(-5.0, new BigReal(-5l).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(-5.0, new BigReal(-5l, MathContext.DECIMAL64).doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(1.625, new BigReal("1.625").doubleValue(), 1.0e-15); [EOL]     Assert.assertEquals(1.625, new BigReal("1.625", MathContext.DECIMAL64).doubleValue(), 1.0e-15); [EOL] } <line_num>: 30,72
@Test [EOL] public void testCompareTo() { [EOL]     BigReal first = new BigReal(1.0 / 2.0); [EOL]     BigReal second = new BigReal(1.0 / 3.0); [EOL]     BigReal third = new BigReal(1.0 / 2.0); [EOL]     Assert.assertEquals(0, first.compareTo(first)); [EOL]     Assert.assertEquals(0, first.compareTo(third)); [EOL]     Assert.assertEquals(1, first.compareTo(second)); [EOL]     Assert.assertEquals(-1, second.compareTo(first)); [EOL] } <line_num>: 74,85
@Test [EOL] public void testAdd() { [EOL]     BigReal a = new BigReal("1.2345678"); [EOL]     BigReal b = new BigReal("8.7654321"); [EOL]     Assert.assertEquals(9.9999999, a.add(b).doubleValue(), 1.0e-15); [EOL] } <line_num>: 87,92
@Test [EOL] public void testSubtract() { [EOL]     BigReal a = new BigReal("1.2345678"); [EOL]     BigReal b = new BigReal("8.7654321"); [EOL]     Assert.assertEquals(-7.5308643, a.subtract(b).doubleValue(), 1.0e-15); [EOL] } <line_num>: 94,99
@Test [EOL] public void testNegate() { [EOL]     BigReal a = new BigReal("1.2345678"); [EOL]     BigReal zero = new BigReal("0.0000000"); [EOL]     Assert.assertEquals(a.negate().add(a), zero); [EOL]     Assert.assertEquals(a.add(a.negate()), zero); [EOL]     Assert.assertEquals(zero, zero.negate()); [EOL] } <line_num>: 101,108
@Test [EOL] public void testDivide() { [EOL]     BigReal a = new BigReal("1.0000000000"); [EOL]     BigReal b = new BigReal("0.0009765625"); [EOL]     Assert.assertEquals(1024.0, a.divide(b).doubleValue(), 1.0e-15); [EOL] } <line_num>: 110,115
@Test(expected = MathArithmeticException.class) [EOL] public void testDivisionByZero() { [EOL]     final BigReal a = BigReal.ONE; [EOL]     final BigReal b = BigReal.ZERO; [EOL]     a.divide(b); [EOL] } <line_num>: 117,122
@Test [EOL] public void testReciprocal() { [EOL]     BigReal a = new BigReal("1.2345678"); [EOL]     double eps = FastMath.pow(10., -a.getScale()); [EOL]     BigReal one = new BigReal("1.0000000"); [EOL]     BigReal b = a.reciprocal(); [EOL]     BigReal r = one.subtract(a.multiply(b)); [EOL]     Assert.assertTrue(FastMath.abs(r.doubleValue()) <= eps); [EOL]     r = one.subtract(b.multiply(a)); [EOL]     Assert.assertTrue(FastMath.abs(r.doubleValue()) <= eps); [EOL] } <line_num>: 124,134
@Test(expected = MathArithmeticException.class) [EOL] public void testReciprocalOfZero() { [EOL]     BigReal.ZERO.reciprocal(); [EOL] } <line_num>: 136,139
@Test [EOL] public void testMultiply() { [EOL]     BigReal a = new BigReal("1024.0"); [EOL]     BigReal b = new BigReal("0.0009765625"); [EOL]     Assert.assertEquals(1.0, a.multiply(b).doubleValue(), 1.0e-15); [EOL]     int n = 1024; [EOL]     Assert.assertEquals(1.0, b.multiply(n).doubleValue(), 1.0e-15); [EOL] } <line_num>: 141,148
@Test [EOL] public void testDoubleValue() { [EOL]     Assert.assertEquals(0.5, new BigReal(0.5).doubleValue(), 1.0e-15); [EOL] } <line_num>: 150,153
@Test [EOL] public void testBigDecimalValue() { [EOL]     BigDecimal pi = new BigDecimal("3.1415926535897932384626433832795028841971693993751"); [EOL]     Assert.assertEquals(pi, new BigReal(pi).bigDecimalValue()); [EOL]     Assert.assertEquals(new BigDecimal(0.5), new BigReal(1.0 / 2.0).bigDecimalValue()); [EOL] } <line_num>: 155,162
@Test [EOL] public void testEqualsAndHashCode() { [EOL]     BigReal zero = new BigReal(0.0); [EOL]     BigReal nullReal = null; [EOL]     Assert.assertTrue(zero.equals(zero)); [EOL]     Assert.assertFalse(zero.equals(nullReal)); [EOL]     Assert.assertFalse(zero.equals(Double.valueOf(0))); [EOL]     BigReal zero2 = new BigReal(0.0); [EOL]     Assert.assertTrue(zero.equals(zero2)); [EOL]     Assert.assertEquals(zero.hashCode(), zero2.hashCode()); [EOL]     BigReal one = new BigReal(1.0); [EOL]     Assert.assertFalse((one.equals(zero) || zero.equals(one))); [EOL]     Assert.assertTrue(one.equals(BigReal.ONE)); [EOL] } <line_num>: 164,177
@Test [EOL] public void testSerial() { [EOL]     BigReal[] Reals = { new BigReal(3.0), BigReal.ONE, BigReal.ZERO, new BigReal(17), new BigReal(FastMath.PI), new BigReal(-2.5) }; [EOL]     for (BigReal Real : Reals) { [EOL]         Assert.assertEquals(Real, TestUtils.serializeAndRecover(Real)); [EOL]     } [EOL] } <line_num>: 179,188
