@Test [EOL] public void testConstructor1() { [EOL]     final Incrementor i = new Incrementor(); [EOL]     Assert.assertEquals(0, i.getMaximalCount()); [EOL]     Assert.assertEquals(0, i.getCount()); [EOL] } <line_num>: 25,30
@Test [EOL] public void testConstructor2() { [EOL]     final Incrementor i = new Incrementor(10); [EOL]     Assert.assertEquals(10, i.getMaximalCount()); [EOL]     Assert.assertEquals(0, i.getCount()); [EOL] } <line_num>: 32,37
@Test [EOL] public void testCanIncrement1() { [EOL]     final Incrementor i = new Incrementor(3); [EOL]     Assert.assertTrue(i.canIncrement()); [EOL]     i.incrementCount(); [EOL]     Assert.assertTrue(i.canIncrement()); [EOL]     i.incrementCount(); [EOL]     Assert.assertTrue(i.canIncrement()); [EOL]     i.incrementCount(); [EOL]     Assert.assertFalse(i.canIncrement()); [EOL] } <line_num>: 39,49
@Test [EOL] public void testCanIncrement2() { [EOL]     final Incrementor i = new Incrementor(3); [EOL]     while (i.canIncrement()) { [EOL]         i.incrementCount(); [EOL]     } [EOL]     try { [EOL]         i.incrementCount(); [EOL]         Assert.fail("MaxCountExceededException expected"); [EOL]     } catch (MaxCountExceededException e) { [EOL]     } [EOL] } <line_num>: 51,66
@Test [EOL] public void testAccessor() { [EOL]     final Incrementor i = new Incrementor(); [EOL]     i.setMaximalCount(10); [EOL]     Assert.assertEquals(10, i.getMaximalCount()); [EOL]     Assert.assertEquals(0, i.getCount()); [EOL] } <line_num>: 68,75
@Test [EOL] public void testBelowMaxCount() { [EOL]     final Incrementor i = new Incrementor(); [EOL]     i.setMaximalCount(3); [EOL]     i.incrementCount(); [EOL]     i.incrementCount(); [EOL]     i.incrementCount(); [EOL]     Assert.assertEquals(3, i.getCount()); [EOL] } <line_num>: 77,87
@Test(expected = MaxCountExceededException.class) [EOL] public void testAboveMaxCount() { [EOL]     final Incrementor i = new Incrementor(); [EOL]     i.setMaximalCount(3); [EOL]     i.incrementCount(); [EOL]     i.incrementCount(); [EOL]     i.incrementCount(); [EOL]     i.incrementCount(); [EOL] } <line_num>: 89,98
public void trigger(int max) { [EOL]     throw new TooManyEvaluationsException(max); [EOL] } <line_num>: 105,107
@Test(expected = TooManyEvaluationsException.class) [EOL] public void testAlternateException() { [EOL]     final Incrementor.MaxCountExceededCallback cb = new Incrementor.MaxCountExceededCallback() { [EOL]  [EOL]         public void trigger(int max) { [EOL]             throw new TooManyEvaluationsException(max); [EOL]         } [EOL]     }; [EOL]     final Incrementor i = new Incrementor(0, cb); [EOL]     i.incrementCount(); [EOL] } <line_num>: 100,112
@Test [EOL] public void testReset() { [EOL]     final Incrementor i = new Incrementor(); [EOL]     i.setMaximalCount(3); [EOL]     i.incrementCount(); [EOL]     i.incrementCount(); [EOL]     i.incrementCount(); [EOL]     Assert.assertEquals(3, i.getCount()); [EOL]     i.resetCount(); [EOL]     Assert.assertEquals(0, i.getCount()); [EOL] } <line_num>: 114,125
@Test [EOL] public void testBulkIncrement() { [EOL]     final Incrementor i = new Incrementor(); [EOL]     i.setMaximalCount(3); [EOL]     i.incrementCount(2); [EOL]     Assert.assertEquals(2, i.getCount()); [EOL]     i.incrementCount(1); [EOL]     Assert.assertEquals(3, i.getCount()); [EOL] } <line_num>: 127,136
