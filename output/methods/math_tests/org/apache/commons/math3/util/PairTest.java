public MyInteger(int i) { [EOL]     this.i = i; [EOL] } <line_num>: 82,84
@Test [EOL] public void testAccessor() { [EOL]     final Pair<Integer, Double> p = new Pair<Integer, Double>(new Integer(1), new Double(2)); [EOL]     Assert.assertEquals(new Integer(1), p.getKey()); [EOL]     Assert.assertEquals(2, p.getValue().doubleValue(), Math.ulp(1d)); [EOL] } <line_num>: 24,30
@Test [EOL] public void testAccessor2() { [EOL]     final Pair<Integer, Double> p = new Pair<Integer, Double>(new Integer(1), new Double(2)); [EOL]     Assert.assertTrue(p.getFirst() == p.getKey()); [EOL]     Assert.assertTrue(p.getSecond() == p.getValue()); [EOL] } <line_num>: 32,41
@Test [EOL] public void testEquals() { [EOL]     Pair<Integer, Double> p1 = new Pair<Integer, Double>(null, null); [EOL]     Assert.assertFalse(p1.equals(null)); [EOL]     Pair<Integer, Double> p2 = new Pair<Integer, Double>(null, null); [EOL]     Assert.assertTrue(p1.equals(p2)); [EOL]     p1 = new Pair<Integer, Double>(new Integer(1), new Double(2)); [EOL]     Assert.assertFalse(p1.equals(p2)); [EOL]     p2 = new Pair<Integer, Double>(new Integer(1), new Double(2)); [EOL]     Assert.assertTrue(p1.equals(p2)); [EOL]     Pair<Integer, Float> p3 = new Pair<Integer, Float>(new Integer(1), new Float(2)); [EOL]     Assert.assertFalse(p1.equals(p3)); [EOL] } <line_num>: 43,59
@Test [EOL] public void testHashCode() { [EOL]     final MyInteger m1 = new MyInteger(1); [EOL]     final MyInteger m2 = new MyInteger(1); [EOL]     final Pair<MyInteger, MyInteger> p1 = new Pair<MyInteger, MyInteger>(m1, m1); [EOL]     final Pair<MyInteger, MyInteger> p2 = new Pair<MyInteger, MyInteger>(m2, m2); [EOL]     Assert.assertTrue(p1.hashCode() == p2.hashCode()); [EOL]     m2.set(2); [EOL]     Assert.assertFalse(p1.hashCode() == p2.hashCode()); [EOL] } <line_num>: 61,74
public void set(int i) { [EOL]     this.i = i; [EOL] } <line_num>: 86,88
@Override [EOL] public boolean equals(Object o) { [EOL]     if (!(o instanceof MyInteger)) { [EOL]         return false; [EOL]     } else { [EOL]         return i == ((MyInteger) o).i; [EOL]     } [EOL] } <line_num>: 90,97
@Override [EOL] public int hashCode() { [EOL]     return i; [EOL] } <line_num>: 99,102
