@Override [EOL] protected Decimal64 build(final double x) { [EOL]     return new Decimal64(x); [EOL] } <line_num>: 41,44
@Test [EOL] public void testAdd() { [EOL]     Decimal64 expected, actual; [EOL]     expected = new Decimal64(X + Y); [EOL]     actual = PLUS_X.add(PLUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_Y.add(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64(X + (-Y)); [EOL]     actual = PLUS_X.add(MINUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_Y.add(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64((-X) + (-Y)); [EOL]     actual = MINUS_X.add(MINUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_Y.add(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.POSITIVE_INFINITY; [EOL]     actual = PLUS_X.add(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.add(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.add(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.add(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.add(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NEGATIVE_INFINITY; [EOL]     actual = PLUS_X.add(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.add(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.add(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.add(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.add(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NAN; [EOL]     actual = Decimal64.POSITIVE_INFINITY.add(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.add(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_X.add(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.add(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.add(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.add(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.add(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.add(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.add(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.add(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.add(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 46,115
@Test [EOL] public void testSubtract() { [EOL]     Decimal64 expected, actual; [EOL]     expected = new Decimal64(X - Y); [EOL]     actual = PLUS_X.subtract(PLUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64(X - (-Y)); [EOL]     actual = PLUS_X.subtract(MINUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64((-X) - Y); [EOL]     actual = MINUS_X.subtract(PLUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64((-X) - (-Y)); [EOL]     actual = MINUS_X.subtract(MINUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NEGATIVE_INFINITY; [EOL]     actual = PLUS_X.subtract(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.subtract(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.subtract(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.POSITIVE_INFINITY; [EOL]     actual = PLUS_X.subtract(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.subtract(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.subtract(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NAN; [EOL]     actual = Decimal64.POSITIVE_INFINITY.subtract(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.subtract(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_X.subtract(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.subtract(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.subtract(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.subtract(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.subtract(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.subtract(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.subtract(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.subtract(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.subtract(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 117,180
@Test [EOL] public void testNegate() { [EOL]     Decimal64 expected, actual; [EOL]     expected = MINUS_X; [EOL]     actual = PLUS_X.negate(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = PLUS_X; [EOL]     actual = MINUS_X.negate(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = MINUS_ZERO; [EOL]     actual = PLUS_ZERO.negate(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = PLUS_ZERO; [EOL]     actual = MINUS_ZERO.negate(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.POSITIVE_INFINITY; [EOL]     actual = Decimal64.NEGATIVE_INFINITY.negate(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NEGATIVE_INFINITY; [EOL]     actual = Decimal64.POSITIVE_INFINITY.negate(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NAN; [EOL]     actual = Decimal64.NAN.negate(); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 182,213
@Test [EOL] public void testMultiply() { [EOL]     Decimal64 expected, actual; [EOL]     expected = new Decimal64(X * Y); [EOL]     actual = PLUS_X.multiply(PLUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_Y.multiply(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64(X * (-Y)); [EOL]     actual = PLUS_X.multiply(MINUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_Y.multiply(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64((-X) * (-Y)); [EOL]     actual = MINUS_X.multiply(MINUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_Y.multiply(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.POSITIVE_INFINITY; [EOL]     actual = PLUS_X.multiply(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.multiply(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.multiply(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.multiply(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.multiply(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NEGATIVE_INFINITY; [EOL]     actual = PLUS_X.multiply(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.multiply(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.multiply(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.multiply(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.multiply(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NAN; [EOL]     actual = PLUS_X.multiply(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.multiply(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.multiply(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.multiply(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.multiply(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.multiply(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.multiply(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.multiply(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 215,288
@Test [EOL] public void testDivide() { [EOL]     Decimal64 expected, actual; [EOL]     expected = new Decimal64(X / Y); [EOL]     actual = PLUS_X.divide(PLUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64(X / (-Y)); [EOL]     actual = PLUS_X.divide(MINUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64((-X) / Y); [EOL]     actual = MINUS_X.divide(PLUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64((-X) / (-Y)); [EOL]     actual = MINUS_X.divide(MINUS_Y); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = PLUS_ZERO; [EOL]     actual = PLUS_X.divide(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.divide(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = MINUS_ZERO; [EOL]     actual = MINUS_X.divide(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_X.divide(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.POSITIVE_INFINITY; [EOL]     actual = Decimal64.POSITIVE_INFINITY.divide(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.divide(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_X.divide(PLUS_ZERO); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.divide(MINUS_ZERO); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NEGATIVE_INFINITY; [EOL]     actual = Decimal64.POSITIVE_INFINITY.divide(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.divide(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_X.divide(MINUS_ZERO); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.divide(PLUS_ZERO); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = Decimal64.NAN; [EOL]     actual = Decimal64.POSITIVE_INFINITY.divide(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.divide(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.divide(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.divide(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_X.divide(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.divide(PLUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_X.divide(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.divide(MINUS_X); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.POSITIVE_INFINITY.divide(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.divide(Decimal64.POSITIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NEGATIVE_INFINITY.divide(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.divide(Decimal64.NEGATIVE_INFINITY); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = Decimal64.NAN.divide(Decimal64.NAN); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_ZERO.divide(PLUS_ZERO); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = PLUS_ZERO.divide(MINUS_ZERO); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_ZERO.divide(PLUS_ZERO); [EOL]     Assert.assertEquals(expected, actual); [EOL]     actual = MINUS_ZERO.divide(MINUS_ZERO); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 290,381
@Test [EOL] public void testReciprocal() { [EOL]     Decimal64 expected, actual; [EOL]     expected = new Decimal64(1.0 / X); [EOL]     actual = PLUS_X.reciprocal(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = new Decimal64(1.0 / (-X)); [EOL]     actual = MINUS_X.reciprocal(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = PLUS_ZERO; [EOL]     actual = Decimal64.POSITIVE_INFINITY.reciprocal(); [EOL]     Assert.assertEquals(expected, actual); [EOL]     expected = MINUS_ZERO; [EOL]     actual = Decimal64.NEGATIVE_INFINITY.reciprocal(); [EOL]     Assert.assertEquals(expected, actual); [EOL] } <line_num>: 383,402
@Test [EOL] public void testIsInfinite() { [EOL]     Assert.assertFalse(MINUS_X.isInfinite()); [EOL]     Assert.assertFalse(PLUS_X.isInfinite()); [EOL]     Assert.assertFalse(MINUS_Y.isInfinite()); [EOL]     Assert.assertFalse(PLUS_Y.isInfinite()); [EOL]     Assert.assertFalse(Decimal64.NAN.isInfinite()); [EOL]     Assert.assertTrue(Decimal64.NEGATIVE_INFINITY.isInfinite()); [EOL]     Assert.assertTrue(Decimal64.POSITIVE_INFINITY.isInfinite()); [EOL] } <line_num>: 404,414
@Test [EOL] public void testIsNaN() { [EOL]     Assert.assertFalse(MINUS_X.isNaN()); [EOL]     Assert.assertFalse(PLUS_X.isNaN()); [EOL]     Assert.assertFalse(MINUS_Y.isNaN()); [EOL]     Assert.assertFalse(PLUS_Y.isNaN()); [EOL]     Assert.assertFalse(Decimal64.NEGATIVE_INFINITY.isNaN()); [EOL]     Assert.assertFalse(Decimal64.POSITIVE_INFINITY.isNaN()); [EOL]     Assert.assertTrue(Decimal64.NAN.isNaN()); [EOL] } <line_num>: 416,426
