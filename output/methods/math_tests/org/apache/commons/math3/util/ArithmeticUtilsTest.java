@Test [EOL] public void testAddAndCheck() { [EOL]     int big = Integer.MAX_VALUE; [EOL]     int bigNeg = Integer.MIN_VALUE; [EOL]     Assert.assertEquals(big, ArithmeticUtils.addAndCheck(big, 0)); [EOL]     try { [EOL]         ArithmeticUtils.addAndCheck(big, 1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.addAndCheck(bigNeg, -1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 36,51
@Test [EOL] public void testAddAndCheckLong() { [EOL]     long max = Long.MAX_VALUE; [EOL]     long min = Long.MIN_VALUE; [EOL]     Assert.assertEquals(max, ArithmeticUtils.addAndCheck(max, 0L)); [EOL]     Assert.assertEquals(min, ArithmeticUtils.addAndCheck(min, 0L)); [EOL]     Assert.assertEquals(max, ArithmeticUtils.addAndCheck(0L, max)); [EOL]     Assert.assertEquals(min, ArithmeticUtils.addAndCheck(0L, min)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.addAndCheck(-1L, 2L)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.addAndCheck(2L, -1L)); [EOL]     Assert.assertEquals(-3, ArithmeticUtils.addAndCheck(-2L, -1L)); [EOL]     Assert.assertEquals(min, ArithmeticUtils.addAndCheck(min + 1, -1L)); [EOL]     testAddAndCheckLongFailure(max, 1L); [EOL]     testAddAndCheckLongFailure(min, -1L); [EOL]     testAddAndCheckLongFailure(1L, max); [EOL]     testAddAndCheckLongFailure(-1L, min); [EOL] } <line_num>: 53,69
@Test [EOL] public void testGcd() { [EOL]     int a = 30; [EOL]     int b = 50; [EOL]     int c = 77; [EOL]     Assert.assertEquals(0, ArithmeticUtils.gcd(0, 0)); [EOL]     Assert.assertEquals(b, ArithmeticUtils.gcd(0, b)); [EOL]     Assert.assertEquals(a, ArithmeticUtils.gcd(a, 0)); [EOL]     Assert.assertEquals(b, ArithmeticUtils.gcd(0, -b)); [EOL]     Assert.assertEquals(a, ArithmeticUtils.gcd(-a, 0)); [EOL]     Assert.assertEquals(10, ArithmeticUtils.gcd(a, b)); [EOL]     Assert.assertEquals(10, ArithmeticUtils.gcd(-a, b)); [EOL]     Assert.assertEquals(10, ArithmeticUtils.gcd(a, -b)); [EOL]     Assert.assertEquals(10, ArithmeticUtils.gcd(-a, -b)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(a, c)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(-a, c)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(a, -c)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(-a, -c)); [EOL]     Assert.assertEquals(3 * (1 << 15), ArithmeticUtils.gcd(3 * (1 << 20), 9 * (1 << 15))); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, ArithmeticUtils.gcd(Integer.MAX_VALUE, 0)); [EOL]     Assert.assertEquals(Integer.MAX_VALUE, ArithmeticUtils.gcd(-Integer.MAX_VALUE, 0)); [EOL]     Assert.assertEquals(1 << 30, ArithmeticUtils.gcd(1 << 30, -Integer.MIN_VALUE)); [EOL]     try { [EOL]         ArithmeticUtils.gcd(Integer.MIN_VALUE, 0); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.gcd(0, Integer.MIN_VALUE); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL] } <line_num>: 71,120
@Test [EOL] public void testGcdConsistency() { [EOL]     int[] primeList = { 19, 23, 53, 67, 73, 79, 101, 103, 111, 131 }; [EOL]     ArrayList<Integer> primes = new ArrayList<Integer>(); [EOL]     for (int i = 0; i < primeList.length; i++) { [EOL]         primes.add(Integer.valueOf(primeList[i])); [EOL]     } [EOL]     RandomDataGenerator randomData = new RandomDataGenerator(); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         Object[] sample = randomData.nextSample(primes, 4); [EOL]         int p1 = ((Integer) sample[0]).intValue(); [EOL]         int p2 = ((Integer) sample[1]).intValue(); [EOL]         int p3 = ((Integer) sample[2]).intValue(); [EOL]         int p4 = ((Integer) sample[3]).intValue(); [EOL]         int i1 = p1 * p2 * p3; [EOL]         int i2 = p1 * p2 * p4; [EOL]         int gcd = p1 * p2; [EOL]         Assert.assertEquals(gcd, ArithmeticUtils.gcd(i1, i2)); [EOL]         long l1 = i1; [EOL]         long l2 = i2; [EOL]         Assert.assertEquals(gcd, ArithmeticUtils.gcd(l1, l2)); [EOL]     } [EOL] } <line_num>: 122,144
@Test [EOL] public void testGcdLong() { [EOL]     long a = 30; [EOL]     long b = 50; [EOL]     long c = 77; [EOL]     Assert.assertEquals(0, ArithmeticUtils.gcd(0L, 0)); [EOL]     Assert.assertEquals(b, ArithmeticUtils.gcd(0, b)); [EOL]     Assert.assertEquals(a, ArithmeticUtils.gcd(a, 0)); [EOL]     Assert.assertEquals(b, ArithmeticUtils.gcd(0, -b)); [EOL]     Assert.assertEquals(a, ArithmeticUtils.gcd(-a, 0)); [EOL]     Assert.assertEquals(10, ArithmeticUtils.gcd(a, b)); [EOL]     Assert.assertEquals(10, ArithmeticUtils.gcd(-a, b)); [EOL]     Assert.assertEquals(10, ArithmeticUtils.gcd(a, -b)); [EOL]     Assert.assertEquals(10, ArithmeticUtils.gcd(-a, -b)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(a, c)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(-a, c)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(a, -c)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(-a, -c)); [EOL]     Assert.assertEquals(3L * (1L << 45), ArithmeticUtils.gcd(3L * (1L << 50), 9L * (1L << 45))); [EOL]     Assert.assertEquals(1L << 45, ArithmeticUtils.gcd(1L << 45, Long.MIN_VALUE)); [EOL]     Assert.assertEquals(Long.MAX_VALUE, ArithmeticUtils.gcd(Long.MAX_VALUE, 0L)); [EOL]     Assert.assertEquals(Long.MAX_VALUE, ArithmeticUtils.gcd(-Long.MAX_VALUE, 0L)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.gcd(60247241209L, 153092023L)); [EOL]     try { [EOL]         ArithmeticUtils.gcd(Long.MIN_VALUE, 0); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.gcd(0, Long.MIN_VALUE); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.gcd(Long.MIN_VALUE, Long.MIN_VALUE); [EOL]         Assert.fail("expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL] } <line_num>: 146,197
@Test [EOL] public void testLcm() { [EOL]     int a = 30; [EOL]     int b = 50; [EOL]     int c = 77; [EOL]     Assert.assertEquals(0, ArithmeticUtils.lcm(0, b)); [EOL]     Assert.assertEquals(0, ArithmeticUtils.lcm(a, 0)); [EOL]     Assert.assertEquals(b, ArithmeticUtils.lcm(1, b)); [EOL]     Assert.assertEquals(a, ArithmeticUtils.lcm(a, 1)); [EOL]     Assert.assertEquals(150, ArithmeticUtils.lcm(a, b)); [EOL]     Assert.assertEquals(150, ArithmeticUtils.lcm(-a, b)); [EOL]     Assert.assertEquals(150, ArithmeticUtils.lcm(a, -b)); [EOL]     Assert.assertEquals(150, ArithmeticUtils.lcm(-a, -b)); [EOL]     Assert.assertEquals(2310, ArithmeticUtils.lcm(a, c)); [EOL]     Assert.assertEquals((1 << 20) * 15, ArithmeticUtils.lcm((1 << 20) * 3, (1 << 20) * 5)); [EOL]     Assert.assertEquals(0, ArithmeticUtils.lcm(0, 0)); [EOL]     try { [EOL]         ArithmeticUtils.lcm(Integer.MIN_VALUE, 1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.lcm(Integer.MIN_VALUE, 1 << 20); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL] } <line_num>: 200,245
@Test [EOL] public void testLcmLong() { [EOL]     long a = 30; [EOL]     long b = 50; [EOL]     long c = 77; [EOL]     Assert.assertEquals(0, ArithmeticUtils.lcm(0, b)); [EOL]     Assert.assertEquals(0, ArithmeticUtils.lcm(a, 0)); [EOL]     Assert.assertEquals(b, ArithmeticUtils.lcm(1, b)); [EOL]     Assert.assertEquals(a, ArithmeticUtils.lcm(a, 1)); [EOL]     Assert.assertEquals(150, ArithmeticUtils.lcm(a, b)); [EOL]     Assert.assertEquals(150, ArithmeticUtils.lcm(-a, b)); [EOL]     Assert.assertEquals(150, ArithmeticUtils.lcm(a, -b)); [EOL]     Assert.assertEquals(150, ArithmeticUtils.lcm(-a, -b)); [EOL]     Assert.assertEquals(2310, ArithmeticUtils.lcm(a, c)); [EOL]     Assert.assertEquals(Long.MAX_VALUE, ArithmeticUtils.lcm(60247241209L, 153092023L)); [EOL]     Assert.assertEquals((1L << 50) * 15, ArithmeticUtils.lcm((1L << 45) * 3, (1L << 50) * 5)); [EOL]     Assert.assertEquals(0L, ArithmeticUtils.lcm(0L, 0L)); [EOL]     try { [EOL]         ArithmeticUtils.lcm(Long.MIN_VALUE, 1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.lcm(Long.MIN_VALUE, 1 << 20); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL]     Assert.assertEquals((long) Integer.MAX_VALUE * (Integer.MAX_VALUE - 1), ArithmeticUtils.lcm((long) Integer.MAX_VALUE, Integer.MAX_VALUE - 1)); [EOL]     try { [EOL]         ArithmeticUtils.lcm(Long.MAX_VALUE, Long.MAX_VALUE - 1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException expected) { [EOL]     } [EOL] } <line_num>: 247,296
@Test [EOL] public void testMulAndCheck() { [EOL]     int big = Integer.MAX_VALUE; [EOL]     int bigNeg = Integer.MIN_VALUE; [EOL]     Assert.assertEquals(big, ArithmeticUtils.mulAndCheck(big, 1)); [EOL]     try { [EOL]         ArithmeticUtils.mulAndCheck(big, 2); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.mulAndCheck(bigNeg, 2); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 298,313
@Test [EOL] public void testMulAndCheckLong() { [EOL]     long max = Long.MAX_VALUE; [EOL]     long min = Long.MIN_VALUE; [EOL]     Assert.assertEquals(max, ArithmeticUtils.mulAndCheck(max, 1L)); [EOL]     Assert.assertEquals(min, ArithmeticUtils.mulAndCheck(min, 1L)); [EOL]     Assert.assertEquals(0L, ArithmeticUtils.mulAndCheck(max, 0L)); [EOL]     Assert.assertEquals(0L, ArithmeticUtils.mulAndCheck(min, 0L)); [EOL]     Assert.assertEquals(max, ArithmeticUtils.mulAndCheck(1L, max)); [EOL]     Assert.assertEquals(min, ArithmeticUtils.mulAndCheck(1L, min)); [EOL]     Assert.assertEquals(0L, ArithmeticUtils.mulAndCheck(0L, max)); [EOL]     Assert.assertEquals(0L, ArithmeticUtils.mulAndCheck(0L, min)); [EOL]     Assert.assertEquals(1L, ArithmeticUtils.mulAndCheck(-1L, -1L)); [EOL]     Assert.assertEquals(min, ArithmeticUtils.mulAndCheck(min / 2, 2)); [EOL]     testMulAndCheckLongFailure(max, 2L); [EOL]     testMulAndCheckLongFailure(2L, max); [EOL]     testMulAndCheckLongFailure(min, 2L); [EOL]     testMulAndCheckLongFailure(2L, min); [EOL]     testMulAndCheckLongFailure(min, -1L); [EOL]     testMulAndCheckLongFailure(-1L, min); [EOL] } <line_num>: 315,335
@Test [EOL] public void testSubAndCheck() { [EOL]     int big = Integer.MAX_VALUE; [EOL]     int bigNeg = Integer.MIN_VALUE; [EOL]     Assert.assertEquals(big, ArithmeticUtils.subAndCheck(big, 0)); [EOL]     Assert.assertEquals(bigNeg + 1, ArithmeticUtils.subAndCheck(bigNeg, -1)); [EOL]     Assert.assertEquals(-1, ArithmeticUtils.subAndCheck(bigNeg, -big)); [EOL]     try { [EOL]         ArithmeticUtils.subAndCheck(big, -1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         ArithmeticUtils.subAndCheck(bigNeg, 1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 337,354
@Test [EOL] public void testSubAndCheckErrorMessage() { [EOL]     int big = Integer.MAX_VALUE; [EOL]     try { [EOL]         ArithmeticUtils.subAndCheck(big, -1); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]         Assert.assertTrue(ex.getMessage().length() > 1); [EOL]     } [EOL] } <line_num>: 356,365
@Test [EOL] public void testSubAndCheckLong() { [EOL]     long max = Long.MAX_VALUE; [EOL]     long min = Long.MIN_VALUE; [EOL]     Assert.assertEquals(max, ArithmeticUtils.subAndCheck(max, 0)); [EOL]     Assert.assertEquals(min, ArithmeticUtils.subAndCheck(min, 0)); [EOL]     Assert.assertEquals(-max, ArithmeticUtils.subAndCheck(0, max)); [EOL]     Assert.assertEquals(min + 1, ArithmeticUtils.subAndCheck(min, -1)); [EOL]     Assert.assertEquals(-1, ArithmeticUtils.subAndCheck(-max - 1, -max)); [EOL]     Assert.assertEquals(max, ArithmeticUtils.subAndCheck(-1, -1 - max)); [EOL]     testSubAndCheckLongFailure(0L, min); [EOL]     testSubAndCheckLongFailure(max, -1L); [EOL]     testSubAndCheckLongFailure(min, 1L); [EOL] } <line_num>: 367,381
@Test [EOL] public void testPow() { [EOL]     Assert.assertEquals(1801088541, ArithmeticUtils.pow(21, 7)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.pow(21, 0)); [EOL]     try { [EOL]         ArithmeticUtils.pow(21, -7); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     Assert.assertEquals(1801088541, ArithmeticUtils.pow(21, 7l)); [EOL]     Assert.assertEquals(1, ArithmeticUtils.pow(21, 0l)); [EOL]     try { [EOL]         ArithmeticUtils.pow(21, -7l); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     Assert.assertEquals(1801088541l, ArithmeticUtils.pow(21l, 7)); [EOL]     Assert.assertEquals(1l, ArithmeticUtils.pow(21l, 0)); [EOL]     try { [EOL]         ArithmeticUtils.pow(21l, -7); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     Assert.assertEquals(1801088541l, ArithmeticUtils.pow(21l, 7l)); [EOL]     Assert.assertEquals(1l, ArithmeticUtils.pow(21l, 0l)); [EOL]     try { [EOL]         ArithmeticUtils.pow(21l, -7l); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     BigInteger twentyOne = BigInteger.valueOf(21l); [EOL]     Assert.assertEquals(BigInteger.valueOf(1801088541l), ArithmeticUtils.pow(twentyOne, 7)); [EOL]     Assert.assertEquals(BigInteger.ONE, ArithmeticUtils.pow(twentyOne, 0)); [EOL]     try { [EOL]         ArithmeticUtils.pow(twentyOne, -7); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     Assert.assertEquals(BigInteger.valueOf(1801088541l), ArithmeticUtils.pow(twentyOne, 7l)); [EOL]     Assert.assertEquals(BigInteger.ONE, ArithmeticUtils.pow(twentyOne, 0l)); [EOL]     try { [EOL]         ArithmeticUtils.pow(twentyOne, -7l); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     Assert.assertEquals(BigInteger.valueOf(1801088541l), ArithmeticUtils.pow(twentyOne, BigInteger.valueOf(7l))); [EOL]     Assert.assertEquals(BigInteger.ONE, ArithmeticUtils.pow(twentyOne, BigInteger.ZERO)); [EOL]     try { [EOL]         ArithmeticUtils.pow(twentyOne, BigInteger.valueOf(-7l)); [EOL]         Assert.fail("Expecting MathIllegalArgumentException"); [EOL]     } catch (MathIllegalArgumentException e) { [EOL]     } [EOL]     BigInteger bigOne = new BigInteger("1543786922199448028351389769265814882661837148" + "4763915343722775611762713982220306372888519211" + "560905579993523402015636025177602059044911261"); [EOL]     Assert.assertEquals(bigOne, ArithmeticUtils.pow(twentyOne, 103)); [EOL]     Assert.assertEquals(bigOne, ArithmeticUtils.pow(twentyOne, 103l)); [EOL]     Assert.assertEquals(bigOne, ArithmeticUtils.pow(twentyOne, BigInteger.valueOf(103l))); [EOL] } <line_num>: 383,458
@Test [EOL] public void testIsPowerOfTwo() { [EOL]     final int n = 1025; [EOL]     final boolean[] expected = new boolean[n]; [EOL]     Arrays.fill(expected, false); [EOL]     for (int i = 1; i < expected.length; i *= 2) { [EOL]         expected[i] = true; [EOL]     } [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         final boolean actual = ArithmeticUtils.isPowerOfTwo(i); [EOL]         Assert.assertTrue(Integer.toString(i), actual == expected[i]); [EOL]     } [EOL] } <line_num>: 460,472
private void testAddAndCheckLongFailure(long a, long b) { [EOL]     try { [EOL]         ArithmeticUtils.addAndCheck(a, b); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 474,481
private void testMulAndCheckLongFailure(long a, long b) { [EOL]     try { [EOL]         ArithmeticUtils.mulAndCheck(a, b); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 483,490
private void testSubAndCheckLongFailure(long a, long b) { [EOL]     try { [EOL]         ArithmeticUtils.subAndCheck(a, b); [EOL]         Assert.fail("Expecting MathArithmeticException"); [EOL]     } catch (MathArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 492,499
