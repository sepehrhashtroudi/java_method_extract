@Test(expected = NumberIsTooSmallException.class) [EOL] public void testInsufficientOrder3() { [EOL]     new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, 1); [EOL] } <line_num>: 34,38
@Test [EOL] public void testConstructorOK() { [EOL]     BracketingNthOrderBrentSolverDFP solver = new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, 2); [EOL]     Assert.assertEquals(2, solver.getMaximalOrder()); [EOL] } <line_num>: 40,46
public Dfp value(Dfp x) { [EOL]     Dfp one = field.getOne(); [EOL]     Dfp oneHalf = one.divide(2); [EOL]     Dfp xMo = x.subtract(one); [EOL]     Dfp xMh = x.subtract(oneHalf); [EOL]     Dfp xPh = x.add(oneHalf); [EOL]     Dfp xPo = x.add(one); [EOL]     return xMo.multiply(xMh).multiply(x).multiply(xPh).multiply(xPo); [EOL] } <line_num>: 54,62
@Test [EOL] public void testConvergenceOnFunctionAccuracy() { [EOL]     BracketingNthOrderBrentSolverDFP solver = new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy, field.newDfp(1.0e-20), 20); [EOL]     UnivariateDfpFunction f = new UnivariateDfpFunction() { [EOL]  [EOL]         public Dfp value(Dfp x) { [EOL]             Dfp one = field.getOne(); [EOL]             Dfp oneHalf = one.divide(2); [EOL]             Dfp xMo = x.subtract(one); [EOL]             Dfp xMh = x.subtract(oneHalf); [EOL]             Dfp xPh = x.add(oneHalf); [EOL]             Dfp xPo = x.add(one); [EOL]             return xMo.multiply(xMh).multiply(x).multiply(xPh).multiply(xPo); [EOL]         } [EOL]     }; [EOL]     Dfp result = solver.solve(20, f, field.newDfp(0.2), field.newDfp(0.9), field.newDfp(0.4), AllowedSolution.BELOW_SIDE); [EOL]     Assert.assertTrue(f.value(result).abs().lessThan(solver.getFunctionValueAccuracy())); [EOL]     Assert.assertTrue(f.value(result).negativeOrNull()); [EOL]     Assert.assertTrue(result.subtract(field.newDfp(0.5)).subtract(solver.getAbsoluteAccuracy()).positiveOrNull()); [EOL]     result = solver.solve(20, f, field.newDfp(-0.9), field.newDfp(-0.2), field.newDfp(-0.4), AllowedSolution.ABOVE_SIDE); [EOL]     Assert.assertTrue(f.value(result).abs().lessThan(solver.getFunctionValueAccuracy())); [EOL]     Assert.assertTrue(f.value(result).positiveOrNull()); [EOL]     Assert.assertTrue(result.add(field.newDfp(0.5)).subtract(solver.getAbsoluteAccuracy()).negativeOrNull()); [EOL] } <line_num>: 48,75
public Dfp value(Dfp x) { [EOL]     return DfpMath.sin(x).subtract(x.divide(2)); [EOL] } <line_num>: 86,88
public Dfp value(Dfp x) { [EOL]     return DfpMath.pow(x, 5).add(x).subtract(field.newDfp(10000)); [EOL] } <line_num>: 92,94
public Dfp value(Dfp x) { [EOL]     return x.sqrt().subtract(field.getOne().divide(x)).subtract(field.newDfp(3)); [EOL] } <line_num>: 98,100
public Dfp value(Dfp x) { [EOL]     return DfpMath.exp(x).add(x).subtract(field.newDfp(20)); [EOL] } <line_num>: 104,106
public Dfp value(Dfp x) { [EOL]     return DfpMath.log(x).add(x.sqrt()).subtract(field.newDfp(5)); [EOL] } <line_num>: 110,112
public Dfp value(Dfp x) { [EOL]     return x.subtract(field.getOne()).multiply(x).multiply(x).subtract(field.getOne()); [EOL] } <line_num>: 116,118
@Test [EOL] public void testNeta() { [EOL]     for (AllowedSolution allowed : AllowedSolution.values()) { [EOL]         check(new UnivariateDfpFunction() { [EOL]  [EOL]             public Dfp value(Dfp x) { [EOL]                 return DfpMath.sin(x).subtract(x.divide(2)); [EOL]             } [EOL]         }, 200, -2.0, 2.0, allowed); [EOL]         check(new UnivariateDfpFunction() { [EOL]  [EOL]             public Dfp value(Dfp x) { [EOL]                 return DfpMath.pow(x, 5).add(x).subtract(field.newDfp(10000)); [EOL]             } [EOL]         }, 200, -5.0, 10.0, allowed); [EOL]         check(new UnivariateDfpFunction() { [EOL]  [EOL]             public Dfp value(Dfp x) { [EOL]                 return x.sqrt().subtract(field.getOne().divide(x)).subtract(field.newDfp(3)); [EOL]             } [EOL]         }, 200, 0.001, 10.0, allowed); [EOL]         check(new UnivariateDfpFunction() { [EOL]  [EOL]             public Dfp value(Dfp x) { [EOL]                 return DfpMath.exp(x).add(x).subtract(field.newDfp(20)); [EOL]             } [EOL]         }, 200, -5.0, 5.0, allowed); [EOL]         check(new UnivariateDfpFunction() { [EOL]  [EOL]             public Dfp value(Dfp x) { [EOL]                 return DfpMath.log(x).add(x.sqrt()).subtract(field.newDfp(5)); [EOL]             } [EOL]         }, 200, 0.001, 10.0, allowed); [EOL]         check(new UnivariateDfpFunction() { [EOL]  [EOL]             public Dfp value(Dfp x) { [EOL]                 return x.subtract(field.getOne()).multiply(x).multiply(x).subtract(field.getOne()); [EOL]             } [EOL]         }, 200, -0.5, 1.5, allowed); [EOL]     } [EOL] } <line_num>: 77,122
private void check(UnivariateDfpFunction f, int maxEval, double min, double max, AllowedSolution allowedSolution) { [EOL]     BracketingNthOrderBrentSolverDFP solver = new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, 20); [EOL]     Dfp xResult = solver.solve(maxEval, f, field.newDfp(min), field.newDfp(max), allowedSolution); [EOL]     Dfp yResult = f.value(xResult); [EOL]     switch(allowedSolution) { [EOL]         case ANY_SIDE: [EOL]             Assert.assertTrue(yResult.abs().lessThan(functionValueAccuracy.multiply(2))); [EOL]             break; [EOL]         case LEFT_SIDE: [EOL]             { [EOL]                 boolean increasing = f.value(xResult).add(absoluteAccuracy).greaterThan(yResult); [EOL]                 Assert.assertTrue(increasing ? yResult.negativeOrNull() : yResult.positiveOrNull()); [EOL]                 break; [EOL]             } [EOL]         case RIGHT_SIDE: [EOL]             { [EOL]                 boolean increasing = f.value(xResult).add(absoluteAccuracy).greaterThan(yResult); [EOL]                 Assert.assertTrue(increasing ? yResult.positiveOrNull() : yResult.negativeOrNull()); [EOL]                 break; [EOL]             } [EOL]         case BELOW_SIDE: [EOL]             Assert.assertTrue(yResult.negativeOrNull()); [EOL]             break; [EOL]         case ABOVE_SIDE: [EOL]             Assert.assertTrue(yResult.positiveOrNull()); [EOL]             break; [EOL]         default: [EOL]             throw new MathInternalError(null); [EOL]     } [EOL] } <line_num>: 124,156
@Before [EOL] public void setUp() { [EOL]     field = new DfpField(50); [EOL]     absoluteAccuracy = field.newDfp(1.0e-45); [EOL]     relativeAccuracy = field.newDfp(1.0e-45); [EOL]     functionValueAccuracy = field.newDfp(1.0e-45); [EOL] } <line_num>: 158,164
