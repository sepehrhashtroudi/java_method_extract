@Override [EOL] protected Dfp build(final double x) { [EOL]     return field.newDfp(x); [EOL] } <line_num>: 30,33
@Before [EOL] public void setUp() { [EOL]     field = new DfpField(20); [EOL]     pinf = field.newDfp("1").divide(field.newDfp("0")); [EOL]     ninf = field.newDfp("-1").divide(field.newDfp("0")); [EOL]     nan = field.newDfp("0").divide(field.newDfp("0")); [EOL]     snan = field.newDfp((byte) 1, Dfp.SNAN); [EOL]     qnan = field.newDfp((byte) 1, Dfp.QNAN); [EOL]     ninf.getField().clearIEEEFlags(); [EOL] } <line_num>: 42,52
@After [EOL] public void tearDown() { [EOL]     field = null; [EOL]     pinf = null; [EOL]     ninf = null; [EOL]     nan = null; [EOL]     snan = null; [EOL]     qnan = null; [EOL] } <line_num>: 54,62
private void test(Dfp x, Dfp y, int flags, String desc) { [EOL]     boolean b = x.equals(y); [EOL]     if (!x.equals(y) && !x.unequal(y)) [EOL]         b = (x.toString().equals(y.toString())); [EOL]     if (x.equals(field.newDfp("0"))) [EOL]         b = (b && (x.toString().equals(y.toString()))); [EOL]     b = (b && x.getField().getIEEEFlags() == flags); [EOL]     if (!b) [EOL]         Assert.assertTrue("assersion failed " + desc + " x = " + x.toString() + " flags = " + x.getField().getIEEEFlags(), b); [EOL]     x.getField().clearIEEEFlags(); [EOL] } <line_num>: 67,83
@Test [EOL] public void testByteConstructor() { [EOL]     Assert.assertEquals("0.", new Dfp(field, (byte) 0).toString()); [EOL]     Assert.assertEquals("1.", new Dfp(field, (byte) 1).toString()); [EOL]     Assert.assertEquals("-1.", new Dfp(field, (byte) -1).toString()); [EOL]     Assert.assertEquals("-128.", new Dfp(field, Byte.MIN_VALUE).toString()); [EOL]     Assert.assertEquals("127.", new Dfp(field, Byte.MAX_VALUE).toString()); [EOL] } <line_num>: 85,92
@Test [EOL] public void testIntConstructor() { [EOL]     Assert.assertEquals("0.", new Dfp(field, 0).toString()); [EOL]     Assert.assertEquals("1.", new Dfp(field, 1).toString()); [EOL]     Assert.assertEquals("-1.", new Dfp(field, -1).toString()); [EOL]     Assert.assertEquals("1234567890.", new Dfp(field, 1234567890).toString()); [EOL]     Assert.assertEquals("-1234567890.", new Dfp(field, -1234567890).toString()); [EOL]     Assert.assertEquals("-2147483648.", new Dfp(field, Integer.MIN_VALUE).toString()); [EOL]     Assert.assertEquals("2147483647.", new Dfp(field, Integer.MAX_VALUE).toString()); [EOL] } <line_num>: 94,103
@Test [EOL] public void testLongConstructor() { [EOL]     Assert.assertEquals("0.", new Dfp(field, 0l).toString()); [EOL]     Assert.assertEquals("1.", new Dfp(field, 1l).toString()); [EOL]     Assert.assertEquals("-1.", new Dfp(field, -1l).toString()); [EOL]     Assert.assertEquals("1234567890.", new Dfp(field, 1234567890l).toString()); [EOL]     Assert.assertEquals("-1234567890.", new Dfp(field, -1234567890l).toString()); [EOL]     Assert.assertEquals("-9223372036854775808.", new Dfp(field, Long.MIN_VALUE).toString()); [EOL]     Assert.assertEquals("9223372036854775807.", new Dfp(field, Long.MAX_VALUE).toString()); [EOL] } <line_num>: 105,114
@Test [EOL] public void testAdd() { [EOL]     test(field.newDfp("1").add(field.newDfp("1")), field.newDfp("2"), 0, "Add #1"); [EOL]     test(field.newDfp("1").add(field.newDfp("-1")), field.newDfp("0"), 0, "Add #2"); [EOL]     test(field.newDfp("-1").add(field.newDfp("1")), field.newDfp("0"), 0, "Add #3"); [EOL]     test(field.newDfp("-1").add(field.newDfp("-1")), field.newDfp("-2"), 0, "Add #4"); [EOL]     test(field.newDfp("1").add(field.newDfp("1e-16")), field.newDfp("1.0000000000000001"), 0, "Add #5"); [EOL]     test(field.newDfp("1").add(field.newDfp("1e-17")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Add #6"); [EOL]     test(field.newDfp("0.90999999999999999999").add(field.newDfp("0.1")), field.newDfp("1.01"), DfpField.FLAG_INEXACT, "Add #7"); [EOL]     test(field.newDfp(".10000000000000005000").add(field.newDfp(".9")), field.newDfp("1."), DfpField.FLAG_INEXACT, "Add #8"); [EOL]     test(field.newDfp(".10000000000000015000").add(field.newDfp(".9")), field.newDfp("1.0000000000000002"), DfpField.FLAG_INEXACT, "Add #9"); [EOL]     test(field.newDfp(".10000000000000014999").add(field.newDfp(".9")), field.newDfp("1.0000000000000001"), DfpField.FLAG_INEXACT, "Add #10"); [EOL]     test(field.newDfp(".10000000000000015001").add(field.newDfp(".9")), field.newDfp("1.0000000000000002"), DfpField.FLAG_INEXACT, "Add #11"); [EOL]     test(field.newDfp(".11111111111111111111").add(field.newDfp("11.1111111111111111")), field.newDfp("11.22222222222222222222"), DfpField.FLAG_INEXACT, "Add #12"); [EOL]     test(field.newDfp(".11111111111111111111").add(field.newDfp("1111111111111111.1111")), field.newDfp("1111111111111111.2222"), DfpField.FLAG_INEXACT, "Add #13"); [EOL]     test(field.newDfp(".11111111111111111111").add(field.newDfp("11111111111111111111")), field.newDfp("11111111111111111111"), DfpField.FLAG_INEXACT, "Add #14"); [EOL]     test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("-1e131052")), field.newDfp("9.9999999999999999998e131071"), 0, "Add #15"); [EOL]     test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("1e131052")), pinf, DfpField.FLAG_OVERFLOW, "Add #16"); [EOL]     test(field.newDfp("-9.9999999999999999999e131071").add(field.newDfp("-1e131052")), ninf, DfpField.FLAG_OVERFLOW, "Add #17"); [EOL]     test(field.newDfp("-9.9999999999999999999e131071").add(field.newDfp("1e131052")), field.newDfp("-9.9999999999999999998e131071"), 0, "Add #18"); [EOL]     test(field.newDfp("1e-131072").add(field.newDfp("1e-131072")), field.newDfp("2e-131072"), 0, "Add #19"); [EOL]     test(field.newDfp("1.0000000000000001e-131057").add(field.newDfp("-1e-131057")), field.newDfp("1e-131073"), DfpField.FLAG_UNDERFLOW, "Add #20"); [EOL]     test(field.newDfp("1.1e-131072").add(field.newDfp("-1e-131072")), field.newDfp("1e-131073"), DfpField.FLAG_UNDERFLOW, "Add #21"); [EOL]     test(field.newDfp("1.0000000000000001e-131072").add(field.newDfp("-1e-131072")), field.newDfp("1e-131088"), DfpField.FLAG_UNDERFLOW, "Add #22"); [EOL]     test(field.newDfp("1.0000000000000001e-131078").add(field.newDfp("-1e-131078")), field.newDfp("0"), DfpField.FLAG_UNDERFLOW, "Add #23"); [EOL]     test(field.newDfp("1.0").add(field.newDfp("-1e-20")), field.newDfp("0.99999999999999999999"), 0, "Add #23.1"); [EOL]     test(field.newDfp("-0.99999999999999999999").add(field.newDfp("1")), field.newDfp("0.00000000000000000001"), 0, "Add #23.2"); [EOL]     test(field.newDfp("1").add(field.newDfp("0")), field.newDfp("1"), 0, "Add #24"); [EOL]     test(field.newDfp("0").add(field.newDfp("0")), field.newDfp("0"), 0, "Add #25"); [EOL]     test(field.newDfp("-0").add(field.newDfp("0")), field.newDfp("0"), 0, "Add #26"); [EOL]     test(field.newDfp("0").add(field.newDfp("-0")), field.newDfp("0"), 0, "Add #27"); [EOL]     test(field.newDfp("-0").add(field.newDfp("-0")), field.newDfp("-0"), 0, "Add #28"); [EOL]     test(field.newDfp("1e-20").add(field.newDfp("0")), field.newDfp("1e-20"), 0, "Add #29"); [EOL]     test(field.newDfp("1e-40").add(field.newDfp("0")), field.newDfp("1e-40"), 0, "Add #30"); [EOL]     test(pinf.add(ninf), nan, DfpField.FLAG_INVALID, "Add #31"); [EOL]     test(ninf.add(pinf), nan, DfpField.FLAG_INVALID, "Add #32"); [EOL]     test(ninf.add(ninf), ninf, 0, "Add #33"); [EOL]     test(pinf.add(pinf), pinf, 0, "Add #34"); [EOL]     test(pinf.add(field.newDfp("0")), pinf, 0, "Add #35"); [EOL]     test(pinf.add(field.newDfp("-1e131071")), pinf, 0, "Add #36"); [EOL]     test(pinf.add(field.newDfp("1e131071")), pinf, 0, "Add #37"); [EOL]     test(field.newDfp("0").add(pinf), pinf, 0, "Add #38"); [EOL]     test(field.newDfp("-1e131071").add(pinf), pinf, 0, "Add #39"); [EOL]     test(field.newDfp("1e131071").add(pinf), pinf, 0, "Add #40"); [EOL]     test(ninf.add(field.newDfp("0")), ninf, 0, "Add #41"); [EOL]     test(ninf.add(field.newDfp("-1e131071")), ninf, 0, "Add #42"); [EOL]     test(ninf.add(field.newDfp("1e131071")), ninf, 0, "Add #43"); [EOL]     test(field.newDfp("0").add(ninf), ninf, 0, "Add #44"); [EOL]     test(field.newDfp("-1e131071").add(ninf), ninf, 0, "Add #45"); [EOL]     test(field.newDfp("1e131071").add(ninf), ninf, 0, "Add #46"); [EOL]     test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("5e131051")), pinf, DfpField.FLAG_OVERFLOW, "Add #47"); [EOL]     test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("4.9999999999999999999e131051")), field.newDfp("9.9999999999999999999e131071"), DfpField.FLAG_INEXACT, "Add #48"); [EOL]     test(nan.add(field.newDfp("1")), nan, 0, "Add #49"); [EOL]     test(field.newDfp("1").add(nan), nan, 0, "Add #50"); [EOL]     test(field.newDfp("12345678123456781234").add(field.newDfp("0.12345678123456781234")), field.newDfp("12345678123456781234"), DfpField.FLAG_INEXACT, "Add #51"); [EOL]     test(field.newDfp("12345678123456781234").add(field.newDfp("123.45678123456781234")), field.newDfp("12345678123456781357"), DfpField.FLAG_INEXACT, "Add #52"); [EOL]     test(field.newDfp("123.45678123456781234").add(field.newDfp("12345678123456781234")), field.newDfp("12345678123456781357"), DfpField.FLAG_INEXACT, "Add #53"); [EOL]     test(field.newDfp("12345678123456781234").add(field.newDfp(".00001234567812345678")), field.newDfp("12345678123456781234"), DfpField.FLAG_INEXACT, "Add #54"); [EOL]     test(field.newDfp("12345678123456781234").add(field.newDfp(".00000000123456781234")), field.newDfp("12345678123456781234"), DfpField.FLAG_INEXACT, "Add #55"); [EOL]     test(field.newDfp("-0").add(field.newDfp("-0")), field.newDfp("-0"), 0, "Add #56"); [EOL]     test(field.newDfp("0").add(field.newDfp("-0")), field.newDfp("0"), 0, "Add #57"); [EOL]     test(field.newDfp("-0").add(field.newDfp("0")), field.newDfp("0"), 0, "Add #58"); [EOL]     test(field.newDfp("0").add(field.newDfp("0")), field.newDfp("0"), 0, "Add #59"); [EOL] } <line_num>: 119,367
private void cmptst(Dfp a, Dfp b, String op, boolean result, double num) { [EOL]     if (op == "equal") [EOL]         if (a.equals(b) != result) [EOL]             Assert.fail("assersion failed.  " + op + " compare #" + num); [EOL]     if (op == "unequal") [EOL]         if (a.unequal(b) != result) [EOL]             Assert.fail("assersion failed.  " + op + " compare #" + num); [EOL]     if (op == "lessThan") [EOL]         if (a.lessThan(b) != result) [EOL]             Assert.fail("assersion failed.  " + op + " compare #" + num); [EOL]     if (op == "greaterThan") [EOL]         if (a.greaterThan(b) != result) [EOL]             Assert.fail("assersion failed.  " + op + " compare #" + num); [EOL] } <line_num>: 374,391
@Test [EOL] public void testCompare() { [EOL]     field.clearIEEEFlags(); [EOL]     cmptst(field.newDfp("0"), field.newDfp("0"), "equal", true, 1); [EOL]     cmptst(field.newDfp("0"), field.newDfp("-0"), "equal", true, 2); [EOL]     cmptst(field.newDfp("-0"), field.newDfp("-0"), "equal", true, 3); [EOL]     cmptst(field.newDfp("-0"), field.newDfp("0"), "equal", true, 4); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1"), "equal", false, 5); [EOL]     cmptst(field.newDfp("1"), field.newDfp("0"), "equal", false, 6); [EOL]     cmptst(field.newDfp("-1"), field.newDfp("0"), "equal", false, 7); [EOL]     cmptst(field.newDfp("0"), field.newDfp("-1"), "equal", false, 8); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "equal", false, 9); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "equal", false, 10); [EOL]     if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     field.clearIEEEFlags(); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "equal", false, 11); [EOL]     cmptst(field.newDfp("0"), pinf, "equal", false, 12); [EOL]     cmptst(field.newDfp("0"), ninf, "equal", false, 13); [EOL]     cmptst(field.newDfp("-0"), pinf, "equal", false, 14); [EOL]     cmptst(field.newDfp("-0"), ninf, "equal", false, 15); [EOL]     cmptst(pinf, field.newDfp("0"), "equal", false, 16); [EOL]     cmptst(ninf, field.newDfp("0"), "equal", false, 17); [EOL]     cmptst(pinf, field.newDfp("-0"), "equal", false, 18); [EOL]     cmptst(ninf, field.newDfp("-0"), "equal", false, 19); [EOL]     cmptst(ninf, pinf, "equal", false, 19.10); [EOL]     cmptst(pinf, ninf, "equal", false, 19.11); [EOL]     cmptst(pinf, pinf, "equal", true, 19.12); [EOL]     cmptst(ninf, ninf, "equal", true, 19.13); [EOL]     cmptst(field.newDfp("1"), field.newDfp("1"), "equal", true, 20); [EOL]     cmptst(field.newDfp("1"), field.newDfp("-1"), "equal", false, 21); [EOL]     cmptst(field.newDfp("-1"), field.newDfp("-1"), "equal", true, 22); [EOL]     cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "equal", false, 23); [EOL]     cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "equal", false, 24); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "equal", true, 25); [EOL]     cmptst(snan, snan, "equal", false, 27); [EOL]     cmptst(qnan, qnan, "equal", false, 28); [EOL]     cmptst(snan, qnan, "equal", false, 29); [EOL]     cmptst(qnan, snan, "equal", false, 30); [EOL]     cmptst(qnan, field.newDfp("0"), "equal", false, 31); [EOL]     cmptst(snan, field.newDfp("0"), "equal", false, 32); [EOL]     cmptst(field.newDfp("0"), snan, "equal", false, 33); [EOL]     cmptst(field.newDfp("0"), qnan, "equal", false, 34); [EOL]     cmptst(qnan, pinf, "equal", false, 35); [EOL]     cmptst(snan, pinf, "equal", false, 36); [EOL]     cmptst(pinf, snan, "equal", false, 37); [EOL]     cmptst(pinf, qnan, "equal", false, 38); [EOL]     cmptst(qnan, ninf, "equal", false, 39); [EOL]     cmptst(snan, ninf, "equal", false, 40); [EOL]     cmptst(ninf, snan, "equal", false, 41); [EOL]     cmptst(ninf, qnan, "equal", false, 42); [EOL]     cmptst(qnan, field.newDfp("-1"), "equal", false, 43); [EOL]     cmptst(snan, field.newDfp("-1"), "equal", false, 44); [EOL]     cmptst(field.newDfp("-1"), snan, "equal", false, 45); [EOL]     cmptst(field.newDfp("-1"), qnan, "equal", false, 46); [EOL]     cmptst(qnan, field.newDfp("1"), "equal", false, 47); [EOL]     cmptst(snan, field.newDfp("1"), "equal", false, 48); [EOL]     cmptst(field.newDfp("1"), snan, "equal", false, 49); [EOL]     cmptst(field.newDfp("1"), qnan, "equal", false, 50); [EOL]     cmptst(snan.negate(), snan, "equal", false, 51); [EOL]     cmptst(qnan.negate(), qnan, "equal", false, 52); [EOL]     cmptst(field.newDfp("0"), field.newDfp("0"), "unequal", false, 1); [EOL]     cmptst(field.newDfp("0"), field.newDfp("-0"), "unequal", false, 2); [EOL]     cmptst(field.newDfp("-0"), field.newDfp("-0"), "unequal", false, 3); [EOL]     cmptst(field.newDfp("-0"), field.newDfp("0"), "unequal", false, 4); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1"), "unequal", true, 5); [EOL]     cmptst(field.newDfp("1"), field.newDfp("0"), "unequal", true, 6); [EOL]     cmptst(field.newDfp("-1"), field.newDfp("0"), "unequal", true, 7); [EOL]     cmptst(field.newDfp("0"), field.newDfp("-1"), "unequal", true, 8); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "unequal", true, 9); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "unequal", true, 10); [EOL]     if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     field.clearIEEEFlags(); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "unequal", true, 11); [EOL]     cmptst(field.newDfp("0"), pinf, "unequal", true, 12); [EOL]     cmptst(field.newDfp("0"), ninf, "unequal", true, 13); [EOL]     cmptst(field.newDfp("-0"), pinf, "unequal", true, 14); [EOL]     cmptst(field.newDfp("-0"), ninf, "unequal", true, 15); [EOL]     cmptst(pinf, field.newDfp("0"), "unequal", true, 16); [EOL]     cmptst(ninf, field.newDfp("0"), "unequal", true, 17); [EOL]     cmptst(pinf, field.newDfp("-0"), "unequal", true, 18); [EOL]     cmptst(ninf, field.newDfp("-0"), "unequal", true, 19); [EOL]     cmptst(ninf, pinf, "unequal", true, 19.10); [EOL]     cmptst(pinf, ninf, "unequal", true, 19.11); [EOL]     cmptst(pinf, pinf, "unequal", false, 19.12); [EOL]     cmptst(ninf, ninf, "unequal", false, 19.13); [EOL]     cmptst(field.newDfp("1"), field.newDfp("1"), "unequal", false, 20); [EOL]     cmptst(field.newDfp("1"), field.newDfp("-1"), "unequal", true, 21); [EOL]     cmptst(field.newDfp("-1"), field.newDfp("-1"), "unequal", false, 22); [EOL]     cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "unequal", true, 23); [EOL]     cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "unequal", true, 24); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "unequal", false, 25); [EOL]     cmptst(snan, snan, "unequal", false, 27); [EOL]     cmptst(qnan, qnan, "unequal", false, 28); [EOL]     cmptst(snan, qnan, "unequal", false, 29); [EOL]     cmptst(qnan, snan, "unequal", false, 30); [EOL]     cmptst(qnan, field.newDfp("0"), "unequal", false, 31); [EOL]     cmptst(snan, field.newDfp("0"), "unequal", false, 32); [EOL]     cmptst(field.newDfp("0"), snan, "unequal", false, 33); [EOL]     cmptst(field.newDfp("0"), qnan, "unequal", false, 34); [EOL]     cmptst(qnan, pinf, "unequal", false, 35); [EOL]     cmptst(snan, pinf, "unequal", false, 36); [EOL]     cmptst(pinf, snan, "unequal", false, 37); [EOL]     cmptst(pinf, qnan, "unequal", false, 38); [EOL]     cmptst(qnan, ninf, "unequal", false, 39); [EOL]     cmptst(snan, ninf, "unequal", false, 40); [EOL]     cmptst(ninf, snan, "unequal", false, 41); [EOL]     cmptst(ninf, qnan, "unequal", false, 42); [EOL]     cmptst(qnan, field.newDfp("-1"), "unequal", false, 43); [EOL]     cmptst(snan, field.newDfp("-1"), "unequal", false, 44); [EOL]     cmptst(field.newDfp("-1"), snan, "unequal", false, 45); [EOL]     cmptst(field.newDfp("-1"), qnan, "unequal", false, 46); [EOL]     cmptst(qnan, field.newDfp("1"), "unequal", false, 47); [EOL]     cmptst(snan, field.newDfp("1"), "unequal", false, 48); [EOL]     cmptst(field.newDfp("1"), snan, "unequal", false, 49); [EOL]     cmptst(field.newDfp("1"), qnan, "unequal", false, 50); [EOL]     cmptst(snan.negate(), snan, "unequal", false, 51); [EOL]     cmptst(qnan.negate(), qnan, "unequal", false, 52); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare unequal flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0"), field.newDfp("0"), "lessThan", false, 1); [EOL]     cmptst(field.newDfp("0"), field.newDfp("-0"), "lessThan", false, 2); [EOL]     cmptst(field.newDfp("-0"), field.newDfp("-0"), "lessThan", false, 3); [EOL]     cmptst(field.newDfp("-0"), field.newDfp("0"), "lessThan", false, 4); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1"), "lessThan", true, 5); [EOL]     cmptst(field.newDfp("1"), field.newDfp("0"), "lessThan", false, 6); [EOL]     cmptst(field.newDfp("-1"), field.newDfp("0"), "lessThan", true, 7); [EOL]     cmptst(field.newDfp("0"), field.newDfp("-1"), "lessThan", false, 8); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "lessThan", true, 9); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "lessThan", true, 10); [EOL]     if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     field.clearIEEEFlags(); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "lessThan", true, 11); [EOL]     cmptst(field.newDfp("0"), pinf, "lessThan", true, 12); [EOL]     cmptst(field.newDfp("0"), ninf, "lessThan", false, 13); [EOL]     cmptst(field.newDfp("-0"), pinf, "lessThan", true, 14); [EOL]     cmptst(field.newDfp("-0"), ninf, "lessThan", false, 15); [EOL]     cmptst(pinf, field.newDfp("0"), "lessThan", false, 16); [EOL]     cmptst(ninf, field.newDfp("0"), "lessThan", true, 17); [EOL]     cmptst(pinf, field.newDfp("-0"), "lessThan", false, 18); [EOL]     cmptst(ninf, field.newDfp("-0"), "lessThan", true, 19); [EOL]     cmptst(ninf, pinf, "lessThan", true, 19.10); [EOL]     cmptst(pinf, ninf, "lessThan", false, 19.11); [EOL]     cmptst(pinf, pinf, "lessThan", false, 19.12); [EOL]     cmptst(ninf, ninf, "lessThan", false, 19.13); [EOL]     cmptst(field.newDfp("1"), field.newDfp("1"), "lessThan", false, 20); [EOL]     cmptst(field.newDfp("1"), field.newDfp("-1"), "lessThan", false, 21); [EOL]     cmptst(field.newDfp("-1"), field.newDfp("-1"), "lessThan", false, 22); [EOL]     cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "lessThan", true, 23); [EOL]     cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "lessThan", false, 24); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "lessThan", false, 25); [EOL]     cmptst(snan, snan, "lessThan", false, 27); [EOL]     cmptst(qnan, qnan, "lessThan", false, 28); [EOL]     cmptst(snan, qnan, "lessThan", false, 29); [EOL]     cmptst(qnan, snan, "lessThan", false, 30); [EOL]     cmptst(qnan, field.newDfp("0"), "lessThan", false, 31); [EOL]     cmptst(snan, field.newDfp("0"), "lessThan", false, 32); [EOL]     cmptst(field.newDfp("0"), snan, "lessThan", false, 33); [EOL]     cmptst(field.newDfp("0"), qnan, "lessThan", false, 34); [EOL]     cmptst(qnan, pinf, "lessThan", false, 35); [EOL]     cmptst(snan, pinf, "lessThan", false, 36); [EOL]     cmptst(pinf, snan, "lessThan", false, 37); [EOL]     cmptst(pinf, qnan, "lessThan", false, 38); [EOL]     cmptst(qnan, ninf, "lessThan", false, 39); [EOL]     cmptst(snan, ninf, "lessThan", false, 40); [EOL]     cmptst(ninf, snan, "lessThan", false, 41); [EOL]     cmptst(ninf, qnan, "lessThan", false, 42); [EOL]     cmptst(qnan, field.newDfp("-1"), "lessThan", false, 43); [EOL]     cmptst(snan, field.newDfp("-1"), "lessThan", false, 44); [EOL]     cmptst(field.newDfp("-1"), snan, "lessThan", false, 45); [EOL]     cmptst(field.newDfp("-1"), qnan, "lessThan", false, 46); [EOL]     cmptst(qnan, field.newDfp("1"), "lessThan", false, 47); [EOL]     cmptst(snan, field.newDfp("1"), "lessThan", false, 48); [EOL]     cmptst(field.newDfp("1"), snan, "lessThan", false, 49); [EOL]     cmptst(field.newDfp("1"), qnan, "lessThan", false, 50); [EOL]     cmptst(snan.negate(), snan, "lessThan", false, 51); [EOL]     cmptst(qnan.negate(), qnan, "lessThan", false, 52); [EOL]     if (field.getIEEEFlags() != DfpField.FLAG_INVALID) [EOL]         Assert.fail("assersion failed.  compare lessThan flags = " + field.getIEEEFlags()); [EOL]     field.clearIEEEFlags(); [EOL]     cmptst(field.newDfp("0"), field.newDfp("0"), "greaterThan", false, 1); [EOL]     cmptst(field.newDfp("0"), field.newDfp("-0"), "greaterThan", false, 2); [EOL]     cmptst(field.newDfp("-0"), field.newDfp("-0"), "greaterThan", false, 3); [EOL]     cmptst(field.newDfp("-0"), field.newDfp("0"), "greaterThan", false, 4); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1"), "greaterThan", false, 5); [EOL]     cmptst(field.newDfp("1"), field.newDfp("0"), "greaterThan", true, 6); [EOL]     cmptst(field.newDfp("-1"), field.newDfp("0"), "greaterThan", false, 7); [EOL]     cmptst(field.newDfp("0"), field.newDfp("-1"), "greaterThan", true, 8); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "greaterThan", false, 9); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "greaterThan", false, 10); [EOL]     if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     field.clearIEEEFlags(); [EOL]     cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "greaterThan", false, 11); [EOL]     cmptst(field.newDfp("0"), pinf, "greaterThan", false, 12); [EOL]     cmptst(field.newDfp("0"), ninf, "greaterThan", true, 13); [EOL]     cmptst(field.newDfp("-0"), pinf, "greaterThan", false, 14); [EOL]     cmptst(field.newDfp("-0"), ninf, "greaterThan", true, 15); [EOL]     cmptst(pinf, field.newDfp("0"), "greaterThan", true, 16); [EOL]     cmptst(ninf, field.newDfp("0"), "greaterThan", false, 17); [EOL]     cmptst(pinf, field.newDfp("-0"), "greaterThan", true, 18); [EOL]     cmptst(ninf, field.newDfp("-0"), "greaterThan", false, 19); [EOL]     cmptst(ninf, pinf, "greaterThan", false, 19.10); [EOL]     cmptst(pinf, ninf, "greaterThan", true, 19.11); [EOL]     cmptst(pinf, pinf, "greaterThan", false, 19.12); [EOL]     cmptst(ninf, ninf, "greaterThan", false, 19.13); [EOL]     cmptst(field.newDfp("1"), field.newDfp("1"), "greaterThan", false, 20); [EOL]     cmptst(field.newDfp("1"), field.newDfp("-1"), "greaterThan", true, 21); [EOL]     cmptst(field.newDfp("-1"), field.newDfp("-1"), "greaterThan", false, 22); [EOL]     cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "greaterThan", false, 23); [EOL]     cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "greaterThan", true, 24); [EOL]     if (field.getIEEEFlags() != 0) [EOL]         Assert.fail("assersion failed.  compare flags = " + field.getIEEEFlags()); [EOL]     cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "greaterThan", false, 25); [EOL]     cmptst(snan, snan, "greaterThan", false, 27); [EOL]     cmptst(qnan, qnan, "greaterThan", false, 28); [EOL]     cmptst(snan, qnan, "greaterThan", false, 29); [EOL]     cmptst(qnan, snan, "greaterThan", false, 30); [EOL]     cmptst(qnan, field.newDfp("0"), "greaterThan", false, 31); [EOL]     cmptst(snan, field.newDfp("0"), "greaterThan", false, 32); [EOL]     cmptst(field.newDfp("0"), snan, "greaterThan", false, 33); [EOL]     cmptst(field.newDfp("0"), qnan, "greaterThan", false, 34); [EOL]     cmptst(qnan, pinf, "greaterThan", false, 35); [EOL]     cmptst(snan, pinf, "greaterThan", false, 36); [EOL]     cmptst(pinf, snan, "greaterThan", false, 37); [EOL]     cmptst(pinf, qnan, "greaterThan", false, 38); [EOL]     cmptst(qnan, ninf, "greaterThan", false, 39); [EOL]     cmptst(snan, ninf, "greaterThan", false, 40); [EOL]     cmptst(ninf, snan, "greaterThan", false, 41); [EOL]     cmptst(ninf, qnan, "greaterThan", false, 42); [EOL]     cmptst(qnan, field.newDfp("-1"), "greaterThan", false, 43); [EOL]     cmptst(snan, field.newDfp("-1"), "greaterThan", false, 44); [EOL]     cmptst(field.newDfp("-1"), snan, "greaterThan", false, 45); [EOL]     cmptst(field.newDfp("-1"), qnan, "greaterThan", false, 46); [EOL]     cmptst(qnan, field.newDfp("1"), "greaterThan", false, 47); [EOL]     cmptst(snan, field.newDfp("1"), "greaterThan", false, 48); [EOL]     cmptst(field.newDfp("1"), snan, "greaterThan", false, 49); [EOL]     cmptst(field.newDfp("1"), qnan, "greaterThan", false, 50); [EOL]     cmptst(snan.negate(), snan, "greaterThan", false, 51); [EOL]     cmptst(qnan.negate(), qnan, "greaterThan", false, 52); [EOL]     if (field.getIEEEFlags() != DfpField.FLAG_INVALID) [EOL]         Assert.fail("assersion failed.  compare greaterThan flags = " + field.getIEEEFlags()); [EOL]     field.clearIEEEFlags(); [EOL] } <line_num>: 393,756
@Test [EOL] public void testMultiply() { [EOL]     test(field.newDfp("1").multiply(field.newDfp("1")), field.newDfp("1"), 0, "Multiply #1"); [EOL]     test(field.newDfp("1").multiply(1), field.newDfp("1"), 0, "Multiply #2"); [EOL]     test(field.newDfp("-1").multiply(field.newDfp("1")), field.newDfp("-1"), 0, "Multiply #3"); [EOL]     test(field.newDfp("-1").multiply(1), field.newDfp("-1"), 0, "Multiply #4"); [EOL]     test(field.newDfp("2").multiply(field.newDfp("3")), field.newDfp("6"), 0, "Multiply #5"); [EOL]     test(field.newDfp("2").multiply(3), field.newDfp("6"), 0, "Multiply #6"); [EOL]     test(field.newDfp("-2").multiply(field.newDfp("3")), field.newDfp("-6"), 0, "Multiply #7"); [EOL]     test(field.newDfp("-2").multiply(3), field.newDfp("-6"), 0, "Multiply #8"); [EOL]     test(field.newDfp("2").multiply(field.newDfp("-3")), field.newDfp("-6"), 0, "Multiply #9"); [EOL]     test(field.newDfp("-2").multiply(field.newDfp("-3")), field.newDfp("6"), 0, "Multiply #10"); [EOL]     test(field.newDfp("-2").multiply(field.newDfp("0")), field.newDfp("-0"), 0, "Multiply #11"); [EOL]     test(field.newDfp("-2").multiply(0), field.newDfp("-0"), 0, "Multiply #12"); [EOL]     test(field.newDfp("2").multiply(field.newDfp("0")), field.newDfp("0"), 0, "Multiply #13"); [EOL]     test(field.newDfp("2").multiply(0), field.newDfp("0"), 0, "Multiply #14"); [EOL]     test(field.newDfp("2").multiply(pinf), pinf, 0, "Multiply #15"); [EOL]     test(field.newDfp("2").multiply(ninf), ninf, 0, "Multiply #16"); [EOL]     test(field.newDfp("-2").multiply(pinf), ninf, 0, "Multiply #17"); [EOL]     test(field.newDfp("-2").multiply(ninf), pinf, 0, "Multiply #18"); [EOL]     test(ninf.multiply(field.newDfp("-2")), pinf, 0, "Multiply #18.1"); [EOL]     test(field.newDfp("5e131071").multiply(2), pinf, DfpField.FLAG_OVERFLOW, "Multiply #19"); [EOL]     test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("9.9999999999999950000e131071"), 0, "Multiply #20"); [EOL]     test(field.newDfp("-5e131071").multiply(2), ninf, DfpField.FLAG_OVERFLOW, "Multiply #22"); [EOL]     test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("-9.9999999999999950000e131071"), 0, "Multiply #23"); [EOL]     test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Multiply #24"); [EOL]     test(field.newDfp("1").multiply(nan), nan, 0, "Multiply #25"); [EOL]     test(nan.multiply(field.newDfp("1")), nan, 0, "Multiply #26"); [EOL]     test(nan.multiply(pinf), nan, 0, "Multiply #27"); [EOL]     test(pinf.multiply(nan), nan, 0, "Multiply #27"); [EOL]     test(pinf.multiply(field.newDfp("0")), nan, DfpField.FLAG_INVALID, "Multiply #28"); [EOL]     test(field.newDfp("0").multiply(pinf), nan, DfpField.FLAG_INVALID, "Multiply #29"); [EOL]     test(pinf.multiply(pinf), pinf, 0, "Multiply #30"); [EOL]     test(ninf.multiply(pinf), ninf, 0, "Multiply #31"); [EOL]     test(pinf.multiply(ninf), ninf, 0, "Multiply #32"); [EOL]     test(ninf.multiply(ninf), pinf, 0, "Multiply #33"); [EOL]     test(pinf.multiply(1), pinf, 0, "Multiply #34"); [EOL]     test(pinf.multiply(0), nan, DfpField.FLAG_INVALID, "Multiply #35"); [EOL]     test(nan.multiply(1), nan, 0, "Multiply #36"); [EOL]     test(field.newDfp("1").multiply(10000), field.newDfp("10000"), 0, "Multiply #37"); [EOL]     test(field.newDfp("2").multiply(1000000), field.newDfp("2000000"), 0, "Multiply #38"); [EOL]     test(field.newDfp("1").multiply(-1), field.newDfp("-1"), 0, "Multiply #39"); [EOL] } <line_num>: 761,926
@Test [EOL] public void testDivide() { [EOL]     test(field.newDfp("1").divide(nan), nan, 0, "Divide #1"); [EOL]     test(nan.divide(field.newDfp("1")), nan, 0, "Divide #2"); [EOL]     test(pinf.divide(field.newDfp("1")), pinf, 0, "Divide #3"); [EOL]     test(pinf.divide(field.newDfp("-1")), ninf, 0, "Divide #4"); [EOL]     test(pinf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #5"); [EOL]     test(ninf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #6"); [EOL]     test(pinf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #7"); [EOL]     test(ninf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #8"); [EOL]     test(field.newDfp("0").divide(field.newDfp("0")), nan, DfpField.FLAG_DIV_ZERO, "Divide #9"); [EOL]     test(field.newDfp("1").divide(field.newDfp("0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #10"); [EOL]     test(field.newDfp("1").divide(field.newDfp("-0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #11"); [EOL]     test(field.newDfp("-1").divide(field.newDfp("0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #12"); [EOL]     test(field.newDfp("-1").divide(field.newDfp("-0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #13"); [EOL]     test(field.newDfp("1").divide(field.newDfp("3")), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Divide #14"); [EOL]     test(field.newDfp("1").divide(field.newDfp("6")), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Divide #15"); [EOL]     test(field.newDfp("10").divide(field.newDfp("6")), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #16"); [EOL]     test(field.newDfp("100").divide(field.newDfp("6")), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #17"); [EOL]     test(field.newDfp("1000").divide(field.newDfp("6")), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #18"); [EOL]     test(field.newDfp("10000").divide(field.newDfp("6")), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #19"); [EOL]     test(field.newDfp("1").divide(field.newDfp("1")), field.newDfp("1"), 0, "Divide #20"); [EOL]     test(field.newDfp("1").divide(field.newDfp("-1")), field.newDfp("-1"), 0, "Divide #21"); [EOL]     test(field.newDfp("-1").divide(field.newDfp("1")), field.newDfp("-1"), 0, "Divide #22"); [EOL]     test(field.newDfp("-1").divide(field.newDfp("-1")), field.newDfp("1"), 0, "Divide #23"); [EOL]     test(field.newDfp("1e-65539").divide(field.newDfp("1e65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Divide #24"); [EOL]     test(field.newDfp("1e65539").divide(field.newDfp("1e-65539")), pinf, DfpField.FLAG_OVERFLOW, "Divide #24"); [EOL]     test(field.newDfp("2").divide(field.newDfp("1.5")), field.newDfp("1.3333333333333333"), DfpField.FLAG_INEXACT, "Divide #25"); [EOL]     test(field.newDfp("2").divide(pinf), field.newDfp("0"), 0, "Divide #26"); [EOL]     test(field.newDfp("2").divide(ninf), field.newDfp("-0"), 0, "Divide #27"); [EOL]     test(field.newDfp("0").divide(field.newDfp("1")), field.newDfp("0"), 0, "Divide #28"); [EOL] } <line_num>: 928,1046
@Test [EOL] public void testReciprocal() { [EOL]     test(nan.reciprocal(), nan, 0, "Reciprocal #1"); [EOL]     test(field.newDfp("0").reciprocal(), pinf, DfpField.FLAG_DIV_ZERO, "Reciprocal #2"); [EOL]     test(field.newDfp("-0").reciprocal(), ninf, DfpField.FLAG_DIV_ZERO, "Reciprocal #3"); [EOL]     test(field.newDfp("3").reciprocal(), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Reciprocal #4"); [EOL]     test(field.newDfp("6").reciprocal(), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Reciprocal #5"); [EOL]     test(field.newDfp("1").reciprocal(), field.newDfp("1"), 0, "Reciprocal #6"); [EOL]     test(field.newDfp("-1").reciprocal(), field.newDfp("-1"), 0, "Reciprocal #7"); [EOL]     test(pinf.reciprocal(), field.newDfp("0"), 0, "Reciprocal #8"); [EOL]     test(ninf.reciprocal(), field.newDfp("-0"), 0, "Reciprocal #9"); [EOL] } <line_num>: 1048,1086
@Test [EOL] public void testDivideInt() { [EOL]     test(nan.divide(1), nan, 0, "DivideInt #1"); [EOL]     test(pinf.divide(1), pinf, 0, "DivideInt #2"); [EOL]     test(field.newDfp("0").divide(0), nan, DfpField.FLAG_DIV_ZERO, "DivideInt #3"); [EOL]     test(field.newDfp("1").divide(0), pinf, DfpField.FLAG_DIV_ZERO, "DivideInt #4"); [EOL]     test(field.newDfp("-1").divide(0), ninf, DfpField.FLAG_DIV_ZERO, "DivideInt #5"); [EOL]     test(field.newDfp("1").divide(3), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "DivideInt #6"); [EOL]     test(field.newDfp("1").divide(6), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #7"); [EOL]     test(field.newDfp("10").divide(6), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #8"); [EOL]     test(field.newDfp("100").divide(6), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #9"); [EOL]     test(field.newDfp("1000").divide(6), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #10"); [EOL]     test(field.newDfp("10000").divide(6), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #20"); [EOL]     test(field.newDfp("1").divide(1), field.newDfp("1"), 0, "DivideInt #21"); [EOL]     test(field.newDfp("1e-131077").divide(10), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "DivideInt #22"); [EOL]     test(field.newDfp("0").divide(1), field.newDfp("0"), 0, "DivideInt #23"); [EOL]     test(field.newDfp("1").divide(10000), nan, DfpField.FLAG_INVALID, "DivideInt #24"); [EOL]     test(field.newDfp("1").divide(-1), nan, DfpField.FLAG_INVALID, "DivideInt #25"); [EOL] } <line_num>: 1088,1154
@Test [EOL] public void testNextAfter() { [EOL]     test(field.newDfp("1").nextAfter(pinf), field.newDfp("1.0000000000000001"), 0, "NextAfter #1"); [EOL]     test(field.newDfp("1.0000000000000001").nextAfter(ninf), field.newDfp("1"), 0, "NextAfter #1.5"); [EOL]     test(field.newDfp("1").nextAfter(ninf), field.newDfp("0.99999999999999999999"), 0, "NextAfter #2"); [EOL]     test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")), field.newDfp("1"), 0, "NextAfter #3"); [EOL]     test(field.newDfp("-1").nextAfter(ninf), field.newDfp("-1.0000000000000001"), 0, "NextAfter #4"); [EOL]     test(field.newDfp("-1").nextAfter(pinf), field.newDfp("-0.99999999999999999999"), 0, "NextAfter #5"); [EOL]     test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")), field.newDfp("-1"), 0, "NextAfter #6"); [EOL]     test(field.newDfp("2").nextAfter(field.newDfp("2")), field.newDfp("2"), 0, "NextAfter #7"); [EOL]     test(field.newDfp("0").nextAfter(field.newDfp("0")), field.newDfp("0"), 0, "NextAfter #8"); [EOL]     test(field.newDfp("-2").nextAfter(field.newDfp("-2")), field.newDfp("-2"), 0, "NextAfter #9"); [EOL]     test(field.newDfp("0").nextAfter(field.newDfp("1")), field.newDfp("1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); [EOL]     test(field.newDfp("0").nextAfter(field.newDfp("-1")), field.newDfp("-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); [EOL]     test(field.newDfp("-1e-131092").nextAfter(pinf), field.newDfp("-0"), DfpField.FLAG_UNDERFLOW | DfpField.FLAG_INEXACT, "Next After #12"); [EOL]     test(field.newDfp("1e-131092").nextAfter(ninf), field.newDfp("0"), DfpField.FLAG_UNDERFLOW | DfpField.FLAG_INEXACT, "Next After #13"); [EOL]     test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW | DfpField.FLAG_INEXACT, "Next After #14"); [EOL] } <line_num>: 1156,1218
@Test [EOL] public void testToString() { [EOL]     Assert.assertEquals("toString #1", "Infinity", pinf.toString()); [EOL]     Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); [EOL]     Assert.assertEquals("toString #3", "NaN", nan.toString()); [EOL]     Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); [EOL]     Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); [EOL]     Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); [EOL]     Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); [EOL]     Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); [EOL]     Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); [EOL] } <line_num>: 1220,1232
@Override [EOL] @Test [EOL] public void testRound() { [EOL]     field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); [EOL]     field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); [EOL]     field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); [EOL]     field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); [EOL]     field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); [EOL]     test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); [EOL]     test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); [EOL]     field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); [EOL]     field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); [EOL]     test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); [EOL]     test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); [EOL]     field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); [EOL] } <line_num>: 1234,1352
@Override [EOL] @Test [EOL] public void testCeil() { [EOL]     test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); [EOL] } <line_num>: 1354,1361
@Override [EOL] @Test [EOL] public void testFloor() { [EOL]     test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); [EOL] } <line_num>: 1363,1370
@Override [EOL] @Test [EOL] public void testRint() { [EOL]     test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); [EOL]     test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); [EOL]     test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); [EOL] } <line_num>: 1372,1387
@Test [EOL] public void testCopySign() { [EOL]     test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); [EOL]     test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); [EOL]     test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); [EOL]     test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); [EOL] } <line_num>: 1389,1407
@Test [EOL] public void testIntValue() { [EOL]     Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); [EOL]     Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); [EOL]     Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); [EOL]     Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); [EOL]     Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); [EOL]     Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); [EOL] } <line_num>: 1409,1418
@Test [EOL] public void testLog10K() { [EOL]     Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); [EOL]     Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); [EOL]     Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); [EOL]     Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); [EOL]     Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); [EOL] } <line_num>: 1420,1428
@Test [EOL] public void testPower10K() { [EOL]     Dfp d = field.newDfp(); [EOL]     test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); [EOL]     test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); [EOL]     test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); [EOL]     test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); [EOL]     test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); [EOL]     test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); [EOL] } <line_num>: 1430,1442
@Test [EOL] public void testLog10() { [EOL]     Assert.assertEquals("log10 #1", 1, field.newDfp("12").intLog10()); [EOL]     Assert.assertEquals("log10 #2", 2, field.newDfp("123").intLog10()); [EOL]     Assert.assertEquals("log10 #3", 3, field.newDfp("1234").intLog10()); [EOL]     Assert.assertEquals("log10 #4", 4, field.newDfp("12345").intLog10()); [EOL]     Assert.assertEquals("log10 #5", 5, field.newDfp("123456").intLog10()); [EOL]     Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").intLog10()); [EOL]     Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").intLog10()); [EOL]     Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").intLog10()); [EOL]     Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").intLog10()); [EOL]     Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").intLog10()); [EOL]     Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").intLog10()); [EOL]     Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").intLog10()); [EOL]     Assert.assertEquals("log10 #12", 0, field.newDfp("2").intLog10()); [EOL]     Assert.assertEquals("log10 #13", 0, field.newDfp("1").intLog10()); [EOL]     Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").intLog10()); [EOL]     Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").intLog10()); [EOL] } <line_num>: 1444,1465
@Test [EOL] public void testPower10() { [EOL]     Dfp d = field.newDfp(); [EOL]     test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); [EOL]     test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); [EOL]     test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); [EOL]     test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); [EOL]     test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); [EOL]     test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); [EOL]     test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); [EOL]     test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); [EOL]     test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); [EOL]     test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); [EOL]     test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); [EOL]     test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); [EOL]     test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); [EOL]     test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); [EOL]     test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); [EOL]     test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); [EOL]     test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); [EOL]     test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); [EOL]     test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); [EOL]     test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); [EOL] } <line_num>: 1467,1493
@Test [EOL] public void testRemainder() { [EOL]     test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); [EOL]     test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); [EOL]     test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); [EOL] } <line_num>: 1495,1509
@Override [EOL] @Test [EOL] public void testSqrt() { [EOL]     test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); [EOL]     test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); [EOL]     test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); [EOL]     test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); [EOL]     test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); [EOL]     test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); [EOL]     test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); [EOL]     test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); [EOL]     test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); [EOL]     test(pinf.sqrt(), pinf, 0, "Sqrt #8"); [EOL]     test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); [EOL]     test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); [EOL] } <line_num>: 1511,1562
@Test [EOL] public void testIssue567() { [EOL]     DfpField field = new DfpField(100); [EOL]     Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); [EOL]     Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); [EOL]     Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); [EOL]     Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); [EOL] } <line_num>: 1564,1571
@Test [EOL] public void testIsZero() { [EOL]     Assert.assertTrue(field.getZero().isZero()); [EOL]     Assert.assertTrue(field.getZero().negate().isZero()); [EOL]     Assert.assertTrue(field.newDfp(+0.0).isZero()); [EOL]     Assert.assertTrue(field.newDfp(-0.0).isZero()); [EOL]     Assert.assertFalse(field.newDfp(1.0e-90).isZero()); [EOL]     Assert.assertFalse(nan.isZero()); [EOL]     Assert.assertFalse(nan.negate().isZero()); [EOL]     Assert.assertFalse(pinf.isZero()); [EOL]     Assert.assertFalse(pinf.negate().isZero()); [EOL]     Assert.assertFalse(ninf.isZero()); [EOL]     Assert.assertFalse(ninf.negate().isZero()); [EOL] } <line_num>: 1573,1586
@Test [EOL] public void testSignPredicates() { [EOL]     Assert.assertTrue(field.getZero().negativeOrNull()); [EOL]     Assert.assertTrue(field.getZero().positiveOrNull()); [EOL]     Assert.assertFalse(field.getZero().strictlyNegative()); [EOL]     Assert.assertFalse(field.getZero().strictlyPositive()); [EOL]     Assert.assertTrue(field.getZero().negate().negativeOrNull()); [EOL]     Assert.assertTrue(field.getZero().negate().positiveOrNull()); [EOL]     Assert.assertFalse(field.getZero().negate().strictlyNegative()); [EOL]     Assert.assertFalse(field.getZero().negate().strictlyPositive()); [EOL]     Assert.assertFalse(field.getOne().negativeOrNull()); [EOL]     Assert.assertTrue(field.getOne().positiveOrNull()); [EOL]     Assert.assertFalse(field.getOne().strictlyNegative()); [EOL]     Assert.assertTrue(field.getOne().strictlyPositive()); [EOL]     Assert.assertTrue(field.getOne().negate().negativeOrNull()); [EOL]     Assert.assertFalse(field.getOne().negate().positiveOrNull()); [EOL]     Assert.assertTrue(field.getOne().negate().strictlyNegative()); [EOL]     Assert.assertFalse(field.getOne().negate().strictlyPositive()); [EOL]     Assert.assertFalse(nan.negativeOrNull()); [EOL]     Assert.assertFalse(nan.positiveOrNull()); [EOL]     Assert.assertFalse(nan.strictlyNegative()); [EOL]     Assert.assertFalse(nan.strictlyPositive()); [EOL]     Assert.assertFalse(nan.negate().negativeOrNull()); [EOL]     Assert.assertFalse(nan.negate().positiveOrNull()); [EOL]     Assert.assertFalse(nan.negate().strictlyNegative()); [EOL]     Assert.assertFalse(nan.negate().strictlyPositive()); [EOL]     Assert.assertFalse(pinf.negativeOrNull()); [EOL]     Assert.assertTrue(pinf.positiveOrNull()); [EOL]     Assert.assertFalse(pinf.strictlyNegative()); [EOL]     Assert.assertTrue(pinf.strictlyPositive()); [EOL]     Assert.assertTrue(pinf.negate().negativeOrNull()); [EOL]     Assert.assertFalse(pinf.negate().positiveOrNull()); [EOL]     Assert.assertTrue(pinf.negate().strictlyNegative()); [EOL]     Assert.assertFalse(pinf.negate().strictlyPositive()); [EOL]     Assert.assertTrue(ninf.negativeOrNull()); [EOL]     Assert.assertFalse(ninf.positiveOrNull()); [EOL]     Assert.assertTrue(ninf.strictlyNegative()); [EOL]     Assert.assertFalse(ninf.strictlyPositive()); [EOL]     Assert.assertFalse(ninf.negate().negativeOrNull()); [EOL]     Assert.assertTrue(ninf.negate().positiveOrNull()); [EOL]     Assert.assertFalse(ninf.negate().strictlyNegative()); [EOL]     Assert.assertTrue(ninf.negate().strictlyPositive()); [EOL] } <line_num>: 1588,1641
@Test [EOL] public void testSpecialConstructors() { [EOL]     Assert.assertEquals(ninf, field.newDfp(Double.NEGATIVE_INFINITY)); [EOL]     Assert.assertEquals(ninf, field.newDfp("-Infinity")); [EOL]     Assert.assertEquals(pinf, field.newDfp(Double.POSITIVE_INFINITY)); [EOL]     Assert.assertEquals(pinf, field.newDfp("Infinity")); [EOL]     Assert.assertTrue(field.newDfp(Double.NaN).isNaN()); [EOL]     Assert.assertTrue(field.newDfp("NaN").isNaN()); [EOL] } <line_num>: 1643,1651
