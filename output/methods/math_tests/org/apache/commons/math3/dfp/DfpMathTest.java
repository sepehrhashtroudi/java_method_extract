@Before [EOL] public void setUp() { [EOL]     factory = new DfpField(20); [EOL]     pinf = factory.newDfp("1").divide(factory.newDfp("0")); [EOL]     ninf = factory.newDfp("-1").divide(factory.newDfp("0")); [EOL]     nan = factory.newDfp("0").divide(factory.newDfp("0")); [EOL]     qnan = factory.newDfp((byte) 1, Dfp.QNAN); [EOL]     ninf.getField().clearIEEEFlags(); [EOL]     Dfp pi = factory.getPi(); [EOL]     pi.getField().clearIEEEFlags(); [EOL] } <line_num>: 33,46
@After [EOL] public void tearDown() { [EOL]     pinf = null; [EOL]     ninf = null; [EOL]     nan = null; [EOL]     qnan = null; [EOL] } <line_num>: 48,54
private void test(Dfp x, Dfp y, int flags, String desc) { [EOL]     boolean b = x.equals(y); [EOL]     if (!x.equals(y) && !x.unequal(y)) [EOL]         b = (x.toString().equals(y.toString())); [EOL]     if (x.equals(factory.newDfp("0"))) [EOL]         b = (b && (x.toString().equals(y.toString()))); [EOL]     b = (b && x.getField().getIEEEFlags() == flags); [EOL]     if (!b) [EOL]         Assert.assertTrue("assersion failed " + desc + " x = " + x.toString() + " flags = " + x.getField().getIEEEFlags(), b); [EOL]     x.getField().clearIEEEFlags(); [EOL] } <line_num>: 59,75
@Test [EOL] public void testPow() { [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("0")), factory.newDfp("1"), 0, "pow #1"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-0")), factory.newDfp("1"), 0, "pow #2"); [EOL]     test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("0")), factory.newDfp("1"), 0, "pow #3"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-0")), factory.newDfp("1"), 0, "pow #4"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("-0")), factory.newDfp("1"), 0, "pow #5"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("0")), factory.newDfp("1"), 0, "pow #6"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("-0")), factory.newDfp("1"), 0, "pow #7"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("0")), factory.newDfp("1"), 0, "pow #8"); [EOL]     test(DfpMath.pow(qnan, factory.newDfp("0")), factory.newDfp("1"), 0, "pow #8"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1")), factory.newDfp("0"), 0, "pow #9"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1")), factory.newDfp("-0"), 0, "pow #10"); [EOL]     test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("1")), factory.newDfp("2"), 0, "pow #11"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("1")), factory.newDfp("-2"), 0, "pow #12"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("1")), pinf, 0, "pow #13"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("1")), ninf, 0, "pow #14"); [EOL]     test(DfpMath.pow(qnan, factory.newDfp("1")), qnan, DfpField.FLAG_INVALID, "pow #14.1"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), qnan), qnan, DfpField.FLAG_INVALID, "pow #15"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), qnan), qnan, DfpField.FLAG_INVALID, "pow #16"); [EOL]     test(DfpMath.pow(factory.newDfp("2"), qnan), qnan, DfpField.FLAG_INVALID, "pow #17"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), qnan), qnan, DfpField.FLAG_INVALID, "pow #18"); [EOL]     test(DfpMath.pow(pinf, qnan), qnan, DfpField.FLAG_INVALID, "pow #19"); [EOL]     test(DfpMath.pow(ninf, qnan), qnan, DfpField.FLAG_INVALID, "pow #20"); [EOL]     test(DfpMath.pow(qnan, qnan), qnan, DfpField.FLAG_INVALID, "pow #21"); [EOL]     test(DfpMath.pow(qnan, factory.newDfp("1")), qnan, DfpField.FLAG_INVALID, "pow #22"); [EOL]     test(DfpMath.pow(qnan, factory.newDfp("-1")), qnan, DfpField.FLAG_INVALID, "pow #23"); [EOL]     test(DfpMath.pow(qnan, pinf), qnan, DfpField.FLAG_INVALID, "pow #24"); [EOL]     test(DfpMath.pow(qnan, ninf), qnan, DfpField.FLAG_INVALID, "pow #25"); [EOL]     test(DfpMath.pow(qnan, qnan), qnan, DfpField.FLAG_INVALID, "pow #26"); [EOL]     test(DfpMath.pow(factory.newDfp("2"), pinf), pinf, 0, "pow #27"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), pinf), pinf, 0, "pow #28"); [EOL]     test(DfpMath.pow(pinf, pinf), pinf, 0, "pow #29"); [EOL]     test(DfpMath.pow(ninf, pinf), pinf, 0, "pow #30"); [EOL]     test(DfpMath.pow(factory.newDfp("2"), ninf), factory.getZero(), 0, "pow #31"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), ninf), factory.getZero(), 0, "pow #32"); [EOL]     test(DfpMath.pow(pinf, ninf), factory.getZero(), 0, "pow #33"); [EOL]     test(DfpMath.pow(ninf, ninf), factory.getZero(), 0, "pow #34"); [EOL]     test(DfpMath.pow(factory.newDfp("0.5"), pinf), factory.getZero(), 0, "pow #35"); [EOL]     test(DfpMath.pow(factory.newDfp("-0.5"), pinf), factory.getZero(), 0, "pow #36"); [EOL]     test(DfpMath.pow(factory.newDfp("0.5"), ninf), pinf, 0, "pow #37"); [EOL]     test(DfpMath.pow(factory.newDfp("-0.5"), ninf), pinf, 0, "pow #38"); [EOL]     test(DfpMath.pow(factory.getOne(), pinf), qnan, DfpField.FLAG_INVALID, "pow #39"); [EOL]     test(DfpMath.pow(factory.getOne(), ninf), qnan, DfpField.FLAG_INVALID, "pow #40"); [EOL]     test(DfpMath.pow(factory.newDfp("-1"), pinf), qnan, DfpField.FLAG_INVALID, "pow #41"); [EOL]     test(DfpMath.pow(factory.getOne().negate(), ninf), qnan, DfpField.FLAG_INVALID, "pow #42"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1")), factory.newDfp("0"), 0, "pow #43"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1e30")), factory.newDfp("0"), 0, "pow #44"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1e-30")), factory.newDfp("0"), 0, "pow #45"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), pinf), factory.newDfp("0"), 0, "pow #46"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("2")), factory.newDfp("0"), 0, "pow #47"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1e30")), factory.newDfp("0"), 0, "pow #48"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1e-30")), factory.newDfp("0"), DfpField.FLAG_INEXACT, "pow #49"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), pinf), factory.newDfp("0"), 0, "pow #50"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1")), pinf, 0, "pow #51"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1e30")), pinf, 0, "pow #52"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1e-30")), pinf, 0, "pow #53"); [EOL]     test(DfpMath.pow(factory.newDfp("0"), ninf), pinf, 0, "pow #54"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-2")), pinf, 0, "pow #55"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1e30")), pinf, 0, "pow #56"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1e-30")), pinf, DfpField.FLAG_INEXACT, "pow #57"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), ninf), pinf, 0, "pow #58"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1")), ninf, DfpField.FLAG_INEXACT, "pow #59"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-12345")), ninf, DfpField.FLAG_INEXACT, "pow #60"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("3")), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "pow #61"); [EOL]     test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("12345")), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "pow #62"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("3")), pinf, 0, "pow #63"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("1e30")), pinf, 0, "pow #64"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("1e-30")), pinf, 0, "pow #65"); [EOL]     test(DfpMath.pow(pinf, pinf), pinf, 0, "pow #66"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("-3")), factory.getZero(), 0, "pow #67"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("-1e30")), factory.getZero(), 0, "pow #68"); [EOL]     test(DfpMath.pow(pinf, factory.newDfp("-1e-30")), factory.getZero(), 0, "pow #69"); [EOL]     test(DfpMath.pow(pinf, ninf), factory.getZero(), 0, "pow #70"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("-2")), factory.newDfp("0"), 0, "pow #71"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("-1e30")), factory.newDfp("0"), 0, "pow #72"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("-1e-30")), factory.newDfp("0"), DfpField.FLAG_INEXACT, "pow #73"); [EOL]     test(DfpMath.pow(ninf, ninf), factory.newDfp("0"), 0, "pow #74"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("2")), pinf, 0, "pow #75"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("1e30")), pinf, 0, "pow #76"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("1e-30")), pinf, DfpField.FLAG_INEXACT, "pow #77"); [EOL]     test(DfpMath.pow(ninf, pinf), pinf, 0, "pow #78"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("3")), ninf, DfpField.FLAG_INEXACT, "pow #79"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("12345")), ninf, DfpField.FLAG_INEXACT, "pow #80"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("-3")), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "pow #81"); [EOL]     test(DfpMath.pow(ninf, factory.newDfp("-12345")), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "pow #82"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("3")), factory.newDfp("-8"), DfpField.FLAG_INEXACT, "pow #83"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("16")), factory.newDfp("65536"), 0, "pow #84"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-3")), factory.newDfp("-0.125"), DfpField.FLAG_INEXACT, "pow #85"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-4")), factory.newDfp("0.0625"), 0, "pow #86"); [EOL]     test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-4.1")), qnan, DfpField.FLAG_INVALID | DfpField.FLAG_INEXACT, "pow #87"); [EOL]     test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("1.5")), factory.newDfp("2.8284271247461901"), DfpField.FLAG_INEXACT, "pow #88"); [EOL] } <line_num>: 77,472
@Test [EOL] public void testSin() { [EOL]     test(DfpMath.sin(pinf), nan, DfpField.FLAG_INVALID | DfpField.FLAG_INEXACT, "sin #1"); [EOL]     test(DfpMath.sin(nan), nan, DfpField.FLAG_INVALID | DfpField.FLAG_INEXACT, "sin #2"); [EOL]     test(DfpMath.sin(factory.getZero()), factory.getZero(), DfpField.FLAG_INEXACT, "sin #3"); [EOL]     test(DfpMath.sin(factory.getPi()), factory.getZero(), DfpField.FLAG_INEXACT, "sin #4"); [EOL]     test(DfpMath.sin(factory.getPi().negate()), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "sin #5"); [EOL]     test(DfpMath.sin(factory.getPi().multiply(2)), factory.getZero(), DfpField.FLAG_INEXACT, "sin #6"); [EOL]     test(DfpMath.sin(factory.getPi().divide(2)), factory.getOne(), DfpField.FLAG_INEXACT, "sin #7"); [EOL]     test(DfpMath.sin(factory.getPi().divide(2).negate()), factory.getOne().negate(), DfpField.FLAG_INEXACT, "sin #8"); [EOL]     test(DfpMath.sin(DfpMath.atan(factory.getOne())), factory.newDfp("0.5").sqrt(), DfpField.FLAG_INEXACT, "sin #9"); [EOL]     test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(), factory.newDfp("0.5").sqrt().negate(), DfpField.FLAG_INEXACT, "sin #10"); [EOL]     test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(), factory.newDfp("0.5").sqrt().negate(), DfpField.FLAG_INEXACT, "sin #11"); [EOL]     test(DfpMath.sin(factory.newDfp("0.1")), factory.newDfp("0.0998334166468281523"), DfpField.FLAG_INEXACT, "sin #12"); [EOL]     test(DfpMath.sin(factory.newDfp("0.2")), factory.newDfp("0.19866933079506121546"), DfpField.FLAG_INEXACT, "sin #13"); [EOL]     test(DfpMath.sin(factory.newDfp("0.3")), factory.newDfp("0.2955202066613395751"), DfpField.FLAG_INEXACT, "sin #14"); [EOL]     test(DfpMath.sin(factory.newDfp("0.4")), factory.newDfp("0.38941834230865049166"), DfpField.FLAG_INEXACT, "sin #15"); [EOL]     test(DfpMath.sin(factory.newDfp("0.5")), factory.newDfp("0.47942553860420300026"), DfpField.FLAG_INEXACT, "sin #16"); [EOL]     test(DfpMath.sin(factory.newDfp("0.6")), factory.newDfp("0.56464247339503535721"), DfpField.FLAG_INEXACT, "sin #17"); [EOL]     test(DfpMath.sin(factory.newDfp("0.7")), factory.newDfp("0.64421768723769105367"), DfpField.FLAG_INEXACT, "sin #18"); [EOL]     test(DfpMath.sin(factory.newDfp("0.8")), factory.newDfp("0.71735609089952276163"), DfpField.FLAG_INEXACT, "sin #19"); [EOL]     test(DfpMath.sin(factory.newDfp("0.9")), factory.newDfp("0.78332690962748338847"), DfpField.FLAG_INEXACT, "sin #20"); [EOL]     test(DfpMath.sin(factory.newDfp("1.0")), factory.newDfp("0.84147098480789650666"), DfpField.FLAG_INEXACT, "sin #21"); [EOL]     test(DfpMath.sin(factory.newDfp("1.1")), factory.newDfp("0.89120736006143533995"), DfpField.FLAG_INEXACT, "sin #22"); [EOL]     test(DfpMath.sin(factory.newDfp("1.2")), factory.newDfp("0.93203908596722634968"), DfpField.FLAG_INEXACT, "sin #23"); [EOL]     test(DfpMath.sin(factory.newDfp("1.3")), factory.newDfp("0.9635581854171929647"), DfpField.FLAG_INEXACT, "sin #24"); [EOL]     test(DfpMath.sin(factory.newDfp("1.4")), factory.newDfp("0.98544972998846018066"), DfpField.FLAG_INEXACT, "sin #25"); [EOL]     test(DfpMath.sin(factory.newDfp("1.5")), factory.newDfp("0.99749498660405443096"), DfpField.FLAG_INEXACT, "sin #26"); [EOL]     test(DfpMath.sin(factory.newDfp("1.6")), factory.newDfp("0.99957360304150516323"), DfpField.FLAG_INEXACT, "sin #27"); [EOL] } <line_num>: 474,584
