public TestDateTime_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 71,73
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTime_Constructors.class); [EOL] } <line_num>: 75,77
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     locale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     java.util.TimeZone.setDefault(LONDON.toTimeZone()); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 83,90
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     java.util.TimeZone.setDefault(zone.toTimeZone()); [EOL]     Locale.setDefault(locale); [EOL]     zone = null; [EOL] } <line_num>: 92,98
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 101,105
public void test_now() throws Throwable { [EOL]     DateTime test = DateTime.now(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 111,115
public void test_now_DateTimeZone() throws Throwable { [EOL]     DateTime test = DateTime.now(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 120,124
public void test_now_nullDateTimeZone() throws Throwable { [EOL]     try { [EOL]         DateTime.now((DateTimeZone) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 129,134
public void test_now_Chronology() throws Throwable { [EOL]     DateTime test = DateTime.now(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 139,143
public void test_now_nullChronology() throws Throwable { [EOL]     try { [EOL]         DateTime.now((Chronology) null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 148,153
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new DateTime(2010, 6, 30, 1, 20, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), DateTime.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)), DateTime.parse("2010-002T14:50")); [EOL] } <line_num>: 156,159
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--dd MM HH").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new DateTime(2010, 6, 30, 13, 0, ISOChronology.getInstance(PARIS)), DateTime.parse("2010--30 06 13", f)); [EOL] } <line_num>: 161,164
public void testConstructor() throws Throwable { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 170,174
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 179,183
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime((DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 188,192
public void testConstructor_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 197,201
public void testConstructor_nullChronology() throws Throwable { [EOL]     DateTime test = new DateTime((Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 206,210
public void testConstructor_long1() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 216,220
public void testConstructor_long2() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME2); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME2, test.getMillis()); [EOL] } <line_num>: 225,229
public void testConstructor_long1_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME1, PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 234,238
public void testConstructor_long2_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME2, PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME2, test.getMillis()); [EOL] } <line_num>: 243,247
public void testConstructor_long_nullDateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME1, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 252,256
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME1, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 261,265
public void testConstructor_long2_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME2, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME2, test.getMillis()); [EOL] } <line_num>: 270,274
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     DateTime test = new DateTime(TEST_TIME1, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 279,283
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 289,294
public void testConstructor_invalidObject() throws Throwable { [EOL]     try { [EOL]         new DateTime(new Object()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 299,304
public void testConstructor_nullObject() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 309,313
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         DateTime test = new DateTime(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] } <line_num>: 318,327
public void testConstructor_ObjectString1() throws Throwable { [EOL]     DateTime test = new DateTime("1972-12-03"); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] } <line_num>: 329,339
public void testConstructor_ObjectString2() throws Throwable { [EOL]     DateTime test = new DateTime("2006-06-03T+14:00"); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(2006, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(2, test.getDayOfMonth()); [EOL]     assertEquals(11, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] } <line_num>: 341,351
public void testConstructor_ObjectString3() throws Throwable { [EOL]     DateTime test = new DateTime("1972-12-03T10:20:30.040"); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] } <line_num>: 353,363
public void testConstructor_ObjectString4() throws Throwable { [EOL]     DateTime test = new DateTime("2006-06-03T10:20:30.040+14:00"); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(2006, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(2, test.getDayOfMonth()); [EOL]     assertEquals(21, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] } <line_num>: 365,375
public void testConstructor_ObjectString5() throws Throwable { [EOL]     DateTime test = new DateTime("T10:20:30.040"); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(1, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] } <line_num>: 377,387
public void testConstructor_ObjectString6() throws Throwable { [EOL]     DateTime test = new DateTime("T10:20:30.040+14:00"); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(1969, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(31, test.getDayOfMonth()); [EOL]     assertEquals(21, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL] } <line_num>: 389,399
public void testConstructor_ObjectString7() throws Throwable { [EOL]     DateTime test = new DateTime("10"); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(10, test.getYear()); [EOL]     assertEquals(1, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL] } <line_num>: 401,411
public void testConstructor_ObjectStringEx1() throws Throwable { [EOL]     try { [EOL]         new DateTime("10:20:30.040"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 413,420
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new DateTime("10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 422,429
public void testConstructor_Object_DateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 435,440
public void testConstructor_invalidObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         new DateTime(new Object(), PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 445,450
public void testConstructor_nullObject_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null, PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 455,459
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 464,469
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 474,478
public void testConstructor_badconverterObject_DateTimeZone() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] } <line_num>: 483,492
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 497,502
public void testConstructor_invalidObject_Chronology() throws Throwable { [EOL]     try { [EOL]         new DateTime(new Object(), GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 507,512
public void testConstructor_nullObject_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 517,521
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     DateTime test = new DateTime(date, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 526,531
public void testConstructor_nullObject_nullChronology() throws Throwable { [EOL]     DateTime test = new DateTime((Object) null, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 536,540
public void testConstructor_badconverterObject_Chronology() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance()); [EOL]         assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] } <line_num>: 545,554
public void testConstructor_int_int_int_int_int() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 560,565
public void testConstructor_int_int_int_int_int_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 2, 0, PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 570,574
public void testConstructor_int_int_int_int_int_nullDateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 579,583
public void testConstructor_int_int_int_int_int_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 588,592
public void testConstructor_int_int_int_int_int_nullChronology() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 597,601
public void testConstructor_int_int_int_int_int_int() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 607,612
public void testConstructor_int_int_int_int_int_int_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 2, 0, 0, PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 617,621
public void testConstructor_int_int_int_int_int_int_nullDateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 626,630
public void testConstructor_int_int_int_int_int_int_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 635,639
public void testConstructor_int_int_int_int_int_int_nullChronology() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 644,648
public void testConstructor_int_int_int_int_int_int_int() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     try { [EOL]         new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 0, 9, 0, 0, 0, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 13, 9, 0, 0, 0, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 6, 0, 0, 0, 0, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 6, 31, 0, 0, 0, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new DateTime(2002, 7, 31, 0, 0, 0, 0); [EOL]     try { [EOL]         new DateTime(2002, 7, 32, 0, 0, 0, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 654,688
public void testConstructor_int_int_int_int_int_int_int_DateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 2, 0, 0, 0, PARIS); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     try { [EOL]         new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 0, 9, 0, 0, 0, 0, PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 13, 9, 0, 0, 0, 0, PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 6, 0, 0, 0, 0, 0, PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 6, 31, 0, 0, 0, 0, PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new DateTime(2002, 7, 31, 0, 0, 0, 0, PARIS); [EOL]     try { [EOL]         new DateTime(2002, 7, 32, 0, 0, 0, 0, PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 693,726
public void testConstructor_int_int_int_int_int_int_int_nullDateTimeZone() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, (DateTimeZone) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 731,735
public void testConstructor_int_int_int_int_int_int_int_Chronology() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, GregorianChronology.getInstance()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     try { [EOL]         new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 0, 9, 0, 0, 0, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 13, 9, 0, 0, 0, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 6, 0, 0, 0, 0, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new DateTime(2002, 6, 31, 0, 0, 0, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new DateTime(2002, 7, 31, 0, 0, 0, 0, GregorianChronology.getInstance()); [EOL]     try { [EOL]         new DateTime(2002, 7, 32, 0, 0, 0, 0, GregorianChronology.getInstance()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 740,773
public void testConstructor_int_int_int_int_int_int_int_nullChronology() throws Throwable { [EOL]     DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, (Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 778,782
