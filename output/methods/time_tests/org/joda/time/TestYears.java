public TestYears(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 36,38
public static TestSuite suite() { [EOL]     return new TestSuite(TestYears.class); [EOL] } <line_num>: 40,42
protected void setUp() throws Exception { [EOL] } <line_num>: 48,49
protected void tearDown() throws Exception { [EOL] } <line_num>: 51,52
public void testConstants() { [EOL]     assertEquals(0, Years.ZERO.getYears()); [EOL]     assertEquals(1, Years.ONE.getYears()); [EOL]     assertEquals(2, Years.TWO.getYears()); [EOL]     assertEquals(3, Years.THREE.getYears()); [EOL]     assertEquals(Integer.MAX_VALUE, Years.MAX_VALUE.getYears()); [EOL]     assertEquals(Integer.MIN_VALUE, Years.MIN_VALUE.getYears()); [EOL] } <line_num>: 55,62
public void testFactory_years_int() { [EOL]     assertSame(Years.ZERO, Years.years(0)); [EOL]     assertSame(Years.ONE, Years.years(1)); [EOL]     assertSame(Years.TWO, Years.years(2)); [EOL]     assertSame(Years.THREE, Years.years(3)); [EOL]     assertSame(Years.MAX_VALUE, Years.years(Integer.MAX_VALUE)); [EOL]     assertSame(Years.MIN_VALUE, Years.years(Integer.MIN_VALUE)); [EOL]     assertEquals(-1, Years.years(-1).getYears()); [EOL]     assertEquals(4, Years.years(4).getYears()); [EOL] } <line_num>: 65,74
public void testFactory_yearsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Years.yearsBetween(start, end1).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(start, start).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(end1, end1).getYears()); [EOL]     assertEquals(-3, Years.yearsBetween(end1, start).getYears()); [EOL]     assertEquals(6, Years.yearsBetween(start, end2).getYears()); [EOL] } <line_num>: 77,87
@SuppressWarnings("deprecation") [EOL] public void testFactory_yearsBetween_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2009, 6, 9); [EOL]     YearMonthDay end2 = new YearMonthDay(2012, 6, 9); [EOL]     assertEquals(3, Years.yearsBetween(start, end1).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(start, start).getYears()); [EOL]     assertEquals(0, Years.yearsBetween(end1, end1).getYears()); [EOL]     assertEquals(-3, Years.yearsBetween(end1, start).getYears()); [EOL]     assertEquals(6, Years.yearsBetween(start, end2).getYears()); [EOL] } <line_num>: 89,100
public void testFactory_yearsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Years.yearsIn((ReadableInterval) null).getYears()); [EOL]     assertEquals(3, Years.yearsIn(new Interval(start, end1)).getYears()); [EOL]     assertEquals(0, Years.yearsIn(new Interval(start, start)).getYears()); [EOL]     assertEquals(0, Years.yearsIn(new Interval(end1, end1)).getYears()); [EOL]     assertEquals(6, Years.yearsIn(new Interval(start, end2)).getYears()); [EOL] } <line_num>: 102,112
public void testFactory_parseYears_String() { [EOL]     assertEquals(0, Years.parseYears((String) null).getYears()); [EOL]     assertEquals(0, Years.parseYears("P0Y").getYears()); [EOL]     assertEquals(1, Years.parseYears("P1Y").getYears()); [EOL]     assertEquals(-3, Years.parseYears("P-3Y").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2Y0M").getYears()); [EOL]     assertEquals(2, Years.parseYears("P2YT0H0M").getYears()); [EOL]     try { [EOL]         Years.parseYears("P1M1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Years.parseYears("P1YT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 114,133
public void testGetMethods() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals(20, test.getYears()); [EOL] } <line_num>: 136,139
public void testGetFieldType() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals(DurationFieldType.years(), test.getFieldType()); [EOL] } <line_num>: 141,144
public void testGetPeriodType() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals(PeriodType.years(), test.getPeriodType()); [EOL] } <line_num>: 146,149
public void testIsGreaterThan() { [EOL]     assertEquals(true, Years.THREE.isGreaterThan(Years.TWO)); [EOL]     assertEquals(false, Years.THREE.isGreaterThan(Years.THREE)); [EOL]     assertEquals(false, Years.TWO.isGreaterThan(Years.THREE)); [EOL]     assertEquals(true, Years.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Years.years(-1).isGreaterThan(null)); [EOL] } <line_num>: 152,158
public void testIsLessThan() { [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.TWO)); [EOL]     assertEquals(false, Years.THREE.isLessThan(Years.THREE)); [EOL]     assertEquals(true, Years.TWO.isLessThan(Years.THREE)); [EOL]     assertEquals(false, Years.ONE.isLessThan(null)); [EOL]     assertEquals(true, Years.years(-1).isLessThan(null)); [EOL] } <line_num>: 160,166
public void testToString() { [EOL]     Years test = Years.years(20); [EOL]     assertEquals("P20Y", test.toString()); [EOL]     test = Years.years(-20); [EOL]     assertEquals("P-20Y", test.toString()); [EOL] } <line_num>: 169,175
public void testSerialization() throws Exception { [EOL]     Years test = Years.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Years result = (Years) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 178,193
public void testPlus_int() { [EOL]     Years test2 = Years.years(2); [EOL]     Years result = test2.plus(3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(5, result.getYears()); [EOL]     assertEquals(1, Years.ONE.plus(0).getYears()); [EOL]     try { [EOL]         Years.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 196,210
public void testPlus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.plus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(5, result.getYears()); [EOL]     assertEquals(1, Years.ONE.plus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.plus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MAX_VALUE.plus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 212,229
public void testMinus_int() { [EOL]     Years test2 = Years.years(2); [EOL]     Years result = test2.minus(3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(-1, result.getYears()); [EOL]     assertEquals(1, Years.ONE.minus(0).getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 231,245
public void testMinus_Years() { [EOL]     Years test2 = Years.years(2); [EOL]     Years test3 = Years.years(3); [EOL]     Years result = test2.minus(test3); [EOL]     assertEquals(2, test2.getYears()); [EOL]     assertEquals(3, test3.getYears()); [EOL]     assertEquals(-1, result.getYears()); [EOL]     assertEquals(1, Years.ONE.minus(Years.ZERO).getYears()); [EOL]     assertEquals(1, Years.ONE.minus((Years) null).getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.minus(Years.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 247,264
public void testMultipliedBy_int() { [EOL]     Years test = Years.years(2); [EOL]     assertEquals(6, test.multipliedBy(3).getYears()); [EOL]     assertEquals(2, test.getYears()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getYears()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Years halfMax = Years.years(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 266,280
public void testDividedBy_int() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(6, test.dividedBy(2).getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     assertEquals(4, test.dividedBy(3).getYears()); [EOL]     assertEquals(3, test.dividedBy(4).getYears()); [EOL]     assertEquals(2, test.dividedBy(5).getYears()); [EOL]     assertEquals(2, test.dividedBy(6).getYears()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Years.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 282,298
public void testNegated() { [EOL]     Years test = Years.years(12); [EOL]     assertEquals(-12, test.negated().getYears()); [EOL]     assertEquals(12, test.getYears()); [EOL]     try { [EOL]         Years.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 300,311
public void testAddToLocalDate() { [EOL]     Years test = Years.years(3); [EOL]     LocalDate date = new LocalDate(2006, 6, 1); [EOL]     LocalDate expected = new LocalDate(2009, 6, 1); [EOL]     assertEquals(expected, date.plus(test)); [EOL] } <line_num>: 314,319
