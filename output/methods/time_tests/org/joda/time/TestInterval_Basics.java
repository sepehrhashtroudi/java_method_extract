public TestInterval_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 88,90
public MockInterval() { [EOL]     super(); [EOL] } <line_num>: 188,190
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 80,82
public static TestSuite suite() { [EOL]     return new TestSuite(TestInterval_Basics.class); [EOL] } <line_num>: 84,86
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(PARIS); [EOL]     TimeZone.setDefault(PARIS.toTimeZone()); [EOL]     Locale.setDefault(Locale.FRANCE); [EOL]     interval37 = new Interval(3, 7); [EOL]     interval33 = new Interval(3, 3); [EOL] } <line_num>: 92,102
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 104,112
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 115,119
public void testGetMillis() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(TEST_TIME1, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME1, test.getStart().getMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEndMillis()); [EOL]     assertEquals(TEST_TIME2, test.getEnd().getMillis()); [EOL]     assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis()); [EOL]     assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis()); [EOL] } <line_num>: 122,130
public void testGetDuration1() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis()); [EOL]     assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis()); [EOL] } <line_num>: 132,136
public void testGetDuration2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME1); [EOL]     assertSame(Duration.ZERO, test.toDuration()); [EOL] } <line_num>: 138,141
public void testEqualsHashCode() { [EOL]     Interval test1 = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     Interval test2 = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Interval test3 = new Interval(TEST_TIME_NOW, TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     Interval test4 = new Interval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance()); [EOL]     assertEquals(true, test4.equals(test4)); [EOL]     assertEquals(false, test1.equals(test4)); [EOL]     assertEquals(false, test2.equals(test4)); [EOL]     assertEquals(false, test4.equals(test1)); [EOL]     assertEquals(false, test4.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test4.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test4.hashCode()); [EOL]     MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2); [EOL]     assertEquals(true, test1.equals(test5)); [EOL]     assertEquals(true, test2.equals(test5)); [EOL]     assertEquals(false, test3.equals(test5)); [EOL]     assertEquals(true, test5.equals(test1)); [EOL]     assertEquals(true, test5.equals(test2)); [EOL]     assertEquals(false, test5.equals(test3)); [EOL]     assertEquals(true, test1.hashCode() == test5.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test3.hashCode() == test5.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInterval())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] } <line_num>: 143,185
public Chronology getChronology() { [EOL]     return ISOChronology.getInstance(); [EOL] } <line_num>: 191,193
public long getStartMillis() { [EOL]     return TEST_TIME1; [EOL] } <line_num>: 194,196
public long getEndMillis() { [EOL]     return TEST_TIME2; [EOL] } <line_num>: 197,199
public void testEqualsHashCodeLenient() { [EOL]     Interval test1 = new Interval(new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)), new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS))); [EOL]     Interval test2 = new Interval(new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)), new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS))); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] } <line_num>: 202,216
public void testEqualsHashCodeStrict() { [EOL]     Interval test1 = new Interval(new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)), new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS))); [EOL]     Interval test2 = new Interval(new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)), new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS))); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] } <line_num>: 218,232
public void test_useCase_ContainsOverlapAbutGap() { [EOL]     Interval test1020 = new Interval(10, 20); [EOL]     Interval interval = new Interval(4, 8); [EOL]     assertNotNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(false, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNotNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(false, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(6, 10); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(true, test1020.abuts(interval)); [EOL]     assertEquals(false, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(true, interval.abuts(test1020)); [EOL]     assertEquals(false, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(8, 12); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(true, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(true, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(10, 14); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(true, test1020.overlaps(interval)); [EOL]     assertEquals(true, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(true, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(test1020)); [EOL]     assertEquals(true, test1020.overlaps(test1020)); [EOL]     assertEquals(true, test1020.contains(test1020)); [EOL]     interval = new Interval(16, 20); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(true, test1020.overlaps(interval)); [EOL]     assertEquals(true, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(true, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(18, 22); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(true, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(true, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(20, 24); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(true, test1020.abuts(interval)); [EOL]     assertEquals(false, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(true, interval.abuts(test1020)); [EOL]     assertEquals(false, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(22, 26); [EOL]     assertNotNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(false, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNotNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(false, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL] } <line_num>: 235,335
public void test_useCase_ContainsOverlapAbutGap_zeroDuration() { [EOL]     Interval test1020 = new Interval(10, 20); [EOL]     Interval interval = new Interval(8, 8); [EOL]     assertNotNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(false, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNotNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(false, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(10, 10); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(true, test1020.abuts(interval)); [EOL]     assertEquals(false, test1020.overlaps(interval)); [EOL]     assertEquals(true, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(true, interval.abuts(test1020)); [EOL]     assertEquals(false, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(12, 12); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(true, test1020.overlaps(interval)); [EOL]     assertEquals(true, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(true, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(20, 20); [EOL]     assertNull(test1020.gap(interval)); [EOL]     assertEquals(true, test1020.abuts(interval)); [EOL]     assertEquals(false, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNull(interval.gap(test1020)); [EOL]     assertEquals(true, interval.abuts(test1020)); [EOL]     assertEquals(false, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL]     interval = new Interval(22, 22); [EOL]     assertNotNull(test1020.gap(interval)); [EOL]     assertEquals(false, test1020.abuts(interval)); [EOL]     assertEquals(false, test1020.overlaps(interval)); [EOL]     assertEquals(false, test1020.contains(interval)); [EOL]     assertNotNull(interval.gap(test1020)); [EOL]     assertEquals(false, interval.abuts(test1020)); [EOL]     assertEquals(false, interval.overlaps(test1020)); [EOL]     assertEquals(false, interval.contains(test1020)); [EOL] } <line_num>: 338,400
public void test_useCase_ContainsOverlapAbutGap_bothZeroDuration() { [EOL]     Interval test0808 = new Interval(8, 8); [EOL]     Interval test1010 = new Interval(10, 10); [EOL]     assertNotNull(test1010.gap(test0808)); [EOL]     assertEquals(false, test1010.abuts(test0808)); [EOL]     assertEquals(false, test1010.overlaps(test0808)); [EOL]     assertEquals(false, test1010.contains(test0808)); [EOL]     assertNotNull(test0808.gap(test1010)); [EOL]     assertEquals(false, test0808.abuts(test1010)); [EOL]     assertEquals(false, test0808.overlaps(test1010)); [EOL]     assertEquals(false, test0808.contains(test1010)); [EOL]     assertNull(test1010.gap(test1010)); [EOL]     assertEquals(true, test1010.abuts(test1010)); [EOL]     assertEquals(false, test1010.overlaps(test1010)); [EOL]     assertEquals(false, test1010.contains(test1010)); [EOL] } <line_num>: 403,426
public void testContains_long() { [EOL]     assertEquals(false, interval37.contains(2)); [EOL]     assertEquals(true, interval37.contains(3)); [EOL]     assertEquals(true, interval37.contains(4)); [EOL]     assertEquals(true, interval37.contains(5)); [EOL]     assertEquals(true, interval37.contains(6)); [EOL]     assertEquals(false, interval37.contains(7)); [EOL]     assertEquals(false, interval37.contains(8)); [EOL] } <line_num>: 429,437
public void testContains_long_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(2)); [EOL]     assertEquals(false, interval33.contains(3)); [EOL]     assertEquals(false, interval33.contains(4)); [EOL] } <line_num>: 439,443
public void testContainsNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.containsNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.containsNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.containsNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.containsNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.containsNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.containsNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval33.containsNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval33.containsNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval33.containsNow()); [EOL] } <line_num>: 446,466
public void testContains_RI() { [EOL]     assertEquals(false, interval37.contains(new Instant(2))); [EOL]     assertEquals(true, interval37.contains(new Instant(3))); [EOL]     assertEquals(true, interval37.contains(new Instant(4))); [EOL]     assertEquals(true, interval37.contains(new Instant(5))); [EOL]     assertEquals(true, interval37.contains(new Instant(6))); [EOL]     assertEquals(false, interval37.contains(new Instant(7))); [EOL]     assertEquals(false, interval37.contains(new Instant(8))); [EOL] } <line_num>: 469,477
public void testContains_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInstant) null)); [EOL] } <line_num>: 479,492
public void testContains_RI_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(new Instant(2))); [EOL]     assertEquals(false, interval33.contains(new Instant(3))); [EOL]     assertEquals(false, interval33.contains(new Instant(4))); [EOL] } <line_num>: 494,498
public void testContains_RInterval() { [EOL]     assertEquals(false, interval37.contains(new Interval(1, 2))); [EOL]     assertEquals(false, interval37.contains(new Interval(2, 2))); [EOL]     assertEquals(false, interval37.contains(new Interval(2, 3))); [EOL]     assertEquals(true, interval37.contains(new Interval(3, 3))); [EOL]     assertEquals(false, interval37.contains(new Interval(2, 4))); [EOL]     assertEquals(true, interval37.contains(new Interval(3, 4))); [EOL]     assertEquals(true, interval37.contains(new Interval(4, 4))); [EOL]     assertEquals(false, interval37.contains(new Interval(2, 6))); [EOL]     assertEquals(true, interval37.contains(new Interval(3, 6))); [EOL]     assertEquals(true, interval37.contains(new Interval(4, 6))); [EOL]     assertEquals(true, interval37.contains(new Interval(5, 6))); [EOL]     assertEquals(true, interval37.contains(new Interval(6, 6))); [EOL]     assertEquals(false, interval37.contains(new Interval(2, 7))); [EOL]     assertEquals(true, interval37.contains(new Interval(3, 7))); [EOL]     assertEquals(true, interval37.contains(new Interval(4, 7))); [EOL]     assertEquals(true, interval37.contains(new Interval(5, 7))); [EOL]     assertEquals(true, interval37.contains(new Interval(6, 7))); [EOL]     assertEquals(false, interval37.contains(new Interval(7, 7))); [EOL]     assertEquals(false, interval37.contains(new Interval(2, 8))); [EOL]     assertEquals(false, interval37.contains(new Interval(3, 8))); [EOL]     assertEquals(false, interval37.contains(new Interval(4, 8))); [EOL]     assertEquals(false, interval37.contains(new Interval(5, 8))); [EOL]     assertEquals(false, interval37.contains(new Interval(6, 8))); [EOL]     assertEquals(false, interval37.contains(new Interval(7, 8))); [EOL]     assertEquals(false, interval37.contains(new Interval(8, 8))); [EOL]     assertEquals(false, interval37.contains(new Interval(8, 9))); [EOL]     assertEquals(false, interval37.contains(new Interval(9, 9))); [EOL] } <line_num>: 501,535
public void testContains_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.contains((ReadableInterval) null)); [EOL] } <line_num>: 537,550
public void testContains_RInterval_zeroDuration() { [EOL]     assertEquals(false, interval33.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(interval37)); [EOL]     assertEquals(true, interval37.contains(interval33)); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 2))); [EOL]     assertEquals(false, interval33.contains(new Interval(8, 9))); [EOL]     assertEquals(false, interval33.contains(new Interval(1, 9))); [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval33.contains((ReadableInterval) null)); [EOL] } <line_num>: 552,566
public void testOverlaps_RInterval() { [EOL]     assertEquals(false, interval37.overlaps(new Interval(1, 2))); [EOL]     assertEquals(false, interval37.overlaps(new Interval(2, 2))); [EOL]     assertEquals(false, interval37.overlaps(new Interval(2, 3))); [EOL]     assertEquals(false, interval37.overlaps(new Interval(3, 3))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(2, 4))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(3, 4))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(4, 4))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(2, 6))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(3, 6))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(4, 6))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(5, 6))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(6, 6))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(2, 7))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(3, 7))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(4, 7))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(5, 7))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(6, 7))); [EOL]     assertEquals(false, interval37.overlaps(new Interval(7, 7))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(2, 8))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(3, 8))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(4, 8))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(5, 8))); [EOL]     assertEquals(true, interval37.overlaps(new Interval(6, 8))); [EOL]     assertEquals(false, interval37.overlaps(new Interval(7, 8))); [EOL]     assertEquals(false, interval37.overlaps(new Interval(8, 8))); [EOL]     assertEquals(false, interval37.overlaps(new Interval(8, 9))); [EOL]     assertEquals(false, interval37.overlaps(new Interval(9, 9))); [EOL] } <line_num>: 569,603
public void testOverlaps_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.overlaps((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.overlaps((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(true, interval37.overlaps((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(true, interval37.overlaps((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.overlaps((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.overlaps((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval33.overlaps((ReadableInterval) null)); [EOL] } <line_num>: 605,621
public void testOverlaps_RInterval_zeroDuration() { [EOL]     assertEquals(false, interval33.overlaps(interval33)); [EOL]     assertEquals(false, interval33.overlaps(interval37)); [EOL]     assertEquals(false, interval37.overlaps(interval33)); [EOL]     assertEquals(false, interval33.overlaps(new Interval(1, 2))); [EOL]     assertEquals(false, interval33.overlaps(new Interval(8, 9))); [EOL]     assertEquals(true, interval33.overlaps(new Interval(1, 9))); [EOL] } <line_num>: 623,630
public void testOverlap_RInterval() { [EOL]     assertEquals(null, interval37.overlap(new Interval(1, 2))); [EOL]     assertEquals(null, interval37.overlap(new Interval(2, 2))); [EOL]     assertEquals(null, interval37.overlap(new Interval(2, 3))); [EOL]     assertEquals(null, interval37.overlap(new Interval(3, 3))); [EOL]     assertEquals(new Interval(3, 4), interval37.overlap(new Interval(2, 4))); [EOL]     assertEquals(new Interval(3, 4), interval37.overlap(new Interval(3, 4))); [EOL]     assertEquals(new Interval(4, 4), interval37.overlap(new Interval(4, 4))); [EOL]     assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 7))); [EOL]     assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 7))); [EOL]     assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 7))); [EOL]     assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 7))); [EOL]     assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 7))); [EOL]     assertEquals(null, interval37.overlap(new Interval(7, 7))); [EOL]     assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 8))); [EOL]     assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 8))); [EOL]     assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 8))); [EOL]     assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 8))); [EOL]     assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 8))); [EOL]     assertEquals(null, interval37.overlap(new Interval(7, 8))); [EOL]     assertEquals(null, interval37.overlap(new Interval(8, 8))); [EOL] } <line_num>: 633,658
public void testOverlap_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(new Interval(6, 6), interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(null, interval37.overlap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval33.overlap((ReadableInterval) null)); [EOL] } <line_num>: 660,676
public void testOverlap_RInterval_zone() { [EOL]     Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology()); [EOL]     Interval testB = new Interval(new DateTime(4, MOSCOW), new DateTime(8, MOSCOW)); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology()); [EOL]     Interval resultAB = testA.overlap(testB); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology()); [EOL]     Interval resultBA = testB.overlap(testA); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology()); [EOL] } <line_num>: 678,690
public void testOverlap_RInterval_zoneUTC() { [EOL]     Interval testA = new Interval(new Instant(3), new Instant(7)); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology()); [EOL]     Interval testB = new Interval(new Instant(4), new Instant(8)); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology()); [EOL]     Interval result = testA.overlap(testB); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), result.getChronology()); [EOL] } <line_num>: 692,701
public void testGap_RInterval() { [EOL]     assertEquals(new Interval(1, 3), interval37.gap(new Interval(0, 1))); [EOL]     assertEquals(new Interval(1, 3), interval37.gap(new Interval(1, 1))); [EOL]     assertEquals(null, interval37.gap(new Interval(2, 3))); [EOL]     assertEquals(null, interval37.gap(new Interval(3, 3))); [EOL]     assertEquals(null, interval37.gap(new Interval(4, 6))); [EOL]     assertEquals(null, interval37.gap(new Interval(3, 7))); [EOL]     assertEquals(null, interval37.gap(new Interval(6, 7))); [EOL]     assertEquals(null, interval37.gap(new Interval(7, 7))); [EOL]     assertEquals(null, interval37.gap(new Interval(6, 8))); [EOL]     assertEquals(null, interval37.gap(new Interval(7, 8))); [EOL]     assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 8))); [EOL]     assertEquals(null, interval37.gap(new Interval(6, 9))); [EOL]     assertEquals(null, interval37.gap(new Interval(7, 9))); [EOL]     assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 9))); [EOL]     assertEquals(new Interval(7, 9), interval37.gap(new Interval(9, 9))); [EOL] } <line_num>: 704,725
public void testGap_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(new Interval(2, 3), interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(null, interval37.gap((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(new Interval(7, 8), interval37.gap((ReadableInterval) null)); [EOL] } <line_num>: 727,740
public void testGap_RInterval_zone() { [EOL]     Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology()); [EOL]     Interval testB = new Interval(new DateTime(1, MOSCOW), new DateTime(2, MOSCOW)); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology()); [EOL]     Interval resultAB = testA.gap(testB); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology()); [EOL]     Interval resultBA = testB.gap(testA); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology()); [EOL] } <line_num>: 742,754
public void testGap_RInterval_zoneUTC() { [EOL]     Interval testA = new Interval(new Instant(3), new Instant(7)); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology()); [EOL]     Interval testB = new Interval(new Instant(1), new Instant(2)); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology()); [EOL]     Interval result = testA.gap(testB); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), result.getChronology()); [EOL] } <line_num>: 756,765
public void testAbuts_RInterval() { [EOL]     assertEquals(false, interval37.abuts(new Interval(1, 2))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 2))); [EOL]     assertEquals(true, interval37.abuts(new Interval(2, 3))); [EOL]     assertEquals(true, interval37.abuts(new Interval(3, 3))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 4))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 6))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 7))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 7))); [EOL]     assertEquals(false, interval37.abuts(new Interval(2, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(3, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(4, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(5, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(6, 8))); [EOL]     assertEquals(true, interval37.abuts(new Interval(7, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 8))); [EOL]     assertEquals(false, interval37.abuts(new Interval(8, 9))); [EOL]     assertEquals(false, interval37.abuts(new Interval(9, 9))); [EOL] } <line_num>: 768,802
public void testAbuts_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.abuts((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.abuts((ReadableInterval) null)); [EOL] } <line_num>: 804,817
public void testIsEqual_RI() { [EOL]     assertEquals(false, interval37.isEqual(interval33)); [EOL]     assertEquals(true, interval37.isEqual(interval37)); [EOL] } <line_num>: 820,823
public void testIsBefore_long() { [EOL]     assertEquals(false, interval37.isBefore(2)); [EOL]     assertEquals(false, interval37.isBefore(3)); [EOL]     assertEquals(false, interval37.isBefore(4)); [EOL]     assertEquals(false, interval37.isBefore(5)); [EOL]     assertEquals(false, interval37.isBefore(6)); [EOL]     assertEquals(true, interval37.isBefore(7)); [EOL]     assertEquals(true, interval37.isBefore(8)); [EOL] } <line_num>: 826,834
public void testIsBeforeNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBeforeNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBeforeNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBeforeNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBeforeNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBeforeNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBeforeNow()); [EOL] } <line_num>: 836,849
public void testIsBefore_RI() { [EOL]     assertEquals(false, interval37.isBefore(new Instant(2))); [EOL]     assertEquals(false, interval37.isBefore(new Instant(3))); [EOL]     assertEquals(false, interval37.isBefore(new Instant(4))); [EOL]     assertEquals(false, interval37.isBefore(new Instant(5))); [EOL]     assertEquals(false, interval37.isBefore(new Instant(6))); [EOL]     assertEquals(true, interval37.isBefore(new Instant(7))); [EOL]     assertEquals(true, interval37.isBefore(new Instant(8))); [EOL] } <line_num>: 851,859
public void testIsBefore_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInstant) null)); [EOL] } <line_num>: 861,874
public void testIsBefore_RInterval() { [EOL]     assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 2))); [EOL]     assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 3))); [EOL]     assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 4))); [EOL]     assertEquals(false, interval37.isBefore(new Interval(6, Long.MAX_VALUE))); [EOL]     assertEquals(true, interval37.isBefore(new Interval(7, Long.MAX_VALUE))); [EOL]     assertEquals(true, interval37.isBefore(new Interval(8, Long.MAX_VALUE))); [EOL] } <line_num>: 876,884
public void testIsBefore_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(true, interval37.isBefore((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(true, interval37.isBefore((ReadableInterval) null)); [EOL] } <line_num>: 886,899
public void testIsAfter_long() { [EOL]     assertEquals(true, interval37.isAfter(2)); [EOL]     assertEquals(false, interval37.isAfter(3)); [EOL]     assertEquals(false, interval37.isAfter(4)); [EOL]     assertEquals(false, interval37.isAfter(5)); [EOL]     assertEquals(false, interval37.isAfter(6)); [EOL]     assertEquals(false, interval37.isAfter(7)); [EOL]     assertEquals(false, interval37.isAfter(8)); [EOL] } <line_num>: 902,910
public void testIsAfterNow() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfterNow()); [EOL] } <line_num>: 912,925
public void testIsAfter_RI() { [EOL]     assertEquals(true, interval37.isAfter(new Instant(2))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(3))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(4))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(5))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(6))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(7))); [EOL]     assertEquals(false, interval37.isAfter(new Instant(8))); [EOL] } <line_num>: 927,935
public void testIsAfter_RI_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInstant) null)); [EOL] } <line_num>: 937,950
public void testIsAfter_RInterval() { [EOL]     assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 2))); [EOL]     assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 3))); [EOL]     assertEquals(false, interval37.isAfter(new Interval(Long.MIN_VALUE, 4))); [EOL]     assertEquals(false, interval37.isAfter(new Interval(6, Long.MAX_VALUE))); [EOL]     assertEquals(false, interval37.isAfter(new Interval(7, Long.MAX_VALUE))); [EOL]     assertEquals(false, interval37.isAfter(new Interval(8, Long.MAX_VALUE))); [EOL] } <line_num>: 952,960
public void testIsAfter_RInterval_null() { [EOL]     DateTimeUtils.setCurrentMillisFixed(2); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(3); [EOL]     assertEquals(true, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(4); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(6); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(7); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL]     DateTimeUtils.setCurrentMillisFixed(8); [EOL]     assertEquals(false, interval37.isAfter((ReadableInterval) null)); [EOL] } <line_num>: 962,975
public void testToInterval1() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval result = test.toInterval(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 978,982
public void testToMutableInterval1() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     MutableInterval result = test.toMutableInterval(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 985,989
public void testToPeriod() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 992,1000
public void testToPeriod_PeriodType1() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(null); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 1003,1011
public void testToPeriod_PeriodType2() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Period test = base.toPeriod(PeriodType.yearWeekDayTime()); [EOL]     Period expected = new Period(dt1, dt2, PeriodType.yearWeekDayTime()); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 1013,1021
public void testSerialization() throws Exception { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Interval result = (Interval) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 1024,1039
public void testToString() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals("2004-06-09T07:08:09.010Z/2005-08-13T12:14:16.018Z", test.toString()); [EOL] } <line_num>: 1042,1047
public void testToString_reparse() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.getDefault()); [EOL]     DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.getDefault()); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals(test, new Interval(test.toString())); [EOL] } <line_num>: 1049,1054
public void testWithChronology1() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withChronology(BuddhistChronology.getInstance()); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME2, BuddhistChronology.getInstance()), test); [EOL] } <line_num>: 1057,1061
public void testWithChronology2() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withChronology(null); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME2, ISOChronology.getInstance()), test); [EOL] } <line_num>: 1063,1067
public void testWithChronology3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withChronology(COPTIC_PARIS); [EOL]     assertSame(base, test); [EOL] } <line_num>: 1069,1073
public void testWithStartMillis_long1() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withStartMillis(TEST_TIME1 - 1); [EOL]     assertEquals(new Interval(TEST_TIME1 - 1, TEST_TIME2, COPTIC_PARIS), test); [EOL] } <line_num>: 1076,1080
public void testWithStartMillis_long2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.withStartMillis(TEST_TIME2 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1082,1088
public void testWithStartMillis_long3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withStartMillis(TEST_TIME1); [EOL]     assertSame(base, test); [EOL] } <line_num>: 1090,1094
public void testWithStartInstant_RI1() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withStart(new Instant(TEST_TIME1 - 1)); [EOL]     assertEquals(new Interval(TEST_TIME1 - 1, TEST_TIME2, COPTIC_PARIS), test); [EOL] } <line_num>: 1097,1101
public void testWithStartInstant_RI2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.withStart(new Instant(TEST_TIME2 + 1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1103,1109
public void testWithStartInstant_RI3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withStart(null); [EOL]     assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS), test); [EOL] } <line_num>: 1111,1115
public void testWithEndMillis_long1() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withEndMillis(TEST_TIME2 - 1); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME2 - 1, COPTIC_PARIS), test); [EOL] } <line_num>: 1118,1122
public void testWithEndMillis_long2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.withEndMillis(TEST_TIME1 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1124,1130
public void testWithEndMillis_long3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withEndMillis(TEST_TIME2); [EOL]     assertSame(base, test); [EOL] } <line_num>: 1132,1136
public void testWithEndInstant_RI1() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withEnd(new Instant(TEST_TIME2 - 1)); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME2 - 1, COPTIC_PARIS), test); [EOL] } <line_num>: 1139,1143
public void testWithEndInstant_RI2() { [EOL]     Interval test = new Interval(TEST_TIME1, TEST_TIME2); [EOL]     try { [EOL]         test.withEnd(new Instant(TEST_TIME1 - 1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1145,1151
public void testWithEndInstant_RI3() { [EOL]     Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] } <line_num>: 1153,1157
public void testWithDurationAfterStart1() throws Throwable { [EOL]     Duration dur = new Duration(TEST_TIME2 - TEST_TIME_NOW); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Interval test = base.withDurationAfterStart(dur); [EOL]     assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS), test); [EOL] } <line_num>: 1160,1166
public void testWithDurationAfterStart2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationAfterStart(null); [EOL]     assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] } <line_num>: 1168,1173
public void testWithDurationAfterStart3() throws Throwable { [EOL]     Duration dur = new Duration(-1); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW); [EOL]     try { [EOL]         base.withDurationAfterStart(dur); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1175,1182
public void testWithDurationAfterStart4() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationAfterStart(base.toDuration()); [EOL]     assertSame(base, test); [EOL] } <line_num>: 1184,1189
public void testWithDurationBeforeEnd1() throws Throwable { [EOL]     Duration dur = new Duration(TEST_TIME_NOW - TEST_TIME1); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Interval test = base.withDurationBeforeEnd(dur); [EOL]     assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] } <line_num>: 1192,1198
public void testWithDurationBeforeEnd2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationBeforeEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test); [EOL] } <line_num>: 1200,1205
public void testWithDurationBeforeEnd3() throws Throwable { [EOL]     Duration dur = new Duration(-1); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW); [EOL]     try { [EOL]         base.withDurationBeforeEnd(dur); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1207,1214
public void testWithDurationBeforeEnd4() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withDurationBeforeEnd(base.toDuration()); [EOL]     assertSame(base, test); [EOL] } <line_num>: 1216,1221
public void testWithPeriodAfterStart1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodAfterStart(dur); [EOL]     assertEquals(new Interval(dt, dur), test); [EOL] } <line_num>: 1224,1231
public void testWithPeriodAfterStart2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodAfterStart(null); [EOL]     assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test); [EOL] } <line_num>: 1233,1238
public void testWithPeriodAfterStart3() throws Throwable { [EOL]     Period per = new Period(0, 0, 0, 0, 0, 0, 0, -1); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW); [EOL]     try { [EOL]         base.withPeriodAfterStart(per); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1240,1247
public void testWithPeriodBeforeEnd1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     Interval base = new Interval(dt, dt); [EOL]     Interval test = base.withPeriodBeforeEnd(dur); [EOL]     assertEquals(new Interval(dur, dt), test); [EOL] } <line_num>: 1250,1257
public void testWithPeriodBeforeEnd2() throws Throwable { [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS); [EOL]     Interval test = base.withPeriodBeforeEnd(null); [EOL]     assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test); [EOL] } <line_num>: 1259,1264
public void testWithPeriodBeforeEnd3() throws Throwable { [EOL]     Period per = new Period(0, 0, 0, 0, 0, 0, 0, -1); [EOL]     Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW); [EOL]     try { [EOL]         base.withPeriodBeforeEnd(per); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1266,1273
