public TestLocalTime_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 71,73
public static TestSuite suite() { [EOL]     return new TestSuite(TestLocalTime_Basics.class); [EOL] } <line_num>: 75,77
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 83,87
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 89,93
public void testGet_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(TEST_TIME_NOW / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(TEST_TIME_NOW / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(TEST_TIME_NOW, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalTime(12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalTime(14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalTime(0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.dayOfMonth()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 96,130
public void testSize() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(4, test.size()); [EOL] } <line_num>: 132,135
public void testGetFieldType_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1)); [EOL]     assertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2)); [EOL]     assertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 137,149
public void testGetFieldTypes() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertSame(DateTimeFieldType.secondOfMinute(), fields[2]); [EOL]     assertSame(DateTimeFieldType.millisOfSecond(), fields[3]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] } <line_num>: 151,159
public void testGetField_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC); [EOL]     assertSame(COPTIC_UTC.hourOfDay(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 161,173
public void testGetFields() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC); [EOL]     DateTimeField[] fields = test.getFields(); [EOL]     assertSame(COPTIC_UTC.hourOfDay(), fields[0]); [EOL]     assertSame(COPTIC_UTC.minuteOfHour(), fields[1]); [EOL]     assertSame(COPTIC_UTC.secondOfMinute(), fields[2]); [EOL]     assertSame(COPTIC_UTC.millisOfSecond(), fields[3]); [EOL]     assertNotSame(test.getFields(), test.getFields()); [EOL] } <line_num>: 175,183
public void testGetValue_int() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(10, test.getValue(0)); [EOL]     assertEquals(20, test.getValue(1)); [EOL]     assertEquals(30, test.getValue(2)); [EOL]     assertEquals(40, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 185,197
public void testGetValues() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(10, values[0]); [EOL]     assertEquals(20, values[1]); [EOL]     assertEquals(30, values[2]); [EOL]     assertEquals(40, values[3]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] } <line_num>: 199,207
public DurationFieldType getDurationType() { [EOL]     return DurationFieldType.hours(); [EOL] } <line_num>: 229,231
public DurationFieldType getRangeDurationType() { [EOL]     return null; [EOL] } <line_num>: 232,234
public DateTimeField getField(Chronology chronology) { [EOL]     return chronology.hourOfDay(); [EOL] } <line_num>: 235,237
public DurationFieldType getDurationType() { [EOL]     return DurationFieldType.hours(); [EOL] } <line_num>: 243,245
public DurationFieldType getRangeDurationType() { [EOL]     return DurationFieldType.years(); [EOL] } <line_num>: 246,248
public DateTimeField getField(Chronology chronology) { [EOL]     return chronology.hourOfDay(); [EOL] } <line_num>: 249,251
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL]     DateTimeFieldType d = new DateTimeFieldType("hours") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL]     d = new DateTimeFieldType("hourOfYear") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.hours(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return DurationFieldType.years(); [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return chronology.hourOfDay(); [EOL]         } [EOL]     }; [EOL]     assertEquals(false, test.isSupported(d)); [EOL] } <line_num>: 209,254
public void testIsSupported_DurationFieldType() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.halfdays())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] } <line_num>: 256,266
@SuppressWarnings("deprecation") [EOL] public void testEqualsHashCode() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     LocalTime test3 = new LocalTime(15, 20, 30, 40); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC))); [EOL]     assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode()); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] } <line_num>: 268,293
public Chronology getChronology() { [EOL]     return COPTIC_UTC; [EOL] } <line_num>: 296,298
public DateTimeField[] getFields() { [EOL]     return new DateTimeField[] { COPTIC_UTC.hourOfDay(), COPTIC_UTC.minuteOfHour(), COPTIC_UTC.secondOfMinute(), COPTIC_UTC.millisOfSecond() }; [EOL] } <line_num>: 299,306
public int[] getValues() { [EOL]     return new int[] { 10, 20, 30, 40 }; [EOL] } <line_num>: 307,309
@SuppressWarnings("deprecation") [EOL] public void testCompareTo() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     Partial p = new Partial(types, values); [EOL]     assertEquals(0, test1.compareTo(p)); [EOL]     assertEquals(0, test1.compareTo(new TimeOfDay(10, 20, 30, 40))); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 313,349
public void testIsEqual_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 352,373
public void testIsBefore_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 376,397
public void testIsAfter_LocalTime() { [EOL]     LocalTime test1 = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime test1a = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalTime test2 = new LocalTime(10, 20, 35, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalTime(10, 20, 35, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 400,421
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     assertEquals(new LocalTime(10, 20, 30, 40), test); [EOL]     assertEquals(new LocalTime(15, 20, 30, 40), result); [EOL] } <line_num>: 424,430
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 432,438
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.dayOfMonth(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 440,446
public void testWithField_DateTimeFieldType_int_4() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 10); [EOL]     assertSame(test, result); [EOL] } <line_num>: 448,452
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]     assertEquals(new LocalTime(10, 20, 30, 40), test); [EOL]     assertEquals(new LocalTime(16, 20, 30, 40), result); [EOL] } <line_num>: 455,461
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 463,469
public void testWithFieldAdded_DurationFieldType_int_3() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 471,477
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 479,483
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 485,491
public void testWithFieldAdded_DurationFieldType_int_6() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 16); [EOL]     assertEquals(new LocalTime(10, 20, 30, 40), test); [EOL]     assertEquals(new LocalTime(2, 20, 30, 40), result); [EOL] } <line_num>: 493,499
public void testWithFieldAdded_DurationFieldType_int_7() { [EOL]     LocalTime test = new LocalTime(23, 59, 59, 999); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.millis(), 1); [EOL]     assertEquals(new LocalTime(0, 0, 0, 0), result); [EOL]     test = new LocalTime(23, 59, 59, 999); [EOL]     result = test.withFieldAdded(DurationFieldType.seconds(), 1); [EOL]     assertEquals(new LocalTime(0, 0, 0, 999), result); [EOL]     test = new LocalTime(23, 59, 59, 999); [EOL]     result = test.withFieldAdded(DurationFieldType.minutes(), 1); [EOL]     assertEquals(new LocalTime(0, 0, 59, 999), result); [EOL]     test = new LocalTime(23, 59, 59, 999); [EOL]     result = test.withFieldAdded(DurationFieldType.hours(), 1); [EOL]     assertEquals(new LocalTime(0, 59, 59, 999), result); [EOL] } <line_num>: 501,517
public void testWithFieldAdded_DurationFieldType_int_8() { [EOL]     LocalTime test = new LocalTime(0, 0, 0, 0); [EOL]     LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 999), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.seconds(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 59, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.minutes(), -1); [EOL]     assertEquals(new LocalTime(23, 59, 0, 0), result); [EOL]     test = new LocalTime(0, 0, 0, 0); [EOL]     result = test.withFieldAdded(DurationFieldType.hours(), -1); [EOL]     assertEquals(new LocalTime(23, 0, 0, 0), result); [EOL] } <line_num>: 519,535
public void testPlus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 538,546
public void testPlusHours_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusHours(1); [EOL]     LocalTime expected = new LocalTime(2, 2, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 548,556
public void testPlusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 558,566
public void testPlusSeconds_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusSeconds(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 4, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 568,576
public void testPlusMillis_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.plusMillis(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 3, 5, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 578,586
public void testMinus_RP() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalTime expected = new LocalTime(9, 19, 29, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 589,597
public void testMinusHours_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusHours(1); [EOL]     LocalTime expected = new LocalTime(0, 2, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 599,607
public void testMinusMinutes_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMinutes(1); [EOL]     LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 609,617
public void testMinusSeconds_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusSeconds(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 2, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 619,627
public void testMinusMillis_int() { [EOL]     LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON); [EOL]     LocalTime result = test.minusMillis(1); [EOL]     LocalTime expected = new LocalTime(1, 2, 3, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 629,637
public void testGetters() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillisOfDay()); [EOL] } <line_num>: 640,647
public void testWithers() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 0, 1, 1, 234); [EOL]     try { [EOL]         test.withHourOfDay(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 650,665
public void testToDateTimeTodayDefaultZone() { [EOL]     LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 668,681
public void testToDateTimeToday_Zone() { [EOL]     LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday(TOKYO); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 684,697
public void testToDateTimeToday_nullZone() { [EOL]     LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeToday((DateTimeZone) null); [EOL]     check(base, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.hourOfDay().setCopy(10); [EOL]     expected = expected.minuteOfHour().setCopy(20); [EOL]     expected = expected.secondOfMinute().setCopy(30); [EOL]     expected = expected.millisOfSecond().setCopy(40); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 699,712
public void testToDateTime_RI() { [EOL]     LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20, 30, 40); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:30.040+01:00", test.toString()); [EOL] } <line_num>: 715,724
public void testToDateTime_nullRI() { [EOL]     LocalTime base = new LocalTime(1, 2, 3, 4); [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME2); [EOL]     DateTime test = base.toDateTime((ReadableInstant) null); [EOL]     check(base, 1, 2, 3, 4); [EOL]     assertEquals("1970-01-02T01:02:03.004+01:00", test.toString()); [EOL] } <line_num>: 726,733
public void testProperty() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime()); [EOL]     assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime()); [EOL]     try { [EOL]         test.property(DateTimeFieldType.dayOfWeek()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 736,760
public void testSerialization() throws Exception { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalTime result = (LocalTime) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] } <line_num>: 763,781
public void testToString() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10:20:30.040", test.toString()); [EOL] } <line_num>: 784,787
public void testToString_String() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString("yyyy HH")); [EOL]     assertEquals("10:20:30.040", test.toString((String) null)); [EOL] } <line_num>: 790,794
public void testToString_String_Locale() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20:30.040", test.toString(null, null)); [EOL] } <line_num>: 797,803
public void testToString_DTFormatter() { [EOL]     LocalTime test = new LocalTime(10, 20, 30, 40); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] } <line_num>: 806,810
private void check(LocalTime test, int hour, int min, int sec, int milli) { [EOL]     assertEquals(hour, test.getHourOfDay()); [EOL]     assertEquals(min, test.getMinuteOfHour()); [EOL]     assertEquals(sec, test.getSecondOfMinute()); [EOL]     assertEquals(milli, test.getMillisOfSecond()); [EOL] } <line_num>: 813,818
