public TestYearMonthDay_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 67,69
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 59,61
public static TestSuite suite() { [EOL]     return new TestSuite(TestYearMonthDay_Basics.class); [EOL] } <line_num>: 63,65
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 71,75
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 77,81
public void testGet() { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.hourOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 84,97
public void testSize() { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     assertEquals(3, test.size()); [EOL] } <line_num>: 99,102
public void testGetFieldType() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     assertSame(DateTimeFieldType.year(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1)); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 104,115
public void testGetFieldTypes() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] } <line_num>: 117,124
public void testGetField() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 126,137
public void testGetFields() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     DateTimeField[] fields = test.getFields(); [EOL]     assertSame(COPTIC_UTC.year(), fields[0]); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), fields[1]); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFields(), test.getFields()); [EOL] } <line_num>: 139,146
public void testGetValue() { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     assertEquals(1970, test.getValue(0)); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(9, test.getValue(2)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 148,159
public void testGetValues() { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(1970, values[0]); [EOL]     assertEquals(6, values[1]); [EOL]     assertEquals(9, values[2]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] } <line_num>: 161,168
public void testIsSupported() { [EOL]     YearMonthDay test = new YearMonthDay(COPTIC_PARIS); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] } <line_num>: 170,176
public void testEqualsHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     YearMonthDay test3 = new YearMonthDay(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] } <line_num>: 178,200
public Chronology getChronology() { [EOL]     return COPTIC_UTC; [EOL] } <line_num>: 203,205
public DateTimeField[] getFields() { [EOL]     return new DateTimeField[] { COPTIC_UTC.year(), COPTIC_UTC.monthOfYear(), COPTIC_UTC.dayOfMonth() }; [EOL] } <line_num>: 206,212
public int[] getValues() { [EOL]     return new int[] { 1970, 6, 9 }; [EOL] } <line_num>: 213,215
public void testCompareTo() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 6, 2); [EOL]     YearMonthDay test1a = new YearMonthDay(2005, 6, 2); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 7, 2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 2 }; [EOL]     Partial p = new Partial(types, values); [EOL]     assertEquals(0, test1.compareTo(p)); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL]     try { [EOL]         test1.compareTo(new TimeOfDay()); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     Partial partial = new Partial().with(DateTimeFieldType.centuryOfEra(), 1).with(DateTimeFieldType.halfdayOfDay(), 0).with(DateTimeFieldType.dayOfMonth(), 9); [EOL]     try { [EOL]         new YearMonthDay(1970, 6, 9).compareTo(partial); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL] } <line_num>: 219,264
public void testIsEqual_YMD() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 6, 2); [EOL]     YearMonthDay test1a = new YearMonthDay(2005, 6, 2); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 7, 2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new YearMonthDay(2005, 7, 2).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 267,288
public void testIsBefore_YMD() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 6, 2); [EOL]     YearMonthDay test1a = new YearMonthDay(2005, 6, 2); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 7, 2); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new YearMonthDay(2005, 7, 2).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 291,312
public void testIsAfter_YMD() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 6, 2); [EOL]     YearMonthDay test1a = new YearMonthDay(2005, 6, 2); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 7, 2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new YearMonthDay(2005, 7, 2).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 315,336
public void testWithChronologyRetainFields_Chrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] } <line_num>: 339,346
public void testWithChronologyRetainFields_sameChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] } <line_num>: 348,352
public void testWithChronologyRetainFields_nullChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     YearMonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 2005, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] } <line_num>: 354,361
public void testWithChronologyRetainFields_invalidInNewChrono() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 1, 31, ISO_UTC); [EOL]     try { [EOL]         base.withChronologyRetainFields(COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 363,371
public void testWithField1() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new YearMonthDay(2004, 6, 9), test); [EOL]     assertEquals(new YearMonthDay(2006, 6, 9), result); [EOL] } <line_num>: 374,380
public void testWithField2() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 382,388
public void testWithField3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 390,396
public void testWithField4() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new YearMonthDay(2004, 6, 9), test); [EOL]     assertSame(test, result); [EOL] } <line_num>: 398,403
public void testWithFieldAdded1() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new YearMonthDay(2004, 6, 9), test); [EOL]     assertEquals(new YearMonthDay(2010, 6, 9), result); [EOL] } <line_num>: 406,412
public void testWithFieldAdded2() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 414,420
public void testWithFieldAdded3() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 422,428
public void testWithFieldAdded4() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 430,434
public void testWithFieldAdded5() { [EOL]     YearMonthDay test = new YearMonthDay(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 436,442
public void testPlus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     YearMonthDay expected = new YearMonthDay(2003, 7, 7, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 445,453
public void testPlusYears_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusYears(1); [EOL]     YearMonthDay expected = new YearMonthDay(2003, 5, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 455,463
public void testPlusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 465,473
public void testPlusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.plusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 475,483
public void testMinus_RP() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 486,494
public void testMinusYears_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusYears(1); [EOL]     YearMonthDay expected = new YearMonthDay(2001, 5, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 496,504
public void testMinusMonths_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusMonths(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 506,514
public void testMinusDays_int() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance()); [EOL]     YearMonthDay result = test.minusDays(1); [EOL]     YearMonthDay expected = new YearMonthDay(2002, 5, 2, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 516,524
public void testToLocalDate() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_UTC); [EOL]     LocalDate test = base.toLocalDate(); [EOL]     assertEquals(new LocalDate(2005, 6, 9, COPTIC_UTC), test); [EOL] } <line_num>: 527,531
public void testToDateTimeAtMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] } <line_num>: 534,540
public void testToDateTimeAtMidnight_Zone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test); [EOL] } <line_num>: 543,549
public void testToDateTimeAtMidnight_nullZone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] } <line_num>: 551,557
public void testToDateTimeAtCurrentTime() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 560,572
public void testToDateTimeAtCurrentTime_Zone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 575,587
public void testToDateTimeAtCurrentTime_nullZone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 589,601
public void testToDateTime_TOD() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO); [EOL]     DateTime test = base.toDateTime(tod); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 604,612
public void testToDateTime_nullTOD() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_LONDON).getMillis(); [EOL]     DateTimeUtils.setCurrentMillisFixed(now); [EOL]     DateTime test = base.toDateTime((TimeOfDay) null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 614,623
public void testToDateTime_TOD_Zone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO); [EOL]     DateTime test = base.toDateTime(tod, TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 626,634
public void testToDateTime_TOD_nullZone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO); [EOL]     DateTime test = base.toDateTime(tod, null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 636,644
public void testToDateTime_nullTOD_Zone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_TOKYO).getMillis(); [EOL]     DateTimeUtils.setCurrentMillisFixed(now); [EOL]     DateTime test = base.toDateTime((TimeOfDay) null, TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 646,655
public void testToDateMidnight() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] } <line_num>: 658,664
public void testToDateMidnight_Zone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_TOKYO), test); [EOL] } <line_num>: 667,673
public void testToDateMidnight_nullZone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] } <line_num>: 675,681
public void testToDateTime_RI() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = dt; [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 684,695
public void testToDateTime_nullRI() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTime((ReadableInstant) null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = dt; [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 697,709
public void testToInterval() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 712,720
public void testToInterval_Zone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT, TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 723,731
public void testToInterval_nullZone() { [EOL]     YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT, LONDON); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 733,741
public void testWithers() { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 744,757
public void testProperty() { [EOL]     YearMonthDay test = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 760,773
public void testSerialization() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     YearMonthDay result = (YearMonthDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] } <line_num>: 776,794
public void testToString() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("2002-06-09", test.toString()); [EOL] } <line_num>: 797,800
public void testToString_String() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("2002 \ufffd\ufffd", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06-09", test.toString((String) null)); [EOL] } <line_num>: 803,807
public void testToString_String_Locale() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09", test.toString(null, null)); [EOL] } <line_num>: 810,817
public void testToString_DTFormatter() { [EOL]     YearMonthDay test = new YearMonthDay(2002, 6, 9); [EOL]     assertEquals("2002 \ufffd\ufffd", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09", test.toString((DateTimeFormatter) null)); [EOL] } <line_num>: 820,824
private void check(YearMonthDay test, int hour, int min, int sec) { [EOL]     assertEquals(hour, test.getYear()); [EOL]     assertEquals(min, test.getMonthOfYear()); [EOL]     assertEquals(sec, test.getDayOfMonth()); [EOL] } <line_num>: 827,831
