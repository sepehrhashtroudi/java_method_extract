public TestLocalDate_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 69,71
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 61,63
public static TestSuite suite() { [EOL]     return new TestSuite(TestLocalDate_Constructors.class); [EOL] } <line_num>: 65,67
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 73,77
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 79,83
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010-06-30")); [EOL]     assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse("2010-002")); [EOL] } <line_num>: 86,89
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--dd MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse("2010--30 06", f)); [EOL] } <line_num>: 91,94
public void testFactory_fromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1970, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromCalendarFields(cal)); [EOL] } <line_num>: 97,102
public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(0, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromCalendarFields(cal)); [EOL] } <line_num>: 104,110
public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(-2, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromCalendarFields(cal)); [EOL] } <line_num>: 112,118
public void testFactory_fromCalendarFields_null() throws Exception { [EOL]     try { [EOL]         LocalDate.fromCalendarFields((Calendar) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 120,125
public void testFactory_fromDateFields_after1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1970, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromDateFields(cal.getTime())); [EOL] } <line_num>: 128,133
public void testFactory_fromDateFields_before1970() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(1969, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromDateFields(cal.getTime())); [EOL] } <line_num>: 135,140
public void testFactory_fromDateFields_beforeYearZero1() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(0, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromDateFields(cal.getTime())); [EOL] } <line_num>: 142,148
public void testFactory_fromDateFields_beforeYearZero3() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.ERA, GregorianCalendar.BC); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     LocalDate expected = new LocalDate(-2, 2, 3); [EOL]     assertEquals(expected, LocalDate.fromDateFields(cal.getTime())); [EOL] } <line_num>: 150,156
public void testFactory_fromDateFields_null() throws Exception { [EOL]     try { [EOL]         LocalDate.fromDateFields((Date) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 158,163
public void testConstructor() throws Throwable { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now()); [EOL] } <line_num>: 166,173
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalDate test = new LocalDate(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now(LONDON)); [EOL]     test = new LocalDate(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now(PARIS)); [EOL] } <line_num>: 175,193
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     LocalDate test = new LocalDate((DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL] } <line_num>: 195,205
public void testConstructor_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, LocalDate.now(GREGORIAN_PARIS)); [EOL] } <line_num>: 207,214
public void testConstructor_nullChronology() throws Throwable { [EOL]     LocalDate test = new LocalDate((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 216,222
public void testConstructor_long1() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 225,231
public void testConstructor_long2() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME2); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1971, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(7, test.getDayOfMonth()); [EOL] } <line_num>: 233,239
public void testConstructor_long1_DateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME1, PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL]     assertEquals(TEST_TIME1_ROUNDED, test.getLocalMillis()); [EOL] } <line_num>: 241,248
public void testConstructor_long2_DateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME2, PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1971, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(7, test.getDayOfMonth()); [EOL] } <line_num>: 250,256
public void testConstructor_long3_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2006, 6, 9, 0, 0, 0, 0, PARIS); [EOL]     DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     LocalDate test = new LocalDate(dt.getMillis(), PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2006, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(dtUTC.getMillis(), test.getLocalMillis()); [EOL] } <line_num>: 258,268
public void testConstructor_long4_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2006, 6, 9, 23, 59, 59, 999, PARIS); [EOL]     DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     LocalDate test = new LocalDate(dt.getMillis(), PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2006, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(dtUTC.getMillis(), test.getLocalMillis()); [EOL] } <line_num>: 270,280
public void testConstructor_long_nullDateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME1, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 282,288
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 290,296
public void testConstructor_long2_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1971, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(7, test.getDayOfMonth()); [EOL] } <line_num>: 298,304
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(TEST_TIME1, (Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 306,312
public void testConstructor_Object1() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDate test = new LocalDate(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 315,322
public void testConstructor_nullObject() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 324,330
public void testConstructor_ObjectString1() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-04-06"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 332,338
public void testConstructor_ObjectString2() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-037"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 340,346
public void testConstructor_ObjectString3() throws Throwable { [EOL]     LocalDate test = new LocalDate("1972-02"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(2, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL] } <line_num>: 348,354
public void testConstructor_ObjectStringEx1() throws Throwable { [EOL]     try { [EOL]         new LocalDate("1970-04-06T+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 356,361
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new LocalDate("1970-04-06T10:20:30.040"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 363,368
public void testConstructor_ObjectStringEx3() throws Throwable { [EOL]     try { [EOL]         new LocalDate("1970-04-06T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 370,375
public void testConstructor_ObjectStringEx4() throws Throwable { [EOL]     try { [EOL]         new LocalDate("T10:20:30.040"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 377,382
public void testConstructor_ObjectStringEx5() throws Throwable { [EOL]     try { [EOL]         new LocalDate("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 384,389
public void testConstructor_ObjectStringEx6() throws Throwable { [EOL]     try { [EOL]         new LocalDate("10:20:30.040"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 391,396
public void testConstructor_ObjectStringEx7() throws Throwable { [EOL]     try { [EOL]         new LocalDate("10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 398,403
public void testConstructor_ObjectLocalDate() throws Throwable { [EOL]     LocalDate date = new LocalDate(1970, 4, 6, BUDDHIST_UTC); [EOL]     LocalDate test = new LocalDate(date); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 405,412
public void testConstructor_ObjectLocalTime() throws Throwable { [EOL]     LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC); [EOL]     try { [EOL]         new LocalDate(time); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 414,420
public void testConstructor_ObjectLocalDateTime() throws Throwable { [EOL]     LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC); [EOL]     LocalDate test = new LocalDate(dt); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 422,429
@SuppressWarnings("deprecation") [EOL] public void testConstructor_ObjectYearMonthDay() throws Throwable { [EOL]     YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC); [EOL]     LocalDate test = new LocalDate(date); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 431,439
public void testConstructor_Object_DateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDate test = new LocalDate(date, PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 442,449
public void testConstructor_nullObject_DateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null, PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 451,457
public void testConstructor_Object_nullDateTimeZone() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDate test = new LocalDate(date, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 459,466
public void testConstructor_nullObject_nullDateTimeZone() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null, (DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 468,474
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDate test = new LocalDate(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 476,483
public void testConstructor_Object_Chronology_crossChronology() throws Throwable { [EOL]     LocalDate input = new LocalDate(1970, 4, 6, ISO_UTC); [EOL]     LocalDate test = new LocalDate(input, BUDDHIST_UTC); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 485,492
public void testConstructor_nullObject_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 494,500
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     LocalDate test = new LocalDate(date, (Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 502,509
public void testConstructor_nullObject_nullChronology() throws Throwable { [EOL]     LocalDate test = new LocalDate((Object) null, (Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 511,517
public void testConstructor_int_int_int() throws Throwable { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new LocalDate(Integer.MIN_VALUE, 6, 9); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(Integer.MAX_VALUE, 6, 9); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(1970, 0, 9); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(1970, 13, 9); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(1970, 6, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(1970, 6, 31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new LocalDate(1970, 7, 31); [EOL]     try { [EOL]         new LocalDate(1970, 7, 32); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 520,555
public void testConstructor_int_int_int_Chronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new LocalDate(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(1970, 0, 9, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(1970, 13, 9, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(1970, 6, 0, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new LocalDate(1970, 6, 31, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new LocalDate(1970, 7, 31, GREGORIAN_PARIS); [EOL]     try { [EOL]         new LocalDate(1970, 7, 32, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 557,592
public void testConstructor_int_int_int_nullChronology() throws Throwable { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 594,600
