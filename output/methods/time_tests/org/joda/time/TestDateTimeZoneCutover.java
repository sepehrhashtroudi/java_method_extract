public TestDateTimeZoneCutover(String name) { [EOL]     super(name); [EOL] } <line_num>: 39,41
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 31,33
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTimeZoneCutover.class); [EOL] } <line_num>: 35,37
protected void setUp() throws Exception { [EOL] } <line_num>: 43,44
protected void tearDown() throws Exception { [EOL] } <line_num>: 46,47
public void test_MockGazaIsCorrect() { [EOL]     DateTime pre = new DateTime(CUTOVER_GAZA - 1L, MOCK_GAZA); [EOL]     assertEquals("2007-03-31T23:59:59.999+02:00", pre.toString()); [EOL]     DateTime at = new DateTime(CUTOVER_GAZA, MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", at.toString()); [EOL]     DateTime post = new DateTime(CUTOVER_GAZA + 1L, MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.001+03:00", post.toString()); [EOL] } <line_num>: 61,68
public void test_getOffsetFromLocal_Gaza() { [EOL]     doTest_getOffsetFromLocal_Gaza(-1, 23, 0, "2007-03-31T23:00:00.000+02:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(-1, 23, 30, "2007-03-31T23:30:00.000+02:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 0, 0, "2007-04-01T01:00:00.000+03:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 0, 30, "2007-04-01T01:30:00.000+03:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 1, 0, "2007-04-01T01:00:00.000+03:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 1, 30, "2007-04-01T01:30:00.000+03:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 2, 0, "2007-04-01T02:00:00.000+03:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 3, 0, "2007-04-01T03:00:00.000+03:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 4, 0, "2007-04-01T04:00:00.000+03:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 5, 0, "2007-04-01T05:00:00.000+03:00"); [EOL]     doTest_getOffsetFromLocal_Gaza(0, 6, 0, "2007-04-01T06:00:00.000+03:00"); [EOL] } <line_num>: 70,82
private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) { [EOL]     DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days); [EOL]     int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis()); [EOL]     DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA); [EOL]     assertEquals(res.toString(), expected, res.toString()); [EOL] } <line_num>: 84,89
public void test_DateTime_roundFloor_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-04-01T08:00:00.000+03:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundFloorCopy(); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", rounded.toString()); [EOL] } <line_num>: 91,96
public void test_DateTime_roundCeiling_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-03-31T20:00:00.000+02:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundCeilingCopy(); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", rounded.toString()); [EOL] } <line_num>: 98,103
public void test_DateTime_setHourZero_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-04-01T08:00:00.000+03:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 105,114
public void test_DateTime_withHourZero_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-04-01T08:00:00.000+03:00", dt.toString()); [EOL]     try { [EOL]         dt.withHourOfDay(0); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 116,125
public void test_DateTime_withDay_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-04-02T00:00:00.000+03:00", dt.toString()); [EOL]     DateTime res = dt.withDayOfMonth(1); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", res.toString()); [EOL] } <line_num>: 127,132
public void test_DateTime_minusHour_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-04-01T08:00:00.000+03:00", dt.toString()); [EOL]     DateTime minus7 = dt.minusHours(7); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", minus7.toString()); [EOL]     DateTime minus8 = dt.minusHours(8); [EOL]     assertEquals("2007-03-31T23:00:00.000+02:00", minus8.toString()); [EOL]     DateTime minus9 = dt.minusHours(9); [EOL]     assertEquals("2007-03-31T22:00:00.000+02:00", minus9.toString()); [EOL] } <line_num>: 134,144
public void test_DateTime_plusHour_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-03-31T16:00:00.000+02:00", dt.toString()); [EOL]     DateTime plus7 = dt.plusHours(7); [EOL]     assertEquals("2007-03-31T23:00:00.000+02:00", plus7.toString()); [EOL]     DateTime plus8 = dt.plusHours(8); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", plus8.toString()); [EOL]     DateTime plus9 = dt.plusHours(9); [EOL]     assertEquals("2007-04-01T02:00:00.000+03:00", plus9.toString()); [EOL] } <line_num>: 146,156
public void test_DateTime_minusDay_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-04-02T00:00:00.000+03:00", dt.toString()); [EOL]     DateTime minus1 = dt.minusDays(1); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", minus1.toString()); [EOL]     DateTime minus2 = dt.minusDays(2); [EOL]     assertEquals("2007-03-31T00:00:00.000+02:00", minus2.toString()); [EOL] } <line_num>: 158,166
public void test_DateTime_plusDay_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-03-31T00:00:00.000+02:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:00:00.000+03:00", plus2.toString()); [EOL] } <line_num>: 168,176
public void test_DateTime_plusDayMidGap_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-03-31T00:30:00.000+02:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000+03:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000+03:00", plus2.toString()); [EOL] } <line_num>: 178,186
public void test_DateTime_addWrapFieldDay_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_GAZA); [EOL]     assertEquals("2007-04-30T00:00:00.000+03:00", dt.toString()); [EOL]     DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", plus1.toString()); [EOL]     DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2); [EOL]     assertEquals("2007-04-02T00:00:00.000+03:00", plus2.toString()); [EOL] } <line_num>: 188,196
public void test_DateTime_withZoneRetainFields_Gaza() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     DateTime res = dt.withZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", res.toString()); [EOL] } <line_num>: 198,204
public void test_MutableDateTime_withZoneRetainFields_Gaza() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_GAZA); [EOL]     assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString()); [EOL] } <line_num>: 206,212
public void test_LocalDate_new_Gaza() { [EOL]     LocalDate date1 = new LocalDate(CUTOVER_GAZA, MOCK_GAZA); [EOL]     assertEquals("2007-04-01", date1.toString()); [EOL]     LocalDate date2 = new LocalDate(CUTOVER_GAZA - 1, MOCK_GAZA); [EOL]     assertEquals("2007-03-31", date2.toString()); [EOL] } <line_num>: 214,220
public void test_LocalDate_toDateMidnight_Gaza() { [EOL]     LocalDate date = new LocalDate(2007, 4, 1); [EOL]     try { [EOL]         date.toDateMidnight(MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition")); [EOL]     } [EOL] } <line_num>: 222,230
public void test_DateTime_new_Gaza() { [EOL]     try { [EOL]         new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0); [EOL]     } [EOL] } <line_num>: 232,239
public void test_DateTime_newValid_Gaza() { [EOL]     new DateTime(2007, 3, 31, 19, 0, 0, 0, MOCK_GAZA); [EOL]     new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA); [EOL]     new DateTime(2007, 3, 31, 21, 0, 0, 0, MOCK_GAZA); [EOL]     new DateTime(2007, 3, 31, 22, 0, 0, 0, MOCK_GAZA); [EOL]     new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_GAZA); [EOL]     new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA); [EOL]     new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_GAZA); [EOL]     new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_GAZA); [EOL] } <line_num>: 241,250
public void test_DateTime_parse_Gaza() { [EOL]     try { [EOL]         new DateTime("2007-04-01T00:00", MOCK_GAZA); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0); [EOL]     } [EOL] } <line_num>: 252,259
public void test_MockTurkIsCorrect() { [EOL]     DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK); [EOL]     assertEquals("2007-03-31T23:59:59.999-05:00", pre.toString()); [EOL]     DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", at.toString()); [EOL]     DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK); [EOL]     assertEquals("2007-04-01T01:00:00.001-04:00", post.toString()); [EOL] } <line_num>: 270,277
public void test_getOffsetFromLocal_Turk() { [EOL]     doTest_getOffsetFromLocal_Turk(-1, 23, 0, "2007-03-31T23:00:00.000-05:00"); [EOL]     doTest_getOffsetFromLocal_Turk(-1, 23, 30, "2007-03-31T23:30:00.000-05:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 0, 0, "2007-04-01T01:00:00.000-04:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 0, 30, "2007-04-01T01:30:00.000-04:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 1, 0, "2007-04-01T01:00:00.000-04:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 1, 30, "2007-04-01T01:30:00.000-04:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 2, 0, "2007-04-01T02:00:00.000-04:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 3, 0, "2007-04-01T03:00:00.000-04:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 4, 0, "2007-04-01T04:00:00.000-04:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 5, 0, "2007-04-01T05:00:00.000-04:00"); [EOL]     doTest_getOffsetFromLocal_Turk(0, 6, 0, "2007-04-01T06:00:00.000-04:00"); [EOL] } <line_num>: 279,291
private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) { [EOL]     DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days); [EOL]     int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis()); [EOL]     DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK); [EOL]     assertEquals(res.toString(), expected, res.toString()); [EOL] } <line_num>: 293,298
public void test_DateTime_roundFloor_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-01T08:00:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundFloorCopy(); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 300,305
public void test_DateTime_roundFloorNotDST_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 2, 8, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-02T08:00:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundFloorCopy(); [EOL]     assertEquals("2007-04-02T00:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 307,312
public void test_DateTime_roundCeiling_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T20:00:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundCeilingCopy(); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 314,319
public void test_DateTime_setHourZero_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-01T08:00:00.000-04:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 321,330
public void test_DateTime_withHourZero_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-01T08:00:00.000-04:00", dt.toString()); [EOL]     try { [EOL]         dt.withHourOfDay(0); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 332,341
public void test_DateTime_withDay_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-02T00:00:00.000-04:00", dt.toString()); [EOL]     DateTime res = dt.withDayOfMonth(1); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", res.toString()); [EOL] } <line_num>: 343,348
public void test_DateTime_minusHour_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-01T08:00:00.000-04:00", dt.toString()); [EOL]     DateTime minus7 = dt.minusHours(7); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", minus7.toString()); [EOL]     DateTime minus8 = dt.minusHours(8); [EOL]     assertEquals("2007-03-31T23:00:00.000-05:00", minus8.toString()); [EOL]     DateTime minus9 = dt.minusHours(9); [EOL]     assertEquals("2007-03-31T22:00:00.000-05:00", minus9.toString()); [EOL] } <line_num>: 350,360
public void test_DateTime_plusHour_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T16:00:00.000-05:00", dt.toString()); [EOL]     DateTime plus7 = dt.plusHours(7); [EOL]     assertEquals("2007-03-31T23:00:00.000-05:00", plus7.toString()); [EOL]     DateTime plus8 = dt.plusHours(8); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", plus8.toString()); [EOL]     DateTime plus9 = dt.plusHours(9); [EOL]     assertEquals("2007-04-01T02:00:00.000-04:00", plus9.toString()); [EOL] } <line_num>: 362,372
public void test_DateTime_minusDay_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-02T00:00:00.000-04:00", dt.toString()); [EOL]     DateTime minus1 = dt.minusDays(1); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", minus1.toString()); [EOL]     DateTime minus2 = dt.minusDays(2); [EOL]     assertEquals("2007-03-31T00:00:00.000-05:00", minus2.toString()); [EOL] } <line_num>: 374,382
public void test_DateTime_plusDay_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:00:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:00:00.000-04:00", plus2.toString()); [EOL] } <line_num>: 384,392
public void test_DateTime_plusDayMidGap_Turk() { [EOL]     DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusDays(1); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusDays(2); [EOL]     assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString()); [EOL] } <line_num>: 394,402
public void test_DateTime_addWrapFieldDay_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_TURK); [EOL]     assertEquals("2007-04-30T00:00:00.000-04:00", dt.toString()); [EOL]     DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", plus1.toString()); [EOL]     DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2); [EOL]     assertEquals("2007-04-02T00:00:00.000-04:00", plus2.toString()); [EOL] } <line_num>: 404,412
public void test_DateTime_withZoneRetainFields_Turk() { [EOL]     DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     DateTime res = dt.withZoneRetainFields(MOCK_TURK); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", res.toString()); [EOL] } <line_num>: 414,420
public void test_MutableDateTime_setZoneRetainFields_Turk() { [EOL]     MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals("2007-04-01T00:00:00.000Z", dt.toString()); [EOL]     dt.setZoneRetainFields(MOCK_TURK); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", dt.toString()); [EOL] } <line_num>: 422,428
public void test_LocalDate_new_Turk() { [EOL]     LocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK); [EOL]     assertEquals("2007-04-01", date1.toString()); [EOL]     LocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK); [EOL]     assertEquals("2007-03-31", date2.toString()); [EOL] } <line_num>: 430,436
public void test_LocalDate_toDateMidnight_Turk() { [EOL]     LocalDate date = new LocalDate(2007, 4, 1); [EOL]     try { [EOL]         date.toDateMidnight(MOCK_TURK); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition")); [EOL]     } [EOL] } <line_num>: 438,446
public void test_DateTime_new_Turk() { [EOL]     try { [EOL]         new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_TURK); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0); [EOL]     } [EOL] } <line_num>: 448,455
public void test_DateTime_newValid_Turk() { [EOL]     new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_TURK); [EOL]     new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_TURK); [EOL]     new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_TURK); [EOL]     new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_TURK); [EOL]     new DateTime(2007, 4, 1, 4, 0, 0, 0, MOCK_TURK); [EOL]     new DateTime(2007, 4, 1, 5, 0, 0, 0, MOCK_TURK); [EOL]     new DateTime(2007, 4, 1, 6, 0, 0, 0, MOCK_TURK); [EOL] } <line_num>: 457,465
public void test_DateTime_parse_Turk() { [EOL]     try { [EOL]         new DateTime("2007-04-01T00:00", MOCK_TURK); [EOL]         fail(); [EOL]     } catch (IllegalInstantException ex) { [EOL]         assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0); [EOL]     } [EOL] } <line_num>: 467,474
public void test_NewYorkIsCorrect_Spring() { [EOL]     DateTime pre = new DateTime(CUTOVER_NEW_YORK_SPRING - 1L, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:59:59.999-05:00", pre.toString()); [EOL]     DateTime at = new DateTime(CUTOVER_NEW_YORK_SPRING, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", at.toString()); [EOL]     DateTime post = new DateTime(CUTOVER_NEW_YORK_SPRING + 1L, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:00:00.001-04:00", post.toString()); [EOL] } <line_num>: 488,495
public void test_getOffsetFromLocal_NewYork_Spring() { [EOL]     doTest_getOffsetFromLocal(3, 11, 1, 0, "2007-03-11T01:00:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 1, 30, "2007-03-11T01:30:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 2, 0, "2007-03-11T03:00:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 2, 30, "2007-03-11T03:30:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 3, 0, "2007-03-11T03:00:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 3, 30, "2007-03-11T03:30:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 4, 0, "2007-03-11T04:00:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 5, 0, "2007-03-11T05:00:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 6, 0, "2007-03-11T06:00:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 7, 0, "2007-03-11T07:00:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(3, 11, 8, 0, "2007-03-11T08:00:00.000-04:00", ZONE_NEW_YORK); [EOL] } <line_num>: 497,511
public void test_DateTime_setHourAcross_NewYork_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T00:00:00.000-05:00", dt.toString()); [EOL]     DateTime res = dt.hourOfDay().setCopy(4); [EOL]     assertEquals("2007-03-11T04:00:00.000-04:00", res.toString()); [EOL] } <line_num>: 513,518
public void test_DateTime_setHourForward_NewYork_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T00:00:00.000-05:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 520,530
public void test_DateTime_setHourBack_NewYork_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 8, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T08:00:00.000-04:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 532,542
public void test_DateTime_roundFloor_day_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T00:00:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 545,550
public void test_DateTime_roundFloor_day_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T00:00:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 552,557
public void test_DateTime_roundFloor_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T01:00:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 559,564
public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 566,571
public void test_DateTime_roundFloor_minute_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:40.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.minuteOfHour().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 573,578
public void test_DateTime_roundFloor_minute_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:40.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.minuteOfHour().roundFloorCopy(); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 580,585
public void test_DateTime_roundCeiling_day_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundCeilingCopy(); [EOL]     assertEquals("2007-03-12T00:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 588,593
public void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundCeilingCopy(); [EOL]     assertEquals("2007-03-12T00:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 595,600
public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 602,607
public void test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T04:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 609,614
public void test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T01:30:40.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.minuteOfHour().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T01:31:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 616,621
public void test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-03-11T03:30:40.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.minuteOfHour().roundCeilingCopy(); [EOL]     assertEquals("2007-03-11T03:31:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 623,628
public void test_NewYorkIsCorrect_Autumn() { [EOL]     DateTime pre = new DateTime(CUTOVER_NEW_YORK_AUTUMN - 1L, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:59:59.999-04:00", pre.toString()); [EOL]     DateTime at = new DateTime(CUTOVER_NEW_YORK_AUTUMN, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:00:00.000-05:00", at.toString()); [EOL]     DateTime post = new DateTime(CUTOVER_NEW_YORK_AUTUMN + 1L, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:00:00.001-05:00", post.toString()); [EOL] } <line_num>: 635,642
public void test_getOffsetFromLocal_NewYork_Autumn() { [EOL]     doTest_getOffsetFromLocal(11, 4, 0, 0, "2007-11-04T00:00:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 0, 30, "2007-11-04T00:30:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 1, 0, "2007-11-04T01:00:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 1, 30, "2007-11-04T01:30:00.000-04:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 2, 0, "2007-11-04T02:00:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 2, 30, "2007-11-04T02:30:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 3, 0, "2007-11-04T03:00:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 3, 30, "2007-11-04T03:30:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 4, 0, "2007-11-04T04:00:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 5, 0, "2007-11-04T05:00:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 6, 0, "2007-11-04T06:00:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 7, 0, "2007-11-04T07:00:00.000-05:00", ZONE_NEW_YORK); [EOL]     doTest_getOffsetFromLocal(11, 4, 8, 0, "2007-11-04T08:00:00.000-05:00", ZONE_NEW_YORK); [EOL] } <line_num>: 644,660
public void test_DateTime_constructor_NewYork_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString()); [EOL] } <line_num>: 662,665
public void test_DateTime_plusHour_NewYork_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-03T18:00:00.000-04:00", dt.toString()); [EOL]     DateTime plus6 = dt.plusHours(6); [EOL]     assertEquals("2007-11-04T00:00:00.000-04:00", plus6.toString()); [EOL]     DateTime plus7 = dt.plusHours(7); [EOL]     assertEquals("2007-11-04T01:00:00.000-04:00", plus7.toString()); [EOL]     DateTime plus8 = dt.plusHours(8); [EOL]     assertEquals("2007-11-04T01:00:00.000-05:00", plus8.toString()); [EOL]     DateTime plus9 = dt.plusHours(9); [EOL]     assertEquals("2007-11-04T02:00:00.000-05:00", plus9.toString()); [EOL] } <line_num>: 667,679
public void test_DateTime_minusHour_NewYork_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T08:00:00.000-05:00", dt.toString()); [EOL]     DateTime minus6 = dt.minusHours(6); [EOL]     assertEquals("2007-11-04T02:00:00.000-05:00", minus6.toString()); [EOL]     DateTime minus7 = dt.minusHours(7); [EOL]     assertEquals("2007-11-04T01:00:00.000-05:00", minus7.toString()); [EOL]     DateTime minus8 = dt.minusHours(8); [EOL]     assertEquals("2007-11-04T01:00:00.000-04:00", minus8.toString()); [EOL]     DateTime minus9 = dt.minusHours(9); [EOL]     assertEquals("2007-11-04T00:00:00.000-04:00", minus9.toString()); [EOL] } <line_num>: 681,693
public void test_DateTime_roundFloor_day_NewYork_Autumn_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundFloorCopy(); [EOL]     assertEquals("2007-11-04T00:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 696,701
public void test_DateTime_roundFloor_day_NewYork_Autumn_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1); [EOL]     assertEquals("2007-11-04T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundFloorCopy(); [EOL]     assertEquals("2007-11-04T00:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 703,708
public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-11-04T01:00:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 710,715
public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1); [EOL]     assertEquals("2007-11-04T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2007-11-04T01:00:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 717,722
public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:40.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.minuteOfHour().roundFloorCopy(); [EOL]     assertEquals("2007-11-04T01:30:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 724,729
public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1); [EOL]     assertEquals("2007-11-04T01:30:40.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.minuteOfHour().roundFloorCopy(); [EOL]     assertEquals("2007-11-04T01:30:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 731,736
public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:40.500-04:00", dt.toString()); [EOL]     DateTime rounded = dt.secondOfMinute().roundFloorCopy(); [EOL]     assertEquals("2007-11-04T01:30:40.000-04:00", rounded.toString()); [EOL] } <line_num>: 738,743
public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1); [EOL]     assertEquals("2007-11-04T01:30:40.500-05:00", dt.toString()); [EOL]     DateTime rounded = dt.secondOfMinute().roundFloorCopy(); [EOL]     assertEquals("2007-11-04T01:30:40.000-05:00", rounded.toString()); [EOL] } <line_num>: 745,750
public void test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundCeilingCopy(); [EOL]     assertEquals("2007-11-05T00:00:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 753,758
public void test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1); [EOL]     assertEquals("2007-11-04T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.dayOfMonth().roundCeilingCopy(); [EOL]     assertEquals("2007-11-05T00:00:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 760,765
public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-11-04T01:00:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 767,772
public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1); [EOL]     assertEquals("2007-11-04T01:30:00.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2007-11-04T02:00:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 774,779
public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:40.000-04:00", dt.toString()); [EOL]     DateTime rounded = dt.minuteOfHour().roundCeilingCopy(); [EOL]     assertEquals("2007-11-04T01:31:00.000-04:00", rounded.toString()); [EOL] } <line_num>: 781,786
public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1); [EOL]     assertEquals("2007-11-04T01:30:40.000-05:00", dt.toString()); [EOL]     DateTime rounded = dt.minuteOfHour().roundCeilingCopy(); [EOL]     assertEquals("2007-11-04T01:31:00.000-05:00", rounded.toString()); [EOL] } <line_num>: 788,793
public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:40.500-04:00", dt.toString()); [EOL]     DateTime rounded = dt.secondOfMinute().roundCeilingCopy(); [EOL]     assertEquals("2007-11-04T01:30:41.000-04:00", rounded.toString()); [EOL] } <line_num>: 795,800
public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover() { [EOL]     DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1); [EOL]     assertEquals("2007-11-04T01:30:40.500-05:00", dt.toString()); [EOL]     DateTime rounded = dt.secondOfMinute().roundCeilingCopy(); [EOL]     assertEquals("2007-11-04T01:30:41.000-05:00", rounded.toString()); [EOL] } <line_num>: 802,807
public void test_MoscowIsCorrect_Spring() { [EOL]     DateTime pre = new DateTime(CUTOVER_MOSCOW_SPRING - 1L, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T01:59:59.999+03:00", pre.toString()); [EOL]     DateTime at = new DateTime(CUTOVER_MOSCOW_SPRING, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T03:00:00.000+04:00", at.toString()); [EOL]     DateTime post = new DateTime(CUTOVER_MOSCOW_SPRING + 1L, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T03:00:00.001+04:00", post.toString()); [EOL] } <line_num>: 815,826
public void test_getOffsetFromLocal_Moscow_Spring() { [EOL]     doTest_getOffsetFromLocal(3, 25, 1, 0, "2007-03-25T01:00:00.000+03:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 1, 30, "2007-03-25T01:30:00.000+03:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 2, 0, "2007-03-25T03:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 2, 30, "2007-03-25T03:30:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 3, 0, "2007-03-25T03:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 3, 30, "2007-03-25T03:30:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 4, 0, "2007-03-25T04:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 5, 0, "2007-03-25T05:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 6, 0, "2007-03-25T06:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 7, 0, "2007-03-25T07:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(3, 25, 8, 0, "2007-03-25T08:00:00.000+04:00", ZONE_MOSCOW); [EOL] } <line_num>: 828,842
public void test_DateTime_setHourAcross_Moscow_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T00:00:00.000+03:00", dt.toString()); [EOL]     DateTime res = dt.hourOfDay().setCopy(4); [EOL]     assertEquals("2007-03-25T04:00:00.000+04:00", res.toString()); [EOL] } <line_num>: 844,849
public void test_DateTime_setHourForward_Moscow_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T00:00:00.000+03:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 851,861
public void test_DateTime_setHourBack_Moscow_Spring() { [EOL]     DateTime dt = new DateTime(2007, 3, 25, 8, 0, 0, 0, ZONE_MOSCOW); [EOL]     assertEquals("2007-03-25T08:00:00.000+04:00", dt.toString()); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 863,873
public void test_MoscowIsCorrect_Autumn() { [EOL]     DateTime pre = new DateTime(CUTOVER_MOSCOW_AUTUMN - 1L, ZONE_MOSCOW); [EOL]     assertEquals("2007-10-28T02:59:59.999+04:00", pre.toString()); [EOL]     DateTime at = new DateTime(CUTOVER_MOSCOW_AUTUMN, ZONE_MOSCOW); [EOL]     assertEquals("2007-10-28T02:00:00.000+03:00", at.toString()); [EOL]     DateTime post = new DateTime(CUTOVER_MOSCOW_AUTUMN + 1L, ZONE_MOSCOW); [EOL]     assertEquals("2007-10-28T02:00:00.001+03:00", post.toString()); [EOL] } <line_num>: 880,887
public void test_getOffsetFromLocal_Moscow_Autumn() { [EOL]     doTest_getOffsetFromLocal(10, 28, 0, 0, "2007-10-28T00:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 0, 30, "2007-10-28T00:30:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 1, 0, "2007-10-28T01:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 1, 30, "2007-10-28T01:30:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 2, 0, "2007-10-28T02:00:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 2, 30, "2007-10-28T02:30:00.000+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 2, 30, 59, 999, "2007-10-28T02:30:59.999+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 2, 59, 59, 998, "2007-10-28T02:59:59.998+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 2, 59, 59, 999, "2007-10-28T02:59:59.999+04:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 3, 0, "2007-10-28T03:00:00.000+03:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 3, 30, "2007-10-28T03:30:00.000+03:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 4, 0, "2007-10-28T04:00:00.000+03:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 5, 0, "2007-10-28T05:00:00.000+03:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 6, 0, "2007-10-28T06:00:00.000+03:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 7, 0, "2007-10-28T07:00:00.000+03:00", ZONE_MOSCOW); [EOL]     doTest_getOffsetFromLocal(10, 28, 8, 0, "2007-10-28T08:00:00.000+03:00", ZONE_MOSCOW); [EOL] } <line_num>: 889,908
public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() { [EOL]     for (int min = 0; min < 60; min++) { [EOL]         if (min < 10) { [EOL]             doTest_getOffsetFromLocal(10, 28, 2, min, "2007-10-28T02:0" + min + ":00.000+04:00", ZONE_MOSCOW); [EOL]         } else { [EOL]             doTest_getOffsetFromLocal(10, 28, 2, min, "2007-10-28T02:" + min + ":00.000+04:00", ZONE_MOSCOW); [EOL]         } [EOL]     } [EOL] } <line_num>: 910,918
public void test_DateTime_constructor_Moscow_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW); [EOL]     assertEquals("2007-10-28T02:30:00.000+04:00", dt.toString()); [EOL] } <line_num>: 920,923
public void test_DateTime_plusHour_Moscow_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW); [EOL]     assertEquals("2007-10-27T19:00:00.000+04:00", dt.toString()); [EOL]     DateTime plus6 = dt.plusHours(6); [EOL]     assertEquals("2007-10-28T01:00:00.000+04:00", plus6.toString()); [EOL]     DateTime plus7 = dt.plusHours(7); [EOL]     assertEquals("2007-10-28T02:00:00.000+04:00", plus7.toString()); [EOL]     DateTime plus8 = dt.plusHours(8); [EOL]     assertEquals("2007-10-28T02:00:00.000+03:00", plus8.toString()); [EOL]     DateTime plus9 = dt.plusHours(9); [EOL]     assertEquals("2007-10-28T03:00:00.000+03:00", plus9.toString()); [EOL] } <line_num>: 925,937
public void test_DateTime_minusHour_Moscow_Autumn() { [EOL]     DateTime dt = new DateTime(2007, 10, 28, 9, 0, 0, 0, ZONE_MOSCOW); [EOL]     assertEquals("2007-10-28T09:00:00.000+03:00", dt.toString()); [EOL]     DateTime minus6 = dt.minusHours(6); [EOL]     assertEquals("2007-10-28T03:00:00.000+03:00", minus6.toString()); [EOL]     DateTime minus7 = dt.minusHours(7); [EOL]     assertEquals("2007-10-28T02:00:00.000+03:00", minus7.toString()); [EOL]     DateTime minus8 = dt.minusHours(8); [EOL]     assertEquals("2007-10-28T02:00:00.000+04:00", minus8.toString()); [EOL]     DateTime minus9 = dt.minusHours(9); [EOL]     assertEquals("2007-10-28T01:00:00.000+04:00", minus9.toString()); [EOL] } <line_num>: 939,951
public void test_GuatemataIsCorrect_Autumn() { [EOL]     DateTime pre = new DateTime(CUTOVER_GUATEMALA_AUTUMN - 1L, ZONE_GUATEMALA); [EOL]     assertEquals("2006-09-30T23:59:59.999-05:00", pre.toString()); [EOL]     DateTime at = new DateTime(CUTOVER_GUATEMALA_AUTUMN, ZONE_GUATEMALA); [EOL]     assertEquals("2006-09-30T23:00:00.000-06:00", at.toString()); [EOL]     DateTime post = new DateTime(CUTOVER_GUATEMALA_AUTUMN + 1L, ZONE_GUATEMALA); [EOL]     assertEquals("2006-09-30T23:00:00.001-06:00", post.toString()); [EOL] } <line_num>: 961,968
public void test_getOffsetFromLocal_Guatemata_Autumn() { [EOL]     doTest_getOffsetFromLocal(2006, 9, 30, 23, 0, "2006-09-30T23:00:00.000-05:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 9, 30, 23, 30, "2006-09-30T23:30:00.000-05:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 9, 30, 23, 0, "2006-09-30T23:00:00.000-05:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 9, 30, 23, 30, "2006-09-30T23:30:00.000-05:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 0, 0, "2006-10-01T00:00:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 0, 30, "2006-10-01T00:30:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 1, 0, "2006-10-01T01:00:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 1, 30, "2006-10-01T01:30:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 2, 0, "2006-10-01T02:00:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 2, 30, "2006-10-01T02:30:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 3, 0, "2006-10-01T03:00:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 3, 30, "2006-10-01T03:30:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 4, 0, "2006-10-01T04:00:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 4, 30, "2006-10-01T04:30:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 5, 0, "2006-10-01T05:00:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 5, 30, "2006-10-01T05:30:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 6, 0, "2006-10-01T06:00:00.000-06:00", ZONE_GUATEMALA); [EOL]     doTest_getOffsetFromLocal(2006, 10, 1, 6, 30, "2006-10-01T06:30:00.000-06:00", ZONE_GUATEMALA); [EOL] } <line_num>: 970,1009
public void test_DateTime_plusHour_Guatemata_Autumn() { [EOL]     DateTime dt = new DateTime(2006, 9, 30, 20, 0, 0, 0, ZONE_GUATEMALA); [EOL]     assertEquals("2006-09-30T20:00:00.000-05:00", dt.toString()); [EOL]     DateTime plus1 = dt.plusHours(1); [EOL]     assertEquals("2006-09-30T21:00:00.000-05:00", plus1.toString()); [EOL]     DateTime plus2 = dt.plusHours(2); [EOL]     assertEquals("2006-09-30T22:00:00.000-05:00", plus2.toString()); [EOL]     DateTime plus3 = dt.plusHours(3); [EOL]     assertEquals("2006-09-30T23:00:00.000-05:00", plus3.toString()); [EOL]     DateTime plus4 = dt.plusHours(4); [EOL]     assertEquals("2006-09-30T23:00:00.000-06:00", plus4.toString()); [EOL]     DateTime plus5 = dt.plusHours(5); [EOL]     assertEquals("2006-10-01T00:00:00.000-06:00", plus5.toString()); [EOL]     DateTime plus6 = dt.plusHours(6); [EOL]     assertEquals("2006-10-01T01:00:00.000-06:00", plus6.toString()); [EOL]     DateTime plus7 = dt.plusHours(7); [EOL]     assertEquals("2006-10-01T02:00:00.000-06:00", plus7.toString()); [EOL] } <line_num>: 1011,1029
public void test_DateTime_minusHour_Guatemata_Autumn() { [EOL]     DateTime dt = new DateTime(2006, 10, 1, 2, 0, 0, 0, ZONE_GUATEMALA); [EOL]     assertEquals("2006-10-01T02:00:00.000-06:00", dt.toString()); [EOL]     DateTime minus1 = dt.minusHours(1); [EOL]     assertEquals("2006-10-01T01:00:00.000-06:00", minus1.toString()); [EOL]     DateTime minus2 = dt.minusHours(2); [EOL]     assertEquals("2006-10-01T00:00:00.000-06:00", minus2.toString()); [EOL]     DateTime minus3 = dt.minusHours(3); [EOL]     assertEquals("2006-09-30T23:00:00.000-06:00", minus3.toString()); [EOL]     DateTime minus4 = dt.minusHours(4); [EOL]     assertEquals("2006-09-30T23:00:00.000-05:00", minus4.toString()); [EOL]     DateTime minus5 = dt.minusHours(5); [EOL]     assertEquals("2006-09-30T22:00:00.000-05:00", minus5.toString()); [EOL]     DateTime minus6 = dt.minusHours(6); [EOL]     assertEquals("2006-09-30T21:00:00.000-05:00", minus6.toString()); [EOL]     DateTime minus7 = dt.minusHours(7); [EOL]     assertEquals("2006-09-30T20:00:00.000-05:00", minus7.toString()); [EOL] } <line_num>: 1031,1049
public void test_DateTime_JustAfterLastEverOverlap() { [EOL]     DateTimeZone zone = new DateTimeZoneBuilder().setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("SUMMER", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008, 'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR).addRecurringSavings("WINTER", 0, 2000, 2008, 'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR).toDateTimeZone("Zone", false); [EOL]     LocalDate date = new LocalDate(2008, 8, 10); [EOL]     assertEquals("2008-08-10", date.toString()); [EOL]     DateTime dt = date.toDateTimeAtStartOfDay(zone); [EOL]     assertEquals("2008-08-10T00:00:00.000-03:00", dt.toString()); [EOL] } <line_num>: 1055,1070
public void testWithMinuteOfHourInDstChange_mockZone() { [EOL]     DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30)); [EOL]     assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString()); [EOL]     DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800); [EOL]     DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone); [EOL]     assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString()); [EOL]     DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone); [EOL]     assertEquals("2010-10-31T01:59:00.000+00:30", post.toString()); [EOL]     DateTime testPre1 = pre.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString()); [EOL]     DateTime testPre2 = pre.withMinuteOfHour(50); [EOL]     assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString()); [EOL]     DateTime testPost1 = post.withMinuteOfHour(30); [EOL]     assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString()); [EOL]     DateTime testPost2 = post.withMinuteOfHour(10); [EOL]     assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString()); [EOL] } <line_num>: 1085,1103
public void testWithHourOfDayInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.withHourOfDay(2); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", test.toString()); [EOL] } <line_num>: 1105,1110
public void testWithMinuteOfHourInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.withMinuteOfHour(0); [EOL]     assertEquals("2010-10-31T02:00:10.123+02:00", test.toString()); [EOL] } <line_num>: 1112,1117
public void testWithSecondOfMinuteInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.withSecondOfMinute(0); [EOL]     assertEquals("2010-10-31T02:30:00.123+02:00", test.toString()); [EOL] } <line_num>: 1119,1124
public void testWithMillisOfSecondInDstChange_Paris_summer() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.withMillisOfSecond(0); [EOL]     assertEquals("2010-10-31T02:30:10.000+02:00", test.toString()); [EOL] } <line_num>: 1126,1131
public void testWithMillisOfSecondInDstChange_Paris_winter() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+01:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+01:00", dateTime.toString()); [EOL]     DateTime test = dateTime.withMillisOfSecond(0); [EOL]     assertEquals("2010-10-31T02:30:10.000+01:00", test.toString()); [EOL] } <line_num>: 1133,1138
public void testWithMillisOfSecondInDstChange_NewYork_summer() { [EOL]     DateTime dateTime = new DateTime("2007-11-04T01:30:00.123-04:00", ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:00.123-04:00", dateTime.toString()); [EOL]     DateTime test = dateTime.withMillisOfSecond(0); [EOL]     assertEquals("2007-11-04T01:30:00.000-04:00", test.toString()); [EOL] } <line_num>: 1140,1145
public void testWithMillisOfSecondInDstChange_NewYork_winter() { [EOL]     DateTime dateTime = new DateTime("2007-11-04T01:30:00.123-05:00", ZONE_NEW_YORK); [EOL]     assertEquals("2007-11-04T01:30:00.123-05:00", dateTime.toString()); [EOL]     DateTime test = dateTime.withMillisOfSecond(0); [EOL]     assertEquals("2007-11-04T01:30:00.000-05:00", test.toString()); [EOL] } <line_num>: 1147,1152
public void testPlusMinutesInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.plusMinutes(1); [EOL]     assertEquals("2010-10-31T02:31:10.123+02:00", test.toString()); [EOL] } <line_num>: 1154,1159
public void testPlusSecondsInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.plusSeconds(1); [EOL]     assertEquals("2010-10-31T02:30:11.123+02:00", test.toString()); [EOL] } <line_num>: 1161,1166
public void testPlusMillisInDstChange() { [EOL]     DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS); [EOL]     assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString()); [EOL]     DateTime test = dateTime.plusMillis(1); [EOL]     assertEquals("2010-10-31T02:30:10.124+02:00", test.toString()); [EOL] } <line_num>: 1168,1173
public void testBug2182444_usCentral() { [EOL]     Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC); [EOL]     DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis())); [EOL]     DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral); [EOL]     DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral); [EOL]     assertEquals(1, usCentralStandardInUSCentral.getHourOfDay()); [EOL]     assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay()); [EOL]     assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis()); [EOL]     assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1)); [EOL]     assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis()); [EOL] } <line_num>: 1175,1192
public void testBug2182444_ausNSW() { [EOL]     Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW")); [EOL]     Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC); [EOL]     DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC); [EOL]     DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC); [EOL]     assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis())); [EOL]     assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis())); [EOL]     DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW); [EOL]     DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW); [EOL]     assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay()); [EOL]     assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis()); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis()); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2)); [EOL]     assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis()); [EOL] } <line_num>: 1194,1211
public void testPeriod() { [EOL]     DateTime a = new DateTime("2010-10-31T02:00:00.000+02:00", ZONE_PARIS); [EOL]     DateTime b = new DateTime("2010-10-31T02:01:00.000+02:00", ZONE_PARIS); [EOL]     Period period = new Period(a, b, PeriodType.standard()); [EOL]     assertEquals("PT1M", period.toString()); [EOL] } <line_num>: 1213,1218
public void testForum4013394_retainOffsetWhenRetainFields_sameOffsetsDifferentZones() { [EOL]     final DateTimeZone fromDTZ = DateTimeZone.forID("Europe/London"); [EOL]     final DateTimeZone toDTZ = DateTimeZone.forID("Europe/Lisbon"); [EOL]     DateTime baseBefore = new DateTime(2007, 10, 28, 1, 15, fromDTZ).minusHours(1); [EOL]     DateTime baseAfter = new DateTime(2007, 10, 28, 1, 15, fromDTZ); [EOL]     DateTime testBefore = baseBefore.withZoneRetainFields(toDTZ); [EOL]     DateTime testAfter = baseAfter.withZoneRetainFields(toDTZ); [EOL]     assertEquals(baseBefore.toString(), testBefore.toString()); [EOL]     assertEquals(baseAfter.toString(), testAfter.toString()); [EOL] } <line_num>: 1220,1230
public void testBug3192457_adjustOffset() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTime base = new DateTime(2007, 10, 28, 3, 15, zone); [EOL]     DateTime baseBefore = base.minusHours(2); [EOL]     DateTime baseAfter = base.minusHours(1); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap()); [EOL] } <line_num>: 1233,1247
public void testBug3476684_adjustOffset() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2012, 2, 25, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap()); [EOL] } <line_num>: 1249,1263
public void testBug3476684_adjustOffset_springGap() { [EOL]     final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo"); [EOL]     DateTime base = new DateTime(2011, 10, 15, 22, 15, zone); [EOL]     DateTime baseBefore = base.plusHours(1); [EOL]     DateTime baseAfter = base.plusHours(2); [EOL]     assertSame(base, base.withEarlierOffsetAtOverlap()); [EOL]     assertSame(base, base.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap()); [EOL]     assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap()); [EOL]     assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap()); [EOL]     assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap()); [EOL] } <line_num>: 1265,1279
public void testDateTimeCreation_athens() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Athens"); [EOL]     DateTime base = new DateTime(2011, 10, 30, 3, 15, zone); [EOL]     assertEquals("2011-10-30T03:15:00.000+03:00", base.toString()); [EOL]     assertEquals("2011-10-30T03:15:00.000+02:00", base.plusHours(1).toString()); [EOL] } <line_num>: 1283,1288
public void testDateTimeCreation_paris() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTime base = new DateTime(2011, 10, 30, 2, 15, zone); [EOL]     assertEquals("2011-10-30T02:15:00.000+02:00", base.toString()); [EOL]     assertEquals("2011-10-30T02:15:00.000+01:00", base.plusHours(1).toString()); [EOL] } <line_num>: 1290,1295
public void testDateTimeCreation_london() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Europe/London"); [EOL]     DateTime base = new DateTime(2011, 10, 30, 1, 15, zone); [EOL]     assertEquals("2011-10-30T01:15:00.000+01:00", base.toString()); [EOL]     assertEquals("2011-10-30T01:15:00.000Z", base.plusHours(1).toString()); [EOL] } <line_num>: 1297,1302
public void testDateTimeCreation_newYork() { [EOL]     DateTimeZone zone = DateTimeZone.forID("America/New_York"); [EOL]     DateTime base = new DateTime(2010, 11, 7, 1, 15, zone); [EOL]     assertEquals("2010-11-07T01:15:00.000-04:00", base.toString()); [EOL]     assertEquals("2010-11-07T01:15:00.000-05:00", base.plusHours(1).toString()); [EOL] } <line_num>: 1304,1309
public void testDateTimeCreation_losAngeles() { [EOL]     DateTimeZone zone = DateTimeZone.forID("America/Los_Angeles"); [EOL]     DateTime base = new DateTime(2010, 11, 7, 1, 15, zone); [EOL]     assertEquals("2010-11-07T01:15:00.000-07:00", base.toString()); [EOL]     assertEquals("2010-11-07T01:15:00.000-08:00", base.plusHours(1).toString()); [EOL] } <line_num>: 1311,1316
private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) { [EOL]     doTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone); [EOL] } <line_num>: 1321,1323
private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) { [EOL]     doTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone); [EOL] } <line_num>: 1325,1327
private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) { [EOL]     doTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone); [EOL] } <line_num>: 1329,1331
private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) { [EOL]     DateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC); [EOL]     int offset = zone.getOffsetFromLocal(dt.getMillis()); [EOL]     DateTime res = new DateTime(dt.getMillis() - offset, zone); [EOL]     assertEquals(res.toString(), expected, res.toString()); [EOL] } <line_num>: 1333,1338
