public TestISOChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 69,71
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 61,63
public static TestSuite suite() { [EOL]     return new TestSuite(TestISOChronology.class); [EOL] } <line_num>: 65,67
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 73,81
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 83,91
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, ISOChronology.getInstanceUTC().getZone()); [EOL]     assertSame(ISOChronology.class, ISOChronology.getInstanceUTC().getClass()); [EOL] } <line_num>: 94,97
public void testFactory() { [EOL]     assertEquals(LONDON, ISOChronology.getInstance().getZone()); [EOL]     assertSame(ISOChronology.class, ISOChronology.getInstance().getClass()); [EOL] } <line_num>: 99,102
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, ISOChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, ISOChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, ISOChronology.getInstance(null).getZone()); [EOL]     assertSame(ISOChronology.class, ISOChronology.getInstance(TOKYO).getClass()); [EOL] } <line_num>: 104,109
public void testEquality() { [EOL]     assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(LONDON)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(PARIS)); [EOL]     assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC()); [EOL]     assertSame(ISOChronology.getInstance(), ISOChronology.getInstance(LONDON)); [EOL] } <line_num>: 112,118
public void testWithUTC() { [EOL]     assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance().withUTC()); [EOL] } <line_num>: 120,125
public void testWithZone() { [EOL]     assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstanceUTC().withZone(PARIS)); [EOL] } <line_num>: 127,134
public void testToString() { [EOL]     assertEquals("ISOChronology[Europe/London]", ISOChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("ISOChronology[Asia/Tokyo]", ISOChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("ISOChronology[Europe/London]", ISOChronology.getInstance().toString()); [EOL]     assertEquals("ISOChronology[UTC]", ISOChronology.getInstanceUTC().toString()); [EOL] } <line_num>: 136,141
public void testDurationFields() { [EOL]     final ISOChronology iso = ISOChronology.getInstance(); [EOL]     assertEquals("eras", iso.eras().getName()); [EOL]     assertEquals("centuries", iso.centuries().getName()); [EOL]     assertEquals("years", iso.years().getName()); [EOL]     assertEquals("weekyears", iso.weekyears().getName()); [EOL]     assertEquals("months", iso.months().getName()); [EOL]     assertEquals("weeks", iso.weeks().getName()); [EOL]     assertEquals("days", iso.days().getName()); [EOL]     assertEquals("halfdays", iso.halfdays().getName()); [EOL]     assertEquals("hours", iso.hours().getName()); [EOL]     assertEquals("minutes", iso.minutes().getName()); [EOL]     assertEquals("seconds", iso.seconds().getName()); [EOL]     assertEquals("millis", iso.millis().getName()); [EOL]     assertEquals(false, iso.eras().isSupported()); [EOL]     assertEquals(true, iso.centuries().isSupported()); [EOL]     assertEquals(true, iso.years().isSupported()); [EOL]     assertEquals(true, iso.weekyears().isSupported()); [EOL]     assertEquals(true, iso.months().isSupported()); [EOL]     assertEquals(true, iso.weeks().isSupported()); [EOL]     assertEquals(true, iso.days().isSupported()); [EOL]     assertEquals(true, iso.halfdays().isSupported()); [EOL]     assertEquals(true, iso.hours().isSupported()); [EOL]     assertEquals(true, iso.minutes().isSupported()); [EOL]     assertEquals(true, iso.seconds().isSupported()); [EOL]     assertEquals(true, iso.millis().isSupported()); [EOL]     assertEquals(false, iso.centuries().isPrecise()); [EOL]     assertEquals(false, iso.years().isPrecise()); [EOL]     assertEquals(false, iso.weekyears().isPrecise()); [EOL]     assertEquals(false, iso.months().isPrecise()); [EOL]     assertEquals(false, iso.weeks().isPrecise()); [EOL]     assertEquals(false, iso.days().isPrecise()); [EOL]     assertEquals(false, iso.halfdays().isPrecise()); [EOL]     assertEquals(true, iso.hours().isPrecise()); [EOL]     assertEquals(true, iso.minutes().isPrecise()); [EOL]     assertEquals(true, iso.seconds().isPrecise()); [EOL]     assertEquals(true, iso.millis().isPrecise()); [EOL]     final ISOChronology isoUTC = ISOChronology.getInstanceUTC(); [EOL]     assertEquals(false, isoUTC.centuries().isPrecise()); [EOL]     assertEquals(false, isoUTC.years().isPrecise()); [EOL]     assertEquals(false, isoUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, isoUTC.months().isPrecise()); [EOL]     assertEquals(true, isoUTC.weeks().isPrecise()); [EOL]     assertEquals(true, isoUTC.days().isPrecise()); [EOL]     assertEquals(true, isoUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, isoUTC.hours().isPrecise()); [EOL]     assertEquals(true, isoUTC.minutes().isPrecise()); [EOL]     assertEquals(true, isoUTC.seconds().isPrecise()); [EOL]     assertEquals(true, isoUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final ISOChronology isoGMT = ISOChronology.getInstance(gmt); [EOL]     assertEquals(false, isoGMT.centuries().isPrecise()); [EOL]     assertEquals(false, isoGMT.years().isPrecise()); [EOL]     assertEquals(false, isoGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, isoGMT.months().isPrecise()); [EOL]     assertEquals(true, isoGMT.weeks().isPrecise()); [EOL]     assertEquals(true, isoGMT.days().isPrecise()); [EOL]     assertEquals(true, isoGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, isoGMT.hours().isPrecise()); [EOL]     assertEquals(true, isoGMT.minutes().isPrecise()); [EOL]     assertEquals(true, isoGMT.seconds().isPrecise()); [EOL]     assertEquals(true, isoGMT.millis().isPrecise()); [EOL]     final DateTimeZone offset = DateTimeZone.forOffsetHours(1); [EOL]     final ISOChronology isoOffset1 = ISOChronology.getInstance(offset); [EOL]     assertEquals(false, isoOffset1.centuries().isPrecise()); [EOL]     assertEquals(false, isoOffset1.years().isPrecise()); [EOL]     assertEquals(false, isoOffset1.weekyears().isPrecise()); [EOL]     assertEquals(false, isoOffset1.months().isPrecise()); [EOL]     assertEquals(true, isoOffset1.weeks().isPrecise()); [EOL]     assertEquals(true, isoOffset1.days().isPrecise()); [EOL]     assertEquals(true, isoOffset1.halfdays().isPrecise()); [EOL]     assertEquals(true, isoOffset1.hours().isPrecise()); [EOL]     assertEquals(true, isoOffset1.minutes().isPrecise()); [EOL]     assertEquals(true, isoOffset1.seconds().isPrecise()); [EOL]     assertEquals(true, isoOffset1.millis().isPrecise()); [EOL] } <line_num>: 144,224
public void testDateFields() { [EOL]     final ISOChronology iso = ISOChronology.getInstance(); [EOL]     assertEquals("era", iso.era().getName()); [EOL]     assertEquals("centuryOfEra", iso.centuryOfEra().getName()); [EOL]     assertEquals("yearOfCentury", iso.yearOfCentury().getName()); [EOL]     assertEquals("yearOfEra", iso.yearOfEra().getName()); [EOL]     assertEquals("year", iso.year().getName()); [EOL]     assertEquals("monthOfYear", iso.monthOfYear().getName()); [EOL]     assertEquals("weekyearOfCentury", iso.weekyearOfCentury().getName()); [EOL]     assertEquals("weekyear", iso.weekyear().getName()); [EOL]     assertEquals("weekOfWeekyear", iso.weekOfWeekyear().getName()); [EOL]     assertEquals("dayOfYear", iso.dayOfYear().getName()); [EOL]     assertEquals("dayOfMonth", iso.dayOfMonth().getName()); [EOL]     assertEquals("dayOfWeek", iso.dayOfWeek().getName()); [EOL]     assertEquals(true, iso.era().isSupported()); [EOL]     assertEquals(true, iso.centuryOfEra().isSupported()); [EOL]     assertEquals(true, iso.yearOfCentury().isSupported()); [EOL]     assertEquals(true, iso.yearOfEra().isSupported()); [EOL]     assertEquals(true, iso.year().isSupported()); [EOL]     assertEquals(true, iso.monthOfYear().isSupported()); [EOL]     assertEquals(true, iso.weekyearOfCentury().isSupported()); [EOL]     assertEquals(true, iso.weekyear().isSupported()); [EOL]     assertEquals(true, iso.weekOfWeekyear().isSupported()); [EOL]     assertEquals(true, iso.dayOfYear().isSupported()); [EOL]     assertEquals(true, iso.dayOfMonth().isSupported()); [EOL]     assertEquals(true, iso.dayOfWeek().isSupported()); [EOL]     assertEquals(iso.eras(), iso.era().getDurationField()); [EOL]     assertEquals(iso.centuries(), iso.centuryOfEra().getDurationField()); [EOL]     assertEquals(iso.years(), iso.yearOfCentury().getDurationField()); [EOL]     assertEquals(iso.years(), iso.yearOfEra().getDurationField()); [EOL]     assertEquals(iso.years(), iso.year().getDurationField()); [EOL]     assertEquals(iso.months(), iso.monthOfYear().getDurationField()); [EOL]     assertEquals(iso.weekyears(), iso.weekyearOfCentury().getDurationField()); [EOL]     assertEquals(iso.weekyears(), iso.weekyear().getDurationField()); [EOL]     assertEquals(iso.weeks(), iso.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(iso.days(), iso.dayOfYear().getDurationField()); [EOL]     assertEquals(iso.days(), iso.dayOfMonth().getDurationField()); [EOL]     assertEquals(iso.days(), iso.dayOfWeek().getDurationField()); [EOL]     assertEquals(null, iso.era().getRangeDurationField()); [EOL]     assertEquals(iso.eras(), iso.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(iso.centuries(), iso.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(iso.eras(), iso.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(null, iso.year().getRangeDurationField()); [EOL]     assertEquals(iso.years(), iso.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(iso.centuries(), iso.weekyearOfCentury().getRangeDurationField()); [EOL]     assertEquals(null, iso.weekyear().getRangeDurationField()); [EOL]     assertEquals(iso.weekyears(), iso.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(iso.years(), iso.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(iso.months(), iso.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(iso.weeks(), iso.dayOfWeek().getRangeDurationField()); [EOL] } <line_num>: 226,279
public void testTimeFields() { [EOL]     final ISOChronology iso = ISOChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", iso.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", iso.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", iso.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", iso.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", iso.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", iso.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", iso.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", iso.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", iso.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", iso.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", iso.millisOfSecond().getName()); [EOL]     assertEquals(true, iso.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, iso.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, iso.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, iso.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, iso.hourOfDay().isSupported()); [EOL]     assertEquals(true, iso.minuteOfDay().isSupported()); [EOL]     assertEquals(true, iso.minuteOfHour().isSupported()); [EOL]     assertEquals(true, iso.secondOfDay().isSupported()); [EOL]     assertEquals(true, iso.secondOfMinute().isSupported()); [EOL]     assertEquals(true, iso.millisOfDay().isSupported()); [EOL]     assertEquals(true, iso.millisOfSecond().isSupported()); [EOL] } <line_num>: 281,306
public void testMaxYear() { [EOL]     final ISOChronology chrono = ISOChronology.getInstanceUTC(); [EOL]     final int maxYear = chrono.year().getMaximumValue(); [EOL]     DateTime start = new DateTime(maxYear, 1, 1, 0, 0, 0, 0, chrono); [EOL]     DateTime end = new DateTime(maxYear, 12, 31, 23, 59, 59, 999, chrono); [EOL]     assertTrue(start.getMillis() > 0); [EOL]     assertTrue(end.getMillis() > start.getMillis()); [EOL]     assertEquals(maxYear, start.getYear()); [EOL]     assertEquals(maxYear, end.getYear()); [EOL]     long delta = end.getMillis() - start.getMillis(); [EOL]     long expectedDelta = (start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1; [EOL]     assertEquals(expectedDelta, delta); [EOL]     assertEquals(start, new DateTime(maxYear + "-01-01T00:00:00.000Z", chrono)); [EOL]     assertEquals(end, new DateTime(maxYear + "-12-31T23:59:59.999Z", chrono)); [EOL]     try { [EOL]         start.plusYears(1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]     } [EOL]     try { [EOL]         end.plusYears(1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]     } [EOL]     assertEquals(maxYear + 1, chrono.year().get(Long.MAX_VALUE)); [EOL] } <line_num>: 308,339
public void testMinYear() { [EOL]     final ISOChronology chrono = ISOChronology.getInstanceUTC(); [EOL]     final int minYear = chrono.year().getMinimumValue(); [EOL]     DateTime start = new DateTime(minYear, 1, 1, 0, 0, 0, 0, chrono); [EOL]     DateTime end = new DateTime(minYear, 12, 31, 23, 59, 59, 999, chrono); [EOL]     assertTrue(start.getMillis() < 0); [EOL]     assertTrue(end.getMillis() > start.getMillis()); [EOL]     assertEquals(minYear, start.getYear()); [EOL]     assertEquals(minYear, end.getYear()); [EOL]     long delta = end.getMillis() - start.getMillis(); [EOL]     long expectedDelta = (start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1; [EOL]     assertEquals(expectedDelta, delta); [EOL]     assertEquals(start, new DateTime(minYear + "-01-01T00:00:00.000Z", chrono)); [EOL]     assertEquals(end, new DateTime(minYear + "-12-31T23:59:59.999Z", chrono)); [EOL]     try { [EOL]         start.minusYears(1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]     } [EOL]     try { [EOL]         end.minusYears(1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]     } [EOL]     assertEquals(minYear - 1, chrono.year().get(Long.MIN_VALUE)); [EOL] } <line_num>: 341,372
public void testCutoverAddYears() { [EOL]     testAdd("1582-01-01", DurationFieldType.years(), 1, "1583-01-01"); [EOL]     testAdd("1582-02-15", DurationFieldType.years(), 1, "1583-02-15"); [EOL]     testAdd("1582-02-28", DurationFieldType.years(), 1, "1583-02-28"); [EOL]     testAdd("1582-03-01", DurationFieldType.years(), 1, "1583-03-01"); [EOL]     testAdd("1582-09-30", DurationFieldType.years(), 1, "1583-09-30"); [EOL]     testAdd("1582-10-01", DurationFieldType.years(), 1, "1583-10-01"); [EOL]     testAdd("1582-10-04", DurationFieldType.years(), 1, "1583-10-04"); [EOL]     testAdd("1582-10-15", DurationFieldType.years(), 1, "1583-10-15"); [EOL]     testAdd("1582-10-16", DurationFieldType.years(), 1, "1583-10-16"); [EOL]     testAdd("1580-01-01", DurationFieldType.years(), 4, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.years(), 4, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.years(), 4, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.years(), 4, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.years(), 4, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.years(), 4, "1584-12-31"); [EOL] } <line_num>: 374,390
public void testAddMonths() { [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 1, "1582-02-01"); [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 6, "1582-07-01"); [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 12, "1583-01-01"); [EOL]     testAdd("1582-11-15", DurationFieldType.months(), 1, "1582-12-15"); [EOL]     testAdd("1582-09-04", DurationFieldType.months(), 2, "1582-11-04"); [EOL]     testAdd("1582-09-05", DurationFieldType.months(), 2, "1582-11-05"); [EOL]     testAdd("1582-09-10", DurationFieldType.months(), 2, "1582-11-10"); [EOL]     testAdd("1582-09-15", DurationFieldType.months(), 2, "1582-11-15"); [EOL]     testAdd("1580-01-01", DurationFieldType.months(), 48, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.months(), 48, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.months(), 48, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.months(), 48, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.months(), 48, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.months(), 48, "1584-12-31"); [EOL] } <line_num>: 392,407
private void testAdd(String start, DurationFieldType type, int amt, String end) { [EOL]     DateTime dtStart = new DateTime(start, ISOChronology.getInstanceUTC()); [EOL]     DateTime dtEnd = new DateTime(end, ISOChronology.getInstanceUTC()); [EOL]     assertEquals(dtEnd, dtStart.withFieldAdded(type, amt)); [EOL]     assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt)); [EOL]     DurationField field = type.getField(ISOChronology.getInstanceUTC()); [EOL]     int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis()); [EOL]     assertEquals(amt, diff); [EOL]     if (type == DurationFieldType.years() || type == DurationFieldType.months() || type == DurationFieldType.days()) { [EOL]         YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC()); [EOL]         YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC()); [EOL]         assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt)); [EOL]         assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt)); [EOL]     } [EOL] } <line_num>: 409,427
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30); [EOL]     TimeOfDay end = new TimeOfDay(10, 30); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] } <line_num>: 429,436
public void testPartialDayOfYearAdd() { [EOL]     Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366); [EOL]     assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366)); [EOL]     assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366))); [EOL] } <line_num>: 438,443
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] } <line_num>: 445,454
