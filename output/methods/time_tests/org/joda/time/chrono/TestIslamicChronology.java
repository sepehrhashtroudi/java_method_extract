public TestIslamicChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 70,72
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 61,63
public static TestSuite suite() { [EOL]     SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY; [EOL]     return new TestSuite(TestIslamicChronology.class); [EOL] } <line_num>: 65,68
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 74,82
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 84,92
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, IslamicChronology.getInstanceUTC().getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstanceUTC().getClass()); [EOL] } <line_num>: 95,98
public void testFactory() { [EOL]     assertEquals(LONDON, IslamicChronology.getInstance().getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance().getClass()); [EOL] } <line_num>: 100,103
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, IslamicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, IslamicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, IslamicChronology.getInstance(null).getZone()); [EOL]     assertSame(IslamicChronology.class, IslamicChronology.getInstance(TOKYO).getClass()); [EOL] } <line_num>: 105,110
public void testEquality() { [EOL]     assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(LONDON)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(PARIS)); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC()); [EOL]     assertSame(IslamicChronology.getInstance(), IslamicChronology.getInstance(LONDON)); [EOL] } <line_num>: 113,119
public void testWithUTC() { [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance().withUTC()); [EOL] } <line_num>: 121,126
public void testWithZone() { [EOL]     assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstanceUTC().withZone(PARIS)); [EOL] } <line_num>: 128,135
public void testToString() { [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString()); [EOL]     assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString()); [EOL] } <line_num>: 137,142
public void testDurationFields() { [EOL]     final IslamicChronology islamic = IslamicChronology.getInstance(); [EOL]     assertEquals("eras", islamic.eras().getName()); [EOL]     assertEquals("centuries", islamic.centuries().getName()); [EOL]     assertEquals("years", islamic.years().getName()); [EOL]     assertEquals("weekyears", islamic.weekyears().getName()); [EOL]     assertEquals("months", islamic.months().getName()); [EOL]     assertEquals("weeks", islamic.weeks().getName()); [EOL]     assertEquals("days", islamic.days().getName()); [EOL]     assertEquals("halfdays", islamic.halfdays().getName()); [EOL]     assertEquals("hours", islamic.hours().getName()); [EOL]     assertEquals("minutes", islamic.minutes().getName()); [EOL]     assertEquals("seconds", islamic.seconds().getName()); [EOL]     assertEquals("millis", islamic.millis().getName()); [EOL]     assertEquals(false, islamic.eras().isSupported()); [EOL]     assertEquals(true, islamic.centuries().isSupported()); [EOL]     assertEquals(true, islamic.years().isSupported()); [EOL]     assertEquals(true, islamic.weekyears().isSupported()); [EOL]     assertEquals(true, islamic.months().isSupported()); [EOL]     assertEquals(true, islamic.weeks().isSupported()); [EOL]     assertEquals(true, islamic.days().isSupported()); [EOL]     assertEquals(true, islamic.halfdays().isSupported()); [EOL]     assertEquals(true, islamic.hours().isSupported()); [EOL]     assertEquals(true, islamic.minutes().isSupported()); [EOL]     assertEquals(true, islamic.seconds().isSupported()); [EOL]     assertEquals(true, islamic.millis().isSupported()); [EOL]     assertEquals(false, islamic.centuries().isPrecise()); [EOL]     assertEquals(false, islamic.years().isPrecise()); [EOL]     assertEquals(false, islamic.weekyears().isPrecise()); [EOL]     assertEquals(false, islamic.months().isPrecise()); [EOL]     assertEquals(false, islamic.weeks().isPrecise()); [EOL]     assertEquals(false, islamic.days().isPrecise()); [EOL]     assertEquals(false, islamic.halfdays().isPrecise()); [EOL]     assertEquals(true, islamic.hours().isPrecise()); [EOL]     assertEquals(true, islamic.minutes().isPrecise()); [EOL]     assertEquals(true, islamic.seconds().isPrecise()); [EOL]     assertEquals(true, islamic.millis().isPrecise()); [EOL]     final IslamicChronology islamicUTC = IslamicChronology.getInstanceUTC(); [EOL]     assertEquals(false, islamicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, islamicUTC.years().isPrecise()); [EOL]     assertEquals(false, islamicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, islamicUTC.months().isPrecise()); [EOL]     assertEquals(true, islamicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, islamicUTC.days().isPrecise()); [EOL]     assertEquals(true, islamicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, islamicUTC.hours().isPrecise()); [EOL]     assertEquals(true, islamicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, islamicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, islamicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final IslamicChronology islamicGMT = IslamicChronology.getInstance(gmt); [EOL]     assertEquals(false, islamicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, islamicGMT.years().isPrecise()); [EOL]     assertEquals(false, islamicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, islamicGMT.months().isPrecise()); [EOL]     assertEquals(true, islamicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, islamicGMT.days().isPrecise()); [EOL]     assertEquals(true, islamicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, islamicGMT.hours().isPrecise()); [EOL]     assertEquals(true, islamicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, islamicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, islamicGMT.millis().isPrecise()); [EOL] } <line_num>: 145,211
public void testDateFields() { [EOL]     final IslamicChronology islamic = IslamicChronology.getInstance(); [EOL]     assertEquals("era", islamic.era().getName()); [EOL]     assertEquals("centuryOfEra", islamic.centuryOfEra().getName()); [EOL]     assertEquals("yearOfCentury", islamic.yearOfCentury().getName()); [EOL]     assertEquals("yearOfEra", islamic.yearOfEra().getName()); [EOL]     assertEquals("year", islamic.year().getName()); [EOL]     assertEquals("monthOfYear", islamic.monthOfYear().getName()); [EOL]     assertEquals("weekyearOfCentury", islamic.weekyearOfCentury().getName()); [EOL]     assertEquals("weekyear", islamic.weekyear().getName()); [EOL]     assertEquals("weekOfWeekyear", islamic.weekOfWeekyear().getName()); [EOL]     assertEquals("dayOfYear", islamic.dayOfYear().getName()); [EOL]     assertEquals("dayOfMonth", islamic.dayOfMonth().getName()); [EOL]     assertEquals("dayOfWeek", islamic.dayOfWeek().getName()); [EOL]     assertEquals(true, islamic.era().isSupported()); [EOL]     assertEquals(true, islamic.centuryOfEra().isSupported()); [EOL]     assertEquals(true, islamic.yearOfCentury().isSupported()); [EOL]     assertEquals(true, islamic.yearOfEra().isSupported()); [EOL]     assertEquals(true, islamic.year().isSupported()); [EOL]     assertEquals(true, islamic.monthOfYear().isSupported()); [EOL]     assertEquals(true, islamic.weekyearOfCentury().isSupported()); [EOL]     assertEquals(true, islamic.weekyear().isSupported()); [EOL]     assertEquals(true, islamic.weekOfWeekyear().isSupported()); [EOL]     assertEquals(true, islamic.dayOfYear().isSupported()); [EOL]     assertEquals(true, islamic.dayOfMonth().isSupported()); [EOL]     assertEquals(true, islamic.dayOfWeek().isSupported()); [EOL]     assertEquals(islamic.eras(), islamic.era().getDurationField()); [EOL]     assertEquals(islamic.centuries(), islamic.centuryOfEra().getDurationField()); [EOL]     assertEquals(islamic.years(), islamic.yearOfCentury().getDurationField()); [EOL]     assertEquals(islamic.years(), islamic.yearOfEra().getDurationField()); [EOL]     assertEquals(islamic.years(), islamic.year().getDurationField()); [EOL]     assertEquals(islamic.months(), islamic.monthOfYear().getDurationField()); [EOL]     assertEquals(islamic.weekyears(), islamic.weekyearOfCentury().getDurationField()); [EOL]     assertEquals(islamic.weekyears(), islamic.weekyear().getDurationField()); [EOL]     assertEquals(islamic.weeks(), islamic.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(islamic.days(), islamic.dayOfYear().getDurationField()); [EOL]     assertEquals(islamic.days(), islamic.dayOfMonth().getDurationField()); [EOL]     assertEquals(islamic.days(), islamic.dayOfWeek().getDurationField()); [EOL]     assertEquals(null, islamic.era().getRangeDurationField()); [EOL]     assertEquals(islamic.eras(), islamic.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(islamic.centuries(), islamic.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(islamic.eras(), islamic.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(null, islamic.year().getRangeDurationField()); [EOL]     assertEquals(islamic.years(), islamic.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(islamic.centuries(), islamic.weekyearOfCentury().getRangeDurationField()); [EOL]     assertEquals(null, islamic.weekyear().getRangeDurationField()); [EOL]     assertEquals(islamic.weekyears(), islamic.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(islamic.years(), islamic.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(islamic.months(), islamic.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(islamic.weeks(), islamic.dayOfWeek().getRangeDurationField()); [EOL] } <line_num>: 213,266
public void testTimeFields() { [EOL]     final IslamicChronology islamic = IslamicChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", islamic.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", islamic.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", islamic.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", islamic.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", islamic.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", islamic.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", islamic.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", islamic.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", islamic.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", islamic.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", islamic.millisOfSecond().getName()); [EOL]     assertEquals(true, islamic.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, islamic.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, islamic.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, islamic.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, islamic.hourOfDay().isSupported()); [EOL]     assertEquals(true, islamic.minuteOfDay().isSupported()); [EOL]     assertEquals(true, islamic.minuteOfHour().isSupported()); [EOL]     assertEquals(true, islamic.secondOfDay().isSupported()); [EOL]     assertEquals(true, islamic.secondOfMinute().isSupported()); [EOL]     assertEquals(true, islamic.millisOfDay().isSupported()); [EOL]     assertEquals(true, islamic.millisOfSecond().isSupported()); [EOL] } <line_num>: 268,293
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC); [EOL]     assertEquals(expectedEpoch.getMillis(), epoch.getMillis()); [EOL] } <line_num>: 296,300
public void testEra() { [EOL]     assertEquals(1, IslamicChronology.AH); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 302,308
public void testFieldConstructor() { [EOL]     DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     assertEquals(expectedDate.getMillis(), date.getMillis()); [EOL] } <line_num>: 311,315
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestIslamicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ISLAMIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ISLAMIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int dayOfYearLen = dayOfYear.getMaximumValue(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 12) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AH", era.getAsText(millis)); [EOL]         assertEquals("AH", era.getAsShortText(millis)); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         boolean leap = ((11 * yearValue + 14) % 30) < 11; [EOL]         assertEquals(leap, year.isLeap(millis)); [EOL]         switch(monthValue) { [EOL]             case 1: [EOL]             case 3: [EOL]             case 5: [EOL]             case 7: [EOL]             case 9: [EOL]             case 11: [EOL]                 assertEquals(30, monthLen); [EOL]                 break; [EOL]             case 2: [EOL]             case 4: [EOL]             case 6: [EOL]             case 8: [EOL]             case 10: [EOL]                 assertEquals(29, monthLen); [EOL]                 break; [EOL]             case 12: [EOL]                 assertEquals((leap ? 30 : 29), monthLen); [EOL]                 break; [EOL]         } [EOL]         assertEquals((leap ? 355 : 354), dayOfYearLen); [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay > monthLen) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]             if (expectedMonth == 13) { [EOL]                 expectedMonth = 1; [EOL]                 expectedDOY = 1; [EOL]                 expectedYear++; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] } <line_num>: 321,411
public void testSampleDate1() { [EOL]     DateTime dt = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(14, dt.getCenturyOfEra()); [EOL]     assertEquals(64, dt.getYearOfCentury()); [EOL]     assertEquals(1364, dt.getYearOfEra()); [EOL]     assertEquals(1364, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1365, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(12, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1365, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(new DateTime(1364, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addWrapFieldToCopy(1)); [EOL]     assertEquals(6, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.MONDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(6 * 30 + 5 * 29 + 6, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(354, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] } <line_num>: 413,477
public void testSampleDate2() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC); [EOL]     dt = dt.withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(15, dt.getCenturyOfEra()); [EOL]     assertEquals(26, dt.getYearOfCentury()); [EOL]     assertEquals(1426, dt.getYearOfEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(29, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] } <line_num>: 479,537
public void testSampleDate3() { [EOL]     DateTime dt = new DateTime(1426, 12, 24, 0, 0, 0, 0, ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(12, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(true, fld.isLeap()); [EOL]     assertEquals(1, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(12, fld.getMaximumValue()); [EOL]     assertEquals(12, fld.getMaximumValueOverall()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(DateTimeConstants.TUESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(6 * 30 + 5 * 29 + 24, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(355, fld.getMaximumValue()); [EOL]     assertEquals(355, fld.getMaximumValueOverall()); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] } <line_num>: 539,593
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC); [EOL]     assertEquals(IslamicChronology.AH, dt.getEra()); [EOL]     assertEquals(1426, dt.getYear()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(24, dt.getDayOfMonth()); [EOL]     assertEquals(11, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] } <line_num>: 595,605
public void test15BasedLeapYear() { [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(1)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(2)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(3)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(4)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(5)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(6)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(7)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(8)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(9)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(10)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(11)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(12)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(13)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(14)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(15)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(16)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(17)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(18)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(19)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(20)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(21)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(22)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(23)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(24)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(25)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(26)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(27)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(28)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(29)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(30)); [EOL] } <line_num>: 607,638
public void test16BasedLeapYear() { [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(1)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(2)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(3)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(4)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(5)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(6)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(7)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(8)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(9)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(10)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(11)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(12)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(13)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(14)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(15)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(16)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(17)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(18)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(19)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(20)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(21)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(22)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(23)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(24)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(25)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(26)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(27)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(28)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(29)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(30)); [EOL] } <line_num>: 640,671
public void testIndianBasedLeapYear() { [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(1)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(2)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(3)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(4)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(5)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(6)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(7)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(8)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(9)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(10)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(11)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(12)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(13)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(14)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(15)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(16)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(17)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(18)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(19)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(20)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(21)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(22)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(23)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(24)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(25)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(26)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(27)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(28)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(29)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(30)); [EOL] } <line_num>: 673,704
public void testHabashAlHasibBasedLeapYear() { [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(1)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(2)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(3)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(4)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(5)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(6)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(7)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(8)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(9)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(10)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(11)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(12)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(13)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(14)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(15)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(16)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(17)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(18)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(19)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(20)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(21)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(22)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(23)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(24)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(25)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(26)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(27)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(28)); [EOL]     assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(29)); [EOL]     assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(30)); [EOL] } <line_num>: 706,737
