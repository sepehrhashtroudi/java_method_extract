public TestLenientChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 40,42
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 32,34
public static TestSuite suite() { [EOL]     return new TestSuite(TestLenientChronology.class); [EOL] } <line_num>: 36,38
protected void setUp() throws Exception { [EOL] } <line_num>: 44,45
protected void tearDown() throws Exception { [EOL] } <line_num>: 47,48
public void test_setYear() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withYear(2008); [EOL]     assertEquals("2008-01-01T00:00:00.000Z", dt.toString()); [EOL] } <line_num>: 51,57
public void test_setMonthOfYear() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withMonthOfYear(13); [EOL]     assertEquals("2008-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withMonthOfYear(0); [EOL]     assertEquals("2007-12-01T00:00:00.000Z", dt.toString()); [EOL] } <line_num>: 60,68
public void test_setDayOfMonth() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(32); [EOL]     assertEquals("2007-02-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withDayOfMonth(0); [EOL]     assertEquals("2007-01-31T00:00:00.000Z", dt.toString()); [EOL] } <line_num>: 71,79
public void test_setHourOfDay() { [EOL]     Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     DateTime dt = new DateTime(2007, 1, 1, 0, 0, 0, 0, zone); [EOL]     assertEquals("2007-01-01T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(24); [EOL]     assertEquals("2007-01-02T00:00:00.000Z", dt.toString()); [EOL]     dt = dt.withHourOfDay(-1); [EOL]     assertEquals("2007-01-01T23:00:00.000Z", dt.toString()); [EOL] } <line_num>: 82,90
public void testNearDstTransition() { [EOL]     int hour = 23; [EOL]     DateTime dt; [EOL]     dt = new DateTime(2006, 10, 29, hour, 0, 0, 0, ISOChronology.getInstance(DateTimeZone.forID("America/Los_Angeles"))); [EOL]     assertEquals(hour, dt.getHourOfDay()); [EOL]     dt = new DateTime(2006, 10, 29, hour, 0, 0, 0, LenientChronology.getInstance(ISOChronology.getInstance(DateTimeZone.forOffsetHours(-8)))); [EOL]     assertEquals(hour, dt.getHourOfDay()); [EOL]     dt = new DateTime(2006, 10, 29, hour, 0, 0, 0, LenientChronology.getInstance(ISOChronology.getInstance(DateTimeZone.forID("America/Los_Angeles")))); [EOL]     assertEquals(hour, dt.getHourOfDay()); [EOL] } <line_num>: 95,115
public void test_MockTurkIsCorrect() { [EOL]     DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK); [EOL]     assertEquals("2007-03-31T23:59:59.999-05:00", pre.toString()); [EOL]     DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK); [EOL]     assertEquals("2007-04-01T01:00:00.000-04:00", at.toString()); [EOL]     DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK); [EOL]     assertEquals("2007-04-01T01:00:00.001-04:00", post.toString()); [EOL] } <line_num>: 126,133
public void test_lenientChrononolgy_Chicago() { [EOL]     DateTimeZone zone = DateTimeZone.forID("America/Chicago"); [EOL]     Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone)); [EOL]     DateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient); [EOL]     assertEquals("2007-03-11T03:30:00.000-05:00", dt.toString()); [EOL] } <line_num>: 135,140
public void test_lenientChrononolgy_Turk() { [EOL]     Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(MOCK_TURK)); [EOL]     DateTime dt = new DateTime(2007, 4, 1, 0, 30, 0, 0, lenient); [EOL]     assertEquals("2007-04-01T01:30:00.000-04:00", dt.toString()); [EOL] } <line_num>: 142,146
public void test_strictChrononolgy_Chicago() { [EOL]     DateTimeZone zone = DateTimeZone.forID("America/Chicago"); [EOL]     Chronology lenient = StrictChronology.getInstance(ISOChronology.getInstance(zone)); [EOL]     try { [EOL]         new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 148,157
public void test_isoChrononolgy_Chicago() { [EOL]     DateTimeZone zone = DateTimeZone.forID("America/Chicago"); [EOL]     Chronology lenient = ISOChronology.getInstance(zone); [EOL]     try { [EOL]         new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 159,168
