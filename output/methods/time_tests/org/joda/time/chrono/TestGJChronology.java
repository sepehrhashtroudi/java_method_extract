public TestGJChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 69,71
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 61,63
public static TestSuite suite() { [EOL]     return new TestSuite(TestGJChronology.class); [EOL] } <line_num>: 65,67
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 73,81
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 83,91
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, GJChronology.getInstanceUTC().getZone()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstanceUTC().getClass()); [EOL] } <line_num>: 94,97
public void testFactory() { [EOL]     assertEquals(LONDON, GJChronology.getInstance().getZone()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance().getClass()); [EOL] } <line_num>: 99,102
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, GJChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, GJChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, GJChronology.getInstance(null).getZone()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO).getClass()); [EOL] } <line_num>: 104,109
public void testFactory_Zone_long_int() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO, 0L, 2); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(new Instant(0L), chrono.getGregorianCutover()); [EOL]     assertEquals(2, chrono.getMinimumDaysInFirstWeek()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, 0L, 2).getClass()); [EOL]     try { [EOL]         GJChronology.getInstance(TOKYO, 0L, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         GJChronology.getInstance(TOKYO, 0L, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 111,126
public void testFactory_Zone_RI() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L)); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(new Instant(0L), chrono.getGregorianCutover()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass()); [EOL]     DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     chrono = GJChronology.getInstance(TOKYO, null); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(cutover.toInstant(), chrono.getGregorianCutover()); [EOL] } <line_num>: 128,138
public void testFactory_Zone_RI_int() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L), 2); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(new Instant(0L), chrono.getGregorianCutover()); [EOL]     assertEquals(2, chrono.getMinimumDaysInFirstWeek()); [EOL]     assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L), 2).getClass()); [EOL]     DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     chrono = GJChronology.getInstance(TOKYO, null, 2); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(cutover.toInstant(), chrono.getGregorianCutover()); [EOL]     assertEquals(2, chrono.getMinimumDaysInFirstWeek()); [EOL]     try { [EOL]         GJChronology.getInstance(TOKYO, new Instant(0L), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         GJChronology.getInstance(TOKYO, new Instant(0L), 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 140,161
public void testEquality() { [EOL]     assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO)); [EOL]     assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(LONDON)); [EOL]     assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(PARIS)); [EOL]     assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC()); [EOL]     assertSame(GJChronology.getInstance(), GJChronology.getInstance(LONDON)); [EOL] } <line_num>: 164,170
public void testWithUTC() { [EOL]     assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance().withUTC()); [EOL] } <line_num>: 172,177
public void testWithZone() { [EOL]     assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstanceUTC().withZone(PARIS)); [EOL] } <line_num>: 179,186
public void testToString() { [EOL]     assertEquals("GJChronology[Europe/London]", GJChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("GJChronology[Asia/Tokyo]", GJChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("GJChronology[Europe/London]", GJChronology.getInstance().toString()); [EOL]     assertEquals("GJChronology[UTC]", GJChronology.getInstanceUTC().toString()); [EOL]     assertEquals("GJChronology[UTC,cutover=1970-01-01]", GJChronology.getInstance(DateTimeZone.UTC, 0L, 4).toString()); [EOL]     assertEquals("GJChronology[UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=2]", GJChronology.getInstance(DateTimeZone.UTC, 1L, 2).toString()); [EOL] } <line_num>: 188,195
public void testDurationFields() { [EOL]     final GJChronology gj = GJChronology.getInstance(); [EOL]     assertEquals("eras", gj.eras().getName()); [EOL]     assertEquals("centuries", gj.centuries().getName()); [EOL]     assertEquals("years", gj.years().getName()); [EOL]     assertEquals("weekyears", gj.weekyears().getName()); [EOL]     assertEquals("months", gj.months().getName()); [EOL]     assertEquals("weeks", gj.weeks().getName()); [EOL]     assertEquals("halfdays", gj.halfdays().getName()); [EOL]     assertEquals("days", gj.days().getName()); [EOL]     assertEquals("hours", gj.hours().getName()); [EOL]     assertEquals("minutes", gj.minutes().getName()); [EOL]     assertEquals("seconds", gj.seconds().getName()); [EOL]     assertEquals("millis", gj.millis().getName()); [EOL]     assertEquals(false, gj.eras().isSupported()); [EOL]     assertEquals(true, gj.centuries().isSupported()); [EOL]     assertEquals(true, gj.years().isSupported()); [EOL]     assertEquals(true, gj.weekyears().isSupported()); [EOL]     assertEquals(true, gj.months().isSupported()); [EOL]     assertEquals(true, gj.weeks().isSupported()); [EOL]     assertEquals(true, gj.days().isSupported()); [EOL]     assertEquals(true, gj.halfdays().isSupported()); [EOL]     assertEquals(true, gj.hours().isSupported()); [EOL]     assertEquals(true, gj.minutes().isSupported()); [EOL]     assertEquals(true, gj.seconds().isSupported()); [EOL]     assertEquals(true, gj.millis().isSupported()); [EOL]     assertEquals(false, gj.centuries().isPrecise()); [EOL]     assertEquals(false, gj.years().isPrecise()); [EOL]     assertEquals(false, gj.weekyears().isPrecise()); [EOL]     assertEquals(false, gj.months().isPrecise()); [EOL]     assertEquals(false, gj.weeks().isPrecise()); [EOL]     assertEquals(false, gj.days().isPrecise()); [EOL]     assertEquals(false, gj.halfdays().isPrecise()); [EOL]     assertEquals(true, gj.hours().isPrecise()); [EOL]     assertEquals(true, gj.minutes().isPrecise()); [EOL]     assertEquals(true, gj.seconds().isPrecise()); [EOL]     assertEquals(true, gj.millis().isPrecise()); [EOL]     final GJChronology gjUTC = GJChronology.getInstanceUTC(); [EOL]     assertEquals(false, gjUTC.centuries().isPrecise()); [EOL]     assertEquals(false, gjUTC.years().isPrecise()); [EOL]     assertEquals(false, gjUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, gjUTC.months().isPrecise()); [EOL]     assertEquals(true, gjUTC.weeks().isPrecise()); [EOL]     assertEquals(true, gjUTC.days().isPrecise()); [EOL]     assertEquals(true, gjUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, gjUTC.hours().isPrecise()); [EOL]     assertEquals(true, gjUTC.minutes().isPrecise()); [EOL]     assertEquals(true, gjUTC.seconds().isPrecise()); [EOL]     assertEquals(true, gjUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final GJChronology gjGMT = GJChronology.getInstance(gmt); [EOL]     assertEquals(false, gjGMT.centuries().isPrecise()); [EOL]     assertEquals(false, gjGMT.years().isPrecise()); [EOL]     assertEquals(false, gjGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, gjGMT.months().isPrecise()); [EOL]     assertEquals(true, gjGMT.weeks().isPrecise()); [EOL]     assertEquals(true, gjGMT.days().isPrecise()); [EOL]     assertEquals(true, gjGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, gjGMT.hours().isPrecise()); [EOL]     assertEquals(true, gjGMT.minutes().isPrecise()); [EOL]     assertEquals(true, gjGMT.seconds().isPrecise()); [EOL]     assertEquals(true, gjGMT.millis().isPrecise()); [EOL] } <line_num>: 198,264
public void testDateFields() { [EOL]     final GJChronology gj = GJChronology.getInstance(); [EOL]     assertEquals("era", gj.era().getName()); [EOL]     assertEquals("centuryOfEra", gj.centuryOfEra().getName()); [EOL]     assertEquals("yearOfCentury", gj.yearOfCentury().getName()); [EOL]     assertEquals("yearOfEra", gj.yearOfEra().getName()); [EOL]     assertEquals("year", gj.year().getName()); [EOL]     assertEquals("monthOfYear", gj.monthOfYear().getName()); [EOL]     assertEquals("weekyearOfCentury", gj.weekyearOfCentury().getName()); [EOL]     assertEquals("weekyear", gj.weekyear().getName()); [EOL]     assertEquals("weekOfWeekyear", gj.weekOfWeekyear().getName()); [EOL]     assertEquals("dayOfYear", gj.dayOfYear().getName()); [EOL]     assertEquals("dayOfMonth", gj.dayOfMonth().getName()); [EOL]     assertEquals("dayOfWeek", gj.dayOfWeek().getName()); [EOL]     assertEquals(true, gj.era().isSupported()); [EOL]     assertEquals(true, gj.centuryOfEra().isSupported()); [EOL]     assertEquals(true, gj.yearOfCentury().isSupported()); [EOL]     assertEquals(true, gj.yearOfEra().isSupported()); [EOL]     assertEquals(true, gj.year().isSupported()); [EOL]     assertEquals(true, gj.monthOfYear().isSupported()); [EOL]     assertEquals(true, gj.weekyearOfCentury().isSupported()); [EOL]     assertEquals(true, gj.weekyear().isSupported()); [EOL]     assertEquals(true, gj.weekOfWeekyear().isSupported()); [EOL]     assertEquals(true, gj.dayOfYear().isSupported()); [EOL]     assertEquals(true, gj.dayOfMonth().isSupported()); [EOL]     assertEquals(true, gj.dayOfWeek().isSupported()); [EOL]     assertEquals(gj.eras(), gj.era().getDurationField()); [EOL]     assertEquals(gj.centuries(), gj.centuryOfEra().getDurationField()); [EOL]     assertEquals(gj.years(), gj.yearOfCentury().getDurationField()); [EOL]     assertEquals(gj.years(), gj.yearOfEra().getDurationField()); [EOL]     assertEquals(gj.years(), gj.year().getDurationField()); [EOL]     assertEquals(gj.months(), gj.monthOfYear().getDurationField()); [EOL]     assertEquals(gj.weekyears(), gj.weekyearOfCentury().getDurationField()); [EOL]     assertEquals(gj.weekyears(), gj.weekyear().getDurationField()); [EOL]     assertEquals(gj.weeks(), gj.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(gj.days(), gj.dayOfYear().getDurationField()); [EOL]     assertEquals(gj.days(), gj.dayOfMonth().getDurationField()); [EOL]     assertEquals(gj.days(), gj.dayOfWeek().getDurationField()); [EOL]     assertEquals(null, gj.era().getRangeDurationField()); [EOL]     assertEquals(gj.eras(), gj.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(gj.centuries(), gj.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(gj.eras(), gj.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(null, gj.year().getRangeDurationField()); [EOL]     assertEquals(gj.years(), gj.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(gj.centuries(), gj.weekyearOfCentury().getRangeDurationField()); [EOL]     assertEquals(null, gj.weekyear().getRangeDurationField()); [EOL]     assertEquals(gj.weekyears(), gj.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(gj.years(), gj.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(gj.months(), gj.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(gj.weeks(), gj.dayOfWeek().getRangeDurationField()); [EOL] } <line_num>: 266,319
public void testTimeFields() { [EOL]     final GJChronology gj = GJChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", gj.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", gj.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", gj.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", gj.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", gj.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", gj.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", gj.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", gj.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", gj.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", gj.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", gj.millisOfSecond().getName()); [EOL]     assertEquals(true, gj.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, gj.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, gj.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, gj.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, gj.hourOfDay().isSupported()); [EOL]     assertEquals(true, gj.minuteOfDay().isSupported()); [EOL]     assertEquals(true, gj.minuteOfHour().isSupported()); [EOL]     assertEquals(true, gj.secondOfDay().isSupported()); [EOL]     assertEquals(true, gj.secondOfMinute().isSupported()); [EOL]     assertEquals(true, gj.millisOfDay().isSupported()); [EOL]     assertEquals(true, gj.millisOfSecond().isSupported()); [EOL] } <line_num>: 321,346
public void testIllegalDates() { [EOL]     try { [EOL]         new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         fail("Constructed illegal date"); [EOL]     } catch (IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 348,358
public void testParseEquivalence() { [EOL]     testParse("1581-01-01T01:23:45.678", 1581, 1, 1, 1, 23, 45, 678); [EOL]     testParse("1581-06-30", 1581, 6, 30, 0, 0, 0, 0); [EOL]     testParse("1582-01-01T01:23:45.678", 1582, 1, 1, 1, 23, 45, 678); [EOL]     testParse("1582-06-30T01:23:45.678", 1582, 6, 30, 1, 23, 45, 678); [EOL]     testParse("1582-10-04", 1582, 10, 4, 0, 0, 0, 0); [EOL]     testParse("1582-10-15", 1582, 10, 15, 0, 0, 0, 0); [EOL]     testParse("1582-12-31", 1582, 12, 31, 0, 0, 0, 0); [EOL]     testParse("1583-12-31", 1583, 12, 31, 0, 0, 0, 0); [EOL] } <line_num>: 360,369
private void testParse(String str, int year, int month, int day, int hour, int minute, int second, int millis) { [EOL]     assertEquals(new DateTime(str, GJChronology.getInstance(DateTimeZone.UTC)), new DateTime(year, month, day, hour, minute, second, millis, GJChronology.getInstance(DateTimeZone.UTC))); [EOL] } <line_num>: 371,377
public void testCutoverAddYears() { [EOL]     testAdd("1582-01-01", DurationFieldType.years(), 1, "1583-01-01"); [EOL]     testAdd("1582-02-15", DurationFieldType.years(), 1, "1583-02-15"); [EOL]     testAdd("1582-02-28", DurationFieldType.years(), 1, "1583-02-28"); [EOL]     testAdd("1582-03-01", DurationFieldType.years(), 1, "1583-03-01"); [EOL]     testAdd("1582-09-30", DurationFieldType.years(), 1, "1583-09-30"); [EOL]     testAdd("1582-10-01", DurationFieldType.years(), 1, "1583-10-01"); [EOL]     testAdd("1582-10-04", DurationFieldType.years(), 1, "1583-10-04"); [EOL]     testAdd("1582-10-15", DurationFieldType.years(), 1, "1583-10-15"); [EOL]     testAdd("1582-10-16", DurationFieldType.years(), 1, "1583-10-16"); [EOL]     testAdd("1580-01-01", DurationFieldType.years(), 4, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.years(), 4, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.years(), 4, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.years(), 4, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.years(), 4, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.years(), 4, "1584-12-31"); [EOL] } <line_num>: 379,397
public void testCutoverAddWeekyears() { [EOL]     testAdd("1582-W01-1", DurationFieldType.weekyears(), 1, "1583-W01-1"); [EOL]     testAdd("1582-W39-1", DurationFieldType.weekyears(), 1, "1583-W39-1"); [EOL]     testAdd("1583-W45-1", DurationFieldType.weekyears(), 1, "1584-W45-1"); [EOL]     testAdd("1580-W01-1", DurationFieldType.weekyears(), 4, "1584-W01-1"); [EOL]     testAdd("1580-W30-7", DurationFieldType.weekyears(), 4, "1584-W30-7"); [EOL]     testAdd("1580-W50-7", DurationFieldType.weekyears(), 4, "1584-W50-7"); [EOL] } <line_num>: 399,418
public void testCutoverAddMonths() { [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 1, "1582-02-01"); [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 6, "1582-07-01"); [EOL]     testAdd("1582-01-01", DurationFieldType.months(), 12, "1583-01-01"); [EOL]     testAdd("1582-11-15", DurationFieldType.months(), 1, "1582-12-15"); [EOL]     testAdd("1582-09-04", DurationFieldType.months(), 2, "1582-11-04"); [EOL]     testAdd("1582-09-05", DurationFieldType.months(), 2, "1582-11-05"); [EOL]     testAdd("1582-09-10", DurationFieldType.months(), 2, "1582-11-10"); [EOL]     testAdd("1582-09-15", DurationFieldType.months(), 2, "1582-11-15"); [EOL]     testAdd("1580-01-01", DurationFieldType.months(), 48, "1584-01-01"); [EOL]     testAdd("1580-02-29", DurationFieldType.months(), 48, "1584-02-29"); [EOL]     testAdd("1580-10-01", DurationFieldType.months(), 48, "1584-10-01"); [EOL]     testAdd("1580-10-10", DurationFieldType.months(), 48, "1584-10-10"); [EOL]     testAdd("1580-10-15", DurationFieldType.months(), 48, "1584-10-15"); [EOL]     testAdd("1580-12-31", DurationFieldType.months(), 48, "1584-12-31"); [EOL] } <line_num>: 420,439
public void testCutoverAddWeeks() { [EOL]     testAdd("1582-01-01", DurationFieldType.weeks(), 1, "1582-01-08"); [EOL]     testAdd("1583-01-01", DurationFieldType.weeks(), 1, "1583-01-08"); [EOL]     testAdd("1582-10-01", DurationFieldType.weeks(), 2, "1582-10-25"); [EOL]     testAdd("1582-W01-1", DurationFieldType.weeks(), 51, "1583-W01-1"); [EOL] } <line_num>: 441,448
public void testCutoverAddDays() { [EOL]     testAdd("1582-10-03", DurationFieldType.days(), 1, "1582-10-04"); [EOL]     testAdd("1582-10-04", DurationFieldType.days(), 1, "1582-10-15"); [EOL]     testAdd("1582-10-15", DurationFieldType.days(), 1, "1582-10-16"); [EOL]     testAdd("1582-09-30", DurationFieldType.days(), 10, "1582-10-20"); [EOL]     testAdd("1582-10-04", DurationFieldType.days(), 10, "1582-10-24"); [EOL]     testAdd("1582-10-15", DurationFieldType.days(), 10, "1582-10-25"); [EOL] } <line_num>: 450,458
public void testYearEndAddDays() { [EOL]     testAdd("1582-11-05", DurationFieldType.days(), 28, "1582-12-03"); [EOL]     testAdd("1582-12-05", DurationFieldType.days(), 28, "1583-01-02"); [EOL]     testAdd("2005-11-05", DurationFieldType.days(), 28, "2005-12-03"); [EOL]     testAdd("2005-12-05", DurationFieldType.days(), 28, "2006-01-02"); [EOL] } <line_num>: 460,466
public void testSubtractDays() { [EOL]     DateTime dt = new DateTime(1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin"))); [EOL]     YearMonthDay ymd = dt.toYearMonthDay(); [EOL]     while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { [EOL]         ymd = ymd.minus(Period.days(1)); [EOL]     } [EOL] } <line_num>: 468,478
private void testAdd(String start, DurationFieldType type, int amt, String end) { [EOL]     DateTime dtStart = new DateTime(start, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]     DateTime dtEnd = new DateTime(end, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]     assertEquals(dtEnd, dtStart.withFieldAdded(type, amt)); [EOL]     assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt)); [EOL]     DurationField field = type.getField(GJChronology.getInstance(DateTimeZone.UTC)); [EOL]     int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis()); [EOL]     assertEquals(amt, diff); [EOL]     if (type == DurationFieldType.years() || type == DurationFieldType.months() || type == DurationFieldType.days()) { [EOL]         YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC)); [EOL]         assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt)); [EOL]         assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt)); [EOL]     } [EOL] } <line_num>: 480,498
public void testTimeOfDayAdd() { [EOL]     TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance()); [EOL]     TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance()); [EOL]     assertEquals(end, start.plusHours(22)); [EOL]     assertEquals(start, end.minusHours(22)); [EOL]     assertEquals(end, start.plusMinutes(22 * 60)); [EOL]     assertEquals(start, end.minusMinutes(22 * 60)); [EOL] } <line_num>: 500,507
public void testMaximumValue() { [EOL]     DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance()); [EOL]     while (dt.getYear() < 1590) { [EOL]         dt = dt.plusDays(1); [EOL]         YearMonthDay ymd = dt.toYearMonthDay(); [EOL]         assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue()); [EOL]         assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue()); [EOL]         assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue()); [EOL]     } [EOL] } <line_num>: 509,518
public void testPartialGetAsText() { [EOL]     GJChronology chrono = GJChronology.getInstance(TOKYO); [EOL]     assertEquals("January", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsText()); [EOL]     assertEquals("Jan", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsShortText()); [EOL] } <line_num>: 520,524
public void testLeapYearRulesConstruction() { [EOL]     DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC()); [EOL]     assertEquals(dt.getYear(), 1500); [EOL]     assertEquals(dt.getMonthOfYear(), 2); [EOL]     assertEquals(dt.getDayOfMonth(), 29); [EOL] } <line_num>: 526,532
public void testLeapYearRulesConstructionInvalid() { [EOL]     try { [EOL]         new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC()); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException ex) { [EOL]     } [EOL] } <line_num>: 534,542
