public TestCopticChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 73,75
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 64,66
public static TestSuite suite() { [EOL]     SKIP = 1 * MILLIS_PER_DAY; [EOL]     return new TestSuite(TestCopticChronology.class); [EOL] } <line_num>: 68,71
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 77,85
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 87,95
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, CopticChronology.getInstanceUTC().getZone()); [EOL]     assertSame(CopticChronology.class, CopticChronology.getInstanceUTC().getClass()); [EOL] } <line_num>: 98,101
public void testFactory() { [EOL]     assertEquals(LONDON, CopticChronology.getInstance().getZone()); [EOL]     assertSame(CopticChronology.class, CopticChronology.getInstance().getClass()); [EOL] } <line_num>: 103,106
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, CopticChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, CopticChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, CopticChronology.getInstance(null).getZone()); [EOL]     assertSame(CopticChronology.class, CopticChronology.getInstance(TOKYO).getClass()); [EOL] } <line_num>: 108,113
public void testEquality() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS)); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC()); [EOL]     assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON)); [EOL] } <line_num>: 116,122
public void testWithUTC() { [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance().withUTC()); [EOL] } <line_num>: 124,129
public void testWithZone() { [EOL]     assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstanceUTC().withZone(PARIS)); [EOL] } <line_num>: 131,138
public void testToString() { [EOL]     assertEquals("CopticChronology[Europe/London]", CopticChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("CopticChronology[Asia/Tokyo]", CopticChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("CopticChronology[Europe/London]", CopticChronology.getInstance().toString()); [EOL]     assertEquals("CopticChronology[UTC]", CopticChronology.getInstanceUTC().toString()); [EOL] } <line_num>: 140,145
public void testDurationFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("eras", coptic.eras().getName()); [EOL]     assertEquals("centuries", coptic.centuries().getName()); [EOL]     assertEquals("years", coptic.years().getName()); [EOL]     assertEquals("weekyears", coptic.weekyears().getName()); [EOL]     assertEquals("months", coptic.months().getName()); [EOL]     assertEquals("weeks", coptic.weeks().getName()); [EOL]     assertEquals("days", coptic.days().getName()); [EOL]     assertEquals("halfdays", coptic.halfdays().getName()); [EOL]     assertEquals("hours", coptic.hours().getName()); [EOL]     assertEquals("minutes", coptic.minutes().getName()); [EOL]     assertEquals("seconds", coptic.seconds().getName()); [EOL]     assertEquals("millis", coptic.millis().getName()); [EOL]     assertEquals(false, coptic.eras().isSupported()); [EOL]     assertEquals(true, coptic.centuries().isSupported()); [EOL]     assertEquals(true, coptic.years().isSupported()); [EOL]     assertEquals(true, coptic.weekyears().isSupported()); [EOL]     assertEquals(true, coptic.months().isSupported()); [EOL]     assertEquals(true, coptic.weeks().isSupported()); [EOL]     assertEquals(true, coptic.days().isSupported()); [EOL]     assertEquals(true, coptic.halfdays().isSupported()); [EOL]     assertEquals(true, coptic.hours().isSupported()); [EOL]     assertEquals(true, coptic.minutes().isSupported()); [EOL]     assertEquals(true, coptic.seconds().isSupported()); [EOL]     assertEquals(true, coptic.millis().isSupported()); [EOL]     assertEquals(false, coptic.centuries().isPrecise()); [EOL]     assertEquals(false, coptic.years().isPrecise()); [EOL]     assertEquals(false, coptic.weekyears().isPrecise()); [EOL]     assertEquals(false, coptic.months().isPrecise()); [EOL]     assertEquals(false, coptic.weeks().isPrecise()); [EOL]     assertEquals(false, coptic.days().isPrecise()); [EOL]     assertEquals(false, coptic.halfdays().isPrecise()); [EOL]     assertEquals(true, coptic.hours().isPrecise()); [EOL]     assertEquals(true, coptic.minutes().isPrecise()); [EOL]     assertEquals(true, coptic.seconds().isPrecise()); [EOL]     assertEquals(true, coptic.millis().isPrecise()); [EOL]     final CopticChronology copticUTC = CopticChronology.getInstanceUTC(); [EOL]     assertEquals(false, copticUTC.centuries().isPrecise()); [EOL]     assertEquals(false, copticUTC.years().isPrecise()); [EOL]     assertEquals(false, copticUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, copticUTC.months().isPrecise()); [EOL]     assertEquals(true, copticUTC.weeks().isPrecise()); [EOL]     assertEquals(true, copticUTC.days().isPrecise()); [EOL]     assertEquals(true, copticUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, copticUTC.hours().isPrecise()); [EOL]     assertEquals(true, copticUTC.minutes().isPrecise()); [EOL]     assertEquals(true, copticUTC.seconds().isPrecise()); [EOL]     assertEquals(true, copticUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final CopticChronology copticGMT = CopticChronology.getInstance(gmt); [EOL]     assertEquals(false, copticGMT.centuries().isPrecise()); [EOL]     assertEquals(false, copticGMT.years().isPrecise()); [EOL]     assertEquals(false, copticGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, copticGMT.months().isPrecise()); [EOL]     assertEquals(true, copticGMT.weeks().isPrecise()); [EOL]     assertEquals(true, copticGMT.days().isPrecise()); [EOL]     assertEquals(true, copticGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, copticGMT.hours().isPrecise()); [EOL]     assertEquals(true, copticGMT.minutes().isPrecise()); [EOL]     assertEquals(true, copticGMT.seconds().isPrecise()); [EOL]     assertEquals(true, copticGMT.millis().isPrecise()); [EOL] } <line_num>: 148,214
public void testDateFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("era", coptic.era().getName()); [EOL]     assertEquals("centuryOfEra", coptic.centuryOfEra().getName()); [EOL]     assertEquals("yearOfCentury", coptic.yearOfCentury().getName()); [EOL]     assertEquals("yearOfEra", coptic.yearOfEra().getName()); [EOL]     assertEquals("year", coptic.year().getName()); [EOL]     assertEquals("monthOfYear", coptic.monthOfYear().getName()); [EOL]     assertEquals("weekyearOfCentury", coptic.weekyearOfCentury().getName()); [EOL]     assertEquals("weekyear", coptic.weekyear().getName()); [EOL]     assertEquals("weekOfWeekyear", coptic.weekOfWeekyear().getName()); [EOL]     assertEquals("dayOfYear", coptic.dayOfYear().getName()); [EOL]     assertEquals("dayOfMonth", coptic.dayOfMonth().getName()); [EOL]     assertEquals("dayOfWeek", coptic.dayOfWeek().getName()); [EOL]     assertEquals(true, coptic.era().isSupported()); [EOL]     assertEquals(true, coptic.centuryOfEra().isSupported()); [EOL]     assertEquals(true, coptic.yearOfCentury().isSupported()); [EOL]     assertEquals(true, coptic.yearOfEra().isSupported()); [EOL]     assertEquals(true, coptic.year().isSupported()); [EOL]     assertEquals(true, coptic.monthOfYear().isSupported()); [EOL]     assertEquals(true, coptic.weekyearOfCentury().isSupported()); [EOL]     assertEquals(true, coptic.weekyear().isSupported()); [EOL]     assertEquals(true, coptic.weekOfWeekyear().isSupported()); [EOL]     assertEquals(true, coptic.dayOfYear().isSupported()); [EOL]     assertEquals(true, coptic.dayOfMonth().isSupported()); [EOL]     assertEquals(true, coptic.dayOfWeek().isSupported()); [EOL]     assertEquals(coptic.eras(), coptic.era().getDurationField()); [EOL]     assertEquals(coptic.centuries(), coptic.centuryOfEra().getDurationField()); [EOL]     assertEquals(coptic.years(), coptic.yearOfCentury().getDurationField()); [EOL]     assertEquals(coptic.years(), coptic.yearOfEra().getDurationField()); [EOL]     assertEquals(coptic.years(), coptic.year().getDurationField()); [EOL]     assertEquals(coptic.months(), coptic.monthOfYear().getDurationField()); [EOL]     assertEquals(coptic.weekyears(), coptic.weekyearOfCentury().getDurationField()); [EOL]     assertEquals(coptic.weekyears(), coptic.weekyear().getDurationField()); [EOL]     assertEquals(coptic.weeks(), coptic.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(coptic.days(), coptic.dayOfYear().getDurationField()); [EOL]     assertEquals(coptic.days(), coptic.dayOfMonth().getDurationField()); [EOL]     assertEquals(coptic.days(), coptic.dayOfWeek().getDurationField()); [EOL]     assertEquals(null, coptic.era().getRangeDurationField()); [EOL]     assertEquals(coptic.eras(), coptic.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(coptic.centuries(), coptic.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(coptic.eras(), coptic.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(null, coptic.year().getRangeDurationField()); [EOL]     assertEquals(coptic.years(), coptic.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(coptic.centuries(), coptic.weekyearOfCentury().getRangeDurationField()); [EOL]     assertEquals(null, coptic.weekyear().getRangeDurationField()); [EOL]     assertEquals(coptic.weekyears(), coptic.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(coptic.years(), coptic.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(coptic.months(), coptic.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(coptic.weeks(), coptic.dayOfWeek().getRangeDurationField()); [EOL] } <line_num>: 216,269
public void testTimeFields() { [EOL]     final CopticChronology coptic = CopticChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", coptic.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", coptic.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", coptic.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", coptic.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", coptic.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", coptic.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", coptic.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", coptic.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", coptic.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", coptic.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", coptic.millisOfSecond().getName()); [EOL]     assertEquals(true, coptic.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, coptic.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, coptic.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, coptic.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, coptic.hourOfDay().isSupported()); [EOL]     assertEquals(true, coptic.minuteOfDay().isSupported()); [EOL]     assertEquals(true, coptic.minuteOfHour().isSupported()); [EOL]     assertEquals(true, coptic.secondOfDay().isSupported()); [EOL]     assertEquals(true, coptic.secondOfMinute().isSupported()); [EOL]     assertEquals(true, coptic.millisOfDay().isSupported()); [EOL]     assertEquals(true, coptic.millisOfSecond().isSupported()); [EOL] } <line_num>: 271,296
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, COPTIC_UTC); [EOL]     assertEquals(new DateTime(284, 8, 29, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC)); [EOL] } <line_num>: 299,302
public void testEra() { [EOL]     assertEquals(1, CopticChronology.AM); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 304,310
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestCopticChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, COPTIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = COPTIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = COPTIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = COPTIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = COPTIC_UTC.monthOfYear(); [EOL]     DateTimeField year = COPTIC_UTC.year(); [EOL]     DateTimeField yearOfEra = COPTIC_UTC.yearOfEra(); [EOL]     DateTimeField era = COPTIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(284, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 13) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("AM", era.getAsText(millis)); [EOL]         assertEquals("AM", era.getAsShortText(millis)); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(yearValue % 4 == 3, year.isLeap(millis)); [EOL]         if (monthValue == 13) { [EOL]             assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); [EOL]             if (yearValue % 4 == 3) { [EOL]                 assertEquals(6, monthLen); [EOL]             } else { [EOL]                 assertEquals(5, monthLen); [EOL]             } [EOL]         } else { [EOL]             assertEquals(30, monthLen); [EOL]         } [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay == 31 && expectedMonth < 13) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]         } else if (expectedMonth == 13) { [EOL]             if (expectedYear % 4 == 3 && expectedDay == 7) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } else if (expectedYear % 4 != 3 && expectedDay == 6) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] } <line_num>: 316,398
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(18, dt.getCenturyOfEra()); [EOL]     assertEquals(20, dt.getYearOfCentury()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] } <line_num>: 400,463
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(COPTIC_UTC); [EOL]     assertEquals(CopticChronology.AM, dt.getEra()); [EOL]     assertEquals(1720, dt.getYear()); [EOL]     assertEquals(1720, dt.getYearOfEra()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     assertEquals(10, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] } <line_num>: 465,476
public void testDurationYear() { [EOL]     DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt20.year().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis())); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4)); [EOL]     assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L)); [EOL]     assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L)); [EOL]     assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L)); [EOL]     assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L)); [EOL] } <line_num>: 478,528
public void testDurationMonth() { [EOL]     DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC); [EOL]     DurationField fld = dt11.monthOfYear().getDurationField(); [EOL]     assertEquals(COPTIC_UTC.months(), fld); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13)); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L)); [EOL]     assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3)); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L)); [EOL] } <line_num>: 530,577
