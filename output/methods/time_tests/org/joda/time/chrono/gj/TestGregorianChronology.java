public TestGregorianChronology() { [EOL]     super(1970, 1, 1); [EOL] } <line_num>: 30,32
public TestGregorianChronology(int epochYear, int epochMonth, int epochDay) { [EOL]     super(epochYear, epochMonth, epochDay); [EOL] } <line_num>: 34,36
public String toString() { [EOL]     return "TestGregorianChronology"; [EOL] } <line_num>: 38,40
long millisPerYear() { [EOL]     return (long) (365.2425 * MILLIS_PER_DAY); [EOL] } <line_num>: 42,44
long millisPerMonth() { [EOL]     return (long) (365.2425 * MILLIS_PER_DAY / 12); [EOL] } <line_num>: 46,48
boolean isLeapYear(int year) { [EOL]     if (mod(year, 4) == 0) { [EOL]         int t = (int) mod(year, 400); [EOL]         if (t != 100 && t != 200 && t != 300) { [EOL]             return true; [EOL]         } [EOL]     } [EOL]     return false; [EOL] } <line_num>: 50,58
long fixedFromGJ(int year, int monthOfYear, int dayOfMonth) { [EOL]     long year_m1 = year - 1; [EOL]     long f = 365 * year_m1 + div(year_m1, 4) - div(year_m1, 100) + div(year_m1, 400) + div(367 * monthOfYear - 362, 12) + dayOfMonth; [EOL]     if (monthOfYear > 2) { [EOL]         f += isLeapYear(year) ? -1 : -2; [EOL]     } [EOL]     return f; [EOL] } <line_num>: 63,71
int gjYearFromFixed(long date) { [EOL]     long d0 = date - 1; [EOL]     long n400 = div(d0, 146097); [EOL]     long d1 = mod(d0, 146097); [EOL]     long n100 = div(d1, 36524); [EOL]     long d2 = mod(d1, 36524); [EOL]     long n4 = div(d2, 1461); [EOL]     long d3 = mod(d2, 1461); [EOL]     long n1 = div(d3, 365); [EOL]     long year = 400 * n400 + 100 * n100 + 4 * n4 + n1; [EOL]     if (!(n100 == 4 || n1 == 4)) { [EOL]         year += 1; [EOL]     } [EOL]     int year_i = (int) year; [EOL]     if (year_i == year) { [EOL]         return year_i; [EOL]     } else { [EOL]         throw new RuntimeException("year cannot be cast to an int: " + year); [EOL]     } [EOL] } <line_num>: 77,97
int[] gjFromFixed(long date) { [EOL]     int year = gjYearFromFixed(date); [EOL]     long priorDays = date - fixedFromGJ(year, 1, 1); [EOL]     long correction; [EOL]     if (date < fixedFromGJ(year, 3, 1)) { [EOL]         correction = 0; [EOL]     } else if (isLeapYear(year)) { [EOL]         correction = 1; [EOL]     } else { [EOL]         correction = 2; [EOL]     } [EOL]     int monthOfYear = (int) div(12 * (priorDays + correction) + 373, 367); [EOL]     int day = (int) (date - fixedFromGJ(year, monthOfYear, 1) + 1); [EOL]     return new int[] { year, monthOfYear, day }; [EOL] } <line_num>: 103,118
long fixedFromISO(int weekyear, int weekOfWeekyear, int dayOfWeek) { [EOL]     return nthWeekday(weekOfWeekyear, 0, weekyear - 1, 12, 28) + dayOfWeek; [EOL] } <line_num>: 120,122
int[] isoFromFixed(long date) { [EOL]     int weekyear = gjYearFromFixed(date - 3); [EOL]     if (date >= fixedFromISO(weekyear + 1, 1, 1)) { [EOL]         weekyear += 1; [EOL]     } [EOL]     int weekOfWeekyear = (int) (div(date - fixedFromISO(weekyear, 1, 1), 7) + 1); [EOL]     int dayOfWeek = (int) amod(date, 7); [EOL]     return new int[] { weekyear, weekOfWeekyear, dayOfWeek }; [EOL] } <line_num>: 128,136
