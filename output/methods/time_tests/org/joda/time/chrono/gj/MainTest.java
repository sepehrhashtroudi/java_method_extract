public MainTest(int iterations, int mode, long seed) { [EOL]     super("testChronology"); [EOL]     iIterations = iterations; [EOL]     iMode = mode; [EOL]     iSeed = seed; [EOL]     if (mode == GREGORIAN_MODE) { [EOL]         iTest = new TestGregorianChronology(); [EOL]         iActual = GregorianChronology.getInstanceUTC(); [EOL]     } else { [EOL]         iTest = new TestJulianChronology(); [EOL]         iActual = JulianChronology.getInstanceUTC(); [EOL]     } [EOL] } <line_num>: 103,115
public static void main(String[] args) throws Exception { [EOL]     int iterations = 1000000; [EOL]     int mode = GREGORIAN_MODE; [EOL]     long seed = 1345435247779935L; [EOL]     if (args.length > 0) { [EOL]         iterations = Integer.parseInt(args[0]); [EOL]         if (args.length > 1) { [EOL]             if (args[1].startsWith("g")) { [EOL]                 mode = GREGORIAN_MODE; [EOL]             } else if (args[1].startsWith("j")) { [EOL]                 mode = JULIAN_MODE; [EOL]             } else { [EOL]                 throw new IllegalArgumentException("Unknown mode: " + args[1]); [EOL]             } [EOL]             if (args.length > 2) { [EOL]                 seed = Long.parseLong(args[2]); [EOL]             } [EOL]         } [EOL]     } [EOL]     new MainTest(iterations, mode, seed).testChronology(); [EOL] } <line_num>: 66,89
public void testChronology() { [EOL]     int iterations = iIterations; [EOL]     long seed = iSeed; [EOL]     String modeStr; [EOL]     if (iMode == GREGORIAN_MODE) { [EOL]         modeStr = "Gregorian"; [EOL]     } else { [EOL]         modeStr = "Julian"; [EOL]     } [EOL]     System.out.println("\nTesting " + modeStr + " chronology over " + iterations + " iterations"); [EOL]     Random rnd = new Random(seed); [EOL]     long updateMillis = System.currentTimeMillis() + UPDATE_INTERVAL; [EOL]     for (int i = 0; i < iterations; i++) { [EOL]         long now = System.currentTimeMillis(); [EOL]         if (now >= updateMillis) { [EOL]             updateMillis = now + UPDATE_INTERVAL; [EOL]             double complete = ((int) ((double) i / iterations * 1000.0)) / 10d; [EOL]             if (complete < 100) { [EOL]                 System.out.println("" + complete + "% complete (i=" + i + ")"); [EOL]             } [EOL]         } [EOL]         long millis = randomMillis(rnd); [EOL]         int value = rnd.nextInt(200) - 100; [EOL]         long millis2 = millis + rnd.nextLong() % _1000_YEARS - _500_YEARS; [EOL]         try { [EOL]             testFields(millis, value, millis2); [EOL]         } catch (RuntimeException e) { [EOL]             System.out.println("Failure index: " + i); [EOL]             System.out.println("Test millis: " + millis); [EOL]             System.out.println("Test value: " + value); [EOL]             System.out.println("Test millis2: " + millis2); [EOL]             fail(e.getMessage()); [EOL]         } [EOL]     } [EOL]     System.out.println("100% complete (i=" + iterations + ")"); [EOL] } <line_num>: 121,163
private void testFields(long millis, int value, long millis2) { [EOL]     testField(iTest.year(), iActual.year(), millis, value, millis2); [EOL]     testField(iTest.monthOfYear(), iActual.monthOfYear(), millis, value, millis2); [EOL]     testField(iTest.dayOfMonth(), iActual.dayOfMonth(), millis, value, millis2); [EOL]     testField(iTest.weekyear(), iActual.weekyear(), millis, value, millis2); [EOL]     testField(iTest.weekOfWeekyear(), iActual.weekOfWeekyear(), millis, value, millis2); [EOL]     testField(iTest.dayOfWeek(), iActual.dayOfWeek(), millis, value, millis2); [EOL]     testField(iTest.dayOfYear(), iActual.dayOfYear(), millis, value, millis2); [EOL] } <line_num>: 166,175
private void testField(DateTimeField fieldA, DateTimeField fieldB, long millis, int value, long millis2) { [EOL]     int a, b; [EOL]     long x, y; [EOL]     boolean m, n; [EOL]     a = fieldA.get(millis); [EOL]     b = fieldB.get(millis); [EOL]     testValue(fieldA, fieldB, "get", millis, a, b); [EOL]     Class fieldClass = fieldA.getClass(); [EOL]     if (fieldClass == TestGJDayOfYearField.class || fieldClass == TestGJDayOfMonthField.class || fieldClass == TestGJWeekOfWeekyearField.class) { [EOL]         a = fieldA.getMaximumValue(millis); [EOL]         b = fieldB.getMaximumValue(millis); [EOL]         testValue(fieldA, fieldB, "getMaximumValue", millis, a, b); [EOL]     } [EOL]     a = getWrappedValue(value, fieldA.getMinimumValue(millis), fieldA.getMaximumValue(millis)); [EOL]     b = getWrappedValue(value, fieldB.getMinimumValue(millis), fieldB.getMaximumValue(millis)); [EOL]     if (iMode == JULIAN_MODE && a == 0 && (fieldA.getName().equals("year") || fieldA.getName().equals("weekyear"))) { [EOL]     } else { [EOL]         x = fieldA.set(millis, a); [EOL]         y = fieldB.set(millis, b); [EOL]         testMillis(fieldA, fieldB, "set", millis, x, y, a, b); [EOL]     } [EOL]     x = fieldA.roundFloor(millis); [EOL]     y = fieldB.roundFloor(millis); [EOL]     testMillis(fieldA, fieldB, "roundFloor", millis, x, y); [EOL]     x = fieldA.roundCeiling(millis); [EOL]     y = fieldB.roundCeiling(millis); [EOL]     testMillis(fieldA, fieldB, "roundCeiling", millis, x, y); [EOL]     x = fieldA.roundHalfFloor(millis); [EOL]     y = fieldB.roundHalfFloor(millis); [EOL]     testMillis(fieldA, fieldB, "roundHalfFloor", millis, x, y); [EOL]     x = fieldA.roundHalfEven(millis); [EOL]     y = fieldB.roundHalfEven(millis); [EOL]     testMillis(fieldA, fieldB, "roundHalfEven", millis, x, y); [EOL]     x = fieldA.remainder(millis); [EOL]     y = fieldB.remainder(millis); [EOL]     testMillis(fieldA, fieldB, "remainder", millis, x, y); [EOL]     x = fieldA.add(millis, value); [EOL]     y = fieldB.add(millis, value); [EOL]     testMillis(fieldA, fieldB, "add", millis, x, y); [EOL]     x = fieldA.addWrapField(millis, value); [EOL]     y = fieldB.addWrapField(millis, value); [EOL]     testMillis(fieldA, fieldB, "addWrapField", millis, x, y); [EOL]     x = fieldA.getDifference(millis, millis2); [EOL]     y = fieldB.getDifference(millis, millis2); [EOL]     try { [EOL]         testValue(fieldA, fieldB, "getDifference", millis, x, y); [EOL]     } catch (RuntimeException e) { [EOL]         System.out.println("Test datetime 2: " + makeDatetime(millis2)); [EOL]         throw e; [EOL]     } [EOL]     m = fieldA.isLeap(millis); [EOL]     n = fieldB.isLeap(millis); [EOL]     testBoolean(fieldA, fieldB, "isLeap", millis, m, n); [EOL]     a = fieldA.getLeapAmount(millis); [EOL]     b = fieldB.getLeapAmount(millis); [EOL]     testValue(fieldA, fieldB, "getLeapAmount", millis, a, b); [EOL] } <line_num>: 177,269
private int getWrappedValue(int value, int minValue, int maxValue) { [EOL]     if (minValue >= maxValue) { [EOL]         throw new IllegalArgumentException("MIN > MAX"); [EOL]     } [EOL]     int wrapRange = maxValue - minValue + 1; [EOL]     value -= minValue; [EOL]     if (value >= 0) { [EOL]         return (value % wrapRange) + minValue; [EOL]     } [EOL]     int remByRange = (-value) % wrapRange; [EOL]     if (remByRange == 0) { [EOL]         return 0 + minValue; [EOL]     } [EOL]     return (wrapRange - remByRange) + minValue; [EOL] } <line_num>: 271,289
private void testValue(DateTimeField fieldA, DateTimeField fieldB, String method, long millis, long valueA, long valueB) { [EOL]     if (valueA != valueB) { [EOL]         failValue(fieldA, fieldB, method, millis, valueA, valueB); [EOL]     } [EOL] } <line_num>: 291,296
private void testMillis(DateTimeField fieldA, DateTimeField fieldB, String method, long millis, long millisA, long millisB) { [EOL]     if (millisA != millisB) { [EOL]         failMillis(fieldA, fieldB, method, millis, millisA, millisB); [EOL]     } [EOL] } <line_num>: 298,303
private void testMillis(DateTimeField fieldA, DateTimeField fieldB, String method, long millis, long millisA, long millisB, int valueA, int valueB) { [EOL]     if (millisA != millisB) { [EOL]         failMillis(fieldA, fieldB, method, millis, millisA, millisB, valueA, valueB); [EOL]     } [EOL] } <line_num>: 305,311
private void testBoolean(DateTimeField fieldA, DateTimeField fieldB, String method, long millis, boolean boolA, boolean boolB) { [EOL]     if (boolA != boolB) { [EOL]         failBoolean(fieldA, fieldB, method, millis, boolA, boolB); [EOL]     } [EOL] } <line_num>: 313,318
private void failValue(DateTimeField fieldA, DateTimeField fieldB, String method, long millis, long valueA, long valueB) { [EOL]     System.out.println("Failure on " + makeName(fieldA, fieldB) + "." + method); [EOL]     System.out.println(fieldA.getClass().getName() + "\n\tvs. " + fieldB.getClass().getName()); [EOL]     System.out.println("Datetime: " + makeDatetime(millis)); [EOL]     System.out.println("Millis from 1970: " + millis); [EOL]     System.out.println(valueA + " != " + valueB); [EOL]     throw new RuntimeException(); [EOL] } <line_num>: 320,329
private void failMillis(DateTimeField fieldA, DateTimeField fieldB, String method, long millis, long millisA, long millisB) { [EOL]     System.out.println("Failure on " + makeName(fieldA, fieldB) + "." + method); [EOL]     System.out.println(fieldA.getClass().getName() + "\n\tvs. " + fieldB.getClass().getName()); [EOL]     System.out.println("Datetime: " + makeDatetime(millis)); [EOL]     System.out.println("Millis from 1970: " + millis); [EOL]     System.out.println(makeDatetime(millisA) + " != " + makeDatetime(millisB)); [EOL]     System.out.println(millisA + " != " + millisB); [EOL]     System.out.println("Original value as reported by first field: " + fieldA.get(millis)); [EOL]     System.out.println("Original value as reported by second field: " + fieldB.get(millis)); [EOL]     System.out.println("First new value as reported by first field: " + fieldA.get(millisA)); [EOL]     System.out.println("First new value as reported by second field: " + fieldB.get(millisA)); [EOL]     System.out.println("Second new value as reported by first field: " + fieldA.get(millisB)); [EOL]     System.out.println("Second new value as reported by second field: " + fieldB.get(millisB)); [EOL]     throw new RuntimeException(); [EOL] } <line_num>: 331,353
private void failMillis(DateTimeField fieldA, DateTimeField fieldB, String method, long millis, long millisA, long millisB, int valueA, int valueB) { [EOL]     System.out.println("Failure on " + makeName(fieldA, fieldB) + "." + method); [EOL]     System.out.println(fieldA.getClass().getName() + "\n\tvs. " + fieldB.getClass().getName()); [EOL]     System.out.println("Datetime: " + makeDatetime(millis)); [EOL]     System.out.println("Millis from 1970: " + millis); [EOL]     System.out.println(makeDatetime(millisA) + " != " + makeDatetime(millisB)); [EOL]     System.out.println(millisA + " != " + millisB); [EOL]     System.out.println("Original value as reported by first field: " + fieldA.get(millis)); [EOL]     System.out.println("Original value as reported by second field: " + fieldB.get(millis)); [EOL]     System.out.println("First new value as reported by first field: " + fieldA.get(millisA)); [EOL]     System.out.println("First new value as reported by second field: " + fieldB.get(millisA)); [EOL]     System.out.println("Second new value as reported by first field: " + fieldA.get(millisB)); [EOL]     System.out.println("Second new value as reported by second field: " + fieldB.get(millisB)); [EOL]     System.out.println("Value to set for first field: " + valueA); [EOL]     System.out.println("Value to set for second field: " + valueB); [EOL]     throw new RuntimeException(); [EOL] } <line_num>: 355,380
private void failBoolean(DateTimeField fieldA, DateTimeField fieldB, String method, long millis, boolean boolA, boolean boolB) { [EOL]     System.out.println("Failure on " + makeName(fieldA, fieldB) + "." + method); [EOL]     System.out.println(fieldA.getClass().getName() + "\n\tvs. " + fieldB.getClass().getName()); [EOL]     System.out.println("Datetime: " + makeDatetime(millis)); [EOL]     System.out.println("Millis from 1970: " + millis); [EOL]     System.out.println(boolA + " != " + boolB); [EOL]     throw new RuntimeException(); [EOL] } <line_num>: 382,391
private String makeName(DateTimeField fieldA, DateTimeField fieldB) { [EOL]     if (fieldA.getName().equals(fieldB.getName())) { [EOL]         return fieldA.getName(); [EOL]     } else { [EOL]         return fieldA.getName() + "/" + fieldB.getName(); [EOL]     } [EOL] } <line_num>: 393,399
private String makeDatetime(long millis) { [EOL]     return makeDatetime(millis, iActual); [EOL] } <line_num>: 401,403
private String makeDatetime(long millis, Chronology chrono) { [EOL]     return chrono.dayOfWeek().getAsShortText(millis) + " " + new DateTime(millis, chrono).toString() + " / " + chrono.weekyear().get(millis) + "-W" + chrono.weekOfWeekyear().get(millis) + "-" + chrono.dayOfWeek().get(millis); [EOL] } <line_num>: 405,410
private String makeDate(long millis) { [EOL]     return makeDate(millis, iActual); [EOL] } <line_num>: 412,414
private String makeDate(long millis, Chronology chrono) { [EOL]     return chrono.dayOfWeek().getAsShortText(millis) + " " + new DateTime(millis, chrono).toString("yyyy-MM-dd") + " / " + chrono.weekyear().get(millis) + "-W" + chrono.weekOfWeekyear().get(millis) + "-" + chrono.dayOfWeek().get(millis); [EOL] } <line_num>: 416,421
private static long randomMillis(Random rnd) { [EOL]     long millis = rnd.nextLong(); [EOL]     if (millis >= 0) { [EOL]         millis = millis % MAX_MILLIS; [EOL]     } else { [EOL]         millis = millis % -MIN_MILLIS; [EOL]     } [EOL]     return millis; [EOL] } <line_num>: 424,432
private static void dump(Chronology chrono, long millis) { [EOL]     System.out.println("year:           " + chrono.year().get(millis)); [EOL]     System.out.println("monthOfYear:    " + chrono.monthOfYear().get(millis)); [EOL]     System.out.println("dayOfMonth:     " + chrono.dayOfMonth().get(millis)); [EOL]     System.out.println("weekyear:       " + chrono.weekyear().get(millis)); [EOL]     System.out.println("weekOfWeekyear: " + chrono.weekOfWeekyear().get(millis)); [EOL]     System.out.println("dayOfWeek:      " + chrono.dayOfWeek().get(millis)); [EOL]     System.out.println("dayOfYear:      " + chrono.dayOfYear().get(millis)); [EOL] } <line_num>: 434,442
