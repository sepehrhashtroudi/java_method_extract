public TestJulianChronology() { [EOL]     super(1969, 12, 19); [EOL] } <line_num>: 40,42
public TestJulianChronology(int epochYear, int epochMonth, int epochDay) { [EOL]     super(epochYear, epochMonth, epochDay); [EOL] } <line_num>: 44,46
public DateTimeField dayOfMonth() { [EOL]     return new TestJulianDayOfMonthField(this); [EOL] } <line_num>: 48,50
public DateTimeField weekyear() { [EOL]     return new TestJulianWeekyearField(this); [EOL] } <line_num>: 52,54
public DateTimeField monthOfYear() { [EOL]     return new TestJulianMonthOfYearField(this); [EOL] } <line_num>: 56,58
public DateTimeField year() { [EOL]     return new TestJulianYearField(this); [EOL] } <line_num>: 60,62
public String toString() { [EOL]     return "TestJulianChronology"; [EOL] } <line_num>: 64,66
long millisPerYear() { [EOL]     return (long) (365.25 * MILLIS_PER_DAY); [EOL] } <line_num>: 68,70
long millisPerMonth() { [EOL]     return (long) (365.25 * MILLIS_PER_DAY / 12); [EOL] } <line_num>: 72,74
boolean isLeapYear(int year) { [EOL]     if (year == 0) { [EOL]         throw new IllegalArgumentException("Illegal year: " + year); [EOL]     } [EOL]     return mod(year, 4) == (year > 0 ? 0 : 3); [EOL] } <line_num>: 76,81
long fixedFromGJ(int year, int monthOfYear, int dayOfMonth) { [EOL]     if (year == 0) { [EOL]         throw new IllegalArgumentException("Illegal year: " + year); [EOL]     } [EOL]     int y = (year < 0) ? year + 1 : year; [EOL]     long y_m1 = y - 1; [EOL]     long f = JULIAN_EPOCH - 1 + 365 * y_m1 + div(y_m1, 4) + div(367 * monthOfYear - 362, 12) + dayOfMonth; [EOL]     if (monthOfYear > 2) { [EOL]         f += isLeapYear(year) ? -1 : -2; [EOL]     } [EOL]     return f; [EOL] } <line_num>: 86,98
int gjYearFromFixed(long date) { [EOL]     return gjFromFixed(date)[0]; [EOL] } <line_num>: 104,106
int[] gjFromFixed(long date) { [EOL]     long approx = div(4 * (date - JULIAN_EPOCH) + 1464, 1461); [EOL]     long year = (approx <= 0) ? approx - 1 : approx; [EOL]     int year_i = (int) year; [EOL]     if (year_i != year) { [EOL]         throw new RuntimeException("year cannot be cast to an int: " + year); [EOL]     } [EOL]     long priorDays = date - fixedFromGJ(year_i, 1, 1); [EOL]     long correction; [EOL]     if (date < fixedFromGJ(year_i, 3, 1)) { [EOL]         correction = 0; [EOL]     } else if (isLeapYear(year_i)) { [EOL]         correction = 1; [EOL]     } else { [EOL]         correction = 2; [EOL]     } [EOL]     int monthOfYear = (int) div(12 * (priorDays + correction) + 373, 367); [EOL]     int day = (int) (date - fixedFromGJ(year_i, monthOfYear, 1) + 1); [EOL]     return new int[] { year_i, monthOfYear, day }; [EOL] } <line_num>: 112,132
long fixedFromISO(int weekyear, int weekOfWeekyear, int dayOfWeek) { [EOL]     if (weekyear == 0) { [EOL]         throw new IllegalArgumentException("Illegal weekyear: " + weekyear); [EOL]     } [EOL]     if (weekyear == 1) { [EOL]         weekyear = -1; [EOL]     } else { [EOL]         weekyear--; [EOL]     } [EOL]     return nthWeekday(weekOfWeekyear, 0, weekyear, 12, 28) + dayOfWeek; [EOL] } <line_num>: 134,144
int[] isoFromFixed(long date) { [EOL]     int weekyear = gjYearFromFixed(date - 3); [EOL]     int nextWeekyear; [EOL]     if (weekyear == -1) { [EOL]         nextWeekyear = 1; [EOL]     } else { [EOL]         nextWeekyear = weekyear + 1; [EOL]     } [EOL]     if (date >= fixedFromISO(nextWeekyear, 1, 1)) { [EOL]         weekyear = nextWeekyear; [EOL]     } [EOL]     int weekOfWeekyear = (int) (div(date - fixedFromISO(weekyear, 1, 1), 7) + 1); [EOL]     int dayOfWeek = (int) amod(date, 7); [EOL]     return new int[] { weekyear, weekOfWeekyear, dayOfWeek }; [EOL] } <line_num>: 150,164
