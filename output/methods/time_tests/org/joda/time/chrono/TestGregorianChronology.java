public TestGregorianChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 63,65
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 55,57
public static TestSuite suite() { [EOL]     return new TestSuite(TestGregorianChronology.class); [EOL] } <line_num>: 59,61
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 67,75
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 77,85
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, GregorianChronology.getInstanceUTC().getZone()); [EOL]     assertSame(GregorianChronology.class, GregorianChronology.getInstanceUTC().getClass()); [EOL] } <line_num>: 88,91
public void testFactory() { [EOL]     assertEquals(LONDON, GregorianChronology.getInstance().getZone()); [EOL]     assertSame(GregorianChronology.class, GregorianChronology.getInstance().getClass()); [EOL] } <line_num>: 93,96
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, GregorianChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, GregorianChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, GregorianChronology.getInstance(null).getZone()); [EOL]     assertSame(GregorianChronology.class, GregorianChronology.getInstance(TOKYO).getClass()); [EOL] } <line_num>: 98,103
public void testFactory_Zone_int() { [EOL]     GregorianChronology chrono = GregorianChronology.getInstance(TOKYO, 2); [EOL]     assertEquals(TOKYO, chrono.getZone()); [EOL]     assertEquals(2, chrono.getMinimumDaysInFirstWeek()); [EOL]     try { [EOL]         GregorianChronology.getInstance(TOKYO, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         GregorianChronology.getInstance(TOKYO, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 105,118
public void testEquality() { [EOL]     assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO)); [EOL]     assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(LONDON)); [EOL]     assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(PARIS)); [EOL]     assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC()); [EOL]     assertSame(GregorianChronology.getInstance(), GregorianChronology.getInstance(LONDON)); [EOL] } <line_num>: 121,127
public void testWithUTC() { [EOL]     assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance().withUTC()); [EOL] } <line_num>: 129,134
public void testWithZone() { [EOL]     assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstanceUTC().withZone(PARIS)); [EOL] } <line_num>: 136,143
public void testToString() { [EOL]     assertEquals("GregorianChronology[Europe/London]", GregorianChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("GregorianChronology[Asia/Tokyo]", GregorianChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("GregorianChronology[Europe/London]", GregorianChronology.getInstance().toString()); [EOL]     assertEquals("GregorianChronology[UTC]", GregorianChronology.getInstanceUTC().toString()); [EOL]     assertEquals("GregorianChronology[UTC,mdfw=2]", GregorianChronology.getInstance(DateTimeZone.UTC, 2).toString()); [EOL] } <line_num>: 145,151
public void testDurationFields() { [EOL]     final GregorianChronology greg = GregorianChronology.getInstance(); [EOL]     assertEquals("eras", greg.eras().getName()); [EOL]     assertEquals("centuries", greg.centuries().getName()); [EOL]     assertEquals("years", greg.years().getName()); [EOL]     assertEquals("weekyears", greg.weekyears().getName()); [EOL]     assertEquals("months", greg.months().getName()); [EOL]     assertEquals("weeks", greg.weeks().getName()); [EOL]     assertEquals("days", greg.days().getName()); [EOL]     assertEquals("halfdays", greg.halfdays().getName()); [EOL]     assertEquals("hours", greg.hours().getName()); [EOL]     assertEquals("minutes", greg.minutes().getName()); [EOL]     assertEquals("seconds", greg.seconds().getName()); [EOL]     assertEquals("millis", greg.millis().getName()); [EOL]     assertEquals(false, greg.eras().isSupported()); [EOL]     assertEquals(true, greg.centuries().isSupported()); [EOL]     assertEquals(true, greg.years().isSupported()); [EOL]     assertEquals(true, greg.weekyears().isSupported()); [EOL]     assertEquals(true, greg.months().isSupported()); [EOL]     assertEquals(true, greg.weeks().isSupported()); [EOL]     assertEquals(true, greg.days().isSupported()); [EOL]     assertEquals(true, greg.halfdays().isSupported()); [EOL]     assertEquals(true, greg.hours().isSupported()); [EOL]     assertEquals(true, greg.minutes().isSupported()); [EOL]     assertEquals(true, greg.seconds().isSupported()); [EOL]     assertEquals(true, greg.millis().isSupported()); [EOL]     assertEquals(false, greg.centuries().isPrecise()); [EOL]     assertEquals(false, greg.years().isPrecise()); [EOL]     assertEquals(false, greg.weekyears().isPrecise()); [EOL]     assertEquals(false, greg.months().isPrecise()); [EOL]     assertEquals(false, greg.weeks().isPrecise()); [EOL]     assertEquals(false, greg.days().isPrecise()); [EOL]     assertEquals(false, greg.halfdays().isPrecise()); [EOL]     assertEquals(true, greg.hours().isPrecise()); [EOL]     assertEquals(true, greg.minutes().isPrecise()); [EOL]     assertEquals(true, greg.seconds().isPrecise()); [EOL]     assertEquals(true, greg.millis().isPrecise()); [EOL]     final GregorianChronology gregUTC = GregorianChronology.getInstanceUTC(); [EOL]     assertEquals(false, gregUTC.centuries().isPrecise()); [EOL]     assertEquals(false, gregUTC.years().isPrecise()); [EOL]     assertEquals(false, gregUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, gregUTC.months().isPrecise()); [EOL]     assertEquals(true, gregUTC.weeks().isPrecise()); [EOL]     assertEquals(true, gregUTC.days().isPrecise()); [EOL]     assertEquals(true, gregUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, gregUTC.hours().isPrecise()); [EOL]     assertEquals(true, gregUTC.minutes().isPrecise()); [EOL]     assertEquals(true, gregUTC.seconds().isPrecise()); [EOL]     assertEquals(true, gregUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final GregorianChronology gregGMT = GregorianChronology.getInstance(gmt); [EOL]     assertEquals(false, gregGMT.centuries().isPrecise()); [EOL]     assertEquals(false, gregGMT.years().isPrecise()); [EOL]     assertEquals(false, gregGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, gregGMT.months().isPrecise()); [EOL]     assertEquals(true, gregGMT.weeks().isPrecise()); [EOL]     assertEquals(true, gregGMT.days().isPrecise()); [EOL]     assertEquals(true, gregGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, gregGMT.hours().isPrecise()); [EOL]     assertEquals(true, gregGMT.minutes().isPrecise()); [EOL]     assertEquals(true, gregGMT.seconds().isPrecise()); [EOL]     assertEquals(true, gregGMT.millis().isPrecise()); [EOL] } <line_num>: 154,220
public void testDateFields() { [EOL]     final GregorianChronology greg = GregorianChronology.getInstance(); [EOL]     assertEquals("era", greg.era().getName()); [EOL]     assertEquals("centuryOfEra", greg.centuryOfEra().getName()); [EOL]     assertEquals("yearOfCentury", greg.yearOfCentury().getName()); [EOL]     assertEquals("yearOfEra", greg.yearOfEra().getName()); [EOL]     assertEquals("year", greg.year().getName()); [EOL]     assertEquals("monthOfYear", greg.monthOfYear().getName()); [EOL]     assertEquals("weekyearOfCentury", greg.weekyearOfCentury().getName()); [EOL]     assertEquals("weekyear", greg.weekyear().getName()); [EOL]     assertEquals("weekOfWeekyear", greg.weekOfWeekyear().getName()); [EOL]     assertEquals("dayOfYear", greg.dayOfYear().getName()); [EOL]     assertEquals("dayOfMonth", greg.dayOfMonth().getName()); [EOL]     assertEquals("dayOfWeek", greg.dayOfWeek().getName()); [EOL]     assertEquals(true, greg.era().isSupported()); [EOL]     assertEquals(true, greg.centuryOfEra().isSupported()); [EOL]     assertEquals(true, greg.yearOfCentury().isSupported()); [EOL]     assertEquals(true, greg.yearOfEra().isSupported()); [EOL]     assertEquals(true, greg.year().isSupported()); [EOL]     assertEquals(true, greg.monthOfYear().isSupported()); [EOL]     assertEquals(true, greg.weekyearOfCentury().isSupported()); [EOL]     assertEquals(true, greg.weekyear().isSupported()); [EOL]     assertEquals(true, greg.weekOfWeekyear().isSupported()); [EOL]     assertEquals(true, greg.dayOfYear().isSupported()); [EOL]     assertEquals(true, greg.dayOfMonth().isSupported()); [EOL]     assertEquals(true, greg.dayOfWeek().isSupported()); [EOL]     assertEquals(greg.eras(), greg.era().getDurationField()); [EOL]     assertEquals(greg.centuries(), greg.centuryOfEra().getDurationField()); [EOL]     assertEquals(greg.years(), greg.yearOfCentury().getDurationField()); [EOL]     assertEquals(greg.years(), greg.yearOfEra().getDurationField()); [EOL]     assertEquals(greg.years(), greg.year().getDurationField()); [EOL]     assertEquals(greg.months(), greg.monthOfYear().getDurationField()); [EOL]     assertEquals(greg.weekyears(), greg.weekyearOfCentury().getDurationField()); [EOL]     assertEquals(greg.weekyears(), greg.weekyear().getDurationField()); [EOL]     assertEquals(greg.weeks(), greg.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(greg.days(), greg.dayOfYear().getDurationField()); [EOL]     assertEquals(greg.days(), greg.dayOfMonth().getDurationField()); [EOL]     assertEquals(greg.days(), greg.dayOfWeek().getDurationField()); [EOL]     assertEquals(null, greg.era().getRangeDurationField()); [EOL]     assertEquals(greg.eras(), greg.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(greg.centuries(), greg.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(greg.eras(), greg.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(null, greg.year().getRangeDurationField()); [EOL]     assertEquals(greg.years(), greg.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(greg.centuries(), greg.weekyearOfCentury().getRangeDurationField()); [EOL]     assertEquals(null, greg.weekyear().getRangeDurationField()); [EOL]     assertEquals(greg.weekyears(), greg.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(greg.years(), greg.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(greg.months(), greg.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(greg.weeks(), greg.dayOfWeek().getRangeDurationField()); [EOL] } <line_num>: 222,275
public void testTimeFields() { [EOL]     final GregorianChronology greg = GregorianChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", greg.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", greg.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", greg.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", greg.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", greg.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", greg.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", greg.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", greg.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", greg.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", greg.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", greg.millisOfSecond().getName()); [EOL]     assertEquals(true, greg.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, greg.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, greg.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, greg.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, greg.hourOfDay().isSupported()); [EOL]     assertEquals(true, greg.minuteOfDay().isSupported()); [EOL]     assertEquals(true, greg.minuteOfHour().isSupported()); [EOL]     assertEquals(true, greg.secondOfDay().isSupported()); [EOL]     assertEquals(true, greg.secondOfMinute().isSupported()); [EOL]     assertEquals(true, greg.millisOfDay().isSupported()); [EOL]     assertEquals(true, greg.millisOfSecond().isSupported()); [EOL] } <line_num>: 277,302
public void testMaximumValue() { [EOL]     YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1); [EOL]     Chronology chrono = GregorianChronology.getInstance(); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1)); [EOL]     assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis())); [EOL] } <line_num>: 304,310
