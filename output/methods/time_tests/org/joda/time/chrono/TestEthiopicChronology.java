public TestEthiopicChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 73,75
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 64,66
public static TestSuite suite() { [EOL]     SKIP = 1 * MILLIS_PER_DAY; [EOL]     return new TestSuite(TestEthiopicChronology.class); [EOL] } <line_num>: 68,71
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 77,85
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 87,95
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, EthiopicChronology.getInstanceUTC().getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstanceUTC().getClass()); [EOL] } <line_num>: 98,101
public void testFactory() { [EOL]     assertEquals(LONDON, EthiopicChronology.getInstance().getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstance().getClass()); [EOL] } <line_num>: 103,106
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone()); [EOL]     assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass()); [EOL] } <line_num>: 108,113
public void testEquality() { [EOL]     assertSame(EthiopicChronology.getInstance(TOKYO), EthiopicChronology.getInstance(TOKYO)); [EOL]     assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(LONDON)); [EOL]     assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance(PARIS)); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC()); [EOL]     assertSame(EthiopicChronology.getInstance(), EthiopicChronology.getInstance(LONDON)); [EOL] } <line_num>: 116,122
public void testWithUTC() { [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC()); [EOL] } <line_num>: 124,129
public void testWithZone() { [EOL]     assertSame(EthiopicChronology.getInstance(TOKYO), EthiopicChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstanceUTC().withZone(PARIS)); [EOL] } <line_num>: 131,138
public void testToString() { [EOL]     assertEquals("EthiopicChronology[Europe/London]", EthiopicChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("EthiopicChronology[Asia/Tokyo]", EthiopicChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/London]", EthiopicChronology.getInstance().toString()); [EOL]     assertEquals("EthiopicChronology[UTC]", EthiopicChronology.getInstanceUTC().toString()); [EOL] } <line_num>: 140,145
public void testDurationFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("eras", ethiopic.eras().getName()); [EOL]     assertEquals("centuries", ethiopic.centuries().getName()); [EOL]     assertEquals("years", ethiopic.years().getName()); [EOL]     assertEquals("weekyears", ethiopic.weekyears().getName()); [EOL]     assertEquals("months", ethiopic.months().getName()); [EOL]     assertEquals("weeks", ethiopic.weeks().getName()); [EOL]     assertEquals("days", ethiopic.days().getName()); [EOL]     assertEquals("halfdays", ethiopic.halfdays().getName()); [EOL]     assertEquals("hours", ethiopic.hours().getName()); [EOL]     assertEquals("minutes", ethiopic.minutes().getName()); [EOL]     assertEquals("seconds", ethiopic.seconds().getName()); [EOL]     assertEquals("millis", ethiopic.millis().getName()); [EOL]     assertEquals(false, ethiopic.eras().isSupported()); [EOL]     assertEquals(true, ethiopic.centuries().isSupported()); [EOL]     assertEquals(true, ethiopic.years().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyears().isSupported()); [EOL]     assertEquals(true, ethiopic.months().isSupported()); [EOL]     assertEquals(true, ethiopic.weeks().isSupported()); [EOL]     assertEquals(true, ethiopic.days().isSupported()); [EOL]     assertEquals(true, ethiopic.halfdays().isSupported()); [EOL]     assertEquals(true, ethiopic.hours().isSupported()); [EOL]     assertEquals(true, ethiopic.minutes().isSupported()); [EOL]     assertEquals(true, ethiopic.seconds().isSupported()); [EOL]     assertEquals(true, ethiopic.millis().isSupported()); [EOL]     assertEquals(false, ethiopic.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopic.years().isPrecise()); [EOL]     assertEquals(false, ethiopic.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopic.months().isPrecise()); [EOL]     assertEquals(false, ethiopic.weeks().isPrecise()); [EOL]     assertEquals(false, ethiopic.days().isPrecise()); [EOL]     assertEquals(false, ethiopic.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopic.hours().isPrecise()); [EOL]     assertEquals(true, ethiopic.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopic.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopic.millis().isPrecise()); [EOL]     final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC(); [EOL]     assertEquals(false, ethiopicUTC.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.years().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicUTC.months().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.days().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt); [EOL]     assertEquals(false, ethiopicGMT.centuries().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.years().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, ethiopicGMT.months().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.weeks().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.days().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.hours().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.minutes().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.seconds().isPrecise()); [EOL]     assertEquals(true, ethiopicGMT.millis().isPrecise()); [EOL] } <line_num>: 148,214
public void testDateFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("era", ethiopic.era().getName()); [EOL]     assertEquals("centuryOfEra", ethiopic.centuryOfEra().getName()); [EOL]     assertEquals("yearOfCentury", ethiopic.yearOfCentury().getName()); [EOL]     assertEquals("yearOfEra", ethiopic.yearOfEra().getName()); [EOL]     assertEquals("year", ethiopic.year().getName()); [EOL]     assertEquals("monthOfYear", ethiopic.monthOfYear().getName()); [EOL]     assertEquals("weekyearOfCentury", ethiopic.weekyearOfCentury().getName()); [EOL]     assertEquals("weekyear", ethiopic.weekyear().getName()); [EOL]     assertEquals("weekOfWeekyear", ethiopic.weekOfWeekyear().getName()); [EOL]     assertEquals("dayOfYear", ethiopic.dayOfYear().getName()); [EOL]     assertEquals("dayOfMonth", ethiopic.dayOfMonth().getName()); [EOL]     assertEquals("dayOfWeek", ethiopic.dayOfWeek().getName()); [EOL]     assertEquals(true, ethiopic.era().isSupported()); [EOL]     assertEquals(true, ethiopic.centuryOfEra().isSupported()); [EOL]     assertEquals(true, ethiopic.yearOfCentury().isSupported()); [EOL]     assertEquals(true, ethiopic.yearOfEra().isSupported()); [EOL]     assertEquals(true, ethiopic.year().isSupported()); [EOL]     assertEquals(true, ethiopic.monthOfYear().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyearOfCentury().isSupported()); [EOL]     assertEquals(true, ethiopic.weekyear().isSupported()); [EOL]     assertEquals(true, ethiopic.weekOfWeekyear().isSupported()); [EOL]     assertEquals(true, ethiopic.dayOfYear().isSupported()); [EOL]     assertEquals(true, ethiopic.dayOfMonth().isSupported()); [EOL]     assertEquals(true, ethiopic.dayOfWeek().isSupported()); [EOL]     assertEquals(ethiopic.eras(), ethiopic.era().getDurationField()); [EOL]     assertEquals(ethiopic.centuries(), ethiopic.centuryOfEra().getDurationField()); [EOL]     assertEquals(ethiopic.years(), ethiopic.yearOfCentury().getDurationField()); [EOL]     assertEquals(ethiopic.years(), ethiopic.yearOfEra().getDurationField()); [EOL]     assertEquals(ethiopic.years(), ethiopic.year().getDurationField()); [EOL]     assertEquals(ethiopic.months(), ethiopic.monthOfYear().getDurationField()); [EOL]     assertEquals(ethiopic.weekyears(), ethiopic.weekyearOfCentury().getDurationField()); [EOL]     assertEquals(ethiopic.weekyears(), ethiopic.weekyear().getDurationField()); [EOL]     assertEquals(ethiopic.weeks(), ethiopic.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(ethiopic.days(), ethiopic.dayOfYear().getDurationField()); [EOL]     assertEquals(ethiopic.days(), ethiopic.dayOfMonth().getDurationField()); [EOL]     assertEquals(ethiopic.days(), ethiopic.dayOfWeek().getDurationField()); [EOL]     assertEquals(null, ethiopic.era().getRangeDurationField()); [EOL]     assertEquals(ethiopic.eras(), ethiopic.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(ethiopic.centuries(), ethiopic.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(ethiopic.eras(), ethiopic.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(null, ethiopic.year().getRangeDurationField()); [EOL]     assertEquals(ethiopic.years(), ethiopic.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(ethiopic.centuries(), ethiopic.weekyearOfCentury().getRangeDurationField()); [EOL]     assertEquals(null, ethiopic.weekyear().getRangeDurationField()); [EOL]     assertEquals(ethiopic.weekyears(), ethiopic.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(ethiopic.years(), ethiopic.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(ethiopic.months(), ethiopic.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(ethiopic.weeks(), ethiopic.dayOfWeek().getRangeDurationField()); [EOL] } <line_num>: 216,269
public void testTimeFields() { [EOL]     final EthiopicChronology ethiopic = EthiopicChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", ethiopic.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", ethiopic.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", ethiopic.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", ethiopic.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", ethiopic.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", ethiopic.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", ethiopic.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", ethiopic.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", ethiopic.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", ethiopic.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", ethiopic.millisOfSecond().getName()); [EOL]     assertEquals(true, ethiopic.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, ethiopic.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, ethiopic.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, ethiopic.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, ethiopic.hourOfDay().isSupported()); [EOL]     assertEquals(true, ethiopic.minuteOfDay().isSupported()); [EOL]     assertEquals(true, ethiopic.minuteOfHour().isSupported()); [EOL]     assertEquals(true, ethiopic.secondOfDay().isSupported()); [EOL]     assertEquals(true, ethiopic.secondOfMinute().isSupported()); [EOL]     assertEquals(true, ethiopic.millisOfDay().isSupported()); [EOL]     assertEquals(true, ethiopic.millisOfSecond().isSupported()); [EOL] } <line_num>: 271,296
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     assertEquals(new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC)); [EOL] } <line_num>: 299,302
public void testEra() { [EOL]     assertEquals(1, EthiopicChronology.EE); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 304,310
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestEthiopicChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek(); [EOL]     DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear(); [EOL]     DateTimeField year = ETHIOPIC_UTC.year(); [EOL]     DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra(); [EOL]     DateTimeField era = ETHIOPIC_UTC.era(); [EOL]     int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek(); [EOL]     int expectedDOY = 1; [EOL]     int expectedDay = 1; [EOL]     int expectedMonth = 1; [EOL]     int expectedYear = 1; [EOL]     while (millis < end) { [EOL]         int dowValue = dayOfWeek.get(millis); [EOL]         int doyValue = dayOfYear.get(millis); [EOL]         int dayValue = dayOfMonth.get(millis); [EOL]         int monthValue = monthOfYear.get(millis); [EOL]         int yearValue = year.get(millis); [EOL]         int yearOfEraValue = yearOfEra.get(millis); [EOL]         int monthLen = dayOfMonth.getMaximumValue(millis); [EOL]         if (monthValue < 1 || monthValue > 13) { [EOL]             fail("Bad month: " + millis); [EOL]         } [EOL]         assertEquals(1, era.get(millis)); [EOL]         assertEquals("EE", era.getAsText(millis)); [EOL]         assertEquals("EE", era.getAsShortText(millis)); [EOL]         assertEquals(expectedYear, yearValue); [EOL]         assertEquals(expectedYear, yearOfEraValue); [EOL]         assertEquals(expectedMonth, monthValue); [EOL]         assertEquals(expectedDay, dayValue); [EOL]         assertEquals(expectedDOW, dowValue); [EOL]         assertEquals(expectedDOY, doyValue); [EOL]         assertEquals(yearValue % 4 == 3, year.isLeap(millis)); [EOL]         if (monthValue == 13) { [EOL]             assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis)); [EOL]             if (yearValue % 4 == 3) { [EOL]                 assertEquals(6, monthLen); [EOL]             } else { [EOL]                 assertEquals(5, monthLen); [EOL]             } [EOL]         } else { [EOL]             assertEquals(30, monthLen); [EOL]         } [EOL]         expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1; [EOL]         expectedDay++; [EOL]         expectedDOY++; [EOL]         if (expectedDay == 31 && expectedMonth < 13) { [EOL]             expectedDay = 1; [EOL]             expectedMonth++; [EOL]         } else if (expectedMonth == 13) { [EOL]             if (expectedYear % 4 == 3 && expectedDay == 7) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } else if (expectedYear % 4 != 3 && expectedDay == 6) { [EOL]                 expectedDay = 1; [EOL]                 expectedMonth = 1; [EOL]                 expectedYear++; [EOL]                 expectedDOY = 1; [EOL]             } [EOL]         } [EOL]         millis += SKIP; [EOL]     } [EOL] } <line_num>: 316,398
public void testSampleDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(ETHIOPIC_UTC); [EOL]     assertEquals(EthiopicChronology.EE, dt.getEra()); [EOL]     assertEquals(20, dt.getCenturyOfEra()); [EOL]     assertEquals(96, dt.getYearOfCentury()); [EOL]     assertEquals(1996, dt.getYearOfEra()); [EOL]     assertEquals(1996, dt.getYear()); [EOL]     Property fld = dt.year(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     fld = dt.monthOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(13, fld.getMaximumValue()); [EOL]     assertEquals(13, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1997, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(4)); [EOL]     assertEquals(new DateTime(1996, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addWrapFieldToCopy(4)); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     fld = dt.dayOfMonth(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(30, fld.getMaximumValue()); [EOL]     assertEquals(30, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek()); [EOL]     fld = dt.dayOfWeek(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(7, fld.getMaximumValue()); [EOL]     assertEquals(7, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(9 * 30 + 2, dt.getDayOfYear()); [EOL]     fld = dt.dayOfYear(); [EOL]     assertEquals(false, fld.isLeap()); [EOL]     assertEquals(0, fld.getLeapAmount()); [EOL]     assertEquals(null, fld.getLeapDurationField()); [EOL]     assertEquals(1, fld.getMinimumValue()); [EOL]     assertEquals(1, fld.getMinimumValueOverall()); [EOL]     assertEquals(365, fld.getMaximumValue()); [EOL]     assertEquals(366, fld.getMaximumValueOverall()); [EOL]     assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1)); [EOL]     assertEquals(0, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] } <line_num>: 400,463
public void testSampleDateWithZone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(ETHIOPIC_UTC); [EOL]     assertEquals(EthiopicChronology.EE, dt.getEra()); [EOL]     assertEquals(1996, dt.getYear()); [EOL]     assertEquals(1996, dt.getYearOfEra()); [EOL]     assertEquals(10, dt.getMonthOfYear()); [EOL]     assertEquals(2, dt.getDayOfMonth()); [EOL]     assertEquals(10, dt.getHourOfDay()); [EOL]     assertEquals(0, dt.getMinuteOfHour()); [EOL]     assertEquals(0, dt.getSecondOfMinute()); [EOL]     assertEquals(0, dt.getMillisOfSecond()); [EOL] } <line_num>: 465,476
public void testDurationYear() { [EOL]     DateTime dt96 = new DateTime(1996, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt97 = new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt98 = new DateTime(1998, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt99 = new DateTime(1999, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt00 = new DateTime(2000, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DurationField fld = dt96.year().getDurationField(); [EOL]     assertEquals(ETHIOPIC_UTC.years(), fld); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt96.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt96.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt96.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt96.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2)); [EOL]     assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt96.getMillis())); [EOL]     assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt96.getMillis())); [EOL]     assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt96.getMillis())); [EOL]     assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt96.getMillis())); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L)); [EOL]     assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis()); [EOL]     assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt96.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt96.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis())); [EOL]     assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt96.getMillis())); [EOL]     assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis())); [EOL]     assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt96.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt96.getMillis())); [EOL]     assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt96.getMillis())); [EOL]     assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1)); [EOL]     assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2)); [EOL]     assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3)); [EOL]     assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4)); [EOL]     assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1L)); [EOL]     assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2L)); [EOL]     assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3L)); [EOL]     assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4L)); [EOL] } <line_num>: 478,528
public void testDurationMonth() { [EOL]     DateTime dt11 = new DateTime(1999, 11, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt12 = new DateTime(1999, 12, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt13 = new DateTime(1999, 13, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DateTime dt01 = new DateTime(2000, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC); [EOL]     DurationField fld = dt11.monthOfYear().getDurationField(); [EOL]     assertEquals(ETHIOPIC_UTC.months(), fld); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13)); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis())); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis())); [EOL]     assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis())); [EOL]     assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis())); [EOL]     assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L)); [EOL]     assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L)); [EOL]     assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L)); [EOL]     assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis())); [EOL]     assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis())); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3)); [EOL]     assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L)); [EOL]     assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L)); [EOL]     assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L)); [EOL] } <line_num>: 530,577
