public TestBuddhistChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 70,72
public static void main(String[] args) { [EOL]     SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY; [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 61,64
public static TestSuite suite() { [EOL]     return new TestSuite(TestBuddhistChronology.class); [EOL] } <line_num>: 66,68
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 74,82
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 84,92
public void testFactoryUTC() { [EOL]     assertEquals(DateTimeZone.UTC, BuddhistChronology.getInstanceUTC().getZone()); [EOL]     assertSame(BuddhistChronology.class, BuddhistChronology.getInstanceUTC().getClass()); [EOL] } <line_num>: 95,98
public void testFactory() { [EOL]     assertEquals(LONDON, BuddhistChronology.getInstance().getZone()); [EOL]     assertSame(BuddhistChronology.class, BuddhistChronology.getInstance().getClass()); [EOL] } <line_num>: 100,103
public void testFactory_Zone() { [EOL]     assertEquals(TOKYO, BuddhistChronology.getInstance(TOKYO).getZone()); [EOL]     assertEquals(PARIS, BuddhistChronology.getInstance(PARIS).getZone()); [EOL]     assertEquals(LONDON, BuddhistChronology.getInstance(null).getZone()); [EOL]     assertSame(BuddhistChronology.class, BuddhistChronology.getInstance(TOKYO).getClass()); [EOL] } <line_num>: 105,110
public void testEquality() { [EOL]     assertSame(BuddhistChronology.getInstance(TOKYO), BuddhistChronology.getInstance(TOKYO)); [EOL]     assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(LONDON)); [EOL]     assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance(PARIS)); [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstanceUTC()); [EOL]     assertSame(BuddhistChronology.getInstance(), BuddhistChronology.getInstance(LONDON)); [EOL] } <line_num>: 113,119
public void testWithUTC() { [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance(LONDON).withUTC()); [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance(TOKYO).withUTC()); [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstanceUTC().withUTC()); [EOL]     assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance().withUTC()); [EOL] } <line_num>: 121,126
public void testWithZone() { [EOL]     assertSame(BuddhistChronology.getInstance(TOKYO), BuddhistChronology.getInstance(TOKYO).withZone(TOKYO)); [EOL]     assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(TOKYO).withZone(LONDON)); [EOL]     assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance(TOKYO).withZone(PARIS)); [EOL]     assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(TOKYO).withZone(null)); [EOL]     assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance().withZone(PARIS)); [EOL]     assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstanceUTC().withZone(PARIS)); [EOL] } <line_num>: 128,135
public void testToString() { [EOL]     assertEquals("BuddhistChronology[Europe/London]", BuddhistChronology.getInstance(LONDON).toString()); [EOL]     assertEquals("BuddhistChronology[Asia/Tokyo]", BuddhistChronology.getInstance(TOKYO).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/London]", BuddhistChronology.getInstance().toString()); [EOL]     assertEquals("BuddhistChronology[UTC]", BuddhistChronology.getInstanceUTC().toString()); [EOL] } <line_num>: 137,142
public void testDurationFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("eras", buddhist.eras().getName()); [EOL]     assertEquals("centuries", buddhist.centuries().getName()); [EOL]     assertEquals("years", buddhist.years().getName()); [EOL]     assertEquals("weekyears", buddhist.weekyears().getName()); [EOL]     assertEquals("months", buddhist.months().getName()); [EOL]     assertEquals("weeks", buddhist.weeks().getName()); [EOL]     assertEquals("days", buddhist.days().getName()); [EOL]     assertEquals("halfdays", GregorianChronology.getInstance().halfdays().getName()); [EOL]     assertEquals("hours", buddhist.hours().getName()); [EOL]     assertEquals("minutes", buddhist.minutes().getName()); [EOL]     assertEquals("seconds", buddhist.seconds().getName()); [EOL]     assertEquals("millis", buddhist.millis().getName()); [EOL]     assertEquals(false, buddhist.eras().isSupported()); [EOL]     assertEquals(true, buddhist.centuries().isSupported()); [EOL]     assertEquals(true, buddhist.years().isSupported()); [EOL]     assertEquals(true, buddhist.weekyears().isSupported()); [EOL]     assertEquals(true, buddhist.months().isSupported()); [EOL]     assertEquals(true, buddhist.weeks().isSupported()); [EOL]     assertEquals(true, buddhist.days().isSupported()); [EOL]     assertEquals(true, buddhist.halfdays().isSupported()); [EOL]     assertEquals(true, buddhist.hours().isSupported()); [EOL]     assertEquals(true, buddhist.minutes().isSupported()); [EOL]     assertEquals(true, buddhist.seconds().isSupported()); [EOL]     assertEquals(true, buddhist.millis().isSupported()); [EOL]     assertEquals(false, buddhist.centuries().isPrecise()); [EOL]     assertEquals(false, buddhist.years().isPrecise()); [EOL]     assertEquals(false, buddhist.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhist.months().isPrecise()); [EOL]     assertEquals(false, buddhist.weeks().isPrecise()); [EOL]     assertEquals(false, buddhist.days().isPrecise()); [EOL]     assertEquals(false, buddhist.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhist.hours().isPrecise()); [EOL]     assertEquals(true, buddhist.minutes().isPrecise()); [EOL]     assertEquals(true, buddhist.seconds().isPrecise()); [EOL]     assertEquals(true, buddhist.millis().isPrecise()); [EOL]     final BuddhistChronology buddhistUTC = BuddhistChronology.getInstanceUTC(); [EOL]     assertEquals(false, buddhistUTC.centuries().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.years().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhistUTC.months().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.weeks().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.days().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.hours().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.minutes().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.seconds().isPrecise()); [EOL]     assertEquals(true, buddhistUTC.millis().isPrecise()); [EOL]     final DateTimeZone gmt = DateTimeZone.forID("Etc/GMT"); [EOL]     final BuddhistChronology buddhistGMT = BuddhistChronology.getInstance(gmt); [EOL]     assertEquals(false, buddhistGMT.centuries().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.years().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.weekyears().isPrecise()); [EOL]     assertEquals(false, buddhistGMT.months().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.weeks().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.days().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.halfdays().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.hours().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.minutes().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.seconds().isPrecise()); [EOL]     assertEquals(true, buddhistGMT.millis().isPrecise()); [EOL] } <line_num>: 145,211
public void testDateFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("era", buddhist.era().getName()); [EOL]     assertEquals("centuryOfEra", buddhist.centuryOfEra().getName()); [EOL]     assertEquals("yearOfCentury", buddhist.yearOfCentury().getName()); [EOL]     assertEquals("yearOfEra", buddhist.yearOfEra().getName()); [EOL]     assertEquals("year", buddhist.year().getName()); [EOL]     assertEquals("monthOfYear", buddhist.monthOfYear().getName()); [EOL]     assertEquals("weekyearOfCentury", buddhist.weekyearOfCentury().getName()); [EOL]     assertEquals("weekyear", buddhist.weekyear().getName()); [EOL]     assertEquals("weekOfWeekyear", buddhist.weekOfWeekyear().getName()); [EOL]     assertEquals("dayOfYear", buddhist.dayOfYear().getName()); [EOL]     assertEquals("dayOfMonth", buddhist.dayOfMonth().getName()); [EOL]     assertEquals("dayOfWeek", buddhist.dayOfWeek().getName()); [EOL]     assertEquals(true, buddhist.era().isSupported()); [EOL]     assertEquals(true, buddhist.centuryOfEra().isSupported()); [EOL]     assertEquals(true, buddhist.yearOfCentury().isSupported()); [EOL]     assertEquals(true, buddhist.yearOfEra().isSupported()); [EOL]     assertEquals(true, buddhist.year().isSupported()); [EOL]     assertEquals(true, buddhist.monthOfYear().isSupported()); [EOL]     assertEquals(true, buddhist.weekyearOfCentury().isSupported()); [EOL]     assertEquals(true, buddhist.weekyear().isSupported()); [EOL]     assertEquals(true, buddhist.weekOfWeekyear().isSupported()); [EOL]     assertEquals(true, buddhist.dayOfYear().isSupported()); [EOL]     assertEquals(true, buddhist.dayOfMonth().isSupported()); [EOL]     assertEquals(true, buddhist.dayOfWeek().isSupported()); [EOL]     assertEquals(buddhist.eras(), buddhist.era().getDurationField()); [EOL]     assertEquals(buddhist.centuries(), buddhist.centuryOfEra().getDurationField()); [EOL]     assertEquals(buddhist.years(), buddhist.yearOfCentury().getDurationField()); [EOL]     assertEquals(buddhist.years(), buddhist.yearOfEra().getDurationField()); [EOL]     assertEquals(buddhist.years(), buddhist.year().getDurationField()); [EOL]     assertEquals(buddhist.months(), buddhist.monthOfYear().getDurationField()); [EOL]     assertEquals(buddhist.weekyears(), buddhist.weekyearOfCentury().getDurationField()); [EOL]     assertEquals(buddhist.weekyears(), buddhist.weekyear().getDurationField()); [EOL]     assertEquals(buddhist.weeks(), buddhist.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(buddhist.days(), buddhist.dayOfYear().getDurationField()); [EOL]     assertEquals(buddhist.days(), buddhist.dayOfMonth().getDurationField()); [EOL]     assertEquals(buddhist.days(), buddhist.dayOfWeek().getDurationField()); [EOL]     assertEquals(null, buddhist.era().getRangeDurationField()); [EOL]     assertEquals(buddhist.eras(), buddhist.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(buddhist.centuries(), buddhist.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(buddhist.eras(), buddhist.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(null, buddhist.year().getRangeDurationField()); [EOL]     assertEquals(buddhist.years(), buddhist.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(buddhist.centuries(), buddhist.weekyearOfCentury().getRangeDurationField()); [EOL]     assertEquals(null, buddhist.weekyear().getRangeDurationField()); [EOL]     assertEquals(buddhist.weekyears(), buddhist.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(buddhist.years(), buddhist.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(buddhist.months(), buddhist.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(buddhist.weeks(), buddhist.dayOfWeek().getRangeDurationField()); [EOL] } <line_num>: 213,266
public void testTimeFields() { [EOL]     final BuddhistChronology buddhist = BuddhistChronology.getInstance(); [EOL]     assertEquals("halfdayOfDay", buddhist.halfdayOfDay().getName()); [EOL]     assertEquals("clockhourOfHalfday", buddhist.clockhourOfHalfday().getName()); [EOL]     assertEquals("hourOfHalfday", buddhist.hourOfHalfday().getName()); [EOL]     assertEquals("clockhourOfDay", buddhist.clockhourOfDay().getName()); [EOL]     assertEquals("hourOfDay", buddhist.hourOfDay().getName()); [EOL]     assertEquals("minuteOfDay", buddhist.minuteOfDay().getName()); [EOL]     assertEquals("minuteOfHour", buddhist.minuteOfHour().getName()); [EOL]     assertEquals("secondOfDay", buddhist.secondOfDay().getName()); [EOL]     assertEquals("secondOfMinute", buddhist.secondOfMinute().getName()); [EOL]     assertEquals("millisOfDay", buddhist.millisOfDay().getName()); [EOL]     assertEquals("millisOfSecond", buddhist.millisOfSecond().getName()); [EOL]     assertEquals(true, buddhist.halfdayOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.clockhourOfHalfday().isSupported()); [EOL]     assertEquals(true, buddhist.hourOfHalfday().isSupported()); [EOL]     assertEquals(true, buddhist.clockhourOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.hourOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.minuteOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.minuteOfHour().isSupported()); [EOL]     assertEquals(true, buddhist.secondOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.secondOfMinute().isSupported()); [EOL]     assertEquals(true, buddhist.millisOfDay().isSupported()); [EOL]     assertEquals(true, buddhist.millisOfSecond().isSupported()); [EOL] } <line_num>: 268,293
public void testEpoch() { [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]     assertEquals(new DateTime(-543, 1, 1, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC)); [EOL] } <line_num>: 296,299
public void testEra() { [EOL]     assertEquals(1, BuddhistChronology.BE); [EOL]     try { [EOL]         new DateTime(-1, 13, 5, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 301,307
public void testKeyYears() { [EOL]     DateTime bd = new DateTime(2513, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]     DateTime jd = new DateTime(1970, 1, 1, 0, 0, 0, 0, GJ_UTC); [EOL]     assertEquals(jd, bd.withChronology(GJ_UTC)); [EOL]     assertEquals(2513, bd.getYear()); [EOL]     assertEquals(2513, bd.getYearOfEra()); [EOL]     assertEquals(2513, bd.plus(Period.weeks(1)).getWeekyear()); [EOL]     bd = new DateTime(2126, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]     jd = new DateTime(1583, 1, 1, 0, 0, 0, 0, GJ_UTC); [EOL]     assertEquals(jd, bd.withChronology(GJ_UTC)); [EOL]     assertEquals(2126, bd.getYear()); [EOL]     assertEquals(2126, bd.getYearOfEra()); [EOL]     assertEquals(2126, bd.plus(Period.weeks(1)).getWeekyear()); [EOL]     bd = new DateTime(2125, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]     jd = new DateTime(1582, 1, 1, 0, 0, 0, 0, GJ_UTC); [EOL]     assertEquals(jd, bd.withChronology(GJ_UTC)); [EOL]     assertEquals(2125, bd.getYear()); [EOL]     assertEquals(2125, bd.getYearOfEra()); [EOL]     assertEquals(2125, bd.plus(Period.weeks(1)).getWeekyear()); [EOL]     bd = new DateTime(544, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]     jd = new DateTime(1, 1, 1, 0, 0, 0, 0, GJ_UTC); [EOL]     assertEquals(jd, bd.withChronology(GJ_UTC)); [EOL]     assertEquals(544, bd.getYear()); [EOL]     assertEquals(544, bd.getYearOfEra()); [EOL]     assertEquals(544, bd.plus(Period.weeks(1)).getWeekyear()); [EOL]     bd = new DateTime(543, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]     jd = new DateTime(-1, 1, 1, 0, 0, 0, 0, GJ_UTC); [EOL]     assertEquals(jd, bd.withChronology(GJ_UTC)); [EOL]     assertEquals(543, bd.getYear()); [EOL]     assertEquals(543, bd.getYearOfEra()); [EOL]     assertEquals(543, bd.plus(Period.weeks(1)).getWeekyear()); [EOL]     bd = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]     jd = new DateTime(-543, 1, 1, 0, 0, 0, 0, GJ_UTC); [EOL]     assertEquals(jd, bd.withChronology(GJ_UTC)); [EOL]     assertEquals(1, bd.getYear()); [EOL]     assertEquals(1, bd.getYearOfEra()); [EOL]     assertEquals(1, bd.plus(Period.weeks(1)).getWeekyear()); [EOL] } <line_num>: 309,351
public void testCalendar() { [EOL]     if (TestAll.FAST) { [EOL]         return; [EOL]     } [EOL]     System.out.println("\nTestBuddhistChronology.testCalendar"); [EOL]     DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC); [EOL]     long millis = epoch.getMillis(); [EOL]     long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis(); [EOL]     DateTimeField dayOfWeek = BUDDHIST_UTC.dayOfWeek(); [EOL]     DateTimeField weekOfWeekyear = GJ_UTC.weekOfWeekyear(); [EOL]     DateTimeField dayOfYear = BUDDHIST_UTC.dayOfYear(); [EOL]     DateTimeField dayOfMonth = BUDDHIST_UTC.dayOfMonth(); [EOL]     DateTimeField monthOfYear = BUDDHIST_UTC.monthOfYear(); [EOL]     DateTimeField year = BUDDHIST_UTC.year(); [EOL]     DateTimeField yearOfEra = BUDDHIST_UTC.yearOfEra(); [EOL]     DateTimeField era = BUDDHIST_UTC.era(); [EOL]     DateTimeField gjDayOfWeek = GJ_UTC.dayOfWeek(); [EOL]     DateTimeField gjWeekOfWeekyear = GJ_UTC.weekOfWeekyear(); [EOL]     DateTimeField gjDayOfYear = GJ_UTC.dayOfYear(); [EOL]     DateTimeField gjDayOfMonth = GJ_UTC.dayOfMonth(); [EOL]     DateTimeField gjMonthOfYear = GJ_UTC.monthOfYear(); [EOL]     DateTimeField gjYear = GJ_UTC.year(); [EOL]     while (millis < end) { [EOL]         assertEquals(gjDayOfWeek.get(millis), dayOfWeek.get(millis)); [EOL]         assertEquals(gjDayOfYear.get(millis), dayOfYear.get(millis)); [EOL]         assertEquals(gjDayOfMonth.get(millis), dayOfMonth.get(millis)); [EOL]         assertEquals(gjMonthOfYear.get(millis), monthOfYear.get(millis)); [EOL]         assertEquals(gjWeekOfWeekyear.get(millis), weekOfWeekyear.get(millis)); [EOL]         assertEquals(1, era.get(millis)); [EOL]         int yearValue = gjYear.get(millis); [EOL]         if (yearValue <= 0) { [EOL]             yearValue++; [EOL]         } [EOL]         yearValue += 543; [EOL]         assertEquals(yearValue, year.get(millis)); [EOL]         assertEquals(yearValue, yearOfEra.get(millis)); [EOL]         millis += SKIP; [EOL]     } [EOL] } <line_num>: 353,391
