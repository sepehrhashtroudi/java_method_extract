public TestYearMonth_Properties(String name) { [EOL]     super(name); [EOL] } <line_num>: 62,64
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 54,56
public static TestSuite suite() { [EOL]     return new TestSuite(TestYearMonth_Properties.class); [EOL] } <line_num>: 58,60
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     systemDefaultLocale = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL] } <line_num>: 66,72
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL]     Locale.setDefault(systemDefaultLocale); [EOL]     systemDefaultLocale = null; [EOL] } <line_num>: 74,80
public void testPropertyGetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonth()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] } <line_num>: 83,100
public void testPropertyGetMaxMinValuesYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertEquals(-292275054, test.year().getMinimumValue()); [EOL]     assertEquals(-292275054, test.year().getMinimumValueOverall()); [EOL]     assertEquals(292278993, test.year().getMaximumValue()); [EOL]     assertEquals(292278993, test.year().getMaximumValueOverall()); [EOL] } <line_num>: 102,108
public void testPropertyAddYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1981, 6); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6); [EOL]     copy = test.year().addToCopy(292277023 - 1972); [EOL]     check(copy, 292277023, 6); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6); [EOL] } <line_num>: 110,139
public void testPropertyAddWrapFieldYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().addWrapFieldToCopy(9); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1981, 6); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     check(copy, 1972, 6); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1); [EOL]     check(copy, -292275054, 6); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1); [EOL]     check(copy, 292278993, 6); [EOL] } <line_num>: 141,155
public void testPropertySetYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] } <line_num>: 157,162
public void testPropertySetTextYear() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 12, 6); [EOL] } <line_num>: 164,169
public void testPropertyCompareToYear() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 171,191
public void testPropertyGetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonth()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonth(1972, 7); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] } <line_num>: 194,214
public void testPropertyGetMaxMinValuesMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] } <line_num>: 216,222
public void testPropertyAddMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12); [EOL] } <line_num>: 224,238
public void testPropertyAddWrapFieldMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 10); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10); [EOL] } <line_num>: 240,251
public void testPropertySetMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 253,267
public void testPropertySetTextMonth() { [EOL]     YearMonth test = new YearMonth(1972, 6); [EOL]     YearMonth copy = test.monthOfYear().setCopy("12"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     copy = test.monthOfYear().setCopy("December"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL]     copy = test.monthOfYear().setCopy("Dec"); [EOL]     check(test, 1972, 6); [EOL]     check(copy, 1972, 12); [EOL] } <line_num>: 269,282
public void testPropertyCompareToMonth() { [EOL]     YearMonth test1 = new YearMonth(TEST_TIME1); [EOL]     YearMonth test2 = new YearMonth(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 284,304
public void testPropertyEquals() { [EOL]     YearMonth test1 = new YearMonth(11, 11); [EOL]     YearMonth test2 = new YearMonth(11, 12); [EOL]     YearMonth test3 = new YearMonth(11, 11, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(false, test1.year().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.year().equals(test1.year())); [EOL]     assertEquals(false, test1.year().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test1.year().equals(test2.year())); [EOL]     assertEquals(false, test1.monthOfYear().equals(null)); [EOL]     assertEquals(false, test1.monthOfYear().equals("any")); [EOL]     assertEquals(false, test1.monthOfYear().equals(test3.monthOfYear())); [EOL] } <line_num>: 307,326
public void testPropertyHashCode() { [EOL]     YearMonth test1 = new YearMonth(2005, 11); [EOL]     YearMonth test2 = new YearMonth(2005, 12); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(false, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.year().hashCode() == test1.year().hashCode()); [EOL]     assertEquals(true, test1.year().hashCode() == test2.year().hashCode()); [EOL] } <line_num>: 328,335
public void testPropertyEqualsHashCodeLenient() { [EOL]     YearMonth test1 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonth test2 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] } <line_num>: 337,347
public void testPropertyEqualsHashCodeStrict() { [EOL]     YearMonth test1 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonth test2 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] } <line_num>: 349,359
private void check(YearMonth test, int year, int month) { [EOL]     assertEquals(year, test.getYear()); [EOL]     assertEquals(month, test.getMonthOfYear()); [EOL] } <line_num>: 362,365
