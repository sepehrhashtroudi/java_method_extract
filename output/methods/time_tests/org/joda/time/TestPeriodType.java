public TestPeriodType(String name) { [EOL]     super(name); [EOL] } <line_num>: 77,79
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 69,71
public static TestSuite suite() { [EOL]     return new TestSuite(TestPeriodType.class); [EOL] } <line_num>: 73,75
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 81,89
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 91,99
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 102,106
private void assertEqualsAfterSerialization(PeriodType type) throws Exception { [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(type); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     PeriodType result = (PeriodType) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(type, result); [EOL] } <line_num>: 109,122
private void assertSameAfterSerialization(PeriodType type) throws Exception { [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(type); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     PeriodType result = (PeriodType) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(type, result); [EOL] } <line_num>: 124,137
public void testStandard() throws Exception { [EOL]     PeriodType type = PeriodType.standard(); [EOL]     assertEquals(8, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(6)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(7)); [EOL]     assertEquals("Standard", type.getName()); [EOL]     assertEquals("PeriodType[Standard]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.standard()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 140,160
public void testYearMonthDayTime() throws Exception { [EOL]     PeriodType type = PeriodType.yearMonthDayTime(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals("YearMonthDayTime", type.getName()); [EOL]     assertEquals("PeriodType[YearMonthDayTime]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearMonthDayTime()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearMonthDayTime().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 163,182
public void testYearMonthDay() throws Exception { [EOL]     PeriodType type = PeriodType.yearMonthDay(); [EOL]     assertEquals(3, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals("YearMonthDay", type.getName()); [EOL]     assertEquals("PeriodType[YearMonthDay]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearMonthDay()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearMonthDay().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 185,200
public void testYearWeekDayTime() throws Exception { [EOL]     PeriodType type = PeriodType.yearWeekDayTime(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals("YearWeekDayTime", type.getName()); [EOL]     assertEquals("PeriodType[YearWeekDayTime]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearWeekDayTime()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearWeekDayTime().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 203,222
public void testYearWeekDay() throws Exception { [EOL]     PeriodType type = PeriodType.yearWeekDay(); [EOL]     assertEquals(3, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals("YearWeekDay", type.getName()); [EOL]     assertEquals("PeriodType[YearWeekDay]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearWeekDay()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearWeekDay().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 225,240
public void testYearDayTime() throws Exception { [EOL]     PeriodType type = PeriodType.yearDayTime(); [EOL]     assertEquals(6, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(5)); [EOL]     assertEquals("YearDayTime", type.getName()); [EOL]     assertEquals("PeriodType[YearDayTime]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearDayTime()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearDayTime().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 243,261
public void testYearDay() throws Exception { [EOL]     PeriodType type = PeriodType.yearDay(); [EOL]     assertEquals(2, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(1)); [EOL]     assertEquals("YearDay", type.getName()); [EOL]     assertEquals("PeriodType[YearDay]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.yearDay()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.yearDay().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 264,278
public void testDayTime() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime(); [EOL]     assertEquals(5, type.size()); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(4)); [EOL]     assertEquals("DayTime", type.getName()); [EOL]     assertEquals("PeriodType[DayTime]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.dayTime()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.dayTime().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 281,298
public void testTime() throws Exception { [EOL]     PeriodType type = PeriodType.time(); [EOL]     assertEquals(4, type.size()); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(3)); [EOL]     assertEquals("Time", type.getName()); [EOL]     assertEquals("PeriodType[Time]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.time()); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.time().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 301,317
public void testYears() throws Exception { [EOL]     PeriodType type = PeriodType.years(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals("Years", type.getName()); [EOL]     assertEquals("PeriodType[Years]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.years()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.years().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 320,333
public void testMonths() throws Exception { [EOL]     PeriodType type = PeriodType.months(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(0)); [EOL]     assertEquals("Months", type.getName()); [EOL]     assertEquals("PeriodType[Months]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.months()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.months().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 336,349
public void testWeeks() throws Exception { [EOL]     PeriodType type = PeriodType.weeks(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(0)); [EOL]     assertEquals("Weeks", type.getName()); [EOL]     assertEquals("PeriodType[Weeks]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.weeks()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.weeks().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 352,365
public void testDays() throws Exception { [EOL]     PeriodType type = PeriodType.days(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(0)); [EOL]     assertEquals("Days", type.getName()); [EOL]     assertEquals("PeriodType[Days]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.days()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.days().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 368,381
public void testHours() throws Exception { [EOL]     PeriodType type = PeriodType.hours(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(0)); [EOL]     assertEquals("Hours", type.getName()); [EOL]     assertEquals("PeriodType[Hours]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.hours()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.hours().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 384,397
public void testMinutes() throws Exception { [EOL]     PeriodType type = PeriodType.minutes(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(0)); [EOL]     assertEquals("Minutes", type.getName()); [EOL]     assertEquals("PeriodType[Minutes]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.minutes()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.minutes().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 400,413
public void testSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.seconds(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(0)); [EOL]     assertEquals("Seconds", type.getName()); [EOL]     assertEquals("PeriodType[Seconds]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.seconds()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.seconds().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 416,429
public void testMillis() throws Exception { [EOL]     PeriodType type = PeriodType.millis(); [EOL]     assertEquals(1, type.size()); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(0)); [EOL]     assertEquals("Millis", type.getName()); [EOL]     assertEquals("PeriodType[Millis]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.millis()); [EOL]     assertEquals(false, type.equals(PeriodType.standard())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.standard().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 432,445
public void testForFields1() throws Exception { [EOL]     PeriodType type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.years() }); [EOL]     assertSame(PeriodType.years(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.months() }); [EOL]     assertSame(PeriodType.months(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.weeks() }); [EOL]     assertSame(PeriodType.weeks(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.days() }); [EOL]     assertSame(PeriodType.days(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.hours() }); [EOL]     assertSame(PeriodType.hours(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.minutes() }); [EOL]     assertSame(PeriodType.minutes(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.seconds() }); [EOL]     assertSame(PeriodType.seconds(), type); [EOL]     type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.millis() }); [EOL]     assertSame(PeriodType.millis(), type); [EOL] } <line_num>: 448,481
public void testForFields2() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.hours() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     assertEquals(2, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(1)); [EOL]     assertEquals("StandardNoMonthsNoWeeksNoDaysNoMinutesNoSecondsNoMillis", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoMonthsNoWeeksNoDaysNoMinutesNoSecondsNoMillis]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.forFields(types)); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 483,501
public void testForFields3() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.weeks() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     assertEquals(2, type.size()); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals("StandardNoYearsNoDaysNoHoursNoMinutesNoSecondsNoMillis", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoYearsNoDaysNoHoursNoMinutesNoSecondsNoMillis]", type.toString()); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type == PeriodType.forFields(types)); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertSameAfterSerialization(type); [EOL] } <line_num>: 503,521
public void testForFields4() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.weeks(), DurationFieldType.days(), DurationFieldType.months() }; [EOL]     DurationFieldType[] types2 = new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.days(), DurationFieldType.weeks() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     PeriodType type2 = PeriodType.forFields(types2); [EOL]     assertEquals(true, type == type2); [EOL] } <line_num>: 523,537
public void testForFields5() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.centuries(), DurationFieldType.months() }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 539,556
public void testForFields6() throws Exception { [EOL]     DurationFieldType[] types = null; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[0]; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { null, DurationFieldType.months() }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new DurationFieldType[] { DurationFieldType.months(), null }; [EOL]     try { [EOL]         PeriodType.forFields(types); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 558,596
public void testForFields7() throws Exception { [EOL]     DurationFieldType[] types = new DurationFieldType[] { DurationFieldType.weeks(), DurationFieldType.months() }; [EOL]     DurationFieldType[] types2 = new DurationFieldType[] { DurationFieldType.seconds() }; [EOL]     PeriodType type = PeriodType.forFields(types); [EOL]     PeriodType type2 = PeriodType.forFields(types2); [EOL]     assertEquals(false, type == type2); [EOL]     assertEquals(false, type.equals(type2)); [EOL]     assertEquals(false, type.hashCode() == type2.hashCode()); [EOL] } <line_num>: 599,612
public void testMaskYears() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withYearsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withYearsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withYearsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoYears", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoYears]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 615,634
public void testMaskMonths() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withMonthsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withMonthsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withMonthsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoMonths", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoMonths]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 637,656
public void testMaskWeeks() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withWeeksRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withWeeksRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withWeeksRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoWeeks", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoWeeks]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 659,678
public void testMaskDays() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withDaysRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withDaysRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withDaysRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoDays", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoDays]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 681,700
public void testMaskHours() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withHoursRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withHoursRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withHoursRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoHours", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoHours]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 703,722
public void testMaskMinutes() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withMinutesRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withMinutesRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withMinutesRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoMinutes", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoMinutes]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 725,744
public void testMaskSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withSecondsRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 747,766
public void testMaskMillis() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withMillisRemoved(); [EOL]     assertEquals(7, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.hours(), type.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.minutes(), type.getFieldType(5)); [EOL]     assertEquals(DurationFieldType.seconds(), type.getFieldType(6)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withMillisRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withMillisRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoMillis", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoMillis]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 769,788
public void testMaskHoursMinutesSeconds() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved(); [EOL]     assertEquals(5, type.size()); [EOL]     assertEquals(DurationFieldType.years(), type.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.months(), type.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.weeks(), type.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.days(), type.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.millis(), type.getFieldType(4)); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved())); [EOL]     assertEquals(false, type.equals(PeriodType.millis())); [EOL]     assertEquals(true, type.hashCode() == type.hashCode()); [EOL]     assertEquals(true, type.hashCode() == PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved().hashCode()); [EOL]     assertEquals(false, type.hashCode() == PeriodType.millis().hashCode()); [EOL]     assertEquals("StandardNoHoursNoMinutesNoSeconds", type.getName()); [EOL]     assertEquals("PeriodType[StandardNoHoursNoMinutesNoSeconds]", type.toString()); [EOL]     assertEqualsAfterSerialization(type); [EOL] } <line_num>: 791,808
public void testMaskTwice1() throws Exception { [EOL]     PeriodType type = PeriodType.standard().withYearsRemoved(); [EOL]     PeriodType type2 = type.withYearsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.standard().withMonthsRemoved(); [EOL]     type2 = type.withMonthsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.standard().withWeeksRemoved(); [EOL]     type2 = type.withWeeksRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.standard().withDaysRemoved(); [EOL]     type2 = type.withDaysRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.standard().withHoursRemoved(); [EOL]     type2 = type.withHoursRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.standard().withMinutesRemoved(); [EOL]     type2 = type.withMinutesRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.standard().withSecondsRemoved(); [EOL]     type2 = type.withSecondsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.standard().withMillisRemoved(); [EOL]     type2 = type.withMillisRemoved(); [EOL]     assertEquals(true, type == type2); [EOL] } <line_num>: 811,843
public void testMaskTwice2() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime(); [EOL]     PeriodType type2 = type.withYearsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withMonthsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.dayTime(); [EOL]     type2 = type.withWeeksRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withDaysRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withHoursRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withMinutesRemoved(); [EOL]     assertEquals(true, type == type2); [EOL]     type = PeriodType.millis(); [EOL]     type2 = type.withSecondsRemoved(); [EOL]     assertEquals(true, type == type2); [EOL] } <line_num>: 846,874
public void testEquals() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime().withMillisRemoved(); [EOL]     assertEquals(true, type.equals(type)); [EOL]     assertEquals(true, type.equals(PeriodType.dayTime().withMillisRemoved())); [EOL]     assertEquals(false, type.equals(null)); [EOL]     assertEquals(false, type.equals("")); [EOL] } <line_num>: 877,883
public void testHashCode() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime().withMillisRemoved(); [EOL]     assertEquals(type.hashCode(), type.hashCode()); [EOL] } <line_num>: 885,888
public void testIsSupported() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime().withMillisRemoved(); [EOL]     assertEquals(false, type.isSupported(DurationFieldType.years())); [EOL]     assertEquals(false, type.isSupported(DurationFieldType.months())); [EOL]     assertEquals(false, type.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, type.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, type.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, type.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, type.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(false, type.isSupported(DurationFieldType.millis())); [EOL] } <line_num>: 891,901
public void testIndexOf() throws Exception { [EOL]     PeriodType type = PeriodType.dayTime().withMillisRemoved(); [EOL]     assertEquals(-1, type.indexOf(DurationFieldType.years())); [EOL]     assertEquals(-1, type.indexOf(DurationFieldType.months())); [EOL]     assertEquals(-1, type.indexOf(DurationFieldType.weeks())); [EOL]     assertEquals(0, type.indexOf(DurationFieldType.days())); [EOL]     assertEquals(1, type.indexOf(DurationFieldType.hours())); [EOL]     assertEquals(2, type.indexOf(DurationFieldType.minutes())); [EOL]     assertEquals(3, type.indexOf(DurationFieldType.seconds())); [EOL]     assertEquals(-1, type.indexOf(DurationFieldType.millis())); [EOL] } <line_num>: 904,914
