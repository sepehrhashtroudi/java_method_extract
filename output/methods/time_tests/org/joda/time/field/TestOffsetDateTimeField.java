public TestOffsetDateTimeField(String name) { [EOL]     super(name); [EOL] } <line_num>: 45,47
protected MockOffsetDateTimeField() { [EOL]     super(ISOChronology.getInstance().secondOfMinute(), 3); [EOL] } <line_num>: 534,536
protected MockStandardDateTimeField() { [EOL]     super(); [EOL] } <line_num>: 540,542
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 37,39
public static TestSuite suite() { [EOL]     return new TestSuite(TestOffsetDateTimeField.class); [EOL] } <line_num>: 41,43
protected void setUp() throws Exception { [EOL] } <line_num>: 49,50
protected void tearDown() throws Exception { [EOL] } <line_num>: 52,53
public void test_constructor1() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 3); [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), field.getType()); [EOL]     assertEquals(3, field.getOffset()); [EOL]     try { [EOL]         field = new OffsetDateTimeField(null, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), UnsupportedDurationField.getInstance(DurationFieldType.seconds())), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 56,78
public void test_constructor2() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3); [EOL]     assertEquals(DateTimeFieldType.secondOfDay(), field.getType()); [EOL]     assertEquals(3, field.getOffset()); [EOL]     try { [EOL]         field = new OffsetDateTimeField(null, DateTimeFieldType.secondOfDay(), 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), null, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 80,101
public void test_getType() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 3); [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), field.getType()); [EOL] } <line_num>: 103,108
public void test_getName() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 3); [EOL]     assertEquals("secondOfMinute", field.getName()); [EOL] } <line_num>: 110,115
public void test_toString() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 3); [EOL]     assertEquals("DateTimeField[secondOfMinute]", field.toString()); [EOL] } <line_num>: 117,122
public void test_isSupported() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(true, field.isSupported()); [EOL] } <line_num>: 124,127
public void test_isLenient() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(false, field.isLenient()); [EOL] } <line_num>: 129,132
public void test_getOffset() { [EOL]     OffsetDateTimeField field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 5); [EOL]     assertEquals(5, field.getOffset()); [EOL] } <line_num>: 134,139
public void test_get() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0 + 3, field.get(0)); [EOL]     assertEquals(6 + 3, field.get(6000)); [EOL] } <line_num>: 141,145
public void test_getAsText_long_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("32", field.getAsText(1000L * 29, Locale.ENGLISH)); [EOL]     assertEquals("32", field.getAsText(1000L * 29, null)); [EOL] } <line_num>: 148,152
public void test_getAsText_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("32", field.getAsText(1000L * 29)); [EOL] } <line_num>: 154,157
public void test_getAsText_RP_int_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("20", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH)); [EOL]     assertEquals("20", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null)); [EOL] } <line_num>: 159,163
public void test_getAsText_RP_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("40", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] } <line_num>: 165,169
public void test_getAsText_int_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("80", field.getAsText(80, Locale.ENGLISH)); [EOL]     assertEquals("80", field.getAsText(80, null)); [EOL] } <line_num>: 171,175
public void test_getAsShortText_long_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("32", field.getAsShortText(1000L * 29, Locale.ENGLISH)); [EOL]     assertEquals("32", field.getAsShortText(1000L * 29, null)); [EOL] } <line_num>: 178,182
public void test_getAsShortText_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("32", field.getAsShortText(1000L * 29)); [EOL] } <line_num>: 184,187
public void test_getAsShortText_RP_int_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("20", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH)); [EOL]     assertEquals("20", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, null)); [EOL] } <line_num>: 189,193
public void test_getAsShortText_RP_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] } <line_num>: 195,199
public void test_getAsShortText_int_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals("80", field.getAsShortText(80, Locale.ENGLISH)); [EOL]     assertEquals("80", field.getAsShortText(80, null)); [EOL] } <line_num>: 201,205
public void test_add_long_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(1001, field.add(1L, 1)); [EOL] } <line_num>: 208,211
public void test_add_long_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(1001, field.add(1L, 1L)); [EOL] } <line_num>: 213,216
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     OffsetDateTimeField field = new MockStandardDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 62, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 32); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 3, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 33); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 33); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 218,261
public void test_addWrapField_long_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(29 * 1000L, field.addWrapField(1000L * 29, 0)); [EOL]     assertEquals(59 * 1000L, field.addWrapField(1000L * 29, 30)); [EOL]     assertEquals(0L, field.addWrapField(1000L * 29, 31)); [EOL] } <line_num>: 264,269
public void test_addWrapField_RP_int_intarray_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 59, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 3, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 33); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL] } <line_num>: 271,287
public void test_getDifference_long_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(-21, field.getDifference(20000L, 41000L)); [EOL] } <line_num>: 290,293
public void test_getDifferenceAsLong_long_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(-21L, field.getDifferenceAsLong(20000L, 41000L)); [EOL] } <line_num>: 295,298
public void test_set_long_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3120L, field.set(2120L, 6)); [EOL]     assertEquals(26120L, field.set(120L, 29)); [EOL]     assertEquals(57120L, field.set(2120L, 60)); [EOL] } <line_num>: 301,306
public void test_set_RP_int_intarray_int() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, 63); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, 2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] } <line_num>: 308,335
public void test_set_long_String_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3050L, field.set(50L, "6", null)); [EOL]     assertEquals(26050L, field.set(50L, "29", Locale.ENGLISH)); [EOL] } <line_num>: 337,341
public void test_set_long_String() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3050L, field.set(50L, "6")); [EOL]     assertEquals(26050L, field.set(50L, "29")); [EOL] } <line_num>: 343,347
public void test_set_RP_int_intarray_String_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "63", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "2", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] } <line_num>: 349,376
public void test_convertText() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0, field.convertText("0", null)); [EOL]     assertEquals(29, field.convertText("29", null)); [EOL]     try { [EOL]         field.convertText("2A", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field.convertText(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 378,390
public void test_isLeap_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(false, field.isLeap(0L)); [EOL] } <line_num>: 397,400
public void test_getLeapAmount_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0, field.getLeapAmount(0L)); [EOL] } <line_num>: 402,405
public void test_getLeapDurationField() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(null, field.getLeapDurationField()); [EOL] } <line_num>: 407,410
public void test_getMinimumValue() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3, field.getMinimumValue()); [EOL] } <line_num>: 413,416
public void test_getMinimumValue_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3, field.getMinimumValue(0L)); [EOL] } <line_num>: 418,421
public void test_getMinimumValue_RP() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3, field.getMinimumValue(new TimeOfDay())); [EOL] } <line_num>: 423,426
public void test_getMinimumValue_RP_intarray() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(3, field.getMinimumValue(new TimeOfDay(), new int[4])); [EOL] } <line_num>: 428,431
public void test_getMaximumValue() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(62, field.getMaximumValue()); [EOL] } <line_num>: 433,436
public void test_getMaximumValue_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(62, field.getMaximumValue(0L)); [EOL] } <line_num>: 438,441
public void test_getMaximumValue_RP() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(62, field.getMaximumValue(new TimeOfDay())); [EOL] } <line_num>: 443,446
public void test_getMaximumValue_RP_intarray() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(62, field.getMaximumValue(new TimeOfDay(), new int[4])); [EOL] } <line_num>: 448,451
public void test_getMaximumTextLength_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL] } <line_num>: 454,457
public void test_getMaximumShortTextLength_Locale() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH)); [EOL] } <line_num>: 459,462
public void test_roundFloor_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(-2000L, field.roundFloor(-1001L)); [EOL]     assertEquals(-1000L, field.roundFloor(-1000L)); [EOL]     assertEquals(-1000L, field.roundFloor(-999L)); [EOL]     assertEquals(-1000L, field.roundFloor(-1L)); [EOL]     assertEquals(0L, field.roundFloor(0L)); [EOL]     assertEquals(0L, field.roundFloor(1L)); [EOL]     assertEquals(0L, field.roundFloor(499L)); [EOL]     assertEquals(0L, field.roundFloor(500L)); [EOL]     assertEquals(0L, field.roundFloor(501L)); [EOL]     assertEquals(1000L, field.roundFloor(1000L)); [EOL] } <line_num>: 465,477
public void test_roundCeiling_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(-1000L, field.roundCeiling(-1001L)); [EOL]     assertEquals(-1000L, field.roundCeiling(-1000L)); [EOL]     assertEquals(0L, field.roundCeiling(-999L)); [EOL]     assertEquals(0L, field.roundCeiling(-1L)); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(1000L, field.roundCeiling(1L)); [EOL]     assertEquals(1000L, field.roundCeiling(499L)); [EOL]     assertEquals(1000L, field.roundCeiling(500L)); [EOL]     assertEquals(1000L, field.roundCeiling(501L)); [EOL]     assertEquals(1000L, field.roundCeiling(1000L)); [EOL] } <line_num>: 479,491
public void test_roundHalfFloor_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfFloor(0L)); [EOL]     assertEquals(0L, field.roundHalfFloor(499L)); [EOL]     assertEquals(0L, field.roundHalfFloor(500L)); [EOL]     assertEquals(1000L, field.roundHalfFloor(501L)); [EOL]     assertEquals(1000L, field.roundHalfFloor(1000L)); [EOL] } <line_num>: 493,500
public void test_roundHalfCeiling_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfCeiling(0L)); [EOL]     assertEquals(0L, field.roundHalfCeiling(499L)); [EOL]     assertEquals(1000L, field.roundHalfCeiling(500L)); [EOL]     assertEquals(1000L, field.roundHalfCeiling(501L)); [EOL]     assertEquals(1000L, field.roundHalfCeiling(1000L)); [EOL] } <line_num>: 502,509
public void test_roundHalfEven_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(499L)); [EOL]     assertEquals(0L, field.roundHalfEven(500L)); [EOL]     assertEquals(1000L, field.roundHalfEven(501L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1000L)); [EOL]     assertEquals(1000L, field.roundHalfEven(1499L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1500L)); [EOL]     assertEquals(2000L, field.roundHalfEven(1501L)); [EOL] } <line_num>: 511,521
public void test_remainder_long() { [EOL]     OffsetDateTimeField field = new MockOffsetDateTimeField(); [EOL]     assertEquals(0L, field.remainder(0L)); [EOL]     assertEquals(499L, field.remainder(499L)); [EOL]     assertEquals(500L, field.remainder(500L)); [EOL]     assertEquals(501L, field.remainder(501L)); [EOL]     assertEquals(0L, field.remainder(1000L)); [EOL] } <line_num>: 523,530
public DurationField getDurationField() { [EOL]     return ISOChronology.getInstanceUTC().seconds(); [EOL] } <line_num>: 543,545
public DurationField getRangeDurationField() { [EOL]     return ISOChronology.getInstanceUTC().minutes(); [EOL] } <line_num>: 546,548
