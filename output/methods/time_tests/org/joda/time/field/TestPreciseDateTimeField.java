public TestPreciseDateTimeField(String name) { [EOL]     super(name); [EOL] } <line_num>: 45,47
protected MockPreciseDateTimeField() { [EOL]     super(DateTimeFieldType.secondOfMinute(), new MockCountingDurationField(DurationFieldType.seconds(), 60), new MockCountingDurationField(DurationFieldType.minutes(), 60 * 60)); [EOL] } <line_num>: 535,539
protected MockPreciseDateTimeField(DateTimeFieldType type, DurationField dur, DurationField range) { [EOL]     super(type, dur, range); [EOL] } <line_num>: 540,543
protected MockStandardDateTimeField() { [EOL]     super(); [EOL] } <line_num>: 547,549
protected MockCountingDurationField(DurationFieldType type, int unit) { [EOL]     super(type); [EOL]     this.unit = unit; [EOL] } <line_num>: 565,568
protected MockZeroDurationField(DurationFieldType type) { [EOL]     super(type); [EOL] } <line_num>: 600,602
protected MockImpreciseDurationField(DurationFieldType type) { [EOL]     super(type); [EOL] } <line_num>: 631,633
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 37,39
public static TestSuite suite() { [EOL]     return new TestSuite(TestPreciseDateTimeField.class); [EOL] } <line_num>: 41,43
protected void setUp() throws Exception { [EOL] } <line_num>: 49,50
protected void tearDown() throws Exception { [EOL] } <line_num>: 52,53
public void test_constructor() { [EOL]     BaseDateTimeField field = new PreciseDateTimeField(DateTimeFieldType.secondOfMinute(), ISOChronology.getInstanceUTC().millis(), ISOChronology.getInstanceUTC().hours()); [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), field.getType()); [EOL]     try { [EOL]         field = new PreciseDateTimeField(null, null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), new MockImpreciseDurationField(DurationFieldType.minutes()), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), ISOChronology.getInstanceUTC().hours(), new MockImpreciseDurationField(DurationFieldType.minutes())); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), ISOChronology.getInstanceUTC().hours(), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field = new PreciseDateTimeField(DateTimeFieldType.minuteOfHour(), new MockZeroDurationField(DurationFieldType.minutes()), ISOChronology.getInstanceUTC().hours()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 56,95
public void test_getType() { [EOL]     BaseDateTimeField field = new PreciseDateTimeField(DateTimeFieldType.secondOfDay(), ISOChronology.getInstanceUTC().millis(), ISOChronology.getInstanceUTC().hours()); [EOL]     assertEquals(DateTimeFieldType.secondOfDay(), field.getType()); [EOL] } <line_num>: 97,104
public void test_getName() { [EOL]     BaseDateTimeField field = new PreciseDateTimeField(DateTimeFieldType.secondOfDay(), ISOChronology.getInstanceUTC().millis(), ISOChronology.getInstanceUTC().hours()); [EOL]     assertEquals("secondOfDay", field.getName()); [EOL] } <line_num>: 106,113
public void test_toString() { [EOL]     BaseDateTimeField field = new PreciseDateTimeField(DateTimeFieldType.secondOfDay(), ISOChronology.getInstanceUTC().millis(), ISOChronology.getInstanceUTC().hours()); [EOL]     assertEquals("DateTimeField[secondOfDay]", field.toString()); [EOL] } <line_num>: 115,122
public void test_isSupported() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(true, field.isSupported()); [EOL] } <line_num>: 124,127
public void test_getRange() { [EOL]     PreciseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(60, field.getRange()); [EOL] } <line_num>: 129,132
public void test_get() { [EOL]     PreciseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.get(0)); [EOL]     assertEquals(1, field.get(60)); [EOL]     assertEquals(2, field.get(123)); [EOL] } <line_num>: 134,139
public void test_getAsText_long_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("29", field.getAsText(60L * 29, Locale.ENGLISH)); [EOL]     assertEquals("29", field.getAsText(60L * 29, null)); [EOL] } <line_num>: 142,146
public void test_getAsText_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("29", field.getAsText(60L * 29)); [EOL] } <line_num>: 148,151
public void test_getAsText_RP_int_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("20", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH)); [EOL]     assertEquals("20", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null)); [EOL] } <line_num>: 153,157
public void test_getAsText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("40", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] } <line_num>: 159,163
public void test_getAsText_int_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("80", field.getAsText(80, Locale.ENGLISH)); [EOL]     assertEquals("80", field.getAsText(80, null)); [EOL] } <line_num>: 165,169
public void test_getAsShortText_long_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("29", field.getAsShortText(60L * 29, Locale.ENGLISH)); [EOL]     assertEquals("29", field.getAsShortText(60L * 29, null)); [EOL] } <line_num>: 172,176
public void test_getAsShortText_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("29", field.getAsShortText(60L * 29)); [EOL] } <line_num>: 178,181
public void test_getAsShortText_RP_int_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("20", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH)); [EOL]     assertEquals("20", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, null)); [EOL] } <line_num>: 183,187
public void test_getAsShortText_RP_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH)); [EOL]     assertEquals("40", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null)); [EOL] } <line_num>: 189,193
public void test_getAsShortText_int_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals("80", field.getAsShortText(80, Locale.ENGLISH)); [EOL]     assertEquals("80", field.getAsShortText(80, null)); [EOL] } <line_num>: 195,199
public void test_add_long_int() { [EOL]     MockCountingDurationField.add_int = 0; [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(61, field.add(1L, 1)); [EOL]     assertEquals(1, MockCountingDurationField.add_int); [EOL] } <line_num>: 202,207
public void test_add_long_long() { [EOL]     MockCountingDurationField.add_long = 0; [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(61, field.add(1L, 1L)); [EOL]     assertEquals(1, MockCountingDurationField.add_long); [EOL] } <line_num>: 209,214
public void test_add_RP_int_intarray_int() { [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     BaseDateTimeField field = new MockStandardDateTimeField(); [EOL]     int[] result = field.add(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 31, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 21, 0, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 23, 59, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -1); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 19, 59, 40 }; [EOL]     result = field.add(new TimeOfDay(), 2, values, -31); [EOL]     assertEquals(true, Arrays.equals(expected, result)); [EOL]     values = new int[] { 0, 0, 30, 40 }; [EOL]     try { [EOL]         field.add(new TimeOfDay(), 2, values, -31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 216,254
public void test_addWrapField_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(29 * 60L, field.addWrapField(60L * 29, 0)); [EOL]     assertEquals(59 * 60L, field.addWrapField(60L * 29, 30)); [EOL]     assertEquals(0 * 60L, field.addWrapField(60L * 29, 31)); [EOL] } <line_num>: 257,262
public void test_addWrapField_RP_int_intarray_int() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 59, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 0, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 1, 40 }; [EOL]     result = field.addWrapField(new TimeOfDay(), 2, values, 31); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL] } <line_num>: 264,285
public void test_getDifference_long_long() { [EOL]     MockCountingDurationField.difference_long = 0; [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(30, field.getDifference(0L, 0L)); [EOL]     assertEquals(1, MockCountingDurationField.difference_long); [EOL] } <line_num>: 288,293
public void test_getDifferenceAsLong_long_long() { [EOL]     MockCountingDurationField.difference_long = 0; [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(30, field.getDifferenceAsLong(0L, 0L)); [EOL]     assertEquals(1, MockCountingDurationField.difference_long); [EOL] } <line_num>: 295,300
public void test_set_long_int() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.set(120L, 0)); [EOL]     assertEquals(29 * 60, field.set(120L, 29)); [EOL] } <line_num>: 303,307
public void test_set_RP_int_intarray_int() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, 30); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, 29); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] } <line_num>: 309,336
public void test_set_long_String_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.set(0L, "0", null)); [EOL]     assertEquals(29 * 60, field.set(0L, "29", Locale.ENGLISH)); [EOL] } <line_num>: 338,342
public void test_set_long_String() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.set(0L, "0")); [EOL]     assertEquals(29 * 60, field.set(0L, "29")); [EOL] } <line_num>: 344,348
public void test_set_RP_int_intarray_String_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     int[] expected = new int[] { 10, 20, 30, 40 }; [EOL]     int[] result = field.set(new TimeOfDay(), 2, values, "30", null); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 29, 40 }; [EOL]     result = field.set(new TimeOfDay(), 2, values, "29", Locale.ENGLISH); [EOL]     assertEquals(true, Arrays.equals(result, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "60", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL]     values = new int[] { 10, 20, 30, 40 }; [EOL]     expected = new int[] { 10, 20, 30, 40 }; [EOL]     try { [EOL]         field.set(new TimeOfDay(), 2, values, "-1", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(true, Arrays.equals(values, expected)); [EOL] } <line_num>: 350,377
public void test_convertText() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.convertText("0", null)); [EOL]     assertEquals(29, field.convertText("29", null)); [EOL]     try { [EOL]         field.convertText("2A", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         field.convertText(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 379,391
public void test_isLeap_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(false, field.isLeap(0L)); [EOL] } <line_num>: 398,401
public void test_getLeapAmount_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.getLeapAmount(0L)); [EOL] } <line_num>: 403,406
public void test_getLeapDurationField() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(null, field.getLeapDurationField()); [EOL] } <line_num>: 408,411
public void test_getMinimumValue() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.getMinimumValue()); [EOL] } <line_num>: 414,417
public void test_getMinimumValue_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.getMinimumValue(0L)); [EOL] } <line_num>: 419,422
public void test_getMinimumValue_RP() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.getMinimumValue(new TimeOfDay())); [EOL] } <line_num>: 424,427
public void test_getMinimumValue_RP_intarray() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0, field.getMinimumValue(new TimeOfDay(), new int[4])); [EOL] } <line_num>: 429,432
public void test_getMaximumValue() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(59, field.getMaximumValue()); [EOL] } <line_num>: 434,437
public void test_getMaximumValue_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(59, field.getMaximumValue(0L)); [EOL] } <line_num>: 439,442
public void test_getMaximumValue_RP() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(59, field.getMaximumValue(new TimeOfDay())); [EOL] } <line_num>: 444,447
public void test_getMaximumValue_RP_intarray() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(59, field.getMaximumValue(new TimeOfDay(), new int[4])); [EOL] } <line_num>: 449,452
public void test_getMaximumTextLength_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH)); [EOL] } <line_num>: 455,458
public void test_getMaximumShortTextLength_Locale() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH)); [EOL] } <line_num>: 460,463
public void test_roundFloor_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(-120L, field.roundFloor(-61L)); [EOL]     assertEquals(-60L, field.roundFloor(-60L)); [EOL]     assertEquals(-60L, field.roundFloor(-59L)); [EOL]     assertEquals(-60L, field.roundFloor(-1L)); [EOL]     assertEquals(0L, field.roundFloor(0L)); [EOL]     assertEquals(0L, field.roundFloor(1L)); [EOL]     assertEquals(0L, field.roundFloor(29L)); [EOL]     assertEquals(0L, field.roundFloor(30L)); [EOL]     assertEquals(0L, field.roundFloor(31L)); [EOL]     assertEquals(60L, field.roundFloor(60L)); [EOL] } <line_num>: 466,478
public void test_roundCeiling_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(-60L, field.roundCeiling(-61L)); [EOL]     assertEquals(-60L, field.roundCeiling(-60L)); [EOL]     assertEquals(0L, field.roundCeiling(-59L)); [EOL]     assertEquals(0L, field.roundCeiling(-1L)); [EOL]     assertEquals(0L, field.roundCeiling(0L)); [EOL]     assertEquals(60L, field.roundCeiling(1L)); [EOL]     assertEquals(60L, field.roundCeiling(29L)); [EOL]     assertEquals(60L, field.roundCeiling(30L)); [EOL]     assertEquals(60L, field.roundCeiling(31L)); [EOL]     assertEquals(60L, field.roundCeiling(60L)); [EOL] } <line_num>: 480,492
public void test_roundHalfFloor_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfFloor(0L)); [EOL]     assertEquals(0L, field.roundHalfFloor(29L)); [EOL]     assertEquals(0L, field.roundHalfFloor(30L)); [EOL]     assertEquals(60L, field.roundHalfFloor(31L)); [EOL]     assertEquals(60L, field.roundHalfFloor(60L)); [EOL] } <line_num>: 494,501
public void test_roundHalfCeiling_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfCeiling(0L)); [EOL]     assertEquals(0L, field.roundHalfCeiling(29L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(30L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(31L)); [EOL]     assertEquals(60L, field.roundHalfCeiling(60L)); [EOL] } <line_num>: 503,510
public void test_roundHalfEven_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0L, field.roundHalfEven(0L)); [EOL]     assertEquals(0L, field.roundHalfEven(29L)); [EOL]     assertEquals(0L, field.roundHalfEven(30L)); [EOL]     assertEquals(60L, field.roundHalfEven(31L)); [EOL]     assertEquals(60L, field.roundHalfEven(60L)); [EOL]     assertEquals(60L, field.roundHalfEven(89L)); [EOL]     assertEquals(120L, field.roundHalfEven(90L)); [EOL]     assertEquals(120L, field.roundHalfEven(91L)); [EOL] } <line_num>: 512,522
public void test_remainder_long() { [EOL]     BaseDateTimeField field = new MockPreciseDateTimeField(); [EOL]     assertEquals(0L, field.remainder(0L)); [EOL]     assertEquals(29L, field.remainder(29L)); [EOL]     assertEquals(30L, field.remainder(30L)); [EOL]     assertEquals(31L, field.remainder(31L)); [EOL]     assertEquals(0L, field.remainder(60L)); [EOL] } <line_num>: 524,531
public DurationField getDurationField() { [EOL]     return ISOChronology.getInstanceUTC().seconds(); [EOL] } <line_num>: 550,552
public DurationField getRangeDurationField() { [EOL]     return ISOChronology.getInstanceUTC().minutes(); [EOL] } <line_num>: 553,555
public boolean isPrecise() { [EOL]     return true; [EOL] } <line_num>: 569,571
public long getUnitMillis() { [EOL]     return unit; [EOL] } <line_num>: 572,574
public long getValueAsLong(long duration, long instant) { [EOL]     return 0; [EOL] } <line_num>: 575,577
public long getMillis(int value, long instant) { [EOL]     return 0; [EOL] } <line_num>: 578,580
public long getMillis(long value, long instant) { [EOL]     return 0; [EOL] } <line_num>: 581,583
public long add(long instant, int value) { [EOL]     add_int++; [EOL]     return instant + (value * 60L); [EOL] } <line_num>: 584,587
public long add(long instant, long value) { [EOL]     add_long++; [EOL]     return instant + (value * 60L); [EOL] } <line_num>: 588,591
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     difference_long++; [EOL]     return 30; [EOL] } <line_num>: 592,595
public boolean isPrecise() { [EOL]     return true; [EOL] } <line_num>: 603,605
public long getUnitMillis() { [EOL]     return 0; [EOL] } <line_num>: 606,608
public long getValueAsLong(long duration, long instant) { [EOL]     return 0; [EOL] } <line_num>: 609,611
public long getMillis(int value, long instant) { [EOL]     return 0; [EOL] } <line_num>: 612,614
public long getMillis(long value, long instant) { [EOL]     return 0; [EOL] } <line_num>: 615,617
public long add(long instant, int value) { [EOL]     return 0; [EOL] } <line_num>: 618,620
public long add(long instant, long value) { [EOL]     return 0; [EOL] } <line_num>: 621,623
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     return 0; [EOL] } <line_num>: 624,626
public boolean isPrecise() { [EOL]     return false; [EOL] } <line_num>: 634,636
public long getUnitMillis() { [EOL]     return 0; [EOL] } <line_num>: 637,639
public long getValueAsLong(long duration, long instant) { [EOL]     return 0; [EOL] } <line_num>: 640,642
public long getMillis(int value, long instant) { [EOL]     return 0; [EOL] } <line_num>: 643,645
public long getMillis(long value, long instant) { [EOL]     return 0; [EOL] } <line_num>: 646,648
public long add(long instant, int value) { [EOL]     return 0; [EOL] } <line_num>: 649,651
public long add(long instant, long value) { [EOL]     return 0; [EOL] } <line_num>: 652,654
public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { [EOL]     return 0; [EOL] } <line_num>: 655,657
