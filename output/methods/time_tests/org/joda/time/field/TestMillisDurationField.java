public TestMillisDurationField(String name) { [EOL]     super(name); [EOL] } <line_num>: 45,47
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 37,39
public static TestSuite suite() { [EOL]     return new TestSuite(TestMillisDurationField.class); [EOL] } <line_num>: 41,43
protected void setUp() throws Exception { [EOL] } <line_num>: 49,50
protected void tearDown() throws Exception { [EOL] } <line_num>: 52,53
public void test_getType() { [EOL]     assertEquals(DurationFieldType.millis(), MillisDurationField.INSTANCE.getType()); [EOL] } <line_num>: 56,58
public void test_getName() { [EOL]     assertEquals("millis", MillisDurationField.INSTANCE.getName()); [EOL] } <line_num>: 60,62
public void test_isSupported() { [EOL]     assertEquals(true, MillisDurationField.INSTANCE.isSupported()); [EOL] } <line_num>: 64,66
public void test_isPrecise() { [EOL]     assertEquals(true, MillisDurationField.INSTANCE.isPrecise()); [EOL] } <line_num>: 68,70
public void test_getUnitMillis() { [EOL]     assertEquals(1, MillisDurationField.INSTANCE.getUnitMillis()); [EOL] } <line_num>: 72,74
public void test_toString() { [EOL]     assertEquals("DurationField[millis]", MillisDurationField.INSTANCE.toString()); [EOL] } <line_num>: 76,78
public void test_getValue_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 81,89
public void test_getValueAsLong_long() { [EOL]     assertEquals(0L, MillisDurationField.INSTANCE.getValueAsLong(0L)); [EOL]     assertEquals(1234L, MillisDurationField.INSTANCE.getValueAsLong(1234L)); [EOL]     assertEquals(-1234L, MillisDurationField.INSTANCE.getValueAsLong(-1234L)); [EOL]     assertEquals(((long) (Integer.MAX_VALUE)) + 1L, MillisDurationField.INSTANCE.getValueAsLong(((long) (Integer.MAX_VALUE)) + 1L)); [EOL] } <line_num>: 91,96
public void test_getValue_long_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getValue(0L, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L, 567L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L, 567L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 98,106
public void test_getValueAsLong_long_long() { [EOL]     assertEquals(0L, MillisDurationField.INSTANCE.getValueAsLong(0L, 567L)); [EOL]     assertEquals(1234L, MillisDurationField.INSTANCE.getValueAsLong(1234L, 567L)); [EOL]     assertEquals(-1234L, MillisDurationField.INSTANCE.getValueAsLong(-1234L, 567L)); [EOL]     assertEquals(((long) (Integer.MAX_VALUE)) + 1L, MillisDurationField.INSTANCE.getValueAsLong(((long) (Integer.MAX_VALUE)) + 1L, 567L)); [EOL] } <line_num>: 108,113
public void test_getMillis_int() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getMillis(0)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234)); [EOL] } <line_num>: 116,120
public void test_getMillis_long() { [EOL]     assertEquals(0L, MillisDurationField.INSTANCE.getMillis(0L)); [EOL]     assertEquals(1234L, MillisDurationField.INSTANCE.getMillis(1234L)); [EOL]     assertEquals(-1234L, MillisDurationField.INSTANCE.getMillis(-1234L)); [EOL] } <line_num>: 122,126
public void test_getMillis_int_long() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.getMillis(0, 567L)); [EOL]     assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234, 567L)); [EOL]     assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234, 567L)); [EOL] } <line_num>: 128,132
public void test_getMillis_long_long() { [EOL]     assertEquals(0L, MillisDurationField.INSTANCE.getMillis(0L, 567L)); [EOL]     assertEquals(1234L, MillisDurationField.INSTANCE.getMillis(1234L, 567L)); [EOL]     assertEquals(-1234L, MillisDurationField.INSTANCE.getMillis(-1234L, 567L)); [EOL] } <line_num>: 134,138
public void test_add_long_int() { [EOL]     assertEquals(567L, MillisDurationField.INSTANCE.add(567L, 0)); [EOL]     assertEquals(567L + 1234L, MillisDurationField.INSTANCE.add(567L, 1234)); [EOL]     assertEquals(567L - 1234L, MillisDurationField.INSTANCE.add(567L, -1234)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.add(Long.MAX_VALUE, 1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 141,149
public void test_add_long_long() { [EOL]     assertEquals(567L, MillisDurationField.INSTANCE.add(567L, 0L)); [EOL]     assertEquals(567L + 1234L, MillisDurationField.INSTANCE.add(567L, 1234L)); [EOL]     assertEquals(567L - 1234L, MillisDurationField.INSTANCE.add(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.add(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 151,159
public void test_getDifference_long_int() { [EOL]     assertEquals(567, MillisDurationField.INSTANCE.getDifference(567L, 0L)); [EOL]     assertEquals(567 - 1234, MillisDurationField.INSTANCE.getDifference(567L, 1234L)); [EOL]     assertEquals(567 + 1234, MillisDurationField.INSTANCE.getDifference(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 162,170
public void test_getDifferenceAsLong_long_long() { [EOL]     assertEquals(567L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 0L)); [EOL]     assertEquals(567L - 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 1234L)); [EOL]     assertEquals(567L + 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, -1234L)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 172,180
public void test_compareTo() { [EOL]     assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE)); [EOL]     assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds())); [EOL]     DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0); [EOL]     assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy)); [EOL]     try { [EOL]         MillisDurationField.INSTANCE.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 183,196
public void testSerialization() throws Exception { [EOL]     DurationField test = MillisDurationField.INSTANCE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationField result = (DurationField) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 199,214
