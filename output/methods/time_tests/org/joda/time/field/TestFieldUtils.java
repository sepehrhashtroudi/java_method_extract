public TestFieldUtils(String name) { [EOL]     super(name); [EOL] } <line_num>: 35,37
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 27,29
public static TestSuite suite() { [EOL]     return new TestSuite(TestFieldUtils.class); [EOL] } <line_num>: 31,33
public void testSafeAddInt() { [EOL]     assertEquals(0, FieldUtils.safeAdd(0, 0)); [EOL]     assertEquals(5, FieldUtils.safeAdd(2, 3)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(2, -3)); [EOL]     assertEquals(1, FieldUtils.safeAdd(-2, 3)); [EOL]     assertEquals(-5, FieldUtils.safeAdd(-2, -3)); [EOL]     assertEquals(Integer.MAX_VALUE - 1, FieldUtils.safeAdd(Integer.MAX_VALUE, -1)); [EOL]     assertEquals(Integer.MIN_VALUE + 1, FieldUtils.safeAdd(Integer.MIN_VALUE, 1)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MIN_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, 1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, -100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] } <line_num>: 39,88
public void testSafeAddLong() { [EOL]     assertEquals(0L, FieldUtils.safeAdd(0L, 0L)); [EOL]     assertEquals(5L, FieldUtils.safeAdd(2L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeAdd(2L, -3L)); [EOL]     assertEquals(1L, FieldUtils.safeAdd(-2L, 3L)); [EOL]     assertEquals(-5L, FieldUtils.safeAdd(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeAdd(Long.MAX_VALUE, -1L)); [EOL]     assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeAdd(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Long.MIN_VALUE, Long.MAX_VALUE)); [EOL]     assertEquals(-1, FieldUtils.safeAdd(Long.MAX_VALUE, Long.MIN_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MAX_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, -100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] } <line_num>: 90,139
public void testSafeSubtractLong() { [EOL]     assertEquals(0L, FieldUtils.safeSubtract(0L, 0L)); [EOL]     assertEquals(-1L, FieldUtils.safeSubtract(2L, 3L)); [EOL]     assertEquals(5L, FieldUtils.safeSubtract(2L, -3L)); [EOL]     assertEquals(-5L, FieldUtils.safeSubtract(-2L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeSubtract(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeSubtract(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeSubtract(Long.MIN_VALUE, -1L)); [EOL]     assertEquals(0, FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE)); [EOL]     assertEquals(0, FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MAX_VALUE)); [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, 1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, -100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] } <line_num>: 141,190
public void testSafeMultiplyLongLong() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0L)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] } <line_num>: 193,238
public void testSafeMultiplyLongInt() { [EOL]     assertEquals(0L, FieldUtils.safeMultiply(0L, 0)); [EOL]     assertEquals(1L, FieldUtils.safeMultiply(1L, 1)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(1L, 3)); [EOL]     assertEquals(3L, FieldUtils.safeMultiply(3L, 1)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(2L, 3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(2L, -3)); [EOL]     assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3)); [EOL]     assertEquals(6L, FieldUtils.safeMultiply(-2L, -3)); [EOL]     assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1)); [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, -1); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, 100); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] } <line_num>: 241,282
public void testSafeDivideLongLong() { [EOL]     assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); [EOL]     assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); [EOL]     assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(5L, 3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(5L, -3L)); [EOL]     assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L)); [EOL]     assertEquals(1L, FieldUtils.safeDivide(-5L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(6L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(6L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-6L, -3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(7L, 3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(7L, -3L)); [EOL]     assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L)); [EOL]     assertEquals(2L, FieldUtils.safeDivide(-7L, -3L)); [EOL]     assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L)); [EOL]     assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L)); [EOL]     assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L)); [EOL]     try { [EOL]         FieldUtils.safeDivide(Long.MIN_VALUE, -1L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.safeDivide(1L, 0L); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] } <line_num>: 285,322
