public static TestSuite suite() { [EOL]     return new TestSuite(TestUnsupportedDateTimeField.class); [EOL] } <line_num>: 43,45
protected void setUp() throws Exception { [EOL]     weeks = DurationFieldType.weeks(); [EOL]     months = DurationFieldType.months(); [EOL]     dateTimeFieldTypeOne = DateTimeFieldType.centuryOfEra(); [EOL]     localTime = new LocalTime(); [EOL] } <line_num>: 47,52
public void testNullValuesToGetInstanceThrowsException() { [EOL]     try { [EOL]         UnsupportedDateTimeField.getInstance(null, null); [EOL]         assertTrue(false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 58,66
public void testDifferentDurationReturnDifferentObjects() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertSame(fieldOne, fieldTwo); [EOL]     DateTimeField fieldThree = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(months)); [EOL]     assertNotSame(fieldOne, fieldThree); [EOL] } <line_num>: 79,101
public void testPublicGetNameMethod() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertSame(fieldOne.getName(), dateTimeFieldTypeOne.getName()); [EOL] } <line_num>: 108,114
public void testAlwaysFalseReturnTypes() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertFalse(fieldOne.isLenient()); [EOL]     assertFalse(fieldOne.isSupported()); [EOL] } <line_num>: 121,127
public void testMethodsThatShouldAlwaysReturnNull() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     assertNull(fieldOne.getLeapDurationField()); [EOL]     assertNull(fieldOne.getRangeDurationField()); [EOL] } <line_num>: 136,143
public void testUnsupportedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     try { [EOL]         fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(100000L, 250); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.get(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(100000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsShortText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(1000L, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, 0, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getAsText(localTime, Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getLeapAmount(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumShortTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumTextLength(Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMaximumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(10000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.getMinimumValue(localTime, new int[] { 0 }); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.isLeap(System.currentTimeMillis()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.remainder(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfCeiling(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfEven(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.roundHalfFloor(1000000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, 1000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation"); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(1000000L, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, 10000); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 176,539
public void testDelegatedMethods() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     PreciseDurationField hoursDuration = new PreciseDurationField(DurationFieldType.hours(), 10L); [EOL]     DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, hoursDuration); [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 100); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 100); [EOL]         long secondComputation = fieldTwo.add(currentTime, 100); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.add(System.currentTimeMillis(), 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long currentTime = System.currentTimeMillis(); [EOL]         long firstComputation = hoursDuration.add(currentTime, 1000L); [EOL]         long secondComputation = fieldTwo.add(currentTime, 1000L); [EOL]         assertTrue(firstComputation == secondComputation); [EOL]         assertEquals(firstComputation, secondComputation); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifference(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         int firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         int secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL]     try { [EOL]         fieldOne.getDifferenceAsLong(100000L, 1000L); [EOL]         assertTrue(false); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     try { [EOL]         long firstDifference = hoursDuration.getDifference(100000L, 1000L); [EOL]         long secondDifference = fieldTwo.getDifference(100000L, 1000L); [EOL]         assertEquals(firstDifference, secondDifference); [EOL]     } catch (UnsupportedOperationException e) { [EOL]         assertTrue(false); [EOL]     } [EOL] } <line_num>: 548,640
public void testToString() { [EOL]     DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(dateTimeFieldTypeOne, UnsupportedDurationField.getInstance(weeks)); [EOL]     String debugMessage = fieldOne.toString(); [EOL]     assertNotNull(debugMessage); [EOL]     assertTrue(debugMessage.length() > 0); [EOL] } <line_num>: 648,656
