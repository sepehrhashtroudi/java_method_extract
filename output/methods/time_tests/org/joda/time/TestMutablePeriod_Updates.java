public TestMutablePeriod_Updates(String name) { [EOL]     super(name); [EOL] } <line_num>: 75,77
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 67,69
public static TestSuite suite() { [EOL]     return new TestSuite(TestMutablePeriod_Updates.class); [EOL] } <line_num>: 71,73
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 79,87
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 89,97
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 100,104
public void testClear() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.clear(); [EOL]     assertEquals(new MutablePeriod(), test); [EOL]     test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime()); [EOL]     test.clear(); [EOL]     assertEquals(new MutablePeriod(PeriodType.yearMonthDayTime()), test); [EOL] } <line_num>: 107,115
public void testAddYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(10); [EOL]     assertEquals(11, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(-10); [EOL]     assertEquals(-9, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addYears(0); [EOL]     assertEquals(1, test.getYears()); [EOL] } <line_num>: 118,130
public void testAddMonths() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(10); [EOL]     assertEquals(12, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(-10); [EOL]     assertEquals(-8, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMonths(0); [EOL]     assertEquals(2, test.getMonths()); [EOL] } <line_num>: 133,145
public void testAddWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(10); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(-10); [EOL]     assertEquals(-7, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addWeeks(0); [EOL]     assertEquals(3, test.getWeeks()); [EOL] } <line_num>: 148,160
public void testAddDays() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(10); [EOL]     assertEquals(14, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(-10); [EOL]     assertEquals(-6, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addDays(0); [EOL]     assertEquals(4, test.getDays()); [EOL] } <line_num>: 163,175
public void testAddHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(10); [EOL]     assertEquals(15, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(-10); [EOL]     assertEquals(-5, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addHours(0); [EOL]     assertEquals(5, test.getHours()); [EOL] } <line_num>: 178,190
public void testAddMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(10); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(-10); [EOL]     assertEquals(-4, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMinutes(0); [EOL]     assertEquals(6, test.getMinutes()); [EOL] } <line_num>: 193,205
public void testAddSeconds() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(10); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(-10); [EOL]     assertEquals(-3, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addSeconds(0); [EOL]     assertEquals(7, test.getSeconds()); [EOL] } <line_num>: 208,220
public void testAddMillis() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMillis(10); [EOL]     assertEquals(18, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMillis(-10); [EOL]     assertEquals(-2, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.addMillis(0); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 223,235
public void testSetYears() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(10); [EOL]     assertEquals(10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(-10); [EOL]     assertEquals(-10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(0); [EOL]     assertEquals(0, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setYears(1); [EOL]     assertEquals(1, test.getYears()); [EOL]     test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis()); [EOL]     try { [EOL]         test.setYears(1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 238,260
public void testSetMonths() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMonths(10); [EOL]     assertEquals(10, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMonths(-10); [EOL]     assertEquals(-10, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMonths(0); [EOL]     assertEquals(0, test.getMonths()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMonths(2); [EOL]     assertEquals(2, test.getMonths()); [EOL] } <line_num>: 263,279
public void testSetWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(10); [EOL]     assertEquals(10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(-10); [EOL]     assertEquals(-10, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(0); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setWeeks(3); [EOL]     assertEquals(3, test.getWeeks()); [EOL] } <line_num>: 282,298
public void testSetDays() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setDays(10); [EOL]     assertEquals(10, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setDays(-10); [EOL]     assertEquals(-10, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setDays(0); [EOL]     assertEquals(0, test.getDays()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setDays(4); [EOL]     assertEquals(4, test.getDays()); [EOL] } <line_num>: 301,317
public void testSetHours() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(10); [EOL]     assertEquals(10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(-10); [EOL]     assertEquals(-10, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(0); [EOL]     assertEquals(0, test.getHours()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setHours(5); [EOL]     assertEquals(5, test.getHours()); [EOL] } <line_num>: 320,336
public void testSetMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMinutes(10); [EOL]     assertEquals(10, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMinutes(-10); [EOL]     assertEquals(-10, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMinutes(0); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMinutes(6); [EOL]     assertEquals(6, test.getMinutes()); [EOL] } <line_num>: 339,355
public void testSetSeconds() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setSeconds(10); [EOL]     assertEquals(10, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setSeconds(-10); [EOL]     assertEquals(-10, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setSeconds(0); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setSeconds(7); [EOL]     assertEquals(7, test.getSeconds()); [EOL] } <line_num>: 358,374
public void testSetMillis() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMillis(10); [EOL]     assertEquals(10, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMillis(-10); [EOL]     assertEquals(-10, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMillis(0); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setMillis(8); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 377,393
public void testSet_Field() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.set(DurationFieldType.years(), 10); [EOL]     assertEquals(10, test.getYears()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.set(null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 396,406
public void testAdd_Field() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.add(DurationFieldType.years(), 10); [EOL]     assertEquals(11, test.getYears()); [EOL]     test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis()); [EOL]     test.add(DurationFieldType.years(), 0); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(1, test.getMillis()); [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.add(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.add(null, 10); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 409,430
public void testSetPeriod_8ints1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(15, test.getHours()); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 433,444
public void testSetPeriod_8ints2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     try { [EOL]         test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 446,460
public void testSetPeriod_8ints3() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     test.setPeriod(0, 0, 0, 0, 0, 0, 0, 18); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 462,473
public void testSetPeriod_8ints4() { [EOL]     MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8); [EOL]     test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(15, test.getHours()); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 475,486
public void testSetPeriod_RP1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(15, test.getHours()); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 489,500
public void testSetPeriod_RP2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     try { [EOL]         test.setPeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 502,516
public void testSetPeriod_RP3() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     test.setPeriod(new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 18)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 518,529
public void testSetPeriod_RP4() { [EOL]     MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8); [EOL]     test.setPeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(15, test.getHours()); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 531,542
public void testSetPeriod_RP5() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod((ReadablePeriod) null); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 544,555
public void testSetPeriod_long_long1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 558,571
public void testSetPeriod_long_long2() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt2.getMillis(), dt1.getMillis()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(-1, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] } <line_num>: 573,586
public void testSetPeriod_long_long3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     test.setPeriod(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 588,600
public void testSetPeriod_long_long_NoYears() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withYearsRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(13, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 602,615
public void testSetPeriod_long_long_NoMonths() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withMonthsRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(5, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 617,630
public void testSetPeriod_long_long_NoWeeks() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withWeeksRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 632,645
public void testSetPeriod_long_long_NoDays() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withDaysRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(25, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 647,660
public void testSetPeriod_long_long_NoHours() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withHoursRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(61, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 662,675
public void testSetPeriod_long_long_NoMinutes() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withMinutesRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(61, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 677,690
public void testSetPeriod_long_long_NoSeconds() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withSecondsRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(1001, test.getMillis()); [EOL] } <line_num>: 692,705
public void testSetPeriod_long_long_NoMillis() { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.standard().withMillisRemoved()); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 707,720
public void testSetPeriod_RI_RI1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt1, dt2); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 723,736
public void testSetPeriod_RI_RI2() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(dt2, dt1); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(-1, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] } <line_num>: 738,751
public void testSetPeriod_RI_RI3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     test.setPeriod(dt1, dt1); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 753,765
public void testSetPeriod_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19); [EOL]     DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20); [EOL]     test.setPeriod(new Interval(dt1, dt2)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 768,781
public void testSetPeriod_RInterval2() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod((ReadableInterval) null); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 783,794
public void testSetPeriod_long1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(100L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 797,808
public void testSetPeriod_long2() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     test.setPeriod((4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 810,826
public void testSetPeriod_RD1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod(new Duration(100L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 1015,1026
public void testSetPeriod_RD2() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     test.setPeriod(new Duration(length)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 1028,1045
public void testSetPeriod_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.setPeriod((ReadableDuration) null); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1047,1058
public void testAdd_8ints1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] } <line_num>: 1061,1072
public void testAdd_8ints2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime()); [EOL]     try { [EOL]         test.add(1, 2, 3, 4, 5, 6, 7, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 1074,1088
public void testAdd_long1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(100L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] } <line_num>: 1091,1102
public void testAdd_long2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.standard()); [EOL]     long ms = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     test.add(ms); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] } <line_num>: 1104,1121
public void testAdd_long3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.add(2100L); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(9, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] } <line_num>: 1123,1134
public void testAdd_long_Chronology1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(100L, ISOChronology.getInstance()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] } <line_num>: 1137,1148
public void testAdd_long_Chronology2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.standard()); [EOL]     long ms = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     test.add(ms, ISOChronology.getInstance()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] } <line_num>: 1150,1167
public void testAdd_long_Chronology3() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.standard()); [EOL]     long ms = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     test.add(ms, ISOChronology.getInstanceUTC()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(64, test.getWeeks()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] } <line_num>: 1169,1186
public void testAdd_RD1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Duration(100L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] } <line_num>: 1189,1200
public void testAdd_RD2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime()); [EOL]     long ms = (4L + (3L * 7L)) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     test.add(new Duration(ms)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 + (3 * 7)) * 24 + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] } <line_num>: 1202,1218
public void testAdd_RD3() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.add((ReadableDuration) null); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 1220,1231
public void testAdd_RP1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Period(100L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] } <line_num>: 1234,1245
public void testAdd_RP2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.standard()); [EOL]     test.add(new Period(1, 2, 3, 4, 5, 6, 7, 0, PeriodType.standard().withMillisRemoved())); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 1247,1259
public void testAdd_RP3() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.standard()); [EOL]     test.add(new Period(0L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 1261,1272
public void testAdd_RP4() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime()); [EOL]     try { [EOL]         test.add(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 1274,1288
public void testAdd_RP5() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime()); [EOL]     test.add(new Period(1, 2, 0, 4, 5, 6, 7, 8)); [EOL]     assertEquals(2, test.getYears()); [EOL]     assertEquals(4, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(10, test.getHours()); [EOL]     assertEquals(12, test.getMinutes()); [EOL]     assertEquals(14, test.getSeconds()); [EOL]     assertEquals(16, test.getMillis()); [EOL] } <line_num>: 1290,1301
public void testAdd_RP6() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.add((ReadablePeriod) null); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 1303,1314
public void testAdd_RInterval1() { [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(100L, 200L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(200, test.getMillis()); [EOL] } <line_num>: 1317,1328
public void testAdd_RInterval2() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 12, 18, 0, 0, 0, 8); [EOL]     MutablePeriod test = new MutablePeriod(100L); [EOL]     test.add(new Interval(dt1, dt2)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(6, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] } <line_num>: 1330,1343
public void testAdd_RInterval3() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime()); [EOL]     test.add(new Interval(0L, 0L)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 1345,1356
public void testAdd_RInterval4() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 0, 0, 0, 8); [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime()); [EOL]     test.add(new Interval(dt1, dt2)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(108, test.getMillis()); [EOL] } <line_num>: 1358,1371
public void testAdd_RInterval5() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.add((ReadableInterval) null); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 1373,1384
public void testMergePeriod_RP1() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.mergePeriod(new MutablePeriod(0, 0, 0, 14, 15, 16, 17, 18, PeriodType.dayTime())); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(15, test.getHours()); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 1387,1398
public void testMergePeriod_RP2() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     try { [EOL]         test.mergePeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(100, test.getMillis()); [EOL] } <line_num>: 1400,1414
public void testMergePeriod_RP3() { [EOL]     MutablePeriod test = new MutablePeriod(100L, PeriodType.millis()); [EOL]     test.mergePeriod(new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 18)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 1416,1427
public void testMergePeriod_RP4() { [EOL]     MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8); [EOL]     test.mergePeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(12, test.getMonths()); [EOL]     assertEquals(13, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(15, test.getHours()); [EOL]     assertEquals(16, test.getMinutes()); [EOL]     assertEquals(17, test.getSeconds()); [EOL]     assertEquals(18, test.getMillis()); [EOL] } <line_num>: 1429,1440
public void testMergePeriod_RP5() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     test.mergePeriod((ReadablePeriod) null); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 1442,1453
