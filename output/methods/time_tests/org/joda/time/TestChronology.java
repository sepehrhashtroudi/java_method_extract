public TestChronology(String name) { [EOL]     super(name); [EOL] } <line_num>: 86,88
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 78,80
public static TestSuite suite() { [EOL]     return new TestSuite(TestChronology.class); [EOL] } <line_num>: 82,84
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 90,98
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 100,108
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 111,115
public void testEqualsHashCode_ISO() { [EOL]     Chronology chrono1 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono2 = ISOChronology.getInstanceUTC(); [EOL]     Chronology chrono3 = ISOChronology.getInstance(); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] } <line_num>: 118,135
public void testEqualsHashCode_Lenient() { [EOL]     Chronology chrono1 = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     Chronology chrono2 = LenientChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     Chronology chrono3 = LenientChronology.getInstance(ISOChronology.getInstance()); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] } <line_num>: 138,155
public void testEqualsHashCode_Strict() { [EOL]     Chronology chrono1 = StrictChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     Chronology chrono2 = StrictChronology.getInstance(ISOChronology.getInstanceUTC()); [EOL]     Chronology chrono3 = StrictChronology.getInstance(ISOChronology.getInstance()); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] } <line_num>: 158,175
public void testEqualsHashCode_Limit() { [EOL]     DateTime lower = new DateTime(0L); [EOL]     DateTime higherA = new DateTime(1000000L); [EOL]     DateTime higherB = new DateTime(2000000L); [EOL]     Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA); [EOL]     Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB); [EOL]     Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA); [EOL]     assertEquals(true, chrono1.equals(chrono2A)); [EOL]     assertEquals(false, chrono1.equals(chrono2B)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2A = new DateTime(0L, chrono2A); [EOL]     DateTime dt2B = new DateTime(0L, chrono2B); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2A)); [EOL]     assertEquals(false, dt1.equals(dt2B)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2A.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono2B.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] } <line_num>: 178,204
public void testEqualsHashCode_Zoned() { [EOL]     DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo"); [EOL]     Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA); [EOL]     Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB); [EOL]     assertEquals(true, chrono1.equals(chrono2)); [EOL]     assertEquals(false, chrono1.equals(chrono3)); [EOL]     DateTime dt1 = new DateTime(0L, chrono1); [EOL]     DateTime dt2 = new DateTime(0L, chrono2); [EOL]     DateTime dt3 = new DateTime(0L, chrono3); [EOL]     assertEquals(true, dt1.equals(dt2)); [EOL]     assertEquals(false, dt1.equals(dt3)); [EOL]     assertEquals(true, chrono1.hashCode() == chrono2.hashCode()); [EOL]     assertEquals(false, chrono1.hashCode() == chrono3.hashCode()); [EOL] } <line_num>: 207,227
public void testToString() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     ISOChronology isoParis = ISOChronology.getInstance(paris); [EOL]     assertEquals("ISOChronology[Europe/Paris]", isoParis.toString()); [EOL]     assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString()); [EOL]     assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString()); [EOL]     assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString()); [EOL]     assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString()); [EOL]     assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString()); [EOL]     assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString()); [EOL]     assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString()); [EOL]     assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString()); [EOL]     assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString()); [EOL]     assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString()); [EOL] } <line_num>: 230,247
