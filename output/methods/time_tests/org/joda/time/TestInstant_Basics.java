public TestInstant_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 75,77
public static TestSuite suite() { [EOL]     return new TestSuite(TestInstant_Basics.class); [EOL] } <line_num>: 79,81
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 87,95
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 97,105
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 108,112
public void testGet_DateTimeFieldType() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 115,143
public void testGet_DateTimeField() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().era())); [EOL]     assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra())); [EOL]     assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().year())); [EOL]     assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear())); [EOL]     assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth())); [EOL]     assertEquals(2002, test.get(ISOChronology.getInstance().weekyear())); [EOL]     assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear())); [EOL]     assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek())); [EOL]     assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday())); [EOL]     assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour())); [EOL]     assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute())); [EOL]     assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay())); [EOL]     assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond())); [EOL]     assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeField) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 145,173
public void testGetMethods() { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(DateTimeZone.UTC, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 175,181
public void testEqualsHashCode() { [EOL]     Instant test1 = new Instant(TEST_TIME1); [EOL]     Instant test2 = new Instant(TEST_TIME1); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Instant test3 = new Instant(TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1))); [EOL] } <line_num>: 183,205
public String toString() { [EOL]     return null; [EOL] } <line_num>: 208,210
public long getMillis() { [EOL]     return TEST_TIME1; [EOL] } <line_num>: 211,213
public Chronology getChronology() { [EOL]     return ISOChronology.getInstanceUTC(); [EOL] } <line_num>: 214,216
public void testCompareTo() { [EOL]     Instant test1 = new Instant(TEST_TIME1); [EOL]     Instant test1a = new Instant(TEST_TIME1); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     Instant test2 = new Instant(TEST_TIME2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(new MockInstant())); [EOL]     assertEquals(0, test1.compareTo(new MockInstant())); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 219,247
public void testIsEqual_long() { [EOL]     assertEquals(false, new Instant(TEST_TIME1).isEqual(TEST_TIME2)); [EOL]     assertEquals(true, new Instant(TEST_TIME1).isEqual(TEST_TIME1)); [EOL]     assertEquals(false, new Instant(TEST_TIME2).isEqual(TEST_TIME1)); [EOL] } <line_num>: 250,254
public void testIsEqualNow() { [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqualNow()); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW).isEqualNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqualNow()); [EOL] } <line_num>: 256,260
public void testIsEqual_RI() { [EOL]     Instant test1 = new Instant(TEST_TIME1); [EOL]     Instant test1a = new Instant(TEST_TIME1); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Instant test2 = new Instant(TEST_TIME2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(new MockInstant())); [EOL]     assertEquals(true, test1.isEqual(new MockInstant())); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqual(null)); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW).isEqual(null)); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqual(null)); [EOL] } <line_num>: 262,285
public void testIsBefore_long() { [EOL]     assertEquals(true, new Instant(TEST_TIME1).isBefore(TEST_TIME2)); [EOL]     assertEquals(false, new Instant(TEST_TIME1).isBefore(TEST_TIME1)); [EOL]     assertEquals(false, new Instant(TEST_TIME2).isBefore(TEST_TIME1)); [EOL] } <line_num>: 288,292
public void testIsBeforeNow() { [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW - 1).isBeforeNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW).isBeforeNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isBeforeNow()); [EOL] } <line_num>: 294,298
public void testIsBefore_RI() { [EOL]     Instant test1 = new Instant(TEST_TIME1); [EOL]     Instant test1a = new Instant(TEST_TIME1); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     Instant test2 = new Instant(TEST_TIME2); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(new MockInstant())); [EOL]     assertEquals(false, test1.isBefore(new MockInstant())); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW + 1).isBefore(null)); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW).isBefore(null)); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW - 1).isBefore(null)); [EOL] } <line_num>: 300,323
public void testIsAfter_long() { [EOL]     assertEquals(false, new Instant(TEST_TIME1).isAfter(TEST_TIME2)); [EOL]     assertEquals(false, new Instant(TEST_TIME1).isAfter(TEST_TIME1)); [EOL]     assertEquals(true, new Instant(TEST_TIME2).isAfter(TEST_TIME1)); [EOL] } <line_num>: 326,330
public void testIsAfterNow() { [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isAfterNow()); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW).isAfterNow()); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW + 1).isAfterNow()); [EOL] } <line_num>: 332,336
public void testIsAfter_RI() { [EOL]     Instant test1 = new Instant(TEST_TIME1); [EOL]     Instant test1a = new Instant(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     Instant test2 = new Instant(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new Instant(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new Instant(TEST_TIME_NOW - 1).isAfter(null)); [EOL] } <line_num>: 338,361
public void testSerialization() throws Exception { [EOL]     Instant test = new Instant(TEST_TIME_NOW); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Instant result = (Instant) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 364,379
public void testToString() { [EOL]     Instant test = new Instant(TEST_TIME_NOW); [EOL]     assertEquals("2002-06-09T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 382,385
public void testToInstant() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.toInstant(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 388,392
public void testToDateTime() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] } <line_num>: 394,399
public void testToDateTimeISO() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] } <line_num>: 401,408
public void testToDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] } <line_num>: 410,425
public void testToDateTime_Chronology() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(ISOChronology.getInstance()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime(GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] } <line_num>: 427,441
public void testToMutableDateTime() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] } <line_num>: 443,448
public void testToMutableDateTimeISO() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTimeISO(); [EOL]     assertSame(MutableDateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] } <line_num>: 450,457
public void testToMutableDateTime_DateTimeZone() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toMutableDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] } <line_num>: 459,474
public void testToMutableDateTime_Chronology() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.toMutableDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), result.getChronology()); [EOL] } <line_num>: 476,491
public void testToDate() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Date result = test.toDate(); [EOL]     assertEquals(test.getMillis(), result.getTime()); [EOL] } <line_num>: 493,497
public void testWithMillis_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.withMillis(TEST_TIME2); [EOL]     assertEquals(TEST_TIME2, result.getMillis()); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL]     test = new Instant(TEST_TIME1); [EOL]     result = test.withMillis(TEST_TIME1); [EOL]     assertSame(test, result); [EOL] } <line_num>: 500,509
public void testWithDurationAdded_long_int() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.withDurationAdded(123456789L, 1); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new Instant(TEST_TIME1 + (2L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new Instant(TEST_TIME1 - (3L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 512,528
public void testWithDurationAdded_RD_int() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.withDurationAdded(new Duration(123456789L), 1); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 2); [EOL]     expected = new Instant(TEST_TIME1 + (2L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), -3); [EOL]     expected = new Instant(TEST_TIME1 - (3L * 123456789L)); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 531,550
public void testPlus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 553,558
public void testPlus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.plus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 + 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 560,568
public void testMinus_long() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(123456789L); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 571,576
public void testMinus_RD() { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     Instant result = test.minus(new Duration(123456789L)); [EOL]     Instant expected = new Instant(TEST_TIME1 - 123456789L); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 578,586
public void testImmutable() { [EOL]     assertTrue(Modifier.isFinal(Instant.class.getModifiers())); [EOL] } <line_num>: 589,591
