public TestMonthDay_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 64,66
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 56,58
public static TestSuite suite() { [EOL]     return new TestSuite(TestMonthDay_Constructors.class); [EOL] } <line_num>: 60,62
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 68,72
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 74,78
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MonthDay(6, 30), MonthDay.parse("--06-30")); [EOL]     assertEquals(new MonthDay(2, 29), MonthDay.parse("--02-29")); [EOL]     assertEquals(new MonthDay(6, 30), MonthDay.parse("2010-06-30")); [EOL]     assertEquals(new MonthDay(1, 2), MonthDay.parse("2010-002")); [EOL] } <line_num>: 81,86
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--dd MM").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MonthDay(6, 30), MonthDay.parse("2010--30 06", f)); [EOL] } <line_num>: 88,91
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     MonthDay expected = new MonthDay(2, 3); [EOL]     assertEquals(expected, MonthDay.fromCalendarFields(cal)); [EOL]     try { [EOL]         MonthDay.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 94,103
public void testFactory_FromDateFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     MonthDay expected = new MonthDay(2, 3); [EOL]     assertEquals(expected, MonthDay.fromDateFields(cal.getTime())); [EOL]     try { [EOL]         MonthDay.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 106,115
public void testConstructor() throws Throwable { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now()); [EOL] } <line_num>: 121,127
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     MonthDay test = new MonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(LONDON)); [EOL]     test = new MonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(PARIS)); [EOL] } <line_num>: 132,148
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     MonthDay test = new MonthDay((DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL] } <line_num>: 153,162
public void testConstructor_Chronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(test, MonthDay.now(GREGORIAN_PARIS)); [EOL] } <line_num>: 167,173
public void testConstructor_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 178,183
public void testConstructor_long1() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 189,194
public void testConstructor_long2() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME2); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(7, test.getDayOfMonth()); [EOL] } <line_num>: 199,204
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 209,214
public void testConstructor_long2_Chronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(7, test.getDayOfMonth()); [EOL] } <line_num>: 219,224
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 229,234
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 237,243
public void testConstructor_nullObject() throws Throwable { [EOL]     MonthDay test = new MonthDay((Object) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 245,250
public void testConstructor_ObjectString1() throws Throwable { [EOL]     MonthDay test = new MonthDay("1972-12"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL] } <line_num>: 252,257
public void testConstructor_ObjectString5() throws Throwable { [EOL]     MonthDay test = new MonthDay("10"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL] } <line_num>: 259,264
public void testConstructor_ObjectStringEx1() throws Throwable { [EOL]     try { [EOL]         new MonthDay("T10:20:30.040"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 266,273
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new MonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 275,282
public void testConstructor_ObjectStringEx3() throws Throwable { [EOL]     try { [EOL]         new MonthDay("10:20:30.040"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 284,291
public void testConstructor_ObjectStringEx4() throws Throwable { [EOL]     try { [EOL]         new MonthDay("10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 293,300
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 306,312
public void testConstructor_nullObject_Chronology() throws Throwable { [EOL]     MonthDay test = new MonthDay((Object) null, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 317,322
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     MonthDay test = new MonthDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 327,333
public void testConstructor_nullObject_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay((Object) null, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 338,343
public void testConstructor_int_int() throws Throwable { [EOL]     MonthDay test = new MonthDay(6, 30); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL]     try { [EOL]         new MonthDay(Integer.MIN_VALUE, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new MonthDay(Integer.MAX_VALUE, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new MonthDay(1970, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new MonthDay(1970, 13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 349,370
public void testConstructor_int_int_Chronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(6, 30, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL]     try { [EOL]         new MonthDay(Integer.MIN_VALUE, 6, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new MonthDay(Integer.MAX_VALUE, 6, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new MonthDay(1970, 0, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new MonthDay(1970, 13, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 375,396
public void testConstructor_int_int_nullChronology() throws Throwable { [EOL]     MonthDay test = new MonthDay(6, 30, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(30, test.getDayOfMonth()); [EOL] } <line_num>: 401,406
