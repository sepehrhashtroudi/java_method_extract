public TestMutableDateTime_Sets(String name) { [EOL]     super(name); [EOL] } <line_num>: 77,79
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 69,71
public static TestSuite suite() { [EOL]     return new TestSuite(TestMutableDateTime_Sets.class); [EOL] } <line_num>: 73,75
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 81,89
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 91,99
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 102,106
public void testSetMillis_long1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setMillis(TEST_TIME2); [EOL]     assertEquals(TEST_TIME2, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 109,114
public void testSetChronology_Chronology1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setChronology(GregorianChronology.getInstance(PARIS)); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology()); [EOL] } <line_num>: 117,122
public void testSetChronology_Chronology2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setChronology(null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 124,129
public void testSetZone_DateTimeZone1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZone(PARIS); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL] } <line_num>: 132,137
public void testSetZone_DateTimeZone2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZone(null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 139,144
public void testSetZoneRetainFields_DateTimeZone1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), test.getChronology()); [EOL] } <line_num>: 147,152
public void testSetZoneRetainFields_DateTimeZone2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.setZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 154,159
public void testSetZoneRetainFields_DateTimeZone3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS)); [EOL]     test.setZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1 + DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     assertEquals(GregorianChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 161,166
public void testSetZoneRetainFields_DateTimeZone4() { [EOL]     Chronology chrono = new MockNullZoneChronology(); [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, chrono); [EOL]     test.setZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis()); [EOL]     assertSame(chrono, test.getChronology()); [EOL] } <line_num>: 168,174
public void testSetMillis_RI1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance()); [EOL]     test.setMillis(new Instant(TEST_TIME2)); [EOL]     assertEquals(TEST_TIME2, test.getMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 177,182
public void testSetMillis_RI2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance()); [EOL]     test.setMillis(null); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 184,189
public void testSet_DateTimeFieldType_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.set(DateTimeFieldType.year(), 2010); [EOL]     assertEquals(2010, test.getYear()); [EOL] } <line_num>: 192,196
public void testSet_DateTimeFieldType_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.set(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 198,205
public void testSet_DateTimeFieldType_int3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.set(DateTimeFieldType.monthOfYear(), 13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 207,214
public void testSetDate_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDate(2010, 12, 3); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] } <line_num>: 217,227
public void testSetDate_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setDate(2010, 13, 3); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 229,236
public void testSetDate_long1() { [EOL]     long setter = new DateTime(2010, 12, 3, 5, 7, 9, 501).getMillis(); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] } <line_num>: 239,250
public void testSetDate_RI1() { [EOL]     DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 501); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] } <line_num>: 253,264
public void testSetDate_RI2() { [EOL]     MutableDateTime test = new MutableDateTime(2010, 7, 8, 12, 24, 48, 501); [EOL]     test.setDate(null); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] } <line_num>: 266,276
public void testSetDate_RI_same() { [EOL]     MutableDateTime setter = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(2, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] } <line_num>: 278,289
public void testSetDate_RI_different1() { [EOL]     MutableDateTime setter = new MutableDateTime(2010, 12, 1, 0, 0, 0, 0, DateTimeZone.forID("America/Los_Angeles")); [EOL]     MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("Europe/Moscow")); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL]     assertEquals(2, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] } <line_num>: 291,302
public void testSetDate_RI_different2() { [EOL]     MutableDateTime setter = new MutableDateTime(2010, 12, 1, 0, 0, 0, 0, DateTimeZone.forID("Europe/Moscow")); [EOL]     MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID("America/Los_Angeles")); [EOL]     test.setDate(setter); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL]     assertEquals(2, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL] } <line_num>: 304,315
public void testSetTime_int_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(5, 6, 7, 8); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] } <line_num>: 318,328
public void testSetTime_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setTime(60, 6, 7, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 330,337
public void testSetTime_long1() { [EOL]     long setter = new DateTime(2010, 12, 3, 5, 7, 9, 11).getMillis(); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] } <line_num>: 340,351
public void testSetTime_RI1() { [EOL]     DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] } <line_num>: 354,365
public void testSetTime_RI2() { [EOL]     MutableDateTime test = new MutableDateTime(2010, 7, 8, 12, 24, 48, 501); [EOL]     test.setTime(null); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(7, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     assertEquals(new DateTime(TEST_TIME_NOW).getHourOfDay(), test.getHourOfDay()); [EOL]     assertEquals(new DateTime(TEST_TIME_NOW).getMinuteOfHour(), test.getMinuteOfHour()); [EOL]     assertEquals(new DateTime(TEST_TIME_NOW).getSecondOfMinute(), test.getSecondOfMinute()); [EOL]     assertEquals(new DateTime(TEST_TIME_NOW).getMillisOfSecond(), test.getMillisOfSecond()); [EOL] } <line_num>: 367,377
public void testSetTime_Object3() { [EOL]     DateTime temp = new DateTime(2010, 12, 3, 5, 7, 9, 11); [EOL]     DateTime setter = new DateTime(temp.getMillis(), new MockNullZoneChronology()); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setTime(setter); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(7, test.getMinuteOfHour()); [EOL]     assertEquals(9, test.getSecondOfMinute()); [EOL]     assertEquals(11, test.getMillisOfSecond()); [EOL] } <line_num>: 379,391
public void testSetDateTime_int_int_int_int_int_int_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501); [EOL]     test.setDateTime(2010, 12, 3, 5, 6, 7, 8); [EOL]     assertEquals(2010, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL]     assertEquals(5, test.getHourOfDay()); [EOL]     assertEquals(6, test.getMinuteOfHour()); [EOL]     assertEquals(7, test.getSecondOfMinute()); [EOL]     assertEquals(8, test.getMillisOfSecond()); [EOL] } <line_num>: 394,404
public void testSetDateTime_int_int_int_int_int_int_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.setDateTime(2010, 13, 3, 5, 6, 7, 8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 406,414
public void testSetYear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setYear(2010); [EOL]     assertEquals("2010-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 417,421
public void testSetMonthOfYear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setMonthOfYear(12); [EOL]     assertEquals("2002-12-09T05:06:07.008Z", test.toString()); [EOL] } <line_num>: 424,428
public void testSetMonthOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 430,435
public void testSetMonthOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setMonthOfYear(10); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 437,443
public void testSetMonthOfYear_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 445,452
public void testSetDayOfMonth_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setDayOfMonth(17); [EOL]     assertEquals("2002-06-17T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 455,459
public void testSetDayOfMonth_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setDayOfMonth(31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 461,468
public void testSetDayOfMonth_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 470,475
public void testSetDayOfMonth_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setDayOfMonth(30); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 477,483
public void testSetDayOfYear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setDayOfYear(3); [EOL]     assertEquals("2002-01-03T05:06:07.008Z", test.toString()); [EOL] } <line_num>: 486,490
public void testSetDayOfYear_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.setDayOfYear(303); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 492,497
public void testSetDayOfYear_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.setDayOfYear(303); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 499,505
public void testSetDayOfYear_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setDayOfYear(366); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 507,514
public void testSetWeekyear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setWeekyear(2001); [EOL]     assertEquals("2001-06-10T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 517,521
public void testSetWeekOfWeekyear_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setWeekOfWeekyear(2); [EOL]     assertEquals("2002-01-13T05:06:07.008Z", test.toString()); [EOL] } <line_num>: 524,528
public void testSetWeekOfWeekyear_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setWeekOfWeekyear(53); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 530,537
public void testSetDayOfWeek_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setDayOfWeek(5); [EOL]     assertEquals("2002-06-07T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 540,544
public void testSetDayOfWeek_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setDayOfWeek(8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 546,553
public void testSetHourOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setHourOfDay(13); [EOL]     assertEquals("2002-06-09T13:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 556,560
public void testSetHourOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setHourOfDay(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 562,569
public void testSetMinuteOfHour_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setMinuteOfHour(13); [EOL]     assertEquals("2002-06-09T05:13:07.008+01:00", test.toString()); [EOL] } <line_num>: 572,576
public void testSetMinuteOfHour_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMinuteOfHour(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 578,585
public void testSetMinuteOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setMinuteOfDay(13); [EOL]     assertEquals("2002-06-09T00:13:07.008+01:00", test.toString()); [EOL] } <line_num>: 588,592
public void testSetMinuteOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMinuteOfDay(24 * 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 594,601
public void testSetSecondOfMinute_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setSecondOfMinute(13); [EOL]     assertEquals("2002-06-09T05:06:13.008+01:00", test.toString()); [EOL] } <line_num>: 604,608
public void testSetSecondOfMinute_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setSecondOfMinute(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 610,617
public void testSetSecondOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setSecondOfDay(13); [EOL]     assertEquals("2002-06-09T00:00:13.008+01:00", test.toString()); [EOL] } <line_num>: 620,624
public void testSetSecondOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setSecondOfDay(24 * 60 * 60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 626,633
public void testSetMilliOfSecond_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setMillisOfSecond(13); [EOL]     assertEquals("2002-06-09T05:06:07.013+01:00", test.toString()); [EOL] } <line_num>: 636,640
public void testSetMilliOfSecond_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMillisOfSecond(1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 642,649
public void testSetMilliOfDay_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.setMillisOfDay(13); [EOL]     assertEquals("2002-06-09T00:00:00.013+01:00", test.toString()); [EOL] } <line_num>: 652,656
public void testSetMilliOfDay_int2() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     try { [EOL]         test.setMillisOfDay(24 * 60 * 60 * 1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 658,665
