public TestLocalDateTime_Properties(String name) { [EOL]     super(name); [EOL] } <line_num>: 67,69
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 59,61
public static TestSuite suite() { [EOL]     return new TestSuite(TestLocalDateTime_Properties.class); [EOL] } <line_num>: 63,65
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     systemDefaultLocale = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL] } <line_num>: 71,77
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL]     Locale.setDefault(systemDefaultLocale); [EOL]     systemDefaultLocale = null; [EOL] } <line_num>: 79,85
public void testPropertyGetYear() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getLocalDateTime()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] } <line_num>: 88,104
public void testPropertyGetMaxMinValuesYear() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(-292275054, test.year().getMinimumValue()); [EOL]     assertEquals(-292275054, test.year().getMinimumValueOverall()); [EOL]     assertEquals(292278993, test.year().getMaximumValue()); [EOL]     assertEquals(292278993, test.year().getMaximumValueOverall()); [EOL] } <line_num>: 106,112
public void testPropertyAddToCopyYear() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1981, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.year().addToCopy(292278993 - 1972); [EOL]     check(copy, 292278993, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL] } <line_num>: 114,143
public void testPropertyAddWrapFieldToCopyYear() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1981, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     check(copy, 1972, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1); [EOL]     check(copy, -292275054, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1); [EOL]     check(copy, 292278993, 6, 9, 10, 20, 30, 40); [EOL] } <line_num>: 145,159
public void testPropertySetCopyYear() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.year().setCopy(12); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 12, 6, 9, 10, 20, 30, 40); [EOL] } <line_num>: 161,166
public void testPropertySetCopyTextYear() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 12, 6, 9, 10, 20, 30, 40); [EOL] } <line_num>: 168,173
public void testPropertyCompareToYear() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 175,195
public void testPropertyGetMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getLocalDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] } <line_num>: 198,217
public void testPropertyGetMaxMinValuesMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] } <line_num>: 219,225
public void testPropertyAddToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] } <line_num>: 227,255
public void testPropertyAddWrapFieldToCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 10, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(1); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(copy, 1972, 3, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(3); [EOL]     check(copy, 1972, 4, 30, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(1); [EOL]     check(copy, 1971, 2, 28, 10, 20, 30, 40); [EOL] } <line_num>: 257,282
public void testPropertySetCopyMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29, 10, 20, 30, 40); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 284,302
public void testPropertySetCopyTextMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.monthOfYear().setCopy("12"); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().setCopy("December"); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL]     copy = test.monthOfYear().setCopy("Dec"); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 12, 9, 10, 20, 30, 40); [EOL] } <line_num>: 304,317
public void testPropertyCompareToMonth() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 319,339
public void testPropertyGetDay() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getLocalDateTime()); [EOL]     assertEquals(9, test.dayOfMonth().get()); [EOL]     assertEquals("9", test.dayOfMonth().getAsString()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL] } <line_num>: 342,358
public void testPropertyGetMaxMinValuesDay() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new LocalDateTime(1972, 2, 9, 10, 20, 30, 40); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new LocalDateTime(1971, 2, 9, 10, 20, 30, 40); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] } <line_num>: 360,372
public void testPropertyAddToCopyDay() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.dayOfMonth().addToCopy(9); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 6, 18, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     check(copy, 1972, 6, 30, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     check(copy, 1972, 7, 1, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     check(copy, 1972, 7, 31, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     check(copy, 1972, 8, 1, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     check(copy, 1972, 12, 31, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     check(copy, 1973, 1, 1, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     check(copy, 1972, 6, 1, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     check(copy, 1972, 5, 31, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     check(copy, 1972, 1, 1, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     check(copy, 1971, 12, 31, 10, 20, 30, 40); [EOL] } <line_num>: 374,409
public void testPropertyAddWrapFieldToCopyDay() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 6, 30, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     check(copy, 1972, 6, 1, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     check(copy, 1972, 6, 27, 10, 20, 30, 40); [EOL]     test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     check(copy, 1972, 7, 30, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     check(copy, 1972, 7, 31, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(23); [EOL]     check(copy, 1972, 7, 1, 10, 20, 30, 40); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     check(copy, 1972, 7, 28, 10, 20, 30, 40); [EOL] } <line_num>: 411,435
public void testPropertySetCopyDay() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.dayOfMonth().setCopy(12); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 6, 12, 10, 20, 30, 40); [EOL]     try { [EOL]         test.dayOfMonth().setCopy(31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.dayOfMonth().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 437,451
public void testPropertySetCopyTextDay() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 6, 12, 10, 20, 30, 40); [EOL] } <line_num>: 453,458
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.dayOfMonth().withMaximumValue(); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 6, 30, 10, 20, 30, 40); [EOL] } <line_num>: 460,465
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.dayOfMonth().withMinimumValue(); [EOL]     check(test, 1972, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 1972, 6, 1, 10, 20, 30, 40); [EOL] } <line_num>: 467,472
public void testPropertyCompareToDay() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 474,494
public void testPropertyEquals() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40, COPTIC_UTC); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] } <line_num>: 496,519
public void testPropertyHashCode() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] } <line_num>: 521,528
public void testPropertyGetHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getLocalDateTime()); [EOL]     assertEquals(10, test.hourOfDay().get()); [EOL]     assertEquals("10", test.hourOfDay().getAsString()); [EOL]     assertEquals("10", test.hourOfDay().getAsText()); [EOL]     assertEquals("10", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("10", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("10", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 531,547
public void testPropertyRoundHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 40); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 10, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0); [EOL]     test = new LocalDateTime(2005, 6, 9, 11, 30); [EOL]     check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0); [EOL]     check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0); [EOL] } <line_num>: 549,577
public void testPropertyGetMaxMinValuesHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(0, test.hourOfDay().getMinimumValue()); [EOL]     assertEquals(0, test.hourOfDay().getMinimumValueOverall()); [EOL]     assertEquals(23, test.hourOfDay().getMaximumValue()); [EOL]     assertEquals(23, test.hourOfDay().getMaximumValueOverall()); [EOL] } <line_num>: 579,585
public void testPropertyWithMaxMinValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40); [EOL]     check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40); [EOL]     check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40); [EOL] } <line_num>: 587,591
public void testPropertyAddToCopyHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 2005, 6, 9, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 2005, 6, 10, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 2005, 6, 9, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 2005, 6, 8, 23, 20, 30, 40); [EOL] } <line_num>: 593,613
public void testPropertyAddWrapFieldToCopyHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.hourOfDay().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(0); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(18); [EOL]     check(copy, 2005, 6, 9, 4, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(-15); [EOL]     check(copy, 2005, 6, 9, 19, 20, 30, 40); [EOL] } <line_num>: 615,629
public void testPropertySetHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.hourOfDay().setCopy(12); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 12, 20, 30, 40); [EOL]     try { [EOL]         test.hourOfDay().setCopy(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.hourOfDay().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 631,645
public void testPropertySetTextHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 12, 20, 30, 40); [EOL] } <line_num>: 647,652
public void testPropertyWithMaximumValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.hourOfDay().withMaximumValue(); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 23, 20, 30, 40); [EOL] } <line_num>: 654,659
public void testPropertyWithMinimumValueHour() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.hourOfDay().withMinimumValue(); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 0, 20, 30, 40); [EOL] } <line_num>: 661,666
public void testPropertyCompareToHour() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.hourOfDay().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.hourOfDay().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.hourOfDay().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.hourOfDay().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.hourOfDay().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 668,688
public void testPropertyGetMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getLocalDateTime()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] } <line_num>: 691,707
public void testPropertyGetMaxMinValuesMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(0, test.minuteOfHour().getMinimumValue()); [EOL]     assertEquals(0, test.minuteOfHour().getMinimumValueOverall()); [EOL]     assertEquals(59, test.minuteOfHour().getMaximumValue()); [EOL]     assertEquals(59, test.minuteOfHour().getMaximumValueOverall()); [EOL] } <line_num>: 709,715
public void testPropertyWithMaxMinValueMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     check(test.minuteOfHour().withMaximumValue(), 2005, 6, 9, 10, 59, 30, 40); [EOL]     check(test.minuteOfHour().withMinimumValue(), 2005, 6, 9, 10, 0, 30, 40); [EOL] } <line_num>: 717,721
public void testPropertyAddToCopyMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.minuteOfHour().addToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(39); [EOL]     check(copy, 2005, 6, 9, 10, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(40); [EOL]     check(copy, 2005, 6, 9, 11, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(1 * 60 + 45); [EOL]     check(copy, 2005, 6, 9, 12, 5, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(13 * 60 + 39); [EOL]     check(copy, 2005, 6, 9, 23, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(13 * 60 + 40); [EOL]     check(copy, 2005, 6, 10, 0, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-9); [EOL]     check(copy, 2005, 6, 9, 10, 11, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-19); [EOL]     check(copy, 2005, 6, 9, 10, 1, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-20); [EOL]     check(copy, 2005, 6, 9, 10, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-21); [EOL]     check(copy, 2005, 6, 9, 9, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20)); [EOL]     check(copy, 2005, 6, 9, 0, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-(10 * 60 + 21)); [EOL]     check(copy, 2005, 6, 8, 23, 59, 30, 40); [EOL] } <line_num>: 723,761
public void testPropertyAddWrapFieldToCopyMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.minuteOfHour().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(49); [EOL]     check(copy, 2005, 6, 9, 10, 9, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 33, 30, 40); [EOL] } <line_num>: 763,774
public void testPropertySetMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 776,790
public void testPropertySetTextMinute() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.minuteOfHour().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 12, 30, 40); [EOL] } <line_num>: 792,797
public void testPropertyCompareToMinute() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 799,819
public void testPropertyGetSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField()); [EOL]     assertEquals("secondOfMinute", test.secondOfMinute().getName()); [EOL]     assertEquals("Property[secondOfMinute]", test.secondOfMinute().toString()); [EOL]     assertSame(test, test.secondOfMinute().getLocalDateTime()); [EOL]     assertEquals(30, test.secondOfMinute().get()); [EOL]     assertEquals("30", test.secondOfMinute().getAsString()); [EOL]     assertEquals("30", test.secondOfMinute().getAsText()); [EOL]     assertEquals("30", test.secondOfMinute().getAsText(Locale.FRENCH)); [EOL]     assertEquals("30", test.secondOfMinute().getAsShortText()); [EOL]     assertEquals("30", test.secondOfMinute().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField()); [EOL]     assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField()); [EOL]     assertEquals(2, test.secondOfMinute().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null)); [EOL] } <line_num>: 822,838
public void testPropertyGetMaxMinValuesSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(0, test.secondOfMinute().getMinimumValue()); [EOL]     assertEquals(0, test.secondOfMinute().getMinimumValueOverall()); [EOL]     assertEquals(59, test.secondOfMinute().getMaximumValue()); [EOL]     assertEquals(59, test.secondOfMinute().getMaximumValueOverall()); [EOL] } <line_num>: 840,846
public void testPropertyWithMaxMinValueSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     check(test.secondOfMinute().withMaximumValue(), 2005, 6, 9, 10, 20, 59, 40); [EOL]     check(test.secondOfMinute().withMinimumValue(), 2005, 6, 9, 10, 20, 0, 40); [EOL] } <line_num>: 848,852
public void testPropertyAddToCopySecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().addToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 39, 40); [EOL]     copy = test.secondOfMinute().addToCopy(29); [EOL]     check(copy, 2005, 6, 9, 10, 20, 59, 40); [EOL]     copy = test.secondOfMinute().addToCopy(30); [EOL]     check(copy, 2005, 6, 9, 10, 21, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(39 * 60 + 29); [EOL]     check(copy, 2005, 6, 9, 10, 59, 59, 40); [EOL]     copy = test.secondOfMinute().addToCopy(39 * 60 + 30); [EOL]     check(copy, 2005, 6, 9, 11, 0, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30); [EOL]     check(copy, 2005, 6, 10, 0, 0, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-9); [EOL]     check(copy, 2005, 6, 9, 10, 20, 21, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-30); [EOL]     check(copy, 2005, 6, 9, 10, 20, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-31); [EOL]     check(copy, 2005, 6, 9, 10, 19, 59, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30)); [EOL]     check(copy, 2005, 6, 9, 0, 0, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31)); [EOL]     check(copy, 2005, 6, 8, 23, 59, 59, 40); [EOL] } <line_num>: 854,889
public void testPropertyAddWrapFieldToCopySecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 39, 40); [EOL]     copy = test.secondOfMinute().addWrapFieldToCopy(49); [EOL]     check(copy, 2005, 6, 9, 10, 20, 19, 40); [EOL]     copy = test.secondOfMinute().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 43, 40); [EOL] } <line_num>: 891,902
public void testPropertySetSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy(12); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL]     try { [EOL]         test.secondOfMinute().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.secondOfMinute().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 904,918
public void testPropertySetTextSecond() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 12, 40); [EOL] } <line_num>: 920,925
public void testPropertyCompareToSecond() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.secondOfMinute().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.secondOfMinute().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 927,947
public void testPropertyGetMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField()); [EOL]     assertEquals("millisOfSecond", test.millisOfSecond().getName()); [EOL]     assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString()); [EOL]     assertSame(test, test.millisOfSecond().getLocalDateTime()); [EOL]     assertEquals(40, test.millisOfSecond().get()); [EOL]     assertEquals("40", test.millisOfSecond().getAsString()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText(Locale.FRENCH)); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField()); [EOL]     assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField()); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null)); [EOL] } <line_num>: 950,966
public void testPropertyGetMaxMinValuesMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(0, test.millisOfSecond().getMinimumValue()); [EOL]     assertEquals(0, test.millisOfSecond().getMinimumValueOverall()); [EOL]     assertEquals(999, test.millisOfSecond().getMaximumValue()); [EOL]     assertEquals(999, test.millisOfSecond().getMaximumValueOverall()); [EOL] } <line_num>: 968,974
public void testPropertyWithMaxMinValueMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     check(test.millisOfSecond().withMaximumValue(), 2005, 6, 9, 10, 20, 30, 999); [EOL]     check(test.millisOfSecond().withMinimumValue(), 2005, 6, 9, 10, 20, 30, 0); [EOL] } <line_num>: 976,980
public void testPropertyAddToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addToCopy(959); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 999); [EOL]     copy = test.millisOfSecond().addToCopy(960); [EOL]     check(copy, 2005, 6, 9, 10, 20, 31, 0); [EOL]     copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959); [EOL]     check(copy, 2005, 6, 9, 23, 59, 59, 999); [EOL]     copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960); [EOL]     check(copy, 2005, 6, 10, 0, 0, 0, 0); [EOL]     copy = test.millisOfSecond().addToCopy(-9); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 31); [EOL]     copy = test.millisOfSecond().addToCopy(-40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 0); [EOL]     copy = test.millisOfSecond().addToCopy(-41); [EOL]     check(copy, 2005, 6, 9, 10, 20, 29, 999); [EOL]     copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40)); [EOL]     check(copy, 2005, 6, 9, 0, 0, 0, 0); [EOL]     copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41)); [EOL]     check(copy, 2005, 6, 8, 23, 59, 59, 999); [EOL] } <line_num>: 982,1014
public void testPropertyAddWrapFieldToCopyMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 993); [EOL] } <line_num>: 1016,1027
public void testPropertySetMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().setCopy(12); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 12); [EOL]     try { [EOL]         test.millisOfSecond().setCopy(1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.millisOfSecond().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1029,1043
public void testPropertySetTextMilli() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime copy = test.millisOfSecond().setCopy("12"); [EOL]     check(test, 2005, 6, 9, 10, 20, 30, 40); [EOL]     check(copy, 2005, 6, 9, 10, 20, 30, 12); [EOL] } <line_num>: 1045,1050
public void testPropertyCompareToMilli() { [EOL]     LocalDateTime test1 = new LocalDateTime(TEST_TIME1); [EOL]     LocalDateTime test2 = new LocalDateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.millisOfSecond().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.millisOfSecond().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1052,1072
private void check(LocalDateTime test, int year, int month, int day, int hour, int min, int sec, int mil) { [EOL]     assertEquals(year, test.getYear()); [EOL]     assertEquals(month, test.getMonthOfYear()); [EOL]     assertEquals(day, test.getDayOfMonth()); [EOL]     assertEquals(hour, test.getHourOfDay()); [EOL]     assertEquals(min, test.getMinuteOfHour()); [EOL]     assertEquals(sec, test.getSecondOfMinute()); [EOL]     assertEquals(mil, test.getMillisOfSecond()); [EOL] } <line_num>: 1075,1083
