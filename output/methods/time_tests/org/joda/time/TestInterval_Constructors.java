public TestInterval_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 80,82
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 72,74
public static TestSuite suite() { [EOL]     return new TestSuite(TestInterval_Constructors.class); [EOL] } <line_num>: 76,78
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(PARIS); [EOL]     TimeZone.setDefault(PARIS.toTimeZone()); [EOL]     Locale.setDefault(Locale.FRANCE); [EOL] } <line_num>: 84,92
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 94,102
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new Interval(start, end), Interval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new Interval(start, end), Interval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new Interval(start, end), Interval.parse("P1DT2H/2010-07-01T14:30")); [EOL] } <line_num>: 105,111
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 114,121
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 123,129
public void testConstructor_long_long3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         new Interval(dt1.getMillis(), dt2.getMillis()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 131,138
public void testConstructor_long_long_Zone() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), LONDON); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), test.getChronology()); [EOL] } <line_num>: 141,148
public void testConstructor_long_long_nullZone() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (DateTimeZone) null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 150,157
public void testConstructor_long_long_Chronology() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 160,167
public void testConstructor_long_long_nullChronology() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (Chronology) null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 169,176
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 179,185
public void testConstructor_RI_RI2() throws Throwable { [EOL]     Instant dt1 = new Instant(new DateTime(2004, 6, 9, 0, 0, 0, 0)); [EOL]     Instant dt2 = new Instant(new DateTime(2005, 7, 10, 1, 1, 1, 1)); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 187,193
public void testConstructor_RI_RI3() throws Throwable { [EOL]     Interval test = new Interval((ReadableInstant) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 195,199
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2000, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1, (ReadableInstant) null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 201,206
public void testConstructor_RI_RI5() throws Throwable { [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval((ReadableInstant) null, dt2); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 208,213
public void testConstructor_RI_RI6() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval test = new Interval(dt1, dt1); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 215,220
public void testConstructor_RI_RI7() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         new Interval(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 222,229
public void testConstructor_RI_RI_chronoStart() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 231,238
public void testConstructor_RI_RI_chronoEnd() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance()); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 240,247
public void testConstructor_RI_RI_zones() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, LONDON); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, PARIS); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), test.getChronology()); [EOL] } <line_num>: 249,256
public void testConstructor_RI_RI_instant() throws Throwable { [EOL]     Instant dt1 = new Instant(12345678L); [EOL]     Instant dt2 = new Instant(22345678L); [EOL]     Interval test = new Interval(dt1, dt2); [EOL]     assertEquals(12345678L, test.getStartMillis()); [EOL]     assertEquals(22345678L, test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL] } <line_num>: 258,265
public void testConstructor_RI_RP1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, 6); [EOL]     result = ISOChronology.getInstance().hours().add(result, 1); [EOL]     Interval test = new Interval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 268,278
public void testConstructor_RI_RP2() throws Throwable { [EOL]     Instant dt = new Instant(new DateTime(TEST_TIME_NOW)); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     Interval test = new Interval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 280,291
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = CopticChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = CopticChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = CopticChronology.getInstanceUTC().hours().add(result, 1); [EOL]     Interval test = new Interval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 293,304
public void testConstructor_RI_RP4() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().hours().add(result, 1); [EOL]     result = ISOChronology.getInstance().millis().add(result, 23); [EOL]     Interval test = new Interval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 306,316
public void testConstructor_RI_RP5() throws Throwable { [EOL]     Interval test = new Interval((ReadableInstant) null, (ReadablePeriod) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 318,322
public void testConstructor_RI_RP6() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval(dt, (ReadablePeriod) null); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 324,329
public void testConstructor_RI_RP7() throws Throwable { [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Interval test = new Interval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 331,340
public void testConstructor_RI_RP8() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1); [EOL]     try { [EOL]         new Interval(dt, dur); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 342,349
public void testConstructor_RP_RI1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, -6); [EOL]     result = ISOChronology.getInstance().hours().add(result, -1); [EOL]     Interval test = new Interval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 352,362
public void testConstructor_RP_RI2() throws Throwable { [EOL]     Instant dt = new Instant(new DateTime(TEST_TIME_NOW)); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, -6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, -3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, -1); [EOL]     Interval test = new Interval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 364,375
public void testConstructor_RP_RI3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = CopticChronology.getInstanceUTC().months().add(result, -6); [EOL]     result = CopticChronology.getInstanceUTC().days().add(result, -3); [EOL]     result = CopticChronology.getInstanceUTC().hours().add(result, -1); [EOL]     Interval test = new Interval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 377,388
public void testConstructor_RP_RI4() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().hours().add(result, -1); [EOL]     result = ISOChronology.getInstance().millis().add(result, -23); [EOL]     Interval test = new Interval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 390,400
public void testConstructor_RP_RI5() throws Throwable { [EOL]     Interval test = new Interval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 402,406
public void testConstructor_RP_RI6() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadablePeriod) null, dt); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 408,413
public void testConstructor_RP_RI7() throws Throwable { [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, -6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, -1); [EOL]     Interval test = new Interval(dur, (ReadableInstant) null); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 415,424
public void testConstructor_RP_RI8() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1); [EOL]     try { [EOL]         new Interval(dur, dt); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 426,433
public void testConstructor_RI_RD1() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, 6); [EOL]     result = ISOChronology.getInstance().hours().add(result, 1); [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     Interval test = new Interval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 436,447
public void testConstructor_RI_RD2() throws Throwable { [EOL]     Interval test = new Interval((ReadableInstant) null, (ReadableDuration) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 449,453
public void testConstructor_RI_RD3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval(dt, (ReadableDuration) null); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 455,460
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 462,472
public void testConstructor_RI_RD5() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(-1); [EOL]     try { [EOL]         new Interval(dt, dur); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 474,481
public void testConstructor_RD_RI1() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, -6); [EOL]     result = ISOChronology.getInstance().hours().add(result, -1); [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(TEST_TIME_NOW - result); [EOL]     Interval test = new Interval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 484,495
public void testConstructor_RD_RI2() throws Throwable { [EOL]     Interval test = new Interval((ReadableDuration) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 497,501
public void testConstructor_RD_RI3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Interval test = new Interval((ReadableDuration) null, dt); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 503,508
public void testConstructor_RD_RI4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, -6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, -1); [EOL]     Duration dur = new Duration(TEST_TIME_NOW - result); [EOL]     Interval test = new Interval(dur, (ReadableInstant) null); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 510,520
public void testConstructor_RD_RI5() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(-1); [EOL]     try { [EOL]         new Interval(dur, dt); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 522,529
public void testConstructor_Object1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval test = new Interval(dt1.toString() + '/' + dt2.toString()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 532,538
public void testConstructor_Object2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Interval test = new Interval(base); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 540,548
public void testConstructor_Object3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval base = new MutableInterval(dt1, dt2); [EOL]     Interval test = new Interval(base); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 550,558
public void testConstructor_Object4() throws Throwable { [EOL]     MockInterval base = new MockInterval(); [EOL]     Interval test = new Interval(base); [EOL]     assertEquals(base.getStartMillis(), test.getStartMillis()); [EOL]     assertEquals(base.getEndMillis(), test.getEndMillis()); [EOL] } <line_num>: 560,565
public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]     return false; [EOL] } <line_num>: 570,572
public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]     interval.setChronology(chrono); [EOL]     interval.setInterval(1234L, 5678L); [EOL] } <line_num>: 573,576
public Class<?> getSupportedType() { [EOL]     return String.class; [EOL] } <line_num>: 577,579
public void testConstructor_Object5() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(""); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]         Interval test = new Interval(dt1.toString() + '/' + dt2.toString()); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] } <line_num>: 567,591
public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]     return false; [EOL] } <line_num>: 596,598
public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]     interval.setChronology(chrono); [EOL]     interval.setInterval(1234L, 5678L); [EOL] } <line_num>: 599,602
public Class<?> getSupportedType() { [EOL]     return ReadableInterval.class; [EOL] } <line_num>: 603,605
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new Interval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         Interval test = new Interval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] } <line_num>: 593,616
public Chronology getChronology() { [EOL]     return ISOChronology.getInstance(); [EOL] } <line_num>: 619,621
public long getStartMillis() { [EOL]     return 1234L; [EOL] } <line_num>: 622,624
public DateTime getStart() { [EOL]     return new DateTime(1234L); [EOL] } <line_num>: 625,627
public long getEndMillis() { [EOL]     return 5678L; [EOL] } <line_num>: 628,630
public DateTime getEnd() { [EOL]     return new DateTime(5678L); [EOL] } <line_num>: 631,633
public long toDurationMillis() { [EOL]     return (5678L - 1234L); [EOL] } <line_num>: 634,636
public Duration toDuration() { [EOL]     return new Duration(5678L - 1234L); [EOL] } <line_num>: 637,639
public boolean contains(long millisInstant) { [EOL]     return false; [EOL] } <line_num>: 640,642
public boolean containsNow() { [EOL]     return false; [EOL] } <line_num>: 643,645
public boolean contains(ReadableInstant instant) { [EOL]     return false; [EOL] } <line_num>: 646,648
public boolean contains(ReadableInterval interval) { [EOL]     return false; [EOL] } <line_num>: 649,651
public boolean overlaps(ReadableInterval interval) { [EOL]     return false; [EOL] } <line_num>: 652,654
public boolean isBefore(ReadableInstant instant) { [EOL]     return false; [EOL] } <line_num>: 655,657
public boolean isBefore(ReadableInterval interval) { [EOL]     return false; [EOL] } <line_num>: 658,660
public boolean isAfter(ReadableInstant instant) { [EOL]     return false; [EOL] } <line_num>: 661,663
public boolean isAfter(ReadableInterval interval) { [EOL]     return false; [EOL] } <line_num>: 664,666
public Interval toInterval() { [EOL]     return null; [EOL] } <line_num>: 667,669
public MutableInterval toMutableInterval() { [EOL]     return null; [EOL] } <line_num>: 670,672
public Period toPeriod() { [EOL]     return null; [EOL] } <line_num>: 673,675
public Period toPeriod(PeriodType type) { [EOL]     return null; [EOL] } <line_num>: 676,678
public void testConstructor_Object_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Interval test = new Interval(base, BuddhistChronology.getInstance()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 682,691
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Interval test = new Interval(base, null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 693,702
