public TestTimeOfDay_Properties(String name) { [EOL]     super(name); [EOL] } <line_num>: 62,64
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 54,56
public static TestSuite suite() { [EOL]     return new TestSuite(TestTimeOfDay_Properties.class); [EOL] } <line_num>: 58,60
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 66,70
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 72,76
public void testPropertyGetHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getReadablePartial()); [EOL]     assertSame(test, test.hourOfDay().getTimeOfDay()); [EOL]     assertEquals(10, test.hourOfDay().get()); [EOL]     assertEquals("10", test.hourOfDay().getAsString()); [EOL]     assertEquals("10", test.hourOfDay().getAsText()); [EOL]     assertEquals("10", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("10", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("10", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 79,96
public void testPropertyGetMaxMinValuesHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(0, test.hourOfDay().getMinimumValue()); [EOL]     assertEquals(0, test.hourOfDay().getMinimumValueOverall()); [EOL]     assertEquals(23, test.hourOfDay().getMaximumValue()); [EOL]     assertEquals(23, test.hourOfDay().getMaximumValueOverall()); [EOL] } <line_num>: 98,104
public void testPropertyAddHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(14); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     copy = test.hourOfDay().addToCopy(-11); [EOL]     check(copy, 23, 20, 30, 40); [EOL] } <line_num>: 106,126
public void testPropertyAddNoWrapHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addNoWrapToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addNoWrapToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     try { [EOL]         test.hourOfDay().addNoWrapToCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addNoWrapToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     try { [EOL]         test.hourOfDay().addNoWrapToCopy(-11); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] } <line_num>: 128,154
public void testPropertyAddWrapFieldHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(18); [EOL]     check(copy, 4, 20, 30, 40); [EOL]     copy = test.hourOfDay().addWrapFieldToCopy(-15); [EOL]     check(copy, 19, 20, 30, 40); [EOL] } <line_num>: 156,170
public void testPropertySetHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL]     try { [EOL]         test.hourOfDay().setCopy(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.hourOfDay().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 172,186
public void testPropertySetTextHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] } <line_num>: 188,193
public void testPropertyWithMaximumValueHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().withMaximumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 23, 20, 30, 40); [EOL] } <line_num>: 195,200
public void testPropertyWithMinimumValueHour() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.hourOfDay().withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] } <line_num>: 202,207
public void testPropertyCompareToHour() { [EOL]     TimeOfDay test1 = new TimeOfDay(TEST_TIME1); [EOL]     TimeOfDay test2 = new TimeOfDay(TEST_TIME2); [EOL]     assertEquals(true, test1.hourOfDay().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.hourOfDay().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.hourOfDay().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.hourOfDay().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.hourOfDay().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 209,229
public void testPropertyGetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getReadablePartial()); [EOL]     assertSame(test, test.minuteOfHour().getTimeOfDay()); [EOL]     assertEquals(20, test.minuteOfHour().get()); [EOL]     assertEquals("20", test.minuteOfHour().getAsString()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] } <line_num>: 232,249
public void testPropertyGetMaxMinValuesMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(0, test.minuteOfHour().getMinimumValue()); [EOL]     assertEquals(0, test.minuteOfHour().getMinimumValueOverall()); [EOL]     assertEquals(59, test.minuteOfHour().getMaximumValue()); [EOL]     assertEquals(59, test.minuteOfHour().getMaximumValueOverall()); [EOL] } <line_num>: 251,257
public void testPropertyAddMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(39); [EOL]     check(copy, 10, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(40); [EOL]     check(copy, 11, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(1 * 60 + 45); [EOL]     check(copy, 12, 5, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(13 * 60 + 39); [EOL]     check(copy, 23, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(13 * 60 + 40); [EOL]     check(copy, 0, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-9); [EOL]     check(copy, 10, 11, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-19); [EOL]     check(copy, 10, 1, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-20); [EOL]     check(copy, 10, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-21); [EOL]     check(copy, 9, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20)); [EOL]     check(copy, 0, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addToCopy(-(10 * 60 + 21)); [EOL]     check(copy, 23, 59, 30, 40); [EOL] } <line_num>: 259,297
public void testPropertyAddNoWrapMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(39); [EOL]     check(copy, 10, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(40); [EOL]     check(copy, 11, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(1 * 60 + 45); [EOL]     check(copy, 12, 5, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(13 * 60 + 39); [EOL]     check(copy, 23, 59, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().addNoWrapToCopy(13 * 60 + 40); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 11, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-19); [EOL]     check(copy, 10, 1, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-20); [EOL]     check(copy, 10, 0, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-21); [EOL]     check(copy, 9, 59, 30, 40); [EOL]     copy = test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 20)); [EOL]     check(copy, 0, 0, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 21)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] } <line_num>: 299,343
public void testPropertyAddWrapFieldMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(49); [EOL]     check(copy, 10, 9, 30, 40); [EOL]     copy = test.minuteOfHour().addWrapFieldToCopy(-47); [EOL]     check(copy, 10, 33, 30, 40); [EOL] } <line_num>: 345,356
public void testPropertySetMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.minuteOfHour().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.minuteOfHour().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 358,372
public void testPropertySetTextMinute() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.minuteOfHour().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL] } <line_num>: 374,379
public void testPropertyCompareToMinute() { [EOL]     TimeOfDay test1 = new TimeOfDay(TEST_TIME1); [EOL]     TimeOfDay test2 = new TimeOfDay(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.minuteOfHour().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 381,401
public void testPropertyGetSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField()); [EOL]     assertEquals("secondOfMinute", test.secondOfMinute().getName()); [EOL]     assertEquals("Property[secondOfMinute]", test.secondOfMinute().toString()); [EOL]     assertSame(test, test.secondOfMinute().getReadablePartial()); [EOL]     assertSame(test, test.secondOfMinute().getTimeOfDay()); [EOL]     assertEquals(30, test.secondOfMinute().get()); [EOL]     assertEquals("30", test.secondOfMinute().getAsString()); [EOL]     assertEquals("30", test.secondOfMinute().getAsText()); [EOL]     assertEquals("30", test.secondOfMinute().getAsText(Locale.FRENCH)); [EOL]     assertEquals("30", test.secondOfMinute().getAsShortText()); [EOL]     assertEquals("30", test.secondOfMinute().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField()); [EOL]     assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField()); [EOL]     assertEquals(2, test.secondOfMinute().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null)); [EOL] } <line_num>: 404,421
public void testPropertyGetMaxMinValuesSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(0, test.secondOfMinute().getMinimumValue()); [EOL]     assertEquals(0, test.secondOfMinute().getMinimumValueOverall()); [EOL]     assertEquals(59, test.secondOfMinute().getMaximumValue()); [EOL]     assertEquals(59, test.secondOfMinute().getMaximumValueOverall()); [EOL] } <line_num>: 423,429
public void testPropertyAddSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.secondOfMinute().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 39, 40); [EOL]     copy = test.secondOfMinute().addToCopy(29); [EOL]     check(copy, 10, 20, 59, 40); [EOL]     copy = test.secondOfMinute().addToCopy(30); [EOL]     check(copy, 10, 21, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(39 * 60 + 29); [EOL]     check(copy, 10, 59, 59, 40); [EOL]     copy = test.secondOfMinute().addToCopy(39 * 60 + 30); [EOL]     check(copy, 11, 0, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30); [EOL]     check(copy, 0, 0, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-9); [EOL]     check(copy, 10, 20, 21, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-30); [EOL]     check(copy, 10, 20, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-31); [EOL]     check(copy, 10, 19, 59, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30)); [EOL]     check(copy, 0, 0, 0, 40); [EOL]     copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31)); [EOL]     check(copy, 23, 59, 59, 40); [EOL] } <line_num>: 431,466
public void testPropertyAddNoWrapSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.secondOfMinute().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 39, 40); [EOL]     copy = test.secondOfMinute().addNoWrapToCopy(29); [EOL]     check(copy, 10, 20, 59, 40); [EOL]     copy = test.secondOfMinute().addNoWrapToCopy(30); [EOL]     check(copy, 10, 21, 0, 40); [EOL]     copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 29); [EOL]     check(copy, 10, 59, 59, 40); [EOL]     copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 30); [EOL]     check(copy, 11, 0, 0, 40); [EOL]     try { [EOL]         test.secondOfMinute().addNoWrapToCopy(13 * 60 * 60 + 39 * 60 + 30); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.secondOfMinute().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 20, 21, 40); [EOL]     copy = test.secondOfMinute().addNoWrapToCopy(-30); [EOL]     check(copy, 10, 20, 0, 40); [EOL]     copy = test.secondOfMinute().addNoWrapToCopy(-31); [EOL]     check(copy, 10, 19, 59, 40); [EOL]     copy = test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 30)); [EOL]     check(copy, 0, 0, 0, 40); [EOL]     try { [EOL]         test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 31)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] } <line_num>: 468,509
public void testPropertyAddWrapFieldSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.secondOfMinute().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 39, 40); [EOL]     copy = test.secondOfMinute().addWrapFieldToCopy(49); [EOL]     check(copy, 10, 20, 19, 40); [EOL]     copy = test.secondOfMinute().addWrapFieldToCopy(-47); [EOL]     check(copy, 10, 20, 43, 40); [EOL] } <line_num>: 511,522
public void testPropertySetSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.secondOfMinute().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL]     try { [EOL]         test.secondOfMinute().setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.secondOfMinute().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 524,538
public void testPropertySetTextSecond() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.secondOfMinute().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 12, 40); [EOL] } <line_num>: 540,545
public void testPropertyCompareToSecond() { [EOL]     TimeOfDay test1 = new TimeOfDay(TEST_TIME1); [EOL]     TimeOfDay test2 = new TimeOfDay(TEST_TIME2); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.secondOfMinute().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.secondOfMinute().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 547,567
public void testPropertyGetMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField()); [EOL]     assertEquals("millisOfSecond", test.millisOfSecond().getName()); [EOL]     assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString()); [EOL]     assertSame(test, test.millisOfSecond().getReadablePartial()); [EOL]     assertSame(test, test.millisOfSecond().getTimeOfDay()); [EOL]     assertEquals(40, test.millisOfSecond().get()); [EOL]     assertEquals("40", test.millisOfSecond().getAsString()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsText(Locale.FRENCH)); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText()); [EOL]     assertEquals("40", test.millisOfSecond().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField()); [EOL]     assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField()); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null)); [EOL] } <line_num>: 570,587
public void testPropertyGetMaxMinValuesMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     assertEquals(0, test.millisOfSecond().getMinimumValue()); [EOL]     assertEquals(0, test.millisOfSecond().getMinimumValueOverall()); [EOL]     assertEquals(999, test.millisOfSecond().getMaximumValue()); [EOL]     assertEquals(999, test.millisOfSecond().getMaximumValueOverall()); [EOL] } <line_num>: 589,595
public void testPropertyAddMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addToCopy(959); [EOL]     check(copy, 10, 20, 30, 999); [EOL]     copy = test.millisOfSecond().addToCopy(960); [EOL]     check(copy, 10, 20, 31, 0); [EOL]     copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959); [EOL]     check(copy, 23, 59, 59, 999); [EOL]     copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960); [EOL]     check(copy, 0, 0, 0, 0); [EOL]     copy = test.millisOfSecond().addToCopy(-9); [EOL]     check(copy, 10, 20, 30, 31); [EOL]     copy = test.millisOfSecond().addToCopy(-40); [EOL]     check(copy, 10, 20, 30, 0); [EOL]     copy = test.millisOfSecond().addToCopy(-41); [EOL]     check(copy, 10, 20, 29, 999); [EOL]     copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40)); [EOL]     check(copy, 0, 0, 0, 0); [EOL]     copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41)); [EOL]     check(copy, 23, 59, 59, 999); [EOL] } <line_num>: 597,629
public void testPropertyAddNoWrapMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().addNoWrapToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(959); [EOL]     check(copy, 10, 20, 30, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(960); [EOL]     check(copy, 10, 20, 31, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959); [EOL]     check(copy, 23, 59, 59, 999); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-9); [EOL]     check(copy, 10, 20, 30, 31); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-40); [EOL]     check(copy, 10, 20, 30, 0); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-41); [EOL]     check(copy, 10, 20, 29, 999); [EOL]     copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40)); [EOL]     check(copy, 0, 0, 0, 0); [EOL]     try { [EOL]         test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] } <line_num>: 631,669
public void testPropertyAddWrapFieldMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 49); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(995); [EOL]     check(copy, 10, 20, 30, 35); [EOL]     copy = test.millisOfSecond().addWrapFieldToCopy(-47); [EOL]     check(copy, 10, 20, 30, 993); [EOL] } <line_num>: 671,682
public void testPropertySetMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 12); [EOL]     try { [EOL]         test.millisOfSecond().setCopy(1000); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.millisOfSecond().setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 684,698
public void testPropertySetTextMilli() { [EOL]     TimeOfDay test = new TimeOfDay(10, 20, 30, 40); [EOL]     TimeOfDay copy = test.millisOfSecond().setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 20, 30, 12); [EOL] } <line_num>: 700,705
public void testPropertyCompareToMilli() { [EOL]     TimeOfDay test1 = new TimeOfDay(TEST_TIME1); [EOL]     TimeOfDay test2 = new TimeOfDay(TEST_TIME2); [EOL]     assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.millisOfSecond().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.millisOfSecond().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 707,727
private void check(TimeOfDay test, int hour, int min, int sec, int milli) { [EOL]     assertEquals(hour, test.getHourOfDay()); [EOL]     assertEquals(min, test.getMinuteOfHour()); [EOL]     assertEquals(sec, test.getSecondOfMinute()); [EOL]     assertEquals(milli, test.getMillisOfSecond()); [EOL] } <line_num>: 730,735
