public TestPeriod_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 63,65
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 55,57
public static TestSuite suite() { [EOL]     return new TestSuite(TestPeriod_Constructors.class); [EOL] } <line_num>: 59,61
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 67,75
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 77,85
public void testConstants() throws Throwable { [EOL]     Period test = Period.ZERO; [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 88,99
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 890), Period.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] } <line_num>: 102,104
public void testConstructor1() throws Throwable { [EOL]     Period test = new Period(); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 107,118
public void testConstructor_long1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 121,136
public void testConstructor_long2() throws Throwable { [EOL]     long length = 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 138,153
public void testConstructor_long3() throws Throwable { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Period test = new Period(length); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 155,172
public void testConstructor_long_fixedZone() throws Throwable { [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2)); [EOL]         long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]         Period test = new Period(length); [EOL]         assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]         assertEquals(0, test.getYears()); [EOL]         assertEquals(0, test.getMonths()); [EOL]         assertEquals(0, test.getWeeks()); [EOL]         assertEquals(0, test.getDays()); [EOL]         assertEquals((450 * 24) + 5, test.getHours()); [EOL]         assertEquals(6, test.getMinutes()); [EOL]         assertEquals(7, test.getSeconds()); [EOL]         assertEquals(8, test.getMillis()); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] } <line_num>: 174,197
public void testConstructor_long_PeriodType1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 200,215
public void testConstructor_long_PeriodType2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, PeriodType.millis()); [EOL]     assertEquals(PeriodType.millis(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(length, test.getMillis()); [EOL] } <line_num>: 217,232
public void testConstructor_long_PeriodType3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 234,249
public void testConstructor_long_PeriodType4() throws Throwable { [EOL]     long length = 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 251,266
public void testConstructor_long_Chronology1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, ISOChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 269,284
public void testConstructor_long_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 286,301
public void testConstructor_long_Chronology3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 303,318
public void testConstructor_long_PeriodType_Chronology1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance()); [EOL]     assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 321,336
public void testConstructor_long_PeriodType_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, PeriodType.standard(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 338,353
public void testConstructor_long_PeriodType_Chronology3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, PeriodType.standard(), (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 355,370
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Period test = new Period(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 372,387
public void testConstructor_4int1() throws Throwable { [EOL]     Period test = new Period(5, 6, 7, 8); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 393,404
public void testConstructor_8int1() throws Throwable { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 410,421
public void testConstructor_8int__PeriodType1() throws Throwable { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 427,438
public void testConstructor_8int__PeriodType2() throws Throwable { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 440,451
public void testConstructor_8int__PeriodType3() throws Throwable { [EOL]     try { [EOL]         new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.dayTime()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 453,458
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 461,474
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 476,489
public void testConstructor_long_long_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 492,505
public void testConstructor_long_long_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 507,520
public void testConstructor_long_long_PeriodType3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 522,535
public void testToPeriod_PeriodType3() { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10); [EOL]     DateTime dt2 = new DateTime(2005, 6, 9, 12, 14, 16, 18); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.yearWeekDayTime()); [EOL]     assertEquals(PeriodType.yearWeekDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 537,551
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 554,567
public void testConstructor_long_long_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 569,582
public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 585,598
public void testConstructor_long_long_PeriodType_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 600,613
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 616,629
public void testConstructor_RI_RI2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 631,644
public void testConstructor_RI_RI3() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 646,659
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] } <line_num>: 661,674
public void testConstructor_RI_RI5() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 676,689
public void testConstructor_RI_RI_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1, dt2, null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 692,705
public void testConstructor_RI_RI_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1, dt2, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 707,720
public void testConstructor_RI_RI_PeriodType3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1, dt2, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 722,735
public void testConstructor_RI_RI_PeriodType4() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     Period test = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 737,750
public void testConstructor_RI_RI_PeriodType5() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = null; [EOL]     Period test = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 752,765
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP1() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 7, 10); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 768,782
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 784,798
public void testConstructor_RP_RP2Local() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2004, 6, 9); [EOL]     LocalDate dt2 = new LocalDate(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 800,813
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP3() throws Throwable { [EOL]     YearMonthDay dt1 = null; [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 7, 17); [EOL]     try { [EOL]         new Period(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 815,823
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP4() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     YearMonthDay dt2 = null; [EOL]     try { [EOL]         new Period(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 825,833
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP5() throws Throwable { [EOL]     YearMonthDay dt1 = null; [EOL]     YearMonthDay dt2 = null; [EOL]     try { [EOL]         new Period(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 835,843
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP6() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         new Period(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 845,853
public void testConstructor_RP_RP7() throws Throwable { [EOL]     Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12); [EOL]     Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14); [EOL]     try { [EOL]         new Period(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 855,862
public void testConstructor_RP_RP8() throws Throwable { [EOL]     Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12); [EOL]     Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14); [EOL]     try { [EOL]         new Period(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 864,871
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType1() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 7, 10); [EOL]     Period test = new Period(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 874,888
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType2() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2, PeriodType.yearMonthDay()); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 890,904
public void testConstructor_RP_RP_PeriodType2Local() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2004, 6, 9); [EOL]     LocalDate dt2 = new LocalDate(2005, 5, 17); [EOL]     Period test = new Period(dt1, dt2, PeriodType.yearMonthDay()); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(11, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 906,919
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType3() throws Throwable { [EOL]     YearMonthDay dt1 = null; [EOL]     YearMonthDay dt2 = new YearMonthDay(2005, 7, 17); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 921,929
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType4() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     YearMonthDay dt2 = null; [EOL]     try { [EOL]         new Period(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 931,939
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType5() throws Throwable { [EOL]     YearMonthDay dt1 = null; [EOL]     YearMonthDay dt2 = null; [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 941,949
@SuppressWarnings("deprecation") [EOL] public void testConstructor_RP_RP_PeriodType6() throws Throwable { [EOL]     YearMonthDay dt1 = new YearMonthDay(2005, 7, 17); [EOL]     TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 951,959
public void testConstructor_RP_RP_PeriodType7() throws Throwable { [EOL]     Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12); [EOL]     Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 961,968
public void testConstructor_RP_RP_PeriodType8() throws Throwable { [EOL]     Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12); [EOL]     Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14); [EOL]     try { [EOL]         new Period(dt1, dt2, PeriodType.standard()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 970,977
public void testConstructor_RI_RD1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     Period test = new Period(dt1, dur); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 980,994
public void testConstructor_RI_RD2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dt1, dur); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 996,1009
public void testConstructor_RI_RD_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     Period test = new Period(dt1, dur, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 1012,1026
public void testConstructor_RI_RD_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dt1, dur, (PeriodType) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1028,1041
public void testConstructor_RD_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     Period test = new Period(dur, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 1044,1058
public void testConstructor_RD_RI2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dur, dt1); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1060,1073
public void testConstructor_RD_RI_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     Period test = new Period(dur, dt2, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 1076,1090
public void testConstructor_RD_RI_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     Period test = new Period(dur, dt1, (PeriodType) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1092,1105
public void testConstructor_Object1() throws Throwable { [EOL]     Period test = new Period("P1Y2M3D"); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1111,1122
public void testConstructor_Object2() throws Throwable { [EOL]     Period test = new Period((Object) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1124,1135
public void testConstructor_Object3() throws Throwable { [EOL]     Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime())); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] } <line_num>: 1137,1148
public void testConstructor_Object4() throws Throwable { [EOL]     Period base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.standard()); [EOL]     Period test = new Period(base); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 1150,1162
public void testConstructor_Object_PeriodType1() throws Throwable { [EOL]     Period test = new Period("P1Y2M3D", PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1168,1179
public void testConstructor_Object_PeriodType2() throws Throwable { [EOL]     Period test = new Period((Object) null, PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1181,1192
public void testConstructor_Object_PeriodType3() throws Throwable { [EOL]     Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] } <line_num>: 1194,1205
public void testConstructor_Object_PeriodType4() throws Throwable { [EOL]     Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] } <line_num>: 1207,1218
public void testFactoryYears() throws Throwable { [EOL]     Period test = Period.years(6); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(6, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1221,1232
public void testFactoryMonths() throws Throwable { [EOL]     Period test = Period.months(6); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(6, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1234,1245
public void testFactoryWeeks() throws Throwable { [EOL]     Period test = Period.weeks(6); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(6, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1247,1258
public void testFactoryDays() throws Throwable { [EOL]     Period test = Period.days(6); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(6, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1260,1271
public void testFactoryHours() throws Throwable { [EOL]     Period test = Period.hours(6); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(6, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1273,1284
public void testFactoryMinutes() throws Throwable { [EOL]     Period test = Period.minutes(6); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1286,1297
public void testFactorySeconds() throws Throwable { [EOL]     Period test = Period.seconds(6); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(6, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1299,1310
public void testFactoryMillis() throws Throwable { [EOL]     Period test = Period.millis(6); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(6, test.getMillis()); [EOL] } <line_num>: 1312,1323
public void testConstructor_trickyDifferences_RI_RI_toFeb_standardYear() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2011, 1, 1, 0, 0); [EOL]     DateTime dt2 = new DateTime(2011, 2, 28, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 1, 3, 6, 0, 0, 0, 0), test); [EOL] } <line_num>: 1326,1332
public void testConstructor_trickyDifferences_RI_RI_toFeb_leapYear() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2012, 1, 1, 0, 0); [EOL]     DateTime dt2 = new DateTime(2012, 2, 29, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 1, 4, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1334,1340
public void testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 12, 28, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 2, 28, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1342,1348
public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 12, 29, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 2, 28, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1350,1356
public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 12, 30, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 2, 28, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1358,1364
public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 12, 31, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 2, 28, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1366,1372
public void testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2013, 1, 31, 0, 0); [EOL]     DateTime dt2 = new DateTime(2013, 3, 30, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 1, 4, 2, 0, 0, 0, 0), test); [EOL] } <line_num>: 1374,1380
public void testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2013, 1, 31, 0, 0); [EOL]     DateTime dt2 = new DateTime(2013, 3, 31, 0, 0); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1382,1388
public void testConstructor_trickyDifferences_LD_LD_toFeb_standardYear() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2011, 1, 1); [EOL]     LocalDate dt2 = new LocalDate(2011, 2, 28); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 1, 3, 6, 0, 0, 0, 0), test); [EOL] } <line_num>: 1391,1397
public void testConstructor_trickyDifferences_LD_LD_toFeb_leapYear() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2012, 1, 1); [EOL]     LocalDate dt2 = new LocalDate(2012, 2, 29); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 1, 4, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1399,1405
public void testConstructor_trickyDifferences_LD_LD_toFeb_exactMonths() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2004, 12, 28); [EOL]     LocalDate dt2 = new LocalDate(2005, 2, 28); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1407,1413
public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth1() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2004, 12, 29); [EOL]     LocalDate dt2 = new LocalDate(2005, 2, 28); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1415,1421
public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth2() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2004, 12, 30); [EOL]     LocalDate dt2 = new LocalDate(2005, 2, 28); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1423,1429
public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth3() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2004, 12, 31); [EOL]     LocalDate dt2 = new LocalDate(2005, 2, 28); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1431,1437
public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth1() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2013, 1, 31); [EOL]     LocalDate dt2 = new LocalDate(2013, 3, 30); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 1, 4, 2, 0, 0, 0, 0), test); [EOL] } <line_num>: 1439,1445
public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth2() throws Throwable { [EOL]     LocalDate dt1 = new LocalDate(2013, 1, 31); [EOL]     LocalDate dt2 = new LocalDate(2013, 3, 31); [EOL]     Period test = new Period(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test); [EOL] } <line_num>: 1447,1453
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference1() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     Partial end = new Partial(types, new int[] { 2004, 6, 7 }); [EOL]     Period test = Period.fieldDifference(start, end); [EOL]     assertEquals(PeriodType.yearMonthDay(), test.getPeriodType()); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(-2, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 1456,1475
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference2() throws Throwable { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 4, 9); [EOL]     try { [EOL]         Period.fieldDifference(ymd, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Period.fieldDifference((ReadablePartial) null, ymd); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1477,1488
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference3() throws Throwable { [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     TimeOfDay endTime = new TimeOfDay(12, 30, 40, 0); [EOL]     try { [EOL]         Period.fieldDifference(start, endTime); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1490,1498
@SuppressWarnings("deprecation") [EOL] public void testFactoryFieldDifference4() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfWeek() }; [EOL]     YearMonthDay start = new YearMonthDay(2005, 4, 9); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1500,1513
public void testFactoryFieldDifference5() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfWeek() }; [EOL]     Partial start = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     Partial end = new Partial(types, new int[] { 1, 2, 3 }); [EOL]     try { [EOL]         Period.fieldDifference(start, end); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1515,1527
