public TestSeconds(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 36,38
public static TestSuite suite() { [EOL]     return new TestSuite(TestSeconds.class); [EOL] } <line_num>: 40,42
protected void setUp() throws Exception { [EOL] } <line_num>: 48,49
protected void tearDown() throws Exception { [EOL] } <line_num>: 51,52
public void testConstants() { [EOL]     assertEquals(0, Seconds.ZERO.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.getSeconds()); [EOL]     assertEquals(2, Seconds.TWO.getSeconds()); [EOL]     assertEquals(3, Seconds.THREE.getSeconds()); [EOL]     assertEquals(Integer.MAX_VALUE, Seconds.MAX_VALUE.getSeconds()); [EOL]     assertEquals(Integer.MIN_VALUE, Seconds.MIN_VALUE.getSeconds()); [EOL] } <line_num>: 55,62
public void testFactory_seconds_int() { [EOL]     assertSame(Seconds.ZERO, Seconds.seconds(0)); [EOL]     assertSame(Seconds.ONE, Seconds.seconds(1)); [EOL]     assertSame(Seconds.TWO, Seconds.seconds(2)); [EOL]     assertSame(Seconds.THREE, Seconds.seconds(3)); [EOL]     assertSame(Seconds.MAX_VALUE, Seconds.seconds(Integer.MAX_VALUE)); [EOL]     assertSame(Seconds.MIN_VALUE, Seconds.seconds(Integer.MIN_VALUE)); [EOL]     assertEquals(-1, Seconds.seconds(-1).getSeconds()); [EOL]     assertEquals(4, Seconds.seconds(4).getSeconds()); [EOL] } <line_num>: 65,74
public void testFactory_secondsBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] } <line_num>: 77,87
public void testFactory_secondsBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 0, 3); [EOL]     LocalTime end1 = new LocalTime(12, 0, 6); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(12, 0, 9); [EOL]     assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(start, start).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds()); [EOL]     assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds()); [EOL] } <line_num>: 89,100
public void testFactory_secondsIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS); [EOL]     assertEquals(0, Seconds.secondsIn((ReadableInterval) null).getSeconds()); [EOL]     assertEquals(3, Seconds.secondsIn(new Interval(start, end1)).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsIn(new Interval(start, start)).getSeconds()); [EOL]     assertEquals(0, Seconds.secondsIn(new Interval(end1, end1)).getSeconds()); [EOL]     assertEquals(6, Seconds.secondsIn(new Interval(start, end2)).getSeconds()); [EOL] } <line_num>: 102,112
public void testFactory_standardSecondsIn_RPeriod() { [EOL]     assertEquals(0, Seconds.standardSecondsIn((ReadablePeriod) null).getSeconds()); [EOL]     assertEquals(0, Seconds.standardSecondsIn(Period.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.standardSecondsIn(new Period(0, 0, 0, 0, 0, 0, 1, 0)).getSeconds()); [EOL]     assertEquals(123, Seconds.standardSecondsIn(Period.seconds(123)).getSeconds()); [EOL]     assertEquals(-987, Seconds.standardSecondsIn(Period.seconds(-987)).getSeconds()); [EOL]     assertEquals(2 * 24 * 60 * 60, Seconds.standardSecondsIn(Period.days(2)).getSeconds()); [EOL]     try { [EOL]         Seconds.standardSecondsIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 114,127
public void testFactory_parseSeconds_String() { [EOL]     assertEquals(0, Seconds.parseSeconds((String) null).getSeconds()); [EOL]     assertEquals(0, Seconds.parseSeconds("PT0S").getSeconds()); [EOL]     assertEquals(1, Seconds.parseSeconds("PT1S").getSeconds()); [EOL]     assertEquals(-3, Seconds.parseSeconds("PT-3S").getSeconds()); [EOL]     assertEquals(2, Seconds.parseSeconds("P0Y0M0DT2S").getSeconds()); [EOL]     assertEquals(2, Seconds.parseSeconds("PT0H2S").getSeconds()); [EOL]     try { [EOL]         Seconds.parseSeconds("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Seconds.parseSeconds("P1DT1S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 129,148
public void testGetMethods() { [EOL]     Seconds test = Seconds.seconds(20); [EOL]     assertEquals(20, test.getSeconds()); [EOL] } <line_num>: 151,154
public void testGetFieldType() { [EOL]     Seconds test = Seconds.seconds(20); [EOL]     assertEquals(DurationFieldType.seconds(), test.getFieldType()); [EOL] } <line_num>: 156,159
public void testGetPeriodType() { [EOL]     Seconds test = Seconds.seconds(20); [EOL]     assertEquals(PeriodType.seconds(), test.getPeriodType()); [EOL] } <line_num>: 161,164
public void testIsGreaterThan() { [EOL]     assertEquals(true, Seconds.THREE.isGreaterThan(Seconds.TWO)); [EOL]     assertEquals(false, Seconds.THREE.isGreaterThan(Seconds.THREE)); [EOL]     assertEquals(false, Seconds.TWO.isGreaterThan(Seconds.THREE)); [EOL]     assertEquals(true, Seconds.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Seconds.seconds(-1).isGreaterThan(null)); [EOL] } <line_num>: 167,173
public void testIsLessThan() { [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO)); [EOL]     assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE)); [EOL]     assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE)); [EOL]     assertEquals(false, Seconds.ONE.isLessThan(null)); [EOL]     assertEquals(true, Seconds.seconds(-1).isLessThan(null)); [EOL] } <line_num>: 175,181
public void testToString() { [EOL]     Seconds test = Seconds.seconds(20); [EOL]     assertEquals("PT20S", test.toString()); [EOL]     test = Seconds.seconds(-20); [EOL]     assertEquals("PT-20S", test.toString()); [EOL] } <line_num>: 184,190
public void testSerialization() throws Exception { [EOL]     Seconds test = Seconds.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Seconds result = (Seconds) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 193,208
public void testToStandardWeeks() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] } <line_num>: 211,215
public void testToStandardDays() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] } <line_num>: 217,221
public void testToStandardHours() { [EOL]     Seconds test = Seconds.seconds(60 * 60 * 2); [EOL]     Hours expected = Hours.hours(2); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL] } <line_num>: 223,227
public void testToStandardMinutes() { [EOL]     Seconds test = Seconds.seconds(60 * 2); [EOL]     Minutes expected = Minutes.minutes(2); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL] } <line_num>: 229,233
public void testToStandardDuration() { [EOL]     Seconds test = Seconds.seconds(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration()); [EOL] } <line_num>: 235,242
public void testPlus_int() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds result = test2.plus(3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(5, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus(0).getSeconds()); [EOL]     try { [EOL]         Seconds.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 245,259
public void testPlus_Seconds() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds test3 = Seconds.seconds(3); [EOL]     Seconds result = test2.plus(test3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(3, test3.getSeconds()); [EOL]     assertEquals(5, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus(Seconds.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.plus((Seconds) null).getSeconds()); [EOL]     try { [EOL]         Seconds.MAX_VALUE.plus(Seconds.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 261,278
public void testMinus_int() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds result = test2.minus(3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(-1, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus(0).getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 280,294
public void testMinus_Seconds() { [EOL]     Seconds test2 = Seconds.seconds(2); [EOL]     Seconds test3 = Seconds.seconds(3); [EOL]     Seconds result = test2.minus(test3); [EOL]     assertEquals(2, test2.getSeconds()); [EOL]     assertEquals(3, test3.getSeconds()); [EOL]     assertEquals(-1, result.getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus(Seconds.ZERO).getSeconds()); [EOL]     assertEquals(1, Seconds.ONE.minus((Seconds) null).getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.minus(Seconds.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 296,313
public void testMultipliedBy_int() { [EOL]     Seconds test = Seconds.seconds(2); [EOL]     assertEquals(6, test.multipliedBy(3).getSeconds()); [EOL]     assertEquals(2, test.getSeconds()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getSeconds()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Seconds halfMax = Seconds.seconds(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 315,329
public void testDividedBy_int() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(6, test.dividedBy(2).getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     assertEquals(4, test.dividedBy(3).getSeconds()); [EOL]     assertEquals(3, test.dividedBy(4).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(5).getSeconds()); [EOL]     assertEquals(2, test.dividedBy(6).getSeconds()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Seconds.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 331,347
public void testNegated() { [EOL]     Seconds test = Seconds.seconds(12); [EOL]     assertEquals(-12, test.negated().getSeconds()); [EOL]     assertEquals(12, test.getSeconds()); [EOL]     try { [EOL]         Seconds.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 349,360
public void testAddToLocalDate() { [EOL]     Seconds test = Seconds.seconds(26); [EOL]     LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0); [EOL]     LocalDateTime expected = new LocalDateTime(2006, 6, 1, 0, 0, 26, 0); [EOL]     assertEquals(expected, date.plus(test)); [EOL] } <line_num>: 363,368
