public TestDurationFieldType(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 36,38
public static TestSuite suite() { [EOL]     return new TestSuite(TestDurationFieldType.class); [EOL] } <line_num>: 40,42
protected void setUp() throws Exception { [EOL] } <line_num>: 48,49
protected void tearDown() throws Exception { [EOL] } <line_num>: 51,52
public void test_eras() throws Exception { [EOL]     assertEquals(DurationFieldType.eras(), DurationFieldType.eras()); [EOL]     assertEquals("eras", DurationFieldType.eras().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.eras()); [EOL] } <line_num>: 55,61
public void test_centuries() throws Exception { [EOL]     assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries()); [EOL]     assertEquals("centuries", DurationFieldType.centuries().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.centuries()); [EOL] } <line_num>: 63,69
public void test_years() throws Exception { [EOL]     assertEquals(DurationFieldType.years(), DurationFieldType.years()); [EOL]     assertEquals("years", DurationFieldType.years().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().years(), DurationFieldType.years().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().years().isSupported(), DurationFieldType.years().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.years()); [EOL] } <line_num>: 71,77
public void test_months() throws Exception { [EOL]     assertEquals(DurationFieldType.months(), DurationFieldType.months()); [EOL]     assertEquals("months", DurationFieldType.months().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().months(), DurationFieldType.months().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().months().isSupported(), DurationFieldType.months().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.months()); [EOL] } <line_num>: 79,85
public void test_weekyears() throws Exception { [EOL]     assertEquals(DurationFieldType.weekyears(), DurationFieldType.weekyears()); [EOL]     assertEquals("weekyears", DurationFieldType.weekyears().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weekyears(), DurationFieldType.weekyears().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weekyears()); [EOL] } <line_num>: 87,93
public void test_weeks() throws Exception { [EOL]     assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks()); [EOL]     assertEquals("weeks", DurationFieldType.weeks().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.weeks()); [EOL] } <line_num>: 95,101
public void test_days() throws Exception { [EOL]     assertEquals(DurationFieldType.days(), DurationFieldType.days()); [EOL]     assertEquals("days", DurationFieldType.days().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.days()); [EOL] } <line_num>: 103,109
public void test_halfdays() throws Exception { [EOL]     assertEquals(DurationFieldType.halfdays(), DurationFieldType.halfdays()); [EOL]     assertEquals("halfdays", DurationFieldType.halfdays().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().halfdays(), DurationFieldType.halfdays().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.halfdays()); [EOL] } <line_num>: 111,117
public void test_hours() throws Exception { [EOL]     assertEquals(DurationFieldType.hours(), DurationFieldType.hours()); [EOL]     assertEquals("hours", DurationFieldType.hours().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().hours(), DurationFieldType.hours().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().hours().isSupported(), DurationFieldType.hours().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.hours()); [EOL] } <line_num>: 119,125
public void test_minutes() throws Exception { [EOL]     assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes()); [EOL]     assertEquals("minutes", DurationFieldType.minutes().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.minutes()); [EOL] } <line_num>: 127,133
public void test_seconds() throws Exception { [EOL]     assertEquals(DurationFieldType.seconds(), DurationFieldType.seconds()); [EOL]     assertEquals("seconds", DurationFieldType.seconds().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().seconds(), DurationFieldType.seconds().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.seconds()); [EOL] } <line_num>: 135,141
public void test_millis() throws Exception { [EOL]     assertEquals(DurationFieldType.millis(), DurationFieldType.millis()); [EOL]     assertEquals("millis", DurationFieldType.millis().getName()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().millis(), DurationFieldType.millis().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().millis().isSupported(), DurationFieldType.millis().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DurationFieldType.millis()); [EOL] } <line_num>: 143,149
private void assertSerialization(DurationFieldType type) throws Exception { [EOL]     DurationFieldType result = doSerialization(type); [EOL]     assertSame(type, result); [EOL] } <line_num>: 170,173
private DurationFieldType doSerialization(DurationFieldType type) throws Exception { [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(type); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DurationFieldType result = (DurationFieldType) ois.readObject(); [EOL]     ois.close(); [EOL]     return result; [EOL] } <line_num>: 175,187
