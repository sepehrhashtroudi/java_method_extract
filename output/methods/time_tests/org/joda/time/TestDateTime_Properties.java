public TestDateTime_Properties(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 71,73
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTime_Properties.class); [EOL] } <line_num>: 75,77
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     locale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 83,89
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     Locale.setDefault(locale); [EOL]     zone = null; [EOL] } <line_num>: 91,96
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 99,103
public void testPropertyGetEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("1", test.era().getAsString()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH)); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] } <line_num>: 106,128
public void testPropertyGetYearOfEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField()); [EOL]     assertEquals("yearOfEra", test.yearOfEra().getName()); [EOL]     assertEquals("Property[yearOfEra]", test.yearOfEra().toString()); [EOL]     assertSame(test, test.yearOfEra().getDateTime()); [EOL]     assertEquals(2004, test.yearOfEra().get()); [EOL]     assertEquals("2004", test.yearOfEra().getAsString()); [EOL]     assertEquals("2004", test.yearOfEra().getAsText()); [EOL]     assertEquals("2004", test.yearOfEra().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.yearOfEra().getAsShortText()); [EOL]     assertEquals("2004", test.yearOfEra().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField()); [EOL]     assertEquals(test.getChronology().eras(), test.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(9, test.yearOfEra().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null)); [EOL] } <line_num>: 131,147
public void testPropertyGetCenturyOfEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField()); [EOL]     assertEquals("centuryOfEra", test.centuryOfEra().getName()); [EOL]     assertEquals("Property[centuryOfEra]", test.centuryOfEra().toString()); [EOL]     assertSame(test, test.centuryOfEra().getDateTime()); [EOL]     assertEquals(20, test.centuryOfEra().get()); [EOL]     assertEquals("20", test.centuryOfEra().getAsString()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField()); [EOL]     assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumTextLength(null)); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null)); [EOL] } <line_num>: 150,166
public void testPropertyGetYearOfCentury() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField()); [EOL]     assertEquals("yearOfCentury", test.yearOfCentury().getName()); [EOL]     assertEquals("Property[yearOfCentury]", test.yearOfCentury().toString()); [EOL]     assertSame(test, test.yearOfCentury().getDateTime()); [EOL]     assertEquals(4, test.yearOfCentury().get()); [EOL]     assertEquals("4", test.yearOfCentury().getAsString()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText(Locale.FRENCH)); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField()); [EOL]     assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null)); [EOL] } <line_num>: 169,185
public void testPropertyGetWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().weekyear(), test.weekyear().getField()); [EOL]     assertEquals("weekyear", test.weekyear().getName()); [EOL]     assertEquals("Property[weekyear]", test.weekyear().toString()); [EOL]     assertSame(test, test.weekyear().getDateTime()); [EOL]     assertEquals(2004, test.weekyear().get()); [EOL]     assertEquals("2004", test.weekyear().getAsString()); [EOL]     assertEquals("2004", test.weekyear().getAsText()); [EOL]     assertEquals("2004", test.weekyear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.weekyear().getAsShortText()); [EOL]     assertEquals("2004", test.weekyear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField()); [EOL]     assertEquals(null, test.weekyear().getRangeDurationField()); [EOL]     assertEquals(9, test.weekyear().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.weekyear().getMaximumShortTextLength(null)); [EOL] } <line_num>: 188,204
public void testPropertyGetYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getDateTime()); [EOL]     assertEquals(2004, test.year().get()); [EOL]     assertEquals("2004", test.year().getAsString()); [EOL]     assertEquals("2004", test.year().getAsText()); [EOL]     assertEquals("2004", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.year().getAsShortText()); [EOL]     assertEquals("2004", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL]     assertEquals(-292275054, test.year().getMinimumValue()); [EOL]     assertEquals(-292275054, test.year().getMinimumValueOverall()); [EOL]     assertEquals(292278993, test.year().getMaximumValue()); [EOL]     assertEquals(292278993, test.year().getMaximumValueOverall()); [EOL] } <line_num>: 207,227
public void testPropertyLeapYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.year().isLeap()); [EOL]     assertEquals(1, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.year().isLeap()); [EOL]     assertEquals(0, test.year().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.year().getLeapDurationField()); [EOL] } <line_num>: 229,238
public void testPropertyAddYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addToCopy(0); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addToCopy(292277023 - 2004); [EOL]     assertEquals(292277023, copy.getYear()); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 2004 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     copy = test.year().addToCopy(-2004); [EOL]     assertEquals(0, copy.getYear()); [EOL]     copy = test.year().addToCopy(-2005); [EOL]     assertEquals(-1, copy.getYear()); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 2004 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 240,267
public void testPropertyAddWrapFieldYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().addWrapFieldToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     assertEquals(2004, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1); [EOL]     assertEquals(-292275054, copy.getYear()); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1); [EOL]     assertEquals(292278993, copy.getYear()); [EOL] } <line_num>: 269,283
public void testPropertySetYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().setCopy(1960); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("1960-06-09T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 285,290
public void testPropertySetTextYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.year().setCopy("1960"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("1960-06-09T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 292,297
public void testPropertyCompareToYear() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 299,309
@SuppressWarnings("deprecation") [EOL] public void testPropertyCompareToYear2() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     YearMonthDay ymd1 = new YearMonthDay(2003, 6, 9); [EOL]     YearMonthDay ymd2 = new YearMonthDay(2004, 6, 9); [EOL]     YearMonthDay ymd3 = new YearMonthDay(2005, 6, 9); [EOL]     assertEquals(true, test1.year().compareTo(ymd1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(ymd2) == 0); [EOL]     assertEquals(true, test1.year().compareTo(ymd3) < 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 311,324
public void testPropertyEqualsHashCodeYear() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test1.year().equals(test1.year())); [EOL]     assertEquals(true, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0).year())); [EOL]     assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0).monthOfYear())); [EOL]     assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year())); [EOL]     assertEquals(true, test1.year().hashCode() == test1.year().hashCode()); [EOL]     assertEquals(true, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0).year().hashCode()); [EOL]     assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0).monthOfYear().hashCode()); [EOL]     assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year().hashCode()); [EOL] } <line_num>: 326,337
public void testPropertyGetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getDateTime()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH)); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] } <line_num>: 340,373
public void testPropertyLeapMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2004, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(true, test.monthOfYear().isLeap()); [EOL]     assertEquals(1, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2003, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL]     test = new DateTime(2003, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(false, test.monthOfYear().isLeap()); [EOL]     assertEquals(0, test.monthOfYear().getLeapAmount()); [EOL]     assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField()); [EOL] } <line_num>: 375,395
public void testPropertyAddMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.monthOfYear().addToCopy(6); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     assertEquals("2005-01-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     assertEquals("2004-01-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     assertEquals("2003-12-09T00:00:00.000Z", copy.toString()); [EOL]     test = new DateTime(2004, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     assertEquals("2004-01-31T00:00:00.000Z", test.toString()); [EOL]     assertEquals("2004-02-29T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     assertEquals("2004-03-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     assertEquals("2004-04-30T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2003, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     assertEquals("2003-02-28T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 397,426
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-10-09T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     assertEquals("2004-10-09T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(1); [EOL]     assertEquals("2004-01-31T00:00:00.000Z", test.toString()); [EOL]     assertEquals("2004-02-29T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     assertEquals("2004-03-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(3); [EOL]     assertEquals("2004-04-30T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2005, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(1); [EOL]     assertEquals("2005-01-31T00:00:00.000Z", test.toString()); [EOL]     assertEquals("2005-02-28T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 428,455
public void testPropertySetMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.monthOfYear().setCopy(12); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", copy.toString()); [EOL]     test = new DateTime(2004, 1, 31, 0, 0, 0, 0); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     assertEquals("2004-02-29T00:00:00.000Z", copy.toString()); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 457,475
public void testPropertySetTextMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.monthOfYear().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().setCopy("December"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", copy.toString()); [EOL]     copy = test.monthOfYear().setCopy("Dec"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 477,490
public void testPropertyCompareToMonthOfYear() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 492,512
public void testPropertyGetDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getDateTime()); [EOL]     assertEquals(9, test.dayOfMonth().get()); [EOL]     assertEquals("9", test.dayOfMonth().getAsString()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     assertEquals(false, test.dayOfMonth().isLeap()); [EOL]     assertEquals(0, test.dayOfMonth().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfMonth().getLeapDurationField()); [EOL] } <line_num>: 515,538
public void testPropertyGetMaxMinValuesDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new DateTime(2004, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new DateTime(2003, 2, 9, 0, 0, 0, 0); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] } <line_num>: 540,552
public void testPropertyAddDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().addToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     assertEquals("2004-07-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     assertEquals("2004-08-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2005-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2003-12-31T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 554,589
public void testPropertyAddWrapFieldDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     assertEquals("2004-06-27T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     assertEquals("2004-07-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     assertEquals("2004-07-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(23); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     assertEquals("2004-07-28T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 591,615
public void testPropertySetDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().setCopy(12); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString()); [EOL]     try { [EOL]         test.dayOfMonth().setCopy(31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.dayOfMonth().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 617,631
public void testPropertySetTextDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 633,638
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().withMaximumValue(); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 640,645
public void testPropertyWithMaximumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone paris = DateTimeZone.forID("Europe/Paris"); [EOL]     DateTime dt = new DateTime(1926, 4, 17, 18, 0, 0, 0, paris); [EOL]     DateTime test = dt.millisOfDay().withMaximumValue(); [EOL]     assertEquals("1926-04-17T22:59:59.999Z", test.toString()); [EOL] } <line_num>: 647,652
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfMonth().withMinimumValue(); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 654,659
public void testPropertyWithMinimumValueMillisOfDayDSTGap() { [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza); [EOL]     DateTime test = dt.millisOfDay().withMinimumValue(); [EOL]     assertEquals("2001-04-20T01:00:00.000+03:00", test.toString()); [EOL] } <line_num>: 661,666
public void testPropertyCompareToDayOfMonth() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 668,688
public void testPropertyGetDayOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfYear(), test.dayOfYear().getField()); [EOL]     assertEquals("dayOfYear", test.dayOfYear().getName()); [EOL]     assertEquals("Property[dayOfYear]", test.dayOfYear().toString()); [EOL]     assertSame(test, test.dayOfYear().getDateTime()); [EOL]     assertEquals(161, test.dayOfYear().get()); [EOL]     assertEquals("161", test.dayOfYear().getAsString()); [EOL]     assertEquals("161", test.dayOfYear().getAsText()); [EOL]     assertEquals("161", test.dayOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("161", test.dayOfYear().getAsShortText()); [EOL]     assertEquals("161", test.dayOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(3, test.dayOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.dayOfYear().getMaximumShortTextLength(null)); [EOL]     assertEquals(false, test.dayOfYear().isLeap()); [EOL]     assertEquals(0, test.dayOfYear().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfYear().getLeapDurationField()); [EOL] } <line_num>: 691,711
public void testPropertyGetMaxMinValuesDayOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(1, test.dayOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfYear().getMinimumValueOverall()); [EOL]     assertEquals(366, test.dayOfYear().getMaximumValue()); [EOL]     assertEquals(366, test.dayOfYear().getMaximumValueOverall()); [EOL]     test = new DateTime(2002, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(365, test.dayOfYear().getMaximumValue()); [EOL]     assertEquals(366, test.dayOfYear().getMaximumValueOverall()); [EOL] } <line_num>: 713,722
public void testPropertyAddDayOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfYear().addToCopy(9); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfYear().addToCopy(21); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfYear().addToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfYear().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfYear().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2005-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfYear().addToCopy(-8); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfYear().addToCopy(-9); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfYear().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfYear().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2003-12-31T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 724,753
public void testPropertyAddWrapFieldDayOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfYear().addWrapFieldToCopy(21); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfYear().addWrapFieldToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfYear().addWrapFieldToCopy(-12); [EOL]     assertEquals("2004-05-28T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfYear().addWrapFieldToCopy(205); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfYear().addWrapFieldToCopy(206); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfYear().addWrapFieldToCopy(-160); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfYear().addWrapFieldToCopy(-161); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 755,778
public void testPropertySetDayOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfYear().setCopy(12); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-01-12T00:00:00.000Z", copy.toString()); [EOL]     try { [EOL]         test.dayOfYear().setCopy(367); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.dayOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 780,794
public void testPropertySetTextDayOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfYear().setCopy("12"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-01-12T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 796,801
public void testPropertyCompareToDayOfYear() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 803,823
public void testPropertyGetWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().weekOfWeekyear(), test.weekOfWeekyear().getField()); [EOL]     assertEquals("weekOfWeekyear", test.weekOfWeekyear().getName()); [EOL]     assertEquals("Property[weekOfWeekyear]", test.weekOfWeekyear().toString()); [EOL]     assertSame(test, test.weekOfWeekyear().getDateTime()); [EOL]     assertEquals(24, test.weekOfWeekyear().get()); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsString()); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsText()); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsShortText()); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().weeks(), test.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(test.getChronology().weekyears(), test.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(2, test.weekOfWeekyear().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.weekOfWeekyear().getMaximumShortTextLength(null)); [EOL]     assertEquals(false, test.weekOfWeekyear().isLeap()); [EOL]     assertEquals(0, test.weekOfWeekyear().getLeapAmount()); [EOL]     assertEquals(null, test.weekOfWeekyear().getLeapDurationField()); [EOL] } <line_num>: 826,858
public void testPropertyGetMaxMinValuesWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(1, test.weekOfWeekyear().getMinimumValue()); [EOL]     assertEquals(1, test.weekOfWeekyear().getMinimumValueOverall()); [EOL]     assertEquals(53, test.weekOfWeekyear().getMaximumValue()); [EOL]     assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall()); [EOL]     test = new DateTime(2005, 6, 9, 0, 0, 0, 0); [EOL]     assertEquals(52, test.weekOfWeekyear().getMaximumValue()); [EOL]     assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall()); [EOL] } <line_num>: 860,869
public void testPropertyAddWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     DateTime copy = test.weekOfWeekyear().addToCopy(1); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-14T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.weekOfWeekyear().addToCopy(29); [EOL]     assertEquals("2004-12-27T00:00:00.000Z", copy.toString()); [EOL]     copy = test.weekOfWeekyear().addToCopy(30); [EOL]     assertEquals("2005-01-03T00:00:00.000Z", copy.toString()); [EOL]     copy = test.weekOfWeekyear().addToCopy(-22); [EOL]     assertEquals("2004-01-05T00:00:00.000Z", copy.toString()); [EOL]     copy = test.weekOfWeekyear().addToCopy(-23); [EOL]     assertEquals("2003-12-29T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 871,888
public void testPropertyAddWrapFieldWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     DateTime copy = test.weekOfWeekyear().addWrapFieldToCopy(1); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-14T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.weekOfWeekyear().addWrapFieldToCopy(29); [EOL]     assertEquals("2004-12-27T00:00:00.000Z", copy.toString()); [EOL]     copy = test.weekOfWeekyear().addWrapFieldToCopy(30); [EOL]     assertEquals("2003-12-29T00:00:00.000Z", copy.toString()); [EOL]     copy = test.weekOfWeekyear().addWrapFieldToCopy(-23); [EOL]     assertEquals("2003-12-29T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 890,904
public void testPropertySetWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     DateTime copy = test.weekOfWeekyear().setCopy(4); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", copy.toString()); [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(54); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.weekOfWeekyear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 906,920
public void testPropertySetTextWeekOfWeekyear() { [EOL]     DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     DateTime copy = test.weekOfWeekyear().setCopy("4"); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 922,927
public void testPropertyCompareToWeekOfWeekyear() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.weekOfWeekyear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.weekOfWeekyear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.weekOfWeekyear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.weekOfWeekyear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.weekOfWeekyear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.weekOfWeekyear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.weekOfWeekyear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.weekOfWeekyear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 929,949
public void testPropertyGetDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField()); [EOL]     assertEquals("dayOfWeek", test.dayOfWeek().getName()); [EOL]     assertEquals("Property[dayOfWeek]", test.dayOfWeek().toString()); [EOL]     assertSame(test, test.dayOfWeek().getDateTime()); [EOL]     assertEquals(3, test.dayOfWeek().get()); [EOL]     assertEquals("3", test.dayOfWeek().getAsString()); [EOL]     assertEquals("Wednesday", test.dayOfWeek().getAsText()); [EOL]     assertEquals("Wednesday", test.dayOfWeek().getField().getAsText(3, Locale.ENGLISH)); [EOL]     assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH)); [EOL]     assertEquals("mercredi", test.dayOfWeek().getField().getAsText(3, Locale.FRENCH)); [EOL]     assertEquals("Wed", test.dayOfWeek().getAsShortText()); [EOL]     assertEquals("Wed", test.dayOfWeek().getField().getAsShortText(3, Locale.ENGLISH)); [EOL]     assertEquals("mer.", test.dayOfWeek().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals("mer.", test.dayOfWeek().getField().getAsShortText(3, Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField()); [EOL]     assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField()); [EOL]     assertEquals(9, test.dayOfWeek().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null)); [EOL]     assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH)); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValueOverall()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValue()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValueOverall()); [EOL]     assertEquals(false, test.dayOfWeek().isLeap()); [EOL]     assertEquals(0, test.dayOfWeek().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfWeek().getLeapDurationField()); [EOL] } <line_num>: 952,981
public void testPropertyAddDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().addToCopy(1); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().addToCopy(21); [EOL]     assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().addToCopy(22); [EOL]     assertEquals("2004-07-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2004-12-31T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfWeek().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     assertEquals("2005-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfWeek().addToCopy(-8); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().addToCopy(-9); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", copy.toString()); [EOL]     copy = test.dayOfWeek().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     assertEquals("2003-12-31T00:00:00.000Z", copy.toString()); [EOL] } <line_num>: 983,1012
public void testPropertyAddLongDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().addToCopy(1L); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 1014,1019
public void testPropertyAddWrapFieldDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().addWrapFieldToCopy(1); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().addWrapFieldToCopy(5); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().addWrapFieldToCopy(-10); [EOL]     assertEquals("2004-06-13T00:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 2, 0, 0, 0, 0); [EOL]     copy = test.dayOfWeek().addWrapFieldToCopy(5); [EOL]     assertEquals("2004-06-02T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-05-31T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 1021,1037
public void testPropertySetDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().setCopy(4); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL]     try { [EOL]         test.dayOfWeek().setCopy(8); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.dayOfWeek().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1039,1053
public void testPropertySetTextDayOfWeek() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime copy = test.dayOfWeek().setCopy("4"); [EOL]     assertEquals("2004-06-09T00:00:00.000+01:00", test.toString()); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().setCopy("Mon"); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().setCopy("Tuesday"); [EOL]     assertEquals("2004-06-08T00:00:00.000+01:00", copy.toString()); [EOL]     copy = test.dayOfWeek().setCopy("lundi", Locale.FRENCH); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 1055,1066
public void testPropertyCompareToDayOfWeek() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test2.dayOfWeek().compareTo(test1) < 0); [EOL]     assertEquals(true, test1.dayOfWeek().compareTo(test2) > 0); [EOL]     assertEquals(true, test1.dayOfWeek().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfWeek().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test2.dayOfWeek().compareTo(dt1) < 0); [EOL]     assertEquals(true, test1.dayOfWeek().compareTo(dt2) > 0); [EOL]     assertEquals(true, test1.dayOfWeek().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfWeek().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1068,1088
public void testPropertyGetHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertSame(test, test.hourOfDay().getDateTime()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsString()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 1091,1107
public void testPropertyGetDifferenceHourOfDay() { [EOL]     DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0); [EOL]     assertEquals(-2, test1.hourOfDay().getDifference(test2)); [EOL]     assertEquals(2, test2.hourOfDay().getDifference(test1)); [EOL]     assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2)); [EOL]     assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1)); [EOL]     DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertEquals(13, test.hourOfDay().getDifference(null)); [EOL]     assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null)); [EOL] } <line_num>: 1109,1120
public void testPropertyRoundFloorHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 1122,1126
public void testPropertyRoundCeilingHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundCeilingCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 1128,1132
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfFloorCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 1134,1146
public void testPropertyRoundHalfCeilingHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfCeilingCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 1148,1160
public void testPropertyRoundHalfEvenHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     DateTime copy = test.hourOfDay().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 14, 30, 0, 0); [EOL]     copy = test.hourOfDay().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     copy = test.hourOfDay().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", copy.toString()); [EOL]     test = new DateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     copy = test.hourOfDay().roundHalfEvenCopy(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", copy.toString()); [EOL] } <line_num>: 1162,1178
public void testPropertyRemainderHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] } <line_num>: 1180,1183
public void testPropertyGetMinuteOfHour() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertSame(test, test.minuteOfHour().getDateTime()); [EOL]     assertEquals(23, test.minuteOfHour().get()); [EOL]     assertEquals("23", test.minuteOfHour().getAsString()); [EOL]     assertEquals("23", test.minuteOfHour().getAsText()); [EOL]     assertEquals("23", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("23", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("23", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] } <line_num>: 1186,1202
public void testPropertyGetMinuteOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().minuteOfDay(), test.minuteOfDay().getField()); [EOL]     assertEquals("minuteOfDay", test.minuteOfDay().getName()); [EOL]     assertEquals("Property[minuteOfDay]", test.minuteOfDay().toString()); [EOL]     assertSame(test, test.minuteOfDay().getDateTime()); [EOL]     assertEquals(803, test.minuteOfDay().get()); [EOL]     assertEquals("803", test.minuteOfDay().getAsString()); [EOL]     assertEquals("803", test.minuteOfDay().getAsText()); [EOL]     assertEquals("803", test.minuteOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("803", test.minuteOfDay().getAsShortText()); [EOL]     assertEquals("803", test.minuteOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.minuteOfDay().getRangeDurationField()); [EOL]     assertEquals(4, test.minuteOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(4, test.minuteOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 1205,1221
public void testPropertyGetSecondOfMinute() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField()); [EOL]     assertEquals("secondOfMinute", test.secondOfMinute().getName()); [EOL]     assertEquals("Property[secondOfMinute]", test.secondOfMinute().toString()); [EOL]     assertSame(test, test.secondOfMinute().getDateTime()); [EOL]     assertEquals(43, test.secondOfMinute().get()); [EOL]     assertEquals("43", test.secondOfMinute().getAsString()); [EOL]     assertEquals("43", test.secondOfMinute().getAsText()); [EOL]     assertEquals("43", test.secondOfMinute().getAsText(Locale.FRENCH)); [EOL]     assertEquals("43", test.secondOfMinute().getAsShortText()); [EOL]     assertEquals("43", test.secondOfMinute().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField()); [EOL]     assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField()); [EOL]     assertEquals(2, test.secondOfMinute().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null)); [EOL] } <line_num>: 1224,1240
public void testPropertyGetSecondOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().secondOfDay(), test.secondOfDay().getField()); [EOL]     assertEquals("secondOfDay", test.secondOfDay().getName()); [EOL]     assertEquals("Property[secondOfDay]", test.secondOfDay().toString()); [EOL]     assertSame(test, test.secondOfDay().getDateTime()); [EOL]     assertEquals(48223, test.secondOfDay().get()); [EOL]     assertEquals("48223", test.secondOfDay().getAsString()); [EOL]     assertEquals("48223", test.secondOfDay().getAsText()); [EOL]     assertEquals("48223", test.secondOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("48223", test.secondOfDay().getAsShortText()); [EOL]     assertEquals("48223", test.secondOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().seconds(), test.secondOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.secondOfDay().getRangeDurationField()); [EOL]     assertEquals(5, test.secondOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(5, test.secondOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 1243,1259
public void testPropertyGetMillisOfSecond() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField()); [EOL]     assertEquals("millisOfSecond", test.millisOfSecond().getName()); [EOL]     assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString()); [EOL]     assertSame(test, test.millisOfSecond().getDateTime()); [EOL]     assertEquals(53, test.millisOfSecond().get()); [EOL]     assertEquals("53", test.millisOfSecond().getAsString()); [EOL]     assertEquals("53", test.millisOfSecond().getAsText()); [EOL]     assertEquals("53", test.millisOfSecond().getAsText(Locale.FRENCH)); [EOL]     assertEquals("53", test.millisOfSecond().getAsShortText()); [EOL]     assertEquals("53", test.millisOfSecond().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField()); [EOL]     assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField()); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null)); [EOL] } <line_num>: 1262,1278
public void testPropertyGetMillisOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().millisOfDay(), test.millisOfDay().getField()); [EOL]     assertEquals("millisOfDay", test.millisOfDay().getName()); [EOL]     assertEquals("Property[millisOfDay]", test.millisOfDay().toString()); [EOL]     assertSame(test, test.millisOfDay().getDateTime()); [EOL]     assertEquals(48223053, test.millisOfDay().get()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsString()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsText()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("48223053", test.millisOfDay().getAsShortText()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.millisOfDay().getRangeDurationField()); [EOL]     assertEquals(8, test.millisOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 1281,1297
public void testPropertyToIntervalYearOfEra() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfEra().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] } <line_num>: 1300,1305
public void testPropertyToIntervalYearOfCentury() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfCentury().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] } <line_num>: 1307,1312
public void testPropertyToIntervalYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.year().toInterval(); [EOL]     assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] } <line_num>: 1314,1319
public void testPropertyToIntervalMonthOfYear() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.monthOfYear().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL] } <line_num>: 1321,1326
public void testPropertyToIntervalDayOfMonth() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.dayOfMonth().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 10, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     DateTime febTest = new DateTime(2004, 2, 29, 13, 23, 43, 53); [EOL]     Interval febTestInterval = febTest.dayOfMonth().toInterval(); [EOL]     assertEquals(new DateTime(2004, 2, 29, 0, 0, 0, 0), febTestInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 3, 1, 0, 0, 0, 0), febTestInterval.getEnd()); [EOL] } <line_num>: 1328,1338
public void testPropertyToIntervalHourOfDay() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.hourOfDay().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 14, 0, 0, 0), testInterval.getEnd()); [EOL]     DateTime midnightTest = new DateTime(2004, 6, 9, 23, 23, 43, 53); [EOL]     Interval midnightTestInterval = midnightTest.hourOfDay().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 23, 0, 0, 0), midnightTestInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 10, 0, 0, 0, 0), midnightTestInterval.getEnd()); [EOL] } <line_num>: 1340,1350
public void testPropertyToIntervalMinuteOfHour() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.minuteOfHour().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 24, 0, 0), testInterval.getEnd()); [EOL] } <line_num>: 1352,1357
public void testPropertyToIntervalSecondOfMinute() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.secondOfMinute().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 0), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 44, 0), testInterval.getEnd()); [EOL] } <line_num>: 1359,1364
public void testPropertyToIntervalMillisOfSecond() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.millisOfSecond().toInterval(); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd()); [EOL] } <line_num>: 1366,1371
public void testPropertyEqualsHashCodeLenient() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] } <line_num>: 1373,1383
public void testPropertyEqualsHashCodeStrict() { [EOL]     DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] } <line_num>: 1385,1395
