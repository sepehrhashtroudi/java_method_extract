public TestCachedDateTimeZone(String name) { [EOL]     super(name); [EOL] } <line_num>: 45,47
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 35,37
public static TestSuite suite() { [EOL]     return new TestSuite(TestCachedDateTimeZone.class); [EOL] } <line_num>: 39,41
protected void setUp() throws Exception { [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL] } <line_num>: 49,52
protected void tearDown() throws Exception { [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL] } <line_num>: 54,56
public void test_caching() throws Exception { [EOL]     CachedDateTimeZone zone1 = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     CachedDateTimeZone zone2 = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     assertSame(zone1, zone2); [EOL] } <line_num>: 58,62
public void testSerialization() throws Exception { [EOL]     CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris")); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 65,80
