public TestFixedDateTimeZone(String name) { [EOL]     super(name); [EOL] } <line_num>: 43,45
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 33,35
public static TestSuite suite() { [EOL]     return new TestSuite(TestFixedDateTimeZone.class); [EOL] } <line_num>: 37,39
protected void setUp() throws Exception { [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL] } <line_num>: 47,50
protected void tearDown() throws Exception { [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL] } <line_num>: 52,54
public void testEquals() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.equals(zone1)); [EOL]     assertEquals(true, zone1.equals(zone1b)); [EOL]     assertEquals(true, zone1.equals(zone2)); [EOL]     assertEquals(false, zone1.equals(zone3)); [EOL]     assertEquals(false, zone1.equals(zone4)); [EOL] } <line_num>: 56,68
public void testHashCode() throws Exception { [EOL]     FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5); [EOL]     FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5); [EOL]     FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6); [EOL]     assertEquals(true, zone1.hashCode() == zone1.hashCode()); [EOL]     assertEquals(true, zone1.hashCode() == zone1b.hashCode()); [EOL]     assertEquals(true, zone1.hashCode() == zone2.hashCode()); [EOL]     assertEquals(false, zone1.hashCode() == zone3.hashCode()); [EOL]     assertEquals(false, zone1.hashCode() == zone4.hashCode()); [EOL] } <line_num>: 70,82
public void testToTimeZone1() throws Exception { [EOL]     FixedDateTimeZone zone = new FixedDateTimeZone("+00:01", "+00:01", 60000, 60000); [EOL]     java.util.TimeZone tz = zone.toTimeZone(); [EOL]     assertEquals(60000, tz.getRawOffset()); [EOL]     assertEquals(60000, getOffset(tz, 1167638400000L)); [EOL]     assertEquals(60000, getOffset(tz, 1185951600000L)); [EOL] } <line_num>: 84,91
public void testToTimeZone2() throws Exception { [EOL]     FixedDateTimeZone zone = new FixedDateTimeZone("A", "B", 1, 5); [EOL]     java.util.TimeZone tz = zone.toTimeZone(); [EOL]     assertEquals(1, tz.getRawOffset()); [EOL]     assertEquals(1, getOffset(tz, 1167638400000L)); [EOL]     assertEquals(1, getOffset(tz, 1185951600000L)); [EOL] } <line_num>: 93,100
private int getOffset(TimeZone zone, long millis) { [EOL]     Date date = new Date(millis); [EOL]     if (zone.inDaylightTime(date)) { [EOL]         return zone.getRawOffset() + 3600000; [EOL]     } [EOL]     return zone.getRawOffset(); [EOL] } <line_num>: 103,109
