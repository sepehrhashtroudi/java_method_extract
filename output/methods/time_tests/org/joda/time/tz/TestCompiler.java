public TestCompiler(String name) { [EOL]     super(name); [EOL] } <line_num>: 74,76
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 38,40
public static TestSuite suite() { [EOL]     return new TestSuite(TestCompiler.class); [EOL] } <line_num>: 42,44
protected void setUp() throws Exception { [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL] } <line_num>: 78,81
protected void tearDown() throws Exception { [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL] } <line_num>: 83,85
public void run() { [EOL]     zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL] } <line_num>: 93,95
public void testDateTimeZoneBuilder() throws Exception { [EOL]     getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true); [EOL]     final DateTimeZone[] zone = new DateTimeZone[1]; [EOL]     Thread t = new Thread(new Runnable() { [EOL]  [EOL]         public void run() { [EOL]             zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true); [EOL]         } [EOL]     }); [EOL]     t.start(); [EOL]     t.join(); [EOL]     assertNotNull(zone[0]); [EOL] } <line_num>: 88,100
private DateTimeZoneBuilder getTestDataTimeZoneBuilder() { [EOL]     return new DateTimeZoneBuilder().addCutover(1601, 'w', 1, 1, 1, false, 7200000).setStandardOffset(3600000).addRecurringSavings("", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false, 7200000).addRecurringSavings("", 0, 1601, Integer.MAX_VALUE, 'w', 10, -1, 1, false, 10800000); [EOL] } <line_num>: 102,108
public void testCompile() throws Exception { [EOL]     Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE); [EOL]     DateTimeZone tz = provider.getZone("America/Los_Angeles"); [EOL]     assertEquals("America/Los_Angeles", tz.getID()); [EOL]     assertEquals(false, tz.isFixed()); [EOL]     TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL]     TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA); [EOL] } <line_num>: 111,119
private Provider compileAndLoad(String data) throws Exception { [EOL]     File tempDir = createDataFile(data); [EOL]     File destDir = makeTempDir(); [EOL]     ZoneInfoCompiler.main(new String[] { "-src", tempDir.getAbsolutePath(), "-dst", destDir.getAbsolutePath(), "tzdata" }); [EOL]     deleteOnExit(destDir); [EOL]     return new ZoneInfoProvider(destDir); [EOL] } <line_num>: 121,135
private File createDataFile(String data) throws IOException { [EOL]     File tempDir = makeTempDir(); [EOL]     File tempFile = new File(tempDir, "tzdata"); [EOL]     tempFile.deleteOnExit(); [EOL]     InputStream in = new ByteArrayInputStream(data.getBytes("UTF-8")); [EOL]     FileOutputStream out = new FileOutputStream(tempFile); [EOL]     byte[] buf = new byte[1000]; [EOL]     int amt; [EOL]     while ((amt = in.read(buf)) > 0) { [EOL]         out.write(buf, 0, amt); [EOL]     } [EOL]     out.close(); [EOL]     in.close(); [EOL]     return tempDir; [EOL] } <line_num>: 137,155
private File makeTempDir() { [EOL]     File tempDir = new File(System.getProperty("java.io.tmpdir")); [EOL]     tempDir = new File(tempDir, "joda-test-" + (new java.util.Random().nextInt() & 0xffffff)); [EOL]     tempDir.mkdirs(); [EOL]     tempDir.deleteOnExit(); [EOL]     return tempDir; [EOL] } <line_num>: 157,163
private void deleteOnExit(File tempFile) { [EOL]     tempFile.deleteOnExit(); [EOL]     if (tempFile.isDirectory()) { [EOL]         File[] files = tempFile.listFiles(); [EOL]         for (int i = 0; i < files.length; i++) { [EOL]             deleteOnExit(files[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 165,173
public void test_2400_fromDay() { [EOL]     StringTokenizer st = new StringTokenizer("Apr Sun>=1  24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(2, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(true, test.iAdvanceDayOfWeek); [EOL] } <line_num>: 176,184
public void test_2400_last() { [EOL]     StringTokenizer st = new StringTokenizer("Mar lastSun 24:00"); [EOL]     DateTimeOfYear test = new DateTimeOfYear(st); [EOL]     assertEquals(4, test.iMonthOfYear); [EOL]     assertEquals(1, test.iDayOfMonth); [EOL]     assertEquals(1, test.iDayOfWeek); [EOL]     assertEquals(0, test.iMillisOfDay); [EOL]     assertEquals(false, test.iAdvanceDayOfWeek); [EOL] } <line_num>: 186,194
public void test_Amman_2003() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Asia/Amman"); [EOL]     DateTime dt = new DateTime(2003, 3, 1, 0, 0, zone); [EOL]     long next = zone.nextTransition(dt.getMillis()); [EOL]     assertEquals(next, new DateTime(2003, 3, 28, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis()); [EOL] } <line_num>: 196,201
public void test_Amman_2004() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Asia/Amman"); [EOL]     DateTime dt = new DateTime(2004, 3, 1, 0, 0, zone); [EOL]     long next = zone.nextTransition(dt.getMillis()); [EOL]     assertEquals(next, new DateTime(2004, 3, 26, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis()); [EOL] } <line_num>: 203,208
public void test_Amman_2005() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Asia/Amman"); [EOL]     DateTime dt = new DateTime(2005, 3, 1, 0, 0, zone); [EOL]     long next = zone.nextTransition(dt.getMillis()); [EOL]     assertEquals(next, new DateTime(2005, 4, 1, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis()); [EOL] } <line_num>: 210,215
public void test_Amman_2006() { [EOL]     DateTimeZone zone = DateTimeZone.forID("Asia/Amman"); [EOL]     DateTime dt = new DateTime(2006, 3, 1, 0, 0, zone); [EOL]     long next = zone.nextTransition(dt.getMillis()); [EOL]     assertEquals(next, new DateTime(2006, 3, 31, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis()); [EOL] } <line_num>: 217,222
