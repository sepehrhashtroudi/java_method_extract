public TestPartial_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 74,76
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 66,68
public static TestSuite suite() { [EOL]     return new TestSuite(TestPartial_Basics.class); [EOL] } <line_num>: 70,72
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 78,82
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 84,88
public void testGet() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.secondOfMinute()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 91,103
public void testSize() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals(2, test.size()); [EOL] } <line_num>: 105,108
public void testGetFieldType() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(2); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 110,120
public void testGetFieldTypes() { [EOL]     Partial test = createHourMinPartial(); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.hourOfDay(), fields[0]); [EOL]     assertSame(DateTimeFieldType.minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] } <line_num>: 122,129
public void testGetField() { [EOL]     Partial test = createHourMinPartial(COPTIC_PARIS); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0)); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(5); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 131,141
public void testGetFields() { [EOL]     Partial test = createHourMinPartial(COPTIC_PARIS); [EOL]     DateTimeField[] fields = test.getFields(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]); [EOL]     assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]); [EOL]     assertNotSame(test.getFields(), test.getFields()); [EOL] } <line_num>: 143,150
public void testGetValue() { [EOL]     Partial test = createHourMinPartial(COPTIC_PARIS); [EOL]     assertEquals(10, test.getValue(0)); [EOL]     assertEquals(20, test.getValue(1)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(2); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 152,162
public void testGetValues() { [EOL]     Partial test = createHourMinPartial(COPTIC_PARIS); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals(10, values[0]); [EOL]     assertEquals(20, values[1]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] } <line_num>: 164,171
public void testIsSupported() { [EOL]     Partial test = createHourMinPartial(COPTIC_PARIS); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL] } <line_num>: 173,180
@SuppressWarnings("deprecation") [EOL] public void testEqualsHashCode() { [EOL]     Partial test1 = createHourMinPartial(COPTIC_PARIS); [EOL]     Partial test2 = createHourMinPartial(COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Partial test3 = createHourMinPartial2(COPTIC_PARIS); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL]     assertEquals(new TimeOfDay(10, 20, 30, 40), createTODPartial(ISO_UTC)); [EOL] } <line_num>: 182,205
@SuppressWarnings("deprecation") [EOL] public void testCompareTo() { [EOL]     Partial test1 = createHourMinPartial(); [EOL]     Partial test1a = createHourMinPartial(); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     Partial test2 = createHourMinPartial2(ISO_UTC); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     Partial test3 = createHourMinPartial2(COPTIC_UTC); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     assertEquals(0, new TimeOfDay(10, 20, 30, 40).compareTo(createTODPartial(ISO_UTC))); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL]     try { [EOL]         test1.compareTo(new YearMonthDay()); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         createTODPartial(ISO_UTC).without(DateTimeFieldType.hourOfDay()).compareTo(new YearMonthDay()); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL] } <line_num>: 208,244
public void testIsEqual_TOD() { [EOL]     Partial test1 = createHourMinPartial(); [EOL]     Partial test1a = createHourMinPartial(); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Partial test2 = createHourMinPartial2(ISO_UTC); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     Partial test3 = createHourMinPartial2(COPTIC_UTC); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         createHourMinPartial().isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 247,268
public void testIsBefore_TOD() { [EOL]     Partial test1 = createHourMinPartial(); [EOL]     Partial test1a = createHourMinPartial(); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     Partial test2 = createHourMinPartial2(ISO_UTC); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     Partial test3 = createHourMinPartial2(COPTIC_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         createHourMinPartial().isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 271,292
public void testIsAfter_TOD() { [EOL]     Partial test1 = createHourMinPartial(); [EOL]     Partial test1a = createHourMinPartial(); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     Partial test2 = createHourMinPartial2(ISO_UTC); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     Partial test3 = createHourMinPartial2(COPTIC_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         createHourMinPartial().isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 295,316
public void testWithChronologyRetainFields_Chrono() { [EOL]     Partial base = createHourMinPartial(COPTIC_PARIS); [EOL]     Partial test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 10, 20); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 10, 20); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] } <line_num>: 319,326
public void testWithChronologyRetainFields_sameChrono() { [EOL]     Partial base = createHourMinPartial(COPTIC_PARIS); [EOL]     Partial test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] } <line_num>: 328,332
public void testWithChronologyRetainFields_nullChrono() { [EOL]     Partial base = createHourMinPartial(COPTIC_PARIS); [EOL]     Partial test = base.withChronologyRetainFields(null); [EOL]     check(base, 10, 20); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 10, 20); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] } <line_num>: 334,341
public void testWith1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] } <line_num>: 344,349
public void testWith2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.with(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 351,358
public void testWith3() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.with(DateTimeFieldType.clockhourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 360,367
public void testWith3a() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.secondOfMinute(), 15); [EOL]     check(test, 10, 20); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0)); [EOL]     assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(1)); [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), result.getFieldType(2)); [EOL]     assertEquals(10, result.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, result.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(15, result.get(DateTimeFieldType.secondOfMinute())); [EOL] } <line_num>: 369,383
public void testWith3b() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.minuteOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0)); [EOL]     assertEquals(DateTimeFieldType.minuteOfDay(), result.getFieldType(1)); [EOL]     assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2)); [EOL]     assertEquals(10, result.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, result.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(15, result.get(DateTimeFieldType.minuteOfDay())); [EOL] } <line_num>: 385,399
public void testWith3c() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.dayOfMonth(), 15); [EOL]     check(test, 10, 20); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(DateTimeFieldType.dayOfMonth(), result.getFieldType(0)); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(1)); [EOL]     assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2)); [EOL]     assertEquals(10, result.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, result.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(15, result.get(DateTimeFieldType.dayOfMonth())); [EOL] } <line_num>: 401,415
public void testWith3d() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     Partial result = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(2005, result.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, result.get(DateTimeFieldType.monthOfYear())); [EOL] } <line_num>: 417,423
public void testWith3e() { [EOL]     Partial test = new Partial(DateTimeFieldType.era(), 1); [EOL]     Partial result = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] } <line_num>: 425,433
public void testWith3f() { [EOL]     Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(1, result.get(DateTimeFieldType.era())); [EOL]     assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay())); [EOL] } <line_num>: 435,443
public void testWith4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 10); [EOL]     assertSame(test, result); [EOL] } <line_num>: 445,449
public void testWith_baseHasNoRange() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 1); [EOL]     Partial result = test.with(DateTimeFieldType.hourOfDay(), 10); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.year())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.hourOfDay())); [EOL] } <line_num>: 451,457
public void testWith_argHasNoRange() { [EOL]     Partial test = new Partial(DateTimeFieldType.hourOfDay(), 1); [EOL]     Partial result = test.with(DateTimeFieldType.year(), 10); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.year())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.hourOfDay())); [EOL] } <line_num>: 459,465
public void testWith_baseAndArgHaveNoRange() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 1); [EOL]     Partial result = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(0, result.indexOf(DateTimeFieldType.era())); [EOL]     assertEquals(1, result.indexOf(DateTimeFieldType.year())); [EOL] } <line_num>: 467,473
public void testWithout1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.without(DateTimeFieldType.year()); [EOL]     check(test, 10, 20); [EOL]     check(result, 10, 20); [EOL] } <line_num>: 476,481
public void testWithout2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.without((DateTimeFieldType) null); [EOL]     check(test, 10, 20); [EOL]     check(result, 10, 20); [EOL] } <line_num>: 483,488
public void testWithout3() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.without(DateTimeFieldType.hourOfDay()); [EOL]     check(test, 10, 20); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(0)); [EOL] } <line_num>: 490,498
public void testWithout4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.without(DateTimeFieldType.minuteOfHour()); [EOL]     check(test, 10, 20); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(false, result.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0)); [EOL] } <line_num>: 500,508
public void testWithout5() { [EOL]     Partial test = new Partial(DateTimeFieldType.hourOfDay(), 12); [EOL]     Partial result = test.without(DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(0, result.size()); [EOL]     assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay())); [EOL] } <line_num>: 510,515
public void testWithField1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withField(DateTimeFieldType.hourOfDay(), 15); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 20); [EOL] } <line_num>: 518,523
public void testWithField2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 525,532
public void testWithField3() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.dayOfMonth(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 534,541
public void testWithField4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withField(DateTimeFieldType.hourOfDay(), 10); [EOL]     assertSame(test, result); [EOL] } <line_num>: 543,547
public void testWithFieldAdded1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]     assertEquals(createHourMinPartial(), test); [EOL]     check(test, 10, 20); [EOL]     check(result, 16, 20); [EOL] } <line_num>: 550,557
public void testWithFieldAdded2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 559,566
public void testWithFieldAdded3() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 568,575
public void testWithFieldAdded4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAdded(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 577,581
public void testWithFieldAdded5() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 583,590
public void testWithFieldAdded6() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 16); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 592,601
public void testWithFieldAdded7() { [EOL]     Partial test = createHourMinPartial(23, 59, ISO_UTC); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.minutes(), 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 23, 59); [EOL]     test = createHourMinPartial(23, 59, ISO_UTC); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 23, 59); [EOL] } <line_num>: 603,621
public void testWithFieldAdded8() { [EOL]     Partial test = createHourMinPartial(0, 0, ISO_UTC); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.minutes(), -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 0, 0); [EOL]     test = createHourMinPartial(0, 0, ISO_UTC); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), -1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 0, 0); [EOL] } <line_num>: 623,641
public void testWithFieldAddWrapped1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 6); [EOL]     assertEquals(createHourMinPartial(), test); [EOL]     check(test, 10, 20); [EOL]     check(result, 16, 20); [EOL] } <line_num>: 644,651
public void testWithFieldAddWrapped2() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAddWrapped(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 653,660
public void testWithFieldAddWrapped3() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAddWrapped(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 662,669
public void testWithFieldAddWrapped4() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 671,675
public void testWithFieldAddWrapped5() { [EOL]     Partial test = createHourMinPartial(); [EOL]     try { [EOL]         test.withFieldAddWrapped(DurationFieldType.days(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20); [EOL] } <line_num>: 677,684
public void testWithFieldAddWrapped6() { [EOL]     Partial test = createHourMinPartial(); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 16); [EOL]     assertEquals(createHourMinPartial(), test); [EOL]     check(test, 10, 20); [EOL]     check(result, 2, 20); [EOL] } <line_num>: 686,693
public void testWithFieldAddWrapped7() { [EOL]     Partial test = createHourMinPartial(23, 59, ISO_UTC); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), 1); [EOL]     check(test, 23, 59); [EOL]     check(result, 0, 0); [EOL]     test = createHourMinPartial(23, 59, ISO_UTC); [EOL]     result = test.withFieldAddWrapped(DurationFieldType.hours(), 1); [EOL]     check(test, 23, 59); [EOL]     check(result, 0, 59); [EOL] } <line_num>: 695,705
public void testWithFieldAddWrapped8() { [EOL]     Partial test = createHourMinPartial(0, 0, ISO_UTC); [EOL]     Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), -1); [EOL]     check(test, 0, 0); [EOL]     check(result, 23, 59); [EOL]     test = createHourMinPartial(0, 0, ISO_UTC); [EOL]     result = test.withFieldAddWrapped(DurationFieldType.hours(), -1); [EOL]     check(test, 0, 0); [EOL]     check(result, 23, 0); [EOL] } <line_num>: 707,717
public void testPlus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     check(test, 10, 20); [EOL]     check(result, 15, 26); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 720,728
public void testMinus_RP() { [EOL]     Partial test = createHourMinPartial(BUDDHIST_LONDON); [EOL]     Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     check(test, 10, 20); [EOL]     check(result, 9, 19); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 731,739
public void testToDateTime_RI() { [EOL]     Partial base = createHourMinPartial(COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(0L); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 10, 20); [EOL]     assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString()); [EOL]     assertEquals("1970-01-01T10:20:00.000+01:00", test.toString()); [EOL] } <line_num>: 742,751
public void testToDateTime_nullRI() { [EOL]     Partial base = createHourMinPartial(1, 2, ISO_UTC); [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME2); [EOL]     DateTime test = base.toDateTime((ReadableInstant) null); [EOL]     check(base, 1, 2); [EOL]     assertEquals("1970-01-02T01:02:07.008+01:00", test.toString()); [EOL] } <line_num>: 753,760
public void testProperty() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertNotNull(test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertNotNull(test.property(DateTimeFieldType.minuteOfHour())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.secondOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 763,775
public void testSerialization() throws Exception { [EOL]     Partial test = createHourMinPartial(COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Partial result = (Partial) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] } <line_num>: 778,796
public void testGetFormatter1() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.getFormatter().print(test)); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.getFormatter().print(test)); [EOL] } <line_num>: 799,811
public void testGetFormatter2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals(null, test.getFormatter()); [EOL]     test = test.with(DateTimeFieldType.era(), 1); [EOL]     assertEquals(null, test.getFormatter()); [EOL]     test = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals(null, test.getFormatter()); [EOL] } <line_num>: 813,822
public void testGetFormatter3() { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals("-W-5", test.getFormatter().print(test)); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 13); [EOL]     assertEquals("---13", test.getFormatter().print(test)); [EOL] } <line_num>: 824,831
public void testToString1() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals("10:20", test.toString()); [EOL] } <line_num>: 834,837
public void testToString2() { [EOL]     Partial test = new Partial(); [EOL]     assertEquals("[]", test.toString()); [EOL] } <line_num>: 839,842
public void testToString3() { [EOL]     Partial test = new Partial(DateTimeFieldType.year(), 2005); [EOL]     assertEquals("2005", test.toString()); [EOL]     test = test.with(DateTimeFieldType.monthOfYear(), 6); [EOL]     assertEquals("2005-06", test.toString()); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 25); [EOL]     assertEquals("2005-06-25", test.toString()); [EOL]     test = test.without(DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("2005--25", test.toString()); [EOL] } <line_num>: 844,856
public void testToString4() { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5); [EOL]     assertEquals("-W-5", test.toString()); [EOL]     test = test.with(DateTimeFieldType.dayOfMonth(), 13); [EOL]     assertEquals("[dayOfMonth=13, dayOfWeek=5]", test.toString()); [EOL] } <line_num>: 858,864
public void testToString5() { [EOL]     Partial test = new Partial(DateTimeFieldType.era(), 1); [EOL]     assertEquals("[era=1]", test.toString()); [EOL]     test = test.with(DateTimeFieldType.halfdayOfDay(), 0); [EOL]     assertEquals("[era=1, halfdayOfDay=0]", test.toString()); [EOL] } <line_num>: 866,872
public void testToString_String() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString("yyyy HH")); [EOL]     assertEquals("10:20", test.toString((String) null)); [EOL] } <line_num>: 875,879
public void testToString_String_Locale() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals("10 20", test.toString("H m", Locale.ENGLISH)); [EOL]     assertEquals("10:20", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("10 20", test.toString("H m", null)); [EOL]     assertEquals("10:20", test.toString(null, null)); [EOL] } <line_num>: 882,888
public void testToString_DTFormatter() { [EOL]     Partial test = createHourMinPartial(); [EOL]     assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("10:20", test.toString((DateTimeFormatter) null)); [EOL] } <line_num>: 891,895
private Partial createHourMinPartial() { [EOL]     return createHourMinPartial(ISO_UTC); [EOL] } <line_num>: 898,900
private Partial createHourMinPartial(Chronology chrono) { [EOL]     return createHourMinPartial(10, 20, chrono); [EOL] } <line_num>: 902,904
private Partial createHourMinPartial2(Chronology chrono) { [EOL]     return createHourMinPartial(15, 20, chrono); [EOL] } <line_num>: 906,908
private Partial createHourMinPartial(int hour, int min, Chronology chrono) { [EOL]     return new Partial(new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour() }, new int[] { hour, min }, chrono); [EOL] } <line_num>: 910,915
private Partial createTODPartial(Chronology chrono) { [EOL]     return new Partial(new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }, new int[] { 10, 20, 30, 40 }, chrono); [EOL] } <line_num>: 917,924
private void check(Partial test, int hour, int min) { [EOL]     assertEquals(test.toString(), hour, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.toString(), min, test.get(DateTimeFieldType.minuteOfHour())); [EOL] } <line_num>: 926,929
