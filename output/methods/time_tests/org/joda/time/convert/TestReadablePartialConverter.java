public TestReadablePartialConverter(String name) { [EOL]     super(name); [EOL] } <line_num>: 61,63
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 53,55
public static TestSuite suite() { [EOL]     return new TestSuite(TestReadablePartialConverter.class); [EOL] } <line_num>: 57,59
protected void setUp() throws Exception { [EOL]     JULIAN = JulianChronology.getInstance(); [EOL]     ISO = ISOChronology.getInstance(); [EOL]     BUDDHIST = BuddhistChronology.getInstance(); [EOL] } <line_num>: 65,69
public void testSingleton() throws Exception { [EOL]     Class cls = ReadablePartialConverter.class; [EOL]     assertEquals(false, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(false, Modifier.isPublic(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 72,86
public void testSupportedType() throws Exception { [EOL]     assertEquals(ReadablePartial.class, ReadablePartialConverter.INSTANCE.getSupportedType()); [EOL] } <line_num>: 89,91
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS)); [EOL]     assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null)); [EOL] } <line_num>: 94,98
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN)); [EOL]     assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN)); [EOL]     assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null)); [EOL] } <line_num>: 100,104
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = new int[] { 1, 2, 3, 4 }; [EOL]     int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL]     try { [EOL]         ReadablePartialConverter.INSTANCE.getPartialValues(tod, new YearMonthDay(2005, 6, 9), JULIAN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ReadablePartialConverter.INSTANCE.getPartialValues(tod, new MockTOD(), JULIAN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 107,121
protected DateTimeField getField(int index, Chronology chrono) { [EOL]     switch(index) { [EOL]         case 0: [EOL]             return chrono.hourOfDay(); [EOL]         case 1: [EOL]             return chrono.minuteOfHour(); [EOL]         case 2: [EOL]             return chrono.year(); [EOL]         case 3: [EOL]             return chrono.era(); [EOL]     } [EOL]     return null; [EOL] } <line_num>: 124,136
public int size() { [EOL]     return 4; [EOL] } <line_num>: 137,139
public void testToString() { [EOL]     assertEquals("Converter[org.joda.time.ReadablePartial]", ReadablePartialConverter.INSTANCE.toString()); [EOL] } <line_num>: 143,145
