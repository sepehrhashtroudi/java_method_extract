public TestCalendarConverter(String name) { [EOL]     super(name); [EOL] } <line_num>: 59,61
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 51,53
public static TestSuite suite() { [EOL]     return new TestSuite(TestCalendarConverter.class); [EOL] } <line_num>: 55,57
protected void setUp() throws Exception { [EOL]     JULIAN = JulianChronology.getInstance(); [EOL]     ISO = ISOChronology.getInstance(); [EOL] } <line_num>: 63,66
public void testSingleton() throws Exception { [EOL]     Class cls = CalendarConverter.class; [EOL]     assertEquals(false, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(false, Modifier.isPublic(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 69,83
public void testSupportedType() throws Exception { [EOL]     assertEquals(Calendar.class, CalendarConverter.INSTANCE.getSupportedType()); [EOL] } <line_num>: 86,88
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(); [EOL]     cal.setTime(new Date(123L)); [EOL]     assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN)); [EOL]     assertEquals(123L, cal.getTime().getTime()); [EOL] } <line_num>: 91,96
public void testGetChronology_Object_Zone() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (DateTimeZone) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(uc, PARIS)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(bc, PARIS)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] } <line_num>: 99,128
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(0L)); [EOL]     assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MAX_VALUE)); [EOL]     assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     cal.setGregorianChange(new Date(Long.MIN_VALUE)); [EOL]     assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     cal = new GregorianCalendar(new MockUnknownTimeZone()); [EOL]     assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null)); [EOL]     Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone("Europe/Moscow")); [EOL]     assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null)); [EOL]     try { [EOL]         Calendar bc = (Calendar) Class.forName("sun.util.BuddhistCalendar").newInstance(); [EOL]         bc.setTimeZone(TimeZone.getTimeZone("Europe/Moscow")); [EOL]         assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null)); [EOL]     } catch (ClassNotFoundException ex) { [EOL]     } [EOL] } <line_num>: 130,159
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("Europe/Paris")); [EOL]     assertEquals(JULIAN, CalendarConverter.INSTANCE.getChronology(cal, JULIAN)); [EOL] } <line_num>: 161,164
public void testGetPartialValues() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(); [EOL]     cal.setTime(new Date(12345678L)); [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = ISO.get(tod, 12345678L); [EOL]     int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISO); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] } <line_num>: 167,174
public void testToString() { [EOL]     assertEquals("Converter[java.util.Calendar]", CalendarConverter.INSTANCE.toString()); [EOL] } <line_num>: 177,179
