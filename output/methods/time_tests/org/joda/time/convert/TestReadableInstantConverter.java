public TestReadableInstantConverter(String name) { [EOL]     super(name); [EOL] } <line_num>: 59,61
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 51,53
public static TestSuite suite() { [EOL]     return new TestSuite(TestReadableInstantConverter.class); [EOL] } <line_num>: 55,57
protected void setUp() throws Exception { [EOL]     JULIAN = JulianChronology.getInstance(); [EOL]     ISO = ISOChronology.getInstance(); [EOL] } <line_num>: 63,66
public void testSingleton() throws Exception { [EOL]     Class cls = ReadableInstantConverter.class; [EOL]     assertEquals(false, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(false, Modifier.isPublic(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 69,83
public void testSupportedType() throws Exception { [EOL]     assertEquals(ReadableInstant.class, ReadableInstantConverter.INSTANCE.getSupportedType()); [EOL] } <line_num>: 86,88
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), JULIAN)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), JULIAN)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), (Chronology) null)); [EOL]     assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), (Chronology) null)); [EOL] } <line_num>: 91,96
public Chronology getChronology() { [EOL]     return null; [EOL] } <line_num>: 110,112
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), PARIS)); [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), PARIS)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), DateTimeZone.getDefault())); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (DateTimeZone) null)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null)); [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L, new MockBadChronology()), PARIS)); [EOL]     MutableDateTime mdt = new MutableDateTime() { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(mdt, PARIS)); [EOL] } <line_num>: 99,115
public Chronology getChronology() { [EOL]     return null; [EOL] } <line_num>: 122,124
public void testGetChronology_Object_nullChronology() throws Exception { [EOL]     assertEquals(ISO.withUTC(), ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (Chronology) null)); [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (Chronology) null)); [EOL]     MutableDateTime mdt = new MutableDateTime() { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(mdt, (Chronology) null)); [EOL] } <line_num>: 117,127
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), JULIAN)); [EOL]     assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), JULIAN)); [EOL] } <line_num>: 129,132
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = ISOChronology.getInstance().get(tod, 12345678L); [EOL]     int[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), ISOChronology.getInstance()); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] } <line_num>: 135,140
public void testToString() { [EOL]     assertEquals("Converter[org.joda.time.ReadableInstant]", ReadableInstantConverter.INSTANCE.toString()); [EOL] } <line_num>: 143,145
