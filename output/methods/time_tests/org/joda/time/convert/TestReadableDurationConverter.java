public TestReadableDurationConverter(String name) { [EOL]     super(name); [EOL] } <line_num>: 58,60
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 50,52
public static TestSuite suite() { [EOL]     return new TestSuite(TestReadableDurationConverter.class); [EOL] } <line_num>: 54,56
@Override [EOL] protected void setUp() throws Exception { [EOL]     super.setUp(); [EOL]     JULIAN = JulianChronology.getInstance(); [EOL]     ISO = ISOChronology.getInstance(); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(PARIS); [EOL] } <line_num>: 62,69
@Override [EOL] protected void tearDown() throws Exception { [EOL]     super.tearDown(); [EOL]     DateTimeZone.setDefault(zone); [EOL] } <line_num>: 71,75
public void testSingleton() throws Exception { [EOL]     Class cls = ReadableDurationConverter.class; [EOL]     assertEquals(false, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(false, Modifier.isPublic(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 78,92
public void testSupportedType() throws Exception { [EOL]     assertEquals(ReadableDuration.class, ReadableDurationConverter.INSTANCE.getSupportedType()); [EOL] } <line_num>: 95,97
public void testGetDurationMillis_Object() throws Exception { [EOL]     assertEquals(123L, ReadableDurationConverter.INSTANCE.getDurationMillis(new Duration(123L))); [EOL] } <line_num>: 100,102
public void testGetPeriodType_Object() throws Exception { [EOL]     assertEquals(PeriodType.standard(), ReadableDurationConverter.INSTANCE.getPeriodType(new Duration(123L))); [EOL] } <line_num>: 105,108
public void testSetInto_Object() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime()); [EOL]     ReadableDurationConverter.INSTANCE.setInto(m, new Duration(3L * DateTimeConstants.MILLIS_PER_DAY + 4L * DateTimeConstants.MILLIS_PER_MINUTE + 5L), null); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(0, m.getDays()); [EOL]     assertEquals(3 * 24, m.getHours()); [EOL]     assertEquals(4, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(5, m.getMillis()); [EOL] } <line_num>: 110,124
public void testToString() { [EOL]     assertEquals("Converter[org.joda.time.ReadableDuration]", ReadableDurationConverter.INSTANCE.toString()); [EOL] } <line_num>: 127,129
