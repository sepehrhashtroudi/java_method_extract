public TestStringConverter(String name) { [EOL]     super(name); [EOL] } <line_num>: 69,71
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 61,63
public static TestSuite suite() { [EOL]     return new TestSuite(TestStringConverter.class); [EOL] } <line_num>: 65,67
protected void setUp() throws Exception { [EOL]     zone = DateTimeZone.getDefault(); [EOL]     locale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     Locale.setDefault(Locale.UK); [EOL]     JULIAN = JulianChronology.getInstance(); [EOL]     ISO = ISOChronology.getInstance(); [EOL] } <line_num>: 73,81
protected void tearDown() throws Exception { [EOL]     DateTimeZone.setDefault(zone); [EOL]     Locale.setDefault(locale); [EOL]     zone = null; [EOL] } <line_num>: 83,87
public void testSingleton() throws Exception { [EOL]     Class cls = StringConverter.class; [EOL]     assertEquals(false, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(false, Modifier.isPublic(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 90,104
public void testSupportedType() throws Exception { [EOL]     assertEquals(String.class, StringConverter.INSTANCE.getSupportedType()); [EOL] } <line_num>: 107,109
public void testGetInstantMillis_Object() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48.501+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 1, 1, 0, 0, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004T+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 1, 0, 0, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06T+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-161T+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-W24-3T+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 7, 0, 0, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-W24T+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 24, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 24, 48, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 30, 0, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12.5+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 24, 30, 0, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24.5+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 24, 48, 500, EIGHT); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48.5+08:00", ISO_EIGHT)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 24, 48, 501); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48.501", ISO)); [EOL] } <line_num>: 112,154
public void testGetInstantMillis_Object_Zone() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48.501+02:00", ISO_PARIS)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48.501", ISO_PARIS)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, LONDON); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48.501+01:00", ISO_LONDON)); [EOL]     dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, LONDON); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48.501", ISO_LONDON)); [EOL] } <line_num>: 156,168
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, JulianChronology.getInstance(LONDON)); [EOL]     assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis("2004-06-09T12:24:48.501+01:00", JULIAN)); [EOL] } <line_num>: 170,173
public void testGetInstantMillisInvalid() { [EOL]     try { [EOL]         StringConverter.INSTANCE.getInstantMillis("", (Chronology) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getInstantMillis("X", (Chronology) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 175,184
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISOChronology.getInstance(PARIS), StringConverter.INSTANCE.getChronology("2004-06-09T12:24:48.501+01:00", PARIS)); [EOL]     assertEquals(ISOChronology.getInstance(PARIS), StringConverter.INSTANCE.getChronology("2004-06-09T12:24:48.501", PARIS)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology("2004-06-09T12:24:48.501+01:00", (DateTimeZone) null)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology("2004-06-09T12:24:48.501", (DateTimeZone) null)); [EOL] } <line_num>: 187,192
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JulianChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology("2004-06-09T12:24:48.501+01:00", JULIAN)); [EOL]     assertEquals(JulianChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology("2004-06-09T12:24:48.501", JULIAN)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology("2004-06-09T12:24:48.501+01:00", (Chronology) null)); [EOL]     assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology("2004-06-09T12:24:48.501", (Chronology) null)); [EOL] } <line_num>: 194,199
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = new int[] { 3, 4, 5, 6 }; [EOL]     int[] actual = StringConverter.INSTANCE.getPartialValues(tod, "T03:04:05.006", ISOChronology.getInstance()); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] } <line_num>: 202,207
public void testGetDateTime() throws Exception { [EOL]     DateTime base = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS); [EOL]     DateTime test = new DateTime(base.toString(), PARIS); [EOL]     assertEquals(base, test); [EOL] } <line_num>: 210,214
public void testGetDateTime1() throws Exception { [EOL]     DateTime test = new DateTime("2004-06-09T12:24:48.501+01:00"); [EOL]     assertEquals(2004, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL] } <line_num>: 216,226
public void testGetDateTime2() throws Exception { [EOL]     DateTime test = new DateTime("2004-06-09T12:24:48.501"); [EOL]     assertEquals(2004, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL] } <line_num>: 228,238
public void testGetDateTime3() throws Exception { [EOL]     DateTime test = new DateTime("2004-06-09T12:24:48.501+02:00", PARIS); [EOL]     assertEquals(2004, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL]     assertEquals(PARIS, test.getZone()); [EOL] } <line_num>: 240,250
public void testGetDateTime4() throws Exception { [EOL]     DateTime test = new DateTime("2004-06-09T12:24:48.501", PARIS); [EOL]     assertEquals(2004, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL]     assertEquals(PARIS, test.getZone()); [EOL] } <line_num>: 252,262
public void testGetDateTime5() throws Exception { [EOL]     DateTime test = new DateTime("2004-06-09T12:24:48.501+02:00", JulianChronology.getInstance(PARIS)); [EOL]     assertEquals(2004, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL]     assertEquals(PARIS, test.getZone()); [EOL] } <line_num>: 264,274
public void testGetDateTime6() throws Exception { [EOL]     DateTime test = new DateTime("2004-06-09T12:24:48.501", JulianChronology.getInstance(PARIS)); [EOL]     assertEquals(2004, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(12, test.getHourOfDay()); [EOL]     assertEquals(24, test.getMinuteOfHour()); [EOL]     assertEquals(48, test.getSecondOfMinute()); [EOL]     assertEquals(501, test.getMillisOfSecond()); [EOL]     assertEquals(PARIS, test.getZone()); [EOL] } <line_num>: 276,286
public void testGetDurationMillis_Object1() throws Exception { [EOL]     long millis = StringConverter.INSTANCE.getDurationMillis("PT12.345S"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.345s"); [EOL]     assertEquals(12345, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.s"); [EOL]     assertEquals(12000, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-12.32s"); [EOL]     assertEquals(-12320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.32s"); [EOL]     assertEquals(-320, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt-0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt0.0s"); [EOL]     assertEquals(0, millis); [EOL]     millis = StringConverter.INSTANCE.getDurationMillis("pt12.3456s"); [EOL]     assertEquals(12345, millis); [EOL] } <line_num>: 289,316
public void testGetDurationMillis_Object2() throws Exception { [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("P2Y6M9DXYZ"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("XT0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PX0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0X"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PTXS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0.0.0S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT0-00S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.getDurationMillis("PT-.001S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 318,355
public void testGetPeriodType_Object() throws Exception { [EOL]     assertEquals(PeriodType.standard(), StringConverter.INSTANCE.getPeriodType("P2Y6M9D")); [EOL] } <line_num>: 358,361
public void testSetIntoPeriod_Object1() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y6M9DT12H24M48S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(6, m.getMonths()); [EOL]     assertEquals(9, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(48, m.getSeconds()); [EOL]     assertEquals(0, m.getMillis()); [EOL] } <line_num>: 363,373
public void testSetIntoPeriod_Object2() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(48, m.getSeconds()); [EOL]     assertEquals(0, m.getMillis()); [EOL] } <line_num>: 375,385
public void testSetIntoPeriod_Object3() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48.034S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(48, m.getSeconds()); [EOL]     assertEquals(34, m.getMillis()); [EOL] } <line_num>: 387,397
public void testSetIntoPeriod_Object4() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M.056S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(56, m.getMillis()); [EOL] } <line_num>: 399,409
public void testSetIntoPeriod_Object5() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(0, m.getMillis()); [EOL] } <line_num>: 411,421
public void testSetIntoPeriod_Object6() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M56.1234567S", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(12, m.getHours()); [EOL]     assertEquals(24, m.getMinutes()); [EOL]     assertEquals(56, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] } <line_num>: 423,433
public void testSetIntoPeriod_Object7() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.yearWeekDayTime()); [EOL]     StringConverter.INSTANCE.setInto(m, "P2Y4W3D", null); [EOL]     assertEquals(2, m.getYears()); [EOL]     assertEquals(4, m.getWeeks()); [EOL]     assertEquals(3, m.getDays()); [EOL]     assertEquals(0, m.getHours()); [EOL]     assertEquals(0, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(0, m.getMillis()); [EOL] } <line_num>: 435,445
public void testSetIntoPeriod_Object8() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "PXY", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "PT0SXY", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P2Y4W3DT12H24M48SX", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 447,467
public void testIsReadableInterval_Object_Chronology() throws Exception { [EOL]     assertEquals(false, StringConverter.INSTANCE.isReadableInterval("", null)); [EOL] } <line_num>: 470,472
public void testSetIntoInterval_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     StringConverter.INSTANCE.setInto(m, "2004-06-09/P1Y2M", null); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getStart()); [EOL]     assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0), m.getEnd()); [EOL]     assertEquals(ISOChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 474,480
public void testSetIntoInterval_Object_Chronology2() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     StringConverter.INSTANCE.setInto(m, "P1Y2M/2004-06-09", null); [EOL]     assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0), m.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd()); [EOL]     assertEquals(ISOChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 482,488
public void testSetIntoInterval_Object_Chronology3() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     StringConverter.INSTANCE.setInto(m, "2003-08-09/2004-06-09", null); [EOL]     assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0), m.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd()); [EOL]     assertEquals(ISOChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 490,496
public void testSetIntoInterval_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     StringConverter.INSTANCE.setInto(m, "2004-06-09T+06:00/P1Y2M", null); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart()); [EOL]     assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd()); [EOL]     assertEquals(ISOChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 498,504
public void testSetIntoInterval_Object_Chronology5() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     StringConverter.INSTANCE.setInto(m, "P1Y2M/2004-06-09T+06:00", null); [EOL]     assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd()); [EOL]     assertEquals(ISOChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 506,512
public void testSetIntoInterval_Object_Chronology6() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     StringConverter.INSTANCE.setInto(m, "2003-08-09T+06:00/2004-06-09T+07:00", null); [EOL]     assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SEVEN).withChronology(null), m.getEnd()); [EOL]     assertEquals(ISOChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 514,520
public void testSetIntoInterval_Object_Chronology7() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     StringConverter.INSTANCE.setInto(m, "2003-08-09/2004-06-09", BuddhistChronology.getInstance()); [EOL]     assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getEnd()); [EOL]     assertEquals(BuddhistChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 522,528
public void testSetIntoInterval_Object_Chronology8() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     StringConverter.INSTANCE.setInto(m, "2003-08-09T+06:00/2004-06-09T+07:00", BuddhistChronology.getInstance(EIGHT)); [EOL]     assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SIX)).withZone(EIGHT), m.getStart()); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SEVEN)).withZone(EIGHT), m.getEnd()); [EOL]     assertEquals(BuddhistChronology.getInstance(EIGHT), m.getChronology()); [EOL] } <line_num>: 530,536
public void testSetIntoIntervalEx_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 538,544
public void testSetIntoIntervalEx_Object_Chronology2() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 546,552
public void testSetIntoIntervalEx_Object_Chronology3() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P1Y/", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 554,560
public void testSetIntoIntervalEx_Object_Chronology4() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "/P1Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 562,568
public void testSetIntoIntervalEx_Object_Chronology5() throws Exception { [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L); [EOL]     try { [EOL]         StringConverter.INSTANCE.setInto(m, "P1Y/P2Y", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 570,576
public void testToString() { [EOL]     assertEquals("Converter[java.lang.String]", StringConverter.INSTANCE.toString()); [EOL] } <line_num>: 579,581
