public TestNullConverter(String name) { [EOL]     super(name); [EOL] } <line_num>: 74,76
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 66,68
public static TestSuite suite() { [EOL]     return new TestSuite(TestNullConverter.class); [EOL] } <line_num>: 70,72
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.forID("Europe/London")); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL]     ISO = ISOChronology.getInstance(); [EOL]     JULIAN = JulianChronology.getInstance(); [EOL] } <line_num>: 78,89
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 91,99
public void testSingleton() throws Exception { [EOL]     Class cls = NullConverter.class; [EOL]     assertEquals(false, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(false, Modifier.isPublic(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 102,116
public void testSupportedType() throws Exception { [EOL]     assertEquals(null, NullConverter.INSTANCE.getSupportedType()); [EOL] } <line_num>: 119,121
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, JULIAN)); [EOL]     assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, (Chronology) null)); [EOL] } <line_num>: 124,127
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, NullConverter.INSTANCE.getChronology(null, PARIS)); [EOL]     assertEquals(ISO, NullConverter.INSTANCE.getChronology(null, (DateTimeZone) null)); [EOL] } <line_num>: 130,133
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JULIAN, NullConverter.INSTANCE.getChronology(null, JULIAN)); [EOL]     assertEquals(ISO, NullConverter.INSTANCE.getChronology(null, (Chronology) null)); [EOL] } <line_num>: 135,138
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = new int[] { 10 + 1, 20, 30, 40 }; [EOL]     int[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, ISOChronology.getInstance()); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] } <line_num>: 141,146
public void testGetDurationMillis_Object() throws Exception { [EOL]     assertEquals(0L, NullConverter.INSTANCE.getDurationMillis(null)); [EOL] } <line_num>: 149,151
public void testGetPeriodType_Object() throws Exception { [EOL]     assertEquals(PeriodType.standard(), NullConverter.INSTANCE.getPeriodType(null)); [EOL] } <line_num>: 154,157
public void testSetInto_Object() throws Exception { [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.millis()); [EOL]     NullConverter.INSTANCE.setInto(m, null, null); [EOL]     assertEquals(0L, m.getMillis()); [EOL] } <line_num>: 159,163
public void testIsReadableInterval_Object_Chronology() throws Exception { [EOL]     assertEquals(false, NullConverter.INSTANCE.isReadableInterval(null, null)); [EOL] } <line_num>: 166,168
public void testSetInto_Object_Chronology1() throws Exception { [EOL]     MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance()); [EOL]     NullConverter.INSTANCE.setInto(m, null, null); [EOL]     assertEquals(TEST_TIME_NOW, m.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, m.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 170,176
public void testSetInto_Object_Chronology2() throws Exception { [EOL]     MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance()); [EOL]     NullConverter.INSTANCE.setInto(m, null, CopticChronology.getInstance()); [EOL]     assertEquals(TEST_TIME_NOW, m.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, m.getEndMillis()); [EOL]     assertEquals(CopticChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 178,184
public void testToString() { [EOL]     assertEquals("Converter[null]", NullConverter.INSTANCE.toString()); [EOL] } <line_num>: 187,189
