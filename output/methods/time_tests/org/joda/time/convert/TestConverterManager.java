public TestConverterManager(String name) { [EOL]     super(name); [EOL] } <line_num>: 113,115
public PermissionCollection getPermissions(CodeSource codesource) { [EOL]     Permissions p = new Permissions(); [EOL]     p.add(new AllPermission()); [EOL]     return p; [EOL] } <line_num>: 79,83
public void refresh() { [EOL] } <line_num>: 84,85
public boolean implies(ProtectionDomain domain, Permission permission) { [EOL]     if (permission instanceof JodaTimePermission) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 86,92
public PermissionCollection getPermissions(CodeSource codesource) { [EOL]     Permissions p = new Permissions(); [EOL]     p.add(new AllPermission()); [EOL]     return p; [EOL] } <line_num>: 95,99
public void refresh() { [EOL] } <line_num>: 100,101
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 105,107
public static TestSuite suite() { [EOL]     return new TestSuite(TestConverterManager.class); [EOL] } <line_num>: 109,111
public void testSingleton() throws Exception { [EOL]     Class cls = ConverterManager.class; [EOL]     assertEquals(true, Modifier.isPublic(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(true, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 118,128
public void testGetInstantConverter() { [EOL]     InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]     assertEquals(ReadableInstant.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new Date()); [EOL]     assertEquals(Date.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(new GregorianCalendar()); [EOL]     assertEquals(Calendar.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getInstantConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getInstantConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 131,154
public void testGetInstantConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removeInstantConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getInstantConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addInstantConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 156,167
public long getInstantMillis(Object object, Chronology chrono) { [EOL]     return 0; [EOL] } <line_num>: 171,171
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 172,172
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 173,173
public Class getSupportedType() { [EOL]     return ReadableDateTime.class; [EOL] } <line_num>: 174,174
public void testGetInstantConverterOKMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 169,185
public long getInstantMillis(Object object, Chronology chrono) { [EOL]     return 0; [EOL] } <line_num>: 189,189
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 190,190
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 191,191
public Class getSupportedType() { [EOL]     return Serializable.class; [EOL] } <line_num>: 192,192
public void testGetInstantConverterBadMultipleMatches() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Serializable.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(c); [EOL]         try { [EOL]             ConverterManager.getInstance().getInstantConverter(new DateTime()); [EOL]             fail(); [EOL]         } catch (IllegalStateException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 187,206
public void testGetInstantConverters() { [EOL]     InstantConverter[] array = ConverterManager.getInstance().getInstantConverters(); [EOL]     assertEquals(6, array.length); [EOL] } <line_num>: 209,212
public long getInstantMillis(Object object, Chronology chrono) { [EOL]     return 0; [EOL] } <line_num>: 217,217
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 218,218
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 219,219
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 220,220
public void testAddInstantConverter1() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         InstantConverter removed = ConverterManager.getInstance().addInstantConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getInstantConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(7, ConverterManager.getInstance().getInstantConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(c); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 215,231
public long getInstantMillis(Object object, Chronology chrono) { [EOL]     return 0; [EOL] } <line_num>: 235,235
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 236,236
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 237,237
public Class getSupportedType() { [EOL]     return String.class; [EOL] } <line_num>: 238,238
public void testAddInstantConverter2() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         InstantConverter removed = ConverterManager.getInstance().addInstantConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getInstantConverter("").getSupportedType()); [EOL]         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 233,249
public void testAddInstantConverter3() { [EOL]     InstantConverter removed = ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 251,255
public void testAddInstantConverter4() { [EOL]     InstantConverter removed = ConverterManager.getInstance().addInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 257,261
public void testAddInstantConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 263,279
public void testRemoveInstantConverter1() { [EOL]     try { [EOL]         InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(5, ConverterManager.getInstance().getInstantConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 282,291
public long getInstantMillis(Object object, Chronology chrono) { [EOL]     return 0; [EOL] } <line_num>: 295,295
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 296,296
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 297,297
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 298,298
public void testRemoveInstantConverter2() { [EOL]     InstantConverter c = new InstantConverter() { [EOL]  [EOL]         public long getInstantMillis(Object object, Chronology chrono) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 293,303
public void testRemoveInstantConverter3() { [EOL]     InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 305,309
public void testRemoveInstantConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(6, ConverterManager.getInstance().getInstantConverters().length); [EOL] } <line_num>: 311,327
public void testGetPartialConverter() { [EOL]     PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay()); [EOL]     assertEquals(ReadablePartial.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new DateTime()); [EOL]     assertEquals(ReadableInstant.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new Date()); [EOL]     assertEquals(Date.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(new GregorianCalendar()); [EOL]     assertEquals(Calendar.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPartialConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPartialConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 333,359
public void testGetPartialConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePartialConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPartialConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 361,372
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 376,376
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]     return null; [EOL] } <line_num>: 377,377
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 378,378
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 379,379
public Class getSupportedType() { [EOL]     return ReadableDateTime.class; [EOL] } <line_num>: 380,380
public void testGetPartialConverterOKMultipleMatches() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return ReadableDateTime.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addPartialConverter(c); [EOL]         PartialConverter ok = ConverterManager.getInstance().getPartialConverter(new DateTime()); [EOL]         assertEquals(ReadableDateTime.class, ok.getSupportedType()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removePartialConverter(c); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 374,391
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 395,395
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]     return null; [EOL] } <line_num>: 396,396
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 397,397
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 398,398
public Class getSupportedType() { [EOL]     return Serializable.class; [EOL] } <line_num>: 399,399
public void testGetPartialConverterBadMultipleMatches() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Serializable.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addPartialConverter(c); [EOL]         try { [EOL]             ConverterManager.getInstance().getPartialConverter(new DateTime()); [EOL]             fail(); [EOL]         } catch (IllegalStateException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().removePartialConverter(c); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 393,413
public void testGetPartialConverters() { [EOL]     PartialConverter[] array = ConverterManager.getInstance().getPartialConverters(); [EOL]     assertEquals(PARTIAL_SIZE, array.length); [EOL] } <line_num>: 416,419
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 424,424
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]     return null; [EOL] } <line_num>: 425,425
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 426,426
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 427,427
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 428,428
public void testAddPartialConverter1() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getPartialConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(PARTIAL_SIZE + 1, ConverterManager.getInstance().getPartialConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removePartialConverter(c); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 422,439
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 443,443
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]     return null; [EOL] } <line_num>: 444,444
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 445,445
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 446,446
public Class getSupportedType() { [EOL]     return String.class; [EOL] } <line_num>: 447,447
public void testAddPartialConverter2() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getPartialConverter("").getSupportedType()); [EOL]         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 441,458
public void testAddPartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 460,464
public void testAddPartialConverter4() { [EOL]     PartialConverter removed = ConverterManager.getInstance().addPartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 466,470
public void testAddPartialConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 472,488
public void testRemovePartialConverter1() { [EOL]     try { [EOL]         PartialConverter removed = ConverterManager.getInstance().removePartialConverter(StringConverter.INSTANCE); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(PARTIAL_SIZE - 1, ConverterManager.getInstance().getPartialConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 491,500
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 504,504
public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]     return null; [EOL] } <line_num>: 505,505
public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]     return null; [EOL] } <line_num>: 506,506
public Chronology getChronology(Object object, Chronology chrono) { [EOL]     return null; [EOL] } <line_num>: 507,507
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 508,508
public void testRemovePartialConverter2() { [EOL]     PartialConverter c = new PartialConverter() { [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, DateTimeZone zone) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Chronology getChronology(Object object, Chronology chrono) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 502,513
public void testRemovePartialConverter3() { [EOL]     PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 515,519
public void testRemovePartialConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length); [EOL] } <line_num>: 521,537
public void testGetDurationConverter() { [EOL]     DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L)); [EOL]     assertEquals(Long.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getDurationConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getDurationConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 543,563
public void testGetDurationConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removeDurationConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getDurationConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 565,576
public void testGetDurationConverters() { [EOL]     DurationConverter[] array = ConverterManager.getInstance().getDurationConverters(); [EOL]     assertEquals(DURATION_SIZE, array.length); [EOL] } <line_num>: 579,582
public long getDurationMillis(Object object) { [EOL]     return 0; [EOL] } <line_num>: 587,587
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 588,588
public void testAddDurationConverter1() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getDurationConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(DURATION_SIZE + 1, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeDurationConverter(c); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 585,599
public long getDurationMillis(Object object) { [EOL]     return 0; [EOL] } <line_num>: 603,603
public Class getSupportedType() { [EOL]     return String.class; [EOL] } <line_num>: 604,604
public void testAddDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getDurationConverter("").getSupportedType()); [EOL]         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 601,615
public void testAddDurationConverter3() { [EOL]     DurationConverter removed = ConverterManager.getInstance().addDurationConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 617,621
public void testAddDurationConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 623,639
public void testRemoveDurationConverter1() { [EOL]     try { [EOL]         DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(DURATION_SIZE - 1, ConverterManager.getInstance().getDurationConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 642,651
public long getDurationMillis(Object object) { [EOL]     return 0; [EOL] } <line_num>: 655,655
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 656,656
public void testRemoveDurationConverter2() { [EOL]     DurationConverter c = new DurationConverter() { [EOL]  [EOL]         public long getDurationMillis(Object object) { [EOL]             return 0; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 653,661
public void testRemoveDurationConverter3() { [EOL]     DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 663,667
public void testRemoveDurationConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length); [EOL] } <line_num>: 669,685
public void testGetPeriodConverter() { [EOL]     PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     assertEquals(ReadablePeriod.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L)); [EOL]     assertEquals(ReadableDuration.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getPeriodConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 691,711
public void testGetPeriodConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getPeriodConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 713,724
public void testGetPeriodConverters() { [EOL]     PeriodConverter[] array = ConverterManager.getInstance().getPeriodConverters(); [EOL]     assertEquals(PERIOD_SIZE, array.length); [EOL] } <line_num>: 727,730
public void setInto(ReadWritablePeriod duration, Object object, Chronology c) { [EOL] } <line_num>: 735,735
public PeriodType getPeriodType(Object object) { [EOL]     return null; [EOL] } <line_num>: 736,736
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 737,737
public void testAddPeriodConverter1() { [EOL]     PeriodConverter c = new PeriodConverter() { [EOL]  [EOL]         public void setInto(ReadWritablePeriod duration, Object object, Chronology c) { [EOL]         } [EOL]  [EOL]         public PeriodType getPeriodType(Object object) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         PeriodConverter removed = ConverterManager.getInstance().addPeriodConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(PERIOD_SIZE + 1, ConverterManager.getInstance().getPeriodConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removePeriodConverter(c); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 733,748
public void setInto(ReadWritablePeriod duration, Object object, Chronology c) { [EOL] } <line_num>: 752,752
public PeriodType getPeriodType(Object object) { [EOL]     return null; [EOL] } <line_num>: 753,753
public Class getSupportedType() { [EOL]     return String.class; [EOL] } <line_num>: 754,754
public void testAddPeriodConverter2() { [EOL]     PeriodConverter c = new PeriodConverter() { [EOL]  [EOL]         public void setInto(ReadWritablePeriod duration, Object object, Chronology c) { [EOL]         } [EOL]  [EOL]         public PeriodType getPeriodType(Object object) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         PeriodConverter removed = ConverterManager.getInstance().addPeriodConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getPeriodConverter("").getSupportedType()); [EOL]         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 750,765
public void testAddPeriodConverter3() { [EOL]     PeriodConverter removed = ConverterManager.getInstance().addPeriodConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 767,771
public void testAddPeriodConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().addPeriodConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 773,789
public void testRemovePeriodConverter1() { [EOL]     try { [EOL]         PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(StringConverter.INSTANCE); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(PERIOD_SIZE - 1, ConverterManager.getInstance().getPeriodConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addPeriodConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 792,801
public void setInto(ReadWritablePeriod duration, Object object, Chronology c) { [EOL] } <line_num>: 805,805
public PeriodType getPeriodType(Object object) { [EOL]     return null; [EOL] } <line_num>: 806,806
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 807,807
public void testRemovePeriodConverter2() { [EOL]     PeriodConverter c = new PeriodConverter() { [EOL]  [EOL]         public void setInto(ReadWritablePeriod duration, Object object, Chronology c) { [EOL]         } [EOL]  [EOL]         public PeriodType getPeriodType(Object object) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 803,812
public void testRemovePeriodConverter3() { [EOL]     PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 814,818
public void testRemovePeriodConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().removePeriodConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length); [EOL] } <line_num>: 820,836
public void testGetIntervalConverter() { [EOL]     IntervalConverter c = ConverterManager.getInstance().getIntervalConverter(new Interval(0L, 1000L)); [EOL]     assertEquals(ReadableInterval.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getIntervalConverter(""); [EOL]     assertEquals(String.class, c.getSupportedType()); [EOL]     c = ConverterManager.getInstance().getIntervalConverter(null); [EOL]     assertEquals(null, c.getSupportedType()); [EOL]     try { [EOL]         ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ConverterManager.getInstance().getIntervalConverter(new Long(0)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 842,860
public void testGetIntervalConverterRemovedNull() { [EOL]     try { [EOL]         ConverterManager.getInstance().removeIntervalConverter(NullConverter.INSTANCE); [EOL]         try { [EOL]             ConverterManager.getInstance().getIntervalConverter(null); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(NullConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 862,873
public void testGetIntervalConverters() { [EOL]     IntervalConverter[] array = ConverterManager.getInstance().getIntervalConverters(); [EOL]     assertEquals(INTERVAL_SIZE, array.length); [EOL] } <line_num>: 876,879
public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]     return false; [EOL] } <line_num>: 884,884
public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL] } <line_num>: 885,885
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 886,886
public void testAddIntervalConverter1() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c); [EOL]         assertEquals(null, removed); [EOL]         assertEquals(Boolean.class, ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE).getSupportedType()); [EOL]         assertEquals(INTERVAL_SIZE + 1, ConverterManager.getInstance().getIntervalConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 882,897
public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]     return false; [EOL] } <line_num>: 901,901
public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL] } <line_num>: 902,902
public Class getSupportedType() { [EOL]     return String.class; [EOL] } <line_num>: 903,903
public void testAddIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(String.class, ConverterManager.getInstance().getIntervalConverter("").getSupportedType()); [EOL]         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 899,914
public void testAddIntervalConverter3() { [EOL]     IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 916,920
public void testAddIntervalConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 922,938
public void testRemoveIntervalConverter1() { [EOL]     try { [EOL]         IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(StringConverter.INSTANCE); [EOL]         assertEquals(StringConverter.INSTANCE, removed); [EOL]         assertEquals(INTERVAL_SIZE - 1, ConverterManager.getInstance().getIntervalConverters().length); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 941,950
public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]     return false; [EOL] } <line_num>: 954,954
public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL] } <line_num>: 955,955
public Class getSupportedType() { [EOL]     return Boolean.class; [EOL] } <line_num>: 956,956
public void testRemoveIntervalConverter2() { [EOL]     IntervalConverter c = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]         } [EOL]  [EOL]         public Class getSupportedType() { [EOL]             return Boolean.class; [EOL]         } [EOL]     }; [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 952,961
public void testRemoveIntervalConverter3() { [EOL]     IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(null); [EOL]     assertEquals(null, removed); [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 963,967
public void testRemoveIntervalConverterSecurity() { [EOL]     if (OLD_JDK) { [EOL]         return; [EOL]     } [EOL]     try { [EOL]         Policy.setPolicy(RESTRICT); [EOL]         System.setSecurityManager(new SecurityManager()); [EOL]         ConverterManager.getInstance().removeIntervalConverter(StringConverter.INSTANCE); [EOL]         fail(); [EOL]     } catch (SecurityException ex) { [EOL]     } finally { [EOL]         System.setSecurityManager(null); [EOL]         Policy.setPolicy(ALLOW); [EOL]     } [EOL]     assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length); [EOL] } <line_num>: 969,985
public void testToString() { [EOL]     assertEquals("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", ConverterManager.getInstance().toString()); [EOL] } <line_num>: 988,990
