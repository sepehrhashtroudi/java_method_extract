public TestDateConverter(String name) { [EOL]     super(name); [EOL] } <line_num>: 55,57
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 47,49
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateConverter.class); [EOL] } <line_num>: 51,53
protected void setUp() throws Exception { [EOL]     JULIAN = JulianChronology.getInstance(); [EOL]     COPTIC = CopticChronology.getInstance(); [EOL]     ISO = ISOChronology.getInstance(); [EOL] } <line_num>: 59,63
public void testSingleton() throws Exception { [EOL]     Class cls = DateConverter.class; [EOL]     assertEquals(false, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(false, Modifier.isPublic(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 66,80
public void testSupportedType() throws Exception { [EOL]     assertEquals(Date.class, DateConverter.INSTANCE.getSupportedType()); [EOL] } <line_num>: 83,85
public void testGetInstantMillis_Object_Chronology() throws Exception { [EOL]     Date date = new Date(123L); [EOL]     long millis = DateConverter.INSTANCE.getInstantMillis(date, JULIAN); [EOL]     assertEquals(123L, millis); [EOL]     assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null)); [EOL] } <line_num>: 88,93
public void testGetChronology_Object_Zone() throws Exception { [EOL]     assertEquals(ISO_PARIS, DateConverter.INSTANCE.getChronology(new Date(123L), PARIS)); [EOL]     assertEquals(ISO, DateConverter.INSTANCE.getChronology(new Date(123L), (DateTimeZone) null)); [EOL] } <line_num>: 96,99
public void testGetChronology_Object_Chronology() throws Exception { [EOL]     assertEquals(JULIAN, DateConverter.INSTANCE.getChronology(new Date(123L), JULIAN)); [EOL]     assertEquals(ISO, DateConverter.INSTANCE.getChronology(new Date(123L), (Chronology) null)); [EOL] } <line_num>: 101,104
public void testGetPartialValues() throws Exception { [EOL]     TimeOfDay tod = new TimeOfDay(); [EOL]     int[] expected = COPTIC.get(tod, 12345678L); [EOL]     int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), COPTIC); [EOL]     assertEquals(true, Arrays.equals(expected, actual)); [EOL] } <line_num>: 107,112
public void testToString() { [EOL]     assertEquals("Converter[java.util.Date]", DateConverter.INSTANCE.toString()); [EOL] } <line_num>: 115,117
