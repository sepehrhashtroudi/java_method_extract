public TestReadableIntervalConverter(String name) { [EOL]     super(name); [EOL] } <line_num>: 61,63
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 53,55
public static TestSuite suite() { [EOL]     return new TestSuite(TestReadableIntervalConverter.class); [EOL] } <line_num>: 57,59
protected void setUp() throws Exception { [EOL]     JULIAN = JulianChronology.getInstance(); [EOL]     ISO = ISOChronology.getInstance(); [EOL] } <line_num>: 65,68
public void testSingleton() throws Exception { [EOL]     Class cls = ReadableIntervalConverter.class; [EOL]     assertEquals(false, Modifier.isPublic(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(cls.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(cls.getModifiers())); [EOL]     Constructor con = cls.getDeclaredConstructor((Class[]) null); [EOL]     assertEquals(1, cls.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(con.getModifiers())); [EOL]     Field fld = cls.getDeclaredField("INSTANCE"); [EOL]     assertEquals(false, Modifier.isPublic(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isProtected(fld.getModifiers())); [EOL]     assertEquals(false, Modifier.isPrivate(fld.getModifiers())); [EOL] } <line_num>: 71,85
public void testSupportedType() throws Exception { [EOL]     assertEquals(ReadableInterval.class, ReadableIntervalConverter.INSTANCE.getSupportedType()); [EOL] } <line_num>: 88,90
public void testGetDurationMillis_Object() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     assertEquals(123L, ReadableIntervalConverter.INSTANCE.getDurationMillis(i)); [EOL] } <line_num>: 93,96
public void testGetPeriodType_Object() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     assertEquals(PeriodType.standard(), ReadableIntervalConverter.INSTANCE.getPeriodType(i)); [EOL] } <line_num>: 99,103
public void testSetIntoPeriod_Object1() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.millis()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(0, m.getDays()); [EOL]     assertEquals(0, m.getHours()); [EOL]     assertEquals(0, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] } <line_num>: 105,117
public void testSetIntoPeriod_Object2() throws Exception { [EOL]     Interval i = new Interval(100L, 223L); [EOL]     MutablePeriod m = new MutablePeriod(PeriodType.millis()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, CopticChronology.getInstance()); [EOL]     assertEquals(0, m.getYears()); [EOL]     assertEquals(0, m.getMonths()); [EOL]     assertEquals(0, m.getWeeks()); [EOL]     assertEquals(0, m.getDays()); [EOL]     assertEquals(0, m.getHours()); [EOL]     assertEquals(0, m.getMinutes()); [EOL]     assertEquals(0, m.getSeconds()); [EOL]     assertEquals(123, m.getMillis()); [EOL] } <line_num>: 119,131
public void testIsReadableInterval_Object_Chronology() throws Exception { [EOL]     Interval i = new Interval(1234L, 5678L); [EOL]     assertEquals(true, ReadableIntervalConverter.INSTANCE.isReadableInterval(i, null)); [EOL] } <line_num>: 134,137
public void testSetIntoInterval_Object1() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(CopticChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 139,146
public void testSetIntoInterval_Object2() throws Exception { [EOL]     Interval i = new Interval(0L, 123L, CopticChronology.getInstance()); [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance()); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 148,155
public Chronology getChronology() { [EOL]     return null; [EOL] } <line_num>: 159,161
public void testSetIntoInterval_Object3() throws Exception { [EOL]     MutableInterval i = new MutableInterval(0L, 123L) { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance()); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 157,168
public Chronology getChronology() { [EOL]     return null; [EOL] } <line_num>: 172,174
public void testSetIntoInterval_Object4() throws Exception { [EOL]     MutableInterval i = new MutableInterval(0L, 123L) { [EOL]  [EOL]         public Chronology getChronology() { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance()); [EOL]     ReadableIntervalConverter.INSTANCE.setInto(m, i, null); [EOL]     assertEquals(0L, m.getStartMillis()); [EOL]     assertEquals(123L, m.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), m.getChronology()); [EOL] } <line_num>: 170,181
public void testToString() { [EOL]     assertEquals("Converter[org.joda.time.ReadableInterval]", ReadableIntervalConverter.INSTANCE.toString()); [EOL] } <line_num>: 184,186
