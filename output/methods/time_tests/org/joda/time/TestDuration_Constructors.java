public TestDuration_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 73,75
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 65,67
public static TestSuite suite() { [EOL]     return new TestSuite(TestDuration_Constructors.class); [EOL] } <line_num>: 69,71
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 77,85
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 87,95
public void testZERO() throws Throwable { [EOL]     Duration test = Duration.ZERO; [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 101,104
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new Duration(3200), Duration.parse("PT3.2S")); [EOL]     assertEquals(new Duration(6000), Duration.parse("PT6S")); [EOL] } <line_num>: 107,110
public void testFactory_standardDays_long() throws Throwable { [EOL]     Duration test = Duration.standardDays(1); [EOL]     assertEquals(24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(2); [EOL]     assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardDays(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] } <line_num>: 113,122
public void testFactory_standardHours_long() throws Throwable { [EOL]     Duration test = Duration.standardHours(1); [EOL]     assertEquals(60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardHours(2); [EOL]     assertEquals(2L * 60L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardHours(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] } <line_num>: 125,134
public void testFactory_standardMinutes_long() throws Throwable { [EOL]     Duration test = Duration.standardMinutes(1); [EOL]     assertEquals(60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardMinutes(2); [EOL]     assertEquals(2L * 60L * 1000L, test.getMillis()); [EOL]     test = Duration.standardMinutes(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] } <line_num>: 137,146
public void testFactory_standardSeconds_long() throws Throwable { [EOL]     Duration test = Duration.standardSeconds(1); [EOL]     assertEquals(1000L, test.getMillis()); [EOL]     test = Duration.standardSeconds(2); [EOL]     assertEquals(2L * 1000L, test.getMillis()); [EOL]     test = Duration.standardSeconds(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] } <line_num>: 149,158
public void testFactory_millis_long() throws Throwable { [EOL]     Duration test = Duration.millis(1); [EOL]     assertEquals(1L, test.getMillis()); [EOL]     test = Duration.millis(2); [EOL]     assertEquals(2L, test.getMillis()); [EOL]     test = Duration.millis(0); [EOL]     assertSame(Duration.ZERO, test); [EOL] } <line_num>: 161,170
public void testConstructor_long1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Duration test = new Duration(length); [EOL]     assertEquals(length, test.getMillis()); [EOL] } <line_num>: 173,180
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration test = new Duration(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] } <line_num>: 183,188
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] } <line_num>: 191,196
public void testConstructor_RI_RI2() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 198,203
public void testConstructor_RI_RI3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.getMillis()); [EOL] } <line_num>: 205,210
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = null; [EOL]     Duration test = new Duration(dt1, dt2); [EOL]     assertEquals(0L, test.getMillis()); [EOL] } <line_num>: 212,217
public void testConstructor_Object1() throws Throwable { [EOL]     Duration test = new Duration("PT72.345S"); [EOL]     assertEquals(72345, test.getMillis()); [EOL] } <line_num>: 223,226
public void testConstructor_Object2() throws Throwable { [EOL]     Duration test = new Duration((Object) null); [EOL]     assertEquals(0L, test.getMillis()); [EOL] } <line_num>: 228,231
public void testConstructor_Object3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     Long base = new Long(length); [EOL]     Duration test = new Duration(base); [EOL]     assertEquals(length, test.getMillis()); [EOL] } <line_num>: 233,241
public void testConstructor_Object4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration base = new Duration(dt1, dt2); [EOL]     Duration test = new Duration(base); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] } <line_num>: 243,249
public void testConstructor_Object5() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     Duration test = new Duration(base); [EOL]     assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis()); [EOL] } <line_num>: 251,257
