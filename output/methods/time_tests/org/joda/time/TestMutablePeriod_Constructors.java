public TestMutablePeriod_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 76,78
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 68,70
public static TestSuite suite() { [EOL]     return new TestSuite(TestMutablePeriod_Constructors.class); [EOL] } <line_num>: 72,74
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 80,88
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 90,98
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse("P1Y2M3W4DT5H6M7.890S")); [EOL] } <line_num>: 101,103
public void testConstructor1() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 109,120
public void testConstructor_PeriodType1() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 126,137
public void testConstructor_PeriodType2() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod((PeriodType) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 139,150
public void testConstructor_long1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 153,168
public void testConstructor_long2() throws Throwable { [EOL]     long length = 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 170,185
public void testConstructor_long3() throws Throwable { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     MutablePeriod test = new MutablePeriod(length); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 187,204
public void testConstructor_long_PeriodType1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, (PeriodType) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 207,222
public void testConstructor_long_PeriodType2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.millis()); [EOL]     assertEquals(PeriodType.millis(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(length, test.getMillis()); [EOL] } <line_num>: 224,239
public void testConstructor_long_PeriodType3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.standard()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 241,256
public void testConstructor_long_PeriodType4() throws Throwable { [EOL]     long length = 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 258,273
public void testConstructor_long_Chronology1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 276,291
public void testConstructor_long_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 293,308
public void testConstructor_long_Chronology3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 310,325
public void testConstructor_long_PeriodType_Chronology1() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance()); [EOL]     assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 328,343
public void testConstructor_long_PeriodType_Chronology2() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 345,360
public void testConstructor_long_PeriodType_Chronology3() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 362,377
public void testConstructor_long_PeriodType_Chronology4() throws Throwable { [EOL]     long length = 4 * DateTimeConstants.MILLIS_PER_DAY + 5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE + 7 * DateTimeConstants.MILLIS_PER_SECOND + 8; [EOL]     MutablePeriod test = new MutablePeriod(length, (PeriodType) null, (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((4 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 379,394
public void testConstructor_4int1() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(5, 6, 7, 8); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 400,411
public void testConstructor_8int1() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 417,428
public void testConstructor_8int__PeriodType1() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 434,445
public void testConstructor_8int__PeriodType2() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 447,458
public void testConstructor_8int__PeriodType3() throws Throwable { [EOL]     try { [EOL]         new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.dayTime()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 460,465
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 468,481
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 483,496
public void testConstructor_long_long_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 499,512
public void testConstructor_long_long_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 514,527
public void testConstructor_long_long_PeriodType3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 529,542
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 545,558
public void testConstructor_long_long_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (Chronology) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 560,573
public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance()); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 576,589
public void testConstructor_long_long_PeriodType_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 591,604
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 607,620
public void testConstructor_RI_RI2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 622,635
public void testConstructor_RI_RI3() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 637,650
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     DateTime dt2 = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(-3, test.getYears()); [EOL]     assertEquals(-1, test.getMonths()); [EOL]     assertEquals(-1, test.getWeeks()); [EOL]     assertEquals(-1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(-1, test.getMinutes()); [EOL]     assertEquals(-1, test.getSeconds()); [EOL]     assertEquals(-1, test.getMillis()); [EOL] } <line_num>: 652,665
public void testConstructor_RI_RI5() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 667,680
public void testConstructor_RI_RI_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 683,696
public void testConstructor_RI_RI_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 698,711
public void testConstructor_RI_RI_PeriodType3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 713,726
public void testConstructor_RI_RI_PeriodType4() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(1, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 728,741
public void testConstructor_RI_RI_PeriodType5() throws Throwable { [EOL]     DateTime dt1 = null; [EOL]     DateTime dt2 = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 743,756
public void testConstructor_RI_RD1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 759,773
public void testConstructor_RI_RD2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 775,788
public void testConstructor_RI_RD_PeriodType1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Duration dur = new Interval(dt1, dt2).toDuration(); [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur, PeriodType.yearDayTime()); [EOL]     assertEquals(PeriodType.yearDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(31, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 791,805
public void testConstructor_RI_RD_PeriodType2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Duration dur = null; [EOL]     MutablePeriod test = new MutablePeriod(dt1, dur, (PeriodType) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 807,820
public void testConstructor_Object1() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod("P1Y2M3D"); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 826,837
public void testConstructor_Object2() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod((Object) null); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 839,850
public void testConstructor_Object3() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime())); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] } <line_num>: 852,863
public void testConstructor_Object4() throws Throwable { [EOL]     Period base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.standard()); [EOL]     MutablePeriod test = new MutablePeriod(base); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(1, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(1, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(1, test.getMinutes()); [EOL]     assertEquals(1, test.getSeconds()); [EOL]     assertEquals(1, test.getMillis()); [EOL] } <line_num>: 865,877
public void testConstructor_Object_PeriodType1() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod("P1Y2M3D", PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(3, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 883,894
public void testConstructor_Object_PeriodType2() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod((Object) null, PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 896,907
public void testConstructor_Object_PeriodType3() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] } <line_num>: 909,920
public void testConstructor_Object_PeriodType4() throws Throwable { [EOL]     MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null); [EOL]     assertEquals(PeriodType.dayTime(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(1, test.getHours()); [EOL]     assertEquals(2, test.getMinutes()); [EOL]     assertEquals(3, test.getSeconds()); [EOL]     assertEquals(4, test.getMillis()); [EOL] } <line_num>: 922,933
public void testConstructor_Object_Chronology1() throws Throwable { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstance()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals((450 * 24) + 5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 936,952
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(64, test.getWeeks()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL] } <line_num>: 954,970
