public TestPartial_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 55,57
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 47,49
public static TestSuite suite() { [EOL]     return new TestSuite(TestPartial_Constructors.class); [EOL] } <line_num>: 51,53
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 59,63
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 65,69
public void testConstructor() throws Throwable { [EOL]     Partial test = new Partial(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.size()); [EOL] } <line_num>: 75,79
public void testConstructor_Chrono() throws Throwable { [EOL]     Partial test = new Partial((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.size()); [EOL]     test = new Partial(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(0, test.size()); [EOL] } <line_num>: 85,93
public void testConstructor_Type_int() throws Throwable { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(4, test.getValue(0)); [EOL]     assertEquals(4, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL] } <line_num>: 99,106
public void testConstructorEx1_Type_int() throws Throwable { [EOL]     try { [EOL]         new Partial(null, 4); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] } <line_num>: 111,118
public void testConstructorEx2_Type_int() throws Throwable { [EOL]     try { [EOL]         new Partial(DateTimeFieldType.dayOfYear(), 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 123,130
public void testConstructor_Type_int_Chrono() throws Throwable { [EOL]     Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(4, test.getValue(0)); [EOL]     assertEquals(4, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL] } <line_num>: 136,143
public void testConstructorEx_Type_int_Chrono() throws Throwable { [EOL]     try { [EOL]         new Partial(null, 4, ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] } <line_num>: 148,155
public void testConstructorEx2_Type_int_Chrono() throws Throwable { [EOL]     try { [EOL]         new Partial(DateTimeFieldType.dayOfYear(), 0, ISO_UTC); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 160,167
public void testConstructor_TypeArray_intArray() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 33 }; [EOL]     Partial test = new Partial(types, values); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2, test.size()); [EOL]     assertEquals(2005, test.getValue(0)); [EOL]     assertEquals(2005, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(33, test.getValue(1)); [EOL]     assertEquals(33, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, Arrays.equals(test.getFieldTypes(), types)); [EOL]     assertEquals(true, Arrays.equals(test.getValues(), values)); [EOL] } <line_num>: 173,190
public void testConstructor2_TypeArray_intArray() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[0]; [EOL]     int[] values = new int[0]; [EOL]     Partial test = new Partial(types, values); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(0, test.size()); [EOL] } <line_num>: 195,201
public void testConstructorEx1_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial((DateTimeFieldType[]) null, new int[] { 1 }); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] } <line_num>: 206,213
public void testConstructorEx3_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] } <line_num>: 218,225
public void testConstructorEx5_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }, new int[2]); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "same length"); [EOL]     } [EOL] } <line_num>: 230,237
public void testConstructorEx6_TypeArray_intArray() throws Throwable { [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { null, DateTimeFieldType.dayOfYear() }, new int[2]); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "contain null"); [EOL]     } [EOL]     try { [EOL]         new Partial(new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), null }, new int[2]); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "contain null"); [EOL]     } [EOL] } <line_num>: 242,255
public void testConstructorEx7_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must be in order", "largest-smallest"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must be in order", "largest-smallest"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must be in order", "largest-smallest"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must be in order", "largest-smallest"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must be in order", "largest-smallest"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must be in order", "largest-smallest"); [EOL]     } [EOL] } <line_num>: 260,315
public void testConstructorEx8_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 1, 1, 1 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL]     types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not", "duplicate"); [EOL]     } [EOL] } <line_num>: 320,357
public void testConstructorEx9_TypeArray_intArray() throws Throwable { [EOL]     int[] values = new int[] { 3, 0 }; [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfWeek() }; [EOL]     try { [EOL]         new Partial(types, values); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 362,372
public void testConstructor_TypeArray_intArray_Chrono() throws Throwable { [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 33 }; [EOL]     Partial test = new Partial(types, values, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(2, test.size()); [EOL]     assertEquals(2005, test.getValue(0)); [EOL]     assertEquals(2005, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(33, test.getValue(1)); [EOL]     assertEquals(33, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, Arrays.equals(test.getFieldTypes(), types)); [EOL]     assertEquals(true, Arrays.equals(test.getValues(), values)); [EOL] } <line_num>: 378,395
@SuppressWarnings("deprecation") [EOL] public void testConstructor_Partial() throws Throwable { [EOL]     YearMonthDay ymd = new YearMonthDay(2005, 6, 25, GREGORIAN_PARIS); [EOL]     Partial test = new Partial(ymd); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(3, test.size()); [EOL]     assertEquals(2005, test.getValue(0)); [EOL]     assertEquals(2005, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(25, test.getValue(2)); [EOL]     assertEquals(25, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL] } <line_num>: 401,416
public void testConstructorEx_Partial() throws Throwable { [EOL]     try { [EOL]         new Partial((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]         assertMessageContains(ex, "must not be null"); [EOL]     } [EOL] } <line_num>: 421,428
private void assertMessageContains(Exception ex, String str) { [EOL]     assertEquals(ex.getMessage() + ": " + str, true, ex.getMessage().indexOf(str) >= 0); [EOL] } <line_num>: 437,439
private void assertMessageContains(Exception ex, String str1, String str2) { [EOL]     assertEquals(ex.getMessage() + ": " + str1 + "/" + str2, true, ex.getMessage().indexOf(str1) >= 0 && ex.getMessage().indexOf(str2) >= 0 && ex.getMessage().indexOf(str1) < ex.getMessage().indexOf(str2)); [EOL] } <line_num>: 448,453
