public TestYearMonthDay_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 65,67
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 57,59
public static TestSuite suite() { [EOL]     return new TestSuite(TestYearMonthDay_Constructors.class); [EOL] } <line_num>: 61,63
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 69,73
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 75,79
public void testFactory_FromCalendarFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonthDay expected = new YearMonthDay(1970, 2, 3); [EOL]     assertEquals(expected, YearMonthDay.fromCalendarFields(cal)); [EOL]     try { [EOL]         YearMonthDay.fromCalendarFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 82,91
public void testFactory_FromDateFields() throws Exception { [EOL]     GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6); [EOL]     cal.set(Calendar.MILLISECOND, 7); [EOL]     YearMonthDay expected = new YearMonthDay(1970, 2, 3); [EOL]     assertEquals(expected, YearMonthDay.fromDateFields(cal.getTime())); [EOL]     try { [EOL]         YearMonthDay.fromDateFields(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 94,103
public void testConstructor() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 109,115
public void testConstructor_DateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay(LONDON); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL]     test = new YearMonthDay(PARIS); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 120,136
public void testConstructor_nullDateTimeZone() throws Throwable { [EOL]     DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     YearMonthDay test = new YearMonthDay((DateTimeZone) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(2005, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(8, test.getDayOfMonth()); [EOL] } <line_num>: 141,151
public void testConstructor_Chronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 156,162
public void testConstructor_nullChronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay((Chronology) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 167,173
public void testConstructor_long1() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(TEST_TIME1); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 179,185
public void testConstructor_long2() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1971, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(7, test.getDayOfMonth()); [EOL] } <line_num>: 190,196
public void testConstructor_long1_Chronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(TEST_TIME1, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 201,207
public void testConstructor_long2_Chronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1971, test.getYear()); [EOL]     assertEquals(5, test.getMonthOfYear()); [EOL]     assertEquals(7, test.getDayOfMonth()); [EOL] } <line_num>: 212,218
public void testConstructor_long_nullChronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(TEST_TIME1, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 223,229
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 232,239
public void testConstructor_nullObject() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay((Object) null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 241,247
public void testConstructor_ObjectString1() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay("1972-12-03"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL] } <line_num>: 249,255
public void testConstructor_ObjectString2() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay("1972-12-03T+14:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(2, test.getDayOfMonth()); [EOL] } <line_num>: 257,263
public void testConstructor_ObjectString3() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay("1972-12-03T10:20:30.040"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(3, test.getDayOfMonth()); [EOL] } <line_num>: 265,271
public void testConstructor_ObjectString4() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay("1972-12-03T10:20:30.040+14:00"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1972, test.getYear()); [EOL]     assertEquals(12, test.getMonthOfYear()); [EOL]     assertEquals(2, test.getDayOfMonth()); [EOL] } <line_num>: 273,279
public void testConstructor_ObjectString5() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay("10"); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(10, test.getYear()); [EOL]     assertEquals(1, test.getMonthOfYear()); [EOL]     assertEquals(1, test.getDayOfMonth()); [EOL] } <line_num>: 281,287
public void testConstructor_ObjectStringEx1() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 289,296
public void testConstructor_ObjectStringEx2() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("T10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 298,305
public void testConstructor_ObjectStringEx3() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("10:20:30.040"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 307,314
public void testConstructor_ObjectStringEx4() throws Throwable { [EOL]     try { [EOL]         new YearMonthDay("10:20:30.040+14:00"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 316,323
public void testConstructor_Object_Chronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 329,336
public void testConstructor_nullObject_Chronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay((Object) null, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 341,347
public void testConstructor_Object_nullChronology() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     YearMonthDay test = new YearMonthDay(date, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(4, test.getMonthOfYear()); [EOL]     assertEquals(6, test.getDayOfMonth()); [EOL] } <line_num>: 352,359
public void testConstructor_nullObject_nullChronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay((Object) null, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 364,370
public void testConstructor_int_int_int() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new YearMonthDay(Integer.MIN_VALUE, 6, 9); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(Integer.MAX_VALUE, 6, 9); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 0, 9); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 13, 9); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 6, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 6, 31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new YearMonthDay(1970, 7, 31); [EOL]     try { [EOL]         new YearMonthDay(1970, 7, 32); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 376,411
public void testConstructor_int_int_int_Chronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9, GREGORIAN_PARIS); [EOL]     assertEquals(GREGORIAN_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     try { [EOL]         new YearMonthDay(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 0, 9, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 13, 9, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 6, 0, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 6, 31, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     new YearMonthDay(1970, 7, 31, GREGORIAN_PARIS); [EOL]     try { [EOL]         new YearMonthDay(1970, 7, 32, GREGORIAN_PARIS); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 416,451
public void testConstructor_int_int_int_nullChronology() throws Throwable { [EOL]     YearMonthDay test = new YearMonthDay(1970, 6, 9, null); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL] } <line_num>: 456,462
