public TestMutableDateTime_Properties(String name) { [EOL]     super(name); [EOL] } <line_num>: 72,74
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 64,66
public static TestSuite suite() { [EOL]     return new TestSuite(TestMutableDateTime_Properties.class); [EOL] } <line_num>: 68,70
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     locale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 76,82
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     Locale.setDefault(locale); [EOL]     zone = null; [EOL] } <line_num>: 84,89
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 92,96
public void testPropertyGetEra() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().era(), test.era().getField()); [EOL]     assertEquals("era", test.era().getName()); [EOL]     assertEquals("Property[era]", test.era().toString()); [EOL]     assertSame(test, test.era().getMutableDateTime()); [EOL]     assertEquals(1, test.era().get()); [EOL]     assertEquals("AD", test.era().getAsText()); [EOL]     assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH)); [EOL]     assertEquals("AD", test.era().getAsShortText()); [EOL]     assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().eras(), test.era().getDurationField()); [EOL]     assertEquals(null, test.era().getRangeDurationField()); [EOL]     assertEquals(2, test.era().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(2, test.era().getMaximumShortTextLength(null)); [EOL]     assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH)); [EOL] } <line_num>: 99,116
public void testPropertyGetYearOfEra() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField()); [EOL]     assertEquals("yearOfEra", test.yearOfEra().getName()); [EOL]     assertEquals("Property[yearOfEra]", test.yearOfEra().toString()); [EOL]     assertEquals(2004, test.yearOfEra().get()); [EOL]     assertEquals("2004", test.yearOfEra().getAsText()); [EOL]     assertEquals("2004", test.yearOfEra().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.yearOfEra().getAsShortText()); [EOL]     assertEquals("2004", test.yearOfEra().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField()); [EOL]     assertEquals(test.getChronology().eras(), test.yearOfEra().getRangeDurationField()); [EOL]     assertEquals(9, test.yearOfEra().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null)); [EOL] } <line_num>: 119,133
public void testPropertyGetCenturyOfEra() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField()); [EOL]     assertEquals("centuryOfEra", test.centuryOfEra().getName()); [EOL]     assertEquals("Property[centuryOfEra]", test.centuryOfEra().toString()); [EOL]     assertEquals(20, test.centuryOfEra().get()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText()); [EOL]     assertEquals("20", test.centuryOfEra().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField()); [EOL]     assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField()); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumTextLength(null)); [EOL]     assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null)); [EOL] } <line_num>: 136,150
public void testPropertyGetYearOfCentury() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField()); [EOL]     assertEquals("yearOfCentury", test.yearOfCentury().getName()); [EOL]     assertEquals("Property[yearOfCentury]", test.yearOfCentury().toString()); [EOL]     assertEquals(4, test.yearOfCentury().get()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsText(Locale.FRENCH)); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText()); [EOL]     assertEquals("4", test.yearOfCentury().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField()); [EOL]     assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField()); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null)); [EOL] } <line_num>: 153,167
public void testPropertyGetWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().weekyear(), test.weekyear().getField()); [EOL]     assertEquals("weekyear", test.weekyear().getName()); [EOL]     assertEquals("Property[weekyear]", test.weekyear().toString()); [EOL]     assertEquals(2004, test.weekyear().get()); [EOL]     assertEquals("2004", test.weekyear().getAsText()); [EOL]     assertEquals("2004", test.weekyear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.weekyear().getAsShortText()); [EOL]     assertEquals("2004", test.weekyear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField()); [EOL]     assertEquals(null, test.weekyear().getRangeDurationField()); [EOL]     assertEquals(9, test.weekyear().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.weekyear().getMaximumShortTextLength(null)); [EOL] } <line_num>: 170,184
public void testPropertyGetYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertEquals(2004, test.year().get()); [EOL]     assertEquals("2004", test.year().getAsText()); [EOL]     assertEquals("2004", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("2004", test.year().getAsShortText()); [EOL]     assertEquals("2004", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL]     assertEquals(-292275054, test.year().getMinimumValue()); [EOL]     assertEquals(-292275054, test.year().getMinimumValueOverall()); [EOL]     assertEquals(292278993, test.year().getMaximumValue()); [EOL]     assertEquals(292278993, test.year().getMaximumValueOverall()); [EOL] } <line_num>: 187,205
public void testPropertyAddYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.year().add(9); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 207,211
public void testPropertyAddWrapFieldYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.year().addWrapField(9); [EOL]     assertEquals("2013-06-09T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 213,217
public void testPropertySetYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.year().set(1960); [EOL]     assertEquals("1960-06-09T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 219,223
public void testPropertySetTextYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.year().set("1960"); [EOL]     assertEquals("1960-06-09T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 225,229
public void testPropertyGetMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new MutableDateTime(2004, 7, 9, 0, 0, 0, 0); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] } <line_num>: 232,257
public void testPropertyAddMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().add(6); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 259,263
public void testPropertyAddWrapFieldMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().addWrapField(8); [EOL]     assertEquals("2004-02-09T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 265,269
public void testPropertySetMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set(12); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 271,275
public void testPropertySetTextMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("12"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("December"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.monthOfYear().set("Dec"); [EOL]     assertEquals("2004-12-09T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 277,289
public void testPropertyGetDayOfMonth() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertEquals(9, test.dayOfMonth().get()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     assertEquals(false, test.dayOfMonth().isLeap()); [EOL]     assertEquals(0, test.dayOfMonth().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfMonth().getLeapDurationField()); [EOL] } <line_num>: 292,313
public void testPropertyAddDayOfMonth() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfMonth().add(9); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 315,319
public void testPropertyAddWrapFieldDayOfMonth() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfMonth().addWrapField(22); [EOL]     assertEquals("2004-06-01T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 321,325
public void testPropertySetDayOfMonth() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfMonth().set(12); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 327,331
public void testPropertySetTextDayOfMonth() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfMonth().set("12"); [EOL]     assertEquals("2004-06-12T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 333,337
public void testPropertyGetDayOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfYear(), test.dayOfYear().getField()); [EOL]     assertEquals("dayOfYear", test.dayOfYear().getName()); [EOL]     assertEquals("Property[dayOfYear]", test.dayOfYear().toString()); [EOL]     assertEquals(161, test.dayOfYear().get()); [EOL]     assertEquals("161", test.dayOfYear().getAsText()); [EOL]     assertEquals("161", test.dayOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("161", test.dayOfYear().getAsShortText()); [EOL]     assertEquals("161", test.dayOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.dayOfYear().getRangeDurationField()); [EOL]     assertEquals(3, test.dayOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.dayOfYear().getMaximumShortTextLength(null)); [EOL]     assertEquals(false, test.dayOfYear().isLeap()); [EOL]     assertEquals(0, test.dayOfYear().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfYear().getLeapDurationField()); [EOL] } <line_num>: 340,358
public void testPropertyAddDayOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfYear().add(9); [EOL]     assertEquals("2004-06-18T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 360,364
public void testPropertyAddWrapFieldDayOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfYear().addWrapField(206); [EOL]     assertEquals("2004-01-01T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 366,370
public void testPropertySetDayOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfYear().set(12); [EOL]     assertEquals("2004-01-12T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 372,376
public void testPropertySetTextDayOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfYear().set("12"); [EOL]     assertEquals("2004-01-12T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 378,382
public void testPropertyGetWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().weekOfWeekyear(), test.weekOfWeekyear().getField()); [EOL]     assertEquals("weekOfWeekyear", test.weekOfWeekyear().getName()); [EOL]     assertEquals("Property[weekOfWeekyear]", test.weekOfWeekyear().toString()); [EOL]     assertEquals(24, test.weekOfWeekyear().get()); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsText()); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsShortText()); [EOL]     assertEquals("24", test.weekOfWeekyear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().weeks(), test.weekOfWeekyear().getDurationField()); [EOL]     assertEquals(test.getChronology().weekyears(), test.weekOfWeekyear().getRangeDurationField()); [EOL]     assertEquals(2, test.weekOfWeekyear().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.weekOfWeekyear().getMaximumShortTextLength(null)); [EOL]     assertEquals(false, test.weekOfWeekyear().isLeap()); [EOL]     assertEquals(0, test.weekOfWeekyear().getLeapAmount()); [EOL]     assertEquals(null, test.weekOfWeekyear().getLeapDurationField()); [EOL] } <line_num>: 385,415
public void testPropertyAddWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().add(1); [EOL]     assertEquals("2004-06-14T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 417,421
public void testPropertyAddWrapFieldWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().addWrapField(30); [EOL]     assertEquals("2003-12-29T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 423,427
public void testPropertySetWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().set(4); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 429,433
public void testPropertySetTextWeekOfWeekyear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0); [EOL]     test.weekOfWeekyear().set("4"); [EOL]     assertEquals("2004-01-19T00:00:00.000Z", test.toString()); [EOL] } <line_num>: 435,439
public void testPropertyGetDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField()); [EOL]     assertEquals("dayOfWeek", test.dayOfWeek().getName()); [EOL]     assertEquals("Property[dayOfWeek]", test.dayOfWeek().toString()); [EOL]     assertEquals(3, test.dayOfWeek().get()); [EOL]     assertEquals("Wednesday", test.dayOfWeek().getAsText()); [EOL]     assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Wed", test.dayOfWeek().getAsShortText()); [EOL]     assertEquals("mer.", test.dayOfWeek().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField()); [EOL]     assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField()); [EOL]     assertEquals(9, test.dayOfWeek().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH)); [EOL]     assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null)); [EOL]     assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH)); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfWeek().getMinimumValueOverall()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValue()); [EOL]     assertEquals(7, test.dayOfWeek().getMaximumValueOverall()); [EOL]     assertEquals(false, test.dayOfWeek().isLeap()); [EOL]     assertEquals(0, test.dayOfWeek().getLeapAmount()); [EOL]     assertEquals(null, test.dayOfWeek().getLeapDurationField()); [EOL] } <line_num>: 442,465
public void testPropertyAddDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().add(1); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 467,471
public void testPropertyAddLongDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().add(1L); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 473,477
public void testPropertyAddWrapFieldDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().addWrapField(5); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 479,483
public void testPropertySetDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().set(4); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 485,489
public void testPropertySetTextDayOfWeek() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().set("4"); [EOL]     assertEquals("2004-06-10T00:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().set("Mon"); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().set("Tuesday"); [EOL]     assertEquals("2004-06-08T00:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     test.dayOfWeek().set("lundi", Locale.FRENCH); [EOL]     assertEquals("2004-06-07T00:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 491,507
public void testPropertyGetHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField()); [EOL]     assertEquals("hourOfDay", test.hourOfDay().getName()); [EOL]     assertEquals("Property[hourOfDay]", test.hourOfDay().toString()); [EOL]     assertEquals(13, test.hourOfDay().get()); [EOL]     assertEquals("13", test.hourOfDay().getAsText()); [EOL]     assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText()); [EOL]     assertEquals("13", test.hourOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField()); [EOL]     assertEquals(2, test.hourOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 510,524
public void testPropertyRoundFloorHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 526,530
public void testPropertyRoundCeilingHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundCeiling(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 532,536
public void testPropertyRoundHalfFloorHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfFloor(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 538,550
public void testPropertyRoundHalfCeilingHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfCeiling(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 552,564
public void testPropertyRoundHalfEvenHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 14, 30, 0, 0); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T14:00:00.000+01:00", test.toString()); [EOL]     test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999); [EOL]     test.hourOfDay().roundHalfEven(); [EOL]     assertEquals("2004-06-09T13:00:00.000+01:00", test.toString()); [EOL] } <line_num>: 566,582
public void testPropertyRemainderHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0); [EOL]     assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder()); [EOL] } <line_num>: 584,587
public void testPropertyGetMinuteOfHour() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField()); [EOL]     assertEquals("minuteOfHour", test.minuteOfHour().getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString()); [EOL]     assertEquals(23, test.minuteOfHour().get()); [EOL]     assertEquals("23", test.minuteOfHour().getAsText()); [EOL]     assertEquals("23", test.minuteOfHour().getAsText(Locale.FRENCH)); [EOL]     assertEquals("23", test.minuteOfHour().getAsShortText()); [EOL]     assertEquals("23", test.minuteOfHour().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField()); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null)); [EOL] } <line_num>: 590,604
public void testPropertyGetMinuteOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().minuteOfDay(), test.minuteOfDay().getField()); [EOL]     assertEquals("minuteOfDay", test.minuteOfDay().getName()); [EOL]     assertEquals("Property[minuteOfDay]", test.minuteOfDay().toString()); [EOL]     assertEquals(803, test.minuteOfDay().get()); [EOL]     assertEquals("803", test.minuteOfDay().getAsText()); [EOL]     assertEquals("803", test.minuteOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("803", test.minuteOfDay().getAsShortText()); [EOL]     assertEquals("803", test.minuteOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.minuteOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.minuteOfDay().getRangeDurationField()); [EOL]     assertEquals(4, test.minuteOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(4, test.minuteOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 607,621
public void testPropertyGetSecondOfMinute() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField()); [EOL]     assertEquals("secondOfMinute", test.secondOfMinute().getName()); [EOL]     assertEquals("Property[secondOfMinute]", test.secondOfMinute().toString()); [EOL]     assertEquals(43, test.secondOfMinute().get()); [EOL]     assertEquals("43", test.secondOfMinute().getAsText()); [EOL]     assertEquals("43", test.secondOfMinute().getAsText(Locale.FRENCH)); [EOL]     assertEquals("43", test.secondOfMinute().getAsShortText()); [EOL]     assertEquals("43", test.secondOfMinute().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField()); [EOL]     assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField()); [EOL]     assertEquals(2, test.secondOfMinute().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null)); [EOL] } <line_num>: 624,638
public void testPropertyGetSecondOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().secondOfDay(), test.secondOfDay().getField()); [EOL]     assertEquals("secondOfDay", test.secondOfDay().getName()); [EOL]     assertEquals("Property[secondOfDay]", test.secondOfDay().toString()); [EOL]     assertEquals(48223, test.secondOfDay().get()); [EOL]     assertEquals("48223", test.secondOfDay().getAsText()); [EOL]     assertEquals("48223", test.secondOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("48223", test.secondOfDay().getAsShortText()); [EOL]     assertEquals("48223", test.secondOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().seconds(), test.secondOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.secondOfDay().getRangeDurationField()); [EOL]     assertEquals(5, test.secondOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(5, test.secondOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 641,655
public void testPropertyGetMillisOfSecond() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField()); [EOL]     assertEquals("millisOfSecond", test.millisOfSecond().getName()); [EOL]     assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString()); [EOL]     assertEquals(53, test.millisOfSecond().get()); [EOL]     assertEquals("53", test.millisOfSecond().getAsText()); [EOL]     assertEquals("53", test.millisOfSecond().getAsText(Locale.FRENCH)); [EOL]     assertEquals("53", test.millisOfSecond().getAsShortText()); [EOL]     assertEquals("53", test.millisOfSecond().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField()); [EOL]     assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField()); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null)); [EOL] } <line_num>: 658,672
public void testPropertyGetMillisOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     assertSame(test.getChronology().millisOfDay(), test.millisOfDay().getField()); [EOL]     assertEquals("millisOfDay", test.millisOfDay().getName()); [EOL]     assertEquals("Property[millisOfDay]", test.millisOfDay().toString()); [EOL]     assertEquals(48223053, test.millisOfDay().get()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsText()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsText(Locale.FRENCH)); [EOL]     assertEquals("48223053", test.millisOfDay().getAsShortText()); [EOL]     assertEquals("48223053", test.millisOfDay().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().millis(), test.millisOfDay().getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.millisOfDay().getRangeDurationField()); [EOL]     assertEquals(8, test.millisOfDay().getMaximumTextLength(null)); [EOL]     assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null)); [EOL] } <line_num>: 675,689
public void testPropertyToIntervalYearOfEra() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfEra().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] } <line_num>: 692,698
public void testPropertyToIntervalYearOfCentury() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.yearOfCentury().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] } <line_num>: 700,706
public void testPropertyToIntervalYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.year().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] } <line_num>: 708,714
public void testPropertyToIntervalMonthOfYear() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.monthOfYear().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] } <line_num>: 716,722
public void testPropertyToIntervalDayOfMonth() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.dayOfMonth().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 0, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 10, 0, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL]     MutableDateTime febTest = new MutableDateTime(2004, 2, 29, 13, 23, 43, 53); [EOL]     Interval febTestInterval = febTest.dayOfMonth().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0), febTestInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 3, 1, 0, 0, 0, 0), febTestInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 13, 23, 43, 53), febTest); [EOL] } <line_num>: 724,736
public void testPropertyToIntervalHourOfDay() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.hourOfDay().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 0, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 14, 0, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL]     MutableDateTime midnightTest = new MutableDateTime(2004, 6, 9, 23, 23, 43, 53); [EOL]     Interval midnightTestInterval = midnightTest.hourOfDay().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 23, 0, 0, 0), midnightTestInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 10, 0, 0, 0, 0), midnightTestInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 23, 23, 43, 53), midnightTest); [EOL] } <line_num>: 738,750
public void testPropertyToIntervalMinuteOfHour() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.minuteOfHour().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 0, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 24, 0, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] } <line_num>: 752,758
public void testPropertyToIntervalSecondOfMinute() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.secondOfMinute().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 0), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 44, 0), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] } <line_num>: 760,766
public void testPropertyToIntervalMillisOfSecond() { [EOL]     MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53); [EOL]     Interval testInterval = test.millisOfSecond().toInterval(); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd()); [EOL]     assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test); [EOL] } <line_num>: 768,774
