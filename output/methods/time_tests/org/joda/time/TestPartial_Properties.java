public TestPartial_Properties(String name) { [EOL]     super(name); [EOL] } <line_num>: 70,72
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 62,64
public static TestSuite suite() { [EOL]     return new TestSuite(TestPartial_Properties.class); [EOL] } <line_num>: 66,68
protected void setUp() throws Exception { [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL] } <line_num>: 74,77
protected void tearDown() throws Exception { [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 79,82
public void testPropertyGetHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     assertSame(test.getChronology().hourOfDay(), test.property(DateTimeFieldType.hourOfDay()).getField()); [EOL]     assertEquals("hourOfDay", test.property(DateTimeFieldType.hourOfDay()).getName()); [EOL]     assertEquals("Property[hourOfDay]", test.property(DateTimeFieldType.hourOfDay()).toString()); [EOL]     assertSame(test, test.property(DateTimeFieldType.hourOfDay()).getReadablePartial()); [EOL]     assertSame(test, test.property(DateTimeFieldType.hourOfDay()).getPartial()); [EOL]     assertEquals(10, test.property(DateTimeFieldType.hourOfDay()).get()); [EOL]     assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsString()); [EOL]     assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsText()); [EOL]     assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsText(Locale.FRENCH)); [EOL]     assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsShortText()); [EOL]     assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.hourOfDay()).getDurationField()); [EOL]     assertEquals(test.getChronology().days(), test.property(DateTimeFieldType.hourOfDay()).getRangeDurationField()); [EOL]     assertEquals(2, test.property(DateTimeFieldType.hourOfDay()).getMaximumTextLength(null)); [EOL]     assertEquals(2, test.property(DateTimeFieldType.hourOfDay()).getMaximumShortTextLength(null)); [EOL] } <line_num>: 85,102
public void testPropertyGetMaxMinValuesHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     assertEquals(0, test.property(DateTimeFieldType.hourOfDay()).getMinimumValue()); [EOL]     assertEquals(0, test.property(DateTimeFieldType.hourOfDay()).getMinimumValueOverall()); [EOL]     assertEquals(23, test.property(DateTimeFieldType.hourOfDay()).getMaximumValue()); [EOL]     assertEquals(23, test.property(DateTimeFieldType.hourOfDay()).getMaximumValueOverall()); [EOL] } <line_num>: 104,110
public void testPropertyAddHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(13); [EOL]     check(copy, 23, 20, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.hourOfDay()).addToCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-10); [EOL]     check(copy, 0, 20, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.hourOfDay()).addToCopy(-11); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] } <line_num>: 134,160
public void testPropertyAddWrapFieldHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 19, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(0); [EOL]     check(copy, 10, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(18); [EOL]     check(copy, 4, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(-15); [EOL]     check(copy, 19, 20, 30, 40); [EOL] } <line_num>: 162,176
public void testPropertySetHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.hourOfDay()).setCopy(24); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(DateTimeFieldType.hourOfDay()).setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 178,192
public void testPropertySetTextHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 12, 20, 30, 40); [EOL] } <line_num>: 194,199
public void testPropertyWithMaximumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMaximumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 23, 20, 30, 40); [EOL] } <line_num>: 201,206
public void testPropertyWithMinimumValueHour() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue(); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 0, 20, 30, 40); [EOL] } <line_num>: 208,213
public void testPropertyCompareToHour() { [EOL]     Partial test1 = new Partial(TYPES, VALUES1); [EOL]     Partial test2 = new Partial(TYPES, VALUES2); [EOL]     assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test2) < 0); [EOL]     assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(test1) > 0); [EOL]     assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test1) == 0); [EOL]     try { [EOL]         test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 215,235
public void testPropertyGetMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     assertSame(test.getChronology().minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()).getField()); [EOL]     assertEquals("minuteOfHour", test.property(DateTimeFieldType.minuteOfHour()).getName()); [EOL]     assertEquals("Property[minuteOfHour]", test.property(DateTimeFieldType.minuteOfHour()).toString()); [EOL]     assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getReadablePartial()); [EOL]     assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getPartial()); [EOL]     assertEquals(20, test.property(DateTimeFieldType.minuteOfHour()).get()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsString()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsText()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsText(Locale.FRENCH)); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText()); [EOL]     assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().minutes(), test.property(DateTimeFieldType.minuteOfHour()).getDurationField()); [EOL]     assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.minuteOfHour()).getRangeDurationField()); [EOL]     assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumTextLength(null)); [EOL]     assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumShortTextLength(null)); [EOL] } <line_num>: 238,255
public void testPropertyGetMaxMinValuesMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     assertEquals(0, test.property(DateTimeFieldType.minuteOfHour()).getMinimumValue()); [EOL]     assertEquals(0, test.property(DateTimeFieldType.minuteOfHour()).getMinimumValueOverall()); [EOL]     assertEquals(59, test.property(DateTimeFieldType.minuteOfHour()).getMaximumValue()); [EOL]     assertEquals(59, test.property(DateTimeFieldType.minuteOfHour()).getMaximumValueOverall()); [EOL] } <line_num>: 257,263
public void testPropertyAddMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39); [EOL]     check(copy, 10, 59, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40); [EOL]     check(copy, 11, 0, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45); [EOL]     check(copy, 12, 5, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39); [EOL]     check(copy, 23, 59, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9); [EOL]     check(copy, 10, 11, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19); [EOL]     check(copy, 10, 1, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20); [EOL]     check(copy, 10, 0, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21); [EOL]     check(copy, 9, 59, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20)); [EOL]     check(copy, 0, 0, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 10, 20, 30, 40); [EOL] } <line_num>: 305,349
public void testPropertyAddWrapFieldMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(9); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 29, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(49); [EOL]     check(copy, 10, 9, 30, 40); [EOL]     copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(-47); [EOL]     check(copy, 10, 33, 30, 40); [EOL] } <line_num>: 351,362
public void testPropertySetMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy(12); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL]     try { [EOL]         test.property(DateTimeFieldType.minuteOfHour()).setCopy(60); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(DateTimeFieldType.minuteOfHour()).setCopy(-1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 364,378
public void testPropertySetTextMinute() { [EOL]     Partial test = new Partial(TYPES, VALUES); [EOL]     Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy("12"); [EOL]     check(test, 10, 20, 30, 40); [EOL]     check(copy, 10, 12, 30, 40); [EOL] } <line_num>: 380,385
public void testPropertyCompareToMinute() { [EOL]     Partial test1 = new Partial(TYPES, VALUES1); [EOL]     Partial test2 = new Partial(TYPES, VALUES2); [EOL]     assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test2) < 0); [EOL]     assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) > 0); [EOL]     assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) == 0); [EOL]     try { [EOL]         test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 387,407
private void check(Partial test, int hour, int min, int sec, int milli) { [EOL]     assertEquals(hour, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(min, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(sec, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(milli, test.get(DateTimeFieldType.millisOfSecond())); [EOL] } <line_num>: 410,415
