public TestDateTimeComparator(String name) { [EOL]     super(name); [EOL] } <line_num>: 52,54
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 44,46
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTimeComparator.class); [EOL] } <line_num>: 48,50
public void setUp() { [EOL]     Chronology chrono = ISOChronology.getInstanceUTC(); [EOL]     cMillis = DateTimeComparator.getInstance(null, DateTimeFieldType.secondOfMinute()); [EOL]     cSecond = DateTimeComparator.getInstance(DateTimeFieldType.secondOfMinute(), DateTimeFieldType.minuteOfHour()); [EOL]     cMinute = DateTimeComparator.getInstance(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.hourOfDay()); [EOL]     cHour = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     cDayOfWeek = DateTimeComparator.getInstance(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.weekOfWeekyear()); [EOL]     cDayOfMonth = DateTimeComparator.getInstance(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()); [EOL]     cDayOfYear = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), DateTimeFieldType.year()); [EOL]     cWeekOfWeekyear = DateTimeComparator.getInstance(DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.weekyear()); [EOL]     cWeekyear = DateTimeComparator.getInstance(DateTimeFieldType.weekyear()); [EOL]     cMonth = DateTimeComparator.getInstance(DateTimeFieldType.monthOfYear(), DateTimeFieldType.year()); [EOL]     cYear = DateTimeComparator.getInstance(DateTimeFieldType.year()); [EOL]     cDate = DateTimeComparator.getDateOnlyInstance(); [EOL]     cTime = DateTimeComparator.getTimeOnlyInstance(); [EOL] } <line_num>: 134,152
protected void tearDown() { [EOL]     aDateTime = null; [EOL]     bDateTime = null; [EOL]     cMillis = null; [EOL]     cSecond = null; [EOL]     cMinute = null; [EOL]     cHour = null; [EOL]     cDayOfWeek = null; [EOL]     cDayOfMonth = null; [EOL]     cDayOfYear = null; [EOL]     cWeekOfWeekyear = null; [EOL]     cWeekyear = null; [EOL]     cMonth = null; [EOL]     cYear = null; [EOL]     cDate = null; [EOL]     cTime = null; [EOL] } <line_num>: 157,175
public void testClass() { [EOL]     assertEquals(true, Modifier.isPublic(DateTimeComparator.class.getModifiers())); [EOL]     assertEquals(false, Modifier.isFinal(DateTimeComparator.class.getModifiers())); [EOL]     assertEquals(1, DateTimeComparator.class.getDeclaredConstructors().length); [EOL]     assertEquals(true, Modifier.isProtected(DateTimeComparator.class.getDeclaredConstructors()[0].getModifiers())); [EOL] } <line_num>: 178,183
public void testStaticGetInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[]", c.toString()); [EOL] } <line_num>: 186,191
public void testStaticGetDateOnlyInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[dayOfYear-]", c.toString()); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance()); [EOL] } <line_num>: 192,199
public void testStaticGetTimeOnlyInstance() { [EOL]     DateTimeComparator c = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(null, c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[-dayOfYear]", c.toString()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), DateTimeComparator.getTimeOnlyInstance()); [EOL] } <line_num>: 200,207
public void testStaticGetInstanceLower() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(null, c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL] } <line_num>: 208,216
public void testStaticGetInstanceLowerUpper() { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay-dayOfYear]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit()); [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit()); [EOL]     assertEquals("DateTimeComparator[hourOfDay]", c.toString()); [EOL]     c = DateTimeComparator.getInstance(null, null); [EOL]     assertSame(DateTimeComparator.getInstance(), c); [EOL]     c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null); [EOL]     assertSame(DateTimeComparator.getDateOnlyInstance(), c); [EOL]     c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear()); [EOL]     assertSame(DateTimeComparator.getTimeOnlyInstance(), c); [EOL] } <line_num>: 217,236
public void testEqualsHashCode() { [EOL]     DateTimeComparator c1 = DateTimeComparator.getInstance(); [EOL]     assertEquals(true, c1.equals(c1)); [EOL]     assertEquals(false, c1.equals(null)); [EOL]     assertEquals(true, c1.hashCode() == c1.hashCode()); [EOL]     DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c2.equals(c2)); [EOL]     assertEquals(false, c2.equals(c1)); [EOL]     assertEquals(false, c1.equals(c2)); [EOL]     assertEquals(false, c2.equals(null)); [EOL]     assertEquals(false, c1.hashCode() == c2.hashCode()); [EOL]     DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance(); [EOL]     assertEquals(true, c3.equals(c3)); [EOL]     assertEquals(false, c3.equals(c1)); [EOL]     assertEquals(true, c3.equals(c2)); [EOL]     assertEquals(false, c1.equals(c3)); [EOL]     assertEquals(true, c2.equals(c3)); [EOL]     assertEquals(false, c1.hashCode() == c3.hashCode()); [EOL]     assertEquals(true, c2.hashCode() == c3.hashCode()); [EOL]     DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(); [EOL]     assertEquals(false, c4.hashCode() == c3.hashCode()); [EOL] } <line_num>: 239,263
public void testSerialization1() throws Exception { [EOL]     DateTimeField f = ISO.dayOfYear(); [EOL]     f.toString(); [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear()); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(c); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeComparator result = (DateTimeComparator) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(c, result); [EOL] } <line_num>: 266,283
public void testSerialization2() throws Exception { [EOL]     DateTimeComparator c = DateTimeComparator.getInstance(); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(c); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeComparator result = (DateTimeComparator) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(c, result); [EOL] } <line_num>: 286,301
public void testBasicComps1() { [EOL]     aDateTime = new DateTime(System.currentTimeMillis(), DateTimeZone.UTC); [EOL]     bDateTime = new DateTime(aDateTime.getMillis(), DateTimeZone.UTC); [EOL]     assertEquals("getMillis", aDateTime.getMillis(), bDateTime.getMillis()); [EOL]     assertEquals("MILLIS", 0, cMillis.compare(aDateTime, bDateTime)); [EOL]     assertEquals("SECOND", 0, cSecond.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MINUTE", 0, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("HOUR", 0, cHour.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOW", 0, cDayOfWeek.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOM", 0, cDayOfMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOY", 0, cDayOfYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WOW", 0, cWeekOfWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WY", 0, cWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MONTH", 0, cMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YEAR", 0, cYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DATE", 0, cDate.compare(aDateTime, bDateTime)); [EOL]     assertEquals("TIME", 0, cTime.compare(aDateTime, bDateTime)); [EOL] } <line_num>: 307,325
public void testBasicComps2() { [EOL]     ReadableInstant aDateTime = new DateTime(System.currentTimeMillis(), DateTimeZone.UTC); [EOL]     ReadableInstant bDateTime = new DateTime(aDateTime.getMillis(), DateTimeZone.UTC); [EOL]     assertEquals("getMillis", aDateTime.getMillis(), bDateTime.getMillis()); [EOL]     assertEquals("MILLIS", 0, cMillis.compare(aDateTime, bDateTime)); [EOL]     assertEquals("SECOND", 0, cSecond.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MINUTE", 0, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("HOUR", 0, cHour.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOW", 0, cDayOfWeek.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOM", 0, cDayOfMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOY", 0, cDayOfYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WOW", 0, cWeekOfWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WY", 0, cWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MONTH", 0, cMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YEAR", 0, cYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DATE", 0, cDate.compare(aDateTime, bDateTime)); [EOL]     assertEquals("TIME", 0, cTime.compare(aDateTime, bDateTime)); [EOL] } <line_num>: 331,349
public void testBasicComps3() { [EOL]     Date aDateTime = new Date(System.currentTimeMillis()); [EOL]     Date bDateTime = new Date(aDateTime.getTime()); [EOL]     assertEquals("MILLIS", 0, cMillis.compare(aDateTime, bDateTime)); [EOL]     assertEquals("SECOND", 0, cSecond.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MINUTE", 0, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("HOUR", 0, cHour.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOW", 0, cDayOfWeek.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOM", 0, cDayOfMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOY", 0, cDayOfYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WOW", 0, cWeekOfWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WY", 0, cWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MONTH", 0, cMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YEAR", 0, cYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DATE", 0, cDate.compare(aDateTime, bDateTime)); [EOL]     assertEquals("TIME", 0, cTime.compare(aDateTime, bDateTime)); [EOL] } <line_num>: 354,372
public void testBasicComps4() { [EOL]     Long aDateTime = new Long(System.currentTimeMillis()); [EOL]     Long bDateTime = new Long(aDateTime.longValue()); [EOL]     assertEquals("MILLIS", 0, cMillis.compare(aDateTime, bDateTime)); [EOL]     assertEquals("SECOND", 0, cSecond.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MINUTE", 0, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("HOUR", 0, cHour.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOW", 0, cDayOfWeek.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOM", 0, cDayOfMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOY", 0, cDayOfYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WOW", 0, cWeekOfWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WY", 0, cWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MONTH", 0, cMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YEAR", 0, cYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DATE", 0, cDate.compare(aDateTime, bDateTime)); [EOL]     assertEquals("TIME", 0, cTime.compare(aDateTime, bDateTime)); [EOL] } <line_num>: 377,395
public void testBasicComps5() { [EOL]     Calendar aDateTime = Calendar.getInstance(); [EOL]     Calendar bDateTime = aDateTime; [EOL]     assertEquals("MILLIS", 0, cMillis.compare(aDateTime, bDateTime)); [EOL]     assertEquals("SECOND", 0, cSecond.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MINUTE", 0, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("HOUR", 0, cHour.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOW", 0, cDayOfWeek.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOM", 0, cDayOfMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOY", 0, cDayOfYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WOW", 0, cWeekOfWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WY", 0, cWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MONTH", 0, cMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YEAR", 0, cYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DATE", 0, cDate.compare(aDateTime, bDateTime)); [EOL]     assertEquals("TIME", 0, cTime.compare(aDateTime, bDateTime)); [EOL] } <line_num>: 400,417
public void testMillis() { [EOL] } <line_num>: 423,423
public void testSecond() { [EOL]     aDateTime = getADate("1969-12-31T23:59:58"); [EOL]     bDateTime = getADate("1969-12-31T23:50:59"); [EOL]     assertEquals("SecondM1a", -1, cSecond.compare(aDateTime, bDateTime)); [EOL]     assertEquals("SecondP1a", 1, cSecond.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("1970-01-01T00:00:00"); [EOL]     bDateTime = getADate("1970-01-01T00:00:01"); [EOL]     assertEquals("SecondM1b", -1, cSecond.compare(aDateTime, bDateTime)); [EOL]     assertEquals("SecondP1b", 1, cSecond.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 435,444
public void testMinute() { [EOL]     aDateTime = getADate("1969-12-31T23:58:00"); [EOL]     bDateTime = getADate("1969-12-31T23:59:00"); [EOL]     assertEquals("MinuteM1a", -1, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MinuteP1a", 1, cMinute.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("1970-01-01T00:00:00"); [EOL]     bDateTime = getADate("1970-01-01T00:01:00"); [EOL]     assertEquals("MinuteM1b", -1, cMinute.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MinuteP1b", 1, cMinute.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 449,458
public void testHour() { [EOL]     aDateTime = getADate("1969-12-31T22:00:00"); [EOL]     bDateTime = getADate("1969-12-31T23:00:00"); [EOL]     assertEquals("HourM1a", -1, cHour.compare(aDateTime, bDateTime)); [EOL]     assertEquals("HourP1a", 1, cHour.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("1970-01-01T00:00:00"); [EOL]     bDateTime = getADate("1970-01-01T01:00:00"); [EOL]     assertEquals("HourM1b", -1, cHour.compare(aDateTime, bDateTime)); [EOL]     assertEquals("HourP1b", 1, cHour.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("1969-12-31T23:59:59"); [EOL]     bDateTime = getADate("1970-01-01T00:00:00"); [EOL]     assertEquals("HourP1c", 1, cHour.compare(aDateTime, bDateTime)); [EOL]     assertEquals("HourM1c", -1, cHour.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 463,476
public void testDOW() { [EOL]     aDateTime = getADate("2002-04-12T00:00:00"); [EOL]     bDateTime = getADate("2002-04-13T00:00:00"); [EOL]     assertEquals("DOWM1a", -1, cDayOfWeek.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOWP1a", 1, cDayOfWeek.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 481,490
public void testDOM() { [EOL]     aDateTime = getADate("2002-04-12T00:00:00"); [EOL]     bDateTime = getADate("2002-04-13T00:00:00"); [EOL]     assertEquals("DOMM1a", -1, cDayOfMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOMP1a", 1, cDayOfMonth.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("2000-12-01T00:00:00"); [EOL]     bDateTime = getADate("1814-04-30T00:00:00"); [EOL]     assertEquals("DOMM1b", -1, cDayOfMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOMP1b", 1, cDayOfMonth.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 495,504
public void testDOY() { [EOL]     aDateTime = getADate("2002-04-12T00:00:00"); [EOL]     bDateTime = getADate("2002-04-13T00:00:00"); [EOL]     assertEquals("DOYM1a", -1, cDayOfYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOYP1a", 1, cDayOfYear.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("2000-02-29T00:00:00"); [EOL]     bDateTime = getADate("1814-11-30T00:00:00"); [EOL]     assertEquals("DOYM1b", -1, cDayOfYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("DOYP1b", 1, cDayOfYear.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 509,518
public void testWOW() { [EOL]     aDateTime = getADate("2000-01-04T00:00:00"); [EOL]     bDateTime = getADate("2000-01-11T00:00:00"); [EOL]     assertEquals("WOWM1a", -1, cWeekOfWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WOWP1a", 1, cWeekOfWeekyear.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("2000-01-04T00:00:00"); [EOL]     bDateTime = getADate("1999-12-31T00:00:00"); [EOL]     assertEquals("WOWM1b", -1, cWeekOfWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("WOWP1b", 1, cWeekOfWeekyear.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 523,537
public void testWOYY() { [EOL]     aDateTime = getADate("1998-12-31T23:59:59"); [EOL]     bDateTime = getADate("1999-01-01T00:00:00"); [EOL]     assertEquals("YOYYZ", 0, cWeekyear.compare(aDateTime, bDateTime)); [EOL]     bDateTime = getADate("1999-01-04T00:00:00"); [EOL]     assertEquals("YOYYM1", -1, cWeekyear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YOYYP1", 1, cWeekyear.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 542,551
public void testMonth() { [EOL]     aDateTime = getADate("2002-04-30T00:00:00"); [EOL]     bDateTime = getADate("2002-05-01T00:00:00"); [EOL]     assertEquals("MONTHM1a", -1, cMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MONTHP1a", 1, cMonth.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("1900-01-01T00:00:00"); [EOL]     bDateTime = getADate("1899-12-31T00:00:00"); [EOL]     assertEquals("MONTHM1b", -1, cMonth.compare(aDateTime, bDateTime)); [EOL]     assertEquals("MONTHP1b", 1, cMonth.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 556,565
public void testYear() { [EOL]     aDateTime = getADate("2000-01-01T00:00:00"); [EOL]     bDateTime = getADate("2001-01-01T00:00:00"); [EOL]     assertEquals("YEARM1a", -1, cYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YEARP1a", 1, cYear.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("1968-12-31T23:59:59"); [EOL]     bDateTime = getADate("1970-01-01T00:00:00"); [EOL]     assertEquals("YEARM1b", -1, cYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YEARP1b", 1, cYear.compare(bDateTime, aDateTime)); [EOL]     aDateTime = getADate("1969-12-31T23:59:59"); [EOL]     bDateTime = getADate("1970-01-01T00:00:00"); [EOL]     assertEquals("YEARM1c", -1, cYear.compare(aDateTime, bDateTime)); [EOL]     assertEquals("YEARP1c", 1, cYear.compare(bDateTime, aDateTime)); [EOL] } <line_num>: 570,583
public void testListBasic() { [EOL]     String[] dtStrs = { "1999-02-01T00:00:00", "1998-01-20T00:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListBasic", !isSorted1, isSorted2); [EOL] } <line_num>: 592,603
public void testListMillis() { [EOL]     List sl = new ArrayList(); [EOL]     long base = 12345L * 1000L; [EOL]     sl.add(new DateTime(base + 999L, DateTimeZone.UTC)); [EOL]     sl.add(new DateTime(base + 222L, DateTimeZone.UTC)); [EOL]     sl.add(new DateTime(base + 456L, DateTimeZone.UTC)); [EOL]     sl.add(new DateTime(base + 888L, DateTimeZone.UTC)); [EOL]     sl.add(new DateTime(base + 123L, DateTimeZone.UTC)); [EOL]     sl.add(new DateTime(base + 000L, DateTimeZone.UTC)); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cMillis); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListLillis", !isSorted1, isSorted2); [EOL] } <line_num>: 608,623
public void testListSecond() { [EOL]     String[] dtStrs = { "1999-02-01T00:00:10", "1999-02-01T00:00:30", "1999-02-01T00:00:25", "1999-02-01T00:00:18", "1999-02-01T00:00:01", "1999-02-01T00:00:59", "1999-02-01T00:00:22" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cSecond); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListSecond", !isSorted1, isSorted2); [EOL] } <line_num>: 629,645
public void testListMinute() { [EOL]     String[] dtStrs = { "1999-02-01T00:10:00", "1999-02-01T00:30:00", "1999-02-01T00:25:00", "1999-02-01T00:18:00", "1999-02-01T00:01:00", "1999-02-01T00:59:00", "1999-02-01T00:22:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cMinute); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListMinute", !isSorted1, isSorted2); [EOL] } <line_num>: 650,666
public void testListHour() { [EOL]     String[] dtStrs = { "1999-02-01T10:00:00", "1999-02-01T23:00:00", "1999-02-01T01:00:00", "1999-02-01T15:00:00", "1999-02-01T05:00:00", "1999-02-01T20:00:00", "1999-02-01T17:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cHour); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListHour", !isSorted1, isSorted2); [EOL] } <line_num>: 671,687
public void testListDOW() { [EOL]     String[] dtStrs = { "2002-04-21T10:00:00", "2002-04-16T10:00:00", "2002-04-15T10:00:00", "2002-04-17T10:00:00", "2002-04-19T10:00:00", "2002-04-18T10:00:00", "2002-04-20T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cDayOfWeek); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListDOW", !isSorted1, isSorted2); [EOL] } <line_num>: 693,710
public void testListDOM() { [EOL]     String[] dtStrs = { "2002-04-20T10:00:00", "2002-04-16T10:00:00", "2002-04-15T10:00:00", "2002-04-17T10:00:00", "2002-04-19T10:00:00", "2002-04-18T10:00:00", "2002-04-14T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cDayOfMonth); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListDOM", !isSorted1, isSorted2); [EOL] } <line_num>: 715,732
public void testListDOY() { [EOL]     String[] dtStrs = { "2002-04-20T10:00:00", "2002-01-16T10:00:00", "2002-12-31T10:00:00", "2002-09-14T10:00:00", "2002-09-19T10:00:00", "2002-02-14T10:00:00", "2002-10-30T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cDayOfYear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListDOY", !isSorted1, isSorted2); [EOL] } <line_num>: 737,753
public void testListWOW() { [EOL]     String[] dtStrs = { "2002-04-01T10:00:00", "2002-01-01T10:00:00", "2002-12-01T10:00:00", "2002-09-01T10:00:00", "2002-09-01T10:00:00", "2002-02-01T10:00:00", "2002-10-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cWeekOfWeekyear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListWOW", !isSorted1, isSorted2); [EOL] } <line_num>: 758,774
public void testListYOYY() { [EOL]     String[] dtStrs = { "2010-04-01T10:00:00", "2002-01-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cWeekyear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListYOYY", !isSorted1, isSorted2); [EOL] } <line_num>: 779,791
public void testListMonth() { [EOL]     String[] dtStrs = { "2002-04-01T10:00:00", "2002-01-01T10:00:00", "2002-12-01T10:00:00", "2002-09-01T10:00:00", "2002-09-01T10:00:00", "2002-02-01T10:00:00", "2002-10-01T10:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cMonth); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListMonth", !isSorted1, isSorted2); [EOL] } <line_num>: 797,813
public void testListYear() { [EOL]     String[] dtStrs = { "1999-02-01T00:00:00", "1998-02-01T00:00:00", "2525-02-01T00:00:00", "1776-02-01T00:00:00", "1863-02-01T00:00:00", "1066-02-01T00:00:00", "2100-02-01T00:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cYear); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListYear", !isSorted1, isSorted2); [EOL] } <line_num>: 818,834
public void testListDate() { [EOL]     String[] dtStrs = { "1999-02-01T00:00:00", "1998-10-03T00:00:00", "2525-05-20T00:00:00", "1776-12-25T00:00:00", "1863-01-31T00:00:00", "1066-09-22T00:00:00", "2100-07-04T00:00:00" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cDate); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListDate", !isSorted1, isSorted2); [EOL] } <line_num>: 839,855
public void testListTime() { [EOL]     String[] dtStrs = { "1999-02-01T01:02:05", "1999-02-01T22:22:22", "1999-02-01T05:30:45", "1999-02-01T09:17:59", "1999-02-01T09:17:58", "1999-02-01T15:30:00", "1999-02-01T17:00:44" }; [EOL]     List sl = loadAList(dtStrs); [EOL]     boolean isSorted1 = isListSorted(sl); [EOL]     Collections.sort(sl, cTime); [EOL]     boolean isSorted2 = isListSorted(sl); [EOL]     assertEquals("ListTime", !isSorted1, isSorted2); [EOL] } <line_num>: 860,876
public void testNullDT() { [EOL]     aDateTime = getADate("2000-01-01T00:00:00"); [EOL]     assertTrue(cYear.compare(null, aDateTime) > 0); [EOL]     assertTrue(cYear.compare(aDateTime, null) < 0); [EOL] } <line_num>: 882,887
public void testInvalidObj() { [EOL]     aDateTime = getADate("2000-01-01T00:00:00"); [EOL]     try { [EOL]         cYear.compare("FreeBird", aDateTime); [EOL]         fail("Invalid object failed"); [EOL]     } catch (IllegalArgumentException cce) { [EOL]     } [EOL] } <line_num>: 892,898
private DateTime getADate(String s) { [EOL]     DateTime retDT = null; [EOL]     try { [EOL]         retDT = new DateTime(s, DateTimeZone.UTC); [EOL]     } catch (IllegalArgumentException pe) { [EOL]         pe.printStackTrace(); [EOL]     } [EOL]     return retDT; [EOL] } <line_num>: 905,913
private List loadAList(String[] someStrs) { [EOL]     List newList = new ArrayList(); [EOL]     try { [EOL]         for (int i = 0; i < someStrs.length; ++i) { [EOL]             newList.add(new DateTime(someStrs[i], DateTimeZone.UTC)); [EOL]         } [EOL]     } catch (IllegalArgumentException pe) { [EOL]         pe.printStackTrace(); [EOL]     } [EOL]     return newList; [EOL] } <line_num>: 918,928
private boolean isListSorted(List tl) { [EOL]     DateTime lhDT = (DateTime) tl.get(0); [EOL]     DateTime rhDT = null; [EOL]     Long lhVal = new Long(lhDT.getMillis()); [EOL]     Long rhVal = null; [EOL]     for (int i = 1; i < tl.size(); ++i) { [EOL]         rhDT = (DateTime) tl.get(i); [EOL]         rhVal = new Long(rhDT.getMillis()); [EOL]         if (lhVal.compareTo(rhVal) > 0) [EOL]             return false; [EOL]         lhVal = rhVal; [EOL]         lhDT = rhDT; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 933,948
