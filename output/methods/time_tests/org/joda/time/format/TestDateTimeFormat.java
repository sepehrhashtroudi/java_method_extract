public TestDateTimeFormat(String name) { [EOL]     super(name); [EOL] } <line_num>: 66,68
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 58,60
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTimeFormat.class); [EOL] } <line_num>: 62,64
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 70,78
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 80,88
public void testSubclassableConstructor() { [EOL]     DateTimeFormat f = new DateTimeFormat() { [EOL]     }; [EOL]     assertNotNull(f); [EOL] } <line_num>: 91,96
public void testFormat_era() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("G").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "AD", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "AD", f.print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals(dt.toString(), "AD", f.print(dt)); [EOL] } <line_num>: 99,109
public void testFormat_centuryOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("C").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "1", f.print(dt)); [EOL] } <line_num>: 112,125
public void testFormat_yearOfEra() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Y").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "124", f.print(dt)); [EOL] } <line_num>: 128,141
public void testFormat_yearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL] } <line_num>: 143,189
public void testFormat_yearOfEraParse() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     DateTime dt = new DateTime(2005, 10, 1, 0, 0, 0, 0, chrono); [EOL]     assertEquals(dt, f.parseDateTime("2005-10 AD")); [EOL]     assertEquals(dt, f.parseDateTime("2005-10 CE")); [EOL]     dt = new DateTime(-2005, 10, 1, 0, 0, 0, 0, chrono); [EOL]     assertEquals(dt, f.parseDateTime("2005-10 BC")); [EOL]     assertEquals(dt, f.parseDateTime("2005-10 BCE")); [EOL] } <line_num>: 191,206
public void testFormat_year() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("y").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "-123", f.print(dt)); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 209,233
public void testFormat_year_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 235,348
public void testFormat_year_long() { [EOL]     DateTime dt = new DateTime(278004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy"); [EOL]     assertEquals(dt.toString(), "278004", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyMMdd"); [EOL]     assertEquals(dt.toString(), "2780040609", f.print(dt)); [EOL]     f = DateTimeFormat.forPattern("yyyyddMM"); [EOL]     assertEquals(dt.toString(), "2780040906", f.print(dt)); [EOL] } <line_num>: 350,362
public void testFormat_weekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("x").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "2004", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "-123", f.print(dt)); [EOL] } <line_num>: 365,378
public void testFormat_weekyearOfEra_twoDigit() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "04", f.print(dt)); [EOL]     dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals(dt.toString(), "23", f.print(dt)); [EOL]     f = f.withZoneUTC(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("22")); [EOL]     expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("21")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = f.withPivotYear(new Integer(2050)); [EOL]     expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("00")); [EOL]     expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC); [EOL]     assertEquals(expect, f.parseDateTime("99")); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     try { [EOL]         f.parseDateTime("5"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("005"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("-50"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK); [EOL]     f = f.withZoneUTC(); [EOL]     f.parseDateTime("5"); [EOL]     f.parseDateTime("005"); [EOL]     f.parseDateTime("+50"); [EOL]     f.parseDateTime("-50"); [EOL]     f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter(); [EOL]     f = f.withZoneUTC(); [EOL]     expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+04")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-04")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("4")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-4")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("004")); [EOL]     expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+004")); [EOL]     expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("3004")); [EOL]     expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("+3004")); [EOL]     expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC); [EOL]     assertEquals(expect, f.parseDateTime("-3004")); [EOL]     try { [EOL]         f.parseDateTime("-"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f.parseDateTime("+"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 380,493
public void testFormat_weekOfWeekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("w").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "24", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "24", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "24", f.print(dt)); [EOL] } <line_num>: 496,506
public void testFormat_dayOfWeek() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("e").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "3", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "3", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "3", f.print(dt)); [EOL] } <line_num>: 509,519
public void testFormat_dayOfWeekShortText() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("E").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "Wed", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "Wed", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "Wed", f.print(dt)); [EOL]     f = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(dt.toString(), "mer.", f.print(dt)); [EOL] } <line_num>: 522,535
public void testFormat_dayOfWeekText() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("EEEE").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "Wednesday", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "Wednesday", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "Wednesday", f.print(dt)); [EOL]     f = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(dt.toString(), "mercredi", f.print(dt)); [EOL] } <line_num>: 538,551
public void testFormat_dayOfYearText() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("D").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "161", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "161", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "161", f.print(dt)); [EOL] } <line_num>: 554,564
public void testFormat_monthOfYear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL] } <line_num>: 567,577
public void testFormat_monthOfYearShortText() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("MMM").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "Jun", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "Jun", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "Jun", f.print(dt)); [EOL]     f = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(dt.toString(), "juin", f.print(dt)); [EOL] } <line_num>: 580,593
public void testFormat_monthOfYearText() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("MMMM").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "June", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "June", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "June", f.print(dt)); [EOL]     f = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(dt.toString(), "juin", f.print(dt)); [EOL] } <line_num>: 596,609
public void testFormat_dayOfMonth() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("d").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "9", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "9", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "9", f.print(dt)); [EOL] } <line_num>: 612,622
public void testFormat_halfdayOfDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("a").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "AM", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "AM", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "PM", f.print(dt)); [EOL] } <line_num>: 625,635
public void testFormat_hourOfHalfday() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("K").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "7", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "0", f.print(dt)); [EOL] } <line_num>: 638,651
public void testFormat_clockhourOfHalfday() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("h").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "7", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "12", f.print(dt)); [EOL] } <line_num>: 654,667
public void testFormat_hourOfDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("H").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "19", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "0", f.print(dt)); [EOL] } <line_num>: 670,683
public void testFormat_clockhourOfDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("k").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "10", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "6", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "19", f.print(dt)); [EOL]     dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC); [EOL]     assertEquals(dt.toString(), "24", f.print(dt)); [EOL] } <line_num>: 686,699
public void testFormat_minute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("m").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "20", f.print(dt)); [EOL] } <line_num>: 702,712
public void testFormat_second() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("s").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "30", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "30", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "30", f.print(dt)); [EOL] } <line_num>: 715,725
public void testFormat_fractionOfSecond() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("SSS").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "040", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "040", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "040", f.print(dt)); [EOL] } <line_num>: 728,738
public void testFormat_fractionOfSecondLong() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("SSSSSS").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "040000", f.print(dt)); [EOL] } <line_num>: 741,751
public void testFormat_zoneText() { [EOL] } <line_num>: 754,754
public void testFormat_zoneLongText() { [EOL] } <line_num>: 768,768
public void testFormat_zoneAmount() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("Z").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "+0000", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "-0400", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "+0900", f.print(dt)); [EOL] } <line_num>: 783,793
public void testFormat_zoneAmountColon() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("ZZ").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "+00:00", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "-04:00", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "+09:00", f.print(dt)); [EOL] } <line_num>: 795,805
public void testFormat_zoneAmountID() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("ZZZ").withLocale(Locale.UK); [EOL]     assertEquals(dt.toString(), "UTC", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals(dt.toString(), "America/New_York", f.print(dt)); [EOL]     dt = dt.withZone(TOKYO); [EOL]     assertEquals(dt.toString(), "Asia/Tokyo", f.print(dt)); [EOL] } <line_num>: 807,817
public void testFormat_other() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("'Hello' ''"); [EOL]     assertEquals("Hello '", f.print(dt)); [EOL] } <line_num>: 820,824
public void testFormat_invalid() { [EOL]     try { [EOL]         DateTimeFormat.forPattern(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern(""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern("A"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forPattern("dd/mm/AA"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 826,843
public void testFormat_samples() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-dd HH.mm.ss"); [EOL]     assertEquals("2004-06-09 10.20.30", f.print(dt)); [EOL] } <line_num>: 845,849
public void testFormat_shortBasicParse() { [EOL]     DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd"); [EOL]     assertEquals(dt, f.parseDateTime("040309")); [EOL]     try { [EOL]         assertEquals(dt, f.parseDateTime("20040309")); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     f = DateTimeFormat.forPattern("yy/MM/dd"); [EOL]     assertEquals(dt, f.parseDateTime("04/03/09")); [EOL]     assertEquals(dt, f.parseDateTime("2004/03/09")); [EOL] } <line_num>: 851,867
public void testParse_pivotYear() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd.MM.yy").withPivotYear(2050).withZoneUTC(); [EOL]     DateTime date = dateFormatter.parseDateTime("25.12.15"); [EOL]     assertEquals(date.getYear(), 2015); [EOL]     date = dateFormatter.parseDateTime("25.12.00"); [EOL]     assertEquals(date.getYear(), 2000); [EOL]     date = dateFormatter.parseDateTime("25.12.99"); [EOL]     assertEquals(date.getYear(), 2099); [EOL] } <line_num>: 870,881
public void testParse_pivotYear_ignored4DigitYear() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd.MM.yyyy").withPivotYear(2050).withZoneUTC(); [EOL]     DateTime date = dateFormatter.parseDateTime("25.12.15"); [EOL]     assertEquals(date.getYear(), 15); [EOL]     date = dateFormatter.parseDateTime("25.12.00"); [EOL]     assertEquals(date.getYear(), 0); [EOL]     date = dateFormatter.parseDateTime("25.12.99"); [EOL]     assertEquals(date.getYear(), 99); [EOL] } <line_num>: 883,894
public void testFormatParse_textMonthJanShort_UK() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals(str, "23 Jan 2007"); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 23); [EOL] } <line_num>: 897,905
public void testFormatParse_textMonthJanShortLowerCase_UK() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.UK).withZoneUTC(); [EOL]     DateTime date = dateFormatter.parseDateTime("23 jan 2007"); [EOL]     check(date, 2007, 1, 23); [EOL] } <line_num>: 907,912
public void testFormatParse_textMonthJanShortUpperCase_UK() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.UK).withZoneUTC(); [EOL]     DateTime date = dateFormatter.parseDateTime("23 JAN 2007"); [EOL]     check(date, 2007, 1, 23); [EOL] } <line_num>: 914,919
public void testParse_textMonthJanLong_UK() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.UK).withZoneUTC(); [EOL]     DateTime date = dateFormatter.parseDateTime("23 January 2007"); [EOL]     check(date, 2007, 1, 23); [EOL] } <line_num>: 921,927
public void testFormatParse_textMonthJanLongLowerCase_UK() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.UK).withZoneUTC(); [EOL]     DateTime date = dateFormatter.parseDateTime("23 january 2007"); [EOL]     check(date, 2007, 1, 23); [EOL] } <line_num>: 929,934
public void testFormatParse_textMonthJanLongUpperCase_UK() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.UK).withZoneUTC(); [EOL]     DateTime date = dateFormatter.parseDateTime("23 JANUARY 2007"); [EOL]     check(date, 2007, 1, 23); [EOL] } <line_num>: 936,941
public void testFormatParse_textMonthJanShort_France() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 janv. 2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 23); [EOL] } <line_num>: 943,951
public void testFormatParse_textMonthJanLong_France() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     DateTime date = dateFormatter.parseDateTime("23 janvier 2007"); [EOL]     check(date, 2007, 1, 23); [EOL] } <line_num>: 953,959
public void testFormatParse_textMonthApr_France() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy").withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 2, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 f\u00E9vr. 2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 2, 23); [EOL] } <line_num>: 961,969
public void testFormatParse_textMonthAtEnd_France() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2000, 6, 23); [EOL] } <line_num>: 971,979
public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM").withLocale(Locale.FRANCE).withZoneUTC().withDefaultYear(1980); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("23 juin", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 1980, 6, 23); [EOL] } <line_num>: 981,989
public void testFormatParse_textMonthApr_Korean() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm").withLocale(Locale.KOREAN).withZoneUTC(); [EOL]     String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date); [EOL] } <line_num>: 991,998
public void testFormatParse_textHalfdayAM_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] } <line_num>: 1001,1016
public void testFormatParse_textHalfdayAM_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendClockhourOfHalfday(2).appendLiteral('-').appendHalfdayOfDayText().appendLiteral('-').appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$06-PM-2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] } <line_num>: 1018,1033
public void testFormatParse_textEraAD_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$AD2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] } <line_num>: 1036,1048
public void testFormatParse_textEraAD_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$ap. J.-C.2007", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, 2007, 1, 1); [EOL] } <line_num>: 1050,1062
public void testFormatParse_textEraBC_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendEraText().appendYear(4, 4).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(-1, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$BC-0001", str); [EOL]     DateTime date = dateFormatter.parseDateTime(str); [EOL]     check(date, -1, 1, 1); [EOL] } <line_num>: 1064,1076
public void testFormatParse_textYear_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1079,1094
public void testFormatParse_textYear_France() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendText(DateTimeFieldType.year()).toFormatter().withLocale(Locale.FRANCE).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$2007", str); [EOL]     try { [EOL]         dateFormatter.parseDateTime(str); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1096,1111
public void testFormatParse_textAdjoiningHelloWorld_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendDayOfMonth(2).appendMonthOfYearShortText().appendLiteral("HelloWorld").toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$23JunHelloWorld", str); [EOL]     dateFormatter.parseDateTime(str); [EOL] } <line_num>: 1114,1126
public void testFormatParse_textAdjoiningMonthDOW_UK() { [EOL]     DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder().appendLiteral('$').appendDayOfMonth(2).appendMonthOfYearShortText().appendDayOfWeekShortText().toFormatter().withLocale(Locale.UK).withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("$23JunSat", str); [EOL]     dateFormatter.parseDateTime(str); [EOL] } <line_num>: 1128,1140
public void testFormatParse_zoneId_noColon() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("HH:mm Z").withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 1, 2, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("01:02 +0000", str); [EOL]     DateTime parsed = dateFormatter.parseDateTime(str); [EOL]     assertEquals(1, parsed.getHourOfDay()); [EOL]     assertEquals(2, parsed.getMinuteOfHour()); [EOL] } <line_num>: 1143,1150
public void testFormatParse_zoneId_noColon_parseZ() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("HH:mm Z").withZoneUTC(); [EOL]     DateTime parsed = dateFormatter.parseDateTime("01:02 Z"); [EOL]     assertEquals(1, parsed.getHourOfDay()); [EOL]     assertEquals(2, parsed.getMinuteOfHour()); [EOL] } <line_num>: 1152,1157
public void testFormatParse_zoneId_colon() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("HH:mm ZZ").withZoneUTC(); [EOL]     String str = new DateTime(2007, 6, 23, 1, 2, 0, 0, UTC).toString(dateFormatter); [EOL]     assertEquals("01:02 +00:00", str); [EOL]     DateTime parsed = dateFormatter.parseDateTime(str); [EOL]     assertEquals(1, parsed.getHourOfDay()); [EOL]     assertEquals(2, parsed.getMinuteOfHour()); [EOL] } <line_num>: 1159,1166
public void testFormatParse_zoneId_colon_parseZ() { [EOL]     DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("HH:mm ZZ").withZoneUTC(); [EOL]     DateTime parsed = dateFormatter.parseDateTime("01:02 Z"); [EOL]     assertEquals(1, parsed.getHourOfDay()); [EOL]     assertEquals(2, parsed.getMinuteOfHour()); [EOL] } <line_num>: 1168,1173
private void check(DateTime test, int hour, int min, int sec) { [EOL]     assertEquals(hour, test.getYear()); [EOL]     assertEquals(min, test.getMonthOfYear()); [EOL]     assertEquals(sec, test.getDayOfMonth()); [EOL] } <line_num>: 1176,1180
