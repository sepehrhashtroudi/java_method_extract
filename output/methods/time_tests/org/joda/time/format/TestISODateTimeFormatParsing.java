public TestISODateTimeFormatParsing(String name) { [EOL]     super(name); [EOL] } <line_num>: 46,48
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 38,40
public static TestSuite suite() { [EOL]     return new TestSuite(TestISODateTimeFormatParsing.class); [EOL] } <line_num>: 42,44
protected void setUp() throws Exception { [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.forID("Europe/London")); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 50,57
protected void tearDown() throws Exception { [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 59,66
public void test_dateParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateParser(); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, true, "2006-06-09T+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, true, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] } <line_num>: 69,94
public void test_localDateParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.localDateParser(); [EOL]     assertEquals(DateTimeZone.UTC, parser.getZone()); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] } <line_num>: 97,123
public void test_dateElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateElementParser(); [EOL]     assertParse(parser, "2006-06-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-06-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-09", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-6-9", new DateTime(2006, 6, 9, 0, 0, 0, 0)); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] } <line_num>: 126,154
public void test_timeParser() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.timeParser(); [EOL]     assertParse(parser, false, "2006-06-09"); [EOL]     assertParse(parser, false, "2006-W27-3"); [EOL]     assertParse(parser, false, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, "T10:20:30.040000000", new DateTime(1970, 1, 1, 10, 20, 30, 40)); [EOL]     assertParse(parser, "T10:20:30.004", new DateTime(1970, 1, 1, 10, 20, 30, 4)); [EOL]     assertParse(parser, "T10:20:30.040", new DateTime(1970, 1, 1, 10, 20, 30, 40)); [EOL]     assertParse(parser, "T10:20:30.400", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T10.5", new DateTime(1970, 1, 1, 10, 30, 0, 0)); [EOL]     assertParse(parser, "T10:20:30.040+02:00", new DateTime(1970, 1, 1, 8, 20, 30, 40)); [EOL]     assertParse(parser, "T10.5+02:00", new DateTime(1970, 1, 1, 8, 30, 0, 0)); [EOL]     assertParse(parser, true, "10:20:30.040"); [EOL]     assertParse(parser, true, "10.5"); [EOL]     assertParse(parser, true, "10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "10.5+02:00"); [EOL] } <line_num>: 157,186
public void test_localTimeParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.localTimeParser(); [EOL]     assertEquals(DateTimeZone.UTC, parser.getZone()); [EOL]     assertParse(parser, false, "2006-06-09"); [EOL]     assertParse(parser, false, "2006-W27-3"); [EOL]     assertParse(parser, false, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "T10:20:30.040"); [EOL]     assertParse(parser, true, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, true, "10:20:30.040"); [EOL]     assertParse(parser, true, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL]     assertParse(parser, true, "00:00:10.512345678"); [EOL]     assertEquals(10512, parser.parseMillis("00:00:10.512345678")); [EOL] } <line_num>: 189,218
public void test_timeElementParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.timeElementParser(); [EOL]     assertParse(parser, false, "2006-06-09"); [EOL]     assertParse(parser, false, "2006-W27-3"); [EOL]     assertParse(parser, false, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, true, "10:20:30.040"); [EOL]     assertParse(parser, true, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL]     assertParse(parser, true, "00:00:10.512345678"); [EOL]     assertEquals(10512, parser.parseMillis("00:00:10.512345678") + DateTimeZone.getDefault().getOffset(0L)); [EOL] } <line_num>: 221,250
public void test_dateTimeParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateTimeParser(); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, true, "2006-06-09T+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, true, "2006-123T+02:00"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "T10:20:30.040"); [EOL]     assertParse(parser, true, "T10.5"); [EOL]     assertParse(parser, true, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] } <line_num>: 253,278
public void test_dateOptionalTimeParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateOptionalTimeParser(); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, true, "2006-06-09T+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, true, "2006-123T+02:00"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] } <line_num>: 281,306
public void test_localDateOptionalTimeParser() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.localDateOptionalTimeParser(); [EOL]     assertEquals(DateTimeZone.UTC, parser.getZone()); [EOL]     assertParse(parser, true, "2006-06-09"); [EOL]     assertParse(parser, true, "2006-W27-3"); [EOL]     assertParse(parser, true, "2006-123"); [EOL]     assertParse(parser, false, "2006-06-09T+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T+02:00"); [EOL]     assertParse(parser, false, "2006-123T+02:00"); [EOL]     assertParse(parser, true, "2006-06-09T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-W27-3T10:20:30.040"); [EOL]     assertParse(parser, true, "2006-123T10:20:30.040"); [EOL]     assertParse(parser, false, "2006-06-09T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "2006-123T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10:20:30.040"); [EOL]     assertParse(parser, false, "T10.5"); [EOL]     assertParse(parser, false, "T10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "T10.5+02:00"); [EOL]     assertParse(parser, false, "10:20:30.040"); [EOL]     assertParse(parser, false, "10.5"); [EOL]     assertParse(parser, false, "10:20:30.040+02:00"); [EOL]     assertParse(parser, false, "10.5+02:00"); [EOL] } <line_num>: 309,335
public void test_date() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.date(); [EOL]     assertParse(parser, "2006-02-04", new DateTime(2006, 2, 4, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-2-04", new DateTime(2006, 2, 4, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-02-4", new DateTime(2006, 2, 4, 0, 0, 0, 0)); [EOL]     assertParse(parser, "2006-2-4", new DateTime(2006, 2, 4, 0, 0, 0, 0)); [EOL]     assertParse(parser, false, "2006-02-"); [EOL]     assertParse(parser, false, "2006-02"); [EOL]     assertParse(parser, false, "2006--4"); [EOL]     assertParse(parser, false, "2006-1"); [EOL]     assertParse(parser, false, "2006"); [EOL] } <line_num>: 340,351
public void test_time() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.time(); [EOL]     assertParse(parser, "10:20:30.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "5:6:7.8Z", new DateTime(1970, 1, 1, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "10:20.400Z"); [EOL]     assertParse(parser, false, "10:2.400Z"); [EOL]     assertParse(parser, false, "10.400Z"); [EOL]     assertParse(parser, false, "1.400Z"); [EOL] } <line_num>: 354,366
public void test_timeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.timeNoMillis(); [EOL]     assertParse(parser, "10:20:30Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, "5:6:7Z", new DateTime(1970, 1, 1, 5, 6, 7, 0)); [EOL]     assertParse(parser, false, "10:20Z"); [EOL]     assertParse(parser, false, "10:2Z"); [EOL]     assertParse(parser, false, "10Z"); [EOL]     assertParse(parser, false, "1Z"); [EOL] } <line_num>: 369,378
public void test_tTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.tTime(); [EOL]     assertParse(parser, "T10:20:30.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T10:20:30.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T10:20:30.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T10:20:30.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T5:6:7.8Z", new DateTime(1970, 1, 1, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "T10:20.400Z"); [EOL]     assertParse(parser, false, "T102.400Z"); [EOL]     assertParse(parser, false, "T10.400Z"); [EOL]     assertParse(parser, false, "T1.400Z"); [EOL] } <line_num>: 381,393
public void test_tTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.tTimeNoMillis(); [EOL]     assertParse(parser, "T10:20:30Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, "T5:6:7Z", new DateTime(1970, 1, 1, 5, 6, 7, 0)); [EOL]     assertParse(parser, false, "T10:20Z"); [EOL]     assertParse(parser, false, "T10:2Z"); [EOL]     assertParse(parser, false, "T10Z"); [EOL]     assertParse(parser, false, "T1Z"); [EOL] } <line_num>: 396,405
public void test_dateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateTime(); [EOL]     assertParse(parser, "2006-02-04T10:20:30.400999999Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-04T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-04T10:20:30.40Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-04T10:20:30.4Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-4T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-2-04T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-2-4T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "2006-02-04T5:6:7.800Z", new DateTime(2006, 2, 4, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "2006-02-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-12T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-1T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006T10:20:30.400Z"); [EOL]     assertParse(parser, false, "200T10:20:30.400Z"); [EOL]     assertParse(parser, false, "20T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-02-04T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-02-04T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-02-04T10.400Z"); [EOL]     assertParse(parser, false, "2006-02-04T1.400Z"); [EOL] } <line_num>: 408,430
public void test_dateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.dateTimeNoMillis(); [EOL]     assertParse(parser, "2006-02-04T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, "2006-02-4T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, "2006-2-04T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, "2006-2-4T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, "2006-02-04T5:6:7Z", new DateTime(2006, 2, 4, 5, 6, 7, 0)); [EOL]     assertParse(parser, false, "2006-02-T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-12T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-1T10:20:30Z"); [EOL]     assertParse(parser, false, "2006T10:20:30Z"); [EOL]     assertParse(parser, false, "200T10:20:30Z"); [EOL]     assertParse(parser, false, "20T10:20:30Z"); [EOL]     assertParse(parser, false, "2T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-02-04T10:20Z"); [EOL]     assertParse(parser, false, "2006-02-04T10:2Z"); [EOL]     assertParse(parser, false, "2006-02-04T10Z"); [EOL]     assertParse(parser, false, "2006-02-04T1Z"); [EOL] } <line_num>: 433,452
public void test_ordinalDate() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.ordinalDate(); [EOL]     assertParse(parser, "2006-123", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-12", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(12)); [EOL]     assertParse(parser, "2006-1", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(1)); [EOL]     assertParse(parser, false, "2006-"); [EOL]     assertParse(parser, false, "2006"); [EOL] } <line_num>: 455,462
public void test_ordinalDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTime(); [EOL]     assertParse(parser, "2006-123T10:20:30.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-123T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-123T10:20:30.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-123T10:20:30.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-12T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(12)); [EOL]     assertParse(parser, "2006-1T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(1)); [EOL]     assertParse(parser, "2006-123T5:6:7.800Z", new DateTime(2006, 1, 1, 5, 6, 7, 800).withDayOfYear(123)); [EOL]     assertParse(parser, false, "2006-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-123T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-123T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-123T10.400Z"); [EOL]     assertParse(parser, false, "2006-123T1.400Z"); [EOL] } <line_num>: 465,481
public void test_ordinalDateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTimeNoMillis(); [EOL]     assertParse(parser, "2006-123T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123)); [EOL]     assertParse(parser, "2006-12T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(12)); [EOL]     assertParse(parser, "2006-1T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(1)); [EOL]     assertParse(parser, "2006-123T5:6:7Z", new DateTime(2006, 1, 1, 5, 6, 7, 0).withDayOfYear(123)); [EOL]     assertParse(parser, false, "2006-T10:20:30Z"); [EOL]     assertParse(parser, false, "2006T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-123T10:20Z"); [EOL]     assertParse(parser, false, "2006-123T10:2Z"); [EOL]     assertParse(parser, false, "2006-123T10Z"); [EOL]     assertParse(parser, false, "2006-123T1Z"); [EOL] } <line_num>: 484,497
public void test_weekDate() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDate(); [EOL]     assertParse(parser, "2006-W27-3", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W-3"); [EOL]     assertParse(parser, false, "2006-W27-"); [EOL]     assertParse(parser, false, "2006-W27"); [EOL]     assertParse(parser, false, "2006-W2"); [EOL]     assertParse(parser, false, "2006-W"); [EOL] } <line_num>: 500,509
public void test_weekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTime(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10.400Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1.400Z"); [EOL] } <line_num>: 512,529
public void test_weekDateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.weekDateTimeNoMillis(); [EOL]     assertParse(parser, "2006-W27-3T10:20:30Z", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W2-3T10:20:30Z", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(2).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006-W27-3T5:6:7Z", new DateTime(2006, 6, 1, 5, 6, 7, 0).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006-W27-T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-W27T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-W2T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-W-3T10:20:30Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:20Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10:2Z"); [EOL]     assertParse(parser, false, "2006-W27-3T10Z"); [EOL]     assertParse(parser, false, "2006-W27-3T1Z"); [EOL] } <line_num>: 532,546
public void test_basicDate() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicDate(); [EOL]     assertParse(parser, "20060204", new DateTime(2006, 2, 4, 0, 0, 0, 0)); [EOL]     assertParse(parser, false, "2006024"); [EOL]     assertParse(parser, false, "200602"); [EOL]     assertParse(parser, false, "20061"); [EOL]     assertParse(parser, false, "2006"); [EOL] } <line_num>: 551,558
public void test_basicTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTime(); [EOL]     assertParse(parser, "102030.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "102030.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "102030.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "102030.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, false, "10203.400Z"); [EOL]     assertParse(parser, false, "1020.400Z"); [EOL]     assertParse(parser, false, "102.400Z"); [EOL]     assertParse(parser, false, "10.400Z"); [EOL]     assertParse(parser, false, "1.400Z"); [EOL] } <line_num>: 561,573
public void test_basicTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTimeNoMillis(); [EOL]     assertParse(parser, "102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "10203Z"); [EOL]     assertParse(parser, false, "1020Z"); [EOL]     assertParse(parser, false, "102Z"); [EOL]     assertParse(parser, false, "10Z"); [EOL]     assertParse(parser, false, "1Z"); [EOL] } <line_num>: 576,585
public void test_basicTTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTTime(); [EOL]     assertParse(parser, "T102030.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T102030.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T102030.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "T102030.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, false, "T10203.400Z"); [EOL]     assertParse(parser, false, "T1020.400Z"); [EOL]     assertParse(parser, false, "T102.400Z"); [EOL]     assertParse(parser, false, "T10.400Z"); [EOL]     assertParse(parser, false, "T1.400Z"); [EOL] } <line_num>: 588,600
public void test_basicTTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis(); [EOL]     assertParse(parser, "T102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "T10203Z"); [EOL]     assertParse(parser, false, "T1020Z"); [EOL]     assertParse(parser, false, "T102Z"); [EOL]     assertParse(parser, false, "T10Z"); [EOL]     assertParse(parser, false, "T1Z"); [EOL] } <line_num>: 603,612
public void test_basicDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicDateTime(); [EOL]     assertParse(parser, "20061204T102030.400999999Z", new DateTime(2006, 12, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "20061204T102030.400Z", new DateTime(2006, 12, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "20061204T102030.40Z", new DateTime(2006, 12, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, "20061204T102030.4Z", new DateTime(2006, 12, 4, 10, 20, 30, 400)); [EOL]     assertParse(parser, false, "2006120T102030.400Z"); [EOL]     assertParse(parser, false, "200612T102030.400Z"); [EOL]     assertParse(parser, false, "20061T102030.400Z"); [EOL]     assertParse(parser, false, "2006T102030.400Z"); [EOL]     assertParse(parser, false, "200T102030.400Z"); [EOL]     assertParse(parser, false, "20T102030.400Z"); [EOL]     assertParse(parser, false, "2T102030.400Z"); [EOL]     assertParse(parser, false, "20061204T10203.400Z"); [EOL]     assertParse(parser, false, "20061204T1020.400Z"); [EOL]     assertParse(parser, false, "20061204T102.400Z"); [EOL]     assertParse(parser, false, "20061204T10.400Z"); [EOL]     assertParse(parser, false, "20061204T1.400Z"); [EOL] } <line_num>: 615,634
public void test_basicDateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicDateTimeNoMillis(); [EOL]     assertParse(parser, "20061204T102030Z", new DateTime(2006, 12, 4, 10, 20, 30, 0)); [EOL]     assertParse(parser, false, "2006120T102030Z"); [EOL]     assertParse(parser, false, "200612T102030Z"); [EOL]     assertParse(parser, false, "20061T102030Z"); [EOL]     assertParse(parser, false, "2006T102030Z"); [EOL]     assertParse(parser, false, "200T102030Z"); [EOL]     assertParse(parser, false, "20T102030Z"); [EOL]     assertParse(parser, false, "2T102030Z"); [EOL]     assertParse(parser, false, "20061204T10203Z"); [EOL]     assertParse(parser, false, "20061204T1020Z"); [EOL]     assertParse(parser, false, "20061204T102Z"); [EOL]     assertParse(parser, false, "20061204T10Z"); [EOL]     assertParse(parser, false, "20061204T1Z"); [EOL] } <line_num>: 637,653
public void test_basicOrdinalDate() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDate(); [EOL]     assertParse(parser, "2006123", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123)); [EOL]     assertParse(parser, false, "200612"); [EOL]     assertParse(parser, false, "20061"); [EOL]     assertParse(parser, false, "2006"); [EOL] } <line_num>: 656,662
public void test_basicOrdinalDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTime(); [EOL]     assertParse(parser, "2006123T102030.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, "2006123T102030.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123)); [EOL]     assertParse(parser, false, "200612T102030.400Z"); [EOL]     assertParse(parser, false, "20061T102030.400Z"); [EOL]     assertParse(parser, false, "2006T102030.400Z"); [EOL]     assertParse(parser, false, "200T102030.400Z"); [EOL]     assertParse(parser, false, "20T102030.400Z"); [EOL]     assertParse(parser, false, "2T102030.400Z"); [EOL]     assertParse(parser, false, "2006123T10203.400Z"); [EOL]     assertParse(parser, false, "2006123T1020.400Z"); [EOL]     assertParse(parser, false, "2006123T102.400Z"); [EOL]     assertParse(parser, false, "2006123T10.400Z"); [EOL]     assertParse(parser, false, "2006123T1.400Z"); [EOL] } <line_num>: 665,683
public void test_basicOrdinalDateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTimeNoMillis(); [EOL]     assertParse(parser, "2006123T102030Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123)); [EOL]     assertParse(parser, false, "200612T102030Z"); [EOL]     assertParse(parser, false, "20061T102030Z"); [EOL]     assertParse(parser, false, "2006T102030Z"); [EOL]     assertParse(parser, false, "200T102030Z"); [EOL]     assertParse(parser, false, "20T102030Z"); [EOL]     assertParse(parser, false, "2T102030Z"); [EOL]     assertParse(parser, false, "2006123T10203Z"); [EOL]     assertParse(parser, false, "2006123T1020Z"); [EOL]     assertParse(parser, false, "2006123T102Z"); [EOL]     assertParse(parser, false, "2006123T10Z"); [EOL]     assertParse(parser, false, "2006123T1Z"); [EOL] } <line_num>: 686,701
public void test_basicWeekDate() { [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicWeekDate(); [EOL]     assertParse(parser, "2006W273", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006W27"); [EOL]     assertParse(parser, false, "2006W2"); [EOL]     assertParse(parser, false, "2006W"); [EOL] } <line_num>: 704,710
public void test_basicWeekDateTime() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTime(); [EOL]     assertParse(parser, "2006W273T102030.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006W273T102030.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006W273T102030.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, "2006W273T102030.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006W27T102030.400Z"); [EOL]     assertParse(parser, false, "2006W2T102030.400Z"); [EOL]     assertParse(parser, false, "2006W273T10203.400Z"); [EOL]     assertParse(parser, false, "2006W273T1020.400Z"); [EOL]     assertParse(parser, false, "2006W273T102.400Z"); [EOL]     assertParse(parser, false, "2006W273T10.400Z"); [EOL]     assertParse(parser, false, "2006W273T1.400Z"); [EOL] } <line_num>: 713,727
public void test_basicWeekDateTimeNoMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTimeNoMillis(); [EOL]     assertParse(parser, "2006W273T102030Z", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3)); [EOL]     assertParse(parser, false, "2006W27T102030Z"); [EOL]     assertParse(parser, false, "2006W2T102030Z"); [EOL]     assertParse(parser, false, "2006W273T10203Z"); [EOL]     assertParse(parser, false, "2006W273T1020Z"); [EOL]     assertParse(parser, false, "2006W273T102Z"); [EOL]     assertParse(parser, false, "2006W273T10Z"); [EOL]     assertParse(parser, false, "2006W273T1Z"); [EOL] } <line_num>: 730,741
public void test_hourMinute() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.hourMinute(); [EOL]     assertParse(parser, "10:20", new DateTime(1970, 1, 1, 10, 20, 0, 0)); [EOL]     assertParse(parser, "5:6", new DateTime(1970, 1, 1, 5, 6, 0, 0)); [EOL]     assertParse(parser, false, "10:20:30.400999999"); [EOL]     assertParse(parser, false, "10:20:30.400"); [EOL]     assertParse(parser, false, "10:20:30"); [EOL]     assertParse(parser, false, "10:20.400"); [EOL]     assertParse(parser, false, "10:2.400"); [EOL]     assertParse(parser, false, "10.400"); [EOL]     assertParse(parser, false, "1.400"); [EOL] } <line_num>: 746,758
public void test_hourMinuteSecond() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecond(); [EOL]     assertParse(parser, "10:20:30", new DateTime(1970, 1, 1, 10, 20, 30, 0)); [EOL]     assertParse(parser, "5:6:7", new DateTime(1970, 1, 1, 5, 6, 7, 0)); [EOL]     assertParse(parser, false, "10:20:30.400999999"); [EOL]     assertParse(parser, false, "10:20:30.400"); [EOL]     assertParse(parser, false, "10:20:30.4"); [EOL]     assertParse(parser, false, "10:20.400"); [EOL]     assertParse(parser, false, "10:2.400"); [EOL]     assertParse(parser, false, "10.400"); [EOL]     assertParse(parser, false, "1.400"); [EOL] } <line_num>: 761,773
public void test_hourMinuteSecondMillis() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecondMillis(); [EOL]     assertParse(parser, "10:20:30.400", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.40", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.4", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "5:6:7.8", new DateTime(1970, 1, 1, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "10:20:30.400999999"); [EOL]     assertParse(parser, false, "10:20.400"); [EOL]     assertParse(parser, false, "10:2.400"); [EOL]     assertParse(parser, false, "10.400"); [EOL]     assertParse(parser, false, "1.400"); [EOL] } <line_num>: 776,788
public void test_hourMinuteSecondFraction() { [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecondFraction(); [EOL]     assertParse(parser, "10:20:30.400999999", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.400", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.40", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "10:20:30.4", new DateTime(1970, 1, 1, 10, 20, 30, 400)); [EOL]     assertParse(parser, "5:6:7.8", new DateTime(1970, 1, 1, 5, 6, 7, 800)); [EOL]     assertParse(parser, false, "10:20.400"); [EOL]     assertParse(parser, false, "10:2.400"); [EOL]     assertParse(parser, false, "10.400"); [EOL]     assertParse(parser, false, "1.400"); [EOL] } <line_num>: 791,803
private void assertParse(DateTimeFormatter parser, boolean expected, String str) { [EOL]     if (expected) { [EOL]         parser.parseMillis(str); [EOL]     } else { [EOL]         try { [EOL]             parser.parseMillis(str); [EOL]             fail(); [EOL]         } catch (IllegalArgumentException ex) { [EOL]         } [EOL]     } [EOL] } <line_num>: 808,819
private void assertParse(DateTimeFormatter parser, String str, DateTime expected) { [EOL]     DateTime dt = parser.parseDateTime(str); [EOL]     assertEquals(expected, dt); [EOL] } <line_num>: 821,824
