public TestPeriodFormatterBuilder(String name) { [EOL]     super(name); [EOL] } <line_num>: 70,72
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 62,64
public static TestSuite suite() { [EOL]     return new TestSuite(TestPeriodFormatterBuilder.class); [EOL] } <line_num>: 66,68
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL]     builder = new PeriodFormatterBuilder(); [EOL] } <line_num>: 74,84
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 86,94
public void testToFormatterPrinterParser() { [EOL]     builder.appendYears(); [EOL]     assertNotNull(builder.toFormatter()); [EOL]     assertNotNull(builder.toPrinter()); [EOL]     assertNotNull(builder.toParser()); [EOL] } <line_num>: 97,102
public void testFormatYears() { [EOL]     PeriodFormatter f = builder.appendYears().toFormatter(); [EOL]     assertEquals("1", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 105,115
public void testFormatMonths() { [EOL]     PeriodFormatter f = builder.appendMonths().toFormatter(); [EOL]     assertEquals("2", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 117,127
public void testFormatWeeks() { [EOL]     PeriodFormatter f = builder.appendWeeks().toFormatter(); [EOL]     assertEquals("3", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 129,139
public void testFormatDays() { [EOL]     PeriodFormatter f = builder.appendDays().toFormatter(); [EOL]     assertEquals("4", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 141,151
public void testFormatHours() { [EOL]     PeriodFormatter f = builder.appendHours().toFormatter(); [EOL]     assertEquals("5", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 153,163
public void testFormatMinutes() { [EOL]     PeriodFormatter f = builder.appendMinutes().toFormatter(); [EOL]     assertEquals("6", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 165,175
public void testFormatSeconds() { [EOL]     PeriodFormatter f = builder.appendSeconds().toFormatter(); [EOL]     assertEquals("7", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 177,187
public void testFormatSecondsWithMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0.000", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 189,235
public void testFormatSecondsWithOptionalMillis() { [EOL]     PeriodFormatter f = builder.appendSecondsWithOptionalMillis().toFormatter(); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0); [EOL]     assertEquals("7", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1); [EOL]     assertEquals("7.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 999); [EOL]     assertEquals("7.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1000); [EOL]     assertEquals("8", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, 1001); [EOL]     assertEquals("8.001", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 7, -1); [EOL]     assertEquals("6.999", f.print(p)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, 1); [EOL]     assertEquals("-6.999", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, -7, -1); [EOL]     assertEquals("-7.001", f.print(p)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL]     p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 237,283
public void testFormatMillis() { [EOL]     PeriodFormatter f = builder.appendMillis().toFormatter(); [EOL]     assertEquals("8", f.print(PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0", f.print(p)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 285,295
public void testFormatMillis3Digit() { [EOL]     PeriodFormatter f = builder.appendMillis3Digit().toFormatter(); [EOL]     assertEquals("008", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("000", f.print(p)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 297,307
public void testFormatPrefixSimple1() { [EOL]     PeriodFormatter f = builder.appendPrefix("Years:").appendYears().toFormatter(); [EOL]     assertEquals("Years:1", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Years:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 310,320
public void testFormatPrefixSimple2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 322,332
public void testFormatPrefixSimple3() { [EOL]     try { [EOL]         builder.appendPrefix(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 334,339
public void testFormatPrefixPlural1() { [EOL]     PeriodFormatter f = builder.appendPrefix("Year:", "Years:").appendYears().toFormatter(); [EOL]     assertEquals("Year:1", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Years:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 341,351
public void testFormatPrefixPlural2() { [EOL]     PeriodFormatter f = builder.appendPrefix("Hour:", "Hours:").appendHours().toFormatter(); [EOL]     assertEquals("Hours:5", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("Hours:0", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 353,363
public void testFormatPrefixPlural3() { [EOL]     try { [EOL]         builder.appendPrefix(null, ""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         builder.appendPrefix("", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         builder.appendPrefix(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 365,378
public void testFormatSuffixSimple1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" years").toFormatter(); [EOL]     assertEquals("1 years", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 381,391
public void testFormatSuffixSimple2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 393,403
public void testFormatSuffixSimple3() { [EOL]     try { [EOL]         builder.appendSuffix(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 405,410
public void testFormatSuffixSimple4() { [EOL]     try { [EOL]         builder.appendSuffix(" hours"); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] } <line_num>: 412,417
public void testFormatSuffixPlural1() { [EOL]     PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter(); [EOL]     assertEquals("1 year", f.print(PERIOD)); [EOL]     assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 years", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 419,429
public void testFormatSuffixPlural2() { [EOL]     PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter(); [EOL]     assertEquals("5 hours", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 hours", f.print(p)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 431,441
public void testFormatSuffixPlural3() { [EOL]     try { [EOL]         builder.appendSuffix(null, ""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         builder.appendSuffix("", null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         builder.appendSuffix(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 443,456
public void testFormatSuffixPlural4() { [EOL]     try { [EOL]         builder.appendSuffix(" hour", " hours"); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] } <line_num>: 458,463
public void testFormatPrefixSuffix() { [EOL]     PeriodFormatter f = builder.appendPrefix("P").appendYears().appendSuffix("Y").toFormatter(); [EOL]     assertEquals("P1Y", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("P0Y", f.print(p)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(p, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 466,476
public void testFormatSeparatorSimple() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 479,492
public void testFormatSeparatorComplex() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparator(", ", " and ").appendHours().appendSeparator(", ", " and ").appendMinutes().appendSeparator(", ", " and ").toFormatter(); [EOL]     assertEquals("1, 5 and 6", f.print(PERIOD)); [EOL]     assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5 and 6", f.print(TIME_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 494,511
public void testFormatSeparatorIfFieldsAfter() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("T5", f.print(TIME_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1", f.print(DATE_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 513,526
public void testFormatSeparatorIfFieldsBefore() { [EOL]     PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter(); [EOL]     assertEquals("1T5", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("5", f.print(TIME_PERIOD)); [EOL]     assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1T", f.print(DATE_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 528,541
public void testFormatLiteral() { [EOL]     PeriodFormatter f = builder.appendLiteral("HELLO").toFormatter(); [EOL]     assertEquals("HELLO", f.print(PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(0, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 544,549
public void testFormatAppendFormatter() { [EOL]     PeriodFormatter base = builder.appendYears().appendLiteral("-").toFormatter(); [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().append(base).appendYears().toFormatter(); [EOL]     assertEquals("1-1", f.print(PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 551,557
public void testFormatMinDigits() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter(); [EOL]     assertEquals("0001", f.print(PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 559,564
public void testFormatPrintZeroDefault() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     f = new PeriodFormatterBuilder().appendYears().appendLiteral("-").appendYears().toFormatter(); [EOL]     assertEquals("-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(2, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 567,597
public void testFormatPrintZeroRarelyLast() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyLast().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 599,622
public void testFormatPrintZeroRarelyFirst() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 624,647
public void testFormatPrintZeroRarelyFirstYears() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] } <line_num>: 649,654
public void testFormatPrintZeroRarelyFirstMonths() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendMonths().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] } <line_num>: 656,661
public void testFormatPrintZeroRarelyFirstWeeks() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendWeeks().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] } <line_num>: 663,668
public void testFormatPrintZeroRarelyFirstDays() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendDays().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] } <line_num>: 670,675
public void testFormatPrintZeroRarelyFirstHours() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendHours().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] } <line_num>: 677,682
public void testFormatPrintZeroRarelyFirstMinutes() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendMinutes().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] } <line_num>: 684,689
public void testFormatPrintZeroRarelyFirstSeconds() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroRarelyFirst().appendSeconds().toFormatter(); [EOL]     assertEquals("0", f.print(EMPTY_PERIOD)); [EOL] } <line_num>: 691,696
public void testFormatPrintZeroIfSupported() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroIfSupported().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 698,721
public void testFormatPrintZeroAlways() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroAlways().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("0-0-0-0", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 723,746
public void testFormatPrintZeroNever() { [EOL]     PeriodFormatter f = new PeriodFormatterBuilder().printZeroNever().appendYears().appendLiteral("-").appendMonths().appendLiteral("-").appendWeeks().appendLiteral("-").appendDays().toFormatter(); [EOL]     assertEquals("1-2-3-4", f.print(PERIOD)); [EOL]     assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null)); [EOL]     assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---", f.print(EMPTY_YEAR_DAY_PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("1---4", f.print(YEAR_DAY_PERIOD)); [EOL]     assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null)); [EOL]     assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null)); [EOL]     assertEquals("---", f.print(EMPTY_PERIOD)); [EOL]     assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null)); [EOL]     assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null)); [EOL] } <line_num>: 748,771
public void testFormatAppend_PrinterParser_null_null() { [EOL]     try { [EOL]         new PeriodFormatterBuilder().append(null, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 774,779
public void testFormatAppend_PrinterParser_Printer_null() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     try { [EOL]         f.parsePeriod("1-2"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] } <line_num>: 781,793
public void testFormatAppend_PrinterParser_null_Parser() { [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(null, parser).appendMonths(); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     try { [EOL]         f.print(PERIOD); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] } <line_num>: 795,807
public void testFormatAppend_PrinterParser_PrinterParser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL]     PeriodFormatter f = bld.toFormatter(); [EOL]     assertEquals("1-2", f.print(PERIOD)); [EOL]     assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2")); [EOL] } <line_num>: 809,819
public void testFormatAppend_PrinterParser_Printer_null_null_Parser() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     try { [EOL]         bld.toFormatter(); [EOL]         fail(); [EOL]     } catch (IllegalStateException ex) { [EOL]     } [EOL] } <line_num>: 821,832
public void testFormatAppend_PrinterParserThenClear() { [EOL]     PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter(); [EOL]     PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser(); [EOL]     PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser); [EOL]     assertNull(bld.toPrinter()); [EOL]     assertNull(bld.toParser()); [EOL]     bld.clear(); [EOL]     bld.appendMonths(); [EOL]     assertNotNull(bld.toPrinter()); [EOL]     assertNotNull(bld.toParser()); [EOL] } <line_num>: 834,844
public void testBug2495455() { [EOL]     PeriodFormatter pfmt1 = new PeriodFormatterBuilder().appendLiteral("P").appendYears().appendSuffix("Y").appendMonths().appendSuffix("M").appendWeeks().appendSuffix("W").appendDays().appendSuffix("D").appendSeparatorIfFieldsAfter("T").appendHours().appendSuffix("H").appendMinutes().appendSuffix("M").appendSecondsWithOptionalMillis().appendSuffix("S").toFormatter(); [EOL]     PeriodFormatter pfmt2 = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter(); [EOL]     pfmt1.parsePeriod("PT1003199059S"); [EOL]     pfmt2.parsePeriod("PT1003199059S"); [EOL] } <line_num>: 846,870
