public TestTextFields(String name) { [EOL]     super(name); [EOL] } <line_num>: 70,72
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 62,64
public static TestSuite suite() { [EOL]     return new TestSuite(TestTextFields.class); [EOL] } <line_num>: 66,68
protected void setUp() throws Exception { [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(ZONES[0]); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL] } <line_num>: 74,79
protected void tearDown() throws Exception { [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 81,86
public void testMonthNames_monthStart() { [EOL]     DateTimeFormatter printer = DateTimeFormat.forPattern("MMMM"); [EOL]     for (int i = 0; i < ZONES.length; i++) { [EOL]         for (int month = 1; month <= 12; month++) { [EOL]             DateTime dt = new DateTime(2004, month, 1, 1, 20, 30, 40, ZONES[i]); [EOL]             String monthText = printer.print(dt); [EOL]             assertEquals(MONTHS[month], monthText); [EOL]         } [EOL]     } [EOL] } <line_num>: 89,98
public void testMonthNames_monthMiddle() { [EOL]     DateTimeFormatter printer = DateTimeFormat.forPattern("MMMM"); [EOL]     for (int i = 0; i < ZONES.length; i++) { [EOL]         for (int month = 1; month <= 12; month++) { [EOL]             DateTime dt = new DateTime(2004, month, 15, 12, 20, 30, 40, ZONES[i]); [EOL]             String monthText = printer.print(dt); [EOL]             assertEquals(MONTHS[month], monthText); [EOL]         } [EOL]     } [EOL] } <line_num>: 100,109
public void testMonthNames_monthEnd() { [EOL]     DateTimeFormatter printer = DateTimeFormat.forPattern("MMMM"); [EOL]     for (int i = 0; i < ZONES.length; i++) { [EOL]         Chronology chrono = ISOChronology.getInstance(ZONES[i]); [EOL]         for (int month = 1; month <= 12; month++) { [EOL]             DateTime dt = new DateTime(2004, month, 1, 23, 20, 30, 40, chrono); [EOL]             int lastDay = chrono.dayOfMonth().getMaximumValue(dt.getMillis()); [EOL]             dt = new DateTime(2004, month, lastDay, 23, 20, 30, 40, chrono); [EOL]             String monthText = printer.print(dt); [EOL]             assertEquals(MONTHS[month], monthText); [EOL]         } [EOL]     } [EOL] } <line_num>: 111,123
public void testWeekdayNames() { [EOL]     DateTimeFormatter printer = DateTimeFormat.forPattern("EEEE"); [EOL]     for (int i = 0; i < ZONES.length; i++) { [EOL]         MutableDateTime mdt = new MutableDateTime(2004, 1, 1, 1, 20, 30, 40, ZONES[i]); [EOL]         for (int day = 1; day <= 366; day++) { [EOL]             mdt.setDayOfYear(day); [EOL]             int weekday = mdt.getDayOfWeek(); [EOL]             String weekdayText = printer.print(mdt); [EOL]             assertEquals(WEEKDAYS[weekday], weekdayText); [EOL]         } [EOL]     } [EOL] } <line_num>: 125,136
public void testHalfdayNames() { [EOL]     DateTimeFormatter printer = DateTimeFormat.forPattern("a"); [EOL]     for (int i = 0; i < ZONES.length; i++) { [EOL]         Chronology chrono = ISOChronology.getInstance(ZONES[i]); [EOL]         MutableDateTime mdt = new MutableDateTime(2004, 5, 30, 0, 20, 30, 40, chrono); [EOL]         for (int hour = 0; hour < 24; hour++) { [EOL]             mdt.setHourOfDay(hour); [EOL]             int halfday = mdt.get(chrono.halfdayOfDay()); [EOL]             String halfdayText = printer.print(mdt); [EOL]             assertEquals(HALFDAYS[halfday], halfdayText); [EOL]         } [EOL]     } [EOL] } <line_num>: 138,150
