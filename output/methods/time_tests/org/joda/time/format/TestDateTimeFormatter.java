public TestDateTimeFormatter(String name) { [EOL]     super(name); [EOL] } <line_num>: 77,79
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 69,71
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTimeFormatter.class); [EOL] } <line_num>: 73,75
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL]     f = new DateTimeFormatterBuilder().appendDayOfWeekShortText().appendLiteral(' ').append(ISODateTimeFormat.dateTimeNoMillis()).toFormatter(); [EOL]     g = ISODateTimeFormat.dateTimeNoMillis(); [EOL] } <line_num>: 81,95
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL]     f = null; [EOL]     g = null; [EOL] } <line_num>: 97,107
public void testPrint_simple() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.print(dt)); [EOL] } <line_num>: 110,122
public void testPrint_locale() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("mer. 2004-06-09T10:20:30Z", f.withLocale(Locale.FRENCH).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withLocale(null).print(dt)); [EOL] } <line_num>: 125,129
public void testPrint_zone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withZone(null).print(dt)); [EOL]     dt = dt.withZone(NEWYORK); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withZoneUTC().print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withZone(null).print(dt)); [EOL] } <line_num>: 132,143
public void testPrint_chrono() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).print(dt)); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.withChronology(BUDDHIST_PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withChronology(null).print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).print(dt)); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.withChronology(BUDDHIST_PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withChronology(ISO_UTC).print(dt)); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.withChronology(null).print(dt)); [EOL] } <line_num>: 146,157
public void testPrint_bufferMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuffer buf = new StringBuffer(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuffer(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuffer(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuffer(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 160,179
public void testPrint_writerMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     f.printTo(out, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay()); [EOL]     assertEquals("2004-06-09", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 182,201
public void testPrint_appendableMethods() throws Exception { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     StringBuilder buf = new StringBuilder(); [EOL]     f.printTo(buf, dt); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     f.printTo(buf, dt.getMillis()); [EOL]     assertEquals("Wed 2004-06-09T11:20:30+01:00", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate()); [EOL]     assertEquals("2004-06-09", buf.toString()); [EOL]     buf = new StringBuilder(); [EOL]     try { [EOL]         ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 204,223
public void testPrint_chrono_and_zone() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("Wed 2004-06-09T10:20:30Z", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL]     dt = dt.withChronology(ISO_PARIS); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL]     dt = dt.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals("Wed 2547-06-09T12:20:30+02:00", f.withChronology(null).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(null).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T12:20:30+02:00", f.withChronology(ISO_PARIS).withZone(PARIS).print(dt)); [EOL]     assertEquals("Wed 2004-06-09T06:20:30-04:00", f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt)); [EOL]     assertEquals("Wed 2547-06-09T06:20:30-04:00", f.withChronology(null).withZone(NEWYORK).print(dt)); [EOL] } <line_num>: 226,262
public void testWithGetLocale() { [EOL]     DateTimeFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] } <line_num>: 264,272
public void testWithGetZone() { [EOL]     DateTimeFormatter f2 = f.withZone(PARIS); [EOL]     assertEquals(PARIS, f2.getZone()); [EOL]     assertSame(f2, f2.withZone(PARIS)); [EOL]     f2 = f.withZone(null); [EOL]     assertEquals(null, f2.getZone()); [EOL]     assertSame(f2, f2.withZone(null)); [EOL] } <line_num>: 274,282
public void testWithGetChronology() { [EOL]     DateTimeFormatter f2 = f.withChronology(BUDDHIST_PARIS); [EOL]     assertEquals(BUDDHIST_PARIS, f2.getChronology()); [EOL]     assertSame(f2, f2.withChronology(BUDDHIST_PARIS)); [EOL]     f2 = f.withChronology(null); [EOL]     assertEquals(null, f2.getChronology()); [EOL]     assertSame(f2, f2.withChronology(null)); [EOL] } <line_num>: 284,292
public void testWithGetPivotYear() { [EOL]     DateTimeFormatter f2 = f.withPivotYear(13); [EOL]     assertEquals(new Integer(13), f2.getPivotYear()); [EOL]     assertSame(f2, f2.withPivotYear(13)); [EOL]     f2 = f.withPivotYear(new Integer(14)); [EOL]     assertEquals(new Integer(14), f2.getPivotYear()); [EOL]     assertSame(f2, f2.withPivotYear(new Integer(14))); [EOL]     f2 = f.withPivotYear(null); [EOL]     assertEquals(null, f2.getPivotYear()); [EOL]     assertSame(f2, f2.withPivotYear(null)); [EOL] } <line_num>: 294,306
public void testWithGetOffsetParsedMethods() { [EOL]     DateTimeFormatter f2 = f; [EOL]     assertEquals(false, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f.withOffsetParsed(); [EOL]     assertEquals(true, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f2.withZone(PARIS); [EOL]     assertEquals(false, f2.isOffsetParsed()); [EOL]     assertEquals(PARIS, f2.getZone()); [EOL]     f2 = f2.withOffsetParsed(); [EOL]     assertEquals(true, f2.isOffsetParsed()); [EOL]     assertEquals(null, f2.getZone()); [EOL]     f2 = f.withOffsetParsed(); [EOL]     assertNotSame(f, f2); [EOL]     DateTimeFormatter f3 = f2.withOffsetParsed(); [EOL]     assertSame(f2, f3); [EOL] } <line_num>: 308,329
public void testPrinterParserMethods() { [EOL]     DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL]     f2 = new DateTimeFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(0L)); [EOL]     try { [EOL]         f2.parseDateTime("Thu 1970-01-01T00:00:00Z"); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new DateTimeFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(0L); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parseDateTime("Thu 1970-01-01T00:00:00Z")); [EOL] } <line_num>: 331,361
public void testParseLocalDate_simple() { [EOL]     assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalDate(2004, 6, 9, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalDate("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 364,374
public void testParseLocalDate_yearOfEra() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("YYYY-MM GG").withChronology(chrono).withLocale(Locale.UK); [EOL]     LocalDate date = new LocalDate(2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 AD")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 CE")); [EOL]     date = new LocalDate(-2005, 10, 1, chrono); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BC")); [EOL]     assertEquals(date, f.parseLocalDate("2005-10 BCE")); [EOL] } <line_num>: 376,390
public void testParseLocalDate_yearOfCentury() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yy M d").withChronology(chrono).withLocale(Locale.UK).withPivotYear(2050); [EOL]     LocalDate date = new LocalDate(2050, 8, 4, chrono); [EOL]     assertEquals(date, f.parseLocalDate("50 8 4")); [EOL] } <line_num>: 392,402
public void testParseLocalDate_monthDay_feb29() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withChronology(chrono).withLocale(Locale.UK); [EOL]     assertEquals(new LocalDate(2000, 2, 29, chrono), f.parseLocalDate("2 29")); [EOL] } <line_num>: 404,412
public void testParseLocalDate_monthDay_withDefaultYear_feb29() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withChronology(chrono).withLocale(Locale.UK).withDefaultYear(2012); [EOL]     assertEquals(new LocalDate(2012, 2, 29, chrono), f.parseLocalDate("2 29")); [EOL] } <line_num>: 414,423
public void testParseLocalDate_weekyear_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] } <line_num>: 425,429
public void testParseLocalDate_weekyear_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] } <line_num>: 431,435
public void testParseLocalDate_weekyear_month_week_2012() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate("2012-01-01")); [EOL] } <line_num>: 437,441
public void testParseLocalDate_year_month_week_2010() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate("2010-01-01")); [EOL] } <line_num>: 451,455
public void testParseLocalDate_year_month_week_2011() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate("2011-01-01")); [EOL] } <line_num>: 457,461
public void testParseLocalDate_year_month_week_2012() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate("2012-01-01")); [EOL] } <line_num>: 463,467
public void testParseLocalDate_year_month_week_2013() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2012, 12, 31, chrono), f.parseLocalDate("2013-01-01")); [EOL] } <line_num>: 469,473
public void testParseLocalDate_year_month_week_2014() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2013, 12, 30, chrono), f.parseLocalDate("2014-01-01")); [EOL] } <line_num>: 475,479
public void testParseLocalDate_year_month_week_2015() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2014, 12, 29, chrono), f.parseLocalDate("2015-01-01")); [EOL] } <line_num>: 481,485
public void testParseLocalDate_year_month_week_2016() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-ww").withChronology(chrono); [EOL]     assertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate("2016-01-01")); [EOL] } <line_num>: 487,491
public void testParseLocalTime_simple() { [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalTime(10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 494,504
public void testParseLocalDateTime_simple() { [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30+18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime("2004-06-09T10:20:30-18:00")); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 0, BUDDHIST_PARIS), g.withChronology(BUDDHIST_PARIS).parseLocalDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 507,517
public void testParseLocalDateTime_monthDay_feb29() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d H m").withChronology(chrono).withLocale(Locale.UK); [EOL]     assertEquals(new LocalDateTime(2000, 2, 29, 13, 40, 0, 0, chrono), f.parseLocalDateTime("2 29 13 40")); [EOL] } <line_num>: 519,527
public void testParseLocalDateTime_monthDay_withDefaultYear_feb29() { [EOL]     Chronology chrono = GJChronology.getInstanceUTC(); [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d H m").withChronology(chrono).withLocale(Locale.UK).withDefaultYear(2012); [EOL]     assertEquals(new LocalDateTime(2012, 2, 29, 13, 40, 0, 0, chrono), f.parseLocalDateTime("2 29 13 40")); [EOL] } <line_num>: 529,538
public void testParseDateTime_simple() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.parseDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 541,550
public void testParseDateTime_zone() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(LONDON).parseDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(null).parseDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withZone(PARIS).parseDateTime("2004-06-09T10:20:30Z")); [EOL] } <line_num>: 552,562
public void testParseDateTime_zone2() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(LONDON).parseDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(null).parseDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withZone(PARIS).parseDateTime("2004-06-09T06:20:30-04:00")); [EOL] } <line_num>: 564,574
public void testParseDateTime_zone3() { [EOL]     DateTimeFormatter h = new DateTimeFormatterBuilder().append(ISODateTimeFormat.date()).appendLiteral('T').append(ISODateTimeFormat.timeElementParser()).toFormatter(); [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, h.withZone(LONDON).parseDateTime("2004-06-09T10:20:30")); [EOL]     expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, h.withZone(null).parseDateTime("2004-06-09T10:20:30")); [EOL]     expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, h.withZone(PARIS).parseDateTime("2004-06-09T10:20:30")); [EOL] } <line_num>: 576,592
public void testParseDateTime_simple_precedence() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] } <line_num>: 594,604
public void testParseDateTime_offsetParsed() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseDateTime("2004-06-09T10:20:30Z")); [EOL] } <line_num>: 606,618
public void testParseDateTime_chrono() { [EOL]     DateTime expect = null; [EOL]     expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withChronology(ISO_PARIS).parseDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withChronology(null).parseDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS); [EOL]     assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseDateTime("2547-06-09T10:20:30Z")); [EOL]     expect = new DateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); [EOL]     assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseDateTime("2004-06-09T10:20:30Z")); [EOL] } <line_num>: 620,633
public void testParseMutableDateTime_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     try { [EOL]         g.parseMutableDateTime("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 636,645
public void testParseMutableDateTime_zone() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(LONDON).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(null).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] } <line_num>: 647,657
public void testParseMutableDateTime_zone2() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(LONDON).parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withZone(null).parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withZone(PARIS).parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL] } <line_num>: 659,669
public void testParseMutableDateTime_zone3() { [EOL]     DateTimeFormatter h = new DateTimeFormatterBuilder().append(ISODateTimeFormat.date()).appendLiteral('T').append(ISODateTimeFormat.timeElementParser()).toFormatter(); [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, h.withZone(LONDON).parseMutableDateTime("2004-06-09T10:20:30")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, h.withZone(null).parseMutableDateTime("2004-06-09T10:20:30")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, h.withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30")); [EOL] } <line_num>: 671,687
public void testParseMutableDateTime_simple_precedence() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Wed 2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, f.parseDateTime("Mon 2004-06-09T10:20:30Z")); [EOL] } <line_num>: 689,699
public void testParseMutableDateTime_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     assertEquals(expect, g.withOffsetParsed().parseMutableDateTime("2004-06-09T06:20:30-04:00")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] } <line_num>: 701,713
public void testParseMutableDateTime_chrono() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(expect, g.withChronology(ISO_PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(expect, g.withChronology(null).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS); [EOL]     assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseMutableDateTime("2547-06-09T10:20:30Z")); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); [EOL]     assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseMutableDateTime("2004-06-09T10:20:30Z")); [EOL] } <line_num>: 715,728
public void testParseInto_simple() { [EOL]     MutableDateTime expect = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     MutableDateTime result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         g.parseInto(null, "2004-06-09T10:20:30Z", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, g.parseInto(result, "ABC", 0)); [EOL]     assertEquals(~10, g.parseInto(result, "2004-06-09", 0)); [EOL]     assertEquals(~13, g.parseInto(result, "XX2004-06-09T", 2)); [EOL] } <line_num>: 731,746
public void testParseInto_zone() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(LONDON).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(null).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] } <line_num>: 748,765
public void testParseInto_zone2() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(25, g.withZone(LONDON).parseInto(result, "2004-06-09T06:20:30-04:00", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     assertEquals(25, g.withZone(null).parseInto(result, "2004-06-09T06:20:30-04:00", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     assertEquals(25, g.withZone(PARIS).parseInto(result, "2004-06-09T06:20:30-04:00", 0)); [EOL]     assertEquals(expect, result); [EOL] } <line_num>: 767,782
public void testParseInto_zone3() { [EOL]     DateTimeFormatter h = new DateTimeFormatterBuilder().append(ISODateTimeFormat.date()).appendLiteral('T').append(ISODateTimeFormat.timeElementParser()).toFormatter(); [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(19, h.withZone(LONDON).parseInto(result, "2004-06-09T10:20:30", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(19, h.withZone(null).parseInto(result, "2004-06-09T10:20:30", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(19, h.withZone(PARIS).parseInto(result, "2004-06-09T10:20:30", 0)); [EOL]     assertEquals(expect, result); [EOL] } <line_num>: 784,807
public void testParseInto_simple_precedence() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(24, f.parseInto(result, "Mon 2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] } <line_num>: 809,817
public void testParseInto_offsetParsed() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4)); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(25, g.withOffsetParsed().parseInto(result, "2004-06-09T06:20:30-04:00", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withZone(PARIS).withOffsetParsed().parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withOffsetParsed().withZone(PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] } <line_num>: 819,840
public void testParseInto_chrono() { [EOL]     MutableDateTime expect = null; [EOL]     MutableDateTime result = null; [EOL]     expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withChronology(ISO_PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withChronology(null).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withChronology(BUDDHIST_PARIS).parseInto(result, "2547-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL]     expect = new MutableDateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); [EOL]     result = new MutableDateTime(0L); [EOL]     assertEquals(20, g.withChronology(BUDDHIST_PARIS).parseInto(result, "2004-06-09T10:20:30Z", 0)); [EOL]     assertEquals(expect, result); [EOL] } <line_num>: 842,864
public void testParseInto_monthOnly() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON); [EOL]     assertEquals(1, f.parseInto(result, "5", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 5, 9, 12, 20, 30, 0, LONDON), result); [EOL] } <line_num>: 866,871
public void testParseInto_monthOnly_baseStartYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO); [EOL]     assertEquals(1, f.parseInto(result, "5", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 5, 1, 12, 20, 30, 0, TOKYO), result); [EOL] } <line_num>: 873,878
public void testParseInto_monthOnly_parseStartYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 2, 1, 12, 20, 30, 0, TOKYO); [EOL]     assertEquals(1, f.parseInto(result, "1", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO), result); [EOL] } <line_num>: 880,885
public void testParseInto_monthOnly_baseEndYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO); [EOL]     assertEquals(1, f.parseInto(result, "5", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 5, 31, 12, 20, 30, 0, TOKYO), result); [EOL] } <line_num>: 887,892
public void testParseInto_monthOnly_parseEndYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 31, 12, 20, 30, 0, TOKYO); [EOL]     assertEquals(2, f.parseInto(result, "12", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO), result); [EOL] } <line_num>: 894,899
public void testParseInto_monthDay_feb29() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result); [EOL] } <line_num>: 901,906
public void testParseInto_monthDay_feb29_startOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, LONDON); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, LONDON), result); [EOL] } <line_num>: 908,913
public void testParseInto_monthDay_feb29_OfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, LONDON); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, LONDON), result); [EOL] } <line_num>: 915,920
public void testParseInto_monthDay_feb29_newYork() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, NEWYORK); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result); [EOL] } <line_num>: 922,927
public void testParseInto_monthDay_feb29_newYork_startOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result); [EOL] } <line_num>: 929,934
public void testParseInto_monthDay_feb29_newYork_endOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, NEWYORK); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, NEWYORK), result); [EOL] } <line_num>: 936,941
public void testParseInto_monthDay_feb29_tokyo() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, TOKYO); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, TOKYO), result); [EOL] } <line_num>: 943,948
public void testParseInto_monthDay_feb29_tokyo_startOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result); [EOL] } <line_num>: 950,955
public void testParseInto_monthDay_feb29_tokyo_endOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK); [EOL]     MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result); [EOL] } <line_num>: 957,962
public void testParseInto_monthDay_withDefaultYear_feb29() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result); [EOL] } <line_num>: 964,969
public void testParseInto_monthDay_withDefaultYear_feb29_newYork() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012); [EOL]     MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, NEWYORK); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result); [EOL] } <line_num>: 971,976
public void testParseInto_monthDay_withDefaultYear_feb29_newYork_endOfYear() { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012); [EOL]     MutableDateTime result = new MutableDateTime(2004, 12, 9, 12, 20, 30, 0, NEWYORK); [EOL]     assertEquals(4, f.parseInto(result, "2 29", 0)); [EOL]     assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result); [EOL] } <line_num>: 978,983
public void testParseMillis_fractionOfSecondLong() { [EOL]     DateTimeFormatter f = new DateTimeFormatterBuilder().appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9).toFormatter().withZoneUTC(); [EOL]     assertEquals(10512, f.parseMillis("10.5123456")); [EOL]     assertEquals(10512, f.parseMillis("10.512999")); [EOL] } <line_num>: 985,991
public void testZoneNameNearTransition() { [EOL] } <line_num>: 995,995
public void testZoneShortNameNearTransition() { [EOL] } <line_num>: 1013,1013
