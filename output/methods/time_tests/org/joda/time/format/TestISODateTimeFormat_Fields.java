public TestISODateTimeFormat_Fields(String name) { [EOL]     super(name); [EOL] } <line_num>: 45,47
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 37,39
public static TestSuite suite() { [EOL]     return new TestSuite(TestISODateTimeFormat_Fields.class); [EOL] } <line_num>: 41,43
protected void setUp() throws Exception { [EOL] } <line_num>: 49,50
protected void tearDown() throws Exception { [EOL] } <line_num>: 52,53
public void testForFields_null() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields((Collection) null, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 56,61
public void testForFields_empty() { [EOL]     try { [EOL]         ISODateTimeFormat.forFields(new ArrayList(), true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 64,69
public void testForFields_calBased_YMD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("20050625", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("20050625", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 74,100
public void testForFields_calBased_YMD_unmodifiable() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields))); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL]     types = Arrays.asList(fields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(3, types.size()); [EOL] } <line_num>: 103,119
public void testForFields_calBased_YMD_duplicates() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     DateTimeFieldType[] dupFields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(dupFields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = Arrays.asList(dupFields); [EOL]     f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(4, types.size()); [EOL] } <line_num>: 122,144
public void testForFields_calBased_Y() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year() }; [EOL]     int[] values = new int[] { 2005 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 147,171
public void testForFields_calBased_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 174,198
public void testForFields_calBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("---25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("---25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("---25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("---25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 201,225
public void testForFields_calBased_YM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() }; [EOL]     int[] values = new int[] { 2005, 6 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005-06", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 228,253
public void testForFields_calBased_MD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 6, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--06-25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--0625", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--0625", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 256,281
public void testForFields_calBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 25 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005--25", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 284,311
public void testForFields_weekBased_YWD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 316,342
public void testForFields_weekBased_Y() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear() }; [EOL]     int[] values = new int[] { 2005 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 345,369
public void testForFields_weekBased_W() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 372,396
public void testForFields_weekBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 399,423
public void testForFields_weekBased_YW() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.weekOfWeekyear() }; [EOL]     int[] values = new int[] { 2005, 8 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W08", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 426,451
public void testForFields_weekBased_WD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 8, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-W08-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-W085", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 454,479
public void testForFields_weekBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.weekyear(), DateTimeFieldType.dayOfWeek() }; [EOL]     int[] values = new int[] { 2005, 5 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005W-5", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 482,509
public void testForFields_ordinalBased_YD() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 2005, 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 514,539
public void testForFields_ordinalBased_Y() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year() }; [EOL]     int[] values = new int[] { 2005 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 542,566
public void testForFields_ordinalBased_D() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfYear() }; [EOL]     int[] values = new int[] { 177 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-177", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 569,593
public void testForFields_time_HMSm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 30, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("10:20:30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20:30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("102030.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("102030.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 598,625
public void testForFields_time_HMS() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute() }; [EOL]     int[] values = new int[] { 10, 20, 30 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("10:20:30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20:30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("102030", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("102030", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 628,654
public void testForFields_time_HM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour() }; [EOL]     int[] values = new int[] { 10, 20 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("10:20", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("1020", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 657,682
public void testForFields_time_H() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 10 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("10", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("10", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("10", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 685,709
public void testForFields_time_MSm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 30, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-20:30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20:30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-2030.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-2030.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 712,738
public void testForFields_time_MS() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute() }; [EOL]     int[] values = new int[] { 20, 30 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-20:30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20:30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-2030", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-2030", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 741,766
public void testForFields_time_M() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour() }; [EOL]     int[] values = new int[] { 20 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("-20", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("-20", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 769,793
public void testForFields_time_Sm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 30, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 796,821
public void testForFields_time_S() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.secondOfMinute() }; [EOL]     int[] values = new int[] { 30 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("--30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("--30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("--30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("--30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 824,848
public void testForFields_time_m() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("---.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("---.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 851,877
public void testForFields_time_Hm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10--.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("10--.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 880,907
public void testForFields_time_HS() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.secondOfMinute() }; [EOL]     int[] values = new int[] { 10, 30 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10-30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("10-30", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 910,937
public void testForFields_time_Mm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("-20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 940,967
public void testForFields_time_HSm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 30, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10-30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("10-30.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 970,998
public void testForFields_time_HMm() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.millisOfSecond() }; [EOL]     int[] values = new int[] { 10, 20, 40 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("10:20-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("1020-.040", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1001,1029
public void testForFields_datetime_YMDH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 6, 25, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("2005-06-25T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005-06-25T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("20050625T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("20050625T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 1034,1061
public void testForFields_datetime_DH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 25, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true); [EOL]     assertEquals("---25T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("---25T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, true); [EOL]     assertEquals("---25T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("---25T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL] } <line_num>: 1064,1089
public void testForFields_datetime_YH() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }; [EOL]     int[] values = new int[] { 2005, 12 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("2005T12", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1092,1119
public void testForFields_datetime_DM() { [EOL]     DateTimeFieldType[] fields = new DateTimeFieldType[] { DateTimeFieldType.dayOfMonth(), DateTimeFieldType.minuteOfHour() }; [EOL]     int[] values = new int[] { 25, 20 }; [EOL]     List types = new ArrayList(Arrays.asList(fields)); [EOL]     DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false); [EOL]     assertEquals("---25T-20", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     f = ISODateTimeFormat.forFields(types, false, false); [EOL]     assertEquals("---25T-20", f.print(new Partial(fields, values))); [EOL]     assertEquals(0, types.size()); [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, true, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     types = new ArrayList(Arrays.asList(fields)); [EOL]     try { [EOL]         ISODateTimeFormat.forFields(types, false, true); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1122,1149
