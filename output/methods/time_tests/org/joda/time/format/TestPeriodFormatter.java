public TestPeriodFormatter(String name) { [EOL]     super(name); [EOL] } <line_num>: 72,74
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 64,66
public static TestSuite suite() { [EOL]     return new TestSuite(TestPeriodFormatter.class); [EOL] } <line_num>: 68,70
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL]     f = ISOPeriodFormat.standard(); [EOL] } <line_num>: 76,85
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL]     f = null; [EOL] } <line_num>: 87,96
public void testPrint_simple() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", f.print(p)); [EOL] } <line_num>: 99,102
public void testPrint_bufferMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     StringBuffer buf = new StringBuffer(); [EOL]     f.printTo(buf, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", buf.toString()); [EOL]     buf = new StringBuffer(); [EOL]     try { [EOL]         f.printTo(buf, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 105,116
public void testPrint_writerMethods() throws Exception { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     CharArrayWriter out = new CharArrayWriter(); [EOL]     f.printTo(out, p); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", out.toString()); [EOL]     out = new CharArrayWriter(); [EOL]     try { [EOL]         f.printTo(out, null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 119,130
public void testWithGetLocaleMethods() { [EOL]     PeriodFormatter f2 = f.withLocale(Locale.FRENCH); [EOL]     assertEquals(Locale.FRENCH, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(Locale.FRENCH)); [EOL]     f2 = f.withLocale(null); [EOL]     assertEquals(null, f2.getLocale()); [EOL]     assertSame(f2, f2.withLocale(null)); [EOL] } <line_num>: 133,141
public void testWithGetParseTypeMethods() { [EOL]     PeriodFormatter f2 = f.withParseType(PeriodType.dayTime()); [EOL]     assertEquals(PeriodType.dayTime(), f2.getParseType()); [EOL]     assertSame(f2, f2.withParseType(PeriodType.dayTime())); [EOL]     f2 = f.withParseType(null); [EOL]     assertEquals(null, f2.getParseType()); [EOL]     assertSame(f2, f2.withParseType(null)); [EOL] } <line_num>: 143,151
public void testPrinterParserMethods() { [EOL]     Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     PeriodFormatter f2 = new PeriodFormatter(f.getPrinter(), f.getParser()); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     f2 = new PeriodFormatter(f.getPrinter(), null); [EOL]     assertEquals(f.getPrinter(), f2.getPrinter()); [EOL]     assertEquals(null, f2.getParser()); [EOL]     assertEquals(true, f2.isPrinter()); [EOL]     assertEquals(false, f2.isParser()); [EOL]     assertNotNull(f2.print(p)); [EOL]     try { [EOL]         assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     f2 = new PeriodFormatter(null, f.getParser()); [EOL]     assertEquals(null, f2.getPrinter()); [EOL]     assertEquals(f.getParser(), f2.getParser()); [EOL]     assertEquals(false, f2.isPrinter()); [EOL]     assertEquals(true, f2.isParser()); [EOL]     try { [EOL]         f2.print(p); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     assertNotNull(f2.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL] } <line_num>: 153,184
public void testParsePeriod_simple() { [EOL]     Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parsePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parsePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 187,195
public void testParsePeriod_parseType() { [EOL]     Period expect = new Period(0, 0, 0, 4, 5, 6, 7, 8, PeriodType.dayTime()); [EOL]     assertEquals(expect, f.withParseType(PeriodType.dayTime()).parsePeriod("P4DT5H6M7.008S")); [EOL]     try { [EOL]         f.withParseType(PeriodType.dayTime()).parsePeriod("P3W4DT5H6M7.008S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 197,204
public void testParseMutablePeriod_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(expect, f.parseMutablePeriod("P1Y2M3W4DT5H6M7.008S")); [EOL]     try { [EOL]         f.parseMutablePeriod("ABC"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 207,215
public void testParseInto_simple() { [EOL]     MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     MutablePeriod result = new MutablePeriod(); [EOL]     assertEquals(20, f.parseInto(result, "P1Y2M3W4DT5H6M7.008S", 0)); [EOL]     assertEquals(expect, result); [EOL]     try { [EOL]         f.parseInto(null, "P1Y2M3W4DT5H6M7.008S", 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(~0, f.parseInto(result, "ABC", 0)); [EOL] } <line_num>: 218,230
