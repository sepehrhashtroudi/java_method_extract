public TestPeriodFormat(String name) { [EOL]     super(name); [EOL] } <line_num>: 51,53
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 43,45
public static TestSuite suite() { [EOL]     return new TestSuite(TestPeriodFormat.class); [EOL] } <line_num>: 47,49
protected void setUp() throws Exception { [EOL]     originalLocale = Locale.getDefault(); [EOL]     Locale.setDefault(DE); [EOL] } <line_num>: 55,58
protected void tearDown() throws Exception { [EOL]     Locale.setDefault(originalLocale); [EOL]     originalLocale = null; [EOL] } <line_num>: 60,63
public void testSubclassableConstructor() { [EOL]     PeriodFormat f = new PeriodFormat() { [EOL]     }; [EOL]     assertNotNull(f); [EOL] } <line_num>: 66,71
public void test_getDefault_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", PeriodFormat.getDefault().print(p)); [EOL] } <line_num>: 76,79
public void test_getDefault_FormatOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals("2 days", PeriodFormat.getDefault().print(p)); [EOL] } <line_num>: 82,85
public void test_getDefault_formatTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals("2 days and 5 hours", PeriodFormat.getDefault().print(p)); [EOL] } <line_num>: 88,91
public void test_getDefault_parseOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals(p, PeriodFormat.getDefault().parsePeriod("2 days")); [EOL] } <line_num>: 94,97
public void test_getDefault_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.getDefault().parsePeriod("2 days and 5 hours")); [EOL] } <line_num>: 100,103
public void test_getDefault_checkRedundantSeparator() { [EOL]     try { [EOL]         PeriodFormat.getDefault().parsePeriod("2 days and 5 hours "); [EOL]         fail("No exception was caught"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(IllegalArgumentException.class, e.getClass()); [EOL]     } [EOL] } <line_num>: 106,113
public void test_getDefault_cached() { [EOL]     assertSame(PeriodFormat.getDefault(), PeriodFormat.getDefault()); [EOL] } <line_num>: 116,118
public void test_wordBased_default() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 Tag, 5 Stunden, 6 Minuten, 7 Sekunden und 8 Millisekunden", PeriodFormat.wordBased().print(p)); [EOL] } <line_num>: 123,126
public void test_wordBased_fr_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] } <line_num>: 131,134
public void test_wordBased_fr_FormatOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals("2 jours", PeriodFormat.wordBased(FR).print(p)); [EOL] } <line_num>: 137,140
public void test_wordBased_fr_formatTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals("2 jours et 5 heures", PeriodFormat.wordBased(FR).print(p)); [EOL] } <line_num>: 143,146
public void test_wordBased_fr_parseOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals(p, PeriodFormat.wordBased(FR).parsePeriod("2 jours")); [EOL] } <line_num>: 149,152
public void test_wordBased_fr_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(FR).parsePeriod("2 jours et 5 heures")); [EOL] } <line_num>: 155,158
public void test_wordBased_fr_cached() { [EOL]     assertSame(PeriodFormat.wordBased(FR), PeriodFormat.wordBased(FR)); [EOL] } <line_num>: 161,163
public void test_wordBased_pt_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 dia, 5 horas, 6 minutos, 7 segundos e 8 milissegundos", PeriodFormat.wordBased(PT).print(p)); [EOL] } <line_num>: 168,171
public void test_wordBased_pt_FormatOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals("2 dias", PeriodFormat.wordBased(PT).print(p)); [EOL] } <line_num>: 174,177
public void test_wordBased_pt_formatTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals("2 dias e 5 horas", PeriodFormat.wordBased(PT).print(p)); [EOL] } <line_num>: 180,183
public void test_wordBased_pt_parseOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals(p, PeriodFormat.wordBased(PT).parsePeriod("2 dias")); [EOL] } <line_num>: 186,189
public void test_wordBased_pt_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(PT).parsePeriod("2 dias e 5 horas")); [EOL] } <line_num>: 192,195
public void test_wordBased_pt_cached() { [EOL]     assertSame(PeriodFormat.wordBased(PT), PeriodFormat.wordBased(PT)); [EOL] } <line_num>: 198,200
public void test_wordBased_es_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 d\u00EDa, 5 horas, 6 minutos, 7 segundos y 8 milisegundos", PeriodFormat.wordBased(ES).print(p)); [EOL] } <line_num>: 205,208
public void test_wordBased_es_FormatOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals("2 d\u00EDas", PeriodFormat.wordBased(ES).print(p)); [EOL] } <line_num>: 211,214
public void test_wordBased_es_formatTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals("2 d\u00EDas y 5 horas", PeriodFormat.wordBased(ES).print(p)); [EOL] } <line_num>: 217,220
public void test_wordBased_es_parseOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas")); [EOL] } <line_num>: 223,226
public void test_wordBased_es_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod("2 d\u00EDas y 5 horas")); [EOL] } <line_num>: 229,232
public void test_wordBased_es_cached() { [EOL]     assertSame(PeriodFormat.wordBased(ES), PeriodFormat.wordBased(ES)); [EOL] } <line_num>: 235,237
public void test_wordBased_de_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 Tag, 5 Stunden, 6 Minuten, 7 Sekunden und 8 Millisekunden", PeriodFormat.wordBased(DE).print(p)); [EOL] } <line_num>: 242,245
public void test_wordBased_de_FormatOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals("2 Tage", PeriodFormat.wordBased(DE).print(p)); [EOL] } <line_num>: 248,251
public void test_wordBased_de_formatTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals("2 Tage und 5 Stunden", PeriodFormat.wordBased(DE).print(p)); [EOL] } <line_num>: 254,257
public void test_wordBased_de_parseOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals(p, PeriodFormat.wordBased(DE).parsePeriod("2 Tage")); [EOL] } <line_num>: 260,263
public void test_wordBased_de_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(DE).parsePeriod("2 Tage und 5 Stunden")); [EOL] } <line_num>: 266,269
public void test_wordBased_de_cached() { [EOL]     assertSame(PeriodFormat.wordBased(DE), PeriodFormat.wordBased(DE)); [EOL] } <line_num>: 272,274
public void test_wordBased_nl_formatStandard() { [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 dag, 5 uur, 6 minuten, 7 seconden en 8 milliseconden", PeriodFormat.wordBased(NL).print(p)); [EOL] } <line_num>: 279,282
public void test_wordBased_nl_FormatOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals("2 dagen", PeriodFormat.wordBased(NL).print(p)); [EOL] } <line_num>: 285,288
public void test_wordBased_nl_formatTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals("2 dagen en 5 uur", PeriodFormat.wordBased(NL).print(p)); [EOL] } <line_num>: 291,294
public void test_wordBased_nl_parseOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals(p, PeriodFormat.wordBased(NL).parsePeriod("2 dagen")); [EOL] } <line_num>: 297,300
public void test_wordBased_nl_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(NL).parsePeriod("2 dagen en 5 uur")); [EOL] } <line_num>: 303,306
public void test_wordBased_nl_cached() { [EOL]     assertSame(PeriodFormat.wordBased(NL), PeriodFormat.wordBased(NL)); [EOL] } <line_num>: 309,311
public void test_wordBased_da_formatMultiple() { [EOL]     Period p = new Period(2, 3, 4, 2, 5, 6, 7, 8); [EOL]     assertEquals("2 \u00E5r, 3 m\u00E5neder, 4 uger, 2 dage, 5 timer, 6 minutter, 7 sekunder og 8 millisekunder", PeriodFormat.wordBased(DA).print(p)); [EOL] } <line_num>: 316,319
public void test_wordBased_da_formatSinglular() { [EOL]     Period p = new Period(1, 1, 1, 1, 1, 1, 1, 1); [EOL]     assertEquals("1 \u00E5r, 1 m\u00E5ned, 1 uge, 1 dag, 1 time, 1 minut, 1 sekund og 1 millisekund", PeriodFormat.wordBased(DA).print(p)); [EOL] } <line_num>: 322,325
public void test_wordBased_da_cached() { [EOL]     assertSame(PeriodFormat.wordBased(DA), PeriodFormat.wordBased(DA)); [EOL] } <line_num>: 328,330
public void test_wordBased_ja_formatMultiple() { [EOL]     Period p = new Period(2, 3, 4, 2, 5, 6, 7, 8); [EOL]     assertEquals("2\u5E743\u304B\u67084\u9031\u95932\u65E55\u6642\u95936\u52067\u79D28\u30DF\u30EA\u79D2", PeriodFormat.wordBased(JA).print(p)); [EOL] } <line_num>: 335,338
public void test_wordBased_ja_formatSingular() { [EOL]     Period p = new Period(1, 1, 1, 1, 1, 1, 1, 1); [EOL]     assertEquals("1\u5E741\u304B\u67081\u9031\u95931\u65E51\u6642\u95931\u52061\u79D21\u30DF\u30EA\u79D2", PeriodFormat.wordBased(JA).print(p)); [EOL] } <line_num>: 341,344
public void test_wordBased_ja_cached() { [EOL]     assertSame(PeriodFormat.wordBased(JA), PeriodFormat.wordBased(JA)); [EOL] } <line_num>: 347,349
public void test_wordBased_ja_parseOneField() { [EOL]     Period p = Period.days(2); [EOL]     assertEquals(p, PeriodFormat.wordBased(JA).parsePeriod("2\u65E5")); [EOL] } <line_num>: 352,355
public void test_wordBased_ja_parseTwoFields() { [EOL]     Period p = Period.days(2).withHours(5); [EOL]     assertEquals(p, PeriodFormat.wordBased(JA).parsePeriod("2\u65E55\u6642\u9593")); [EOL] } <line_num>: 358,361
public void test_wordBased_ja_checkRedundantSeparator() { [EOL]     try { [EOL]         PeriodFormat.wordBased(JA).parsePeriod("2\u65E5 "); [EOL]         fail("No exception was caught"); [EOL]     } catch (Exception e) { [EOL]         assertEquals(IllegalArgumentException.class, e.getClass()); [EOL]     } [EOL] } <line_num>: 364,372
public void test_wordBased_fr_from_de() { [EOL]     Locale.setDefault(DE); [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] } <line_num>: 377,381
public void test_wordBased_fr_from_nl() { [EOL]     Locale.setDefault(NL); [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p)); [EOL] } <line_num>: 383,387
public void test_wordBased_en_from_de() { [EOL]     Locale.setDefault(DE); [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", PeriodFormat.wordBased(EN).print(p)); [EOL] } <line_num>: 389,393
public void test_wordBased_en_from_nl() { [EOL]     Locale.setDefault(NL); [EOL]     Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8); [EOL]     assertEquals("1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", PeriodFormat.wordBased(EN).print(p)); [EOL] } <line_num>: 395,399
