public TestDateTimeFormatStyle(String name) { [EOL]     super(name); [EOL] } <line_num>: 67,69
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 59,61
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTimeFormatStyle.class); [EOL] } <line_num>: 63,65
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(UK); [EOL] } <line_num>: 71,79
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 81,89
public void testForStyle_stringLengths() { [EOL]     try { [EOL]         DateTimeFormat.forStyle(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle(""); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("S"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("SSS"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 92,109
public void testForStyle_invalidStrings() { [EOL]     try { [EOL]         DateTimeFormat.forStyle("AA"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("--"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateTimeFormat.forStyle("ss"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 111,124
public void testForStyle_shortDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("S-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateInstance(DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] } <line_num>: 127,142
public void testForStyle_shortTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("-S"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getTimeInstance(DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     if (TimeZone.getDefault() instanceof SimpleTimeZone) { [EOL]     } else { [EOL]         DateTime date = new DateTime(DateFormat.getTimeInstance(DateFormat.SHORT, FRANCE).parse(expect)); [EOL]         assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL]     } [EOL] } <line_num>: 144,163
public void testForStyle_shortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.shortDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("SS"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL]     DateTime date = new DateTime(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect)); [EOL]     assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect)); [EOL] } <line_num>: 165,180
public void testForStyle_mediumDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("M-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] } <line_num>: 183,194
public void testForStyle_mediumTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("-M"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] } <line_num>: 196,207
public void testForStyle_mediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.mediumDateTime(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("MM"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] } <line_num>: 209,220
public void testForStyle_longDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.longDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("L-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] } <line_num>: 223,234
public void testForStyle_longTime() { [EOL] } <line_num>: 236,236
public void testForStyle_longDateTime() { [EOL] } <line_num>: 251,251
public void testForStyle_fullDate() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.fullDate(); [EOL]     DateTimeFormatter g = DateTimeFormat.forStyle("F-"); [EOL]     assertSame(g, f); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] } <line_num>: 267,278
public void testForStyle_fullTime() { [EOL] } <line_num>: 280,280
public void testForStyle_fullDateTime() { [EOL] } <line_num>: 295,295
public void testForStyle_shortMediumDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.forStyle("SM"); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] } <line_num>: 311,320
public void testForStyle_shortLongDateTime() { [EOL] } <line_num>: 322,322
public void testForStyle_shortFullDateTime() { [EOL] } <line_num>: 335,335
public void testForStyle_mediumShortDateTime() throws Exception { [EOL]     DateTimeFormatter f = DateTimeFormat.forStyle("MS"); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0); [EOL]     String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, UK).format(dt.toDate()); [EOL]     assertEquals(expect, f.print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, US).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(US).print(dt)); [EOL]     expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, FRANCE).format(dt.toDate()); [EOL]     assertEquals(expect, f.withLocale(FRANCE).print(dt)); [EOL] } <line_num>: 349,358
public void testForStyle_mediumLongDateTime() { [EOL] } <line_num>: 360,360
public void testForStyle_mediumFullDateTime() { [EOL] } <line_num>: 373,373
