public TestISODateTimeFormat(String name) { [EOL]     super(name); [EOL] } <line_num>: 63,65
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 55,57
public static TestSuite suite() { [EOL]     return new TestSuite(TestISODateTimeFormat.class); [EOL] } <line_num>: 59,61
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 67,75
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 77,85
public void testSubclassableConstructor() { [EOL]     ISODateTimeFormat f = new ISODateTimeFormat() { [EOL]     }; [EOL]     assertNotNull(f); [EOL] } <line_num>: 88,93
public void testFormat_date() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt)); [EOL] } <line_num>: 96,105
public void testFormat_date_partial() { [EOL]     Partial dt = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }, new int[] { 2004, 6, 9 }); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt)); [EOL] } <line_num>: 107,112
public void testFormat_time() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20:30.040Z", ISODateTimeFormat.time().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20:30.040+01:00", ISODateTimeFormat.time().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20:30.040+02:00", ISODateTimeFormat.time().print(dt)); [EOL] } <line_num>: 114,123
public void testFormat_time_partial() { [EOL]     Partial dt = new Partial(new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }, new int[] { 10, 20, 30, 40 }); [EOL]     assertEquals("10:20:30.040", ISODateTimeFormat.time().print(dt)); [EOL] } <line_num>: 125,131
public void testFormat_timeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20:30Z", ISODateTimeFormat.timeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20:30+01:00", ISODateTimeFormat.timeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20:30+02:00", ISODateTimeFormat.timeNoMillis().print(dt)); [EOL] } <line_num>: 133,142
public void testFormat_timeNoMillis_partial() { [EOL]     Partial dt = new Partial(new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() }, new int[] { 10, 20, 30, 40 }); [EOL]     assertEquals("10:20:30", ISODateTimeFormat.timeNoMillis().print(dt)); [EOL] } <line_num>: 144,150
public void testFormat_tTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("T10:20:30.040Z", ISODateTimeFormat.tTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("T11:20:30.040+01:00", ISODateTimeFormat.tTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("T12:20:30.040+02:00", ISODateTimeFormat.tTime().print(dt)); [EOL] } <line_num>: 152,161
public void testFormat_tTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("T10:20:30Z", ISODateTimeFormat.tTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("T11:20:30+01:00", ISODateTimeFormat.tTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("T12:20:30+02:00", ISODateTimeFormat.tTimeNoMillis().print(dt)); [EOL] } <line_num>: 163,172
public void testFormat_dateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20:30.040Z", ISODateTimeFormat.dateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20:30.040+01:00", ISODateTimeFormat.dateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20:30.040+02:00", ISODateTimeFormat.dateTime().print(dt)); [EOL] } <line_num>: 174,195
public void testFormat_dateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20:30Z", ISODateTimeFormat.dateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20:30+01:00", ISODateTimeFormat.dateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20:30+02:00", ISODateTimeFormat.dateTimeNoMillis().print(dt)); [EOL] } <line_num>: 197,206
public void testFormat_ordinalDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-161", ISODateTimeFormat.ordinalDate().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-161", ISODateTimeFormat.ordinalDate().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-161", ISODateTimeFormat.ordinalDate().print(dt)); [EOL] } <line_num>: 208,217
public void testFormat_ordinalDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-161T10:20:30.040Z", ISODateTimeFormat.ordinalDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-161T11:20:30.040+01:00", ISODateTimeFormat.ordinalDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-161T12:20:30.040+02:00", ISODateTimeFormat.ordinalDateTime().print(dt)); [EOL] } <line_num>: 219,228
public void testFormat_ordinalDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-161T10:20:30Z", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-161T11:20:30+01:00", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-161T12:20:30+02:00", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt)); [EOL] } <line_num>: 230,239
public void testFormat_weekDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekDate().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekDate().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekDate().print(dt)); [EOL] } <line_num>: 241,250
public void testFormat_weekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30.040Z", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30.040+01:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30.040+02:00", ISODateTimeFormat.weekDateTime().print(dt)); [EOL] } <line_num>: 252,261
public void testFormat_weekDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3T10:20:30Z", ISODateTimeFormat.weekDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3T11:20:30+01:00", ISODateTimeFormat.weekDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3T12:20:30+02:00", ISODateTimeFormat.weekDateTimeNoMillis().print(dt)); [EOL] } <line_num>: 263,272
public void testFormat_basicDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("20040609", ISODateTimeFormat.basicDate().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("20040609", ISODateTimeFormat.basicDate().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("20040609", ISODateTimeFormat.basicDate().print(dt)); [EOL] } <line_num>: 275,284
public void testFormat_basicTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("102030.040Z", ISODateTimeFormat.basicTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("112030.040+0100", ISODateTimeFormat.basicTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("122030.040+0200", ISODateTimeFormat.basicTime().print(dt)); [EOL] } <line_num>: 286,295
public void testFormat_basicTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("102030Z", ISODateTimeFormat.basicTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("112030+0100", ISODateTimeFormat.basicTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("122030+0200", ISODateTimeFormat.basicTimeNoMillis().print(dt)); [EOL] } <line_num>: 297,306
public void testFormat_basicTTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("T102030.040Z", ISODateTimeFormat.basicTTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("T112030.040+0100", ISODateTimeFormat.basicTTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("T122030.040+0200", ISODateTimeFormat.basicTTime().print(dt)); [EOL] } <line_num>: 308,317
public void testFormat_basicTTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("T102030Z", ISODateTimeFormat.basicTTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("T112030+0100", ISODateTimeFormat.basicTTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("T122030+0200", ISODateTimeFormat.basicTTimeNoMillis().print(dt)); [EOL] } <line_num>: 319,328
public void testFormat_basicDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("20040609T102030.040Z", ISODateTimeFormat.basicDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("20040609T112030.040+0100", ISODateTimeFormat.basicDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("20040609T122030.040+0200", ISODateTimeFormat.basicDateTime().print(dt)); [EOL] } <line_num>: 330,339
public void testFormat_basicDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("20040609T102030Z", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("20040609T112030+0100", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("20040609T122030+0200", ISODateTimeFormat.basicDateTimeNoMillis().print(dt)); [EOL] } <line_num>: 341,350
public void testFormat_basicOrdinalDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004161", ISODateTimeFormat.basicOrdinalDate().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004161", ISODateTimeFormat.basicOrdinalDate().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004161", ISODateTimeFormat.basicOrdinalDate().print(dt)); [EOL] } <line_num>: 352,361
public void testFormat_basicOrdinalDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004161T102030.040Z", ISODateTimeFormat.basicOrdinalDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004161T112030.040+0100", ISODateTimeFormat.basicOrdinalDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004161T122030.040+0200", ISODateTimeFormat.basicOrdinalDateTime().print(dt)); [EOL] } <line_num>: 363,372
public void testFormat_basicOrdinalDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004161T102030Z", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004161T112030+0100", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004161T122030+0200", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt)); [EOL] } <line_num>: 374,383
public void testFormat_basicWeekDate() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004W243", ISODateTimeFormat.basicWeekDate().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004W243", ISODateTimeFormat.basicWeekDate().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004W243", ISODateTimeFormat.basicWeekDate().print(dt)); [EOL] } <line_num>: 385,394
public void testFormat_basicWeekDateTime() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004W243T102030.040Z", ISODateTimeFormat.basicWeekDateTime().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004W243T112030.040+0100", ISODateTimeFormat.basicWeekDateTime().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004W243T122030.040+0200", ISODateTimeFormat.basicWeekDateTime().print(dt)); [EOL] } <line_num>: 396,405
public void testFormat_basicWeekDateTimeNoMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004W243T102030Z", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004W243T112030+0100", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004W243T122030+0200", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt)); [EOL] } <line_num>: 407,416
public void testFormat_year() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004", ISODateTimeFormat.year().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004", ISODateTimeFormat.year().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004", ISODateTimeFormat.year().print(dt)); [EOL] } <line_num>: 419,428
public void testFormat_yearMonth() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06", ISODateTimeFormat.yearMonth().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06", ISODateTimeFormat.yearMonth().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06", ISODateTimeFormat.yearMonth().print(dt)); [EOL] } <line_num>: 430,439
public void testFormat_yearMonthDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.yearMonthDay().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.yearMonthDay().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09", ISODateTimeFormat.yearMonthDay().print(dt)); [EOL] } <line_num>: 441,450
public void testFormat_weekyear() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004", ISODateTimeFormat.weekyear().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004", ISODateTimeFormat.weekyear().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004", ISODateTimeFormat.weekyear().print(dt)); [EOL] } <line_num>: 452,461
public void testFormat_weekyearWeek() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24", ISODateTimeFormat.weekyearWeek().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24", ISODateTimeFormat.weekyearWeek().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24", ISODateTimeFormat.weekyearWeek().print(dt)); [EOL] } <line_num>: 463,472
public void testFormat_weekyearWeekDay() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekyearWeekDay().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekyearWeekDay().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-W24-3", ISODateTimeFormat.weekyearWeekDay().print(dt)); [EOL] } <line_num>: 474,483
public void testFormat_hour() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10", ISODateTimeFormat.hour().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11", ISODateTimeFormat.hour().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12", ISODateTimeFormat.hour().print(dt)); [EOL] } <line_num>: 486,495
public void testFormat_hourMinute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20", ISODateTimeFormat.hourMinute().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20", ISODateTimeFormat.hourMinute().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20", ISODateTimeFormat.hourMinute().print(dt)); [EOL] } <line_num>: 497,506
public void testFormat_hourMinuteSecond() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20:30", ISODateTimeFormat.hourMinuteSecond().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20:30", ISODateTimeFormat.hourMinuteSecond().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20:30", ISODateTimeFormat.hourMinuteSecond().print(dt)); [EOL] } <line_num>: 508,517
public void testFormat_hourMinuteSecondMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20:30.040", ISODateTimeFormat.hourMinuteSecondMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20:30.040", ISODateTimeFormat.hourMinuteSecondMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20:30.040", ISODateTimeFormat.hourMinuteSecondMillis().print(dt)); [EOL] } <line_num>: 519,528
public void testFormat_hourMinuteSecondFraction() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("10:20:30.040", ISODateTimeFormat.hourMinuteSecondFraction().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("11:20:30.040", ISODateTimeFormat.hourMinuteSecondFraction().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("12:20:30.040", ISODateTimeFormat.hourMinuteSecondFraction().print(dt)); [EOL] } <line_num>: 530,539
public void testFormat_dateHour() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10", ISODateTimeFormat.dateHour().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11", ISODateTimeFormat.dateHour().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12", ISODateTimeFormat.dateHour().print(dt)); [EOL] } <line_num>: 542,551
public void testFormat_dateHourMinute() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20", ISODateTimeFormat.dateHourMinute().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20", ISODateTimeFormat.dateHourMinute().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20", ISODateTimeFormat.dateHourMinute().print(dt)); [EOL] } <line_num>: 553,562
public void testFormat_dateHourMinuteSecond() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20:30", ISODateTimeFormat.dateHourMinuteSecond().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20:30", ISODateTimeFormat.dateHourMinuteSecond().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20:30", ISODateTimeFormat.dateHourMinuteSecond().print(dt)); [EOL] } <line_num>: 564,573
public void testFormat_dateHourMinuteSecondMillis() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20:30.040", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20:30.040", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20:30.040", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt)); [EOL] } <line_num>: 575,584
public void testFormat_dateHourMinuteSecondFraction() { [EOL]     DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC); [EOL]     assertEquals("2004-06-09T10:20:30.040", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt)); [EOL]     dt = dt.withZone(LONDON); [EOL]     assertEquals("2004-06-09T11:20:30.040", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt)); [EOL]     dt = dt.withZone(PARIS); [EOL]     assertEquals("2004-06-09T12:20:30.040", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt)); [EOL] } <line_num>: 586,595
