public TestMonthDay_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 69,71
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 61,63
public static TestSuite suite() { [EOL]     return new TestSuite(TestMonthDay_Basics.class); [EOL] } <line_num>: 65,67
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 73,77
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 79,83
public void testGet() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.year()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 86,98
public void testSize() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(2, test.size()); [EOL] } <line_num>: 100,103
public void testGetFieldType() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(1)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(2); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 105,116
public void testGetFieldTypes() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[0]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[1]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] } <line_num>: 118,125
public void testGetField() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(1)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(2); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 127,137
public void testGetFields() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     DateTimeField[] fields = test.getFields(); [EOL]     assertEquals(2, fields.length); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), fields[0]); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), fields[1]); [EOL]     assertNotSame(test.getFields(), test.getFields()); [EOL] } <line_num>: 139,146
public void testGetValue() { [EOL]     MonthDay test = new MonthDay(); [EOL]     assertEquals(6, test.getValue(0)); [EOL]     assertEquals(9, test.getValue(1)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(2); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 148,158
public void testGetValues() { [EOL]     MonthDay test = new MonthDay(); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(2, values.length); [EOL]     assertEquals(6, values[0]); [EOL]     assertEquals(9, values[1]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] } <line_num>: 160,167
public void testIsSupported() { [EOL]     MonthDay test = new MonthDay(COPTIC_PARIS); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL] } <line_num>: 169,175
public void testEqualsHashCode() { [EOL]     MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MonthDay test3 = new MonthDay(10, 6); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMD())); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] } <line_num>: 177,199
@Override [EOL] public Chronology getChronology() { [EOL]     return COPTIC_UTC; [EOL] } <line_num>: 203,206
@Override [EOL] public DateTimeField[] getFields() { [EOL]     return new DateTimeField[] { COPTIC_UTC.monthOfYear(), COPTIC_UTC.dayOfMonth() }; [EOL] } <line_num>: 208,214
@Override [EOL] public int[] getValues() { [EOL]     return new int[] { 10, 6 }; [EOL] } <line_num>: 216,219
public void testCompareTo() { [EOL]     MonthDay test1 = new MonthDay(6, 6); [EOL]     MonthDay test1a = new MonthDay(6, 6); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     MonthDay test2 = new MonthDay(6, 7); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 6, 6 }; [EOL]     Partial p = new Partial(types, values); [EOL]     assertEquals(0, test1.compareTo(p)); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL]     try { [EOL]         test1.compareTo(new LocalTime()); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     Partial partial = new Partial().with(DateTimeFieldType.centuryOfEra(), 1).with(DateTimeFieldType.halfdayOfDay(), 0).with(DateTimeFieldType.dayOfMonth(), 9); [EOL]     try { [EOL]         new MonthDay(10, 6).compareTo(partial); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL] } <line_num>: 223,263
public void testIsEqual_MD() { [EOL]     MonthDay test1 = new MonthDay(6, 6); [EOL]     MonthDay test1a = new MonthDay(6, 6); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     MonthDay test2 = new MonthDay(6, 7); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new MonthDay(6, 7).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 266,287
public void testIsBefore_MD() { [EOL]     MonthDay test1 = new MonthDay(6, 6); [EOL]     MonthDay test1a = new MonthDay(6, 6); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     MonthDay test2 = new MonthDay(6, 7); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new MonthDay(6, 7).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 290,311
public void testIsAfter_MD() { [EOL]     MonthDay test1 = new MonthDay(6, 6); [EOL]     MonthDay test1a = new MonthDay(6, 6); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     MonthDay test2 = new MonthDay(6, 7); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new MonthDay(6, 7).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 314,335
public void testWithChronologyRetainFields_Chrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(BUDDHIST_UTC, test.getChronology()); [EOL] } <line_num>: 338,345
public void testWithChronologyRetainFields_sameChrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO); [EOL]     assertSame(base, test); [EOL] } <line_num>: 347,351
public void testWithChronologyRetainFields_nullChrono() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     MonthDay test = base.withChronologyRetainFields(null); [EOL]     check(base, 6, 6); [EOL]     assertEquals(COPTIC_UTC, base.getChronology()); [EOL]     check(test, 6, 6); [EOL]     assertEquals(ISO_UTC, test.getChronology()); [EOL] } <line_num>: 353,360
public void testWithField() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10); [EOL]     assertEquals(new MonthDay(9, 6), test); [EOL]     assertEquals(new MonthDay(10, 6), result); [EOL] } <line_num>: 363,369
public void testWithField_nullField() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 371,377
public void testWithField_unknownField() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 379,385
public void testWithField_same() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 9); [EOL]     assertEquals(new MonthDay(9, 6), test); [EOL]     assertSame(test, result); [EOL] } <line_num>: 387,392
public void testWithFieldAdded() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     MonthDay result = test.withFieldAdded(DurationFieldType.months(), 1); [EOL]     assertEquals(new MonthDay(9, 6), test); [EOL]     assertEquals(new MonthDay(10, 6), result); [EOL] } <line_num>: 395,401
public void testWithFieldAdded_nullField_zero() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 403,409
public void testWithFieldAdded_nullField_nonZero() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 411,417
public void testWithFieldAdded_zero() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     MonthDay result = test.withFieldAdded(DurationFieldType.months(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 419,423
public void testWithFieldAdded_unknownField() { [EOL]     MonthDay test = new MonthDay(9, 6); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 425,431
public void testPlus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     MonthDay expected = new MonthDay(8, 9, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 434,442
public void testPlusMonths_int() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusMonths(1); [EOL]     MonthDay expected = new MonthDay(7, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 444,449
public void testPlusMonths_int_fromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.plusMonths(1); [EOL]     MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 451,456
public void testPlusMonths_int_negativeFromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.plusMonths(-1); [EOL]     MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 458,463
public void testPlusMonths_int_endOfMonthAdjust() { [EOL]     MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.plusMonths(1); [EOL]     MonthDay expected = new MonthDay(4, 30, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 465,470
public void testPlusMonths_int_negativeEndOfMonthAdjust() { [EOL]     MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.plusMonths(-1); [EOL]     MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 472,477
public void testPlusMonths_int_same() { [EOL]     MonthDay test = new MonthDay(6, 5, ISO_UTC); [EOL]     MonthDay result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 479,483
public void testPlusMonths_int_wrap() { [EOL]     MonthDay test = new MonthDay(6, 5, ISO_UTC); [EOL]     MonthDay result = test.plusMonths(10); [EOL]     MonthDay expected = new MonthDay(4, 5, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 485,490
public void testPlusMonths_int_adjust() { [EOL]     MonthDay test = new MonthDay(7, 31, ISO_UTC); [EOL]     MonthDay result = test.plusMonths(2); [EOL]     MonthDay expected = new MonthDay(9, 30, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 492,497
public void testPlusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 500,505
public void testPlusDays_int_fromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.plusDays(1); [EOL]     MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 507,512
public void testPlusDays_int_negativeFromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.plusDays(-1); [EOL]     MonthDay expected = new MonthDay(2, 28, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 514,519
public void testPlusDays_same() { [EOL]     MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 521,525
public void testMinus_RP() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 528,536
public void testMinusMonths_int() { [EOL]     MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minusMonths(1); [EOL]     MonthDay expected = new MonthDay(5, 5, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 538,543
public void testMinusMonths_int_fromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.minusMonths(1); [EOL]     MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 545,550
public void testMinusMonths_int_negativeFromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.minusMonths(-1); [EOL]     MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 552,557
public void testMinusMonths_int_endOfMonthAdjust() { [EOL]     MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.minusMonths(1); [EOL]     MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 559,564
public void testMinusMonths_int_negativeEndOfMonthAdjust() { [EOL]     MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.minusMonths(-1); [EOL]     MonthDay expected = new MonthDay(4, 30, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 566,571
public void testMinusMonths_int_same() { [EOL]     MonthDay test = new MonthDay(6, 5, ISO_UTC); [EOL]     MonthDay result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 573,577
public void testMinusMonths_int_wrap() { [EOL]     MonthDay test = new MonthDay(6, 5, ISO_UTC); [EOL]     MonthDay result = test.minusMonths(10); [EOL]     MonthDay expected = new MonthDay(8, 5, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 579,584
public void testMinusMonths_int_adjust() { [EOL]     MonthDay test = new MonthDay(7, 31, ISO_UTC); [EOL]     MonthDay result = test.minusMonths(3); [EOL]     MonthDay expected = new MonthDay(4, 30, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 586,591
public void testMinusDays_int() { [EOL]     MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minusDays(1); [EOL]     MonthDay expected = new MonthDay(5, 10, BuddhistChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 594,599
public void testMinusDays_int_fromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.minusDays(1); [EOL]     MonthDay expected = new MonthDay(2, 28, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 601,606
public void testMinusDays_int_negativeFromLeap() { [EOL]     MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC()); [EOL]     MonthDay result = test.minusDays(-1); [EOL]     MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance()); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 608,613
public void testMinusDays_same() { [EOL]     MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance()); [EOL]     MonthDay result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 615,619
public void testToLocalDate() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_UTC); [EOL]     LocalDate test = base.toLocalDate(2009); [EOL]     assertEquals(new LocalDate(2009, 6, 6, COPTIC_UTC), test); [EOL]     try { [EOL]         base.toLocalDate(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 622,630
public void testToDateTime_RI() { [EOL]     MonthDay base = new MonthDay(6, 6, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 6, 6); [EOL]     DateTime expected = dt; [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(6); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 633,643
public void testToDateTime_nullRI() { [EOL]     MonthDay base = new MonthDay(6, 6); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTime((ReadableInstant) null); [EOL]     check(base, 6, 6); [EOL]     DateTime expected = dt; [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(6); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 645,656
public void testWithers() { [EOL]     MonthDay test = new MonthDay(10, 6); [EOL]     check(test.withMonthOfYear(5), 5, 6); [EOL]     check(test.withDayOfMonth(2), 10, 2); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 659,671
public void testProperty() { [EOL]     MonthDay test = new MonthDay(6, 6); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 674,686
public void testSerialization() throws Exception { [EOL]     MonthDay test = new MonthDay(5, 6, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     MonthDay result = (MonthDay) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] } <line_num>: 689,707
public void testToString() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("--05-06", test.toString()); [EOL] } <line_num>: 710,713
public void testToString_String() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString("MM HH")); [EOL]     assertEquals("--05-06", test.toString((String) null)); [EOL] } <line_num>: 716,720
public void testToString_String_Locale() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("--05-06", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("\ufffd 6/5", test.toString("EEE d/M", null)); [EOL]     assertEquals("--05-06", test.toString(null, null)); [EOL] } <line_num>: 723,730
public void testToString_DTFormatter() { [EOL]     MonthDay test = new MonthDay(5, 6); [EOL]     assertEquals("05 \ufffd\ufffd", test.toString(DateTimeFormat.forPattern("MM HH"))); [EOL]     assertEquals("--05-06", test.toString((DateTimeFormatter) null)); [EOL] } <line_num>: 733,737
private void check(MonthDay test, int month, int day) { [EOL]     assertEquals(month, test.getMonthOfYear()); [EOL]     assertEquals(day, test.getDayOfMonth()); [EOL] } <line_num>: 740,743
