public TestLocalDateTime_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 93,95
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 85,87
public static TestSuite suite() { [EOL]     return new TestSuite(TestLocalDateTime_Basics.class); [EOL] } <line_num>: 89,91
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     systemDefaultLocale = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL] } <line_num>: 97,103
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL]     Locale.setDefault(systemDefaultLocale); [EOL]     systemDefaultLocale = null; [EOL] } <line_num>: 105,111
public void testGet_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(30, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(40, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 60000, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC / 1000, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.get(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 12, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 14, 30); [EOL]     assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     test = new LocalDateTime(1970, 6, 9, 0, 30); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 114,152
public void testSize() { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(4, test.size()); [EOL] } <line_num>: 154,157
public void testGetFieldType_int() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     assertSame(DateTimeFieldType.year(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1)); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2)); [EOL]     assertSame(DateTimeFieldType.millisOfDay(), test.getFieldType(3)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 159,171
public void testGetFieldTypes() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertSame(DateTimeFieldType.millisOfDay(), fields[3]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] } <line_num>: 173,181
public void testGetField_int() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     assertSame(COPTIC_UTC.millisOfDay(), test.getField(3)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 183,195
public void testGetFields() { [EOL]     LocalDateTime test = new LocalDateTime(COPTIC_PARIS); [EOL]     DateTimeField[] fields = test.getFields(); [EOL]     assertSame(COPTIC_UTC.year(), fields[0]); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), fields[1]); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), fields[2]); [EOL]     assertSame(COPTIC_UTC.millisOfDay(), fields[3]); [EOL]     assertNotSame(test.getFields(), test.getFields()); [EOL] } <line_num>: 197,205
public void testGetValue_int() { [EOL]     LocalDateTime test = new LocalDateTime(ISO_UTC); [EOL]     assertEquals(1970, test.getValue(0)); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(9, test.getValue(2)); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 207,219
public void testGetValues() { [EOL]     LocalDateTime test = new LocalDateTime(ISO_UTC); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(1970, values[0]); [EOL]     assertEquals(6, values[1]); [EOL]     assertEquals(9, values[2]); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, values[3]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] } <line_num>: 221,229
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL] } <line_num>: 231,259
public void testIsSupported_DurationFieldType() { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.halfdays())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] } <line_num>: 261,278
public void testEqualsHashCode() { [EOL]     LocalDateTime test1 = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     LocalDateTime test2 = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     LocalDateTime test3 = new LocalDateTime(1971, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     Partial partial = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.millisOfDay() }, new int[] { 1970, 6, 9, MILLIS_OF_DAY_UTC }, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(partial)); [EOL]     assertEquals(true, test1.hashCode() == partial.hashCode()); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] } <line_num>: 280,309
public Chronology getChronology() { [EOL]     return COPTIC_UTC; [EOL] } <line_num>: 312,314
public DateTimeField[] getFields() { [EOL]     return new DateTimeField[] { COPTIC_UTC.year(), COPTIC_UTC.monthOfYear(), COPTIC_UTC.dayOfMonth(), COPTIC_UTC.millisOfDay() }; [EOL] } <line_num>: 315,322
public int[] getValues() { [EOL]     return new int[] { 1970, 6, 9, MILLIS_OF_DAY_UTC }; [EOL] } <line_num>: 323,325
public void testCompareTo() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.millisOfDay() }; [EOL]     int[] values = new int[] { 2005, 6, 2, MILLIS_OF_DAY_UTC }; [EOL]     Partial p = new Partial(types, values); [EOL]     assertEquals(0, test1.compareTo(p)); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("deprecation") [EOL]         YearMonthDay ymd = new YearMonthDay(); [EOL]         test1.compareTo(ymd); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("deprecation") [EOL]         TimeOfDay tod = new TimeOfDay(); [EOL]         test1.compareTo(tod); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     Partial partial = new Partial().with(DateTimeFieldType.centuryOfEra(), 1).with(DateTimeFieldType.halfdayOfDay(), 0).with(DateTimeFieldType.dayOfMonth(), 9); [EOL]     try { [EOL]         new LocalDateTime(1970, 6, 9, 10, 20, 30, 40).compareTo(partial); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL] } <line_num>: 329,383
public void testIsEqual_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 386,407
public void testIsBefore_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 410,431
public void testIsAfter_LocalDateTime() { [EOL]     LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 434,455
public void testWithDate() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withDate(2006, 2, 1); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2006, 2, 1, 10, 20, 30, 40); [EOL] } <line_num>: 458,464
public void testWithTime() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withTime(9, 8, 7, 6); [EOL]     check(test, 2004, 6, 9, 10, 20, 30, 40); [EOL]     check(result, 2004, 6, 9, 9, 8, 7, 6); [EOL] } <line_num>: 467,473
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test); [EOL]     assertEquals(new LocalDateTime(2006, 6, 9, 10, 20, 30, 40), result); [EOL] } <line_num>: 476,482
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 484,490
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test); [EOL]     assertSame(test, result); [EOL] } <line_num>: 492,497
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test); [EOL]     assertEquals(new LocalDateTime(2010, 6, 9, 10, 20, 30, 40), result); [EOL] } <line_num>: 500,506
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 508,514
public void testWithFieldAdded_DurationFieldType_int_3() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 516,522
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40); [EOL]     LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 524,528
public void testPlus_RP() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDateTime expected = new LocalDateTime(2003, 7, 29, 15, 26, 37, 48, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 531,539
public void testPlusYears_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusYears(1); [EOL]     LocalDateTime expected = new LocalDateTime(2003, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 541,549
public void testPlusMonths_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMonths(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 6, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 551,559
public void testPlusWeeks_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusWeeks(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 10, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 561,569
public void testPlusDays_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusDays(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 4, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 571,579
public void testPlusHours_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusHours(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 11, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 581,589
public void testPlusMinutes_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMinutes(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 21, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 591,599
public void testPlusSeconds_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusSeconds(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 31, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 601,609
public void testPlusMillis_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.plusMillis(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 41, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 611,619
public void testMinus_RP() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDateTime expected = new LocalDateTime(2001, 3, 26, 9, 19, 29, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 622,631
public void testMinusYears_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusYears(1); [EOL]     LocalDateTime expected = new LocalDateTime(2001, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 633,641
public void testMinusMonths_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMonths(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 4, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 643,651
public void testMinusWeeks_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusWeeks(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 4, 26, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 653,661
public void testMinusDays_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusDays(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 2, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 663,671
public void testMinusHours_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusHours(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 9, 20, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 673,681
public void testMinusMinutes_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMinutes(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 19, 30, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 683,691
public void testMinusSeconds_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusSeconds(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 29, 40, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 693,701
public void testMinusMillis_int() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON); [EOL]     LocalDateTime result = test.minusMillis(1); [EOL]     LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 39, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 703,711
public void testGetters() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL]     assertEquals(10, test.getHourOfDay()); [EOL]     assertEquals(20, test.getMinuteOfHour()); [EOL]     assertEquals(30, test.getSecondOfMinute()); [EOL]     assertEquals(40, test.getMillisOfSecond()); [EOL]     assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay()); [EOL] } <line_num>: 714,732
public void testWithers() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 735,761
public void testToDateTime() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTime(); [EOL]     check(base, 2005, 6, 9, 6, 7, 8, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 764,771
public void testToDateTime_Zone() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTime(TOKYO); [EOL]     check(base, 2005, 6, 9, 6, 7, 8, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_TOKYO); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 774,781
public void testToDateTime_nullZone() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTime((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9, 6, 7, 8, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 783,790
public void testToLocalDate() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); [EOL]     LocalDate expected = new LocalDate(2005, 6, 9, COPTIC_LONDON); [EOL]     assertEquals(expected, base.toLocalDate()); [EOL] } <line_num>: 793,797
public void testToLocalTime() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); [EOL]     LocalTime expected = new LocalTime(6, 7, 8, 9, COPTIC_LONDON); [EOL]     assertEquals(expected, base.toLocalTime()); [EOL] } <line_num>: 799,803
public void testToDateTime_RI() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7, BUDDHIST_TOKYO); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 2005, 6, 9, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 10, 20, 30, 40, BUDDHIST_TOKYO); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 806,814
public void testToDateTime_nullRI() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTime((ReadableInstant) null); [EOL]     check(base, 2005, 6, 9, 10, 20, 30, 40); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 10, 20, 30, 40, ISO_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 816,823
public void testToDate_summer() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 7, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     Date test = base.toDate(); [EOL]     check(base, 2005, 7, 9, 10, 20, 30, 40); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JULY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     gcal.set(Calendar.HOUR_OF_DAY, 10); [EOL]     gcal.set(Calendar.MINUTE, 20); [EOL]     gcal.set(Calendar.SECOND, 30); [EOL]     gcal.set(Calendar.MILLISECOND, 40); [EOL]     assertEquals(gcal.getTime(), test); [EOL] } <line_num>: 826,842
public void testToDate_winter() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 1, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     Date test = base.toDate(); [EOL]     check(base, 2005, 1, 9, 10, 20, 30, 40); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JANUARY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     gcal.set(Calendar.HOUR_OF_DAY, 10); [EOL]     gcal.set(Calendar.MINUTE, 20); [EOL]     gcal.set(Calendar.SECOND, 30); [EOL]     gcal.set(Calendar.MILLISECOND, 40); [EOL]     assertEquals(gcal.getTime(), test); [EOL] } <line_num>: 844,860
public void testToDate_springDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2, 0, 20, 0, 0); [EOL]         assertEquals("Mon Apr 02 01:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 862,876
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2, 0, 20, 0, 0); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 878,892
public void testToDate_autumnDST() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 894,908
public void testToDate_summer_Zone() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 7, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     Date test = base.toDate(TimeZone.getDefault()); [EOL]     check(base, 2005, 7, 9, 10, 20, 30, 40); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JULY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     gcal.set(Calendar.HOUR_OF_DAY, 10); [EOL]     gcal.set(Calendar.MINUTE, 20); [EOL]     gcal.set(Calendar.SECOND, 30); [EOL]     gcal.set(Calendar.MILLISECOND, 40); [EOL]     assertEquals(gcal.getTime(), test); [EOL] } <line_num>: 911,927
public void testToDate_winter_Zone() { [EOL]     LocalDateTime base = new LocalDateTime(2005, 1, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     Date test = base.toDate(TimeZone.getDefault()); [EOL]     check(base, 2005, 1, 9, 10, 20, 30, 40); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JANUARY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     gcal.set(Calendar.HOUR_OF_DAY, 10); [EOL]     gcal.set(Calendar.MINUTE, 20); [EOL]     gcal.set(Calendar.SECOND, 30); [EOL]     gcal.set(Calendar.MILLISECOND, 40); [EOL]     assertEquals(gcal.getTime(), test); [EOL] } <line_num>: 929,945
public void testToDate_springDST_Zone() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(TimeZone.getDefault()); [EOL]         check(base, 2007, 4, 2, 0, 20, 0, 0); [EOL]         assertEquals("Mon Apr 02 01:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 947,961
public void testToDate_springDST_2Hour40Savings_Zone() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(TimeZone.getDefault()); [EOL]         check(base, 2007, 4, 2, 0, 20, 0, 0); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 963,977
public void testToDate_autumnDST_Zone() { [EOL]     LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(TimeZone.getDefault()); [EOL]         check(base, 2007, 10, 2, 0, 20, 30, 0); [EOL]         assertEquals("Tue Oct 02 00:20:30 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 979,993
public void testProperty() { [EOL]     LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime()); [EOL] } <line_num>: 997,1021
public void testSerialization() throws Exception { [EOL]     LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDateTime result = (LocalDateTime) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL]     assertTrue(result.isSupported(DateTimeFieldType.dayOfMonth())); [EOL] } <line_num>: 1024,1043
public void testToString() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString()); [EOL] } <line_num>: 1046,1049
public void testToString_String() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002 10", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString((String) null)); [EOL] } <line_num>: 1052,1056
public void testToString_String_Locale() { [EOL]     LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("1970-06-09T10:20:30.040", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("1970-06-09T10:20:30.040", test.toString(null, null)); [EOL] } <line_num>: 1059,1066
public void testToString_DTFormatter() { [EOL]     LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40); [EOL]     assertEquals("2002 10", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T10:20:30.040", test.toString((DateTimeFormatter) null)); [EOL] } <line_num>: 1069,1073
private void check(LocalDateTime test, int year, int month, int day, int hour, int min, int sec, int mil) { [EOL]     assertEquals(year, test.getYear()); [EOL]     assertEquals(month, test.getMonthOfYear()); [EOL]     assertEquals(day, test.getDayOfMonth()); [EOL]     assertEquals(hour, test.getHourOfDay()); [EOL]     assertEquals(min, test.getMinuteOfHour()); [EOL]     assertEquals(sec, test.getSecondOfMinute()); [EOL]     assertEquals(mil, test.getMillisOfSecond()); [EOL] } <line_num>: 1076,1084
