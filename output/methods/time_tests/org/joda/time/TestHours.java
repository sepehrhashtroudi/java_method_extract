public TestHours(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 36,38
public static TestSuite suite() { [EOL]     return new TestSuite(TestHours.class); [EOL] } <line_num>: 40,42
protected void setUp() throws Exception { [EOL] } <line_num>: 48,49
protected void tearDown() throws Exception { [EOL] } <line_num>: 51,52
public void testConstants() { [EOL]     assertEquals(0, Hours.ZERO.getHours()); [EOL]     assertEquals(1, Hours.ONE.getHours()); [EOL]     assertEquals(2, Hours.TWO.getHours()); [EOL]     assertEquals(3, Hours.THREE.getHours()); [EOL]     assertEquals(4, Hours.FOUR.getHours()); [EOL]     assertEquals(5, Hours.FIVE.getHours()); [EOL]     assertEquals(6, Hours.SIX.getHours()); [EOL]     assertEquals(7, Hours.SEVEN.getHours()); [EOL]     assertEquals(8, Hours.EIGHT.getHours()); [EOL]     assertEquals(Integer.MAX_VALUE, Hours.MAX_VALUE.getHours()); [EOL]     assertEquals(Integer.MIN_VALUE, Hours.MIN_VALUE.getHours()); [EOL] } <line_num>: 55,67
public void testFactory_hours_int() { [EOL]     assertSame(Hours.ZERO, Hours.hours(0)); [EOL]     assertSame(Hours.ONE, Hours.hours(1)); [EOL]     assertSame(Hours.TWO, Hours.hours(2)); [EOL]     assertSame(Hours.THREE, Hours.hours(3)); [EOL]     assertSame(Hours.FOUR, Hours.hours(4)); [EOL]     assertSame(Hours.FIVE, Hours.hours(5)); [EOL]     assertSame(Hours.SIX, Hours.hours(6)); [EOL]     assertSame(Hours.SEVEN, Hours.hours(7)); [EOL]     assertSame(Hours.EIGHT, Hours.hours(8)); [EOL]     assertSame(Hours.MAX_VALUE, Hours.hours(Integer.MAX_VALUE)); [EOL]     assertSame(Hours.MIN_VALUE, Hours.hours(Integer.MIN_VALUE)); [EOL]     assertEquals(-1, Hours.hours(-1).getHours()); [EOL]     assertEquals(9, Hours.hours(9).getHours()); [EOL] } <line_num>: 70,84
public void testFactory_hoursBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Hours.hoursBetween(start, end1).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(start, start).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(end1, end1).getHours()); [EOL]     assertEquals(-3, Hours.hoursBetween(end1, start).getHours()); [EOL]     assertEquals(6, Hours.hoursBetween(start, end2).getHours()); [EOL] } <line_num>: 87,97
public void testFactory_hoursBetween_RPartial() { [EOL]     LocalTime start = new LocalTime(12, 0); [EOL]     LocalTime end1 = new LocalTime(15, 0); [EOL]     @SuppressWarnings("deprecation") [EOL]     TimeOfDay end2 = new TimeOfDay(18, 0); [EOL]     assertEquals(3, Hours.hoursBetween(start, end1).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(start, start).getHours()); [EOL]     assertEquals(0, Hours.hoursBetween(end1, end1).getHours()); [EOL]     assertEquals(-3, Hours.hoursBetween(end1, start).getHours()); [EOL]     assertEquals(6, Hours.hoursBetween(start, end2).getHours()); [EOL] } <line_num>: 99,110
public void testFactory_hoursIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Hours.hoursIn((ReadableInterval) null).getHours()); [EOL]     assertEquals(3, Hours.hoursIn(new Interval(start, end1)).getHours()); [EOL]     assertEquals(0, Hours.hoursIn(new Interval(start, start)).getHours()); [EOL]     assertEquals(0, Hours.hoursIn(new Interval(end1, end1)).getHours()); [EOL]     assertEquals(6, Hours.hoursIn(new Interval(start, end2)).getHours()); [EOL] } <line_num>: 112,122
public void testFactory_standardHoursIn_RPeriod() { [EOL]     assertEquals(0, Hours.standardHoursIn((ReadablePeriod) null).getHours()); [EOL]     assertEquals(0, Hours.standardHoursIn(Period.ZERO).getHours()); [EOL]     assertEquals(1, Hours.standardHoursIn(new Period(0, 0, 0, 0, 1, 0, 0, 0)).getHours()); [EOL]     assertEquals(123, Hours.standardHoursIn(Period.hours(123)).getHours()); [EOL]     assertEquals(-987, Hours.standardHoursIn(Period.hours(-987)).getHours()); [EOL]     assertEquals(1, Hours.standardHoursIn(Period.minutes(119)).getHours()); [EOL]     assertEquals(2, Hours.standardHoursIn(Period.minutes(120)).getHours()); [EOL]     assertEquals(2, Hours.standardHoursIn(Period.minutes(121)).getHours()); [EOL]     assertEquals(48, Hours.standardHoursIn(Period.days(2)).getHours()); [EOL]     try { [EOL]         Hours.standardHoursIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 124,140
public void testFactory_parseHours_String() { [EOL]     assertEquals(0, Hours.parseHours((String) null).getHours()); [EOL]     assertEquals(0, Hours.parseHours("PT0H").getHours()); [EOL]     assertEquals(1, Hours.parseHours("PT1H").getHours()); [EOL]     assertEquals(-3, Hours.parseHours("PT-3H").getHours()); [EOL]     assertEquals(2, Hours.parseHours("P0Y0M0DT2H").getHours()); [EOL]     assertEquals(2, Hours.parseHours("PT2H0M").getHours()); [EOL]     try { [EOL]         Hours.parseHours("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Hours.parseHours("P1DT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 142,161
public void testGetMethods() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals(20, test.getHours()); [EOL] } <line_num>: 164,167
public void testGetFieldType() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals(DurationFieldType.hours(), test.getFieldType()); [EOL] } <line_num>: 169,172
public void testGetPeriodType() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals(PeriodType.hours(), test.getPeriodType()); [EOL] } <line_num>: 174,177
public void testIsGreaterThan() { [EOL]     assertEquals(true, Hours.THREE.isGreaterThan(Hours.TWO)); [EOL]     assertEquals(false, Hours.THREE.isGreaterThan(Hours.THREE)); [EOL]     assertEquals(false, Hours.TWO.isGreaterThan(Hours.THREE)); [EOL]     assertEquals(true, Hours.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Hours.hours(-1).isGreaterThan(null)); [EOL] } <line_num>: 180,186
public void testIsLessThan() { [EOL]     assertEquals(false, Hours.THREE.isLessThan(Hours.TWO)); [EOL]     assertEquals(false, Hours.THREE.isLessThan(Hours.THREE)); [EOL]     assertEquals(true, Hours.TWO.isLessThan(Hours.THREE)); [EOL]     assertEquals(false, Hours.ONE.isLessThan(null)); [EOL]     assertEquals(true, Hours.hours(-1).isLessThan(null)); [EOL] } <line_num>: 188,194
public void testToString() { [EOL]     Hours test = Hours.hours(20); [EOL]     assertEquals("PT20H", test.toString()); [EOL]     test = Hours.hours(-20); [EOL]     assertEquals("PT-20H", test.toString()); [EOL] } <line_num>: 197,203
public void testSerialization() throws Exception { [EOL]     Hours test = Hours.SEVEN; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Hours result = (Hours) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 206,221
public void testToStandardWeeks() { [EOL]     Hours test = Hours.hours(24 * 7 * 2); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] } <line_num>: 224,228
public void testToStandardDays() { [EOL]     Hours test = Hours.hours(24 * 2); [EOL]     Days expected = Days.days(2); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL] } <line_num>: 230,234
public void testToStandardMinutes() { [EOL]     Hours test = Hours.hours(3); [EOL]     Minutes expected = Minutes.minutes(3 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 236,247
public void testToStandardSeconds() { [EOL]     Hours test = Hours.hours(3); [EOL]     Seconds expected = Seconds.seconds(3 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Hours.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 249,260
public void testToStandardDuration() { [EOL]     Hours test = Hours.hours(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR); [EOL]     assertEquals(expected, Hours.MAX_VALUE.toStandardDuration()); [EOL] } <line_num>: 262,269
public void testPlus_int() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours result = test2.plus(3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(5, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.plus(0).getHours()); [EOL]     try { [EOL]         Hours.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 272,286
public void testPlus_Hours() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours test3 = Hours.hours(3); [EOL]     Hours result = test2.plus(test3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(3, test3.getHours()); [EOL]     assertEquals(5, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.plus(Hours.ZERO).getHours()); [EOL]     assertEquals(1, Hours.ONE.plus((Hours) null).getHours()); [EOL]     try { [EOL]         Hours.MAX_VALUE.plus(Hours.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 288,305
public void testMinus_int() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours result = test2.minus(3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(-1, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.minus(0).getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 307,321
public void testMinus_Hours() { [EOL]     Hours test2 = Hours.hours(2); [EOL]     Hours test3 = Hours.hours(3); [EOL]     Hours result = test2.minus(test3); [EOL]     assertEquals(2, test2.getHours()); [EOL]     assertEquals(3, test3.getHours()); [EOL]     assertEquals(-1, result.getHours()); [EOL]     assertEquals(1, Hours.ONE.minus(Hours.ZERO).getHours()); [EOL]     assertEquals(1, Hours.ONE.minus((Hours) null).getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.minus(Hours.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 323,340
public void testMultipliedBy_int() { [EOL]     Hours test = Hours.hours(2); [EOL]     assertEquals(6, test.multipliedBy(3).getHours()); [EOL]     assertEquals(2, test.getHours()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getHours()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 342,356
public void testDividedBy_int() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(6, test.dividedBy(2).getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     assertEquals(4, test.dividedBy(3).getHours()); [EOL]     assertEquals(3, test.dividedBy(4).getHours()); [EOL]     assertEquals(2, test.dividedBy(5).getHours()); [EOL]     assertEquals(2, test.dividedBy(6).getHours()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Hours.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 358,374
public void testNegated() { [EOL]     Hours test = Hours.hours(12); [EOL]     assertEquals(-12, test.negated().getHours()); [EOL]     assertEquals(12, test.getHours()); [EOL]     try { [EOL]         Hours.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 376,387
public void testAddToLocalDate() { [EOL]     Hours test = Hours.hours(26); [EOL]     LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0); [EOL]     LocalDateTime expected = new LocalDateTime(2006, 6, 2, 2, 0, 0, 0); [EOL]     assertEquals(expected, date.plus(test)); [EOL] } <line_num>: 390,395
