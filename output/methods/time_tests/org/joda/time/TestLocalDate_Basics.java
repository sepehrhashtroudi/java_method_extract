public TestLocalDate_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 98,100
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 90,92
public static TestSuite suite() { [EOL]     return new TestSuite(TestLocalDate_Basics.class); [EOL] } <line_num>: 94,96
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     systemDefaultLocale = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL] } <line_num>: 102,108
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL]     Locale.setDefault(systemDefaultLocale); [EOL]     systemDefaultLocale = null; [EOL] } <line_num>: 110,116
public void testGet_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(1970, test.get(DateTimeFieldType.weekyear())); [EOL]     try { [EOL]         test.get(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.get(DateTimeFieldType.hourOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 119,136
public void testSize() { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(3, test.size()); [EOL] } <line_num>: 138,141
public void testGetFieldType_int() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertSame(DateTimeFieldType.year(), test.getFieldType(0)); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1)); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2)); [EOL]     try { [EOL]         test.getFieldType(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getFieldType(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 143,154
public void testGetFieldTypes() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     DateTimeFieldType[] fields = test.getFieldTypes(); [EOL]     assertSame(DateTimeFieldType.year(), fields[0]); [EOL]     assertSame(DateTimeFieldType.monthOfYear(), fields[1]); [EOL]     assertSame(DateTimeFieldType.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFieldTypes(), test.getFieldTypes()); [EOL] } <line_num>: 156,163
public void testGetField_int() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertSame(COPTIC_UTC.year(), test.getField(0)); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), test.getField(1)); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2)); [EOL]     try { [EOL]         test.getField(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getField(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 165,176
public void testGetFields() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     DateTimeField[] fields = test.getFields(); [EOL]     assertSame(COPTIC_UTC.year(), fields[0]); [EOL]     assertSame(COPTIC_UTC.monthOfYear(), fields[1]); [EOL]     assertSame(COPTIC_UTC.dayOfMonth(), fields[2]); [EOL]     assertNotSame(test.getFields(), test.getFields()); [EOL] } <line_num>: 178,185
public void testGetValue_int() { [EOL]     LocalDate test = new LocalDate(); [EOL]     assertEquals(1970, test.getValue(0)); [EOL]     assertEquals(6, test.getValue(1)); [EOL]     assertEquals(9, test.getValue(2)); [EOL]     try { [EOL]         test.getValue(-1); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         test.getValue(3); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 187,198
public void testGetValues() { [EOL]     LocalDate test = new LocalDate(); [EOL]     int[] values = test.getValues(); [EOL]     assertEquals(1970, values[0]); [EOL]     assertEquals(6, values[1]); [EOL]     assertEquals(9, values[2]); [EOL]     assertNotSame(test.getValues(), test.getValues()); [EOL] } <line_num>: 200,207
public void testIsSupported_DateTimeFieldType() { [EOL]     LocalDate test = new LocalDate(COPTIC_PARIS); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(false, test.isSupported((DateTimeFieldType) null)); [EOL] } <line_num>: 209,225
public void testIsSupported_DurationFieldType() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.eras())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.centuries())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weekyears())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported((DurationFieldType) null)); [EOL] } <line_num>: 227,239
@SuppressWarnings("deprecation") [EOL] public void testEqualsHashCode() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, COPTIC_PARIS); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, COPTIC_PARIS); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     LocalDate test3 = new LocalDate(1971, 6, 9); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(true, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS))); [EOL]     assertEquals(true, test1.hashCode() == new YearMonthDay(1970, 6, 9, COPTIC_PARIS).hashCode()); [EOL]     assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE)); [EOL] } <line_num>: 241,266
public Chronology getChronology() { [EOL]     return COPTIC_UTC; [EOL] } <line_num>: 269,271
public DateTimeField[] getFields() { [EOL]     return new DateTimeField[] { COPTIC_UTC.year(), COPTIC_UTC.monthOfYear(), COPTIC_UTC.dayOfMonth() }; [EOL] } <line_num>: 272,278
public int[] getValues() { [EOL]     return new int[] { 1970, 6, 9 }; [EOL] } <line_num>: 279,281
public void testEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] } <line_num>: 284,294
public void testEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL] } <line_num>: 296,306
public void testEqualsHashCodeAPI() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, COPTIC_PARIS); [EOL]     int expected = 157; [EOL]     expected = 23 * expected + 1970; [EOL]     expected = 23 * expected + COPTIC_UTC.year().getType().hashCode(); [EOL]     expected = 23 * expected + 6; [EOL]     expected = 23 * expected + COPTIC_UTC.monthOfYear().getType().hashCode(); [EOL]     expected = 23 * expected + 9; [EOL]     expected = 23 * expected + COPTIC_UTC.dayOfMonth().getType().hashCode(); [EOL]     expected += COPTIC_UTC.hashCode(); [EOL]     assertEquals(expected, test.hashCode()); [EOL] } <line_num>: 308,319
@SuppressWarnings("deprecation") [EOL] public void testCompareTo() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }; [EOL]     int[] values = new int[] { 2005, 6, 2 }; [EOL]     Partial p = new Partial(types, values); [EOL]     assertEquals(0, test1.compareTo(p)); [EOL]     assertEquals(0, test1.compareTo(new YearMonthDay(2005, 6, 2))); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL]     try { [EOL]         test1.compareTo(new TimeOfDay()); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL]     Partial partial = new Partial().with(DateTimeFieldType.centuryOfEra(), 1).with(DateTimeFieldType.halfdayOfDay(), 0).with(DateTimeFieldType.dayOfMonth(), 9); [EOL]     try { [EOL]         new LocalDate(1970, 6, 9).compareTo(partial); [EOL]         fail(); [EOL]     } catch (ClassCastException ex) { [EOL]     } [EOL] } <line_num>: 322,369
public void testIsEqual_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isEqual(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 372,393
public void testIsBefore_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isBefore(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 396,417
public void testIsAfter_LocalDate() { [EOL]     LocalDate test1 = new LocalDate(2005, 6, 2); [EOL]     LocalDate test1a = new LocalDate(2005, 6, 2); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     LocalDate test2 = new LocalDate(2005, 7, 2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     try { [EOL]         new LocalDate(2005, 7, 2).isAfter(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 420,441
public void testWithField_DateTimeFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2006, 6, 9), result); [EOL] } <line_num>: 444,450
public void testWithField_DateTimeFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 452,458
public void testWithField_DateTimeFieldType_int_3() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withField(DateTimeFieldType.hourOfDay(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 460,466
public void testWithField_DateTimeFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withField(DateTimeFieldType.year(), 2004); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertSame(test, result); [EOL] } <line_num>: 468,473
public void testWithFieldAdded_DurationFieldType_int_1() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new LocalDate(2004, 6, 9), test); [EOL]     assertEquals(new LocalDate(2010, 6, 9), result); [EOL] } <line_num>: 476,482
public void testWithFieldAdded_DurationFieldType_int_2() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 484,490
public void testWithFieldAdded_DurationFieldType_int_3() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 492,498
public void testWithFieldAdded_DurationFieldType_int_4() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 500,504
public void testWithFieldAdded_DurationFieldType_int_5() { [EOL]     LocalDate test = new LocalDate(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.hours(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 506,512
public void testPlus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8)); [EOL]     LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 515,523
public void testPlusYears_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusYears(1); [EOL]     LocalDate expected = new LocalDate(2003, 5, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 525,533
public void testPlusMonths_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusMonths(1); [EOL]     LocalDate expected = new LocalDate(2002, 6, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 535,543
public void testPlusWeeks_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusWeeks(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 10, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 545,553
public void testPlusDays_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.plusDays(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 4, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 555,563
public void testMinus_RP() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 566,578
public void testMinusYears_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusYears(1); [EOL]     LocalDate expected = new LocalDate(2001, 5, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 580,588
public void testMinusMonths_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusMonths(1); [EOL]     LocalDate expected = new LocalDate(2002, 4, 3, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 590,598
public void testMinusWeeks_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusWeeks(1); [EOL]     LocalDate expected = new LocalDate(2002, 4, 26, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 600,608
public void testMinusDays_int() { [EOL]     LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON); [EOL]     LocalDate result = test.minusDays(1); [EOL]     LocalDate expected = new LocalDate(2002, 5, 2, BUDDHIST_LONDON); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 610,618
public void testGetters() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     assertEquals(1970, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(2, test.getDayOfWeek()); [EOL]     assertEquals(24, test.getWeekOfWeekyear()); [EOL]     assertEquals(1970, test.getWeekyear()); [EOL]     assertEquals(70, test.getYearOfCentury()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(1970, test.getYearOfEra()); [EOL]     assertEquals(DateTimeConstants.AD, test.getEra()); [EOL] } <line_num>: 621,634
public void testWithers() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 637,658
public void testToDateTimeAtStartOfDay() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] } <line_num>: 661,667
public void testToDateTimeAtStartOfDay_avoidDST() { [EOL]     LocalDate base = new LocalDate(2007, 4, 1); [EOL]     DateTimeZone.setDefault(MOCK_GAZA); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(); [EOL]     check(base, 2007, 4, 1); [EOL]     assertEquals(new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA), test); [EOL] } <line_num>: 669,676
public void testToDateTimeAtStartOfDay_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test); [EOL] } <line_num>: 679,685
public void testToDateTimeAtStartOfDay_Zone_avoidDST() { [EOL]     LocalDate base = new LocalDate(2007, 4, 1); [EOL]     DateTime test = base.toDateTimeAtStartOfDay(MOCK_GAZA); [EOL]     check(base, 2007, 4, 1); [EOL]     assertEquals(new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA), test); [EOL] } <line_num>: 687,693
public void testToDateTimeAtStartOfDay_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtStartOfDay((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] } <line_num>: 695,701
@SuppressWarnings("deprecation") [EOL] public void testToDateTimeAtMidnight() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] } <line_num>: 704,711
@SuppressWarnings("deprecation") [EOL] public void testToDateTimeAtMidnight_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test); [EOL] } <line_num>: 714,721
@SuppressWarnings("deprecation") [EOL] public void testToDateTimeAtMidnight_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime test = base.toDateTimeAtMidnight((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test); [EOL] } <line_num>: 723,730
public void testToDateTimeAtCurrentTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 733,745
public void testToDateTimeAtCurrentTime_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 748,760
public void testToDateTimeAtCurrentTime_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTimeAtCurrentTime((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON); [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 762,774
public void testToLocalDateTime_LocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     LocalDateTime test = base.toLocalDateTime(tod); [EOL]     check(base, 2005, 6, 9); [EOL]     LocalDateTime expected = new LocalDateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_UTC); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 777,785
public void testToLocalDateTime_nullLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     try { [EOL]         base.toLocalDateTime((LocalTime) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 787,796
public void testToLocalDateTime_wrongChronologyLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_PARIS); [EOL]     try { [EOL]         base.toLocalDateTime(tod); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 798,808
public void testToDateTime_LocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     DateTime test = base.toDateTime(tod); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 811,819
public void testToDateTime_nullLocalTime() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_LONDON).getMillis(); [EOL]     DateTimeUtils.setCurrentMillisFixed(now); [EOL]     DateTime test = base.toDateTime((LocalTime) null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 821,830
public void testToDateTime_LocalTime_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     DateTime test = base.toDateTime(tod, TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 833,841
public void testToDateTime_LocalTime_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO); [EOL]     DateTime test = base.toDateTime(tod, null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 843,851
public void testToDateTime_nullLocalTime_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_TOKYO).getMillis(); [EOL]     DateTimeUtils.setCurrentMillisFixed(now); [EOL]     DateTime test = base.toDateTime((LocalTime) null, TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 853,862
public void testToDateTime_wrongChronoLocalTime_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_TOKYO); [EOL]     try { [EOL]         base.toDateTime(tod, LONDON); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 864,872
@SuppressWarnings("deprecation") [EOL] public void testToDateMidnight() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] } <line_num>: 875,882
@SuppressWarnings("deprecation") [EOL] public void testToDateMidnight_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_TOKYO), test); [EOL] } <line_num>: 885,892
@SuppressWarnings("deprecation") [EOL] public void testToDateMidnight_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateMidnight test = base.toDateMidnight((DateTimeZone) null); [EOL]     check(base, 2005, 6, 9); [EOL]     assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test); [EOL] } <line_num>: 894,901
public void testToDateTime_RI() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7); [EOL]     DateTime test = base.toDateTime(dt); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = dt; [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 904,915
public void testToDateTime_nullRI() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9); [EOL]     DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7); [EOL]     DateTimeUtils.setCurrentMillisFixed(dt.getMillis()); [EOL]     DateTime test = base.toDateTime((ReadableInstant) null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime expected = dt; [EOL]     expected = expected.year().setCopy(2005); [EOL]     expected = expected.monthOfYear().setCopy(6); [EOL]     expected = expected.dayOfMonth().setCopy(9); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 917,929
public void testToInterval() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 932,940
public void testToInterval_Zone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(TOKYO); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(TOKYO); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 943,951
public void testToInterval_Zone_noMidnight() { [EOL]     LocalDate base = new LocalDate(2006, 4, 1, ISO_LONDON); [EOL]     DateTimeZone gaza = DateTimeZone.forID("Asia/Gaza"); [EOL]     Interval test = base.toInterval(gaza); [EOL]     check(base, 2006, 4, 1); [EOL]     DateTime start = new DateTime(2006, 4, 1, 1, 0, 0, 0, gaza); [EOL]     DateTime end = new DateTime(2006, 4, 2, 0, 0, 0, 0, gaza); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 953,962
public void testToInterval_nullZone() { [EOL]     LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); [EOL]     Interval test = base.toInterval(null); [EOL]     check(base, 2005, 6, 9); [EOL]     DateTime start = base.toDateTimeAtStartOfDay(LONDON); [EOL]     DateTime end = start.plus(Period.days(1)); [EOL]     Interval expected = new Interval(start, end); [EOL]     assertEquals(expected, test); [EOL] } <line_num>: 964,972
public void testToDate_summer() { [EOL]     LocalDate base = new LocalDate(2005, 7, 9, COPTIC_PARIS); [EOL]     Date test = base.toDate(); [EOL]     check(base, 2005, 7, 9); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JULY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     assertEquals(gcal.getTime(), test); [EOL] } <line_num>: 975,987
public void testToDate_winter() { [EOL]     LocalDate base = new LocalDate(2005, 1, 9, COPTIC_PARIS); [EOL]     Date test = base.toDate(); [EOL]     check(base, 2005, 1, 9); [EOL]     GregorianCalendar gcal = new GregorianCalendar(); [EOL]     gcal.clear(); [EOL]     gcal.set(Calendar.YEAR, 2005); [EOL]     gcal.set(Calendar.MONTH, Calendar.JANUARY); [EOL]     gcal.set(Calendar.DAY_OF_MONTH, 9); [EOL]     assertEquals(gcal.getTime(), test); [EOL] } <line_num>: 989,1001
public void testToDate_springDST() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 01:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 1003,1017
public void testToDate_springDST_2Hour40Savings() { [EOL]     LocalDate base = new LocalDate(2007, 4, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 4, 2); [EOL]         assertEquals("Mon Apr 02 02:40:00 GMT+03:40 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 1019,1033
public void testToDate_autumnDST() { [EOL]     LocalDate base = new LocalDate(2007, 10, 2); [EOL]     SimpleTimeZone testZone = new SimpleTimeZone(3600000, "NoMidnight", Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000); [EOL]     TimeZone currentZone = TimeZone.getDefault(); [EOL]     try { [EOL]         TimeZone.setDefault(testZone); [EOL]         Date test = base.toDate(); [EOL]         check(base, 2007, 10, 2); [EOL]         assertEquals("Tue Oct 02 00:00:00 GMT+02:00 2007", test.toString()); [EOL]     } finally { [EOL]         TimeZone.setDefault(currentZone); [EOL]     } [EOL] } <line_num>: 1035,1049
public void testProperty() { [EOL]     LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear())); [EOL]     assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(test.era(), test.property(DateTimeFieldType.era())); [EOL]     try { [EOL]         test.property(DateTimeFieldType.millisOfDay()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1052,1073
public void testSerialization() throws Exception { [EOL]     LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     LocalDate result = (LocalDate) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL]     assertTrue(Arrays.equals(test.getValues(), result.getValues())); [EOL]     assertTrue(Arrays.equals(test.getFields(), result.getFields())); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL] } <line_num>: 1076,1094
public void testToString() { [EOL]     LocalDate test = new LocalDate(2002, 6, 9); [EOL]     assertEquals("2002-06-09", test.toString()); [EOL] } <line_num>: 1097,1100
public void testToString_String() { [EOL]     LocalDate test = new LocalDate(2002, 6, 9); [EOL]     assertEquals("2002 \ufffd\ufffd", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06-09", test.toString((String) null)); [EOL] } <line_num>: 1103,1107
public void testToString_String_Locale() { [EOL]     LocalDate test = new LocalDate(1970, 6, 9); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("1970-06-09", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Tue 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("1970-06-09", test.toString(null, null)); [EOL] } <line_num>: 1110,1117
public void testToString_DTFormatter() { [EOL]     LocalDate test = new LocalDate(2002, 6, 9); [EOL]     assertEquals("2002 \ufffd\ufffd", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09", test.toString((DateTimeFormatter) null)); [EOL] } <line_num>: 1120,1124
private void check(LocalDate test, int hour, int min, int sec) { [EOL]     assertEquals(hour, test.getYear()); [EOL]     assertEquals(min, test.getMonthOfYear()); [EOL]     assertEquals(sec, test.getDayOfMonth()); [EOL] } <line_num>: 1127,1131
