public TestMutableInterval_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 71,73
public static TestSuite suite() { [EOL]     return new TestSuite(TestMutableInterval_Constructors.class); [EOL] } <line_num>: 75,77
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(PARIS); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 83,91
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 93,101
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 104,108
public void testParse_noFormatter() throws Throwable { [EOL]     DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS)); [EOL]     DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/2010-07-01T14:30")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("2010-06-30T12:30/P1DT2H")); [EOL]     assertEquals(new MutableInterval(start, end), MutableInterval.parse("P1DT2H/2010-07-01T14:30")); [EOL] } <line_num>: 111,117
public void testConstructor() throws Throwable { [EOL]     MutableInterval test = new MutableInterval(); [EOL]     assertEquals(0L, test.getStartMillis()); [EOL]     assertEquals(0L, test.getEndMillis()); [EOL] } <line_num>: 120,124
public void testConstructor_long_long1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 127,134
public void testConstructor_long_long2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     MutableInterval test = new MutableInterval(dt1.getMillis(), dt1.getMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 136,142
public void testConstructor_long_long3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         new MutableInterval(dt1.getMillis(), dt2.getMillis()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 144,151
public void testConstructor_long_long_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 154,161
public void testConstructor_long_long_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 163,170
public void testConstructor_RI_RI1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 173,179
public void testConstructor_RI_RI2() throws Throwable { [EOL]     Instant dt1 = new Instant(new DateTime(2004, 6, 9, 0, 0, 0, 0)); [EOL]     Instant dt2 = new Instant(new DateTime(2005, 7, 10, 1, 1, 1, 1)); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 181,187
public void testConstructor_RI_RI3() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 189,193
public void testConstructor_RI_RI4() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2000, 6, 9, 0, 0, 0, 0); [EOL]     MutableInterval test = new MutableInterval(dt1, (ReadableInstant) null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 195,200
public void testConstructor_RI_RI5() throws Throwable { [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, dt2); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 202,207
public void testConstructor_RI_RI6() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     MutableInterval test = new MutableInterval(dt1, dt1); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt1.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 209,214
public void testConstructor_RI_RI7() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         new MutableInterval(dt1, dt2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 216,223
public void testConstructor_RI_RI8() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance()); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(GJChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 225,232
public void testConstructor_RI_RI9() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance()); [EOL]     MutableInterval test = new MutableInterval(dt1, dt2); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 234,241
public void testConstructor_RI_RP1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, 6); [EOL]     result = ISOChronology.getInstance().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 244,254
public void testConstructor_RI_RP2() throws Throwable { [EOL]     Instant dt = new Instant(new DateTime(TEST_TIME_NOW)); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 256,267
public void testConstructor_RI_RP3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, 6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, 3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, 1); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 269,280
public void testConstructor_RI_RP4() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().hours().add(result, 1); [EOL]     result = ISOChronology.getInstance().millis().add(result, 23); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 282,292
public void testConstructor_RI_RP5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadablePeriod) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 294,298
public void testConstructor_RI_RP6() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval(dt, (ReadablePeriod) null); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 300,305
public void testConstructor_RI_RP7() throws Throwable { [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 307,316
public void testConstructor_RI_RP8() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1); [EOL]     try { [EOL]         new MutableInterval(dt, dur); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 318,325
public void testConstructor_RP_RI1() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, -6); [EOL]     result = ISOChronology.getInstance().hours().add(result, -1); [EOL]     MutableInterval test = new MutableInterval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 328,338
public void testConstructor_RP_RI2() throws Throwable { [EOL]     Instant dt = new Instant(new DateTime(TEST_TIME_NOW)); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, -6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, -3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, -1); [EOL]     MutableInterval test = new MutableInterval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 340,351
public void testConstructor_RP_RI3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC()); [EOL]     Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard()); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstanceUTC().months().add(result, -6); [EOL]     result = ISOChronology.getInstanceUTC().days().add(result, -3); [EOL]     result = ISOChronology.getInstanceUTC().hours().add(result, -1); [EOL]     MutableInterval test = new MutableInterval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 353,364
public void testConstructor_RP_RI4() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().hours().add(result, -1); [EOL]     result = ISOChronology.getInstance().millis().add(result, -23); [EOL]     MutableInterval test = new MutableInterval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 366,376
public void testConstructor_RP_RI5() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 378,382
public void testConstructor_RP_RI6() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval((ReadablePeriod) null, dt); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 384,389
public void testConstructor_RP_RI7() throws Throwable { [EOL]     Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0); [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, -6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, -1); [EOL]     MutableInterval test = new MutableInterval(dur, (ReadableInstant) null); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 391,400
public void testConstructor_RP_RI8() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1); [EOL]     try { [EOL]         new MutableInterval(dur, dt); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 402,409
public void testConstructor_RI_RD1() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, 6); [EOL]     result = ISOChronology.getInstance().hours().add(result, 1); [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval(dt, dur); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 412,423
public void testConstructor_RI_RD2() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadableDuration) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 425,429
public void testConstructor_RI_RD3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval(dt, (ReadableDuration) null); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 431,436
public void testConstructor_RI_RD4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, 6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, 1); [EOL]     Duration dur = new Duration(result - TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval((ReadableInstant) null, dur); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(result, test.getEndMillis()); [EOL] } <line_num>: 438,448
public void testConstructor_RI_RD5() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(-1); [EOL]     try { [EOL]         new MutableInterval(dt, dur); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 450,457
public void testConstructor_RD_RI1() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().months().add(result, -6); [EOL]     result = ISOChronology.getInstance().hours().add(result, -1); [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(TEST_TIME_NOW - result); [EOL]     MutableInterval test = new MutableInterval(dur, dt); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 460,471
public void testConstructor_RD_RI2() throws Throwable { [EOL]     MutableInterval test = new MutableInterval((ReadableDuration) null, (ReadableInstant) null); [EOL]     assertEquals(TEST_TIME_NOW, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 473,477
public void testConstructor_RD_RI3() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     MutableInterval test = new MutableInterval((ReadableDuration) null, dt); [EOL]     assertEquals(dt.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 479,484
public void testConstructor_RD_RI4() throws Throwable { [EOL]     long result = TEST_TIME_NOW; [EOL]     result = ISOChronology.getInstance().monthOfYear().add(result, -6); [EOL]     result = ISOChronology.getInstance().hourOfDay().add(result, -1); [EOL]     Duration dur = new Duration(TEST_TIME_NOW - result); [EOL]     MutableInterval test = new MutableInterval(dur, (ReadableInstant) null); [EOL]     assertEquals(result, test.getStartMillis()); [EOL]     assertEquals(TEST_TIME_NOW, test.getEndMillis()); [EOL] } <line_num>: 486,496
public void testConstructor_RD_RI5() throws Throwable { [EOL]     DateTime dt = new DateTime(TEST_TIME_NOW); [EOL]     Duration dur = new Duration(-1); [EOL]     try { [EOL]         new MutableInterval(dur, dt); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 498,505
public void testConstructor_Object1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval test = new MutableInterval(dt1.toString() + '/' + dt2.toString()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 508,514
public void testConstructor_Object2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     MutableInterval base = new MutableInterval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 516,524
public void testConstructor_Object3() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL] } <line_num>: 526,534
public void testConstructor_Object4() throws Throwable { [EOL]     MockInterval base = new MockInterval(); [EOL]     MutableInterval test = new MutableInterval(base); [EOL]     assertEquals(base.getStartMillis(), test.getStartMillis()); [EOL]     assertEquals(base.getEndMillis(), test.getEndMillis()); [EOL] } <line_num>: 536,541
public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]     return false; [EOL] } <line_num>: 546,548
public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]     interval.setChronology(chrono); [EOL]     interval.setInterval(1234L, 5678L); [EOL] } <line_num>: 549,552
public Class<?> getSupportedType() { [EOL]     return String.class; [EOL] } <line_num>: 553,555
public void testConstructor_Object5() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(""); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return String.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]         MutableInterval test = new MutableInterval(dt1.toString() + '/' + dt2.toString()); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] } <line_num>: 543,567
public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]     return false; [EOL] } <line_num>: 572,574
public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]     interval.setChronology(chrono); [EOL]     interval.setInterval(1234L, 5678L); [EOL] } <line_num>: 575,578
public Class<?> getSupportedType() { [EOL]     return ReadableInterval.class; [EOL] } <line_num>: 579,581
public void testConstructor_Object6() throws Throwable { [EOL]     IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L)); [EOL]     IntervalConverter conv = new IntervalConverter() { [EOL]  [EOL]         public boolean isReadableInterval(Object object, Chronology chrono) { [EOL]             return false; [EOL]         } [EOL]  [EOL]         public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) { [EOL]             interval.setChronology(chrono); [EOL]             interval.setInterval(1234L, 5678L); [EOL]         } [EOL]  [EOL]         public Class<?> getSupportedType() { [EOL]             return ReadableInterval.class; [EOL]         } [EOL]     }; [EOL]     try { [EOL]         ConverterManager.getInstance().addIntervalConverter(conv); [EOL]         Interval base = new Interval(-1000L, 1000L); [EOL]         MutableInterval test = new MutableInterval(base); [EOL]         assertEquals(1234L, test.getStartMillis()); [EOL]         assertEquals(5678L, test.getEndMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().addIntervalConverter(oldConv); [EOL]     } [EOL] } <line_num>: 569,592
public Chronology getChronology() { [EOL]     return ISOChronology.getInstance(); [EOL] } <line_num>: 595,597
public long getStartMillis() { [EOL]     return 1234L; [EOL] } <line_num>: 598,600
public DateTime getStart() { [EOL]     return new DateTime(1234L); [EOL] } <line_num>: 601,603
public long getEndMillis() { [EOL]     return 5678L; [EOL] } <line_num>: 604,606
public DateTime getEnd() { [EOL]     return new DateTime(5678L); [EOL] } <line_num>: 607,609
public long toDurationMillis() { [EOL]     return (5678L - 1234L); [EOL] } <line_num>: 610,612
public Duration toDuration() { [EOL]     return new Duration(5678L - 1234L); [EOL] } <line_num>: 613,615
public boolean contains(long millisInstant) { [EOL]     return false; [EOL] } <line_num>: 616,618
public boolean containsNow() { [EOL]     return false; [EOL] } <line_num>: 619,621
public boolean contains(ReadableInstant instant) { [EOL]     return false; [EOL] } <line_num>: 622,624
public boolean contains(ReadableInterval interval) { [EOL]     return false; [EOL] } <line_num>: 625,627
public boolean overlaps(ReadableInterval interval) { [EOL]     return false; [EOL] } <line_num>: 628,630
public boolean isBefore(ReadableInstant instant) { [EOL]     return false; [EOL] } <line_num>: 631,633
public boolean isBefore(ReadableInterval interval) { [EOL]     return false; [EOL] } <line_num>: 634,636
public boolean isAfter(ReadableInstant instant) { [EOL]     return false; [EOL] } <line_num>: 637,639
public boolean isAfter(ReadableInterval interval) { [EOL]     return false; [EOL] } <line_num>: 640,642
public Interval toInterval() { [EOL]     return null; [EOL] } <line_num>: 643,645
public MutableInterval toMutableInterval() { [EOL]     return null; [EOL] } <line_num>: 646,648
public Period toPeriod() { [EOL]     return null; [EOL] } <line_num>: 649,651
public Period toPeriod(PeriodType type) { [EOL]     return null; [EOL] } <line_num>: 652,654
public void testConstructor_Object_Chronology1() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance()); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(BuddhistChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 658,667
public void testConstructor_Object_Chronology2() throws Throwable { [EOL]     DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1); [EOL]     Interval base = new Interval(dt1, dt2); [EOL]     MutableInterval test = new MutableInterval(base, null); [EOL]     assertEquals(dt1.getMillis(), test.getStartMillis()); [EOL]     assertEquals(dt2.getMillis(), test.getEndMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 669,678
