public TestMutablePeriod_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 79,81
public MockMutablePeriod(long value) { [EOL]     super(value, null, null); [EOL] } <line_num>: 154,156
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 71,73
public static TestSuite suite() { [EOL]     return new TestSuite(TestMutablePeriod_Basics.class); [EOL] } <line_num>: 75,77
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 83,91
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 93,101
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 104,108
public void testGetPeriodType() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] } <line_num>: 111,114
public void testGetMethods() { [EOL]     MutablePeriod test = new MutablePeriod(); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 116,127
public void testEqualsHashCode() { [EOL]     MutablePeriod test1 = new MutablePeriod(123L); [EOL]     MutablePeriod test2 = new MutablePeriod(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     MutablePeriod test3 = new MutablePeriod(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockMutablePeriod(123L))); [EOL]     assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime()))); [EOL] } <line_num>: 129,151
public void testSerialization() throws Exception { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     MutablePeriod result = (MutablePeriod) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 160,175
public void testToString() { [EOL]     MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", test.toString()); [EOL]     test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("PT0S", test.toString()); [EOL]     test = new MutablePeriod(12345L); [EOL]     assertEquals("PT12.345S", test.toString()); [EOL] } <line_num>: 403,412
public void testToPeriod() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     Period result = test.toPeriod(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 415,419
public void testToMutablePeriod() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     MutablePeriod result = test.toMutablePeriod(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 421,425
public void testToDurationFrom() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L))); [EOL] } <line_num>: 433,436
public void testCopy() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     MutablePeriod copy = test.copy(); [EOL]     assertEquals(test.getPeriodType(), copy.getPeriodType()); [EOL]     assertEquals(test, copy); [EOL] } <line_num>: 439,444
public void testClone() { [EOL]     MutablePeriod test = new MutablePeriod(123L); [EOL]     MutablePeriod copy = (MutablePeriod) test.clone(); [EOL]     assertEquals(test.getPeriodType(), copy.getPeriodType()); [EOL]     assertEquals(test, copy); [EOL] } <line_num>: 447,452
