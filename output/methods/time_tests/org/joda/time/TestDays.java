public TestDays(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 36,38
public static TestSuite suite() { [EOL]     return new TestSuite(TestDays.class); [EOL] } <line_num>: 40,42
protected void setUp() throws Exception { [EOL] } <line_num>: 48,49
protected void tearDown() throws Exception { [EOL] } <line_num>: 51,52
public void testConstants() { [EOL]     assertEquals(0, Days.ZERO.getDays()); [EOL]     assertEquals(1, Days.ONE.getDays()); [EOL]     assertEquals(2, Days.TWO.getDays()); [EOL]     assertEquals(3, Days.THREE.getDays()); [EOL]     assertEquals(4, Days.FOUR.getDays()); [EOL]     assertEquals(5, Days.FIVE.getDays()); [EOL]     assertEquals(6, Days.SIX.getDays()); [EOL]     assertEquals(7, Days.SEVEN.getDays()); [EOL]     assertEquals(Integer.MAX_VALUE, Days.MAX_VALUE.getDays()); [EOL]     assertEquals(Integer.MIN_VALUE, Days.MIN_VALUE.getDays()); [EOL] } <line_num>: 55,66
public void testFactory_days_int() { [EOL]     assertSame(Days.ZERO, Days.days(0)); [EOL]     assertSame(Days.ONE, Days.days(1)); [EOL]     assertSame(Days.TWO, Days.days(2)); [EOL]     assertSame(Days.THREE, Days.days(3)); [EOL]     assertSame(Days.FOUR, Days.days(4)); [EOL]     assertSame(Days.FIVE, Days.days(5)); [EOL]     assertSame(Days.SIX, Days.days(6)); [EOL]     assertSame(Days.SEVEN, Days.days(7)); [EOL]     assertSame(Days.MAX_VALUE, Days.days(Integer.MAX_VALUE)); [EOL]     assertSame(Days.MIN_VALUE, Days.days(Integer.MIN_VALUE)); [EOL]     assertEquals(-1, Days.days(-1).getDays()); [EOL]     assertEquals(8, Days.days(8).getDays()); [EOL] } <line_num>: 69,82
public void testFactory_daysBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] } <line_num>: 85,95
@SuppressWarnings("deprecation") [EOL] public void testFactory_daysBetween_RPartial_LocalDate() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     assertEquals(3, Days.daysBetween(start, end1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start, start).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, end1).getDays()); [EOL]     assertEquals(-3, Days.daysBetween(end1, start).getDays()); [EOL]     assertEquals(6, Days.daysBetween(start, end2).getDays()); [EOL] } <line_num>: 98,109
public void testFactory_daysBetween_RPartial_YearMonth() { [EOL]     YearMonth start1 = new YearMonth(2011, 1); [EOL]     YearMonth start2 = new YearMonth(2012, 1); [EOL]     YearMonth end1 = new YearMonth(2011, 3); [EOL]     YearMonth end2 = new YearMonth(2012, 3); [EOL]     assertEquals(59, Days.daysBetween(start1, end1).getDays()); [EOL]     assertEquals(60, Days.daysBetween(start2, end2).getDays()); [EOL]     assertEquals(-59, Days.daysBetween(end1, start1).getDays()); [EOL]     assertEquals(-60, Days.daysBetween(end2, start2).getDays()); [EOL] } <line_num>: 111,122
public void testFactory_daysBetween_RPartial_MonthDay() { [EOL]     MonthDay start1 = new MonthDay(2, 1); [EOL]     MonthDay start2 = new MonthDay(2, 28); [EOL]     MonthDay end1 = new MonthDay(2, 28); [EOL]     MonthDay end2 = new MonthDay(2, 29); [EOL]     assertEquals(27, Days.daysBetween(start1, end1).getDays()); [EOL]     assertEquals(28, Days.daysBetween(start1, end2).getDays()); [EOL]     assertEquals(0, Days.daysBetween(start2, end1).getDays()); [EOL]     assertEquals(1, Days.daysBetween(start2, end2).getDays()); [EOL]     assertEquals(-27, Days.daysBetween(end1, start1).getDays()); [EOL]     assertEquals(-28, Days.daysBetween(end2, start1).getDays()); [EOL]     assertEquals(0, Days.daysBetween(end1, start2).getDays()); [EOL]     assertEquals(-1, Days.daysBetween(end2, start2).getDays()); [EOL] } <line_num>: 124,139
public void testFactory_daysIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Days.daysIn((ReadableInterval) null).getDays()); [EOL]     assertEquals(3, Days.daysIn(new Interval(start, end1)).getDays()); [EOL]     assertEquals(0, Days.daysIn(new Interval(start, start)).getDays()); [EOL]     assertEquals(0, Days.daysIn(new Interval(end1, end1)).getDays()); [EOL]     assertEquals(6, Days.daysIn(new Interval(start, end2)).getDays()); [EOL] } <line_num>: 142,152
public void testFactory_standardDaysIn_RPeriod() { [EOL]     assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays()); [EOL]     assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays()); [EOL]     assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays()); [EOL]     assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays()); [EOL]     assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays()); [EOL]     assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays()); [EOL]     assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays()); [EOL]     try { [EOL]         Days.standardDaysIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 155,171
public void testFactory_parseDays_String() { [EOL]     assertEquals(0, Days.parseDays((String) null).getDays()); [EOL]     assertEquals(0, Days.parseDays("P0D").getDays()); [EOL]     assertEquals(1, Days.parseDays("P1D").getDays()); [EOL]     assertEquals(-3, Days.parseDays("P-3D").getDays()); [EOL]     assertEquals(2, Days.parseDays("P0Y0M2D").getDays()); [EOL]     assertEquals(2, Days.parseDays("P2DT0H0M").getDays()); [EOL]     try { [EOL]         Days.parseDays("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Days.parseDays("P1DT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 173,192
public void testGetMethods() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(20, test.getDays()); [EOL] } <line_num>: 195,198
public void testGetFieldType() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(DurationFieldType.days(), test.getFieldType()); [EOL] } <line_num>: 200,203
public void testGetPeriodType() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals(PeriodType.days(), test.getPeriodType()); [EOL] } <line_num>: 205,208
public void testIsGreaterThan() { [EOL]     assertEquals(true, Days.THREE.isGreaterThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isGreaterThan(Days.THREE)); [EOL]     assertEquals(false, Days.TWO.isGreaterThan(Days.THREE)); [EOL]     assertEquals(true, Days.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Days.days(-1).isGreaterThan(null)); [EOL] } <line_num>: 211,217
public void testIsLessThan() { [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.TWO)); [EOL]     assertEquals(false, Days.THREE.isLessThan(Days.THREE)); [EOL]     assertEquals(true, Days.TWO.isLessThan(Days.THREE)); [EOL]     assertEquals(false, Days.ONE.isLessThan(null)); [EOL]     assertEquals(true, Days.days(-1).isLessThan(null)); [EOL] } <line_num>: 219,225
public void testToString() { [EOL]     Days test = Days.days(20); [EOL]     assertEquals("P20D", test.toString()); [EOL]     test = Days.days(-20); [EOL]     assertEquals("P-20D", test.toString()); [EOL] } <line_num>: 228,234
public void testSerialization() throws Exception { [EOL]     Days test = Days.SEVEN; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Days result = (Days) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 237,252
public void testToStandardWeeks() { [EOL]     Days test = Days.days(14); [EOL]     Weeks expected = Weeks.weeks(2); [EOL]     assertEquals(expected, test.toStandardWeeks()); [EOL] } <line_num>: 255,259
public void testToStandardHours() { [EOL]     Days test = Days.days(2); [EOL]     Hours expected = Hours.hours(2 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 261,272
public void testToStandardMinutes() { [EOL]     Days test = Days.days(2); [EOL]     Minutes expected = Minutes.minutes(2 * 24 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 274,285
public void testToStandardSeconds() { [EOL]     Days test = Days.days(2); [EOL]     Seconds expected = Seconds.seconds(2 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Days.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 287,298
public void testToStandardDuration() { [EOL]     Days test = Days.days(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_DAY); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_DAY); [EOL]     assertEquals(expected, Days.MAX_VALUE.toStandardDuration()); [EOL] } <line_num>: 300,307
public void testPlus_int() { [EOL]     Days test2 = Days.days(2); [EOL]     Days result = test2.plus(3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(5, result.getDays()); [EOL]     assertEquals(1, Days.ONE.plus(0).getDays()); [EOL]     try { [EOL]         Days.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 310,324
public void testPlus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.plus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(5, result.getDays()); [EOL]     assertEquals(1, Days.ONE.plus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.plus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MAX_VALUE.plus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 326,343
public void testMinus_int() { [EOL]     Days test2 = Days.days(2); [EOL]     Days result = test2.minus(3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(-1, result.getDays()); [EOL]     assertEquals(1, Days.ONE.minus(0).getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 345,359
public void testMinus_Days() { [EOL]     Days test2 = Days.days(2); [EOL]     Days test3 = Days.days(3); [EOL]     Days result = test2.minus(test3); [EOL]     assertEquals(2, test2.getDays()); [EOL]     assertEquals(3, test3.getDays()); [EOL]     assertEquals(-1, result.getDays()); [EOL]     assertEquals(1, Days.ONE.minus(Days.ZERO).getDays()); [EOL]     assertEquals(1, Days.ONE.minus((Days) null).getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.minus(Days.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 361,378
public void testMultipliedBy_int() { [EOL]     Days test = Days.days(2); [EOL]     assertEquals(6, test.multipliedBy(3).getDays()); [EOL]     assertEquals(2, test.getDays()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getDays()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 380,394
public void testDividedBy_int() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(6, test.dividedBy(2).getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     assertEquals(4, test.dividedBy(3).getDays()); [EOL]     assertEquals(3, test.dividedBy(4).getDays()); [EOL]     assertEquals(2, test.dividedBy(5).getDays()); [EOL]     assertEquals(2, test.dividedBy(6).getDays()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Days.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 396,412
public void testNegated() { [EOL]     Days test = Days.days(12); [EOL]     assertEquals(-12, test.negated().getDays()); [EOL]     assertEquals(12, test.getDays()); [EOL]     try { [EOL]         Days.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 414,425
public void testAddToLocalDate() { [EOL]     Days test = Days.days(20); [EOL]     LocalDate date = new LocalDate(2006, 6, 1); [EOL]     LocalDate expected = new LocalDate(2006, 6, 21); [EOL]     assertEquals(expected, date.plus(test)); [EOL] } <line_num>: 428,433
