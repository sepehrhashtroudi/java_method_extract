public TestInstant_Constructors(String name) { [EOL]     super(name); [EOL] } <line_num>: 67,69
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 59,61
public static TestSuite suite() { [EOL]     return new TestSuite(TestInstant_Constructors.class); [EOL] } <line_num>: 63,65
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     locale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     java.util.TimeZone.setDefault(LONDON.toTimeZone()); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 71,78
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     java.util.TimeZone.setDefault(zone.toTimeZone()); [EOL]     Locale.setDefault(locale); [EOL]     zone = null; [EOL] } <line_num>: 80,86
public void test_now() throws Throwable { [EOL]     Instant test = Instant.now(); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 92,96
public void testParse_noFormatter() throws Throwable { [EOL]     assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-06-30T01:20+02:00")); [EOL]     assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse("2010-002T14:50")); [EOL] } <line_num>: 99,102
public void testParse_formatter() throws Throwable { [EOL]     DateTimeFormatter f = DateTimeFormat.forPattern("yyyy--dd MM HH").withChronology(ISOChronology.getInstance(PARIS)); [EOL]     assertEquals(new DateTime(2010, 6, 30, 13, 0, ISOChronology.getInstance(PARIS)).toInstant(), Instant.parse("2010--30 06 13", f)); [EOL] } <line_num>: 104,107
public void testConstructor() throws Throwable { [EOL]     Instant test = new Instant(); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 113,117
public void testConstructor_long1() throws Throwable { [EOL]     Instant test = new Instant(TEST_TIME1); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 123,127
public void testConstructor_long2() throws Throwable { [EOL]     Instant test = new Instant(TEST_TIME2); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME2, test.getMillis()); [EOL] } <line_num>: 132,136
public void testConstructor_Object() throws Throwable { [EOL]     Date date = new Date(TEST_TIME1); [EOL]     Instant test = new Instant(date); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 142,147
public void testConstructor_invalidObject() throws Throwable { [EOL]     try { [EOL]         new Instant(new Object()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 152,157
public void testConstructor_nullObject() throws Throwable { [EOL]     Instant test = new Instant((Object) null); [EOL]     assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL] } <line_num>: 162,166
public void testConstructor_badconverterObject() throws Throwable { [EOL]     try { [EOL]         ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]         Instant test = new Instant(new Integer(0)); [EOL]         assertEquals(ISOChronology.getInstanceUTC(), test.getChronology()); [EOL]         assertEquals(0L, test.getMillis()); [EOL]     } finally { [EOL]         ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE); [EOL]     } [EOL] } <line_num>: 171,180
