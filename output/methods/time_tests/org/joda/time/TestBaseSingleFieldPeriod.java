public TestBaseSingleFieldPeriod(String name) { [EOL]     super(name); [EOL] } <line_num>: 41,43
public Single(int period) { [EOL]     super(period); [EOL] } <line_num>: 301,303
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 33,35
public static TestSuite suite() { [EOL]     return new TestSuite(TestBaseSingleFieldPeriod.class); [EOL] } <line_num>: 37,39
protected void setUp() throws Exception { [EOL] } <line_num>: 45,46
protected void tearDown() throws Exception { [EOL] } <line_num>: 48,49
public void testFactory_between_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Single.between(start, end1, DurationFieldType.days())); [EOL]     assertEquals(0, Single.between(start, start, DurationFieldType.days())); [EOL]     assertEquals(0, Single.between(end1, end1, DurationFieldType.days())); [EOL]     assertEquals(-3, Single.between(end1, start, DurationFieldType.days())); [EOL]     assertEquals(6, Single.between(start, end2, DurationFieldType.days())); [EOL]     try { [EOL]         Single.between(start, (ReadableInstant) null, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadableInstant) null, end1, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadableInstant) null, (ReadableInstant) null, DurationFieldType.days()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 52,81
@SuppressWarnings("deprecation") [EOL] public void testFactory_between_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 12); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 6, 15); [EOL]     Single zero = new Single(0); [EOL]     assertEquals(3, Single.between(start, end1, zero)); [EOL]     assertEquals(0, Single.between(start, start, zero)); [EOL]     assertEquals(0, Single.between(end1, end1, zero)); [EOL]     assertEquals(-3, Single.between(end1, start, zero)); [EOL]     assertEquals(6, Single.between(start, end2, zero)); [EOL]     try { [EOL]         Single.between(start, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, end1, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between((ReadablePartial) null, (ReadablePartial) null, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(start, new LocalTime(), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     Partial p = new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 2 }); [EOL]     try { [EOL]         Single.between(p, p, zero); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 83,134
public void testFactory_standardPeriodIn_RPeriod() { [EOL]     assertEquals(0, Single.standardPeriodIn((ReadablePeriod) null, DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(0, Single.standardPeriodIn(Period.ZERO, DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(1, Single.standardPeriodIn(new Period(0, 0, 0, 1, 0, 0, 0, 0), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(123, Single.standardPeriodIn(Period.days(123), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(-987, Single.standardPeriodIn(Period.days(-987), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(1, Single.standardPeriodIn(Period.hours(47), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(2, Single.standardPeriodIn(Period.hours(48), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(2, Single.standardPeriodIn(Period.hours(49), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertEquals(14, Single.standardPeriodIn(Period.weeks(2), DateTimeConstants.MILLIS_PER_DAY)); [EOL]     try { [EOL]         Single.standardPeriodIn(Period.months(1), DateTimeConstants.MILLIS_PER_DAY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 136,152
public void testValueIndexMethods() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(20, test.getValue(0)); [EOL]     try { [EOL]         test.getValue(1); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 155,165
public void testFieldTypeIndexMethods() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(1, test.size()); [EOL]     assertEquals(DurationFieldType.days(), test.getFieldType(0)); [EOL]     try { [EOL]         test.getFieldType(1); [EOL]         fail(); [EOL]     } catch (IndexOutOfBoundsException ex) { [EOL]     } [EOL] } <line_num>: 167,177
public void testIsSupported() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.millis())); [EOL] } <line_num>: 179,189
public void testGet() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(0, test.get(DurationFieldType.years())); [EOL]     assertEquals(0, test.get(DurationFieldType.months())); [EOL]     assertEquals(0, test.get(DurationFieldType.weeks())); [EOL]     assertEquals(20, test.get(DurationFieldType.days())); [EOL]     assertEquals(0, test.get(DurationFieldType.hours())); [EOL]     assertEquals(0, test.get(DurationFieldType.minutes())); [EOL]     assertEquals(0, test.get(DurationFieldType.seconds())); [EOL]     assertEquals(0, test.get(DurationFieldType.millis())); [EOL] } <line_num>: 191,201
public void testEqualsHashCode() { [EOL]     Single testA = new Single(20); [EOL]     Single testB = new Single(20); [EOL]     assertEquals(true, testA.equals(testB)); [EOL]     assertEquals(true, testB.equals(testA)); [EOL]     assertEquals(true, testA.equals(testA)); [EOL]     assertEquals(true, testB.equals(testB)); [EOL]     assertEquals(true, testA.hashCode() == testB.hashCode()); [EOL]     assertEquals(true, testA.hashCode() == testA.hashCode()); [EOL]     assertEquals(true, testB.hashCode() == testB.hashCode()); [EOL]     Single testC = new Single(30); [EOL]     assertEquals(false, testA.equals(testC)); [EOL]     assertEquals(false, testB.equals(testC)); [EOL]     assertEquals(false, testC.equals(testA)); [EOL]     assertEquals(false, testC.equals(testB)); [EOL]     assertEquals(false, testA.hashCode() == testC.hashCode()); [EOL]     assertEquals(false, testB.hashCode() == testC.hashCode()); [EOL]     assertEquals(true, testA.equals(Days.days(20))); [EOL]     assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days()))); [EOL]     assertEquals(false, testA.equals(Period.days(2))); [EOL]     assertEquals(false, testA.equals("Hello")); [EOL]     assertEquals(false, testA.equals(Hours.hours(2))); [EOL]     assertEquals(false, testA.equals(null)); [EOL] } <line_num>: 204,229
public void testCompareTo() { [EOL]     Single test1 = new Single(21); [EOL]     Single test2 = new Single(22); [EOL]     Single test3 = new Single(23); [EOL]     assertEquals(true, test1.compareTo(test1) == 0); [EOL]     assertEquals(true, test1.compareTo(test2) < 0); [EOL]     assertEquals(true, test1.compareTo(test3) < 0); [EOL]     assertEquals(true, test2.compareTo(test1) > 0); [EOL]     assertEquals(true, test2.compareTo(test2) == 0); [EOL]     assertEquals(true, test2.compareTo(test3) < 0); [EOL]     assertEquals(true, test3.compareTo(test1) > 0); [EOL]     assertEquals(true, test3.compareTo(test2) > 0); [EOL]     assertEquals(true, test3.compareTo(test3) == 0); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 231,263
public void testToPeriod() { [EOL]     Single test = new Single(20); [EOL]     Period expected = Period.days(20); [EOL]     assertEquals(expected, test.toPeriod()); [EOL] } <line_num>: 266,270
public void testToMutablePeriod() { [EOL]     Single test = new Single(20); [EOL]     MutablePeriod expected = new MutablePeriod(0, 0, 0, 20, 0, 0, 0, 0); [EOL]     assertEquals(expected, test.toMutablePeriod()); [EOL] } <line_num>: 272,276
public void testGetSetValue() { [EOL]     Single test = new Single(20); [EOL]     assertEquals(20, test.getValue()); [EOL]     test.setValue(10); [EOL]     assertEquals(10, test.getValue()); [EOL] } <line_num>: 290,295
public static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field) { [EOL]     return BaseSingleFieldPeriod.between(start, end, field); [EOL] } <line_num>: 305,307
public static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) { [EOL]     return BaseSingleFieldPeriod.between(start, end, zeroInstance); [EOL] } <line_num>: 309,311
public static int standardPeriodIn(ReadablePeriod period, long millisPerUnit) { [EOL]     return BaseSingleFieldPeriod.standardPeriodIn(period, millisPerUnit); [EOL] } <line_num>: 313,315
public DurationFieldType getFieldType() { [EOL]     return DurationFieldType.days(); [EOL] } <line_num>: 317,319
public PeriodType getPeriodType() { [EOL]     return PeriodType.days(); [EOL] } <line_num>: 321,323
public int getValue() { [EOL]     return super.getValue(); [EOL] } <line_num>: 325,327
public void setValue(int value) { [EOL]     super.setValue(value); [EOL] } <line_num>: 329,331
