public TestMutableDateTime_Adds(String name) { [EOL]     super(name); [EOL] } <line_num>: 74,76
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 66,68
public static TestSuite suite() { [EOL]     return new TestSuite(TestMutableDateTime_Adds.class); [EOL] } <line_num>: 70,72
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 78,86
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 88,96
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 99,103
public void testAdd_long1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(123456L); [EOL]     assertEquals(TEST_TIME1 + 123456L, test.getMillis()); [EOL]     assertEquals(ISOChronology.getInstance(), test.getChronology()); [EOL] } <line_num>: 106,111
public void testAdd_RD1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(new Duration(123456L)); [EOL]     assertEquals(TEST_TIME1 + 123456L, test.getMillis()); [EOL] } <line_num>: 114,118
public void testAdd_RD2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadableDuration) null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 120,124
public void testAdd_RD_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(new Duration(123456L), -2); [EOL]     assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis()); [EOL] } <line_num>: 127,131
public void testAdd_RD_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadableDuration) null, 1); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 133,137
public void testAdd_RP1() { [EOL]     Period d = new Period(1, 1, 0, 1, 1, 1, 1, 1); [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     assertEquals("2002-06-09T05:06:07.008+01:00", test.toString()); [EOL]     test.add(d); [EOL]     assertEquals("2003-07-10T06:07:08.009+01:00", test.toString()); [EOL] } <line_num>: 140,146
public void testAdd_RP2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadablePeriod) null); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 148,152
public void testAdd_RP_int1() { [EOL]     Period d = new Period(0, 0, 0, 0, 0, 0, 1, 2); [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(d, -2); [EOL]     assertEquals(TEST_TIME1 - (2L * 1002L), test.getMillis()); [EOL] } <line_num>: 155,160
public void testAdd_RP_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add((ReadablePeriod) null, 1); [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 162,166
public void testAdd_DurationFieldType_int1() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     test.add(DurationFieldType.years(), 8); [EOL]     assertEquals(2010, test.getYear()); [EOL] } <line_num>: 169,173
public void testAdd_DurationFieldType_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.add(DurationFieldType.years(), 0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 175,180
public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.add(DurationFieldType.years(), 0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 182,188
public void testAdd_DurationFieldType_int2() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.add((DurationFieldType) null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 190,197
public void testAdd_DurationFieldType_int3() { [EOL]     MutableDateTime test = new MutableDateTime(TEST_TIME1); [EOL]     try { [EOL]         test.add((DurationFieldType) null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(TEST_TIME1, test.getMillis()); [EOL] } <line_num>: 199,206
public void testAddYears_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addYears(8); [EOL]     assertEquals("2010-06-09T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 209,213
public void testAddYears_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addYears(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 215,220
public void testAddYears_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addYears(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 222,228
public void testAddMonths_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMonths(6); [EOL]     assertEquals("2002-12-09T05:06:07.008Z", test.toString()); [EOL] } <line_num>: 231,235
public void testAddMonths_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addMonths(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 237,242
public void testAddMonths_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addMonths(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 244,250
public void testAddDays_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addDays(17); [EOL]     assertEquals("2002-06-26T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 253,257
public void testAddDays_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addDays(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 259,264
public void testAddDays_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addDays(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 266,272
public void testAddWeekyears_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addWeekyears(-1); [EOL]     assertEquals("2001-06-10T05:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 275,279
public void testAddWeeks_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addWeeks(-21); [EOL]     assertEquals("2002-01-13T05:06:07.008Z", test.toString()); [EOL] } <line_num>: 282,286
public void testAddWeeks_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addWeeks(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 288,293
public void testAddWeeks_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addWeeks(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 295,301
public void testAddHours_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addHours(13); [EOL]     assertEquals("2002-06-09T18:06:07.008+01:00", test.toString()); [EOL] } <line_num>: 304,308
public void testAddHours_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addHours(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 310,315
public void testAddHours_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addHours(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 317,323
public void testAddMinutes_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMinutes(13); [EOL]     assertEquals("2002-06-09T05:19:07.008+01:00", test.toString()); [EOL] } <line_num>: 326,330
public void testAddMinutes_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addMinutes(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 332,337
public void testAddMinutes_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addMinutes(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 339,345
public void testAddSeconds_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addSeconds(13); [EOL]     assertEquals("2002-06-09T05:06:20.008+01:00", test.toString()); [EOL] } <line_num>: 348,352
public void testAddSeconds_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addSeconds(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 354,359
public void testAddSeconds_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addSeconds(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 361,367
public void testAddMillis_int1() { [EOL]     MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8); [EOL]     test.addMillis(13); [EOL]     assertEquals("2002-06-09T05:06:07.021+01:00", test.toString()); [EOL] } <line_num>: 370,374
public void testAddMillis_int_dstOverlapSummer_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL]     test.addMillis(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+02:00", test.toString()); [EOL] } <line_num>: 376,381
public void testAddMillis_int_dstOverlapWinter_addZero() { [EOL]     MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin")); [EOL]     test.addHours(1); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL]     test.addMillis(0); [EOL]     assertEquals("2011-10-30T02:30:00.000+01:00", test.toString()); [EOL] } <line_num>: 383,389
