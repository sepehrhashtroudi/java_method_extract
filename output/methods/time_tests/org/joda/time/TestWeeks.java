public TestWeeks(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 36,38
public static TestSuite suite() { [EOL]     return new TestSuite(TestWeeks.class); [EOL] } <line_num>: 40,42
protected void setUp() throws Exception { [EOL] } <line_num>: 48,49
protected void tearDown() throws Exception { [EOL] } <line_num>: 51,52
public void testConstants() { [EOL]     assertEquals(0, Weeks.ZERO.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.getWeeks()); [EOL]     assertEquals(2, Weeks.TWO.getWeeks()); [EOL]     assertEquals(3, Weeks.THREE.getWeeks()); [EOL]     assertEquals(Integer.MAX_VALUE, Weeks.MAX_VALUE.getWeeks()); [EOL]     assertEquals(Integer.MIN_VALUE, Weeks.MIN_VALUE.getWeeks()); [EOL] } <line_num>: 55,62
public void testFactory_weeks_int() { [EOL]     assertSame(Weeks.ZERO, Weeks.weeks(0)); [EOL]     assertSame(Weeks.ONE, Weeks.weeks(1)); [EOL]     assertSame(Weeks.TWO, Weeks.weeks(2)); [EOL]     assertSame(Weeks.THREE, Weeks.weeks(3)); [EOL]     assertSame(Weeks.MAX_VALUE, Weeks.weeks(Integer.MAX_VALUE)); [EOL]     assertSame(Weeks.MIN_VALUE, Weeks.weeks(Integer.MIN_VALUE)); [EOL]     assertEquals(-1, Weeks.weeks(-1).getWeeks()); [EOL]     assertEquals(4, Weeks.weeks(4).getWeeks()); [EOL] } <line_num>: 65,74
public void testFactory_weeksBetween_RInstant() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] } <line_num>: 77,87
@SuppressWarnings("deprecation") [EOL] public void testFactory_weeksBetween_RPartial() { [EOL]     LocalDate start = new LocalDate(2006, 6, 9); [EOL]     LocalDate end1 = new LocalDate(2006, 6, 30); [EOL]     YearMonthDay end2 = new YearMonthDay(2006, 7, 21); [EOL]     assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(start, start).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks()); [EOL]     assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks()); [EOL] } <line_num>: 89,100
public void testFactory_weeksIn_RInterval() { [EOL]     DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS); [EOL]     DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS); [EOL]     DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS); [EOL]     assertEquals(0, Weeks.weeksIn((ReadableInterval) null).getWeeks()); [EOL]     assertEquals(3, Weeks.weeksIn(new Interval(start, end1)).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksIn(new Interval(start, start)).getWeeks()); [EOL]     assertEquals(0, Weeks.weeksIn(new Interval(end1, end1)).getWeeks()); [EOL]     assertEquals(6, Weeks.weeksIn(new Interval(start, end2)).getWeeks()); [EOL] } <line_num>: 102,112
public void testFactory_standardWeeksIn_RPeriod() { [EOL]     assertEquals(0, Weeks.standardWeeksIn((ReadablePeriod) null).getWeeks()); [EOL]     assertEquals(0, Weeks.standardWeeksIn(Period.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.standardWeeksIn(new Period(0, 0, 1, 0, 0, 0, 0, 0)).getWeeks()); [EOL]     assertEquals(123, Weeks.standardWeeksIn(Period.weeks(123)).getWeeks()); [EOL]     assertEquals(-987, Weeks.standardWeeksIn(Period.weeks(-987)).getWeeks()); [EOL]     assertEquals(1, Weeks.standardWeeksIn(Period.days(13)).getWeeks()); [EOL]     assertEquals(2, Weeks.standardWeeksIn(Period.days(14)).getWeeks()); [EOL]     assertEquals(2, Weeks.standardWeeksIn(Period.days(15)).getWeeks()); [EOL]     try { [EOL]         Weeks.standardWeeksIn(Period.months(1)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 114,129
public void testFactory_parseWeeks_String() { [EOL]     assertEquals(0, Weeks.parseWeeks((String) null).getWeeks()); [EOL]     assertEquals(0, Weeks.parseWeeks("P0W").getWeeks()); [EOL]     assertEquals(1, Weeks.parseWeeks("P1W").getWeeks()); [EOL]     assertEquals(-3, Weeks.parseWeeks("P-3W").getWeeks()); [EOL]     assertEquals(2, Weeks.parseWeeks("P0Y0M2W").getWeeks()); [EOL]     assertEquals(2, Weeks.parseWeeks("P2WT0H0M").getWeeks()); [EOL]     try { [EOL]         Weeks.parseWeeks("P1Y1D"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         Weeks.parseWeeks("P1WT1H"); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 131,150
public void testGetMethods() { [EOL]     Weeks test = Weeks.weeks(20); [EOL]     assertEquals(20, test.getWeeks()); [EOL] } <line_num>: 153,156
public void testGetFieldType() { [EOL]     Weeks test = Weeks.weeks(20); [EOL]     assertEquals(DurationFieldType.weeks(), test.getFieldType()); [EOL] } <line_num>: 158,161
public void testGetPeriodType() { [EOL]     Weeks test = Weeks.weeks(20); [EOL]     assertEquals(PeriodType.weeks(), test.getPeriodType()); [EOL] } <line_num>: 163,166
public void testIsGreaterThan() { [EOL]     assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.ONE.isGreaterThan(null)); [EOL]     assertEquals(false, Weeks.weeks(-1).isGreaterThan(null)); [EOL] } <line_num>: 169,175
public void testIsLessThan() { [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO)); [EOL]     assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE)); [EOL]     assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE)); [EOL]     assertEquals(false, Weeks.ONE.isLessThan(null)); [EOL]     assertEquals(true, Weeks.weeks(-1).isLessThan(null)); [EOL] } <line_num>: 177,183
public void testToString() { [EOL]     Weeks test = Weeks.weeks(20); [EOL]     assertEquals("P20W", test.toString()); [EOL]     test = Weeks.weeks(-20); [EOL]     assertEquals("P-20W", test.toString()); [EOL] } <line_num>: 186,192
public void testSerialization() throws Exception { [EOL]     Weeks test = Weeks.THREE; [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Weeks result = (Weeks) ois.readObject(); [EOL]     ois.close(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 195,210
public void testToStandardDays() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Days expected = Days.days(14); [EOL]     assertEquals(expected, test.toStandardDays()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardDays(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 213,224
public void testToStandardHours() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Hours expected = Hours.hours(2 * 7 * 24); [EOL]     assertEquals(expected, test.toStandardHours()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 226,237
public void testToStandardMinutes() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Minutes expected = Minutes.minutes(2 * 7 * 24 * 60); [EOL]     assertEquals(expected, test.toStandardMinutes()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 239,250
public void testToStandardSeconds() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     Seconds expected = Seconds.seconds(2 * 7 * 24 * 60 * 60); [EOL]     assertEquals(expected, test.toStandardSeconds()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 252,263
public void testToStandardDuration() { [EOL]     Weeks test = Weeks.weeks(20); [EOL]     Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK); [EOL]     assertEquals(expected, test.toStandardDuration()); [EOL]     expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK); [EOL]     assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration()); [EOL] } <line_num>: 265,272
public void testPlus_int() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks result = test2.plus(3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(5, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.plus(0).getWeeks()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.plus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 275,289
public void testPlus_Weeks() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks test3 = Weeks.weeks(3); [EOL]     Weeks result = test2.plus(test3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(3, test3.getWeeks()); [EOL]     assertEquals(5, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.plus(Weeks.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.plus((Weeks) null).getWeeks()); [EOL]     try { [EOL]         Weeks.MAX_VALUE.plus(Weeks.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 291,308
public void testMinus_int() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks result = test2.minus(3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(0).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(1); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 310,324
public void testMinus_Weeks() { [EOL]     Weeks test2 = Weeks.weeks(2); [EOL]     Weeks test3 = Weeks.weeks(3); [EOL]     Weeks result = test2.minus(test3); [EOL]     assertEquals(2, test2.getWeeks()); [EOL]     assertEquals(3, test3.getWeeks()); [EOL]     assertEquals(-1, result.getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus(Weeks.ZERO).getWeeks()); [EOL]     assertEquals(1, Weeks.ONE.minus((Weeks) null).getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.minus(Weeks.ONE); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 326,343
public void testMultipliedBy_int() { [EOL]     Weeks test = Weeks.weeks(2); [EOL]     assertEquals(6, test.multipliedBy(3).getWeeks()); [EOL]     assertEquals(2, test.getWeeks()); [EOL]     assertEquals(-6, test.multipliedBy(-3).getWeeks()); [EOL]     assertSame(test, test.multipliedBy(1)); [EOL]     Weeks halfMax = Weeks.weeks(Integer.MAX_VALUE / 2 + 1); [EOL]     try { [EOL]         halfMax.multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 345,359
public void testDividedBy_int() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(6, test.dividedBy(2).getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     assertEquals(4, test.dividedBy(3).getWeeks()); [EOL]     assertEquals(3, test.dividedBy(4).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(5).getWeeks()); [EOL]     assertEquals(2, test.dividedBy(6).getWeeks()); [EOL]     assertSame(test, test.dividedBy(1)); [EOL]     try { [EOL]         Weeks.ONE.dividedBy(0); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 361,377
public void testNegated() { [EOL]     Weeks test = Weeks.weeks(12); [EOL]     assertEquals(-12, test.negated().getWeeks()); [EOL]     assertEquals(12, test.getWeeks()); [EOL]     try { [EOL]         Weeks.MIN_VALUE.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 379,390
public void testAddToLocalDate() { [EOL]     Weeks test = Weeks.weeks(3); [EOL]     LocalDate date = new LocalDate(2006, 6, 1); [EOL]     LocalDate expected = new LocalDate(2006, 6, 22); [EOL]     assertEquals(expected, date.plus(test)); [EOL] } <line_num>: 393,398
