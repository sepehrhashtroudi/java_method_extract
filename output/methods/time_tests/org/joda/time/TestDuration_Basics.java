public TestDuration_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 80,82
public MockDuration(long value) { [EOL]     super(); [EOL]     iValue = value; [EOL] } <line_num>: 145,148
public MockMutableDuration(long duration) { [EOL]     super(duration); [EOL] } <line_num>: 816,818
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 72,74
public static TestSuite suite() { [EOL]     return new TestSuite(TestDuration_Basics.class); [EOL] } <line_num>: 76,78
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 84,92
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 94,102
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 105,109
public void testGetMillis() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = new Duration(1234567890L); [EOL]     assertEquals(1234567890L, test.getMillis()); [EOL] } <line_num>: 112,118
public void testEqualsHashCode() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test2 = new Duration(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Duration test3 = new Duration(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockDuration(123L))); [EOL] } <line_num>: 120,141
public long getMillis() { [EOL]     return iValue; [EOL] } <line_num>: 149,151
public void testCompareTo() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     assertEquals(+1, test2.compareTo(new MockDuration(123L))); [EOL]     assertEquals(0, test1.compareTo(new MockDuration(123L))); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 154,177
public void testIsEqual() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     assertEquals(false, test2.isEqual(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isEqual(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isEqual(null)); [EOL]     assertEquals(true, new Duration(0L).isEqual(null)); [EOL] } <line_num>: 179,195
public void testIsBefore() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isShorterThan(test1a)); [EOL]     assertEquals(false, test1a.isShorterThan(test1)); [EOL]     assertEquals(false, test1.isShorterThan(test1)); [EOL]     assertEquals(false, test1a.isShorterThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(true, test1.isShorterThan(test2)); [EOL]     assertEquals(false, test2.isShorterThan(test1)); [EOL]     assertEquals(false, test2.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isShorterThan(null)); [EOL]     assertEquals(false, new Duration(0L).isShorterThan(null)); [EOL] } <line_num>: 197,213
public void testIsAfter() { [EOL]     Duration test1 = new Duration(123L); [EOL]     Duration test1a = new Duration(123L); [EOL]     assertEquals(false, test1.isLongerThan(test1a)); [EOL]     assertEquals(false, test1a.isLongerThan(test1)); [EOL]     assertEquals(false, test1.isLongerThan(test1)); [EOL]     assertEquals(false, test1a.isLongerThan(test1a)); [EOL]     Duration test2 = new Duration(321L); [EOL]     assertEquals(false, test1.isLongerThan(test2)); [EOL]     assertEquals(true, test2.isLongerThan(test1)); [EOL]     assertEquals(true, test2.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(false, test1.isLongerThan(new MockDuration(123L))); [EOL]     assertEquals(true, test1.isLongerThan(null)); [EOL]     assertEquals(false, new Duration(0L).isLongerThan(null)); [EOL] } <line_num>: 215,231
public void testSerialization() throws Exception { [EOL]     Duration test = new Duration(123L); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Duration result = (Duration) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 234,249
public void testGetStandardSeconds() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(0, test.getStandardSeconds()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(0, test.getStandardSeconds()); [EOL]     test = new Duration(999L); [EOL]     assertEquals(0, test.getStandardSeconds()); [EOL]     test = new Duration(1000L); [EOL]     assertEquals(1, test.getStandardSeconds()); [EOL]     test = new Duration(1001L); [EOL]     assertEquals(1, test.getStandardSeconds()); [EOL]     test = new Duration(1999L); [EOL]     assertEquals(1, test.getStandardSeconds()); [EOL]     test = new Duration(2000L); [EOL]     assertEquals(2, test.getStandardSeconds()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(0, test.getStandardSeconds()); [EOL]     test = new Duration(-999L); [EOL]     assertEquals(0, test.getStandardSeconds()); [EOL]     test = new Duration(-1000L); [EOL]     assertEquals(-1, test.getStandardSeconds()); [EOL] } <line_num>: 252,273
public void testToString() { [EOL]     long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 845L; [EOL]     Duration test = new Duration(length); [EOL]     assertEquals("PT" + (length / 1000) + "." + (length % 1000) + "S", test.toString()); [EOL]     assertEquals("PT0S", new Duration(0L).toString()); [EOL]     assertEquals("PT10S", new Duration(10000L).toString()); [EOL]     assertEquals("PT1S", new Duration(1000L).toString()); [EOL]     assertEquals("PT12.345S", new Duration(12345L).toString()); [EOL]     assertEquals("PT-12.345S", new Duration(-12345L).toString()); [EOL]     assertEquals("PT-1.123S", new Duration(-1123L).toString()); [EOL]     assertEquals("PT-0.123S", new Duration(-123L).toString()); [EOL]     assertEquals("PT-0.012S", new Duration(-12L).toString()); [EOL]     assertEquals("PT-0.001S", new Duration(-1L).toString()); [EOL] } <line_num>: 276,293
public void testToDuration1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.toDuration(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 296,300
public void testToDuration2() { [EOL]     MockDuration test = new MockDuration(123L); [EOL]     Duration result = test.toDuration(); [EOL]     assertNotSame(test, result); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 302,307
public void testToStandardDays() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L - 1); [EOL]     assertEquals(Days.days(1), test.toStandardDays()); [EOL]     test = new Duration(2 * 24 * 60 * 60000L); [EOL]     assertEquals(Days.days(2), test.toStandardDays()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L + 1); [EOL]     assertEquals(Days.days(0), test.toStandardDays()); [EOL]     test = new Duration(-24 * 60 * 60000L); [EOL]     assertEquals(Days.days(-1), test.toStandardDays()); [EOL] } <line_num>: 310,331
public void testToStandardDays_overflow() { [EOL]     Duration test = new Duration((((long) Integer.MAX_VALUE) + 1) * 24L * 60L * 60000L); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 333,341
public void testToStandardHours() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L - 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(3600000L); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(3600000L + 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L - 1); [EOL]     assertEquals(Hours.hours(1), test.toStandardHours()); [EOL]     test = new Duration(2 * 3600000L); [EOL]     assertEquals(Hours.hours(2), test.toStandardHours()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L + 1); [EOL]     assertEquals(Hours.hours(0), test.toStandardHours()); [EOL]     test = new Duration(-3600000L); [EOL]     assertEquals(Hours.hours(-1), test.toStandardHours()); [EOL] } <line_num>: 344,365
public void testToStandardHours_overflow() { [EOL]     Duration test = new Duration(((long) Integer.MAX_VALUE) * 3600000L + 3600000L); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 367,375
public void testToStandardMinutes() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L - 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(60000L); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(60000L + 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L - 1); [EOL]     assertEquals(Minutes.minutes(1), test.toStandardMinutes()); [EOL]     test = new Duration(2 * 60000L); [EOL]     assertEquals(Minutes.minutes(2), test.toStandardMinutes()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L + 1); [EOL]     assertEquals(Minutes.minutes(0), test.toStandardMinutes()); [EOL]     test = new Duration(-60000L); [EOL]     assertEquals(Minutes.minutes(-1), test.toStandardMinutes()); [EOL] } <line_num>: 378,399
public void testToStandardMinutes_overflow() { [EOL]     Duration test = new Duration(((long) Integer.MAX_VALUE) * 60000L + 60000L); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 401,409
public void testToStandardSeconds() { [EOL]     Duration test = new Duration(0L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(1000L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1001L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(1999L); [EOL]     assertEquals(Seconds.seconds(1), test.toStandardSeconds()); [EOL]     test = new Duration(2000L); [EOL]     assertEquals(Seconds.seconds(2), test.toStandardSeconds()); [EOL]     test = new Duration(-1L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-999L); [EOL]     assertEquals(Seconds.seconds(0), test.toStandardSeconds()); [EOL]     test = new Duration(-1000L); [EOL]     assertEquals(Seconds.seconds(-1), test.toStandardSeconds()); [EOL] } <line_num>: 412,433
public void testToStandardSeconds_overflow() { [EOL]     Duration test = new Duration(((long) Integer.MAX_VALUE) * 1000L + 1000L); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 435,443
public void testToPeriod() { [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(DateTimeZone.forID("Europe/Paris")); [EOL]         long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]         Duration dur = new Duration(length); [EOL]         Period test = dur.toPeriod(); [EOL]         assertEquals(0, test.getYears()); [EOL]         assertEquals(0, test.getMonths()); [EOL]         assertEquals(0, test.getWeeks()); [EOL]         assertEquals(0, test.getDays()); [EOL]         assertEquals((450 * 24) + 5, test.getHours()); [EOL]         assertEquals(6, test.getMinutes()); [EOL]         assertEquals(7, test.getSeconds()); [EOL]         assertEquals(8, test.getMillis()); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] } <line_num>: 446,468
public void testToPeriod_fixedZone() throws Throwable { [EOL]     DateTimeZone zone = DateTimeZone.getDefault(); [EOL]     try { [EOL]         DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2)); [EOL]         long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]         Duration dur = new Duration(length); [EOL]         Period test = dur.toPeriod(); [EOL]         assertEquals(0, test.getYears()); [EOL]         assertEquals(0, test.getMonths()); [EOL]         assertEquals(0, test.getWeeks()); [EOL]         assertEquals(0, test.getDays()); [EOL]         assertEquals((450 * 24) + 5, test.getHours()); [EOL]         assertEquals(6, test.getMinutes()); [EOL]         assertEquals(7, test.getSeconds()); [EOL]         assertEquals(8, test.getMillis()); [EOL]     } finally { [EOL]         DateTimeZone.setDefault(zone); [EOL]     } [EOL] } <line_num>: 470,492
public void testToPeriod_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(test, PeriodType.standard().withMillisRemoved()), result); [EOL]     assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved()), result); [EOL] } <line_num>: 495,505
public void testToPeriod_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result); [EOL] } <line_num>: 508,518
public void testToPeriod_PeriodType_Chronology() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()); [EOL]     assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL]     assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result); [EOL] } <line_num>: 521,531
public void testToPeriodFrom() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodFrom(dt); [EOL]     assertEquals(new Period(dt, test), result); [EOL] } <line_num>: 534,544
public void testToPeriodFrom_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodFrom(dt, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(dt, test, PeriodType.standard().withMillisRemoved()), result); [EOL] } <line_num>: 547,557
public void testToPeriodTo() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodTo(dt); [EOL]     assertEquals(new Period(test, dt), result); [EOL] } <line_num>: 560,570
public void testToPeriodTo_PeriodType() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Period result = test.toPeriodTo(dt, PeriodType.standard().withMillisRemoved()); [EOL]     assertEquals(new Period(test, dt, PeriodType.standard().withMillisRemoved()), result); [EOL] } <line_num>: 573,583
public void testToIntervalFrom() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval result = test.toIntervalFrom(dt); [EOL]     assertEquals(new Interval(dt, test), result); [EOL] } <line_num>: 586,596
public void testToIntervalTo() { [EOL]     long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L; [EOL]     Duration test = new Duration(length); [EOL]     DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     Interval result = test.toIntervalTo(dt); [EOL]     assertEquals(new Interval(test, dt), result); [EOL] } <line_num>: 599,609
public void testWithMillis1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withMillis(123L); [EOL]     assertSame(test, result); [EOL] } <line_num>: 612,616
public void testWithMillis2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withMillis(1234567890L); [EOL]     assertEquals(1234567890L, result.getMillis()); [EOL] } <line_num>: 618,622
public void testWithDurationAdded_long_int1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(8000L, 1); [EOL]     assertEquals(8123L, result.getMillis()); [EOL] } <line_num>: 625,629
public void testWithDurationAdded_long_int2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(8000L, 2); [EOL]     assertEquals(16123L, result.getMillis()); [EOL] } <line_num>: 631,635
public void testWithDurationAdded_long_int3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(8000L, -1); [EOL]     assertEquals((123L - 8000L), result.getMillis()); [EOL] } <line_num>: 637,641
public void testWithDurationAdded_long_int4() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(0L, 1); [EOL]     assertSame(test, result); [EOL] } <line_num>: 643,647
public void testWithDurationAdded_long_int5() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(8000L, 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 649,653
public void testPlus_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(8000L); [EOL]     assertEquals(8123L, result.getMillis()); [EOL] } <line_num>: 656,660
public void testPlus_long2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(0L); [EOL]     assertSame(test, result); [EOL] } <line_num>: 662,666
public void testMinus_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(8000L); [EOL]     assertEquals(123L - 8000L, result.getMillis()); [EOL] } <line_num>: 669,673
public void testMinus_long2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(0L); [EOL]     assertSame(test, result); [EOL] } <line_num>: 675,679
public void testMultipliedBy_long1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.multipliedBy(2L); [EOL]     assertEquals(246L, result.getMillis()); [EOL] } <line_num>: 682,686
public void testMultipliedBy_long2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.multipliedBy(1L); [EOL]     assertSame(test, result); [EOL] } <line_num>: 688,692
public void testDividedBy_long1() { [EOL]     Duration test = new Duration(246L); [EOL]     Duration result = test.dividedBy(2L); [EOL]     assertEquals(123L, result.getMillis()); [EOL] } <line_num>: 695,699
public void testDividedBy_long2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.dividedBy(1L); [EOL]     assertSame(test, result); [EOL] } <line_num>: 701,705
public void testNegated_long1() { [EOL]     Duration test = new Duration(246L); [EOL]     Duration result = test.negated(); [EOL]     assertEquals(-246L, result.getMillis()); [EOL] } <line_num>: 708,712
public void testNegated_long2() { [EOL]     Duration test = new Duration(-246L); [EOL]     Duration result = test.negated(); [EOL]     assertEquals(246L, result.getMillis()); [EOL] } <line_num>: 714,718
public void testNegated_long3() { [EOL]     Duration test = new Duration(Long.MIN_VALUE); [EOL]     try { [EOL]         test.negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException e) { [EOL]     } [EOL] } <line_num>: 720,728
public void testWithDurationAdded_RD_int1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(8000L), 1); [EOL]     assertEquals(8123L, result.getMillis()); [EOL] } <line_num>: 731,735
public void testWithDurationAdded_RD_int2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(8000L), 2); [EOL]     assertEquals(16123L, result.getMillis()); [EOL] } <line_num>: 737,741
public void testWithDurationAdded_RD_int3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(8000L), -1); [EOL]     assertEquals((123L - 8000L), result.getMillis()); [EOL] } <line_num>: 743,747
public void testWithDurationAdded_RD_int4() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(0L), 1); [EOL]     assertSame(test, result); [EOL] } <line_num>: 749,753
public void testWithDurationAdded_RD_int5() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(new Duration(8000L), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 755,759
public void testWithDurationAdded_RD_int6() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.withDurationAdded(null, 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 761,765
public void testPlus_RD1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(new Duration(8000L)); [EOL]     assertEquals(8123L, result.getMillis()); [EOL] } <line_num>: 768,772
public void testPlus_RD2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(new Duration(0L)); [EOL]     assertSame(test, result); [EOL] } <line_num>: 774,778
public void testPlus_RD3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.plus(null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 780,784
public void testMinus_RD1() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(new Duration(8000L)); [EOL]     assertEquals(123L - 8000L, result.getMillis()); [EOL] } <line_num>: 787,791
public void testMinus_RD2() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(new Duration(0L)); [EOL]     assertSame(test, result); [EOL] } <line_num>: 793,797
public void testMinus_RD3() { [EOL]     Duration test = new Duration(123L); [EOL]     Duration result = test.minus(null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 799,803
public void testMutableDuration() { [EOL]     MockMutableDuration test = new MockMutableDuration(123L); [EOL]     assertEquals(123L, test.getMillis()); [EOL]     test.setMillis(2345L); [EOL]     assertEquals(2345L, test.getMillis()); [EOL] } <line_num>: 806,813
public void setMillis(long duration) { [EOL]     super.setMillis(duration); [EOL] } <line_num>: 819,821
