public TestPeriod_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 83,85
public MockPeriod(long value) { [EOL]     super(value, null, null); [EOL] } <line_num>: 221,223
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 75,77
public static TestSuite suite() { [EOL]     return new TestSuite(TestPeriod_Basics.class); [EOL] } <line_num>: 79,81
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 87,95
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 97,105
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 108,112
public void testGetPeriodType() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(PeriodType.standard(), test.getPeriodType()); [EOL] } <line_num>: 115,118
public void testGetMethods() { [EOL]     Period test = new Period(0L); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL] } <line_num>: 120,130
public void testValueIndexMethods() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(6, test.size()); [EOL]     assertEquals(1, test.getValue(0)); [EOL]     assertEquals(4, test.getValue(1)); [EOL]     assertEquals(5, test.getValue(2)); [EOL]     assertEquals(6, test.getValue(3)); [EOL]     assertEquals(7, test.getValue(4)); [EOL]     assertEquals(8, test.getValue(5)); [EOL]     assertEquals(true, Arrays.equals(new int[] { 1, 4, 5, 6, 7, 8 }, test.getValues())); [EOL] } <line_num>: 132,142
public void testTypeIndexMethods() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(6, test.size()); [EOL]     assertEquals(DurationFieldType.years(), test.getFieldType(0)); [EOL]     assertEquals(DurationFieldType.days(), test.getFieldType(1)); [EOL]     assertEquals(DurationFieldType.hours(), test.getFieldType(2)); [EOL]     assertEquals(DurationFieldType.minutes(), test.getFieldType(3)); [EOL]     assertEquals(DurationFieldType.seconds(), test.getFieldType(4)); [EOL]     assertEquals(DurationFieldType.millis(), test.getFieldType(5)); [EOL]     assertEquals(true, Arrays.equals(new DurationFieldType[] { DurationFieldType.years(), DurationFieldType.days(), DurationFieldType.hours(), DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis() }, test.getFieldTypes())); [EOL] } <line_num>: 144,157
public void testIsSupported() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.years())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.months())); [EOL]     assertEquals(false, test.isSupported(DurationFieldType.weeks())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.days())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.hours())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.minutes())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.seconds())); [EOL]     assertEquals(true, test.isSupported(DurationFieldType.millis())); [EOL] } <line_num>: 159,169
public void testIndexOf() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(0, test.indexOf(DurationFieldType.years())); [EOL]     assertEquals(-1, test.indexOf(DurationFieldType.months())); [EOL]     assertEquals(-1, test.indexOf(DurationFieldType.weeks())); [EOL]     assertEquals(1, test.indexOf(DurationFieldType.days())); [EOL]     assertEquals(2, test.indexOf(DurationFieldType.hours())); [EOL]     assertEquals(3, test.indexOf(DurationFieldType.minutes())); [EOL]     assertEquals(4, test.indexOf(DurationFieldType.seconds())); [EOL]     assertEquals(5, test.indexOf(DurationFieldType.millis())); [EOL] } <line_num>: 171,181
public void testGet() { [EOL]     Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime()); [EOL]     assertEquals(1, test.get(DurationFieldType.years())); [EOL]     assertEquals(0, test.get(DurationFieldType.months())); [EOL]     assertEquals(0, test.get(DurationFieldType.weeks())); [EOL]     assertEquals(4, test.get(DurationFieldType.days())); [EOL]     assertEquals(5, test.get(DurationFieldType.hours())); [EOL]     assertEquals(6, test.get(DurationFieldType.minutes())); [EOL]     assertEquals(7, test.get(DurationFieldType.seconds())); [EOL]     assertEquals(8, test.get(DurationFieldType.millis())); [EOL] } <line_num>: 183,193
public void testEqualsHashCode() { [EOL]     Period test1 = new Period(123L); [EOL]     Period test2 = new Period(123L); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     Period test3 = new Period(321L); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockPeriod(123L))); [EOL]     assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime()))); [EOL] } <line_num>: 195,217
public void testSerialization() throws Exception { [EOL]     Period test = new Period(123L); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Period result = (Period) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 227,242
public void testToString() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", test.toString()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("PT0S", test.toString()); [EOL]     test = new Period(12345L); [EOL]     assertEquals("PT12.345S", test.toString()); [EOL] } <line_num>: 470,479
public void testToString_PeriodFormatter() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", test.toString(PeriodFormat.getDefault())); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 0); [EOL]     assertEquals("0 milliseconds", test.toString(PeriodFormat.getDefault())); [EOL] } <line_num>: 482,488
public void testToString_nullPeriodFormatter() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals("P1Y2M3W4DT5H6M7.008S", test.toString((PeriodFormatter) null)); [EOL] } <line_num>: 490,493
public void testToPeriod() { [EOL]     Period test = new Period(123L); [EOL]     Period result = test.toPeriod(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 496,500
public void testToMutablePeriod() { [EOL]     Period test = new Period(123L); [EOL]     MutablePeriod result = test.toMutablePeriod(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 502,506
public void testToDurationFrom() { [EOL]     Period test = new Period(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L))); [EOL] } <line_num>: 514,517
public void testToDurationTo() { [EOL]     Period test = new Period(123L); [EOL]     assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L))); [EOL] } <line_num>: 519,522
public void testWithPeriodType1() { [EOL]     Period test = new Period(123L); [EOL]     Period result = test.withPeriodType(PeriodType.standard()); [EOL]     assertSame(test, result); [EOL] } <line_num>: 525,529
public void testWithPeriodType2() { [EOL]     Period test = new Period(3123L); [EOL]     Period result = test.withPeriodType(PeriodType.dayTime()); [EOL]     assertEquals(3, result.getSeconds()); [EOL]     assertEquals(123, result.getMillis()); [EOL]     assertEquals(PeriodType.dayTime(), result.getPeriodType()); [EOL] } <line_num>: 531,537
public void testWithPeriodType3() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard()); [EOL]     try { [EOL]         test.withPeriodType(PeriodType.dayTime()); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 539,545
public void testWithPeriodType4() { [EOL]     Period test = new Period(3123L); [EOL]     Period result = test.withPeriodType(null); [EOL]     assertEquals(3, result.getSeconds()); [EOL]     assertEquals(123, result.getMillis()); [EOL]     assertEquals(PeriodType.standard(), result.getPeriodType()); [EOL] } <line_num>: 547,553
public void testWithPeriodType5() { [EOL]     Period test = new Period(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.standard()); [EOL]     Period result = test.withPeriodType(PeriodType.yearMonthDayTime()); [EOL]     assertEquals(PeriodType.yearMonthDayTime(), result.getPeriodType()); [EOL]     assertEquals(1, result.getYears()); [EOL]     assertEquals(2, result.getMonths()); [EOL]     assertEquals(0, result.getWeeks()); [EOL]     assertEquals(4, result.getDays()); [EOL]     assertEquals(5, result.getHours()); [EOL]     assertEquals(6, result.getMinutes()); [EOL]     assertEquals(7, result.getSeconds()); [EOL]     assertEquals(8, result.getMillis()); [EOL] } <line_num>: 555,567
public void testWithFields1() { [EOL]     Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test2 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()); [EOL]     Period result = test1.withFields(test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 9), result); [EOL] } <line_num>: 570,578
public void testWithFields2() { [EOL]     Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test2 = null; [EOL]     Period result = test1.withFields(test2); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1); [EOL]     assertSame(test1, result); [EOL] } <line_num>: 580,587
public void testWithFields3() { [EOL]     Period test1 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()); [EOL]     Period test2 = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test1.withFields(test2); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test1); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test2); [EOL] } <line_num>: 589,598
public void testWithField1() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period result = test.withField(DurationFieldType.years(), 6); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test); [EOL]     assertEquals(new Period(6, 2, 3, 4, 5, 6, 7, 8), result); [EOL] } <line_num>: 601,607
public void testWithField2() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 609,615
public void testWithField3() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     try { [EOL]         test.withField(DurationFieldType.years(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 617,623
public void testWithField4() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     Period result = test.withField(DurationFieldType.years(), 0); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 625,629
public void testWithFieldAdded1() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test); [EOL]     assertEquals(new Period(7, 2, 3, 4, 5, 6, 7, 8), result); [EOL] } <line_num>: 632,638
public void testWithFieldAdded2() { [EOL]     Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 640,646
public void testWithFieldAdded3() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     try { [EOL]         test.withFieldAdded(DurationFieldType.years(), 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 648,654
public void testWithFieldAdded4() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time()); [EOL]     Period result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 656,660
public void testPeriodStatics() { [EOL]     Period test; [EOL]     test = Period.years(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL] } <line_num>: 663,681
public void testWith() { [EOL]     Period test; [EOL]     test = Period.years(5).withYears(1); [EOL]     assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.months(5).withMonths(1); [EOL]     assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.weeks(5).withWeeks(1); [EOL]     assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.days(5).withDays(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.hours(5).withHours(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard())); [EOL]     test = Period.minutes(5).withMinutes(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard())); [EOL]     test = Period.seconds(5).withSeconds(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard())); [EOL]     test = Period.millis(5).withMillis(1); [EOL]     assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard())); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.withYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] } <line_num>: 684,708
public void testPlus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.plus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.plus(Period.years(10)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.plus(Years.years(10)); [EOL]     assertEquals(11, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.plus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(14, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.plus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.plus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(20, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.plus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).plus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).plus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 711,782
public void testMinus() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days()); [EOL]     Period test = base.minus((ReadablePeriod) null); [EOL]     assertSame(base, test); [EOL]     test = base.minus(Period.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Years.years(10)); [EOL]     assertEquals(-9, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(4, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = base.minus(Period.days(10)); [EOL]     assertEquals(1, test.getYears()); [EOL]     assertEquals(2, test.getMonths()); [EOL]     assertEquals(3, test.getWeeks()); [EOL]     assertEquals(-6, test.getDays()); [EOL]     assertEquals(5, test.getHours()); [EOL]     assertEquals(6, test.getMinutes()); [EOL]     assertEquals(7, test.getSeconds()); [EOL]     assertEquals(8, test.getMillis()); [EOL]     test = baseDaysOnly.minus(Period.years(0)); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(10, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     test = baseDaysOnly.minus(baseDaysOnly); [EOL]     assertEquals(0, test.getYears()); [EOL]     assertEquals(0, test.getMonths()); [EOL]     assertEquals(0, test.getWeeks()); [EOL]     assertEquals(0, test.getDays()); [EOL]     assertEquals(0, test.getHours()); [EOL]     assertEquals(0, test.getMinutes()); [EOL]     assertEquals(0, test.getSeconds()); [EOL]     assertEquals(0, test.getMillis()); [EOL]     try { [EOL]         baseDaysOnly.minus(Period.years(1)); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).minus(Period.days(-1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).minus(Period.days(1)); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 785,856
public void testPlusFields() { [EOL]     Period test; [EOL]     test = Period.years(1).plusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(1).plusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(1).plusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(1).plusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(1).plusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(1).plusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(1).plusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(1).plusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.plusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] } <line_num>: 859,883
public void testPlusFieldsZero() { [EOL]     Period test, result; [EOL]     test = Period.years(1); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL]     test = Period.months(1); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL]     test = Period.weeks(1); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL]     test = Period.days(1); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL]     test = Period.hours(1); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL]     test = Period.minutes(1); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL]     test = Period.seconds(1); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL]     test = Period.millis(1); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 885,911
public void testMinusFields() { [EOL]     Period test; [EOL]     test = Period.years(3).minusYears(1); [EOL]     assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.months(3).minusMonths(1); [EOL]     assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.weeks(3).minusWeeks(1); [EOL]     assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.days(3).minusDays(1); [EOL]     assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.hours(3).minusHours(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.minutes(3).minusMinutes(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test); [EOL]     test = Period.seconds(3).minusSeconds(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test); [EOL]     test = Period.millis(3).minusMillis(1); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test); [EOL]     test = new Period(0L, PeriodType.millis()); [EOL]     try { [EOL]         test.minusYears(1); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] } <line_num>: 913,937
public void testMultipliedBy() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test = base.multipliedBy(1); [EOL]     assertSame(base, test); [EOL]     test = base.multipliedBy(0); [EOL]     assertEquals(Period.ZERO, test); [EOL]     test = base.multipliedBy(2); [EOL]     assertEquals(2, test.getYears()); [EOL]     assertEquals(4, test.getMonths()); [EOL]     assertEquals(6, test.getWeeks()); [EOL]     assertEquals(8, test.getDays()); [EOL]     assertEquals(10, test.getHours()); [EOL]     assertEquals(12, test.getMinutes()); [EOL]     assertEquals(14, test.getSeconds()); [EOL]     assertEquals(16, test.getMillis()); [EOL]     test = base.multipliedBy(3); [EOL]     assertEquals(3, test.getYears()); [EOL]     assertEquals(6, test.getMonths()); [EOL]     assertEquals(9, test.getWeeks()); [EOL]     assertEquals(12, test.getDays()); [EOL]     assertEquals(15, test.getHours()); [EOL]     assertEquals(18, test.getMinutes()); [EOL]     assertEquals(21, test.getSeconds()); [EOL]     assertEquals(24, test.getMillis()); [EOL]     test = base.multipliedBy(-4); [EOL]     assertEquals(-4, test.getYears()); [EOL]     assertEquals(-8, test.getMonths()); [EOL]     assertEquals(-12, test.getWeeks()); [EOL]     assertEquals(-16, test.getDays()); [EOL]     assertEquals(-20, test.getHours()); [EOL]     assertEquals(-24, test.getMinutes()); [EOL]     assertEquals(-28, test.getSeconds()); [EOL]     assertEquals(-32, test.getMillis()); [EOL]     try { [EOL]         Period.days(Integer.MAX_VALUE).multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).multipliedBy(2); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 940,988
public void testNegated() { [EOL]     Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8); [EOL]     Period test = Period.ZERO.negated(); [EOL]     assertEquals(Period.ZERO, test); [EOL]     test = base.negated(); [EOL]     assertEquals(-1, test.getYears()); [EOL]     assertEquals(-2, test.getMonths()); [EOL]     assertEquals(-3, test.getWeeks()); [EOL]     assertEquals(-4, test.getDays()); [EOL]     assertEquals(-5, test.getHours()); [EOL]     assertEquals(-6, test.getMinutes()); [EOL]     assertEquals(-7, test.getSeconds()); [EOL]     assertEquals(-8, test.getMillis()); [EOL]     test = Period.days(Integer.MAX_VALUE).negated(); [EOL]     assertEquals(-Integer.MAX_VALUE, test.getDays()); [EOL]     try { [EOL]         Period.days(Integer.MIN_VALUE).negated(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 991,1014
public void testToStandardWeeks() { [EOL]     Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8); [EOL]     assertEquals(3, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 3, 7, 0, 0, 0, 0); [EOL]     assertEquals(4, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, 6, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks()); [EOL]     test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1017,1046
public void testToStandardWeeks_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] } <line_num>: 1048,1063
public void testToStandardWeeks_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardWeeks(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardWeeks().getWeeks()); [EOL] } <line_num>: 1065,1080
public void testToStandardDays() { [EOL]     Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8); [EOL]     assertEquals(4, test.toStandardDays().getDays()); [EOL]     test = new Period(0, 0, 1, 4, 0, 0, 0, 0); [EOL]     assertEquals(11, test.toStandardDays().getDays()); [EOL]     test = new Period(0, 0, 0, 0, 23, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardDays().getDays()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, 0, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardDays().getDays()); [EOL]     test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardDays().getDays()); [EOL]     test = new Period(0, 0, 0, Integer.MAX_VALUE, 24, 0, 0, 0); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1083,1111
public void testToStandardDays_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] } <line_num>: 1113,1128
public void testToStandardDays_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDays(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDays().getDays()); [EOL] } <line_num>: 1130,1145
public void testToStandardHours() { [EOL]     Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8); [EOL]     assertEquals(5, test.toStandardHours().getHours()); [EOL]     test = new Period(0, 0, 0, 1, 5, 0, 0, 0); [EOL]     assertEquals(29, test.toStandardHours().getHours()); [EOL]     test = new Period(0, 0, 0, 0, 0, 59, 59, 1000); [EOL]     assertEquals(1, test.toStandardHours().getHours()); [EOL]     test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 0, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardHours().getHours()); [EOL]     test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardHours().getHours()); [EOL]     test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 60, 0, 0); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1148,1175
public void testToStandardHours_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] } <line_num>: 1177,1192
public void testToStandardHours_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardHours(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardHours().getHours()); [EOL] } <line_num>: 1194,1209
public void testToStandardMinutes() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 6, 7, 8); [EOL]     assertEquals(6, test.toStandardMinutes().getMinutes()); [EOL]     test = new Period(0, 0, 0, 0, 1, 6, 0, 0); [EOL]     assertEquals(66, test.toStandardMinutes().getMinutes()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 59, 1000); [EOL]     assertEquals(1, test.toStandardMinutes().getMinutes()); [EOL]     test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 0, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardMinutes().getMinutes()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]     long intMax = Integer.MAX_VALUE; [EOL]     BigInteger expected = BigInteger.valueOf(intMax); [EOL]     expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND)); [EOL]     expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE)); [EOL]     assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL]     assertEquals(expected.longValue(), test.toStandardMinutes().getMinutes()); [EOL]     test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 60, 0); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1212,1238
public void testToStandardMinutes_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] } <line_num>: 1240,1255
public void testToStandardMinutes_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardMinutes(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardMinutes().getMinutes()); [EOL] } <line_num>: 1257,1272
public void testToStandardSeconds() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8); [EOL]     assertEquals(7, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 1, 3, 0); [EOL]     assertEquals(63, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, 1000); [EOL]     assertEquals(1, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE); [EOL]     long expected = 20; [EOL]     expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND; [EOL]     assertEquals(expected, test.toStandardSeconds().getSeconds()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1275,1298
public void testToStandardSeconds_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardSeconds().getSeconds()); [EOL] } <line_num>: 1300,1315
public void testToStandardSeconds_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardSeconds(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardSeconds().getSeconds()); [EOL] } <line_num>: 1317,1332
public void testToStandardDuration() { [EOL]     Period test = new Period(0, 0, 0, 0, 0, 0, 0, 8); [EOL]     assertEquals(8, test.toStandardDuration().getMillis()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 1, 20); [EOL]     assertEquals(1020, test.toStandardDuration().getMillis()); [EOL]     test = new Period(0, 0, 0, 0, 0, 0, 0, Integer.MAX_VALUE); [EOL]     assertEquals(Integer.MAX_VALUE, test.toStandardDuration().getMillis()); [EOL]     test = new Period(0, 0, 0, 0, 0, 10, 20, Integer.MAX_VALUE); [EOL]     long expected = Integer.MAX_VALUE; [EOL]     expected += 10L * ((long) DateTimeConstants.MILLIS_PER_MINUTE); [EOL]     expected += 20L * ((long) DateTimeConstants.MILLIS_PER_SECOND); [EOL]     assertEquals(expected, test.toStandardDuration().getMillis()); [EOL]     BigInteger intMax = BigInteger.valueOf(Integer.MAX_VALUE); [EOL]     BigInteger exp = intMax; [EOL]     exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_SECOND))); [EOL]     exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE))); [EOL]     exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR))); [EOL]     exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY))); [EOL]     exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK))); [EOL]     assertTrue(exp.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0); [EOL] } <line_num>: 1335,1365
public void testToStandardDuration_years() { [EOL]     Period test = Period.years(1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(-1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.years(0); [EOL]     assertEquals(0, test.toStandardDuration().getMillis()); [EOL] } <line_num>: 1367,1382
public void testToStandardDuration_months() { [EOL]     Period test = Period.months(1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(-1); [EOL]     try { [EOL]         test.toStandardDuration(); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL]     test = Period.months(0); [EOL]     assertEquals(0, test.toStandardDuration().getMillis()); [EOL] } <line_num>: 1384,1399
public void testNormalizedStandard_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] } <line_num>: 1402,1407
public void testNormalizedStandard_yearMonth2() { [EOL]     Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0); [EOL]     try { [EOL]         test.normalizedStandard(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1409,1415
public void testNormalizedStandard_weekDay1() { [EOL]     Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result); [EOL] } <line_num>: 1417,1422
public void testNormalizedStandard_weekDay2() { [EOL]     Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.normalizedStandard(); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1424,1430
public void testNormalizedStandard_yearMonthWeekDay() { [EOL]     Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 2, 5, 0, 0, 0, 0), result); [EOL] } <line_num>: 1432,1437
public void testNormalizedStandard_yearMonthDay() { [EOL]     Period test = new Period(1, 15, 0, 36, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(1, 15, 0, 36, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 5, 1, 0, 0, 0, 0), result); [EOL] } <line_num>: 1439,1444
public void testNormalizedStandard_negative() { [EOL]     Period test = new Period(0, 0, 0, 0, 2, -10, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(0, 0, 0, 0, 2, -10, 0, 0), test); [EOL]     assertEquals(new Period(0, 0, 0, 0, 1, 50, 0, 0), result); [EOL] } <line_num>: 1446,1451
public void testNormalizedStandard_fullNegative() { [EOL]     Period test = new Period(0, 0, 0, 0, 1, -70, 0, 0); [EOL]     Period result = test.normalizedStandard(); [EOL]     assertEquals(new Period(0, 0, 0, 0, 1, -70, 0, 0), test); [EOL]     assertEquals(new Period(0, 0, 0, 0, 0, -10, 0, 0), result); [EOL] } <line_num>: 1453,1458
public void testNormalizedStandard_periodType_yearMonth1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard((PeriodType) null); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result); [EOL] } <line_num>: 1461,1466
public void testNormalizedStandard_periodType_yearMonth2() { [EOL]     Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0); [EOL]     try { [EOL]         test.normalizedStandard((PeriodType) null); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1468,1474
public void testNormalizedStandard_periodType_yearMonth3() { [EOL]     Period test = new Period(1, 15, 3, 4, 0, 0, 0, 0); [EOL]     try { [EOL]         test.normalizedStandard(PeriodType.dayTime()); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] } <line_num>: 1476,1482
public void testNormalizedStandard_periodType_weekDay1() { [EOL]     Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard((PeriodType) null); [EOL]     assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result); [EOL] } <line_num>: 1484,1489
public void testNormalizedStandard_periodType_weekDay2() { [EOL]     Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0); [EOL]     try { [EOL]         test.normalizedStandard((PeriodType) null); [EOL]         fail(); [EOL]     } catch (ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1491,1497
public void testNormalizedStandard_periodType_weekDay3() { [EOL]     Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(PeriodType.dayTime()); [EOL]     assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(0, 0, 0, 19, 0, 0, 0, 0, PeriodType.dayTime()), result); [EOL] } <line_num>: 1499,1504
public void testNormalizedStandard_periodType_yearMonthWeekDay() { [EOL]     Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(PeriodType.yearMonthDayTime()); [EOL]     assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 19, 0, 0, 0, 0, PeriodType.yearMonthDayTime()), result); [EOL] } <line_num>: 1506,1511
public void testNormalizedStandard_periodType_yearMonthDay() { [EOL]     Period test = new Period(1, 15, 0, 36, 27, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(PeriodType.yearMonthDayTime()); [EOL]     assertEquals(new Period(1, 15, 0, 36, 27, 0, 0, 0), test); [EOL]     assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result); [EOL] } <line_num>: 1513,1518
public void testNormalizedStandard_periodType_months1() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(PeriodType.months()); [EOL]     assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result); [EOL] } <line_num>: 1520,1525
public void testNormalizedStandard_periodType_months2() { [EOL]     Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(PeriodType.months()); [EOL]     assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result); [EOL] } <line_num>: 1527,1532
public void testNormalizedStandard_periodType_months3() { [EOL]     Period test = new Period(0, 4, 0, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(PeriodType.months()); [EOL]     assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0, PeriodType.months()), result); [EOL] } <line_num>: 1534,1539
public void testNormalizedStandard_periodType_years() { [EOL]     Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0); [EOL]     try { [EOL]         test.normalizedStandard(PeriodType.years()); [EOL]         fail(); [EOL]     } catch (UnsupportedOperationException ex) { [EOL]     } [EOL] } <line_num>: 1541,1549
public void testNormalizedStandard_periodType_monthsWeeks() { [EOL]     PeriodType type = PeriodType.forFields(new DurationFieldType[] { DurationFieldType.months(), DurationFieldType.weeks(), DurationFieldType.days() }); [EOL]     Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0); [EOL]     Period result = test.normalizedStandard(type); [EOL]     assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test); [EOL]     assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result); [EOL] } <line_num>: 1551,1560
