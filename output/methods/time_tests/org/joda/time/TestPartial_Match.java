public TestPartial_Match(String name) { [EOL]     super(name); [EOL] } <line_num>: 78,80
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 70,72
public static TestSuite suite() { [EOL]     return new TestSuite(TestPartial_Match.class); [EOL] } <line_num>: 74,76
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL] } <line_num>: 82,86
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL] } <line_num>: 88,92
public void testIsMatch_Instant() { [EOL]     Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2); [EOL]     DateTime instant = new DateTime(2005, 7, 5, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 4, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 6, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 12, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 19, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 7, 26, 0, 0, 0, 0); [EOL]     assertEquals(true, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 8, 2, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2006, 7, 5, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL]     instant = new DateTime(2005, 6, 5, 0, 0, 0, 0); [EOL]     assertEquals(false, test.isMatch(instant)); [EOL] } <line_num>: 95,124
public void testIsMatch_Partial() { [EOL]     Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2); [EOL]     LocalDate partial = new LocalDate(2005, 7, 5); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 4); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 6); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 12); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 19); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 7, 26); [EOL]     assertEquals(true, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 8, 2); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2006, 7, 5); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     partial = new LocalDate(2005, 6, 5); [EOL]     assertEquals(false, test.isMatch(partial)); [EOL]     try { [EOL]         test.isMatch((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 127,161
private Partial createYMDwPartial(Chronology chrono, int year, int month, int dow) { [EOL]     return new Partial(new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfWeek() }, new int[] { year, month, dow }, chrono); [EOL] } <line_num>: 164,172
