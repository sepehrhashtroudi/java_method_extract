public TestSerialization(String name) { [EOL]     super(name); [EOL] } <line_num>: 96,98
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 88,90
public static TestSuite suite() { [EOL]     return new TestSuite(TestSerialization.class); [EOL] } <line_num>: 92,94
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 100,108
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 110,118
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 121,125
public void testSerializedInstant() throws Exception { [EOL]     Instant test = new Instant(); [EOL]     loadAndCompare(test, "Instant", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 128,132
public void testSerializedDateTime() throws Exception { [EOL]     DateTime test = new DateTime(); [EOL]     loadAndCompare(test, "DateTime", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 134,138
public void testSerializedDateTimeProperty() throws Exception { [EOL]     DateTime.Property test = new DateTime().hourOfDay(); [EOL]     loadAndCompare(test, "DateTimeProperty", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 140,144
public void testSerializedMutableDateTime() throws Exception { [EOL]     MutableDateTime test = new MutableDateTime(); [EOL]     loadAndCompare(test, "MutableDateTime", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 146,150
public void testSerializedMutableDateTimeProperty() throws Exception { [EOL]     MutableDateTime.Property test = new MutableDateTime().hourOfDay(); [EOL]     loadAndCompare(test, "MutableDateTimeProperty", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 152,156
@SuppressWarnings("deprecation") [EOL] public void testSerializedDateMidnight() throws Exception { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     loadAndCompare(test, "DateMidnight", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 158,163
@SuppressWarnings("deprecation") [EOL] public void testSerializedDateMidnightProperty() throws Exception { [EOL]     DateMidnight.Property test = new DateMidnight().monthOfYear(); [EOL]     loadAndCompare(test, "DateMidnightProperty", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 165,170
public void testSerializedLocalDate() throws Exception { [EOL]     LocalDate test = new LocalDate(); [EOL]     loadAndCompare(test, "LocalDate", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 172,176
public void testSerializedLocalDateBuddhist() throws Exception { [EOL]     LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC()); [EOL]     loadAndCompare(test, "LocalDateBuddhist", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 178,182
public void testSerializedLocalTime() throws Exception { [EOL]     LocalTime test = new LocalTime(); [EOL]     loadAndCompare(test, "LocalTime", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 184,188
public void testSerializedLocalDateTime() throws Exception { [EOL]     LocalDateTime test = new LocalDateTime(); [EOL]     loadAndCompare(test, "LocalDateTime", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 190,194
@SuppressWarnings("deprecation") [EOL] public void testSerializedYearMonthDay() throws Exception { [EOL]     YearMonthDay test = new YearMonthDay(); [EOL]     loadAndCompare(test, "YearMonthDay", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 196,201
@SuppressWarnings("deprecation") [EOL] public void testSerializedTimeOfDay() throws Exception { [EOL]     TimeOfDay test = new TimeOfDay(); [EOL]     loadAndCompare(test, "TimeOfDay", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 203,208
public void testSerializedDateTimeZoneUTC() throws Exception { [EOL]     DateTimeZone test = DateTimeZone.UTC; [EOL]     loadAndCompare(test, "DateTimeZoneUTC", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 210,214
public void testSerializedDateTimeZone() throws Exception { [EOL]     DateTimeZone test = DateTimeZone.forID("Europe/Paris"); [EOL]     loadAndCompare(test, "DateTimeZone", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 216,222
public void testDuration() throws Exception { [EOL]     Duration test = Duration.millis(12345); [EOL]     loadAndCompare(test, "Duration", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 224,228
public void testSerializedCopticChronology() throws Exception { [EOL]     CopticChronology test = CopticChronology.getInstance(LONDON); [EOL]     loadAndCompare(test, "CopticChronology", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 230,234
public void testSerializedISOChronology() throws Exception { [EOL]     ISOChronology test = ISOChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "ISOChronology", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 236,240
public void testSerializedGJChronology() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(TOKYO); [EOL]     loadAndCompare(test, "GJChronology", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 242,246
public void testSerializedGJChronologyChangedInternals() throws Exception { [EOL]     GJChronology test = GJChronology.getInstance(PARIS, 123L, 2); [EOL]     loadAndCompare(test, "GJChronologyChangedInternals", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 248,252
public void testSerializedGregorianChronology() throws Exception { [EOL]     GregorianChronology test = GregorianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "GregorianChronology", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 254,258
public void testSerializedJulianChronology() throws Exception { [EOL]     JulianChronology test = JulianChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "JulianChronology", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 260,264
public void testSerializedBuddhistChronology() throws Exception { [EOL]     BuddhistChronology test = BuddhistChronology.getInstance(PARIS); [EOL]     loadAndCompare(test, "BuddhistChronology", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 266,270
public void testSerializedPeriodType() throws Exception { [EOL]     PeriodType test = PeriodType.dayTime(); [EOL]     loadAndCompare(test, "PeriodType", false); [EOL]     inlineCompare(test, false); [EOL] } <line_num>: 272,276
public void testSerializedDateTimeFieldType() throws Exception { [EOL]     DateTimeFieldType test = DateTimeFieldType.clockhourOfDay(); [EOL]     loadAndCompare(test, "DateTimeFieldType", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 278,282
public void testSerializedUnsupportedDateTimeField() throws Exception { [EOL]     UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), UnsupportedDurationField.getInstance(DurationFieldType.years())); [EOL]     loadAndCompare(test, "UnsupportedDateTimeField", true); [EOL]     inlineCompare(test, true); [EOL] } <line_num>: 284,290
private void loadAndCompare(Serializable test, String filename, boolean same) throws Exception { [EOL]     FileInputStream fis = new FileInputStream("src/test/resources/" + filename + ".dat"); [EOL]     ObjectInputStream ois = new ObjectInputStream(fis); [EOL]     Object obj = ois.readObject(); [EOL]     ois.close(); [EOL]     if (same) { [EOL]         assertSame(test, obj); [EOL]     } else { [EOL]         assertEquals(test, obj); [EOL]     } [EOL] } <line_num>: 292,315
public void inlineCompare(Serializable test, boolean same) throws Exception { [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray()); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     Object obj = ois.readObject(); [EOL]     ois.close(); [EOL]     if (same) { [EOL]         assertSame(test, obj); [EOL]     } else { [EOL]         assertEquals(test, obj); [EOL]     } [EOL] } <line_num>: 317,333
