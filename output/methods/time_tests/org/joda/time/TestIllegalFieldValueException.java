public TestIllegalFieldValueException(String name) { [EOL]     super(name); [EOL] } <line_num>: 41,43
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 33,35
public static TestSuite suite() { [EOL]     return new TestSuite(TestIllegalFieldValueException.class); [EOL] } <line_num>: 37,39
public void testVerifyValueBounds() { [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(new Integer(31), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(27), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("27", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(0), e.getLowerBound()); [EOL]         assertEquals(new Integer(23), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         FieldUtils.verifyValueBounds("foo", 1, 2, 3); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(null, e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("foo", e.getFieldName()); [EOL]         assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(2), e.getLowerBound()); [EOL]         assertEquals(new Integer(3), e.getUpperBound()); [EOL]     } [EOL] } <line_num>: 45,87
public void testSkipDateTimeField() { [EOL]     DateTimeField field = new SkipDateTimeField(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970); [EOL]     try { [EOL]         field.set(0, 1970); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(1970), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("1970", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] } <line_num>: 89,105
public void testSetText() { [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("null", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalStringValue()); [EOL]         assertEquals("nineteen seventy", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("era", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("long ago", e.getIllegalStringValue()); [EOL]         assertEquals("long ago", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("spring", e.getIllegalStringValue()); [EOL]         assertEquals("spring", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfWeek", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("yesterday", e.getIllegalStringValue()); [EOL]         assertEquals("yesterday", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("halfdayOfDay", e.getFieldName()); [EOL]         assertEquals(null, e.getIllegalNumberValue()); [EOL]         assertEquals("morning", e.getIllegalStringValue()); [EOL]         assertEquals("morning", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] } <line_num>: 107,191
public void testZoneTransition() { [EOL]     DateTime dt = new DateTime(2005, 4, 3, 1, 0, 0, 0, DateTimeZone.forID("America/Los_Angeles")); [EOL]     try { [EOL]         dt.hourOfDay().setCopy(2); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("hourOfDay", e.getFieldName()); [EOL]         assertEquals(new Integer(2), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("2", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] } <line_num>: 193,209
public void testJulianYearZero() { [EOL]     DateTime dt = new DateTime(JulianChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.year().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("year", e.getFieldName()); [EOL]         assertEquals(new Integer(0), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("0", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] } <line_num>: 211,226
public void testGJCutover() { [EOL]     DateTime dt = new DateTime("1582-10-04", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(5); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("5", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     dt = new DateTime("1582-10-15", GJChronology.getInstanceUTC()); [EOL]     try { [EOL]         dt.dayOfMonth().setCopy(14); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(14), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("14", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL] } <line_num>: 228,258
@SuppressWarnings("deprecation") [EOL] public void testReadablePartialValidate() { [EOL]     try { [EOL]         new YearMonthDay(1970, -5, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(-5), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("-5", e.getIllegalValueAsString()); [EOL]         assertEquals(new Integer(1), e.getLowerBound()); [EOL]         assertEquals(null, e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 500, 1); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("monthOfYear", e.getFieldName()); [EOL]         assertEquals(new Integer(500), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("500", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(12), e.getUpperBound()); [EOL]     } [EOL]     try { [EOL]         new YearMonthDay(1970, 2, 30); [EOL]         fail(); [EOL]     } catch (IllegalFieldValueException e) { [EOL]         assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType()); [EOL]         assertEquals(null, e.getDurationFieldType()); [EOL]         assertEquals("dayOfMonth", e.getFieldName()); [EOL]         assertEquals(new Integer(30), e.getIllegalNumberValue()); [EOL]         assertEquals(null, e.getIllegalStringValue()); [EOL]         assertEquals("30", e.getIllegalValueAsString()); [EOL]         assertEquals(null, e.getLowerBound()); [EOL]         assertEquals(new Integer(28), e.getUpperBound()); [EOL]     } [EOL] } <line_num>: 260,303
public void testOtherConstructors() { [EOL]     IllegalFieldValueException e = new IllegalFieldValueException(DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3)); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.days(), e.getDurationFieldType()); [EOL]     assertEquals("days", e.getFieldName()); [EOL]     assertEquals(new Integer(1), e.getIllegalNumberValue()); [EOL]     assertEquals(null, e.getIllegalStringValue()); [EOL]     assertEquals("1", e.getIllegalValueAsString()); [EOL]     assertEquals(new Integer(2), e.getLowerBound()); [EOL]     assertEquals(new Integer(3), e.getUpperBound()); [EOL]     e = new IllegalFieldValueException(DurationFieldType.months(), "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(DurationFieldType.months(), e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL]     e = new IllegalFieldValueException("months", "five"); [EOL]     assertEquals(null, e.getDateTimeFieldType()); [EOL]     assertEquals(null, e.getDurationFieldType()); [EOL]     assertEquals("months", e.getFieldName()); [EOL]     assertEquals(null, e.getIllegalNumberValue()); [EOL]     assertEquals("five", e.getIllegalStringValue()); [EOL]     assertEquals("five", e.getIllegalValueAsString()); [EOL]     assertEquals(null, e.getLowerBound()); [EOL]     assertEquals(null, e.getUpperBound()); [EOL] } <line_num>: 306,337
