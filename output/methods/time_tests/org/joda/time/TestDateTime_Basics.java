public TestDateTime_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 105,107
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 97,99
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTime_Basics.class); [EOL] } <line_num>: 101,103
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 109,117
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 119,127
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString()); [EOL] } <line_num>: 130,134
public void testGet_DateTimeField() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(1, test.get(ISO_DEFAULT.era())); [EOL]     assertEquals(20, test.get(ISO_DEFAULT.centuryOfEra())); [EOL]     assertEquals(2, test.get(ISO_DEFAULT.yearOfCentury())); [EOL]     assertEquals(2002, test.get(ISO_DEFAULT.yearOfEra())); [EOL]     assertEquals(2002, test.get(ISO_DEFAULT.year())); [EOL]     assertEquals(6, test.get(ISO_DEFAULT.monthOfYear())); [EOL]     assertEquals(9, test.get(ISO_DEFAULT.dayOfMonth())); [EOL]     assertEquals(2002, test.get(ISO_DEFAULT.weekyear())); [EOL]     assertEquals(23, test.get(ISO_DEFAULT.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(ISO_DEFAULT.dayOfWeek())); [EOL]     assertEquals(160, test.get(ISO_DEFAULT.dayOfYear())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.halfdayOfDay())); [EOL]     assertEquals(1, test.get(ISO_DEFAULT.hourOfHalfday())); [EOL]     assertEquals(1, test.get(ISO_DEFAULT.clockhourOfDay())); [EOL]     assertEquals(1, test.get(ISO_DEFAULT.clockhourOfHalfday())); [EOL]     assertEquals(1, test.get(ISO_DEFAULT.hourOfDay())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.minuteOfHour())); [EOL]     assertEquals(60, test.get(ISO_DEFAULT.minuteOfDay())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.secondOfMinute())); [EOL]     assertEquals(60 * 60, test.get(ISO_DEFAULT.secondOfDay())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.millisOfSecond())); [EOL]     assertEquals(60 * 60 * 1000, test.get(ISO_DEFAULT.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeField) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 137,165
public void testGet_DateTimeFieldType() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(1, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(1, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(1, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(1, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(60, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(60 * 60, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(60 * 60 * 1000, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 167,195
public void testIsSupported_DateTimeFieldType() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.era())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.year())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay())); [EOL]     assertEquals(false, test.isSupported(null)); [EOL] } <line_num>: 197,222
public void testGetters() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(ISO_DEFAULT, test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW, test.getMillis()); [EOL]     assertEquals(1, test.getEra()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(2, test.getYearOfCentury()); [EOL]     assertEquals(2002, test.getYearOfEra()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(2002, test.getWeekyear()); [EOL]     assertEquals(23, test.getWeekOfWeekyear()); [EOL]     assertEquals(7, test.getDayOfWeek()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(1, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(60, test.getMinuteOfDay()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(60 * 60, test.getSecondOfDay()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(60 * 60 * 1000, test.getMillisOfDay()); [EOL] } <line_num>: 225,250
public void testWithers() { [EOL]     DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40); [EOL]     check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40); [EOL]     check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40); [EOL]     check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40); [EOL]     check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6); [EOL]     check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 252,279
public void testEqualsHashCode() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test2 = new DateTime(TEST_TIME1); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     DateTime test3 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(new DateTime(TEST_TIME1, GREGORIAN_DEFAULT))); [EOL]     assertEquals(true, new DateTime(TEST_TIME1, new MockEqualsChronology()).equals(new DateTime(TEST_TIME1, new MockEqualsChronology()))); [EOL]     assertEquals(false, new DateTime(TEST_TIME1, new MockEqualsChronology()).equals(new DateTime(TEST_TIME1, ISO_DEFAULT))); [EOL] } <line_num>: 282,306
public String toString() { [EOL]     return null; [EOL] } <line_num>: 309,311
public long getMillis() { [EOL]     return TEST_TIME1; [EOL] } <line_num>: 312,314
public Chronology getChronology() { [EOL]     return ISO_DEFAULT; [EOL] } <line_num>: 315,317
public boolean equals(Object obj) { [EOL]     return obj instanceof MockEqualsChronology; [EOL] } <line_num>: 322,324
public DateTimeZone getZone() { [EOL]     return null; [EOL] } <line_num>: 325,327
public Chronology withUTC() { [EOL]     return this; [EOL] } <line_num>: 328,330
public Chronology withZone(DateTimeZone zone) { [EOL]     return this; [EOL] } <line_num>: 331,333
public String toString() { [EOL]     return ""; [EOL] } <line_num>: 334,336
public void testCompareTo() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(0, test3.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(new MockInstant())); [EOL]     assertEquals(0, test1.compareTo(new MockInstant())); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 339,367
public void testIsEqual_long() { [EOL]     assertEquals(false, new DateTime(TEST_TIME1).isEqual(TEST_TIME2)); [EOL]     assertEquals(true, new DateTime(TEST_TIME1).isEqual(TEST_TIME1)); [EOL]     assertEquals(false, new DateTime(TEST_TIME2).isEqual(TEST_TIME1)); [EOL] } <line_num>: 370,374
public void testIsEqualNow() { [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isEqualNow()); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW).isEqualNow()); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isEqualNow()); [EOL] } <line_num>: 376,380
public void testIsEqual_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(true, test3.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(new MockInstant())); [EOL]     assertEquals(true, test1.isEqual(new MockInstant())); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isEqual(null)); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW).isEqual(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isEqual(null)); [EOL] } <line_num>: 382,405
public void testIsBefore_long() { [EOL]     assertEquals(true, new DateTime(TEST_TIME1).isBefore(TEST_TIME2)); [EOL]     assertEquals(false, new DateTime(TEST_TIME1).isBefore(TEST_TIME1)); [EOL]     assertEquals(false, new DateTime(TEST_TIME2).isBefore(TEST_TIME1)); [EOL] } <line_num>: 408,412
public void testIsBeforeNow() { [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW - 1).isBeforeNow()); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isBeforeNow()); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isBeforeNow()); [EOL] } <line_num>: 414,418
public void testIsBefore_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(false, test3.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(new MockInstant())); [EOL]     assertEquals(false, test1.isBefore(new MockInstant())); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isBefore(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isBefore(null)); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW - 1).isBefore(null)); [EOL] } <line_num>: 420,443
public void testIsAfter_long() { [EOL]     assertEquals(false, new DateTime(TEST_TIME1).isAfter(TEST_TIME2)); [EOL]     assertEquals(false, new DateTime(TEST_TIME1).isAfter(TEST_TIME1)); [EOL]     assertEquals(true, new DateTime(TEST_TIME2).isAfter(TEST_TIME1)); [EOL] } <line_num>: 446,450
public void testIsAfterNow() { [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfterNow()); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfterNow()); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfterNow()); [EOL] } <line_num>: 452,456
public void testIsAfter_RI() { [EOL]     DateTime test1 = new DateTime(TEST_TIME1); [EOL]     DateTime test1a = new DateTime(TEST_TIME1); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateTime test2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null)); [EOL]     assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null)); [EOL] } <line_num>: 458,481
public void testSerialization() throws Exception { [EOL]     DateTime test = new DateTime(TEST_TIME_NOW); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTime result = (DateTime) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 484,499
public void testToString() { [EOL]     DateTime test = new DateTime(TEST_TIME_NOW); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString()); [EOL]     test = new DateTime(TEST_TIME_NOW, PARIS); [EOL]     assertEquals("2002-06-09T02:00:00.000+02:00", test.toString()); [EOL] } <line_num>: 502,508
public void testToString_String() { [EOL]     DateTime test = new DateTime(TEST_TIME_NOW); [EOL]     assertEquals("2002 01", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString((String) null)); [EOL] } <line_num>: 510,514
public void testToString_String_Locale() { [EOL]     DateTime test = new DateTime(TEST_TIME_NOW); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null)); [EOL] } <line_num>: 516,523
@SuppressWarnings("deprecation") [EOL] public void testToString_DTFormatter() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME_NOW); [EOL]     assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((DateTimeFormatter) null)); [EOL] } <line_num>: 525,530
public void testToInstant() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     Instant result = test.toInstant(); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL] } <line_num>: 533,537
public void testToDateTime() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(); [EOL]     assertSame(test, result); [EOL] } <line_num>: 539,543
public void testToDateTimeISO() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTimeISO(); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, ISO_PARIS); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, new MockNullZoneChronology()); [EOL]     result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     assertNotSame(test, result); [EOL] } <line_num>: 545,573
public void testToDateTime_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(PARIS, result.getZone()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 575,593
public void testToDateTime_Chronology() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.toDateTime(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 595,613
public void testToMutableDateTime() { [EOL]     DateTime test = new DateTime(TEST_TIME1, PARIS); [EOL]     MutableDateTime result = test.toMutableDateTime(); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL] } <line_num>: 615,620
public void testToMutableDateTimeISO() { [EOL]     DateTime test = new DateTime(TEST_TIME1, PARIS); [EOL]     MutableDateTime result = test.toMutableDateTimeISO(); [EOL]     assertSame(MutableDateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL] } <line_num>: 622,629
public void testToMutableDateTime_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL] } <line_num>: 631,651
public void testToMutableDateTime_Chronology() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     MutableDateTime result = test.toMutableDateTime(ISO_DEFAULT); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.toMutableDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.toMutableDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL] } <line_num>: 653,673
public void testToDate() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     Date result = test.toDate(); [EOL]     assertEquals(test.getMillis(), result.getTime()); [EOL] } <line_num>: 675,679
public void testToCalendar_Locale() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     Calendar result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toCalendar(Locale.UK); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] } <line_num>: 681,696
public void testToGregorianCalendar() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     GregorianCalendar result = test.toGregorianCalendar(); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new DateTime(TEST_TIME1, PARIS); [EOL]     result = test.toGregorianCalendar(); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] } <line_num>: 698,708
@SuppressWarnings("deprecation") [EOL] public void testToDateMidnight() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     DateMidnight test = base.toDateMidnight(); [EOL]     assertEquals(new DateMidnight(base, COPTIC_DEFAULT), test); [EOL] } <line_num>: 711,716
@SuppressWarnings("deprecation") [EOL] public void testToYearMonthDay() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1, COPTIC_DEFAULT), test); [EOL] } <line_num>: 718,723
@SuppressWarnings("deprecation") [EOL] public void testToTimeOfDay() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     TimeOfDay test = base.toTimeOfDay(); [EOL]     assertEquals(new TimeOfDay(TEST_TIME1, COPTIC_DEFAULT), test); [EOL] } <line_num>: 725,730
public void testToLocalDateTime() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     LocalDateTime test = base.toLocalDateTime(); [EOL]     assertEquals(new LocalDateTime(TEST_TIME1, COPTIC_DEFAULT), test); [EOL] } <line_num>: 732,736
public void testToLocalDate() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     LocalDate test = base.toLocalDate(); [EOL]     assertEquals(new LocalDate(TEST_TIME1, COPTIC_DEFAULT), test); [EOL] } <line_num>: 738,742
public void testToLocalTime() { [EOL]     DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT); [EOL]     LocalTime test = base.toLocalTime(); [EOL]     assertEquals(new LocalTime(TEST_TIME1, COPTIC_DEFAULT), test); [EOL] } <line_num>: 744,748
public void testWithMillis_long() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.withMillis(TEST_TIME2); [EOL]     assertEquals(TEST_TIME2, result.getMillis()); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.withMillis(TEST_TIME2); [EOL]     assertEquals(TEST_TIME2, result.getMillis()); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withMillis(TEST_TIME1); [EOL]     assertSame(test, result); [EOL] } <line_num>: 751,765
public void testWithChronology_Chronology() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.withChronology(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.withChronology(null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withChronology(null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withChronology(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL] } <line_num>: 767,786
public void testWithZone_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.withZone(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.withZone(null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withZone(null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 788,802
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateTime test = new DateTime(TEST_TIME1); [EOL]     DateTime result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(test.getMillis() - DateTimeConstants.MILLIS_PER_HOUR, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateTime(TEST_TIME1, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(test.getMillis() + DateTimeConstants.MILLIS_PER_HOUR, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] } <line_num>: 804,826
public void testWithDate_int_int_int() { [EOL]     DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISO_UTC); [EOL]     DateTime result = test.withDate(2003, 5, 6); [EOL]     DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISO_UTC); [EOL]     assertEquals(expected, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withDate(2003, 13, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 829,840
public void testWithTime_int_int_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1 - 12345L, BUDDHIST_UTC); [EOL]     DateTime result = test.withTime(12, 24, 0, 0); [EOL]     assertEquals(TEST_TIME1, result.getMillis()); [EOL]     assertEquals(BUDDHIST_UTC, result.getChronology()); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     try { [EOL]         test.withTime(25, 1, 1, 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 842,853
@SuppressWarnings("deprecation") [EOL] public void testWithFields_RPartial() { [EOL]     DateTime test = new DateTime(2004, 5, 6, 7, 8, 9, 0); [EOL]     DateTime result = test.withFields(new YearMonthDay(2003, 4, 5)); [EOL]     DateTime expected = new DateTime(2003, 4, 5, 7, 8, 9, 0); [EOL]     assertEquals(expected, result); [EOL]     test = new DateTime(TEST_TIME1); [EOL]     result = test.withFields(null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 855,865
public void testWithField1() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test); [EOL]     assertEquals(new DateTime(2006, 6, 9, 0, 0, 0, 0), result); [EOL] } <line_num>: 868,874
public void testWithField2() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 876,882
public void testWithFieldAdded1() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test); [EOL]     assertEquals(new DateTime(2010, 6, 9, 0, 0, 0, 0), result); [EOL] } <line_num>: 885,891
public void testWithFieldAdded2() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 893,899
public void testWithFieldAdded3() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 901,907
public void testWithFieldAdded4() { [EOL]     DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0); [EOL]     DateTime result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 909,913
public void testWithDurationAdded_long_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(123456789L, 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 916,932
public void testWithDurationAdded_RD_int() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withDurationAdded(new Duration(123456789L), 1); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 2); [EOL]     expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), -3); [EOL]     expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 935,954
public void testWithDurationAdded_RP_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1); [EOL]     DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withPeriodAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3); [EOL]     expected = new DateTime(2005, 11, 15, 16, 20, 24, 28, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1); [EOL]     expected = new DateTime(2001, 3, 2, 0, 0, 0, 0, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 957,976
public void testPlus_long() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(123456789L); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 979,984
public void testPlus_RD() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(new Duration(123456789L)); [EOL]     DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 986,994
public void testPlus_RP() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 996,1004
public void testPlusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusYears(1); [EOL]     DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1006,1014
public void testPlusMonths_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMonths(1); [EOL]     DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1016,1024
public void testPlusWeeks_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusWeeks(1); [EOL]     DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1026,1034
public void testPlusDays_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusDays(1); [EOL]     DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1036,1044
public void testPlusHours_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusHours(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusHours(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1046,1054
public void testPlusMinutes_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMinutes(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMinutes(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1056,1064
public void testPlusSeconds_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusSeconds(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusSeconds(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1066,1074
public void testPlusMillis_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.plusMillis(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMillis(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1076,1084
public void testMinus_long() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(123456789L); [EOL]     DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 1087,1092
public void testMinus_RD() { [EOL]     DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(new Duration(123456789L)); [EOL]     DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1094,1102
public void testMinus_RP() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     DateTime expected = new DateTime(2001, 3, 26, 0, 1, 2, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1104,1112
public void testMinusYears_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusYears(1); [EOL]     DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1114,1122
public void testMinusMonths_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMonths(1); [EOL]     DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1124,1132
public void testMinusWeeks_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusWeeks(1); [EOL]     DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1134,1142
public void testMinusDays_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusDays(1); [EOL]     DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1144,1152
public void testMinusHours_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusHours(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusHours(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1154,1162
public void testMinusMinutes_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMinutes(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMinutes(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1164,1172
public void testMinusSeconds_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusSeconds(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusSeconds(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1174,1182
public void testMinusMillis_int() { [EOL]     DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT); [EOL]     DateTime result = test.minusMillis(1); [EOL]     DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMillis(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 1184,1192
public DurationFieldType getDurationType() { [EOL]     return DurationFieldType.weeks(); [EOL] } <line_num>: 1203,1205
public DurationFieldType getRangeDurationType() { [EOL]     return null; [EOL] } <line_num>: 1206,1208
public DateTimeField getField(Chronology chronology) { [EOL]     return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL] } <line_num>: 1209,1211
public void testProperty() { [EOL]     DateTime test = new DateTime(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1195,1221
private void check(DateTime test, int year, int month, int day, int hour, int min, int sec, int mil) { [EOL]     assertEquals(year, test.getYear()); [EOL]     assertEquals(month, test.getMonthOfYear()); [EOL]     assertEquals(day, test.getDayOfMonth()); [EOL]     assertEquals(hour, test.getHourOfDay()); [EOL]     assertEquals(min, test.getMinuteOfHour()); [EOL]     assertEquals(sec, test.getSecondOfMinute()); [EOL]     assertEquals(mil, test.getMillisOfSecond()); [EOL] } <line_num>: 1224,1232
