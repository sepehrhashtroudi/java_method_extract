public TestLocalDate_Properties(String name) { [EOL]     super(name); [EOL] } <line_num>: 62,64
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 54,56
public static TestSuite suite() { [EOL]     return new TestSuite(TestLocalDate_Properties.class); [EOL] } <line_num>: 58,60
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     systemDefaultLocale = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL] } <line_num>: 66,72
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL]     Locale.setDefault(systemDefaultLocale); [EOL]     systemDefaultLocale = null; [EOL] } <line_num>: 74,80
public void testPropertyGetYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getLocalDate()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] } <line_num>: 83,99
public void testPropertyGetMaxMinValuesYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     assertEquals(-292275054, test.year().getMinimumValue()); [EOL]     assertEquals(-292275054, test.year().getMinimumValueOverall()); [EOL]     assertEquals(292278993, test.year().getMaximumValue()); [EOL]     assertEquals(292278993, test.year().getMaximumValueOverall()); [EOL] } <line_num>: 101,107
public void testPropertyAddToCopyYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(292278993 - 1972); [EOL]     check(copy, 292278993, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6, 9); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL] } <line_num>: 109,138
public void testPropertyAddWrapFieldToCopyYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.year().addWrapFieldToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1); [EOL]     check(copy, -292275054, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1); [EOL]     check(copy, 292278993, 6, 9); [EOL] } <line_num>: 140,154
public void testPropertySetCopyYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.year().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 12, 6, 9); [EOL] } <line_num>: 156,161
public void testPropertySetCopyTextYear() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 12, 6, 9); [EOL] } <line_num>: 163,168
public void testPropertyCompareToYear() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 170,190
public void testPropertyGetMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getLocalDate()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new LocalDate(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] } <line_num>: 193,212
public void testPropertyGetMaxMinValuesMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] } <line_num>: 214,220
public void testPropertyAddToCopyMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new LocalDate(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new LocalDate(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] } <line_num>: 222,250
public void testPropertyAddWrapFieldToCopyMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 10, 9); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2, 9); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10, 9); [EOL]     test = new LocalDate(1972, 1, 31); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new LocalDate(1971, 1, 31); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] } <line_num>: 252,277
public void testPropertySetCopyMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new LocalDate(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 279,297
public void testPropertySetCopyTextMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.monthOfYear().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().setCopy("December"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().setCopy("Dec"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL] } <line_num>: 299,312
public void testPropertyCompareToMonth() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 314,334
public void testPropertyGetDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getLocalDate()); [EOL]     assertEquals(9, test.dayOfMonth().get()); [EOL]     assertEquals("9", test.dayOfMonth().getAsString()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL] } <line_num>: 337,353
public void testPropertyGetMaxMinValuesDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new LocalDate(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new LocalDate(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new LocalDate(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] } <line_num>: 355,367
public void testPropertyAddToCopyDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 18); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     check(copy, 1972, 6, 30); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     check(copy, 1972, 7, 1); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     check(copy, 1972, 7, 31); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     check(copy, 1972, 8, 1); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     check(copy, 1972, 12, 31); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     check(copy, 1973, 1, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     check(copy, 1972, 6, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     check(copy, 1972, 5, 31); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     check(copy, 1972, 1, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     check(copy, 1971, 12, 31); [EOL] } <line_num>: 369,404
public void testPropertyAddWrapFieldToCopyDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 30); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     check(copy, 1972, 6, 1); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     check(copy, 1972, 6, 27); [EOL]     test = new LocalDate(1972, 7, 9); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     check(copy, 1972, 7, 30); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     check(copy, 1972, 7, 31); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(23); [EOL]     check(copy, 1972, 7, 1); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     check(copy, 1972, 7, 28); [EOL] } <line_num>: 406,430
public void testPropertySetCopyDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL]     try { [EOL]         test.dayOfMonth().setCopy(31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.dayOfMonth().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 432,446
public void testPropertySetCopyTextDay() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] } <line_num>: 448,453
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().withMaximumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 30); [EOL] } <line_num>: 455,460
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     LocalDate test = new LocalDate(1972, 6, 9); [EOL]     LocalDate copy = test.dayOfMonth().withMinimumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 1); [EOL] } <line_num>: 462,467
public void testPropertyCompareToDay() { [EOL]     LocalDate test1 = new LocalDate(TEST_TIME1); [EOL]     LocalDate test2 = new LocalDate(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 469,489
public void testPropertyEquals() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] } <line_num>: 491,514
public void testPropertyHashCode() { [EOL]     LocalDate test1 = new LocalDate(2005, 11, 8); [EOL]     LocalDate test2 = new LocalDate(2005, 11, 9); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] } <line_num>: 516,523
public void testPropertyEqualsHashCodeLenient() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] } <line_num>: 525,535
public void testPropertyEqualsHashCodeStrict() { [EOL]     LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] } <line_num>: 537,547
private void check(LocalDate test, int year, int month, int day) { [EOL]     assertEquals(year, test.getYear()); [EOL]     assertEquals(month, test.getMonthOfYear()); [EOL]     assertEquals(day, test.getDayOfMonth()); [EOL] } <line_num>: 550,554
