public TestDateTimeFieldType(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 36,38
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateTimeFieldType.class); [EOL] } <line_num>: 40,42
protected void setUp() throws Exception { [EOL] } <line_num>: 48,49
protected void tearDown() throws Exception { [EOL] } <line_num>: 51,52
public void test_era() throws Exception { [EOL]     assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era()); [EOL]     assertEquals("era", DateTimeFieldType.era().getName()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.era().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.era()); [EOL] } <line_num>: 55,63
public void test_centuryOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra()); [EOL]     assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.centuryOfEra()); [EOL] } <line_num>: 65,73
public void test_yearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury()); [EOL]     assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfCentury()); [EOL] } <line_num>: 75,83
public void test_yearOfEra() throws Exception { [EOL]     assertEquals(DateTimeFieldType.yearOfEra(), DateTimeFieldType.yearOfEra()); [EOL]     assertEquals("yearOfEra", DateTimeFieldType.yearOfEra().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfEra().getDurationType()); [EOL]     assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.yearOfEra()); [EOL] } <line_num>: 85,93
public void test_year() throws Exception { [EOL]     assertEquals(DateTimeFieldType.year(), DateTimeFieldType.year()); [EOL]     assertEquals("year", DateTimeFieldType.year().getName()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.year().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.year().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().year(), DateTimeFieldType.year().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().year().isSupported(), DateTimeFieldType.year().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.year()); [EOL] } <line_num>: 95,103
public void test_monthOfYear() throws Exception { [EOL]     assertEquals(DateTimeFieldType.monthOfYear(), DateTimeFieldType.monthOfYear()); [EOL]     assertEquals("monthOfYear", DateTimeFieldType.monthOfYear().getName()); [EOL]     assertEquals(DurationFieldType.months(), DateTimeFieldType.monthOfYear().getDurationType()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.monthOfYear()); [EOL] } <line_num>: 105,113
public void test_weekyearOfCentury() throws Exception { [EOL]     assertEquals(DateTimeFieldType.weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury()); [EOL]     assertEquals("weekyearOfCentury", DateTimeFieldType.weekyearOfCentury().getName()); [EOL]     assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyearOfCentury().getDurationType()); [EOL]     assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.weekyearOfCentury()); [EOL] } <line_num>: 115,123
public void test_weekyear() throws Exception { [EOL]     assertEquals(DateTimeFieldType.weekyear(), DateTimeFieldType.weekyear()); [EOL]     assertEquals("weekyear", DateTimeFieldType.weekyear().getName()); [EOL]     assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyear().getDurationType()); [EOL]     assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weekyear(), DateTimeFieldType.weekyear().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.weekyear()); [EOL] } <line_num>: 125,133
public void test_weekOfWeekyear() throws Exception { [EOL]     assertEquals(DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear()); [EOL]     assertEquals("weekOfWeekyear", DateTimeFieldType.weekOfWeekyear().getName()); [EOL]     assertEquals(DurationFieldType.weeks(), DateTimeFieldType.weekOfWeekyear().getDurationType()); [EOL]     assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.weekOfWeekyear()); [EOL] } <line_num>: 135,143
public void test_dayOfYear() throws Exception { [EOL]     assertEquals(DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfYear()); [EOL]     assertEquals("dayOfYear", DateTimeFieldType.dayOfYear().getName()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfYear().getDurationType()); [EOL]     assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.dayOfYear()); [EOL] } <line_num>: 145,153
public void test_dayOfMonth() throws Exception { [EOL]     assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth()); [EOL]     assertEquals("dayOfMonth", DateTimeFieldType.dayOfMonth().getName()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType()); [EOL]     assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.dayOfMonth()); [EOL] } <line_num>: 155,163
public void test_dayOfWeek() throws Exception { [EOL]     assertEquals(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.dayOfWeek()); [EOL]     assertEquals("dayOfWeek", DateTimeFieldType.dayOfWeek().getName()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfWeek().getDurationType()); [EOL]     assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.dayOfWeek()); [EOL] } <line_num>: 165,173
public void test_halfdayOfDay() throws Exception { [EOL]     assertEquals(DateTimeFieldType.halfdayOfDay(), DateTimeFieldType.halfdayOfDay()); [EOL]     assertEquals("halfdayOfDay", DateTimeFieldType.halfdayOfDay().getName()); [EOL]     assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.halfdayOfDay().getDurationType()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.halfdayOfDay()); [EOL] } <line_num>: 175,183
public void test_clockhourOfDay() throws Exception { [EOL]     assertEquals(DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.clockhourOfDay()); [EOL]     assertEquals("clockhourOfDay", DateTimeFieldType.clockhourOfDay().getName()); [EOL]     assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfDay().getDurationType()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.clockhourOfDay()); [EOL] } <line_num>: 185,193
public void test_clockhourOfHalfday() throws Exception { [EOL]     assertEquals(DateTimeFieldType.clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday()); [EOL]     assertEquals("clockhourOfHalfday", DateTimeFieldType.clockhourOfHalfday().getName()); [EOL]     assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfHalfday().getDurationType()); [EOL]     assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.clockhourOfHalfday()); [EOL] } <line_num>: 195,203
public void test_hourOfHalfday() throws Exception { [EOL]     assertEquals(DateTimeFieldType.hourOfHalfday(), DateTimeFieldType.hourOfHalfday()); [EOL]     assertEquals("hourOfHalfday", DateTimeFieldType.hourOfHalfday().getName()); [EOL]     assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfHalfday().getDurationType()); [EOL]     assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.hourOfHalfday()); [EOL] } <line_num>: 205,213
public void test_hourOfDay() throws Exception { [EOL]     assertEquals(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay()); [EOL]     assertEquals("hourOfDay", DateTimeFieldType.hourOfDay().getName()); [EOL]     assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfDay().getDurationType()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.hourOfDay()); [EOL] } <line_num>: 215,223
public void test_minuteOfDay() throws Exception { [EOL]     assertEquals(DateTimeFieldType.minuteOfDay(), DateTimeFieldType.minuteOfDay()); [EOL]     assertEquals("minuteOfDay", DateTimeFieldType.minuteOfDay().getName()); [EOL]     assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfDay().getDurationType()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.minuteOfDay()); [EOL] } <line_num>: 225,233
public void test_minuteOfHour() throws Exception { [EOL]     assertEquals(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.minuteOfHour()); [EOL]     assertEquals("minuteOfHour", DateTimeFieldType.minuteOfHour().getName()); [EOL]     assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfHour().getDurationType()); [EOL]     assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.minuteOfHour()); [EOL] } <line_num>: 235,243
public void test_secondOfDay() throws Exception { [EOL]     assertEquals(DateTimeFieldType.secondOfDay(), DateTimeFieldType.secondOfDay()); [EOL]     assertEquals("secondOfDay", DateTimeFieldType.secondOfDay().getName()); [EOL]     assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfDay().getDurationType()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.secondOfDay()); [EOL] } <line_num>: 245,253
public void test_secondOfMinute() throws Exception { [EOL]     assertEquals(DateTimeFieldType.secondOfMinute(), DateTimeFieldType.secondOfMinute()); [EOL]     assertEquals("secondOfMinute", DateTimeFieldType.secondOfMinute().getName()); [EOL]     assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfMinute().getDurationType()); [EOL]     assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.secondOfMinute()); [EOL] } <line_num>: 255,263
public void test_millisOfDay() throws Exception { [EOL]     assertEquals(DateTimeFieldType.millisOfDay(), DateTimeFieldType.millisOfDay()); [EOL]     assertEquals("millisOfDay", DateTimeFieldType.millisOfDay().getName()); [EOL]     assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfDay().getDurationType()); [EOL]     assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.millisOfDay()); [EOL] } <line_num>: 265,273
public void test_millisOfSecond() throws Exception { [EOL]     assertEquals(DateTimeFieldType.millisOfSecond(), DateTimeFieldType.millisOfSecond()); [EOL]     assertEquals("millisOfSecond", DateTimeFieldType.millisOfSecond().getName()); [EOL]     assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfSecond().getDurationType()); [EOL]     assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType()); [EOL]     assertEquals(CopticChronology.getInstanceUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(CopticChronology.getInstanceUTC())); [EOL]     assertEquals(CopticChronology.getInstanceUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(CopticChronology.getInstanceUTC())); [EOL]     assertSerialization(DateTimeFieldType.millisOfSecond()); [EOL] } <line_num>: 275,283
private void assertSerialization(DateTimeFieldType type) throws Exception { [EOL]     DateTimeFieldType result = doSerialization(type); [EOL]     assertSame(type, result); [EOL] } <line_num>: 308,311
private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception { [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(type); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateTimeFieldType result = (DateTimeFieldType) ois.readObject(); [EOL]     ois.close(); [EOL]     return result; [EOL] } <line_num>: 313,325
