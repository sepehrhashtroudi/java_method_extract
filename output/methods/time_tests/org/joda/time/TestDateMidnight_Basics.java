public TestDateMidnight_Basics(String name) { [EOL]     super(name); [EOL] } <line_num>: 120,122
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 112,114
public static TestSuite suite() { [EOL]     return new TestSuite(TestDateMidnight_Basics.class); [EOL] } <line_num>: 116,118
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC); [EOL]     originalDateTimeZone = DateTimeZone.getDefault(); [EOL]     originalTimeZone = TimeZone.getDefault(); [EOL]     originalLocale = Locale.getDefault(); [EOL]     DateTimeZone.setDefault(LONDON); [EOL]     TimeZone.setDefault(TimeZone.getTimeZone("Europe/London")); [EOL]     Locale.setDefault(Locale.UK); [EOL] } <line_num>: 124,132
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(originalDateTimeZone); [EOL]     TimeZone.setDefault(originalTimeZone); [EOL]     Locale.setDefault(originalLocale); [EOL]     originalDateTimeZone = null; [EOL]     originalTimeZone = null; [EOL]     originalLocale = null; [EOL] } <line_num>: 134,142
public void testTest() { [EOL]     assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW_UTC).toString()); [EOL]     assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1_UTC).toString()); [EOL]     assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2_UTC).toString()); [EOL] } <line_num>: 145,149
public void testGet_DateTimeField() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(1, test.get(ISO_DEFAULT.era())); [EOL]     assertEquals(20, test.get(ISO_DEFAULT.centuryOfEra())); [EOL]     assertEquals(2, test.get(ISO_DEFAULT.yearOfCentury())); [EOL]     assertEquals(2002, test.get(ISO_DEFAULT.yearOfEra())); [EOL]     assertEquals(2002, test.get(ISO_DEFAULT.year())); [EOL]     assertEquals(6, test.get(ISO_DEFAULT.monthOfYear())); [EOL]     assertEquals(9, test.get(ISO_DEFAULT.dayOfMonth())); [EOL]     assertEquals(2002, test.get(ISO_DEFAULT.weekyear())); [EOL]     assertEquals(23, test.get(ISO_DEFAULT.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(ISO_DEFAULT.dayOfWeek())); [EOL]     assertEquals(160, test.get(ISO_DEFAULT.dayOfYear())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.halfdayOfDay())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.hourOfHalfday())); [EOL]     assertEquals(24, test.get(ISO_DEFAULT.clockhourOfDay())); [EOL]     assertEquals(12, test.get(ISO_DEFAULT.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.hourOfDay())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.minuteOfHour())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.minuteOfDay())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.secondOfMinute())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.secondOfDay())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.millisOfSecond())); [EOL]     assertEquals(0, test.get(ISO_DEFAULT.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeField) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 152,180
public void testGet_DateTimeFieldType() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(1, test.get(DateTimeFieldType.era())); [EOL]     assertEquals(20, test.get(DateTimeFieldType.centuryOfEra())); [EOL]     assertEquals(2, test.get(DateTimeFieldType.yearOfCentury())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.yearOfEra())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.year())); [EOL]     assertEquals(6, test.get(DateTimeFieldType.monthOfYear())); [EOL]     assertEquals(9, test.get(DateTimeFieldType.dayOfMonth())); [EOL]     assertEquals(2002, test.get(DateTimeFieldType.weekyear())); [EOL]     assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(7, test.get(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(160, test.get(DateTimeFieldType.dayOfYear())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday())); [EOL]     assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay())); [EOL]     assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.hourOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfHour())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.minuteOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfMinute())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.secondOfDay())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfSecond())); [EOL]     assertEquals(0, test.get(DateTimeFieldType.millisOfDay())); [EOL]     try { [EOL]         test.get((DateTimeFieldType) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 182,210
public void testGetters() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(ISO_DEFAULT, test.getChronology()); [EOL]     assertEquals(LONDON, test.getZone()); [EOL]     assertEquals(TEST_TIME_NOW_LONDON, test.getMillis()); [EOL]     assertEquals(1, test.getEra()); [EOL]     assertEquals(20, test.getCenturyOfEra()); [EOL]     assertEquals(2, test.getYearOfCentury()); [EOL]     assertEquals(2002, test.getYearOfEra()); [EOL]     assertEquals(2002, test.getYear()); [EOL]     assertEquals(6, test.getMonthOfYear()); [EOL]     assertEquals(9, test.getDayOfMonth()); [EOL]     assertEquals(2002, test.getWeekyear()); [EOL]     assertEquals(23, test.getWeekOfWeekyear()); [EOL]     assertEquals(7, test.getDayOfWeek()); [EOL]     assertEquals(160, test.getDayOfYear()); [EOL]     assertEquals(0, test.getHourOfDay()); [EOL]     assertEquals(0, test.getMinuteOfHour()); [EOL]     assertEquals(0, test.getMinuteOfDay()); [EOL]     assertEquals(0, test.getSecondOfMinute()); [EOL]     assertEquals(0, test.getSecondOfDay()); [EOL]     assertEquals(0, test.getMillisOfSecond()); [EOL]     assertEquals(0, test.getMillisOfDay()); [EOL] } <line_num>: 213,238
public void testWithers() { [EOL]     DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT); [EOL]     check(test.withYear(2000), 2000, 6, 9); [EOL]     check(test.withMonthOfYear(2), 1970, 2, 9); [EOL]     check(test.withDayOfMonth(2), 1970, 6, 2); [EOL]     check(test.withDayOfYear(6), 1970, 1, 6); [EOL]     check(test.withDayOfWeek(6), 1970, 6, 13); [EOL]     check(test.withWeekOfWeekyear(6), 1970, 2, 3); [EOL]     check(test.withWeekyear(1971), 1971, 6, 15); [EOL]     check(test.withYearOfCentury(60), 1960, 6, 9); [EOL]     check(test.withCenturyOfEra(21), 2070, 6, 9); [EOL]     check(test.withYearOfEra(1066), 1066, 6, 9); [EOL]     check(test.withEra(DateTimeConstants.BC), -1970, 6, 9); [EOL]     try { [EOL]         test.withMonthOfYear(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.withMonthOfYear(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 240,262
public void testEqualsHashCode() { [EOL]     DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight test2 = new DateMidnight(TEST_TIME1_UTC); [EOL]     assertEquals(true, test1.equals(test2)); [EOL]     assertEquals(true, test2.equals(test1)); [EOL]     assertEquals(true, test1.equals(test1)); [EOL]     assertEquals(true, test2.equals(test2)); [EOL]     assertEquals(true, test1.hashCode() == test2.hashCode()); [EOL]     assertEquals(true, test1.hashCode() == test1.hashCode()); [EOL]     assertEquals(true, test2.hashCode() == test2.hashCode()); [EOL]     DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC); [EOL]     assertEquals(false, test1.equals(test3)); [EOL]     assertEquals(false, test2.equals(test3)); [EOL]     assertEquals(false, test3.equals(test1)); [EOL]     assertEquals(false, test3.equals(test2)); [EOL]     assertEquals(false, test1.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test2.hashCode() == test3.hashCode()); [EOL]     assertEquals(false, test1.equals("Hello")); [EOL]     assertEquals(true, test1.equals(new MockInstant())); [EOL]     assertEquals(false, test1.equals(new DateMidnight(TEST_TIME1_UTC, GREGORIAN_DEFAULT))); [EOL] } <line_num>: 265,287
public String toString() { [EOL]     return null; [EOL] } <line_num>: 290,292
public long getMillis() { [EOL]     return TEST_TIME1_LONDON; [EOL] } <line_num>: 293,295
public Chronology getChronology() { [EOL]     return ISO_DEFAULT; [EOL] } <line_num>: 296,298
public void testCompareTo() { [EOL]     DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight test1a = new DateMidnight(TEST_TIME1_UTC); [EOL]     assertEquals(0, test1.compareTo(test1a)); [EOL]     assertEquals(0, test1a.compareTo(test1)); [EOL]     assertEquals(0, test1.compareTo(test1)); [EOL]     assertEquals(0, test1a.compareTo(test1a)); [EOL]     DateMidnight test2 = new DateMidnight(TEST_TIME2_UTC); [EOL]     assertEquals(-1, test1.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(test1)); [EOL]     DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS); [EOL]     assertEquals(-1, test1.compareTo(test3)); [EOL]     assertEquals(+1, test3.compareTo(test1)); [EOL]     assertEquals(-1, test3.compareTo(test2)); [EOL]     assertEquals(+1, test2.compareTo(new MockInstant())); [EOL]     assertEquals(0, test1.compareTo(new MockInstant())); [EOL]     try { [EOL]         test1.compareTo(null); [EOL]         fail(); [EOL]     } catch (NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 301,329
public void testIsEqual() { [EOL]     DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight test1a = new DateMidnight(TEST_TIME1_UTC); [EOL]     assertEquals(true, test1.isEqual(test1a)); [EOL]     assertEquals(true, test1a.isEqual(test1)); [EOL]     assertEquals(true, test1.isEqual(test1)); [EOL]     assertEquals(true, test1a.isEqual(test1a)); [EOL]     DateMidnight test2 = new DateMidnight(TEST_TIME2_UTC); [EOL]     assertEquals(false, test1.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(test1)); [EOL]     DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isEqual(test3)); [EOL]     assertEquals(false, test3.isEqual(test1)); [EOL]     assertEquals(false, test3.isEqual(test2)); [EOL]     assertEquals(false, test2.isEqual(new MockInstant())); [EOL]     assertEquals(true, test1.isEqual(new MockInstant())); [EOL]     assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isEqual(null)); [EOL]     assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isEqual(null)); [EOL]     assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isEqual(null)); [EOL]     assertEquals(false, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 8, 23, 59, 59, 999))); [EOL]     assertEquals(true, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 9, 0, 0, 0, 0))); [EOL]     assertEquals(false, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 9, 0, 0, 0, 1))); [EOL] } <line_num>: 331,358
public void testIsBefore() { [EOL]     DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight test1a = new DateMidnight(TEST_TIME1_UTC); [EOL]     assertEquals(false, test1.isBefore(test1a)); [EOL]     assertEquals(false, test1a.isBefore(test1)); [EOL]     assertEquals(false, test1.isBefore(test1)); [EOL]     assertEquals(false, test1a.isBefore(test1a)); [EOL]     DateMidnight test2 = new DateMidnight(TEST_TIME2_UTC); [EOL]     assertEquals(true, test1.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(test1)); [EOL]     DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS); [EOL]     assertEquals(true, test1.isBefore(test3)); [EOL]     assertEquals(false, test3.isBefore(test1)); [EOL]     assertEquals(true, test3.isBefore(test2)); [EOL]     assertEquals(false, test2.isBefore(new MockInstant())); [EOL]     assertEquals(false, test1.isBefore(new MockInstant())); [EOL]     assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isBefore(null)); [EOL]     assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isBefore(null)); [EOL]     assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isBefore(null)); [EOL]     assertEquals(false, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 8, 23, 59, 59, 999))); [EOL]     assertEquals(false, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 9, 0, 0, 0, 0))); [EOL]     assertEquals(true, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 9, 0, 0, 0, 1))); [EOL] } <line_num>: 360,387
public void testIsAfter() { [EOL]     DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight test1a = new DateMidnight(TEST_TIME1_UTC); [EOL]     assertEquals(false, test1.isAfter(test1a)); [EOL]     assertEquals(false, test1a.isAfter(test1)); [EOL]     assertEquals(false, test1.isAfter(test1)); [EOL]     assertEquals(false, test1a.isAfter(test1a)); [EOL]     DateMidnight test2 = new DateMidnight(TEST_TIME2_UTC); [EOL]     assertEquals(false, test1.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(test1)); [EOL]     DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS); [EOL]     assertEquals(false, test1.isAfter(test3)); [EOL]     assertEquals(true, test3.isAfter(test1)); [EOL]     assertEquals(false, test3.isAfter(test2)); [EOL]     assertEquals(true, test2.isAfter(new MockInstant())); [EOL]     assertEquals(false, test1.isAfter(new MockInstant())); [EOL]     assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isAfter(null)); [EOL]     assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isAfter(null)); [EOL]     assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isAfter(null)); [EOL]     assertEquals(true, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 8, 23, 59, 59, 999))); [EOL]     assertEquals(false, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 9, 0, 0, 0, 0))); [EOL]     assertEquals(false, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 9, 0, 0, 0, 1))); [EOL] } <line_num>: 389,416
public void testSerialization() throws Exception { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC); [EOL]     ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     ObjectOutputStream oos = new ObjectOutputStream(baos); [EOL]     oos.writeObject(test); [EOL]     byte[] bytes = baos.toByteArray(); [EOL]     oos.close(); [EOL]     ByteArrayInputStream bais = new ByteArrayInputStream(bytes); [EOL]     ObjectInputStream ois = new ObjectInputStream(bais); [EOL]     DateMidnight result = (DateMidnight) ois.readObject(); [EOL]     ois.close(); [EOL]     assertEquals(test, result); [EOL] } <line_num>: 419,434
public void testToString() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC); [EOL]     assertEquals("2002-06-09T00:00:00.000+01:00", test.toString()); [EOL]     test = new DateMidnight(TEST_TIME_NOW_UTC, PARIS); [EOL]     assertEquals("2002-06-09T00:00:00.000+02:00", test.toString()); [EOL]     test = new DateMidnight(TEST_TIME_NOW_UTC, NEWYORK); [EOL]     assertEquals("2002-06-08T00:00:00.000-04:00", test.toString()); [EOL] } <line_num>: 437,446
public void testToString_String() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC); [EOL]     assertEquals("2002 00", test.toString("yyyy HH")); [EOL]     assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((String) null)); [EOL] } <line_num>: 448,452
public void testToString_String_String() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", Locale.ENGLISH)); [EOL]     assertEquals("dim. 9/6", test.toString("EEE d/M", Locale.FRENCH)); [EOL]     assertEquals("2002-06-09T00:00:00.000+01:00", test.toString(null, Locale.ENGLISH)); [EOL]     assertEquals("Sun 9/6", test.toString("EEE d/M", null)); [EOL]     assertEquals("2002-06-09T00:00:00.000+01:00", test.toString(null, null)); [EOL] } <line_num>: 454,461
public void testToString_DTFormatter() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC); [EOL]     assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH"))); [EOL]     assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((DateTimeFormatter) null)); [EOL] } <line_num>: 463,467
public void testToInstant() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     Instant result = test.toInstant(); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL] } <line_num>: 470,474
public void testToDateTime() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     DateTime result = test.toDateTime(); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(PARIS, result.getZone()); [EOL] } <line_num>: 476,482
public void testToDateTimeISO() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     DateTime result = test.toDateTimeISO(); [EOL]     assertSame(DateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL] } <line_num>: 484,491
public void testToDateTime_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateTime result = test.toDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.toDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(PARIS, result.getZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.toDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL] } <line_num>: 493,517
public void testToDateTime_Chronology() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateTime result = test.toDateTime(ISO_DEFAULT); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(LONDON, result.getZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.toDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.toDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL] } <line_num>: 519,543
public void testToMutableDateTime() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     MutableDateTime result = test.toMutableDateTime(); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL] } <line_num>: 545,550
public void testToMutableDateTimeISO() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     MutableDateTime result = test.toMutableDateTimeISO(); [EOL]     assertSame(MutableDateTime.class, result.getClass()); [EOL]     assertSame(ISOChronology.class, result.getChronology().getClass()); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL] } <line_num>: 552,559
public void testToMutableDateTime_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     MutableDateTime result = test.toMutableDateTime(LONDON); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.toMutableDateTime(PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.toMutableDateTime((DateTimeZone) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL] } <line_num>: 561,581
public void testToMutableDateTime_Chronology() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     MutableDateTime result = test.toMutableDateTime(ISO_DEFAULT); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.toMutableDateTime(GREGORIAN_PARIS); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.toMutableDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.toMutableDateTime((Chronology) null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL] } <line_num>: 583,603
public void testToDate() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     Date result = test.toDate(); [EOL]     assertEquals(test.getMillis(), result.getTime()); [EOL] } <line_num>: 605,609
public void testToCalendar_Locale() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     Calendar result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(null); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toCalendar(Locale.UK); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] } <line_num>: 611,626
public void testToGregorianCalendar() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     GregorianCalendar result = test.toGregorianCalendar(); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/London"), result.getTimeZone()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, PARIS); [EOL]     result = test.toGregorianCalendar(); [EOL]     assertEquals(test.getMillis(), result.getTime().getTime()); [EOL]     assertEquals(TimeZone.getTimeZone("Europe/Paris"), result.getTimeZone()); [EOL] } <line_num>: 628,638
public void testToYearMonthDay() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     YearMonthDay test = base.toYearMonthDay(); [EOL]     assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] } <line_num>: 641,645
public void testToLocalDate() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     LocalDate test = base.toLocalDate(); [EOL]     assertEquals(new LocalDate(TEST_TIME1_UTC, COPTIC_DEFAULT), test); [EOL] } <line_num>: 647,651
public void testToInterval() { [EOL]     DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT); [EOL]     Interval test = base.toInterval(); [EOL]     DateMidnight end = base.plus(Period.days(1)); [EOL]     assertEquals(new Interval(base, end), test); [EOL] } <line_num>: 653,658
public void testWithMillis_long() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withMillis(TEST_TIME2_UTC); [EOL]     assertEquals(TEST_TIME2_LONDON, result.getMillis()); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withMillis(TEST_TIME2_UTC); [EOL]     assertEquals(TEST_TIME2_PARIS, result.getMillis()); [EOL]     assertEquals(test.getChronology(), result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withMillis(TEST_TIME1_UTC); [EOL]     assertSame(test, result); [EOL] } <line_num>: 661,675
public void testWithChronology_Chronology() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withChronology(GREGORIAN_PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(GREGORIAN_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withChronology(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON - DateTimeConstants.MILLIS_PER_DAY, result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withChronology(null); [EOL]     assertEquals(test.getMillis(), result.getMillis()); [EOL]     assertEquals(ISO_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withChronology(ISO_DEFAULT); [EOL]     assertSame(test, result); [EOL] } <line_num>: 677,699
public void testWithZoneRetainFields_DateTimeZone() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC); [EOL]     DateMidnight result = test.withZoneRetainFields(PARIS); [EOL]     assertEquals(TEST_TIME1_LONDON, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_PARIS, result.getMillis()); [EOL]     assertEquals(ISO_PARIS, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertEquals(TEST_TIME1_PARIS, test.getMillis()); [EOL]     assertEquals(TEST_TIME1_LONDON, result.getMillis()); [EOL]     assertEquals(GREGORIAN_DEFAULT, result.getChronology()); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withZoneRetainFields(null); [EOL]     assertSame(test, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology()); [EOL]     result = test.withZoneRetainFields(LONDON); [EOL]     assertSame(test, result); [EOL] } <line_num>: 701,725
public void testWithFields_RPartial() { [EOL]     DateMidnight test = new DateMidnight(2004, 5, 6); [EOL]     DateMidnight result = test.withFields(new YearMonthDay(2003, 4, 5)); [EOL]     DateMidnight expected = new DateMidnight(2003, 4, 5); [EOL]     assertEquals(expected, result); [EOL]     test = new DateMidnight(TEST_TIME1_UTC); [EOL]     result = test.withFields(null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 728,737
public void testWithField1() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withField(DateTimeFieldType.year(), 2006); [EOL]     assertEquals(new DateMidnight(2004, 6, 9), test); [EOL]     assertEquals(new DateMidnight(2006, 6, 9), result); [EOL] } <line_num>: 740,746
public void testWithField2() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     try { [EOL]         test.withField(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 748,754
public void testWithFieldAdded1() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 6); [EOL]     assertEquals(new DateMidnight(2004, 6, 9), test); [EOL]     assertEquals(new DateMidnight(2010, 6, 9), result); [EOL] } <line_num>: 757,763
public void testWithFieldAdded2() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 765,771
public void testWithFieldAdded3() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     try { [EOL]         test.withFieldAdded(null, 6); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 773,779
public void testWithFieldAdded4() { [EOL]     DateMidnight test = new DateMidnight(2004, 6, 9); [EOL]     DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 781,785
public void testWithDurationAdded_long_int() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.withDurationAdded(123456789L, 1); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(123456789L, 2); [EOL]     expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(123456789L, -3); [EOL]     expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 788,804
public void testWithDurationAdded_RD_int() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.withDurationAdded(new Duration(123456789L), 1); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), 2); [EOL]     expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withDurationAdded(new Duration(123456789L), -3); [EOL]     expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 807,826
public void testWithDurationAdded_RP_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1); [EOL]     DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withPeriodAdded(null, 1); [EOL]     assertSame(test, result); [EOL]     result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 0); [EOL]     assertSame(test, result); [EOL]     result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3); [EOL]     expected = new DateMidnight(2005, 11, 15, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1); [EOL]     expected = new DateMidnight(2001, 3, 1, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 829,848
public void testPlus_long() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(123456789L); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 851,856
public void testPlus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 858,866
public void testPlus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8)); [EOL]     DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 868,876
public void testPlusYears_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusYears(1); [EOL]     DateMidnight expected = new DateMidnight(2003, 5, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 878,886
public void testPlusMonths_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusMonths(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 6, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 888,896
public void testPlusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 10, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusWeeks(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 898,906
public void testPlusDays_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.plusDays(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 4, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.plusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 908,916
public void testMinus_long() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(123456789L); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL] } <line_num>: 919,924
public void testMinus_RD() { [EOL]     DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(new Duration(123456789L)); [EOL]     DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadableDuration) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 926,934
public void testMinus_RP() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1)); [EOL]     DateMidnight expected = new DateMidnight(2001, 3, 25, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minus((ReadablePeriod) null); [EOL]     assertSame(test, result); [EOL] } <line_num>: 936,944
public void testMinusYears_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusYears(1); [EOL]     DateMidnight expected = new DateMidnight(2001, 5, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusYears(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 946,954
public void testMinusMonths_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusMonths(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 3, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusMonths(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 956,964
public void testMinusWeeks_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusWeeks(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusWeeks(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 966,974
public void testMinusDays_int() { [EOL]     DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT); [EOL]     DateMidnight result = test.minusDays(1); [EOL]     DateMidnight expected = new DateMidnight(2002, 5, 2, BUDDHIST_DEFAULT); [EOL]     assertEquals(expected, result); [EOL]     result = test.minusDays(0); [EOL]     assertSame(test, result); [EOL] } <line_num>: 976,984
public DurationFieldType getDurationType() { [EOL]     return DurationFieldType.weeks(); [EOL] } <line_num>: 995,997
public DurationFieldType getRangeDurationType() { [EOL]     return null; [EOL] } <line_num>: 998,1000
public DateTimeField getField(Chronology chronology) { [EOL]     return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL] } <line_num>: 1001,1003
public void testProperty() { [EOL]     DateMidnight test = new DateMidnight(); [EOL]     assertEquals(test.year(), test.property(DateTimeFieldType.year())); [EOL]     assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek())); [EOL]     assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear())); [EOL]     assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond())); [EOL]     DateTimeFieldType bad = new DateTimeFieldType("bad") { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         public DurationFieldType getDurationType() { [EOL]             return DurationFieldType.weeks(); [EOL]         } [EOL]  [EOL]         public DurationFieldType getRangeDurationType() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public DateTimeField getField(Chronology chronology) { [EOL]             return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType())); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         test.property(bad); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.property(null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 987,1013
private void check(DateMidnight test, int year, int month, int day) { [EOL]     assertEquals(year, test.getYear()); [EOL]     assertEquals(month, test.getMonthOfYear()); [EOL]     assertEquals(day, test.getDayOfMonth()); [EOL] } <line_num>: 1016,1020
