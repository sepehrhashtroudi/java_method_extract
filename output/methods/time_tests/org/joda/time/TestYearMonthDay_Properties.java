public TestYearMonthDay_Properties(String name) { [EOL]     super(name); [EOL] } <line_num>: 63,65
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(suite()); [EOL] } <line_num>: 55,57
public static TestSuite suite() { [EOL]     return new TestSuite(TestYearMonthDay_Properties.class); [EOL] } <line_num>: 59,61
protected void setUp() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW); [EOL]     zone = DateTimeZone.getDefault(); [EOL]     DateTimeZone.setDefault(DateTimeZone.UTC); [EOL]     systemDefaultLocale = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL] } <line_num>: 67,73
protected void tearDown() throws Exception { [EOL]     DateTimeUtils.setCurrentMillisSystem(); [EOL]     DateTimeZone.setDefault(zone); [EOL]     zone = null; [EOL]     Locale.setDefault(systemDefaultLocale); [EOL]     systemDefaultLocale = null; [EOL] } <line_num>: 75,81
public void testPropertyGetYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().year(), test.year().getField()); [EOL]     assertEquals("year", test.year().getName()); [EOL]     assertEquals("Property[year]", test.year().toString()); [EOL]     assertSame(test, test.year().getReadablePartial()); [EOL]     assertSame(test, test.year().getYearMonthDay()); [EOL]     assertEquals(1972, test.year().get()); [EOL]     assertEquals("1972", test.year().getAsString()); [EOL]     assertEquals("1972", test.year().getAsText()); [EOL]     assertEquals("1972", test.year().getAsText(Locale.FRENCH)); [EOL]     assertEquals("1972", test.year().getAsShortText()); [EOL]     assertEquals("1972", test.year().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().years(), test.year().getDurationField()); [EOL]     assertEquals(null, test.year().getRangeDurationField()); [EOL]     assertEquals(9, test.year().getMaximumTextLength(null)); [EOL]     assertEquals(9, test.year().getMaximumShortTextLength(null)); [EOL] } <line_num>: 84,101
public void testPropertyGetMaxMinValuesYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(-292275054, test.year().getMinimumValue()); [EOL]     assertEquals(-292275054, test.year().getMinimumValueOverall()); [EOL]     assertEquals(292278993, test.year().getMaximumValue()); [EOL]     assertEquals(292278993, test.year().getMaximumValueOverall()); [EOL] } <line_num>: 103,109
public void testPropertyAddYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.year().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(292277023 - 1972); [EOL]     check(copy, 292277023, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(292278993 - 1972 + 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL]     copy = test.year().addToCopy(-1972); [EOL]     check(copy, 0, 6, 9); [EOL]     copy = test.year().addToCopy(-1973); [EOL]     check(copy, -1, 6, 9); [EOL]     try { [EOL]         test.year().addToCopy(-292275054 - 1972 - 1); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     check(test, 1972, 6, 9); [EOL] } <line_num>: 111,140
public void testPropertyAddWrapFieldYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.year().addWrapFieldToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1981, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(0); [EOL]     check(copy, 1972, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1); [EOL]     check(copy, -292275054, 6, 9); [EOL]     copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1); [EOL]     check(copy, 292278993, 6, 9); [EOL] } <line_num>: 142,156
public void testPropertySetYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.year().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 12, 6, 9); [EOL] } <line_num>: 158,163
public void testPropertySetTextYear() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.year().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 12, 6, 9); [EOL] } <line_num>: 165,170
public void testPropertyCompareToYear() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.year().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.year().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.year().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.year().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 172,192
public void testPropertyGetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField()); [EOL]     assertEquals("monthOfYear", test.monthOfYear().getName()); [EOL]     assertEquals("Property[monthOfYear]", test.monthOfYear().toString()); [EOL]     assertSame(test, test.monthOfYear().getReadablePartial()); [EOL]     assertSame(test, test.monthOfYear().getYearMonthDay()); [EOL]     assertEquals(6, test.monthOfYear().get()); [EOL]     assertEquals("6", test.monthOfYear().getAsString()); [EOL]     assertEquals("June", test.monthOfYear().getAsText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("Jun", test.monthOfYear().getAsShortText()); [EOL]     assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField()); [EOL]     assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField()); [EOL]     assertEquals(9, test.monthOfYear().getMaximumTextLength(null)); [EOL]     assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null)); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH)); [EOL]     assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH)); [EOL] } <line_num>: 195,215
public void testPropertyGetMaxMinValuesMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValue()); [EOL]     assertEquals(1, test.monthOfYear().getMinimumValueOverall()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValue()); [EOL]     assertEquals(12, test.monthOfYear().getMaximumValueOverall()); [EOL] } <line_num>: 217,223
public void testPropertyAddMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addToCopy(6); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().addToCopy(7); [EOL]     check(copy, 1973, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-5); [EOL]     check(copy, 1972, 1, 9); [EOL]     copy = test.monthOfYear().addToCopy(-6); [EOL]     check(copy, 1971, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] } <line_num>: 225,253
public void testPropertyAddWrapFieldMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().addWrapFieldToCopy(4); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 10, 9); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(8); [EOL]     check(copy, 1972, 2, 9); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(-8); [EOL]     check(copy, 1972, 10, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(1); [EOL]     check(copy, 1972, 2, 29); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(2); [EOL]     check(copy, 1972, 3, 31); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(3); [EOL]     check(copy, 1972, 4, 30); [EOL]     test = new YearMonthDay(1971, 1, 31); [EOL]     copy = test.monthOfYear().addWrapFieldToCopy(1); [EOL]     check(copy, 1971, 2, 28); [EOL] } <line_num>: 255,280
public void testPropertySetMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     test = new YearMonthDay(1972, 1, 31); [EOL]     copy = test.monthOfYear().setCopy(2); [EOL]     check(copy, 1972, 2, 29); [EOL]     try { [EOL]         test.monthOfYear().setCopy(13); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.monthOfYear().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 282,300
public void testPropertySetTextMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.monthOfYear().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().setCopy("December"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL]     copy = test.monthOfYear().setCopy("Dec"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 12, 9); [EOL] } <line_num>: 302,315
public void testPropertyCompareToMonth() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.monthOfYear().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 317,337
public void testPropertyGetDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField()); [EOL]     assertEquals("dayOfMonth", test.dayOfMonth().getName()); [EOL]     assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString()); [EOL]     assertSame(test, test.dayOfMonth().getReadablePartial()); [EOL]     assertSame(test, test.dayOfMonth().getYearMonthDay()); [EOL]     assertEquals(9, test.dayOfMonth().get()); [EOL]     assertEquals("9", test.dayOfMonth().getAsString()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH)); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText()); [EOL]     assertEquals("9", test.dayOfMonth().getAsShortText(Locale.FRENCH)); [EOL]     assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField()); [EOL]     assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField()); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumTextLength(null)); [EOL]     assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null)); [EOL] } <line_num>: 340,357
public void testPropertyGetMaxMinValuesDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValue()); [EOL]     assertEquals(1, test.dayOfMonth().getMinimumValueOverall()); [EOL]     assertEquals(30, test.dayOfMonth().getMaximumValue()); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValueOverall()); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     assertEquals(31, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1972, 2, 9); [EOL]     assertEquals(29, test.dayOfMonth().getMaximumValue()); [EOL]     test = new YearMonthDay(1971, 2, 9); [EOL]     assertEquals(28, test.dayOfMonth().getMaximumValue()); [EOL] } <line_num>: 359,371
public void testPropertyAddDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().addToCopy(9); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 18); [EOL]     copy = test.dayOfMonth().addToCopy(21); [EOL]     check(copy, 1972, 6, 30); [EOL]     copy = test.dayOfMonth().addToCopy(22); [EOL]     check(copy, 1972, 7, 1); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 30); [EOL]     check(copy, 1972, 7, 31); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31); [EOL]     check(copy, 1972, 8, 1); [EOL]     copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     check(copy, 1972, 12, 31); [EOL]     copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31); [EOL]     check(copy, 1973, 1, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-8); [EOL]     check(copy, 1972, 6, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-9); [EOL]     check(copy, 1972, 5, 31); [EOL]     copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31); [EOL]     check(copy, 1972, 1, 1); [EOL]     copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31); [EOL]     check(copy, 1971, 12, 31); [EOL] } <line_num>: 373,408
public void testPropertyAddWrapFieldDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 30); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     check(copy, 1972, 6, 1); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     check(copy, 1972, 6, 27); [EOL]     test = new YearMonthDay(1972, 7, 9); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(21); [EOL]     check(copy, 1972, 7, 30); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(22); [EOL]     check(copy, 1972, 7, 31); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(23); [EOL]     check(copy, 1972, 7, 1); [EOL]     copy = test.dayOfMonth().addWrapFieldToCopy(-12); [EOL]     check(copy, 1972, 7, 28); [EOL] } <line_num>: 410,434
public void testPropertySetDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy(12); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL]     try { [EOL]         test.dayOfMonth().setCopy(31); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         test.dayOfMonth().setCopy(0); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 436,450
public void testPropertySetTextDay() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().setCopy("12"); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 12); [EOL] } <line_num>: 452,457
public void testPropertyWithMaximumValueDayOfMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().withMaximumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 30); [EOL] } <line_num>: 459,464
public void testPropertyWithMinimumValueDayOfMonth() { [EOL]     YearMonthDay test = new YearMonthDay(1972, 6, 9); [EOL]     YearMonthDay copy = test.dayOfMonth().withMinimumValue(); [EOL]     check(test, 1972, 6, 9); [EOL]     check(copy, 1972, 6, 1); [EOL] } <line_num>: 466,471
public void testPropertyCompareToDay() { [EOL]     YearMonthDay test1 = new YearMonthDay(TEST_TIME1); [EOL]     YearMonthDay test2 = new YearMonthDay(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadablePartial) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL]     DateTime dt1 = new DateTime(TEST_TIME1); [EOL]     DateTime dt2 = new DateTime(TEST_TIME2); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0); [EOL]     assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0); [EOL]     assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0); [EOL]     try { [EOL]         test1.dayOfMonth().compareTo((ReadableInstant) null); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 473,493
public void testPropertyEquals() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 11, 8); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 11, 9); [EOL]     YearMonthDay test3 = new YearMonthDay(2005, 11, 8, CopticChronology.getInstanceUTC()); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.year())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.year())); [EOL]     assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear())); [EOL]     assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth())); [EOL]     assertEquals(false, test1.dayOfMonth().equals(null)); [EOL]     assertEquals(false, test1.dayOfMonth().equals("any")); [EOL]     assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth())); [EOL] } <line_num>: 495,518
public void testPropertyHashCode() { [EOL]     YearMonthDay test1 = new YearMonthDay(2005, 11, 8); [EOL]     YearMonthDay test2 = new YearMonthDay(2005, 11, 9); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode()); [EOL]     assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode()); [EOL] } <line_num>: 520,527
public void testPropertyEqualsHashCodeLenient() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] } <line_num>: 529,539
public void testPropertyEqualsHashCodeStrict() { [EOL]     YearMonthDay test1 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     YearMonthDay test2 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS)); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth())); [EOL]     assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth())); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode()); [EOL]     assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode()); [EOL] } <line_num>: 541,551
private void check(YearMonthDay test, int year, int month, int day) { [EOL]     assertEquals(year, test.getYear()); [EOL]     assertEquals(month, test.getMonthOfYear()); [EOL]     assertEquals(day, test.getDayOfMonth()); [EOL] } <line_num>: 554,558
