public JXPathTestCase(String name) { [EOL]     super(name); [EOL]     Locale.setDefault(Locale.US); [EOL] } <line_num>: 45,48
protected void assertXPathValue(JXPathContext ctx, String xpath, Object expected) { [EOL]     ctx.setLenient(false); [EOL]     Object actual = ctx.getValue(xpath); [EOL]     assertEquals("Evaluating <" + xpath + ">", expected, actual); [EOL] } <line_num>: 50,56
protected void assertXPathValue(JXPathContext ctx, String xpath, Object expected, Class resultType) { [EOL]     ctx.setLenient(false); [EOL]     Object actual = ctx.getValue(xpath, resultType); [EOL]     assertEquals("Evaluating <" + xpath + ">", expected, actual); [EOL] } <line_num>: 58,64
protected void assertXPathValueLenient(JXPathContext ctx, String xpath, Object expected) { [EOL]     ctx.setLenient(true); [EOL]     Object actual = ctx.getValue(xpath); [EOL]     ctx.setLenient(false); [EOL]     assertEquals("Evaluating lenient <" + xpath + ">", expected, actual); [EOL] } <line_num>: 66,73
protected void assertXPathSetValue(JXPathContext ctx, String xpath, Object value) { [EOL]     assertXPathSetValue(ctx, xpath, value, value); [EOL] } <line_num>: 75,79
protected void assertXPathSetValue(JXPathContext ctx, String xpath, Object value, Object expected) { [EOL]     ctx.setValue(xpath, value); [EOL]     Object actual = ctx.getValue(xpath); [EOL]     assertEquals("Modifying <" + xpath + ">", expected, actual); [EOL] } <line_num>: 81,87
protected void assertXPathCreatePath(JXPathContext ctx, String xpath, Object expectedValue, String expectedPath) { [EOL]     Pointer pointer = ctx.createPath(xpath); [EOL]     assertEquals("Creating path <" + xpath + ">", expectedPath, pointer.asPath()); [EOL]     assertEquals("Creating path (pointer value) <" + xpath + ">", expectedValue, pointer.getValue()); [EOL]     assertEquals("Creating path (context value) <" + xpath + ">", expectedValue, ctx.getValue(pointer.asPath())); [EOL] } <line_num>: 89,102
protected void assertXPathCreatePathAndSetValue(JXPathContext ctx, String xpath, Object value, String expectedPath) { [EOL]     Pointer pointer = ctx.createPathAndSetValue(xpath, value); [EOL]     assertEquals("Creating path <" + xpath + ">", expectedPath, pointer.asPath()); [EOL]     assertEquals("Creating path (pointer value) <" + xpath + ">", value, pointer.getValue()); [EOL]     assertEquals("Creating path (context value) <" + xpath + ">", value, ctx.getValue(pointer.asPath())); [EOL] } <line_num>: 104,117
protected void assertXPathPointer(JXPathContext ctx, String xpath, String expected) { [EOL]     ctx.setLenient(false); [EOL]     Pointer pointer = ctx.getPointer(xpath); [EOL]     String actual = pointer.toString(); [EOL]     assertEquals("Evaluating pointer <" + xpath + ">", expected, actual); [EOL] } <line_num>: 119,126
protected void assertXPathPointerLenient(JXPathContext ctx, String xpath, String expected) { [EOL]     ctx.setLenient(true); [EOL]     Pointer pointer = ctx.getPointer(xpath); [EOL]     String actual = pointer.toString(); [EOL]     assertEquals("Evaluating pointer <" + xpath + ">", expected, actual); [EOL] } <line_num>: 128,135
protected void assertXPathValueAndPointer(JXPathContext ctx, String xpath, Object expectedValue, String expectedPointer) { [EOL]     assertXPathValue(ctx, xpath, expectedValue); [EOL]     assertXPathPointer(ctx, xpath, expectedPointer); [EOL] } <line_num>: 137,142
protected void assertXPathValueIterator(JXPathContext ctx, String xpath, Collection expected) { [EOL]     Collection actual; [EOL]     if (expected instanceof List) { [EOL]         actual = new ArrayList(); [EOL]     } else { [EOL]         actual = new HashSet(); [EOL]     } [EOL]     Iterator it = ctx.iterate(xpath); [EOL]     while (it.hasNext()) { [EOL]         actual.add(it.next()); [EOL]     } [EOL]     assertEquals("Evaluating value iterator <" + xpath + ">", expected, actual); [EOL] } <line_num>: 144,160
protected void assertXPathPointerIterator(JXPathContext ctx, String xpath, Collection expected) { [EOL]     Collection actual; [EOL]     if (expected instanceof List) { [EOL]         actual = new ArrayList(); [EOL]     } else { [EOL]         actual = new HashSet(); [EOL]     } [EOL]     Iterator it = ctx.iteratePointers(xpath); [EOL]     while (it.hasNext()) { [EOL]         Pointer pointer = (Pointer) it.next(); [EOL]         actual.add(pointer.toString()); [EOL]     } [EOL]     assertEquals("Evaluating pointer iterator <" + xpath + ">", expected, actual); [EOL] } <line_num>: 162,183
protected void assertDocumentOrder(JXPathContext context, String path1, String path2, int expected) { [EOL]     NodePointer np1 = (NodePointer) context.getPointer(path1); [EOL]     NodePointer np2 = (NodePointer) context.getPointer(path2); [EOL]     int res = np1.compareTo(np2); [EOL]     if (res < 0) { [EOL]         res = -1; [EOL]     } else if (res > 0) { [EOL]         res = 1; [EOL]     } [EOL]     assertEquals("Comparing paths '" + path1 + "' and '" + path2 + "'", expected, res); [EOL] } <line_num>: 185,204
protected void assertXPathValueType(JXPathContext ctx, String xpath, Class clazz) { [EOL]     ctx.setLenient(false); [EOL]     Object actual = ctx.getValue(xpath); [EOL]     assertTrue("Evaluating <" + xpath + "> = " + actual.getClass(), clazz.isAssignableFrom(actual.getClass())); [EOL] } <line_num>: 206,215
protected void assertXPathNodeType(JXPathContext ctx, String xpath, Class clazz) { [EOL]     ctx.setLenient(false); [EOL]     Pointer actual = ctx.getPointer(xpath); [EOL]     assertTrue("Evaluating <" + xpath + "> = " + actual.getNode().getClass(), clazz.isAssignableFrom(actual.getNode().getClass())); [EOL] } <line_num>: 217,226
protected static List list() { [EOL]     return Collections.EMPTY_LIST; [EOL] } <line_num>: 228,230
protected static List list(Object o1) { [EOL]     List list = new ArrayList(); [EOL]     list.add(o1); [EOL]     return list; [EOL] } <line_num>: 232,236
protected static List list(Object o1, Object o2) { [EOL]     List list = new ArrayList(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     return list; [EOL] } <line_num>: 238,243
protected static List list(Object o1, Object o2, Object o3) { [EOL]     List list = new ArrayList(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     return list; [EOL] } <line_num>: 245,251
protected static Set set(Object o1, Object o2, Object o3) { [EOL]     Set list = new HashSet(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     return list; [EOL] } <line_num>: 253,259
protected static List list(Object o1, Object o2, Object o3, Object o4) { [EOL]     List list = new ArrayList(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     list.add(o4); [EOL]     return list; [EOL] } <line_num>: 261,268
protected static Set set(Object o1, Object o2, Object o3, Object o4) { [EOL]     Set list = new HashSet(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     list.add(o4); [EOL]     return list; [EOL] } <line_num>: 270,277
protected static List list(Object o1, Object o2, Object o3, Object o4, Object o5) { [EOL]     List list = new ArrayList(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     list.add(o4); [EOL]     list.add(o5); [EOL]     return list; [EOL] } <line_num>: 279,289
protected static Set set(Object o1, Object o2, Object o3, Object o4, Object o5) { [EOL]     Set list = new HashSet(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     list.add(o4); [EOL]     list.add(o5); [EOL]     return list; [EOL] } <line_num>: 291,301
protected static List list(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) { [EOL]     List list = new ArrayList(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     list.add(o4); [EOL]     list.add(o5); [EOL]     list.add(o6); [EOL]     return list; [EOL] } <line_num>: 303,314
protected static Set set(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) { [EOL]     Set list = new HashSet(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     list.add(o4); [EOL]     list.add(o5); [EOL]     list.add(o6); [EOL]     return list; [EOL] } <line_num>: 316,327
protected static List list(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) { [EOL]     List list = new ArrayList(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     list.add(o4); [EOL]     list.add(o5); [EOL]     list.add(o6); [EOL]     list.add(o7); [EOL]     return list; [EOL] } <line_num>: 329,341
protected static Set set(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) { [EOL]     Set list = new HashSet(); [EOL]     list.add(o1); [EOL]     list.add(o2); [EOL]     list.add(o3); [EOL]     list.add(o4); [EOL]     list.add(o5); [EOL]     list.add(o6); [EOL]     list.add(o7); [EOL]     return list; [EOL] } <line_num>: 343,355
