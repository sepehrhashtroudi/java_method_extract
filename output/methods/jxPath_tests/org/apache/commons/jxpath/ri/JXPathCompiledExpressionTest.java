public JXPathCompiledExpressionTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 58,60
public void testConstant() { [EOL]     assertXPathExpression("1", Constant.class); [EOL]     assertXPathExpression("1.5", Constant.class); [EOL]     assertXPathExpression("'foo'", Constant.class); [EOL] } <line_num>: 62,66
public void testCoreFunction() { [EOL]     assertXPathExpression("last()", CoreFunction.class); [EOL]     assertXPathExpression("position()", CoreFunction.class); [EOL]     assertXPathExpression("count(book)", CoreFunction.class); [EOL]     assertXPathExpression("id(13)", CoreFunction.class); [EOL]     assertXPathExpression("local-name()", CoreFunction.class); [EOL]     assertXPathExpression("local-name(book)", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri()", CoreFunction.class); [EOL]     assertXPathExpression("namespace-uri(book)", CoreFunction.class); [EOL]     assertXPathExpression("name()", CoreFunction.class); [EOL]     assertXPathExpression("name(book)", CoreFunction.class); [EOL]     assertXPathExpression("string(3)", CoreFunction.class); [EOL]     assertXPathExpression("concat('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("starts-with('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("contains('a', 'b')", CoreFunction.class); [EOL]     assertXPathExpression("substring-before('a', 1)", CoreFunction.class); [EOL]     assertXPathExpression("substring-after('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2)", CoreFunction.class); [EOL]     assertXPathExpression("substring('a', 2, 3)", CoreFunction.class); [EOL]     assertXPathExpression("string-length('a')", CoreFunction.class); [EOL]     assertXPathExpression("normalize-space('a')", CoreFunction.class); [EOL]     assertXPathExpression("translate('a', 'b', 'c')", CoreFunction.class); [EOL]     assertXPathExpression("boolean('true')", CoreFunction.class); [EOL]     assertXPathExpression("not(1)", CoreFunction.class); [EOL]     assertXPathExpression("true()", CoreFunction.class); [EOL]     assertXPathExpression("false()", CoreFunction.class); [EOL]     assertXPathExpression("lang('fr')", CoreFunction.class); [EOL]     assertXPathExpression("number('12')", CoreFunction.class); [EOL]     assertXPathExpression("sum(book/price)", CoreFunction.class); [EOL]     assertXPathExpression("floor(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("ceiling(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("round(11.4)", CoreFunction.class); [EOL]     assertXPathExpression("key('title', 'Hobbit')", CoreFunction.class); [EOL]     assertXPathExpression("format-number(12, '##')", CoreFunction.class); [EOL] } <line_num>: 68,102
public void testCoreOperationAnd() { [EOL]     assertXPathExpression("2 and 4", CoreOperationAnd.class); [EOL]     assertXPathExpression("2 > 1 and 4 < 5", CoreOperationAnd.class); [EOL] } <line_num>: 104,112
public void testCoreOperationOr() { [EOL]     assertXPathExpression("2 or 4", CoreOperationOr.class); [EOL]     assertXPathExpression("2 > 1 or 4 < 5", CoreOperationOr.class); [EOL]     assertXPathExpression("1 > 1 and 2 <= 2 or 3 = 4", CoreOperationOr.class); [EOL] } <line_num>: 114,126
public void testCoreOperationEqual() { [EOL]     assertXPathExpression("2 = 4", CoreOperationEqual.class); [EOL]     assertXPathExpression("2 + 1 = 3", CoreOperationEqual.class); [EOL] } <line_num>: 128,136
public void testCoreOperationNameAttributeTest() { [EOL]     assertXPathExpression("@name = 'bar'", NameAttributeTest.class); [EOL] } <line_num>: 138,142
public void testCoreOperationNotEqual() { [EOL]     assertXPathExpression("2 != 4", CoreOperationNotEqual.class); [EOL]     assertXPathExpression("2 + 1 != 3", CoreOperationNotEqual.class); [EOL] } <line_num>: 144,152
public void testCoreOperationLessThan() { [EOL]     assertXPathExpression("3<4", CoreOperationLessThan.class, "3 < 4"); [EOL]     assertXPathExpression("3<(2>=1)", CoreOperationLessThan.class, "3 < (2 >= 1)"); [EOL] } <line_num>: 154,164
public void testCoreOperationLessThanOrEqual() { [EOL]     assertXPathExpression("3<=4", CoreOperationLessThanOrEqual.class, "3 <= 4"); [EOL]     assertXPathExpression("3<=(2>=1)", CoreOperationLessThanOrEqual.class, "3 <= (2 >= 1)"); [EOL] } <line_num>: 166,176
public void testCoreOperationGreaterThan() { [EOL]     assertXPathExpression("3>4", CoreOperationGreaterThan.class, "3 > 4"); [EOL]     assertXPathExpression("3>(2>=1)", CoreOperationGreaterThan.class, "3 > (2 >= 1)"); [EOL]     assertXPathExpression("1 > (1 and 2 <= (2 or 3) = 4)", CoreOperationGreaterThan.class); [EOL] } <line_num>: 178,192
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] } <line_num>: 194,204
public void testCoreOperationDivide() { [EOL]     assertXPathExpression("2 div 4", CoreOperationDivide.class); [EOL]     assertXPathExpression("2|3 div -3", CoreOperationDivide.class, "2 | 3 div -3"); [EOL] } <line_num>: 206,215
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] } <line_num>: 217,226
public void testCoreOperationMultiply() { [EOL]     assertXPathExpression("2*4", CoreOperationMultiply.class, "2 * 4"); [EOL]     assertXPathExpression("2*(3 + 1)", CoreOperationMultiply.class, "2 * (3 + 1)"); [EOL] } <line_num>: 228,238
public void testCoreOperationMinus() { [EOL]     assertXPathExpression("1 - 1", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - 1 - 2", CoreOperationSubtract.class); [EOL]     assertXPathExpression("1 - (1 - 2)", CoreOperationSubtract.class); [EOL] } <line_num>: 240,252
public void testCoreOperationSum() { [EOL]     assertXPathExpression("3 + 1 + 4", CoreOperationAdd.class); [EOL]     assertXPathExpression("(3 + 1) + 4", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + (1 + 4)", CoreOperationAdd.class, "3 + 1 + 4"); [EOL]     assertXPathExpression("3 + -1", CoreOperationAdd.class, "3 + -1"); [EOL]     assertXPathExpression("2*-3 + -1", CoreOperationAdd.class, "2 * -3 + -1"); [EOL] } <line_num>: 254,278
public void testCoreOperationUnaryMinus() { [EOL]     assertXPathExpression("-3", CoreOperationNegate.class); [EOL]     assertXPathExpression("-(3 + 1)", CoreOperationNegate.class); [EOL] } <line_num>: 280,283
public void testCoreOperationUnion() { [EOL]     assertXPathExpression("3 | 1 | 4", CoreOperationUnion.class); [EOL] } <line_num>: 285,289
public void testExpressionPath() { [EOL]     assertXPathExpression("$x/foo/bar", ExpressionPath.class); [EOL]     assertXPathExpression("(2 + 2)/foo/bar", ExpressionPath.class); [EOL]     assertXPathExpression("$x[3][2 + 2]/foo/bar", ExpressionPath.class); [EOL] } <line_num>: 291,301
public void testExtensionFunction() { [EOL]     assertXPathExpression("my:function(3, other.function())", ExtensionFunction.class); [EOL] } <line_num>: 303,307
public void testLocationPathAxisSelf() { [EOL]     assertXPathExpression("self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression(".", LocationPath.class); [EOL] } <line_num>: 309,317
public void testLocationPathAxisChild() { [EOL]     assertXPathExpression("child::foo:bar", LocationPath.class, "foo:bar"); [EOL]     assertXPathExpression("foo:bar", LocationPath.class); [EOL]     assertXPathExpression("/foo:bar", LocationPath.class); [EOL]     assertXPathExpression("/foo/bar", LocationPath.class); [EOL]     assertXPathExpression("*", LocationPath.class); [EOL]     assertXPathExpression("foo:*", LocationPath.class); [EOL] } <line_num>: 319,345
public void testLocationPathAxisParent() { [EOL]     assertXPathExpression("parent::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("..", LocationPath.class); [EOL] } <line_num>: 347,355
public void testLocationPathAxisAttribute() { [EOL]     assertXPathExpression("attribute::foo:bar", LocationPath.class, "@foo:bar"); [EOL]     assertXPathExpression("@foo:bar", LocationPath.class); [EOL]     assertXPathExpression("../@foo:bar", LocationPath.class); [EOL]     assertXPathExpression("@*", LocationPath.class); [EOL]     assertXPathExpression("@*[last()]", LocationPath.class); [EOL] } <line_num>: 357,378
public void testLocationPathAxisDescendant() { [EOL]     assertXPathExpression("descendant::foo:bar", LocationPath.class); [EOL] } <line_num>: 380,384
public void testLocationPathAxisDescendantOrSelf() { [EOL]     assertXPathExpression("descendant-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("//foo", LocationPath.class); [EOL]     assertXPathExpression("foo//bar", LocationPath.class); [EOL] } <line_num>: 386,398
public void testLocationPathAxisOther() { [EOL]     assertXPathExpression("ancestor::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("ancestor-or-self::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("namespace::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("preceding-sibling::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following::foo:bar", LocationPath.class); [EOL]     assertXPathExpression("following-sibling::foo:bar", LocationPath.class); [EOL] } <line_num>: 400,428
public void testLocationPathNodeTest() { [EOL]     assertXPathExpression("node()", LocationPath.class); [EOL]     assertXPathExpression("text()", LocationPath.class); [EOL]     assertXPathExpression("comment()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction()", LocationPath.class); [EOL]     assertXPathExpression("processing-instruction('test')", LocationPath.class); [EOL] } <line_num>: 430,450
public void testVariableReference() { [EOL]     assertXPathExpression("$x", VariableReference.class); [EOL]     assertXPathExpression("$x:y", VariableReference.class); [EOL] } <line_num>: 452,460
private void assertXPathExpression(String xpath, Class expectedClass, String expected) { [EOL]     JXPathCompiledExpression expression = (JXPathCompiledExpression) JXPathContext.compile(xpath); [EOL]     assertEquals("Expression class for " + xpath, expectedClass, expression.getExpression().getClass()); [EOL]     assertEquals("Expression toString() for " + xpath, expected, expression.getExpression().toString()); [EOL] } <line_num>: 467,484
private void assertXPathExpression(String xpath, Class expectedClass) { [EOL]     assertXPathExpression(xpath, expectedClass, xpath); [EOL] } <line_num>: 486,491
