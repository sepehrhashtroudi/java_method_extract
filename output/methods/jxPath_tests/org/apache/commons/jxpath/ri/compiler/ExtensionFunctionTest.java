public ExtensionFunctionTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 59,61
public Context(Object object) { [EOL]     this.object = object; [EOL] } <line_num>: 361,363
public static void main(String[] args) { [EOL]     TestRunner.run(ExtensionFunctionTest.class); [EOL] } <line_num>: 50,52
public void setUp() { [EOL]     if (context == null) { [EOL]         context = JXPathContext.newContext(new TestBean()); [EOL]         Variables vars = context.getVariables(); [EOL]         vars.declareVariable("test", new TestFunctions(4, "test")); [EOL]         FunctionLibrary lib = new FunctionLibrary(); [EOL]         lib.addFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]         lib.addFunctions(new ClassFunctions(TestFunctions2.class, "test")); [EOL]         lib.addFunctions(new PackageFunctions("", "call")); [EOL]         lib.addFunctions(new PackageFunctions("org.apache.commons.jxpath.ri.compiler.", "jxpathtest")); [EOL]         lib.addFunctions(new PackageFunctions("", null)); [EOL]         context.setFunctions(lib); [EOL]     } [EOL]     functions = new ClassFunctions(TestFunctions.class, "test"); [EOL] } <line_num>: 63,81
public void testConstructorLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] } <line_num>: 83,91
public void testConstructorLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { "baz" }; [EOL]     Function func = functions.getFunction("test", "new", args); [EOL]     assertEquals("test:new('baz')", func.invoke(new Context(new Integer(1)), args).toString(), "foo=1; bar=baz"); [EOL] } <line_num>: 93,100
public void testStaticMethodLookup() { [EOL]     Object[] args = new Object[] { new Integer(1), "x" }; [EOL]     Function func = functions.getFunction("test", "build", args); [EOL]     assertEquals("test:build(1, x)", func.invoke(new Context(null), args).toString(), "foo=1; bar=x"); [EOL] } <line_num>: 102,109
public void testStaticMethodLookupWithConversion() { [EOL]     Object[] args = new Object[] { "7", new Integer(1) }; [EOL]     Function func = functions.getFunction("test", "build", args); [EOL]     assertEquals("test:build('7', 1)", func.invoke(new Context(null), args).toString(), "foo=7; bar=1"); [EOL] } <line_num>: 111,118
public void testMethodLookup() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "getFoo", args); [EOL]     assertEquals("test:getFoo($test, 1, x)", func.invoke(new Context(null), args).toString(), "0"); [EOL] } <line_num>: 120,127
public void testStaticMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[0]; [EOL]     Function func = functions.getFunction("test", "path", args); [EOL]     assertEquals("test:path()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] } <line_num>: 129,136
public void testMethodLookupWithExpressionContext() { [EOL]     Object[] args = new Object[] { new TestFunctions() }; [EOL]     Function func = functions.getFunction("test", "instancePath", args); [EOL]     assertEquals("test:instancePath()", func.invoke(new Context(new Integer(1)), args), "1"); [EOL] } <line_num>: 138,145
public void testMethodLookupWithExpressionContextAndArgument() { [EOL]     Object[] args = new Object[] { new TestFunctions(), "*" }; [EOL]     Function func = functions.getFunction("test", "pathWithSuffix", args); [EOL]     assertEquals("test:pathWithSuffix('*')", func.invoke(new Context(new Integer(1)), args), "1*"); [EOL] } <line_num>: 147,154
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] } <line_num>: 156,187
public void testMethodCall() { [EOL]     assertXPathValue(context, "length('foo')", new Integer(3)); [EOL]     assertXPathValue(context, "call:substring('foo', 1, 2)", "o"); [EOL]     assertXPathValue(context, "string(test:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(call:getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(getFoo($test))", "4"); [EOL]     assertXPathValue(context, "string(test:setFooAndBar($test, 7, 'biz'))", "foo=7; bar=biz"); [EOL] } <line_num>: 189,209
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] } <line_num>: 211,233
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] } <line_num>: 235,260
public void testExpressionContext() { [EOL]     assertXPathValue(context, "//.[test:isMap()]/Key1", "Value 1"); [EOL]     assertXPathValue(context, "count(//.[test:count(strings) = 3])", new Double(7)); [EOL]     assertXPathValue(context, "test:count(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "test:countPointers(//strings)", new Integer(21)); [EOL]     assertXPathValue(context, "/beans[contains(test:path(), '[2]')]/name", "Name 2"); [EOL] } <line_num>: 262,299
public void testCollectionReturn() { [EOL]     assertXPathValueIterator(context, "test:collection()/name", list("foo", "bar")); [EOL]     assertXPathPointerIterator(context, "test:collection()/name", list("/.[1]/name", "/.[2]/name")); [EOL]     assertXPathValue(context, "test:collection()/name", "foo"); [EOL]     assertXPathValue(context, "test:collection()/@name", "foo"); [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     list.add("bar"); [EOL]     context.getVariables().declareVariable("list", list); [EOL]     Object values = context.getValue("test:items($list)"); [EOL]     assertTrue("Return type: ", values instanceof Collection); [EOL]     assertEquals("Return values: ", list, new ArrayList((Collection) values)); [EOL] } <line_num>: 301,332
public void testNodeSetReturn() { [EOL]     assertXPathValueIterator(context, "test:nodeSet()/name", list("Name 1", "Name 2")); [EOL]     assertXPathPointerIterator(context, "test:nodeSet()/name", list("/beans[1]/name", "/beans[2]/name")); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/name", "Name 1", "/beans[1]/name"); [EOL]     assertXPathValueAndPointer(context, "test:nodeSet()/@name", "Name 1", "/beans[1]/@name"); [EOL] } <line_num>: 334,356
public Pointer getContextNodePointer() { [EOL]     return NodePointer.newNodePointer(null, object, Locale.getDefault()); [EOL] } <line_num>: 365,368
public List getContextNodeList() { [EOL]     return null; [EOL] } <line_num>: 370,372
public JXPathContext getJXPathContext() { [EOL]     return null; [EOL] } <line_num>: 374,376
public int getPosition() { [EOL]     return 0; [EOL] } <line_num>: 378,380
