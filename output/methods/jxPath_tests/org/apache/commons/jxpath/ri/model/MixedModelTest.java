public MixedModelTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 55,57
public static void main(String[] args) { [EOL]     TestRunner.run(new MixedModelTest("testContainerWithCollection")); [EOL] } <line_num>: 59,61
public static Test suite() { [EOL]     return (new TestSuite(MixedModelTest.class)); [EOL] } <line_num>: 66,68
public void setUp() { [EOL]     TestMixedModelBean bean = new TestMixedModelBean(); [EOL]     context = JXPathContext.newContext(bean); [EOL]     context.setFactory(new TestMixedModelFactory()); [EOL]     context.setLocale(Locale.US); [EOL]     Variables vars = context.getVariables(); [EOL]     vars.declareVariable("string", bean.getString()); [EOL]     vars.declareVariable("bean", bean.getBean()); [EOL]     vars.declareVariable("map", bean.getMap()); [EOL]     vars.declareVariable("list", bean.getList()); [EOL]     vars.declareVariable("document", bean.getDocument()); [EOL]     vars.declareVariable("element", bean.getElement()); [EOL]     vars.declareVariable("container", bean.getContainer()); [EOL]     vars.declareVariable("testnull", new TestNull()); [EOL]     int[][] matrix = new int[1][]; [EOL]     matrix[0] = new int[1]; [EOL]     matrix[0][0] = 3; [EOL]     vars.declareVariable("matrix", matrix); [EOL] } <line_num>: 70,89
public void testVar() { [EOL]     context.getVariables().declareVariable("foo:bar", "baz"); [EOL]     assertXPathValueAndPointer(context, "$foo:bar", "baz", "$foo:bar"); [EOL] } <line_num>: 91,99
public void testVarPrimitive() { [EOL]     assertXPathValueAndPointer(context, "$string", "string", "$string"); [EOL] } <line_num>: 101,103
public void testVarBean() { [EOL]     assertXPathValueAndPointer(context, "$bean/int", new Integer(1), "$bean/int"); [EOL] } <line_num>: 105,111
public void testVarMap() { [EOL]     assertXPathValueAndPointer(context, "$map/string", "string", "$map[@name='string']"); [EOL] } <line_num>: 113,119
public void testVarList() { [EOL]     assertXPathValueAndPointer(context, "$list[1]", "string", "$list[1]"); [EOL] } <line_num>: 121,123
public void testVarDocument() { [EOL]     assertXPathValueAndPointer(context, "$document/vendor/location/address/city", "Fruit Market", "$document/vendor[1]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 125,131
public void testVarElement() { [EOL]     assertXPathValueAndPointer(context, "$element/location/address/city", "Fruit Market", "$element/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 133,139
public void testVarContainer() { [EOL]     assertXPathValueAndPointer(context, "$container/vendor/location/address/city", "Fruit Market", "$container/vendor[1]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 141,147
public void testBeanPrimitive() { [EOL]     assertXPathValueAndPointer(context, "string", "string", "/string"); [EOL] } <line_num>: 151,153
public void testBeanBean() { [EOL]     assertXPathValueAndPointer(context, "bean/int", new Integer(1), "/bean/int"); [EOL] } <line_num>: 155,161
public void testBeanMap() { [EOL]     assertXPathValueAndPointer(context, "map/string", "string", "/map[@name='string']"); [EOL] } <line_num>: 163,169
public void testBeanList() { [EOL]     assertXPathValueAndPointer(context, "list[1]", "string", "/list[1]"); [EOL] } <line_num>: 171,173
public void testBeanDocument() { [EOL]     assertXPathValueAndPointer(context, "document/vendor/location/address/city", "Fruit Market", "/document/vendor[1]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 175,181
public void testBeanElement() { [EOL]     assertXPathValueAndPointer(context, "element/location/address/city", "Fruit Market", "/element/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 183,189
public void testBeanContainer() { [EOL]     assertXPathValueAndPointer(context, "container/vendor/location/address/city", "Fruit Market", "/container/vendor[1]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 191,197
public void testMapPrimitive() { [EOL]     assertXPathValueAndPointer(context, "map/string", "string", "/map[@name='string']"); [EOL] } <line_num>: 201,207
public void testMapBean() { [EOL]     assertXPathValueAndPointer(context, "map/bean/int", new Integer(1), "/map[@name='bean']/int"); [EOL] } <line_num>: 209,215
public void testMapMap() { [EOL]     assertXPathValueAndPointer(context, "map/map/string", "string", "/map[@name='map'][@name='string']"); [EOL] } <line_num>: 217,223
public void testMapList() { [EOL]     assertXPathValueAndPointer(context, "map/list[1]", "string", "/map[@name='list'][1]"); [EOL] } <line_num>: 225,231
public void testMapDocument() { [EOL]     assertXPathValueAndPointer(context, "map/document/vendor/location/address/city", "Fruit Market", "/map[@name='document']" + "/vendor[1]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 233,240
public void testMapElement() { [EOL]     assertXPathValueAndPointer(context, "map/element/location/address/city", "Fruit Market", "/map[@name='element']/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 242,248
public void testMapContainer() { [EOL]     assertXPathValueAndPointer(context, "map/container/vendor/location/address/city", "Fruit Market", "/map[@name='container']" + "/vendor[1]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 250,257
public void testListPrimitive() { [EOL]     assertXPathValueAndPointer(context, "list[1]", "string", "/list[1]"); [EOL] } <line_num>: 261,263
public void testListBean() { [EOL]     assertXPathValueAndPointer(context, "list[2]/int", new Integer(1), "/list[2]/int"); [EOL] } <line_num>: 265,271
public void testListMap() { [EOL]     assertXPathValueAndPointer(context, "list[3]/string", "string", "/list[3][@name='string']"); [EOL] } <line_num>: 273,279
public void testListList() { [EOL]     assertXPathValueAndPointer(context, "list[4]/.[1]", "string2", "/list[4]/.[1]"); [EOL] } <line_num>: 281,296
public void testListDocument() { [EOL]     assertXPathValueAndPointer(context, "list[5]/vendor/location/address/city", "Fruit Market", "/list[5]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 298,304
public void testListElement() { [EOL]     assertXPathValueAndPointer(context, "list[6]/location/address/city", "Fruit Market", "/list[6]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 306,312
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] } <line_num>: 314,320
public void testNull() { [EOL]     assertXPathPointerLenient(context, "$null", "$null"); [EOL]     assertXPathPointerLenient(context, "$null[3]", "$null[3]"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing", "$testnull/nothing"); [EOL]     assertXPathPointerLenient(context, "$testnull/nothing[2]", "$testnull/nothing[2]"); [EOL]     assertXPathPointerLenient(context, "beans[8]/int", "/beans[8]/int"); [EOL]     assertXPathValueIterator(context, "$testnull/nothing[1]", Collections.EMPTY_LIST); [EOL]     JXPathContext ctx = JXPathContext.newContext(new TestNull()); [EOL]     assertXPathValue(ctx, "nothing", null); [EOL]     assertXPathValue(ctx, "child/nothing", null); [EOL]     assertXPathValue(ctx, "array[2]", null); [EOL]     assertXPathValueLenient(ctx, "nothing/something", null); [EOL]     assertXPathValueLenient(ctx, "array[2]/something", null); [EOL] } <line_num>: 322,355
public void testRootAsCollection() { [EOL]     assertXPathValue(context, ".[1]/string", "string"); [EOL] } <line_num>: 357,359
public void testCreatePath() { [EOL]     context = JXPathContext.newContext(new TestBean()); [EOL]     context.setFactory(new TestMixedModelFactory()); [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey5']/nestedBean/int", new Integer(1), "/map[@name='TestKey5']/nestedBean/int"); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey5']/beans[2]/int", new Integer(1), "/map[@name='TestKey5']/beans[2]/int"); [EOL] } <line_num>: 361,380
public void testIterateArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathValueIterator(context, "foo", list("a", "b", "c")); [EOL] } <line_num>: 385,392
public void testIteratePointersArray() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     Iterator it = context.iteratePointers("foo"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         Pointer ptr = (Pointer) it.next(); [EOL]         actual.add(context.getValue(ptr.asPath())); [EOL]     } [EOL]     assertEquals("Iterating pointers <" + "foo" + ">", list("a", "b", "c"), actual); [EOL] } <line_num>: 394,410
public void testIteratePointersArrayElementWithVariable() { [EOL]     Map map = new HashMap(); [EOL]     map.put("foo", new String[] { "a", "b", "c" }); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     context.getVariables().declareVariable("x", new Integer(2)); [EOL]     Iterator it = context.iteratePointers("foo[$x]"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         Pointer ptr = (Pointer) it.next(); [EOL]         actual.add(context.getValue(ptr.asPath())); [EOL]     } [EOL]     assertEquals("Iterating pointers <" + "foo" + ">", list("b"), actual); [EOL] } <line_num>: 412,425
public void testIterateVector() { [EOL]     Map map = new HashMap(); [EOL]     Vector vec = new Vector(); [EOL]     vec.add(new HashMap()); [EOL]     vec.add(new HashMap()); [EOL]     map.put("vec", vec); [EOL]     JXPathContext context = JXPathContext.newContext(map); [EOL]     assertXPathPointerIterator(context, "/vec", list("/.[@name='vec'][1]", "/.[@name='vec'][2]")); [EOL] } <line_num>: 427,439
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] } <line_num>: 441,471
public void testMatrix() { [EOL]     assertXPathValueAndPointer(context, "$matrix[1]/.[1]", new Integer(3), "$matrix[1]/.[1]"); [EOL]     context.setValue("$matrix[1]/.[1]", new Integer(2)); [EOL]     assertXPathValueAndPointer(context, "matrix[1]/.[1]", new Integer(3), "/matrix[1]/.[1]"); [EOL]     context.setValue("matrix[1]/.[1]", "2"); [EOL]     assertXPathValue(context, "matrix[1]/.[1]", new Integer(2)); [EOL]     context.getVariables().declareVariable("wholebean", context.getContextBean()); [EOL]     assertXPathValueAndPointer(context, "$wholebean/matrix[1]/.[1]", new Integer(2), "$wholebean/matrix[1]/.[1]"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         context.setValue("$wholebean/matrix[1]/.[2]", "4"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception setting value of non-existent element", ex); [EOL]     ex = false; [EOL]     try { [EOL]         context.setValue("$wholebean/matrix[2]/.[1]", "4"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception setting value of non-existent element", ex); [EOL] } <line_num>: 473,519
public void testCreatePathAndSetValueWithMatrix() { [EOL]     context.setValue("matrix", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/matrix[1]/.[1]", new Integer(4), "/matrix[1]/.[1]"); [EOL] } <line_num>: 521,532
public void testCollectionPointer() { [EOL]     List list = new ArrayList(); [EOL]     Map map = new HashMap(); [EOL]     map.put("KeyOne", "SomeStringOne"); [EOL]     map.put("KeyTwo", "SomeStringTwo"); [EOL]     Map map2 = new HashMap(); [EOL]     map2.put("KeyA", "StringA"); [EOL]     map2.put("KeyB", "StringB"); [EOL]     map.put("KeyThree", map2); [EOL]     list.add(map); [EOL]     List list2 = new ArrayList(); [EOL]     list2.add("foo"); [EOL]     list2.add(map); [EOL]     list2.add(map); [EOL]     list.add(list2); [EOL]     context = JXPathContext.newContext(list); [EOL]     assertEquals("SomeStringOne", context.getValue(".[1]/KeyOne")); [EOL]     assertEquals("StringA", context.getValue(".[1]/KeyThree/KeyA")); [EOL]     assertEquals(new Integer(3), context.getValue("size(.[1]/KeyThree)")); [EOL]     assertEquals(new Double(6.0), context.getValue("count(.[1]/KeyThree/*)")); [EOL]     assertEquals(new Double(3.0), context.getValue("count(.[1]/KeyThree/KeyA)")); [EOL] } <line_num>: 537,563
