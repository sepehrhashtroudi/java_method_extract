public DynamicPropertiesModelTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 44,46
public void setUp() { [EOL]     if (context == null) { [EOL]         context = JXPathContext.newContext(new TestBean()); [EOL]         context.setFactory(new TestDynamicPropertyFactory()); [EOL]     } [EOL] } <line_num>: 48,53
public void testAxisChild() { [EOL]     assertXPathValue(context, "map/Key1", "Value 1"); [EOL]     assertXPathPointer(context, "map/Key1", "/map[@name='Key1']"); [EOL]     assertXPathValue(context, "map/Key2/name", "Name 6"); [EOL]     assertXPathPointer(context, "map/Key2/name", "/map[@name='Key2']/name"); [EOL] } <line_num>: 55,63
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//Key1", "Value 1"); [EOL] } <line_num>: 65,67
public void testAttributeName() { [EOL]     assertXPathValue(context, "map[@name = 'Key1']", "Value 1"); [EOL]     assertXPathPointer(context, "map[@name = 'Key1']", "/map[@name='Key1']"); [EOL]     assertXPathPointerLenient(context, "map[@name = 'Key&quot;&apos;&quot;&apos;1']", "/map[@name='Key&quot;&apos;&quot;&apos;1']"); [EOL]     assertXPathValue(context, "/.[@name='map']/Key2/name", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map']/Key2/name", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/map[@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/map[@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/.[@name='map'][@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map'][@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     ((Map) context.getValue("map")).put("Key:3", "value3"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:3']", "value3", "/map[@name='Key:3']"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:4:5']", null, "/map[@name='Key:4:5']"); [EOL] } <line_num>: 73,125
public void testSetPrimitiveValue() { [EOL]     assertXPathSetValue(context, "map/Key1", new Integer(6)); [EOL] } <line_num>: 127,129
public void testSetCollection() { [EOL]     context.setValue("map/Key1", new Integer[] { new Integer(7), new Integer(8) }); [EOL]     assertXPathSetValue(context, "map/Key1[1]", new Integer(9)); [EOL] } <line_num>: 131,139
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] } <line_num>: 145,153
public void testCreatePath() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey1']", "", "/map[@name='TestKey1']"); [EOL] } <line_num>: 155,166
public void testCreatePathAndSetValue() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey1']", "Test", "/map[@name='TestKey1']"); [EOL] } <line_num>: 168,179
public void testCreatePathCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey2']/int", new Integer(1), "/map[@name='TestKey2']/int"); [EOL] } <line_num>: 181,193
public void testCreatePathAndSetValueCreateBean() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey2']/int", new Integer(4), "/map[@name='TestKey2']/int"); [EOL] } <line_num>: 195,207
public void testCreatePathCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map/TestKey3[2]", null, "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePath(context, "/map[@name='TestKey3'][3]", null, "/map[@name='TestKey3'][3]"); [EOL] } <line_num>: 209,225
public void testCreatePathAndSetValueCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey3[2]", "Test1", "/map[@name='TestKey3'][2]"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map[@name='TestKey3'][3]", "Test2", "/map[@name='TestKey3'][3]"); [EOL] } <line_num>: 227,243
public void testCreatePathNewCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePath(context, "/map/TestKey4[1]/int", new Integer(1), "/map[@name='TestKey4'][1]/int"); [EOL]     bean.getMap().remove("TestKey4"); [EOL]     assertXPathCreatePath(context, "/map/TestKey4[1]/int", new Integer(1), "/map[@name='TestKey4'][1]/int"); [EOL] } <line_num>: 245,264
public void testCreatePathAndSetValueNewCollectionElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.setMap(null); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey4[1]/int", new Integer(2), "/map[@name='TestKey4'][1]/int"); [EOL]     bean.getMap().remove("TestKey4"); [EOL]     assertXPathCreatePathAndSetValue(context, "/map/TestKey4[1]/int", new Integer(3), "/map[@name='TestKey4'][1]/int"); [EOL] } <line_num>: 266,285
public void testRemovePath() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey1", "test"); [EOL]     context.removePath("map[@name = 'TestKey1']"); [EOL]     assertEquals("Remove dynamic property value", null, context.getValue("map[@name = 'TestKey1']")); [EOL] } <line_num>: 287,297
public void testRemovePathArrayElement() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     bean.getMap().put("TestKey2", new String[] { "temp1", "temp2" }); [EOL]     context.removePath("map[@name = 'TestKey2'][1]"); [EOL]     assertEquals("Remove dynamic property collection element", "temp2", context.getValue("map[@name = 'TestKey2'][1]")); [EOL] } <line_num>: 299,308
public void testCollectionOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     List list = new ArrayList(); [EOL]     bean.getMap().put("stuff", list); [EOL]     Map m = new HashMap(); [EOL]     m.put("fruit", "apple"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("berry", "watermelon"); [EOL]     list.add(m); [EOL]     m = new HashMap(); [EOL]     m.put("fruit", "banana"); [EOL]     list.add(m); [EOL]     assertXPathValueIterator(context, "/map/stuff/fruit", list("apple", "banana")); [EOL]     assertXPathValueIterator(context, "/map/stuff[@name='fruit']", list("apple", "banana")); [EOL] } <line_num>: 310,337
public void testMapOfMaps() { [EOL]     TestBean bean = (TestBean) context.getContextBean(); [EOL]     Map fruit = new HashMap(); [EOL]     fruit.put("apple", "green"); [EOL]     fruit.put("orange", "red"); [EOL]     Map meat = new HashMap(); [EOL]     meat.put("pork", "pig"); [EOL]     meat.put("beef", "cow"); [EOL]     bean.getMap().put("fruit", fruit); [EOL]     bean.getMap().put("meat", meat); [EOL]     assertXPathPointer(context, "//beef", "/map[@name='meat'][@name='beef']"); [EOL]     assertXPathPointer(context, "map//apple", "/map[@name='fruit'][@name='apple']"); [EOL]     assertXPathPointerLenient(context, "map//banana", "null()"); [EOL]     assertXPathPointerLenient(context, "//fruit/pear", "/map[@name='fruit']/pear"); [EOL] } <line_num>: 339,371
