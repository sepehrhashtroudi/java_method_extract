public SimplePathInterpreterTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 48,50
public static void main(String[] args) { [EOL]     junit.textui.TestRunner.run(SimplePathInterpreterTest.class); [EOL] } <line_num>: 52,54
protected void setUp() throws Exception { [EOL]     bean = TestBeanWithNode.createTestBeanWithDOM(); [EOL]     HashMap submap = new HashMap(); [EOL]     submap.put("key", new NestedTestBean("Name 9")); [EOL]     submap.put("strings", bean.getNestedBean().getStrings()); [EOL]     bean.getList().add(new int[] { 1, 2 }); [EOL]     bean.getList().add(bean.getVendor()); [EOL]     bean.getMap().put("Key3", new Object[] { new NestedTestBean("some"), new Integer(2), bean.getVendor(), submap }); [EOL]     bean.getMap().put("Key4", bean.getVendor()); [EOL]     bean.getMap().put("Key5", submap); [EOL]     bean.getMap().put("Key6", new Object[0]); [EOL]     context = JXPathContext.newContext(null, bean); [EOL]     context.setLenient(true); [EOL]     context.setFactory(new TestBeanFactory()); [EOL] } <line_num>: 59,80
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] } <line_num>: 82,171
public void testDoStepNoPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/location/address/city", "Fruit Market", "/vendor/location[2]/address[1]/city[1]", "BbMMMM"); [EOL]     assertNullPointer("/vendor/location/address/pity", "/vendor/location[1]/address[1]/pity", "BbMMMn"); [EOL]     assertNullPointer("/vendor/location/address/itty/bitty", "/vendor/location[1]/address[1]/itty/bitty", "BbMMMnNn"); [EOL]     assertNullPointer("/vendor/location/address/city/pretty", "/vendor/location[2]/address[1]/city[1]/pretty", "BbMMMMn"); [EOL] } <line_num>: 173,194
public void testDoStepPredicatesPropertyOwner() { [EOL]     assertNullPointer("/foo[@name='foo']", "/foo[@name='foo']", "BnNn"); [EOL]     assertNullPointer("/foo[3]", "/foo[3]", "Bn"); [EOL] } <line_num>: 196,206
public void testDoStepPredicatesStandard() { [EOL]     assertValueAndPointer("/vendor/contact[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL]     assertValueAndPointer("/vendor/contact[2]", "Jack", "/vendor/contact[2]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[5]", "/vendor/contact[5]", "BbMn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL] } <line_num>: 208,238
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] } <line_num>: 240,374
public void testDoPredicatesStandard() { [EOL]     assertValueAndPointer("map[@name='Key3'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertNullPointer("map[@name='Key3'][@name='foo']", "/map[@name='Key3'][4][@name='foo']", "BbDdCDd"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL]     assertNullPointer("map[@name='Key6'][@name='fruitco']", "/map[@name='Key6'][@name='fruitco']", "BbDdCn"); [EOL]     assertValueAndPointer("/vendor/contact[@name='jack'][2]", "Jack Black", "/vendor/contact[4]", "BbMM"); [EOL]     assertNullPointer("/vendor/contact[@name='jack'][5]", "/vendor/contact[@name='jack'][5]", "BbMnNn"); [EOL]     assertValueAndPointer("/vendor/contact/.[@name='jack']", "Jack", "/vendor/contact[2]", "BbMM"); [EOL] } <line_num>: 376,415
public void testDoPredicateIndex() { [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings'][2]", bean.getNestedBean().getStrings()[1], "/nestedBean/strings[2]", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/nestedBean[@name='foo'][3]", "/nestedBean[@name='foo'][3]", "BbBn"); [EOL]     assertNullPointer("/nestedBean[@name='strings'][5]", "/nestedBean/strings[5]", "BbBbE"); [EOL]     assertValueAndPointer("/map[@name='Key3'][2]", new Integer(2), "/map[@name='Key3'][2]", "BbDd", "BbDdB"); [EOL]     assertNullPointer("/map[@name='Key3'][5]", "/map[@name='Key3'][5]", "BbDdE"); [EOL]     assertNullPointer("/map[@name='Key3'][5]/foo", "/map[@name='Key3'][5]/foo", "BbDdENn"); [EOL]     assertValueAndPointer("/map[@name='Key5'][@name='strings'][2]", "String 2", "/map[@name='Key5'][@name='strings'][2]", "BbDdDd", "BbDdDdB"); [EOL]     assertNullPointer("/map[@name='Key5'][@name='strings'][5]", "/map[@name='Key5'][@name='strings'][5]", "BbDdDdE"); [EOL]     assertValueAndPointer("/map[@name='Key3'][2]", new Integer(2), "/map[@name='Key3'][2]", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/map[@name='Key3'][1]/name", "some", "/map[@name='Key3'][1]/name", "BbDdBb", "BbDdBbB"); [EOL]     assertNullPointer("/map[@name='foo'][3]", "/map[@name='foo'][3]", "BbDdE"); [EOL]     assertValueAndPointer("/integers[2]", new Integer(2), "/integers[2]", "Bb", "BbB"); [EOL]     assertValueAndPointer("/nestedBean/strings[2]", bean.getNestedBean().getStrings()[1], "/nestedBean/strings[2]", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/list[3]/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list[6]", "/list[6]", "BbE"); [EOL]     assertNullPointer("/nestedBean/foo[3]", "/nestedBean/foo[3]", "BbBn"); [EOL]     assertNullPointer("/map/foo[3]", "/map[@name='foo'][3]", "BbDdE"); [EOL]     assertNullPointer("/nestedBean/strings[5]", "/nestedBean/strings[5]", "BbBbE"); [EOL]     assertNullPointer("/map/Key3[5]/foo", "/map[@name='Key3'][5]/foo", "BbDdENn"); [EOL]     assertValueAndPointer("/map[@name='Key5']/strings[2]", "String 2", "/map[@name='Key5'][@name='strings'][2]", "BbDdDd", "BbDdDdB"); [EOL]     assertNullPointer("/map[@name='Key5']/strings[5]", "/map[@name='Key5'][@name='strings'][5]", "BbDdDdE"); [EOL]     assertValueAndPointer("/int[1]", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer(".[1]/int", new Integer(1), "/int", "Bb", "BbB"); [EOL] } <line_num>: 417,561
public void testInterpretExpressionPath() { [EOL]     context.getVariables().declareVariable("array", new String[] { "Value1" }); [EOL]     context.getVariables().declareVariable("testnull", new TestNull()); [EOL]     assertNullPointer("$testnull/nothing[2]", "$testnull/nothing[2]", "VBbE"); [EOL] } <line_num>: 563,570
private void assertValueAndPointer(String path, Object expectedValue, String expectedPath, String expectedSignature) { [EOL]     assertValueAndPointer(path, expectedValue, expectedPath, expectedSignature, expectedSignature); [EOL] } <line_num>: 572,582
private void assertValueAndPointer(String path, Object expectedValue, String expectedPath, String expectedSignature, String expectedValueSignature) { [EOL]     Object value = context.getValue(path); [EOL]     assertEquals("Checking value: " + path, expectedValue, value); [EOL]     Pointer pointer = context.getPointer(path); [EOL]     assertEquals("Checking pointer: " + path, expectedPath, pointer.toString()); [EOL]     assertEquals("Checking signature: " + path, expectedSignature, pointerSignature(pointer)); [EOL]     Pointer vPointer = ((NodePointer) pointer).getValuePointer(); [EOL]     assertEquals("Checking value pointer signature: " + path, expectedValueSignature, pointerSignature(vPointer)); [EOL] } <line_num>: 584,601
private void assertNullPointer(String path, String expectedPath, String expectedSignature) { [EOL]     Pointer pointer = context.getPointer(path); [EOL]     assertNotNull("Null path exists: " + path, pointer); [EOL]     assertEquals("Null path as path: " + path, expectedPath, pointer.asPath()); [EOL]     assertEquals("Checking Signature: " + path, expectedSignature, pointerSignature(pointer)); [EOL]     Pointer vPointer = ((NodePointer) pointer).getValuePointer(); [EOL]     assertTrue("Null path is null: " + path, !((NodePointer) vPointer).isActual()); [EOL]     assertEquals("Checking value pointer signature: " + path, expectedSignature + "N", pointerSignature(vPointer)); [EOL] } <line_num>: 603,619
private String pointerSignature(Pointer pointer) { [EOL]     if (pointer == null) { [EOL]         return ""; [EOL]     } [EOL]     char type = '?'; [EOL]     if (pointer instanceof NullPointer) { [EOL]         type = 'N'; [EOL]     } else if (pointer instanceof NullPropertyPointer) { [EOL]         type = 'n'; [EOL]     } else if (pointer instanceof NullElementPointer) { [EOL]         type = 'E'; [EOL]     } else if (pointer instanceof VariablePointer) { [EOL]         type = 'V'; [EOL]     } else if (pointer instanceof CollectionPointer) { [EOL]         type = 'C'; [EOL]     } else if (pointer instanceof BeanPointer) { [EOL]         type = 'B'; [EOL]     } else if (pointer instanceof BeanPropertyPointer) { [EOL]         type = 'b'; [EOL]     } else if (pointer instanceof DynamicPointer) { [EOL]         type = 'D'; [EOL]     } else if (pointer instanceof DynamicPropertyPointer) { [EOL]         type = 'd'; [EOL]     } else if (pointer instanceof DOMNodePointer) { [EOL]         type = 'M'; [EOL]     } else { [EOL]         System.err.println("UNKNOWN TYPE: " + pointer.getClass()); [EOL]     } [EOL]     NodePointer parent = ((NodePointer) pointer).getImmediateParentPointer(); [EOL]     return pointerSignature(parent) + type; [EOL] } <line_num>: 626,648
