public BeanModelTestCase(String name) { [EOL]     super(name); [EOL] } <line_num>: 51,53
public void setUp() { [EOL]     context = JXPathContext.newContext(createContextBean()); [EOL]     context.setLocale(Locale.US); [EOL]     context.setFactory(getAbstractFactory()); [EOL] } <line_num>: 55,61
protected abstract Object createContextBean(); <line_num>: 63,63
protected abstract AbstractFactory getAbstractFactory(); <line_num>: 64,64
public void testIndividualIterators() { [EOL]     testIndividual(+1, 0, true, false, 0); [EOL]     testIndividual(-1, 0, true, false, 4); [EOL]     testIndividual(0, -1, true, true, 4); [EOL]     testIndividual(+1, -1, true, true, 4); [EOL]     testIndividual(-1, -1, true, true, 0); [EOL]     testIndividual(0, 1, true, false, 2); [EOL]     testIndividual(0, 1, true, true, 1); [EOL]     testIndividual(0, 0, false, false, 4); [EOL]     testIndividual(0, 0, false, true, 4); [EOL] } <line_num>: 69,82
private void testIndividual(int relativePropertyIndex, int offset, boolean useStartLocation, boolean reverse, int expected) { [EOL]     PropertyOwnerPointer root = (PropertyOwnerPointer) NodePointer.newNodePointer(new QName(null, "root"), createContextBean(), Locale.getDefault()); [EOL]     NodeIterator it; [EOL]     PropertyPointer start = null; [EOL]     if (useStartLocation) { [EOL]         start = root.getPropertyPointer(); [EOL]         start.setPropertyIndex(relativeProperty(start, relativePropertyIndex)); [EOL]         start.setIndex(offset); [EOL]     } [EOL]     it = root.childIterator(new NodeNameTest(new QName(null, "integers")), reverse, start); [EOL]     int size = 0; [EOL]     while (it.setPosition(it.getPosition() + 1)) { [EOL]         size++; [EOL]     } [EOL]     assertEquals("ITERATIONS: Individual, relativePropertyIndex=" + relativePropertyIndex + ", offset=" + offset + ", useStartLocation=" + useStartLocation + ", reverse=" + reverse, expected, size); [EOL] } <line_num>: 84,128
public void testMultipleIterators() { [EOL]     testMultiple(0, 0, true, false, 20); [EOL]     testMultiple(3, 0, true, false, 16); [EOL]     testMultiple(3, -1, true, true, 8); [EOL]     testMultiple(3, 0, true, true, 4); [EOL]     testMultiple(0, 0, false, false, 21); [EOL]     testMultiple(0, 0, false, true, 21); [EOL]     testMultiple(3, 1, true, false, 15); [EOL]     testMultiple(3, 3, true, false, 13); [EOL] } <line_num>: 133,144
private void testMultiple(int propertyIndex, int offset, boolean useStartLocation, boolean reverse, int expected) { [EOL]     PropertyOwnerPointer root = (PropertyOwnerPointer) NodePointer.newNodePointer(new QName(null, "root"), createContextBean(), Locale.getDefault()); [EOL]     NodeIterator it; [EOL]     PropertyPointer start = null; [EOL]     if (useStartLocation) { [EOL]         start = root.getPropertyPointer(); [EOL]         start.setPropertyIndex(propertyIndex); [EOL]         start.setIndex(offset); [EOL]     } [EOL]     it = root.childIterator(null, reverse, start); [EOL]     int size = 0; [EOL]     while (it.setPosition(it.getPosition() + 1)) { [EOL]         size++; [EOL]     } [EOL]     assertEquals("ITERATIONS: Multiple, propertyIndex=" + propertyIndex + ", offset=" + offset + ", useStartLocation=" + useStartLocation + ", reverse=" + reverse, expected, size); [EOL] } <line_num>: 146,185
private int relativeProperty(PropertyPointer holder, int offset) { [EOL]     String[] names = holder.getPropertyNames(); [EOL]     for (int i = 0; i < names.length; i++) { [EOL]         if (names[i].equals("integers")) { [EOL]             return i + offset; [EOL]         } [EOL]     } [EOL]     return -1; [EOL] } <line_num>: 187,195
public void testIteratePropertyArrayWithHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).asPath()); [EOL]     } [EOL]     assertEquals("Iterating 'hasNext'/'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] } <line_num>: 197,212
public void testIteratePropertyArrayWithoutHasNext() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("/integers"); [EOL]     List actual = new ArrayList(); [EOL]     for (int i = 0; i < 4; i++) { [EOL]         actual.add(it.next().toString()); [EOL]     } [EOL]     assertEquals("Iterating 'next'<" + "/integers" + ">", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]"), actual); [EOL] } <line_num>: 214,229
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] } <line_num>: 231,250
public void testIteratePointerSetValue() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     assertXPathValue(context, "/beans[1]/name", "Name 1"); [EOL]     assertXPathValue(context, "/beans[2]/name", "Name 2"); [EOL]     context.setValue("/beans[2]/name", "Name 2 set"); [EOL]     assertXPathValue(context, "/beans[2]/name", "Name 2 set"); [EOL]     context.setValue("/beans[2]/name", "Name 2"); [EOL]     assertXPathValue(context, "/beans[2]/name", "Name 2"); [EOL]     int iterCount = 0; [EOL]     Iterator iter = context.iteratePointers("/beans/name"); [EOL]     while (iter.hasNext()) { [EOL]         iterCount++; [EOL]         Pointer pointer = (Pointer) iter.next(); [EOL]         String s = (String) pointer.getValue(); [EOL]         s = s + "suffix"; [EOL]         pointer.setValue(s); [EOL]         assertEquals("pointer.getValue", s, pointer.getValue()); [EOL]         assertEquals("context.getValue", s, context.getValue(pointer.asPath())); [EOL]     } [EOL]     assertEquals("Iteration count", 2, iterCount); [EOL]     assertXPathValue(context, "/beans[1]/name", "Name 1suffix"); [EOL]     assertXPathValue(context, "/beans[2]/name", "Name 2suffix"); [EOL] } <line_num>: 255,288
public void testRoot() { [EOL]     assertXPathValueAndPointer(context, "/", context.getContextBean(), "/"); [EOL] } <line_num>: 290,292
public void testAxisAncestor() { [EOL]     assertXPathValue(context, "int/ancestor::root = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "count(beans/name/ancestor-or-self::node())", new Double(5)); [EOL]     assertXPathValue(context, "beans/name/ancestor-or-self::node()[3] = /", Boolean.TRUE); [EOL] } <line_num>: 294,307
public void testAxisChild() { [EOL]     assertXPathValue(context, "boolean", Boolean.FALSE); [EOL]     assertXPathPointer(context, "boolean", "/boolean"); [EOL]     assertXPathPointerIterator(context, "boolean", list("/boolean")); [EOL]     assertXPathValue(context, "count(set)", new Double(3)); [EOL]     assertXPathValueIterator(context, "foo:boolean", list()); [EOL]     assertXPathValue(context, "count(*)", new Double(21)); [EOL]     assertXPathValue(context, "count(child::node())", new Double(21)); [EOL] } <line_num>: 309,329
public void testAxisChildNestedBean() { [EOL]     assertXPathValue(context, "nestedBean/name", "Name 0"); [EOL]     assertXPathPointer(context, "nestedBean/name", "/nestedBean/name"); [EOL]     assertXPathPointerIterator(context, "nestedBean/name", list("/nestedBean/name")); [EOL] } <line_num>: 331,341
public void testAxisChildNestedCollection() { [EOL]     assertXPathValueIterator(context, "integers", list(new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathPointer(context, "integers", "/integers"); [EOL]     assertXPathPointerIterator(context, "integers", list("/integers[1]", "/integers[2]", "/integers[3]", "/integers[4]")); [EOL] } <line_num>: 343,363
public void testIndexPredicate() { [EOL]     assertXPathValue(context, "integers[2]", new Integer(2)); [EOL]     assertXPathPointer(context, "integers[2]", "/integers[2]"); [EOL]     assertXPathPointerIterator(context, "integers[2]", list("/integers[2]")); [EOL]     assertXPathValue(context, "beans[1]/name", "Name 1"); [EOL]     assertXPathPointer(context, "beans[1]/name", "/beans[1]/name"); [EOL]     assertXPathValueIterator(context, "beans[1]/strings", list("String 1", "String 2", "String 3")); [EOL]     assertXPathValueIterator(context, "beans/strings[2]", list("String 2", "String 2")); [EOL]     assertXPathValue(context, "beans/strings[2]", "String 2"); [EOL]     assertXPathValue(context, "(beans/strings[2])[1]", "String 2"); [EOL] } <line_num>: 365,394
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "count(descendant::node())", new Double(65)); [EOL]     assertXPathValue(context, "count(descendant::root)", new Double(0)); [EOL]     assertXPathValue(context, "count(descendant::name)", new Double(7)); [EOL] } <line_num>: 396,404
public void testAxisDescendantOrSelf() { [EOL]     assertXPathValueIterator(context, "descendant-or-self::name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "//name", set("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValue(context, "count(descendant-or-self::root)", new Double(1)); [EOL]     assertXPathValue(context, "count(nestedBean//.)", new Double(7)); [EOL]     assertXPathValue(context, "count(//self::beans)", new Double(2)); [EOL]     assertXPathValue(context, "count(descendant-or-self::node())", new Double(66)); [EOL] } <line_num>: 406,451
public void testAxisFollowing() { [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::node())", new Double(21)); [EOL]     assertXPathValue(context, "count(nestedBean/strings[2]/following::strings)", new Double(7)); [EOL] } <line_num>: 453,464
public void testAxisFollowingSibling() { [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(/nestedBean/boolean/../following-sibling::object)", new Double(1)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::node())", new Double(53)); [EOL]     assertXPathValue(context, "count(/descendant::boolean/following-sibling::name)", new Double(7)); [EOL] } <line_num>: 466,499
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] } <line_num>: 501,513
public void testAxisPreceding() { [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::node())", new Double(8)); [EOL]     assertXPathValue(context, "count(beans[2]/int/preceding::boolean)", new Double(2)); [EOL] } <line_num>: 515,526
public void testAxisPrecedingSibling() { [EOL]     assertXPathValue(context, "count(/boolean/preceding-sibling::node())", new Double(2)); [EOL]     assertXPathValue(context, "count(/nestedBean/int/../preceding-sibling::node())", new Double(12)); [EOL]     assertXPathValue(context, "count(/descendant::int/preceding-sibling::node())", new Double(10)); [EOL] } <line_num>: 528,544
public void testAxisSelf() { [EOL]     assertXPathValue(context, "self::node() = /", Boolean.TRUE); [EOL]     assertXPathValue(context, "self::root = /", Boolean.TRUE); [EOL] } <line_num>: 546,551
public void testUnion() { [EOL]     assertXPathValueIterator(context, "integers | beans[1]/strings", list("String 1", "String 2", "String 3", new Integer(1), new Integer(2), new Integer(3), new Integer(4))); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[contains(., '1')])", new Double(2)); [EOL]     assertXPathValue(context, "count((integers | beans[1]/strings)[name(.) = 'strings'])", new Double(3)); [EOL]     assertXPathValue(context, "(integers)[2]", new Integer(2)); [EOL] } <line_num>: 553,580
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "count(@*)", new Double(21.0)); [EOL]     assertXPathValueLenient(context, "@foo", null); [EOL] } <line_num>: 582,588
public void testAttributeName() { [EOL]     assertXPathValue(context, "nestedBean[@name = 'int']", new Integer(1)); [EOL]     assertXPathPointer(context, "nestedBean[@name = 'int']", "/nestedBean/int"); [EOL] } <line_num>: 594,601
public void testAttributeLang() { [EOL]     assertXPathValue(context, "@xml:lang", "en-US"); [EOL]     assertXPathValue(context, "count(@xml:*)", new Double(1)); [EOL]     assertXPathValue(context, "lang('en')", Boolean.TRUE); [EOL]     assertXPathValue(context, "lang('fr')", Boolean.FALSE); [EOL] } <line_num>: 603,612
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "boolean(boolean)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(boolean = false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() < 3])", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(integers[position() > 4])", Boolean.FALSE); [EOL]     assertXPathValue(context, "sum(integers)", new Double(10)); [EOL]     assertXPathValueAndPointer(context, "integers[last()]", new Integer(4), "/integers[4]"); [EOL]     assertXPathValueAndPointer(context, "//strings[last()]", "String 3", "/beans[1]/strings[3]"); [EOL] } <line_num>: 614,643
public void testBooleanPredicate() { [EOL]     assertXPathValue(context, "beans[int > 2]/name", "Name 2"); [EOL]     assertXPathValueIterator(context, "beans[int > 2]/name", list("Name 2")); [EOL]     assertXPathValueIterator(context, "beans[int >= 1]/name", list("Name 1", "Name 2")); [EOL]     assertXPathValueIterator(context, "beans[int < 2]/name", list("Name 1")); [EOL]     assertXPathValueIterator(context, "beans[int <= 3]/name", list("Name 1", "Name 2")); [EOL]     assertXPathValueIterator(context, "beans[1]/strings[string-length() = 8]", list("String 1", "String 2", "String 3")); [EOL]     assertXPathValueIterator(context, "//self::node()[name = 'Name 0']/name", list("Name 0")); [EOL]     assertXPathValue(context, "beans/strings[name(.)='strings'][2]", "String 2"); [EOL]     assertXPathValueIterator(context, "//self::node()[name(.) = concat('n', 'a', 'm', 'e')]", list("Name 1", "Name 2", "Name 3", "Name 6", "Name 0", "Name 5", "Name 4")); [EOL]     assertXPathValueIterator(context, "integers[position()<3]", list(new Integer(1), new Integer(2))); [EOL]     context.getVariables().declareVariable("temp", context.getValue("beans")); [EOL]     assertXPathValueIterator(context, "$temp[int < 2]/int", list(new Integer(1))); [EOL] } <line_num>: 645,716
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "boolean", "int", -1); [EOL]     assertDocumentOrder(context, "integers[1]", "integers[2]", -1); [EOL]     assertDocumentOrder(context, "integers[1]", "integers[1]", 0); [EOL]     assertDocumentOrder(context, "nestedBean/int", "nestedBean", 1); [EOL]     assertDocumentOrder(context, "nestedBean/int", "nestedBean/strings", -1); [EOL]     assertDocumentOrder(context, "nestedBean/int", "object/int", -1); [EOL] } <line_num>: 718,734
public void testSetPropertyValue() { [EOL]     assertXPathSetValue(context, "int", new Integer(2)); [EOL]     assertXPathSetValue(context, "int", "3", new Integer(3)); [EOL]     assertXPathSetValue(context, "int", new int[] { 4 }, new Integer(4)); [EOL]     assertXPathSetValue(context, "@int", new Integer(10)); [EOL] } <line_num>: 736,748
public void testSetCollectionElement() { [EOL]     assertXPathSetValue(context, "integers[2]", new Integer(5)); [EOL]     assertXPathSetValue(context, "integers[2]", new int[] { 6 }, new Integer(6)); [EOL] } <line_num>: 750,760
public void testSetContextDependentNode() { [EOL]     assertXPathSetValue(context, "integers[position() = 1]", new Integer(8)); [EOL]     assertXPathSetValue(context, "beans[name = 'Name 1']/int", new Integer(9)); [EOL] } <line_num>: 762,775
public void testSetNonPrimitiveValue() { [EOL]     assertXPathSetValue(context, "beans[2]", null); [EOL]     context.setValue("beans[2]", new NestedTestBean("Name 9")); [EOL]     assertEquals("Modified <" + "beans[2]/name" + ">", "Name 9", context.getValue("beans[2]/name")); [EOL] } <line_num>: 777,788
public void testCreatePath() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/int", new Integer(1), "/nestedBean/int"); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathCreatePath(context, "/nestedBean/beans[last() + 1]", new Integer(1), "/nestedBean/beans[last() + 1]"); [EOL]     } catch (Exception e) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Exception thrown on invalid path for creation", ex); [EOL] } <line_num>: 790,813
public void testCreatePathAndSetValue() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/int", new Integer(2), "/nestedBean/int"); [EOL] } <line_num>: 815,824
public void testCreatePathExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePath(context, "/beans[2]/int", new Integer(1), "/beans[2]/int"); [EOL] } <line_num>: 826,836
public void testCreatePathAndSetValueExpandNewCollection() { [EOL]     context.setValue("beans", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[2]/int", new Integer(2), "/beans[2]/int"); [EOL] } <line_num>: 838,848
public void testCreatePathExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/integers[5]", new Integer(3), "/integers[5]"); [EOL] } <line_num>: 850,858
public void testCreatePathExpandExistingCollectionAndSetProperty() { [EOL]     assertXPathCreatePath(context, "/beans[3]/int", new Integer(1), "/beans[3]/int"); [EOL] } <line_num>: 860,867
public void testCreatePathAndSetValueExpandExistingCollection() { [EOL]     assertXPathCreatePathAndSetValue(context, "/beans[3]/int", new Integer(2), "/beans[3]/int"); [EOL] } <line_num>: 869,876
public void testCreatePathCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePath(context, "/nestedBean/strings[2]", "String 2", "/nestedBean/strings[2]"); [EOL] } <line_num>: 878,888
public void testCreatePathAndSetValueCreateBeanExpandCollection() { [EOL]     context.setValue("nestedBean", null); [EOL]     assertXPathCreatePathAndSetValue(context, "/nestedBean/strings[2]", "Test", "/nestedBean/strings[2]"); [EOL] } <line_num>: 890,900
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] } <line_num>: 902,909
public void testRemovePathArrayElement() { [EOL]     context.removePath("nestedBean/strings[1]"); [EOL]     assertEquals("Remove array element", "String 2", context.getValue("nestedBean/strings[1]")); [EOL] } <line_num>: 911,918
public void testRemovePathBeanValue() { [EOL]     context.removePath("nestedBean"); [EOL]     assertEquals("Remove collection element", null, context.getValue("nestedBean")); [EOL] } <line_num>: 920,926
public void testRelativeContextRelativePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "int", new Integer(1), "/nestedBean/int"); [EOL] } <line_num>: 928,936
public void testRelativeContextAbsolutePath() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "/integers[2]", new Integer(2), "/integers[2]"); [EOL] } <line_num>: 938,946
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] } <line_num>: 948,956
public void testRelativeContextInheritance() { [EOL]     context.setFunctions(new ClassFunctions(TestFunctions.class, "test")); [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValue(relative, "test:countPointers(strings)", new Integer(3)); [EOL] } <line_num>: 958,966
