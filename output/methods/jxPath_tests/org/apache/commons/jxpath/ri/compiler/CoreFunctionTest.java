public CoreFunctionTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 45,47
public void setUp() { [EOL]     if (context == null) { [EOL]         context = JXPathContext.newContext(new TestMixedModelBean()); [EOL]         Variables vars = context.getVariables(); [EOL]         vars.declareVariable("nan", new Double(Double.NaN)); [EOL]         vars.declareVariable("bool_true", new Boolean("true")); [EOL]         vars.declareVariable("bool_false", new Boolean("false")); [EOL]     } [EOL] } <line_num>: 49,57
public void testCoreFunctions() { [EOL]     assertXPathValue(context, "string(2)", "2"); [EOL]     assertXPathValue(context, "string($nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-$nan)", "NaN"); [EOL]     assertXPathValue(context, "string(-2 div 0)", "-Infinity"); [EOL]     assertXPathValue(context, "string(2 div 0)", "Infinity"); [EOL]     assertXPathValue(context, "concat('a', 'b', 'c')", "abc"); [EOL]     assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE); [EOL]     assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE); [EOL]     assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE); [EOL]     assertXPathValue(context, "substring-before('1999/04/01', '/')", "1999"); [EOL]     assertXPathValue(context, "substring-after('1999/04/01', '/')", "04/01"); [EOL]     assertXPathValue(context, "substring('12345', 2, 3)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 2)", "2345"); [EOL]     assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234"); [EOL]     assertXPathValue(context, "substring('12345', 0, 3)", "12"); [EOL]     assertXPathValue(context, "substring('12345', 0 div 0, 3)", ""); [EOL]     assertXPathValue(context, "substring('12345', 1, 0 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345"); [EOL]     assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", ""); [EOL]     assertXPathValue(context, "substring('12345', 6, 6)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7, 8)", ""); [EOL]     assertXPathValue(context, "substring('12345', 7)", ""); [EOL]     assertXPathValue(context, "string-length('12345')", new Double(5)); [EOL]     assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('abc def')", "abc def"); [EOL]     assertXPathValue(context, "normalize-space('   ')", ""); [EOL]     assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA"); [EOL]     assertXPathValue(context, "boolean(1)", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean(0)", Boolean.FALSE); [EOL]     assertXPathValue(context, "boolean('x')", Boolean.TRUE); [EOL]     assertXPathValue(context, "boolean('')", Boolean.FALSE); [EOL]     assertXPathValue(context, "true()", Boolean.TRUE); [EOL]     assertXPathValue(context, "false()", Boolean.FALSE); [EOL]     assertXPathValue(context, "not(false())", Boolean.TRUE); [EOL]     assertXPathValue(context, "not(true())", Boolean.FALSE); [EOL]     assertXPathValue(context, "number('1')", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_true)", new Double(1)); [EOL]     assertXPathValue(context, "number($bool_false)", new Double(0)); [EOL]     assertXPathValue(context, "floor(1.5)", new Double(1)); [EOL]     assertXPathValue(context, "floor(-1.5)", new Double(-2)); [EOL]     assertXPathValue(context, "ceiling(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "ceiling(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "round(1.5)", new Double(2)); [EOL]     assertXPathValue(context, "round(-1.5)", new Double(-1)); [EOL]     assertXPathValue(context, "null()", null); [EOL] } <line_num>: 59,113
public Pointer getPointerByID(JXPathContext context, String id) { [EOL]     NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]     ptr = ptr.getValuePointer(); [EOL]     return ptr.getPointerByID(context, id); [EOL] } <line_num>: 117,121
public void testIDFunction() { [EOL]     context.setIdentityManager(new IdentityManager() { [EOL]  [EOL]         public Pointer getPointerByID(JXPathContext context, String id) { [EOL]             NodePointer ptr = (NodePointer) context.getPointer("/document"); [EOL]             ptr = ptr.getValuePointer(); [EOL]             return ptr.getPointerByID(context, id); [EOL]         } [EOL]     }); [EOL]     assertXPathValueAndPointer(context, "id(101)//street", "Tangerine Drive", "id('101')/address[1]/street[1]"); [EOL]     assertXPathPointerLenient(context, "id(105)/address/street", "id(105)/address/street"); [EOL] } <line_num>: 115,134
public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]     return NodePointer.newNodePointer(null, "42", null); [EOL] } <line_num>: 138,144
public void testKeyFunction() { [EOL]     context.setKeyManager(new KeyManager() { [EOL]  [EOL]         public Pointer getPointerByKey(JXPathContext context, String key, String value) { [EOL]             return NodePointer.newNodePointer(null, "42", null); [EOL]         } [EOL]     }); [EOL]     assertEquals("Test key", "42", context.getValue("key('a', 'b')")); [EOL] } <line_num>: 136,148
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] } <line_num>: 150,186
