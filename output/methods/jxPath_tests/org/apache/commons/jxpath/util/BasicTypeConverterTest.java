public BasicTypeConverterTest(String name) { [EOL]     super(name); [EOL] } <line_num>: 45,47
public void testPrimitiveToString() { [EOL]     assertConversion(new Integer(1), String.class, "1"); [EOL] } <line_num>: 49,51
public void testArrayToList() { [EOL]     assertConversion(new int[] { 1, 2 }, List.class, Arrays.asList(new Object[] { new Integer(1), new Integer(2) })); [EOL] } <line_num>: 53,58
public void testArrayToArray() { [EOL]     assertConversion(new int[] { 1, 2 }, String[].class, Arrays.asList(new String[] { "1", "2" })); [EOL] } <line_num>: 60,65
public void testListToArray() { [EOL]     assertConversion(Arrays.asList(new Integer[] { new Integer(1), new Integer(2) }), String[].class, Arrays.asList(new String[] { "1", "2" })); [EOL]     assertConversion(Arrays.asList(new String[] { "1", "2" }), int[].class, Arrays.asList(new Integer[] { new Integer(1), new Integer(2) })); [EOL] } <line_num>: 67,77
public void testInvalidConversion() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         TypeUtils.convert("'foo'", Date.class); [EOL]     } catch (Throwable ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Type conversion exception", exception); [EOL] } <line_num>: 79,88
public void assertConversion(Object from, Class toType, Object expected) { [EOL]     boolean can = TypeUtils.canConvert(from, toType); [EOL]     assertTrue("Can convert: " + from.getClass() + " to " + toType, can); [EOL]     Object result = TypeUtils.convert(from, toType); [EOL]     if (result.getClass().isArray()) { [EOL]         ArrayList list = new ArrayList(); [EOL]         for (int j = 0; j < Array.getLength(result); j++) { [EOL]             list.add(Array.get(result, j)); [EOL]         } [EOL]         result = list; [EOL]     } [EOL]     assertEquals("Convert: " + from.getClass() + " to " + toType, expected, result); [EOL] } <line_num>: 90,105
public void testSingletonCollectionToString() { [EOL]     assertConversion(Collections.singleton("Earth"), String.class, "Earth"); [EOL] } <line_num>: 107,109
public void testSingletonArrayToString() { [EOL]     assertConversion(new String[] { "Earth" }, String.class, "Earth"); [EOL] } <line_num>: 111,113
public Object getValue() { [EOL]     return "value"; [EOL] } <line_num>: 117,119
public Object getNode() { [EOL]     return null; [EOL] } <line_num>: 120,122
public void setValue(Object value) { [EOL] } <line_num>: 123,124
public Object getRootNode() { [EOL]     return null; [EOL] } <line_num>: 125,127
public String asPath() { [EOL]     return null; [EOL] } <line_num>: 128,130
public Object clone() { [EOL]     return null; [EOL] } <line_num>: 131,133
public int compareTo(Object o) { [EOL]     return 0; [EOL] } <line_num>: 134,136
public void testPointerToString() { [EOL]     assertConversion(new Pointer() { [EOL]  [EOL]         public Object getValue() { [EOL]             return "value"; [EOL]         } [EOL]  [EOL]         public Object getNode() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public void setValue(Object value) { [EOL]         } [EOL]  [EOL]         public Object getRootNode() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public String asPath() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public Object clone() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public int compareTo(Object o) { [EOL]             return 0; [EOL]         } [EOL]     }, String.class, "value"); [EOL] } <line_num>: 115,138
public List getNodes() { [EOL]     return null; [EOL] } <line_num>: 142,144
public List getPointers() { [EOL]     return null; [EOL] } <line_num>: 145,147
public List getValues() { [EOL]     List list = new ArrayList(); [EOL]     list.add("hello"); [EOL]     list.add("goodbye"); [EOL]     return Collections.singletonList(list); [EOL] } <line_num>: 148,153
public void testNodeSetToString() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             List list = new ArrayList(); [EOL]             list.add("hello"); [EOL]             list.add("goodbye"); [EOL]             return Collections.singletonList(list); [EOL]         } [EOL]     }, String.class, "hello"); [EOL] } <line_num>: 140,155
public List getNodes() { [EOL]     return null; [EOL] } <line_num>: 160,162
public List getPointers() { [EOL]     return null; [EOL] } <line_num>: 163,165
public List getValues() { [EOL]     return Collections.singletonList("9"); [EOL] } <line_num>: 166,168
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] } <line_num>: 158,170
public void testBeanUtilsConverter() { [EOL]     assertConversion("12", BigDecimal.class, new BigDecimal(12)); [EOL] } <line_num>: 172,174
