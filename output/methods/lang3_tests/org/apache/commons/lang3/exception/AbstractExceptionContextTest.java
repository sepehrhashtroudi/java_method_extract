@Override [EOL] public String toString() { [EOL]     throw new RuntimeException("Crap"); [EOL] } <line_num>: 43,46
@Before [EOL] public void setUp() throws Exception { [EOL]     exceptionContext.addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL] } <line_num>: 50,58
@Test [EOL] public void testAddContextValue() { [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test1") >= 0); [EOL]     assertTrue(message.indexOf("test2") >= 0); [EOL]     assertTrue(message.indexOf("test Date") >= 0); [EOL]     assertTrue(message.indexOf("test Nbr") >= 0); [EOL]     assertTrue(message.indexOf("some value") >= 0); [EOL]     assertTrue(message.indexOf("5") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertEquals(5, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test1")); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test2")); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Date")); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Nbr")); [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(5, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test2")); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] } <line_num>: 60,86
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] } <line_num>: 88,119
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] } <line_num>: 121,132
@Test [EOL] public void testGetContextValues() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]     assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] } <line_num>: 134,144
@Test [EOL] public void testGetContextLabels() { [EOL]     assertEquals(5, exceptionContext.getContextEntries().size()); [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     final Set<String> labels = exceptionContext.getContextLabels(); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(5, labels.size()); [EOL]     assertTrue(labels.contains("test1")); [EOL]     assertTrue(labels.contains("test2")); [EOL]     assertTrue(labels.contains("test Date")); [EOL]     assertTrue(labels.contains("test Nbr")); [EOL] } <line_num>: 146,159
@Test [EOL] public void testGetContextEntries() { [EOL]     assertEquals(5, exceptionContext.getContextEntries().size()); [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     final List<Pair<String, Object>> entries = exceptionContext.getContextEntries(); [EOL]     assertEquals(6, entries.size()); [EOL]     assertEquals("test1", entries.get(0).getKey()); [EOL]     assertEquals("test2", entries.get(1).getKey()); [EOL]     assertEquals("test Date", entries.get(2).getKey()); [EOL]     assertEquals("test Nbr", entries.get(3).getKey()); [EOL]     assertEquals("test Poorly written obj", entries.get(4).getKey()); [EOL]     assertEquals("test2", entries.get(5).getKey()); [EOL] } <line_num>: 161,175
@Test [EOL] public void testJavaSerialization() { [EOL]     exceptionContext.setContextValue("test Poorly written obj", "serializable replacement"); [EOL]     final T clone = SerializationUtils.deserialize(SerializationUtils.serialize(exceptionContext)); [EOL]     assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null)); [EOL] } <line_num>: 177,183
