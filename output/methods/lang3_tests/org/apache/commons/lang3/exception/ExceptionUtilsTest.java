public ExceptionWithCause(final String str, final Throwable cause) { [EOL]     super(str); [EOL]     setCause(cause); [EOL] } <line_num>: 493,496
public ExceptionWithCause(final Throwable cause) { [EOL]     super(); [EOL]     setCause(cause); [EOL] } <line_num>: 498,501
@SuppressWarnings("unused") [EOL] public NestableException() { [EOL]     super(); [EOL] } <line_num>: 527,528
public NestableException(final Throwable t) { [EOL]     super(t); [EOL] } <line_num>: 529,529
@Before [EOL] public void setUp() { [EOL]     withoutCause = createExceptionWithoutCause(); [EOL]     nested = new NestableException(withoutCause); [EOL]     withCause = new ExceptionWithCause(nested); [EOL]     jdkNoCause = new NullPointerException(); [EOL]     final ExceptionWithCause a = new ExceptionWithCause(null); [EOL]     final ExceptionWithCause b = new ExceptionWithCause(a); [EOL]     a.setCause(b); [EOL]     cyclicCause = new ExceptionWithCause(a); [EOL] } <line_num>: 61,71
@After [EOL] public void tearDown() throws Exception { [EOL]     withoutCause = null; [EOL]     nested = null; [EOL]     withCause = null; [EOL]     jdkNoCause = null; [EOL]     cyclicCause = null; [EOL] } <line_num>: 74,81
private Throwable createExceptionWithoutCause() { [EOL]     try { [EOL]         throw new ExceptionWithoutCause(); [EOL]     } catch (final Throwable t) { [EOL]         return t; [EOL]     } [EOL] } <line_num>: 84,90
private Throwable createExceptionWithCause() { [EOL]     try { [EOL]         try { [EOL]             throw new ExceptionWithCause(createExceptionWithoutCause()); [EOL]         } catch (final Throwable t) { [EOL]             throw new ExceptionWithCause(t); [EOL]         } [EOL]     } catch (final Throwable t) { [EOL]         return t; [EOL]     } [EOL] } <line_num>: 92,102
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new ExceptionUtils()); [EOL]     final Constructor<?>[] cons = ExceptionUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(ExceptionUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(ExceptionUtils.class.getModifiers())); [EOL] } <line_num>: 106,114
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getCause(null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getCause(nested)); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getCause(jdkNoCause)); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause())); [EOL]     assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause())); [EOL] } <line_num>: 117,128
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testGetCause_ThrowableArray() { [EOL]     assertSame(null, ExceptionUtils.getCause(null, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(null, new String[0])); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null })); [EOL]     assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, null)); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getCause" })); [EOL]     assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { "getTargetException" })); [EOL] } <line_num>: 130,148
@Test [EOL] public void testGetRootCause_Throwable() { [EOL]     assertSame(null, ExceptionUtils.getRootCause(null)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(withoutCause)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(nested)); [EOL]     assertSame(withoutCause, ExceptionUtils.getRootCause(withCause)); [EOL]     assertSame(null, ExceptionUtils.getRootCause(jdkNoCause)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause)); [EOL] } <line_num>: 150,158
@Test [EOL] public void testGetThrowableCount_Throwable() { [EOL]     assertEquals(0, ExceptionUtils.getThrowableCount(null)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause)); [EOL]     assertEquals(2, ExceptionUtils.getThrowableCount(nested)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(withCause)); [EOL]     assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause)); [EOL]     assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause)); [EOL] } <line_num>: 161,169
@Test [EOL] public void testGetThrowables_Throwable_null() { [EOL]     assertEquals(0, ExceptionUtils.getThrowables(null).length); [EOL] } <line_num>: 172,175
@Test [EOL] public void testGetThrowables_Throwable_withoutCause() { [EOL]     final Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause); [EOL]     assertEquals(1, throwables.length); [EOL]     assertSame(withoutCause, throwables[0]); [EOL] } <line_num>: 177,182
@Test [EOL] public void testGetThrowables_Throwable_nested() { [EOL]     final Throwable[] throwables = ExceptionUtils.getThrowables(nested); [EOL]     assertEquals(2, throwables.length); [EOL]     assertSame(nested, throwables[0]); [EOL]     assertSame(withoutCause, throwables[1]); [EOL] } <line_num>: 184,190
@Test [EOL] public void testGetThrowables_Throwable_withCause() { [EOL]     final Throwable[] throwables = ExceptionUtils.getThrowables(withCause); [EOL]     assertEquals(3, throwables.length); [EOL]     assertSame(withCause, throwables[0]); [EOL]     assertSame(nested, throwables[1]); [EOL]     assertSame(withoutCause, throwables[2]); [EOL] } <line_num>: 192,199
@Test [EOL] public void testGetThrowables_Throwable_jdkNoCause() { [EOL]     final Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause); [EOL]     assertEquals(1, throwables.length); [EOL]     assertSame(jdkNoCause, throwables[0]); [EOL] } <line_num>: 201,206
@Test [EOL] public void testGetThrowables_Throwable_recursiveCause() { [EOL]     final Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause); [EOL]     assertEquals(3, throwables.length); [EOL]     assertSame(cyclicCause, throwables[0]); [EOL]     assertSame(cyclicCause.getCause(), throwables[1]); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables[2]); [EOL] } <line_num>: 208,215
@Test [EOL] public void testGetThrowableList_Throwable_null() { [EOL]     final List<?> throwables = ExceptionUtils.getThrowableList(null); [EOL]     assertEquals(0, throwables.size()); [EOL] } <line_num>: 218,222
@Test [EOL] public void testGetThrowableList_Throwable_withoutCause() { [EOL]     final List<?> throwables = ExceptionUtils.getThrowableList(withoutCause); [EOL]     assertEquals(1, throwables.size()); [EOL]     assertSame(withoutCause, throwables.get(0)); [EOL] } <line_num>: 224,229
@Test [EOL] public void testGetThrowableList_Throwable_nested() { [EOL]     final List<?> throwables = ExceptionUtils.getThrowableList(nested); [EOL]     assertEquals(2, throwables.size()); [EOL]     assertSame(nested, throwables.get(0)); [EOL]     assertSame(withoutCause, throwables.get(1)); [EOL] } <line_num>: 231,237
@Test [EOL] public void testGetThrowableList_Throwable_withCause() { [EOL]     final List<?> throwables = ExceptionUtils.getThrowableList(withCause); [EOL]     assertEquals(3, throwables.size()); [EOL]     assertSame(withCause, throwables.get(0)); [EOL]     assertSame(nested, throwables.get(1)); [EOL]     assertSame(withoutCause, throwables.get(2)); [EOL] } <line_num>: 239,246
@Test [EOL] public void testGetThrowableList_Throwable_jdkNoCause() { [EOL]     final List<?> throwables = ExceptionUtils.getThrowableList(jdkNoCause); [EOL]     assertEquals(1, throwables.size()); [EOL]     assertSame(jdkNoCause, throwables.get(0)); [EOL] } <line_num>: 248,253
@Test [EOL] public void testGetThrowableList_Throwable_recursiveCause() { [EOL]     final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]     assertEquals(3, throwables.size()); [EOL]     assertSame(cyclicCause, throwables.get(0)); [EOL]     assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]     assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); [EOL] } <line_num>: 255,262
@Test [EOL] public void testIndexOf_ThrowableClass() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class)); [EOL] } <line_num>: 265,286
@Test [EOL] public void testIndexOf_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL] } <line_num>: 288,314
@Test [EOL] public void testIndexOfType_ThrowableClass() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class)); [EOL] } <line_num>: 317,338
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] } <line_num>: 340,366
@Test [EOL] public void testPrintRootCauseStackTrace_Throwable() throws Exception { [EOL]     ExceptionUtils.printRootCauseStackTrace(null); [EOL] } <line_num>: 369,374
@Test [EOL] public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception { [EOL]     ByteArrayOutputStream out = new ByteArrayOutputStream(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out)); [EOL]     assertEquals(0, out.toString().length()); [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     try { [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out)); [EOL]     String stackTrace = out.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]     out = new ByteArrayOutputStream(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out)); [EOL]     stackTrace = out.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL] } <line_num>: 376,400
@Test [EOL] public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]     StringWriter writer = new StringWriter(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]     ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]     assertEquals(0, writer.getBuffer().length()); [EOL]     writer = new StringWriter(1024); [EOL]     try { [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     writer = new StringWriter(1024); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]     String stackTrace = writer.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]     writer = new StringWriter(1024); [EOL]     ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]     stackTrace = writer.toString(); [EOL]     assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL] } <line_num>: 402,426
@Test [EOL] public void testGetRootCauseStackTrace_Throwable() throws Exception { [EOL]     assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length); [EOL]     final Throwable withCause = createExceptionWithCause(); [EOL]     String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause); [EOL]     boolean match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertTrue(match); [EOL]     stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause); [EOL]     match = false; [EOL]     for (final String element : stackTrace) { [EOL]         if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) { [EOL]             match = true; [EOL]             break; [EOL]         } [EOL]     } [EOL]     assertFalse(match); [EOL] } <line_num>: 429,453
@Test(expected = IllegalArgumentException.class) [EOL] public void testRemoveCommonFrames_ListList() throws Exception { [EOL]     ExceptionUtils.removeCommonFrames(null, null); [EOL] } <line_num>: 455,458
@Test [EOL] public void test_getMessage_Throwable() { [EOL]     Throwable th = null; [EOL]     assertEquals("", ExceptionUtils.getMessage(th)); [EOL]     th = new IllegalArgumentException("Base"); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getMessage(th)); [EOL]     th = new ExceptionWithCause("Wrapper", th); [EOL]     assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper", ExceptionUtils.getMessage(th)); [EOL] } <line_num>: 460,470
@Test [EOL] public void test_getRootCauseMessage_Throwable() { [EOL]     Throwable th = null; [EOL]     assertEquals("", ExceptionUtils.getRootCauseMessage(th)); [EOL]     th = new IllegalArgumentException("Base"); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]     th = new ExceptionWithCause("Wrapper", th); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL] } <line_num>: 472,482
@Override [EOL] public Throwable getCause() { [EOL]     return cause; [EOL] } <line_num>: 503,506
public void setCause(final Throwable cause) { [EOL]     this.cause = cause; [EOL] } <line_num>: 508,510
@SuppressWarnings("unused") [EOL] public void getTargetException() { [EOL] } <line_num>: 519,521
