@Override [EOL] public void setUp() throws Exception { [EOL]     exceptionContext = new ContextedException(new Exception(TEST_MESSAGE)); [EOL]     super.setUp(); [EOL] } <line_num>: 33,37
@Test [EOL] public void testContextedException() { [EOL]     exceptionContext = new ContextedException(); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(StringUtils.isEmpty(message)); [EOL] } <line_num>: 39,46
@Test [EOL] public void testContextedExceptionString() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE); [EOL]     assertEquals(TEST_MESSAGE, exceptionContext.getMessage()); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL] } <line_num>: 48,55
@Test [EOL] public void testContextedExceptionThrowable() { [EOL]     exceptionContext = new ContextedException(new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL] } <line_num>: 57,65
@Test [EOL] public void testContextedExceptionStringThrowable() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] } <line_num>: 67,76
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] } <line_num>: 78,87
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] } <line_num>: 89,100
@Test [EOL] public void testRawMessage() { [EOL]     assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertNull(exceptionContext.getRawMessage()); [EOL] } <line_num>: 102,109
