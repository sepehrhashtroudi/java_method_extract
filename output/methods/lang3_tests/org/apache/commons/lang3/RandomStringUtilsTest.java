@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new RandomStringUtils()); [EOL]     final Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(RandomStringUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(RandomStringUtils.class.getModifiers())); [EOL] } <line_num>: 39,47
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] } <line_num>: 53,130
@Test [EOL] public void testLANG805() { [EOL]     final long seed = System.currentTimeMillis(); [EOL]     assertEquals("aaa", RandomStringUtils.random(3, 0, 0, false, false, new char[] { 'a' }, new Random(seed))); [EOL] } <line_num>: 132,136
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] } <line_num>: 138,148
@Test [EOL] public void testExceptions() { [EOL]     final char[] DUMMY = new char[] { 'a' }; [EOL]     try { [EOL]         RandomStringUtils.random(-1); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, true, true); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(1, new char[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, ""); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, (String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 150,189
@Test [EOL] public void testRandomAlphaNumeric() { [EOL] } <line_num>: 195,196
@Test [EOL] public void testRandomNumeric() { [EOL] } <line_num>: 222,223
@Test [EOL] public void testRandomAlphabetic() { [EOL] } <line_num>: 249,250
@Test [EOL] public void testRandomAscii() { [EOL] } <line_num>: 276,277
@Test [EOL] public void testRandomStringUtilsHomog() { [EOL] } <line_num>: 306,307
private double chiSquare(final int[] expected, final int[] observed) { [EOL]     double sumSq = 0.0d; [EOL]     double dev = 0.0d; [EOL]     for (int i = 0; i < observed.length; i++) { [EOL]         dev = observed[i] - expected[i]; [EOL]         sumSq += dev * dev / expected[i]; [EOL]     } [EOL]     return sumSq; [EOL] } <line_num>: 337,345
@Test [EOL] public void testLang100() throws Exception { [EOL]     final int size = 5000; [EOL]     final String encoding = "UTF-8"; [EOL]     final String orig = RandomStringUtils.random(size); [EOL]     final byte[] bytes = orig.getBytes(encoding); [EOL]     final String copy = new String(bytes, encoding); [EOL]     for (int i = 0; i < orig.length() && i < copy.length(); i++) { [EOL]         final char o = orig.charAt(i); [EOL]         final char c = copy.charAt(i); [EOL]         assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]     } [EOL]     assertEquals(orig.length(), copy.length()); [EOL]     assertEquals(orig, copy); [EOL] } <line_num>: 355,374
