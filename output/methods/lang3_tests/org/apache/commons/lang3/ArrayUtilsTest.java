@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new ArrayUtils()); [EOL]     final Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers())); [EOL] } <line_num>: 45,53
@Test [EOL] public void testToString() { [EOL]     assertEquals("{}", ArrayUtils.toString(null)); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null })); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" })); [EOL]     assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]     assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]     assertEquals("{<null>}", ArrayUtils.toString(new String[] { null }, "<empty>")); [EOL]     assertEquals("{pink,blue}", ArrayUtils.toString(new String[] { "pink", "blue" }, "<empty>")); [EOL] } <line_num>: 56,69
@Test [EOL] public void testHashCode() { [EOL]     final long[][] array1 = new long[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final long[][] array2 = new long[][] { { 2, 5 }, { 4, 6 } }; [EOL]     assertTrue(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1)); [EOL]     assertFalse(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2)); [EOL]     final Object[] array3 = new Object[] { new String(new char[] { 'A', 'B' }) }; [EOL]     final Object[] array4 = new Object[] { "AB" }; [EOL]     assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3)); [EOL]     assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4)); [EOL]     final Object[] arrayA = new Object[] { new boolean[] { true, false }, new int[] { 6, 7 } }; [EOL]     final Object[] arrayB = new Object[] { new boolean[] { true, false }, new int[] { 6, 7 } }; [EOL]     assertTrue(ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA)); [EOL] } <line_num>: 72,87
private void assertIsEquals(final Object array1, final Object array2, final Object array3) { [EOL]     assertTrue(ArrayUtils.isEquals(array1, array1)); [EOL]     assertTrue(ArrayUtils.isEquals(array2, array2)); [EOL]     assertTrue(ArrayUtils.isEquals(array3, array3)); [EOL]     assertFalse(ArrayUtils.isEquals(array1, array2)); [EOL]     assertFalse(ArrayUtils.isEquals(array2, array1)); [EOL]     assertFalse(ArrayUtils.isEquals(array1, array3)); [EOL]     assertFalse(ArrayUtils.isEquals(array3, array1)); [EOL]     assertFalse(ArrayUtils.isEquals(array1, array2)); [EOL]     assertFalse(ArrayUtils.isEquals(array2, array1)); [EOL] } <line_num>: 90,100
@Test [EOL] public void testIsEquals() { [EOL]     final long[][] larray1 = new long[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final long[][] larray2 = new long[][] { { 2, 5 }, { 4, 6 } }; [EOL]     final long[] larray3 = new long[] { 2, 5 }; [EOL]     this.assertIsEquals(larray1, larray2, larray3); [EOL]     final int[][] iarray1 = new int[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final int[][] iarray2 = new int[][] { { 2, 5 }, { 4, 6 } }; [EOL]     final int[] iarray3 = new int[] { 2, 5 }; [EOL]     this.assertIsEquals(iarray1, iarray2, iarray3); [EOL]     final short[][] sarray1 = new short[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final short[][] sarray2 = new short[][] { { 2, 5 }, { 4, 6 } }; [EOL]     final short[] sarray3 = new short[] { 2, 5 }; [EOL]     this.assertIsEquals(sarray1, sarray2, sarray3); [EOL]     final float[][] farray1 = new float[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final float[][] farray2 = new float[][] { { 2, 5 }, { 4, 6 } }; [EOL]     final float[] farray3 = new float[] { 2, 5 }; [EOL]     this.assertIsEquals(farray1, farray2, farray3); [EOL]     final double[][] darray1 = new double[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final double[][] darray2 = new double[][] { { 2, 5 }, { 4, 6 } }; [EOL]     final double[] darray3 = new double[] { 2, 5 }; [EOL]     this.assertIsEquals(darray1, darray2, darray3); [EOL]     final byte[][] byteArray1 = new byte[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final byte[][] byteArray2 = new byte[][] { { 2, 5 }, { 4, 6 } }; [EOL]     final byte[] byteArray3 = new byte[] { 2, 5 }; [EOL]     this.assertIsEquals(byteArray1, byteArray2, byteArray3); [EOL]     final char[][] charArray1 = new char[][] { { 2, 5 }, { 4, 5 } }; [EOL]     final char[][] charArray2 = new char[][] { { 2, 5 }, { 4, 6 } }; [EOL]     final char[] charArray3 = new char[] { 2, 5 }; [EOL]     this.assertIsEquals(charArray1, charArray2, charArray3); [EOL]     final boolean[][] barray1 = new boolean[][] { { true, false }, { true, true } }; [EOL]     final boolean[][] barray2 = new boolean[][] { { true, false }, { true, false } }; [EOL]     final boolean[] barray3 = new boolean[] { false, true }; [EOL]     this.assertIsEquals(barray1, barray2, barray3); [EOL]     final Object[] array3 = new Object[] { new String(new char[] { 'A', 'B' }) }; [EOL]     final Object[] array4 = new Object[] { "AB" }; [EOL]     assertTrue(ArrayUtils.isEquals(array3, array3)); [EOL]     assertTrue(ArrayUtils.isEquals(array3, array4)); [EOL]     assertTrue(ArrayUtils.isEquals(null, null)); [EOL]     assertFalse(ArrayUtils.isEquals(null, array4)); [EOL] } <line_num>: 102,151
@Test [EOL] public void testArrayCreation() { [EOL]     final String[] array = ArrayUtils.toArray("foo", "bar"); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals("foo", array[0]); [EOL]     assertEquals("bar", array[1]); [EOL] } <line_num>: 157,164
@Test [EOL] public void testArrayCreationWithGeneralReturnType() { [EOL]     final Object obj = ArrayUtils.toArray("foo", "bar"); [EOL]     assertTrue(obj instanceof String[]); [EOL] } <line_num>: 169,174
@Test [EOL] public void testArrayCreationWithDifferentTypes() { [EOL]     final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI)); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals(Integer.valueOf(42), array[0]); [EOL]     assertEquals(Double.valueOf(Math.PI), array[1]); [EOL] } <line_num>: 179,186
@Test [EOL] public void testIndirectArrayCreation() { [EOL]     final String[] array = toArrayPropagatingType("foo", "bar"); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals("foo", array[0]); [EOL]     assertEquals("bar", array[1]); [EOL] } <line_num>: 191,198
@Test [EOL] public void testEmptyArrayCreation() { [EOL]     final String[] array = ArrayUtils.<String>toArray(); [EOL]     assertEquals(0, array.length); [EOL] } <line_num>: 203,208
@Test [EOL] public void testIndirectEmptyArrayCreation() { [EOL]     final String[] array = ArrayUtilsTest.<String>toArrayPropagatingType(); [EOL]     assertEquals(0, array.length); [EOL] } <line_num>: 213,218
private static <T> T[] toArrayPropagatingType(final T... items) { [EOL]     return ArrayUtils.toArray(items); [EOL] } <line_num>: 220,223
@Override [EOL] public Object getKey() { [EOL]     return "foo"; [EOL] } <line_num>: 248,251
@Override [EOL] public Object getValue() { [EOL]     return "bar"; [EOL] } <line_num>: 252,255
@Override [EOL] public Object setValue(final Object value) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 256,259
@Override [EOL] public boolean equals(final Object o) { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 260,263
@Override [EOL] public int hashCode() { [EOL]     throw new UnsupportedOperationException(); [EOL] } <line_num>: 264,267
@Test [EOL] public void testToMap() { [EOL]     Map<?, ?> map = ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "hello", "world" } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL]     assertEquals("world", map.get("hello")); [EOL]     assertEquals(null, ArrayUtils.toMap(null)); [EOL]     try { [EOL]         ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "short" } }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, "illegal type" }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, null }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     map = ArrayUtils.toMap(new Object[] { new Map.Entry<Object, Object>() { [EOL]  [EOL]         @Override [EOL]         public Object getKey() { [EOL]             return "foo"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object getValue() { [EOL]             return "bar"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object setValue(final Object value) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean equals(final Object o) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int hashCode() { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]     } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL] } <line_num>: 226,270
@Test [EOL] public void testClone() { [EOL]     assertArrayEquals(null, ArrayUtils.clone((Object[]) null)); [EOL]     Object[] original1 = new Object[0]; [EOL]     Object[] cloned1 = ArrayUtils.clone(original1); [EOL]     assertTrue(Arrays.equals(original1, cloned1)); [EOL]     assertTrue(original1 != cloned1); [EOL]     final StringBuffer buf = new StringBuffer("pick"); [EOL]     original1 = new Object[] { buf, "a", new String[] { "stick" } }; [EOL]     cloned1 = ArrayUtils.clone(original1); [EOL]     assertTrue(Arrays.equals(original1, cloned1)); [EOL]     assertTrue(original1 != cloned1); [EOL]     assertSame(original1[0], cloned1[0]); [EOL]     assertSame(original1[1], cloned1[1]); [EOL]     assertSame(original1[2], cloned1[2]); [EOL] } <line_num>: 273,289
@Test [EOL] public void testCloneBoolean() { [EOL]     assertEquals(null, ArrayUtils.clone((boolean[]) null)); [EOL]     final boolean[] original = new boolean[] { true, false }; [EOL]     final boolean[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] } <line_num>: 291,298
@Test [EOL] public void testCloneLong() { [EOL]     assertEquals(null, ArrayUtils.clone((long[]) null)); [EOL]     final long[] original = new long[] { 0L, 1L }; [EOL]     final long[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] } <line_num>: 300,307
@Test [EOL] public void testCloneInt() { [EOL]     assertEquals(null, ArrayUtils.clone((int[]) null)); [EOL]     final int[] original = new int[] { 5, 8 }; [EOL]     final int[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] } <line_num>: 309,316
@Test [EOL] public void testCloneShort() { [EOL]     assertEquals(null, ArrayUtils.clone((short[]) null)); [EOL]     final short[] original = new short[] { 1, 4 }; [EOL]     final short[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] } <line_num>: 318,325
@Test [EOL] public void testCloneChar() { [EOL]     assertEquals(null, ArrayUtils.clone((char[]) null)); [EOL]     final char[] original = new char[] { 'a', '4' }; [EOL]     final char[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] } <line_num>: 327,334
@Test [EOL] public void testCloneByte() { [EOL]     assertEquals(null, ArrayUtils.clone((byte[]) null)); [EOL]     final byte[] original = new byte[] { 1, 6 }; [EOL]     final byte[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] } <line_num>: 336,343
@Test [EOL] public void testCloneDouble() { [EOL]     assertEquals(null, ArrayUtils.clone((double[]) null)); [EOL]     final double[] original = new double[] { 2.4d, 5.7d }; [EOL]     final double[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] } <line_num>: 345,352
@Test [EOL] public void testCloneFloat() { [EOL]     assertEquals(null, ArrayUtils.clone((float[]) null)); [EOL]     final float[] original = new float[] { 2.6f, 6.4f }; [EOL]     final float[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] } <line_num>: 354,361
@Test [EOL] public void testNullToEmptyBoolean() { [EOL]     assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]     final boolean[] original = new boolean[] { true, false }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final boolean[] empty = new boolean[] {}; [EOL]     final boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 365,377
@Test [EOL] public void testNullToEmptyLong() { [EOL]     assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null)); [EOL]     final long[] original = new long[] { 1L, 2L }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final long[] empty = new long[] {}; [EOL]     final long[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 379,391
@Test [EOL] public void testNullToEmptyInt() { [EOL]     assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); [EOL]     final int[] original = new int[] { 1, 2 }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final int[] empty = new int[] {}; [EOL]     final int[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 393,405
@Test [EOL] public void testNullToEmptyShort() { [EOL]     assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]     final short[] original = new short[] { 1, 2 }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final short[] empty = new short[] {}; [EOL]     final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 407,419
@Test [EOL] public void testNullToEmptyChar() { [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null)); [EOL]     final char[] original = new char[] { 'a', 'b' }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final char[] empty = new char[] {}; [EOL]     final char[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 421,433
@Test [EOL] public void testNullToEmptyByte() { [EOL]     assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null)); [EOL]     final byte[] original = new byte[] { 0x0F, 0x0E }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final byte[] empty = new byte[] {}; [EOL]     final byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 435,447
@Test [EOL] public void testNullToEmptyDouble() { [EOL]     assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); [EOL]     final double[] original = new double[] { 1L, 2L }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final double[] empty = new double[] {}; [EOL]     final double[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 449,461
@Test [EOL] public void testNullToEmptyFloat() { [EOL]     assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null)); [EOL]     final float[] original = new float[] { 2.6f, 3.8f }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final float[] empty = new float[] {}; [EOL]     final float[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 463,475
@Test [EOL] public void testNullToEmptyObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null)); [EOL]     final Object[] original = new Object[] { Boolean.TRUE, Boolean.FALSE }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Object[] empty = new Object[] {}; [EOL]     final Object[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 477,489
@Test [EOL] public void testNullToEmptyString() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null)); [EOL]     final String[] original = new String[] { "abc", "def" }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final String[] empty = new String[] {}; [EOL]     final String[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 491,503
@Test [EOL] public void testNullToEmptyBooleanObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null)); [EOL]     final Boolean[] original = new Boolean[] { Boolean.TRUE, Boolean.FALSE }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Boolean[] empty = new Boolean[] {}; [EOL]     final Boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 505,517
@Test [EOL] public void testNullToEmptyLongObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null)); [EOL]     @SuppressWarnings("boxing") [EOL]     final Long[] original = new Long[] { 1L, 2L }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Long[] empty = new Long[] {}; [EOL]     final Long[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 519,533
@Test [EOL] public void testNullToEmptyIntObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null)); [EOL]     final Integer[] original = new Integer[] { 1, 2 }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Integer[] empty = new Integer[] {}; [EOL]     final Integer[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 535,547
@Test [EOL] public void testNullToEmptyShortObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null)); [EOL]     @SuppressWarnings("boxing") [EOL]     final Short[] original = new Short[] { 1, 2 }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Short[] empty = new Short[] {}; [EOL]     final Short[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 549,563
@Test [EOL] public void testNullToEmptyCharObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null)); [EOL]     final Character[] original = new Character[] { 'a', 'b' }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Character[] empty = new Character[] {}; [EOL]     final Character[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 565,577
@Test [EOL] public void testNullToEmptyByteObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null)); [EOL]     final Byte[] original = new Byte[] { 0x0F, 0x0E }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Byte[] empty = new Byte[] {}; [EOL]     final Byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 579,591
@Test [EOL] public void testNullToEmptyDoubleObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]     final Double[] original = new Double[] { 1D, 2D }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Double[] empty = new Double[] {}; [EOL]     final Double[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 593,605
@Test [EOL] public void testNullToEmptyFloatObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null)); [EOL]     final Float[] original = new Float[] { 2.6f, 3.8f }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Float[] empty = new Float[] {}; [EOL]     final Float[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] } <line_num>: 607,619
@Test [EOL] public void testSubarrayObject() { [EOL]     final Object[] nullArray = null; [EOL]     final Object[] objectArray = { "a", "b", "c", "d", "e", "f" }; [EOL]     assertEquals("0 start, mid end", "abcd", StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); [EOL]     assertEquals("0 start, length end", "abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); [EOL]     assertEquals("mid start, mid end", "bcd", StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); [EOL]     assertEquals("mid start, length end", "bcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", "", StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2))); [EOL]     assertEquals("start > end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2))); [EOL]     assertEquals("start == end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3))); [EOL]     assertEquals("start undershoot, normal end", "abcd", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4))); [EOL]     assertEquals("start overshoot, any end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4))); [EOL]     assertEquals("normal start, end overshoot", "cdef", StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33))); [EOL]     assertEquals("start undershoot, end overshoot", "abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12))); [EOL]     final Date[] dateArray = { new java.sql.Date(new Date().getTime()), new Date(), new Date(), new Date(), new Date() }; [EOL]     assertSame("Object type", Object.class, ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType()); [EOL]     assertSame("java.util.Date type", java.util.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); [EOL]     assertNotSame("java.sql.Date type", java.sql.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final java.sql.Date[] dummy = (java.sql.Date[]) ArrayUtils.subarray(dateArray, 1, 3); [EOL]         fail("Invalid downcast"); [EOL]     } catch (final ClassCastException e) { [EOL]     } [EOL] } <line_num>: 623,669
@Test [EOL] public void testSubarrayLong() { [EOL]     final long[] nullArray = null; [EOL]     final long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 }; [EOL]     final long[] leftSubarray = { 999910, 999911, 999912, 999913 }; [EOL]     final long[] midSubarray = { 999911, 999912, 999913, 999914 }; [EOL]     final long[] rightSubarray = { 999912, 999913, 999914, 999915 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("long type", long.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] } <line_num>: 671,746
@Test [EOL] public void testSubarrayInt() { [EOL]     final int[] nullArray = null; [EOL]     final int[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final int[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final int[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final int[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("int type", int.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] } <line_num>: 748,824
@Test [EOL] public void testSubarrayShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final short[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final short[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final short[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("short type", short.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] } <line_num>: 826,902
@Test [EOL] public void testSubarrChar() { [EOL]     final char[] nullArray = null; [EOL]     final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]     final char[] leftSubarray = { 'a', 'b', 'c', 'd' }; [EOL]     final char[] midSubarray = { 'b', 'c', 'd', 'e' }; [EOL]     final char[] rightSubarray = { 'c', 'd', 'e', 'f' }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("char type", char.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] } <line_num>: 904,980
@Test [EOL] public void testSubarrayByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final byte[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final byte[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final byte[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("byte type", byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] } <line_num>: 982,1058
@Test [EOL] public void testSubarrayDouble() { [EOL]     final double[] nullArray = null; [EOL]     final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]     final double[] leftSubarray = { 10.123, 11.234, 12.345, 13.456 }; [EOL]     final double[] midSubarray = { 11.234, 12.345, 13.456, 14.567 }; [EOL]     final double[] rightSubarray = { 12.345, 13.456, 14.567, 15.678 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("double type", double.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] } <line_num>: 1060,1136
@Test [EOL] public void testSubarrayFloat() { [EOL]     final float[] nullArray = null; [EOL]     final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]     final float[] leftSubarray = { 10, 11, 12, 13 }; [EOL]     final float[] midSubarray = { 11, 12, 13, 14 }; [EOL]     final float[] rightSubarray = { 12, 13, 14, 15 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("float type", float.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] } <line_num>: 1138,1214
@Test [EOL] public void testSubarrayBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] array = { true, true, false, true, false, true }; [EOL]     final boolean[] leftSubarray = { true, true, false, true }; [EOL]     final boolean[] midSubarray = { true, false, true, false }; [EOL]     final boolean[] rightSubarray = { false, true, false, true }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("boolean type", boolean.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] } <line_num>: 1216,1292
@Test [EOL] public void testSameLength() { [EOL]     final Object[] nullArray = null; [EOL]     final Object[] emptyArray = new Object[0]; [EOL]     final Object[] oneArray = new Object[] { "pick" }; [EOL]     final Object[] twoArray = new Object[] { "pick", "stick" }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1295,1321
@Test [EOL] public void testSameLengthBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] emptyArray = new boolean[0]; [EOL]     final boolean[] oneArray = new boolean[] { true }; [EOL]     final boolean[] twoArray = new boolean[] { true, false }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1323,1349
@Test [EOL] public void testSameLengthLong() { [EOL]     final long[] nullArray = null; [EOL]     final long[] emptyArray = new long[0]; [EOL]     final long[] oneArray = new long[] { 0L }; [EOL]     final long[] twoArray = new long[] { 0L, 76L }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1351,1377
@Test [EOL] public void testSameLengthInt() { [EOL]     final int[] nullArray = null; [EOL]     final int[] emptyArray = new int[0]; [EOL]     final int[] oneArray = new int[] { 4 }; [EOL]     final int[] twoArray = new int[] { 5, 7 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1379,1405
@Test [EOL] public void testSameLengthShort() { [EOL]     final short[] nullArray = null; [EOL]     final short[] emptyArray = new short[0]; [EOL]     final short[] oneArray = new short[] { 4 }; [EOL]     final short[] twoArray = new short[] { 6, 8 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1407,1433
@Test [EOL] public void testSameLengthChar() { [EOL]     final char[] nullArray = null; [EOL]     final char[] emptyArray = new char[0]; [EOL]     final char[] oneArray = new char[] { 'f' }; [EOL]     final char[] twoArray = new char[] { 'd', 't' }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1435,1461
@Test [EOL] public void testSameLengthByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] emptyArray = new byte[0]; [EOL]     final byte[] oneArray = new byte[] { 3 }; [EOL]     final byte[] twoArray = new byte[] { 4, 6 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1463,1489
@Test [EOL] public void testSameLengthDouble() { [EOL]     final double[] nullArray = null; [EOL]     final double[] emptyArray = new double[0]; [EOL]     final double[] oneArray = new double[] { 1.3d }; [EOL]     final double[] twoArray = new double[] { 4.5d, 6.3d }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1491,1517
@Test [EOL] public void testSameLengthFloat() { [EOL]     final float[] nullArray = null; [EOL]     final float[] emptyArray = new float[0]; [EOL]     final float[] oneArray = new float[] { 2.5f }; [EOL]     final float[] twoArray = new float[] { 6.4f, 5.8f }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] } <line_num>: 1519,1545
@Test [EOL] public void testSameType() { [EOL]     try { [EOL]         ArrayUtils.isSameType(null, null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(null, new Object[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(new Object[0], null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new Object[0])); [EOL]     assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0])); [EOL] } <line_num>: 1548,1568
@Test [EOL] public void testReverse() { [EOL]     final StringBuffer str1 = new StringBuffer("pick"); [EOL]     final String str2 = "a"; [EOL]     final String[] str3 = new String[] { "stick" }; [EOL]     final String str4 = "up"; [EOL]     Object[] array = new Object[] { str1, str2, str3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], str3); [EOL]     assertEquals(array[1], str2); [EOL]     assertEquals(array[2], str1); [EOL]     array = new Object[] { str1, str2, str3, str4 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], str4); [EOL]     assertEquals(array[1], str3); [EOL]     assertEquals(array[2], str2); [EOL]     assertEquals(array[3], str1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertArrayEquals(null, array); [EOL] } <line_num>: 1571,1594
@Test [EOL] public void testReverseLong() { [EOL]     long[] array = new long[] { 1L, 2L, 3L }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3L); [EOL]     assertEquals(array[1], 2L); [EOL]     assertEquals(array[2], 1L); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] } <line_num>: 1596,1607
@Test [EOL] public void testReverseInt() { [EOL]     int[] array = new int[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] } <line_num>: 1609,1620
@Test [EOL] public void testReverseShort() { [EOL]     short[] array = new short[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] } <line_num>: 1622,1633
@Test [EOL] public void testReverseChar() { [EOL]     char[] array = new char[] { 'a', 'f', 'C' }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 'C'); [EOL]     assertEquals(array[1], 'f'); [EOL]     assertEquals(array[2], 'a'); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] } <line_num>: 1635,1646
@Test [EOL] public void testReverseByte() { [EOL]     byte[] array = new byte[] { 2, 3, 4 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 4); [EOL]     assertEquals(array[1], 3); [EOL]     assertEquals(array[2], 2); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] } <line_num>: 1648,1659
@Test [EOL] public void testReverseDouble() { [EOL]     double[] array = new double[] { 0.3d, 0.4d, 0.5d }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5d, 0.0d); [EOL]     assertEquals(array[1], 0.4d, 0.0d); [EOL]     assertEquals(array[2], 0.3d, 0.0d); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] } <line_num>: 1661,1672
@Test [EOL] public void testReverseFloat() { [EOL]     float[] array = new float[] { 0.3f, 0.4f, 0.5f }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5f, 0.0f); [EOL]     assertEquals(array[1], 0.4f, 0.0f); [EOL]     assertEquals(array[2], 0.3f, 0.0f); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] } <line_num>: 1674,1685
@Test [EOL] public void testReverseBoolean() { [EOL]     boolean[] array = new boolean[] { false, false, true }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertTrue(array[0]); [EOL]     assertFalse(array[1]); [EOL]     assertFalse(array[2]); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] } <line_num>: 1687,1698
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] } <line_num>: 1701,1713
@Test [EOL] public void testIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0", 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0", 2)); [EOL]     assertEquals(5, ArrayUtils.indexOf(array, "0", 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2", 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray", 2)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, null, 8)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "0", 8)); [EOL] } <line_num>: 1715,1731
@Test [EOL] public void testLastIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL] } <line_num>: 1733,1744
@Test [EOL] public void testLastIndexOfWithStartIndex() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(null, "0", 2)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, "0", 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, "1", 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, "2", 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "3", -1)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray", 5)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1)); [EOL]     assertEquals(5, ArrayUtils.lastIndexOf(array, "0", 88)); [EOL] } <line_num>: 1746,1762
@Test [EOL] public void testContains() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertFalse(ArrayUtils.contains(null, null)); [EOL]     assertFalse(ArrayUtils.contains(null, "1")); [EOL]     assertTrue(ArrayUtils.contains(array, "0")); [EOL]     assertTrue(ArrayUtils.contains(array, "1")); [EOL]     assertTrue(ArrayUtils.contains(array, "2")); [EOL]     assertTrue(ArrayUtils.contains(array, "3")); [EOL]     assertTrue(ArrayUtils.contains(array, null)); [EOL]     assertFalse(ArrayUtils.contains(array, "notInArray")); [EOL] } <line_num>: 1764,1775
@Test [EOL] public void testIndexOfLong() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] } <line_num>: 1778,1788
@Test [EOL] public void testIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] } <line_num>: 1790,1802
@Test [EOL] public void testLastIndexOfLong() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL] } <line_num>: 1804,1814
@Test [EOL] public void testLastIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] } <line_num>: 1816,1828
@Test [EOL] public void testContainsLong() { [EOL]     long[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] } <line_num>: 1830,1840
@Test [EOL] public void testIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99)); [EOL] } <line_num>: 1843,1853
@Test [EOL] public void testIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL] } <line_num>: 1855,1867
@Test [EOL] public void testLastIndexOfInt() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL] } <line_num>: 1869,1879
@Test [EOL] public void testLastIndexOfIntWithStartIndex() { [EOL]     int[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] } <line_num>: 1881,1893
@Test [EOL] public void testContainsInt() { [EOL]     int[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] } <line_num>: 1895,1905
@Test [EOL] public void testIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99)); [EOL] } <line_num>: 1908,1918
@Test [EOL] public void testIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6)); [EOL] } <line_num>: 1920,1932
@Test [EOL] public void testLastIndexOfShort() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL] } <line_num>: 1934,1944
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] } <line_num>: 1946,1958
@Test [EOL] public void testContainsShort() { [EOL]     short[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (short) 1)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (short) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (short) 99)); [EOL] } <line_num>: 1960,1970
@Test [EOL] public void testIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e')); [EOL] } <line_num>: 1973,1983
@Test [EOL] public void testIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, 'a', 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, 'c', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6)); [EOL] } <line_num>: 1985,1997
@Test [EOL] public void testLastIndexOfChar() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 'a')); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 'b')); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 'c')); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, 'd')); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); [EOL] } <line_num>: 1999,2009
@Test [EOL] public void testLastIndexOfCharWithStartIndex() { [EOL]     char[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88)); [EOL] } <line_num>: 2011,2023
@Test [EOL] public void testContainsChar() { [EOL]     char[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 'b')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertTrue(ArrayUtils.contains(array, 'a')); [EOL]     assertTrue(ArrayUtils.contains(array, 'b')); [EOL]     assertTrue(ArrayUtils.contains(array, 'c')); [EOL]     assertTrue(ArrayUtils.contains(array, 'd')); [EOL]     assertFalse(ArrayUtils.contains(array, 'e')); [EOL] } <line_num>: 2025,2035
@Test [EOL] public void testIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99)); [EOL] } <line_num>: 2038,2048
@Test [EOL] public void testIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6)); [EOL] } <line_num>: 2050,2062
@Test [EOL] public void testLastIndexOfByte() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL] } <line_num>: 2064,2074
@Test [EOL] public void testLastIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88)); [EOL] } <line_num>: 2076,2088
@Test [EOL] public void testContainsByte() { [EOL]     byte[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 1)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (byte) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (byte) 99)); [EOL] } <line_num>: 2090,2100
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 3)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 99)); [EOL] } <line_num>: 2103,2117
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] } <line_num>: 2119,2131
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleWithStartIndex() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6)); [EOL] } <line_num>: 2133,2147
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); [EOL] } <line_num>: 2149,2165
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDouble() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL] } <line_num>: 2167,2180
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] } <line_num>: 2182,2194
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndex() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88)); [EOL] } <line_num>: 2196,2211
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { (double) 3 }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); [EOL] } <line_num>: 2213,2229
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDouble() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (double) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 99)); [EOL] } <line_num>: 2231,2242
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertFalse(ArrayUtils.contains(array, (double) 4.0, (double) 0.33)); [EOL]     assertFalse(ArrayUtils.contains(array, (double) 2.5, (double) 0.49)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.50)); [EOL]     assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.51)); [EOL] } <line_num>: 2244,2254
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99)); [EOL] } <line_num>: 2257,2270
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloatWithStartIndex() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6)); [EOL] } <line_num>: 2272,2287
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL] } <line_num>: 2289,2302
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfFloatWithStartIndex() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88)); [EOL] } <line_num>: 2304,2319
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testContainsFloat() { [EOL]     float[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (float) 1)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (float) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (float) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (float) 99)); [EOL] } <line_num>: 2321,2332
@Test [EOL] public void testIndexOfBoolean() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, true)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false)); [EOL] } <line_num>: 2335,2346
@Test [EOL] public void testIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL] } <line_num>: 2348,2362
@Test [EOL] public void testLastIndexOfBoolean() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL] } <line_num>: 2364,2375
@Test [EOL] public void testLastIndexOfBooleanWithStartIndex() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1)); [EOL] } <line_num>: 2377,2391
@Test [EOL] public void testContainsBoolean() { [EOL]     boolean[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertTrue(ArrayUtils.contains(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertTrue(ArrayUtils.contains(array, true)); [EOL]     assertFalse(ArrayUtils.contains(array, false)); [EOL] } <line_num>: 2393,2403
@Test [EOL] public void testToPrimitive_boolean() { [EOL]     final Boolean[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 2407,2421
@Test [EOL] public void testToPrimitive_boolean_boolean() { [EOL]     assertEquals(null, ArrayUtils.toPrimitive(null, false)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, true))); [EOL] } <line_num>: 2423,2439
@Test [EOL] public void testToObject_boolean() { [EOL]     final boolean[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); [EOL]     assertTrue(Arrays.equals(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, ArrayUtils.toObject(new boolean[] { true, false, true }))); [EOL] } <line_num>: 2441,2450
@Test [EOL] public void testToPrimitive_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 2454,2471
@Test [EOL] public void testToPrimitive_char_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0], (char) 0)); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, Character.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null, new Character('0') }, Character.MAX_VALUE))); [EOL] } <line_num>: 2473,2493
@Test [EOL] public void testToObject_char() { [EOL]     final char[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.toObject(new char[0])); [EOL]     assertTrue(Arrays.equals(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, ArrayUtils.toObject(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }))); [EOL] } <line_num>: 2495,2509
@Test [EOL] public void testToPrimitive_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 2513,2530
@Test [EOL] public void testToPrimitive_byte_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0], (byte) 1)); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, Byte.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null, Byte.valueOf((byte) 9999999) }, Byte.MAX_VALUE))); [EOL] } <line_num>: 2532,2552
@Test [EOL] public void testToObject_byte() { [EOL]     final byte[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.toObject(new byte[0])); [EOL]     assertTrue(Arrays.equals(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, ArrayUtils.toObject(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }))); [EOL] } <line_num>: 2554,2568
@Test [EOL] public void testToPrimitive_short() { [EOL]     final Short[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0])); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 2572,2589
@Test [EOL] public void testToPrimitive_short_short() { [EOL]     final Short[] s = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], Short.MIN_VALUE)); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, Short.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null, Short.valueOf((short) 9999999) }, Short.MAX_VALUE))); [EOL] } <line_num>: 2591,2610
@Test [EOL] public void testToObject_short() { [EOL]     final short[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.toObject(new short[0])); [EOL]     assertTrue(Arrays.equals(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, ArrayUtils.toObject(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }))); [EOL] } <line_num>: 2612,2626
@Test [EOL] public void testToPrimitive_int() { [EOL]     final Integer[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 2630,2645
@Test [EOL] public void testToPrimitive_int_int() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null, Integer.valueOf(9999999) }, Integer.MAX_VALUE))); [EOL] } <line_num>: 2647,2662
@Test [EOL] public void testToPrimitive_intNull() { [EOL]     final Integer[] iArray = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); [EOL] } <line_num>: 2664,2668
@Test [EOL] public void testToObject_int() { [EOL]     final int[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.toObject(new int[0])); [EOL]     assertTrue(Arrays.equals(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, ArrayUtils.toObject(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }))); [EOL] } <line_num>: 2670,2687
@Test [EOL] public void testToPrimitive_long() { [EOL]     final Long[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0])); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 2691,2709
@Test [EOL] public void testToPrimitive_long_long() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0], 1)); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null, Long.valueOf(9999999) }, Long.MAX_VALUE))); [EOL] } <line_num>: 2711,2729
@Test [EOL] public void testToObject_long() { [EOL]     final long[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.toObject(new long[0])); [EOL]     assertTrue(Arrays.equals(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, ArrayUtils.toObject(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }))); [EOL] } <line_num>: 2731,2748
@Test [EOL] public void testToPrimitive_float() { [EOL]     final Float[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0])); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 2752,2770
@Test [EOL] public void testToPrimitive_float_float() { [EOL]     final Float[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null, Float.valueOf(9999999) }, Float.MAX_VALUE))); [EOL] } <line_num>: 2772,2790
@Test [EOL] public void testToObject_float() { [EOL]     final float[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.toObject(new float[0])); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, ArrayUtils.toObject(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }))); [EOL] } <line_num>: 2792,2809
@Test [EOL] public void testToPrimitive_double() { [EOL]     final Double[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0])); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 2813,2831
@Test [EOL] public void testToPrimitive_double_double() { [EOL]     final Double[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0], 1)); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), null, Double.valueOf(9999999) }, Double.MAX_VALUE))); [EOL] } <line_num>: 2833,2851
@Test [EOL] public void testToObject_double() { [EOL]     final double[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.toObject(new double[0])); [EOL]     assertTrue(Arrays.equals(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, ArrayUtils.toObject(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }))); [EOL] } <line_num>: 2853,2870
@Test [EOL] public void testIsEmptyObject() { [EOL]     final Object[] emptyArray = new Object[] {}; [EOL]     final Object[] notEmptyArray = new Object[] { new String("Value") }; [EOL]     assertTrue(ArrayUtils.isEmpty((Object[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyArray)); [EOL] } <line_num>: 2876,2883
@Test [EOL] public void testIsEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertTrue(ArrayUtils.isEmpty((long[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyLongArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((int[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyIntArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((short[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyShortArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((char[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyCharArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertTrue(ArrayUtils.isEmpty((byte[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyByteArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertTrue(ArrayUtils.isEmpty((double[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyDoubleArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertTrue(ArrayUtils.isEmpty((float[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyFloatArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertTrue(ArrayUtils.isEmpty((boolean[]) null)); [EOL]     assertTrue(ArrayUtils.isEmpty(emptyBooleanArray)); [EOL]     assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray)); [EOL] } <line_num>: 2895,2944
@Test [EOL] public void testIsNotEmptyObject() { [EOL]     final Object[] emptyArray = new Object[] {}; [EOL]     final Object[] notEmptyArray = new Object[] { new String("Value") }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((Object[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyArray)); [EOL] } <line_num>: 2949,2956
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] } <line_num>: 2968,3017
@Test [EOL] public void testGetLength() { [EOL]     assertEquals(0, ArrayUtils.getLength(null)); [EOL]     final Object[] emptyObjectArray = new Object[0]; [EOL]     final Object[] notEmptyObjectArray = new Object[] { "aValue" }; [EOL]     assertEquals(0, ArrayUtils.getLength((Object[]) null)); [EOL]     assertEquals(0, ArrayUtils.getLength(emptyObjectArray)); [EOL]     assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertEquals(0, ArrayUtils.getLength((int[]) null)); [EOL]     assertEquals(0, ArrayUtils.getLength(emptyIntArray)); [EOL]     assertEquals(1, ArrayUtils.getLength(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertEquals(0, ArrayUtils.getLength((short[]) null)); [EOL]     assertEquals(0, ArrayUtils.getLength(emptyShortArray)); [EOL]     assertEquals(1, ArrayUtils.getLength(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertEquals(0, ArrayUtils.getLength((char[]) null)); [EOL]     assertEquals(0, ArrayUtils.getLength(emptyCharArray)); [EOL]     assertEquals(1, ArrayUtils.getLength(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertEquals(0, ArrayUtils.getLength((byte[]) null)); [EOL]     assertEquals(0, ArrayUtils.getLength(emptyByteArray)); [EOL]     assertEquals(1, ArrayUtils.getLength(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertEquals(0, ArrayUtils.getLength((double[]) null)); [EOL]     assertEquals(0, ArrayUtils.getLength(emptyDoubleArray)); [EOL]     assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertEquals(0, ArrayUtils.getLength((float[]) null)); [EOL]     assertEquals(0, ArrayUtils.getLength(emptyFloatArray)); [EOL]     assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertEquals(0, ArrayUtils.getLength((boolean[]) null)); [EOL]     assertEquals(0, ArrayUtils.getLength(emptyBooleanArray)); [EOL]     assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray)); [EOL]     try { [EOL]         ArrayUtils.getLength("notAnArray"); [EOL]         fail("IllegalArgumentException should have been thrown"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 3019,3075
