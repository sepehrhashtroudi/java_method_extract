@Test [EOL] public void testIsTrue1() { [EOL]     Validate.isTrue(true); [EOL]     try { [EOL]         Validate.isTrue(false); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated expression is false", ex.getMessage()); [EOL]     } [EOL] } <line_num>: 48,57
@Test [EOL] public void testIsTrue2() { [EOL]     Validate.isTrue(true, "MSG"); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] } <line_num>: 60,69
@Test [EOL] public void testIsTrue3() { [EOL]     Validate.isTrue(true, "MSG", 6); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG", 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] } <line_num>: 72,81
@Test [EOL] public void testIsTrue4() { [EOL]     Validate.isTrue(true, "MSG", 7); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG", 7); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] } <line_num>: 84,93
@Test [EOL] public void testIsTrue5() { [EOL]     Validate.isTrue(true, "MSG", 7.4d); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG", 7.4d); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] } <line_num>: 96,105
@Test [EOL] public void testNotNull1() { [EOL]     Validate.notNull(new Object()); [EOL]     try { [EOL]         Validate.notNull(null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notNull(str); [EOL]     assertSame(str, testStr); [EOL] } <line_num>: 109,122
@Test [EOL] public void testNotNull2() { [EOL]     Validate.notNull(new Object(), "MSG"); [EOL]     try { [EOL]         Validate.notNull(null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notNull(str, "Message"); [EOL]     assertSame(str, testStr); [EOL] } <line_num>: 125,138
@Test [EOL] public void testNotEmptyArray1() { [EOL]     Validate.notEmpty(new Object[] { null }); [EOL]     try { [EOL]         Validate.notEmpty((Object[]) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(new Object[0]); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     final String[] array = new String[] { "hi" }; [EOL]     final String[] test = Validate.notEmpty(array); [EOL]     assertSame(array, test); [EOL] } <line_num>: 142,161
@Test [EOL] public void testNotEmptyArray2() { [EOL]     Validate.notEmpty(new Object[] { null }, "MSG"); [EOL]     try { [EOL]         Validate.notEmpty((Object[]) null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(new Object[0], "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     final String[] array = new String[] { "hi" }; [EOL]     final String[] test = Validate.notEmpty(array, "Message"); [EOL]     assertSame(array, test); [EOL] } <line_num>: 164,183
@Test [EOL] public void testNotEmptyCollection1() { [EOL]     final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     coll.add(Integer.valueOf(8)); [EOL]     Validate.notEmpty(coll); [EOL]     final Collection<Integer> test = Validate.notEmpty(coll); [EOL]     assertSame(coll, test); [EOL] } <line_num>: 187,207
@Test [EOL] public void testNotEmptyCollection2() { [EOL]     final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Collection<?>) null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(coll, "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     coll.add(Integer.valueOf(8)); [EOL]     Validate.notEmpty(coll, "MSG"); [EOL]     final Collection<Integer> test = Validate.notEmpty(coll, "Message"); [EOL]     assertSame(coll, test); [EOL] } <line_num>: 210,230
@Test [EOL] public void testNotEmptyMap1() { [EOL]     final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Map<?, ?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(map); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     map.put("ll", Integer.valueOf(8)); [EOL]     Validate.notEmpty(map); [EOL]     final Map<String, Integer> test = Validate.notEmpty(map); [EOL]     assertSame(map, test); [EOL] } <line_num>: 234,254
@Test [EOL] public void testNotEmptyMap2() { [EOL]     final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(map, "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     map.put("ll", Integer.valueOf(8)); [EOL]     Validate.notEmpty(map, "MSG"); [EOL]     final Map<String, Integer> test = Validate.notEmpty(map, "Message"); [EOL]     assertSame(map, test); [EOL] } <line_num>: 257,277
@Test [EOL] public void testNotEmptyString1() { [EOL]     Validate.notEmpty("hjl"); [EOL]     try { [EOL]         Validate.notEmpty((String) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated character sequence is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(""); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated character sequence is empty", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notEmpty(str); [EOL]     assertSame(str, testStr); [EOL] } <line_num>: 281,300
@Test [EOL] public void testNotEmptyString2() { [EOL]     Validate.notEmpty("a", "MSG"); [EOL]     try { [EOL]         Validate.notEmpty((String) null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty("", "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notEmpty(str, "Message"); [EOL]     assertSame(str, testStr); [EOL] } <line_num>: 303,322
@Test [EOL] public void testNotBlankNullStringShouldThrow() { [EOL]     final String string = null; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] } <line_num>: 326,339
@Test [EOL] public void testNotBlankMsgNullStringShouldThrow() { [EOL]     final String string = null; [EOL]     try { [EOL]         Validate.notBlank(string, "Message"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException e) { [EOL]         assertEquals("Message", e.getMessage()); [EOL]     } [EOL] } <line_num>: 342,355
@Test [EOL] public void testNotBlankEmptyStringShouldThrow() { [EOL]     final String string = ""; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] } <line_num>: 358,371
@Test [EOL] public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]     final String string = "   "; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] } <line_num>: 374,387
@Test [EOL] public void testNotBlankBlankStringWithNewlinesShouldThrow() { [EOL]     final String string = " \n \t \r \n "; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] } <line_num>: 390,403
@Test [EOL] public void testNotBlankMsgBlankStringShouldThrow() { [EOL]     final String string = " \n \t \r \n "; [EOL]     try { [EOL]         Validate.notBlank(string, "Message"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Message", e.getMessage()); [EOL]     } [EOL] } <line_num>: 406,419
@Test [EOL] public void testNotBlankMsgBlankStringWithWhitespacesShouldThrow() { [EOL]     final String string = "   "; [EOL]     try { [EOL]         Validate.notBlank(string, "Message"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Message", e.getMessage()); [EOL]     } [EOL] } <line_num>: 422,435
@Test [EOL] public void testNotBlankMsgEmptyStringShouldThrow() { [EOL]     final String string = ""; [EOL]     try { [EOL]         Validate.notBlank(string, "Message"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Message", e.getMessage()); [EOL]     } [EOL] } <line_num>: 438,451
@Test [EOL] public void testNotBlankNotBlankStringShouldNotThrow() { [EOL]     final String string = "abc"; [EOL]     Validate.notBlank(string); [EOL] } <line_num>: 454,463
@Test [EOL] public void testNotBlankNotBlankStringWithWhitespacesShouldNotThrow() { [EOL]     final String string = "  abc   "; [EOL]     Validate.notBlank(string); [EOL] } <line_num>: 466,475
@Test [EOL] public void testNotBlankNotBlankStringWithNewlinesShouldNotThrow() { [EOL]     final String string = " \n \t abc \r \n "; [EOL]     Validate.notBlank(string); [EOL] } <line_num>: 478,487
@Test [EOL] public void testNotBlankMsgNotBlankStringShouldNotThrow() { [EOL]     final String string = "abc"; [EOL]     Validate.notBlank(string, "Message"); [EOL] } <line_num>: 490,499
@Test [EOL] public void testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow() { [EOL]     final String string = "  abc   "; [EOL]     Validate.notBlank(string, "Message"); [EOL] } <line_num>: 502,511
@Test [EOL] public void testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow() { [EOL]     final String string = " \n \t abc \r \n "; [EOL]     Validate.notBlank(string, "Message"); [EOL] } <line_num>: 514,523
@Test [EOL] public void testNotBlankReturnValues1() { [EOL]     final String str = "Hi"; [EOL]     final String test = Validate.notBlank(str); [EOL]     assertSame(str, test); [EOL] } <line_num>: 526,531
@Test [EOL] public void testNotBlankReturnValues2() { [EOL]     final String str = "Hi"; [EOL]     final String test = Validate.notBlank(str, "Message"); [EOL]     assertSame(str, test); [EOL] } <line_num>: 533,538
@Test [EOL] public void testNoNullElementsArray1() { [EOL]     String[] array = new String[] { "a", "b" }; [EOL]     Validate.noNullElements(array); [EOL]     try { [EOL]         Validate.noNullElements((Object[]) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     array[1] = null; [EOL]     try { [EOL]         Validate.noNullElements(array); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated array contains null element at index: 1", ex.getMessage()); [EOL]     } [EOL]     array = new String[] { "a", "b" }; [EOL]     final String[] test = Validate.noNullElements(array); [EOL]     assertSame(array, test); [EOL] } <line_num>: 542,563
@Test [EOL] public void testNoNullElementsArray2() { [EOL]     String[] array = new String[] { "a", "b" }; [EOL]     Validate.noNullElements(array, "MSG"); [EOL]     try { [EOL]         Validate.noNullElements((Object[]) null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     array[1] = null; [EOL]     try { [EOL]         Validate.noNullElements(array, "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     array = new String[] { "a", "b" }; [EOL]     final String[] test = Validate.noNullElements(array, "Message"); [EOL]     assertSame(array, test); [EOL] } <line_num>: 566,587
@Test [EOL] public void testNoNullElementsCollection1() { [EOL]     final List<String> coll = new ArrayList<String>(); [EOL]     coll.add("a"); [EOL]     coll.add("b"); [EOL]     Validate.noNullElements(coll); [EOL]     try { [EOL]         Validate.noNullElements((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, null); [EOL]     try { [EOL]         Validate.noNullElements(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, "b"); [EOL]     final List<String> test = Validate.noNullElements(coll); [EOL]     assertSame(coll, test); [EOL] } <line_num>: 591,614
@Test [EOL] public void testNoNullElementsCollection2() { [EOL]     final List<String> coll = new ArrayList<String>(); [EOL]     coll.add("a"); [EOL]     coll.add("b"); [EOL]     Validate.noNullElements(coll, "MSG"); [EOL]     try { [EOL]         Validate.noNullElements((Collection<?>) null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, null); [EOL]     try { [EOL]         Validate.noNullElements(coll, "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, "b"); [EOL]     final List<String> test = Validate.noNullElements(coll, "Message"); [EOL]     assertSame(coll, test); [EOL] } <line_num>: 617,640
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new Validate()); [EOL]     final Constructor<?>[] cons = Validate.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(Validate.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(Validate.class.getModifiers())); [EOL] } <line_num>: 644,652
@Test [EOL] public void testValidIndex_withMessage_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0, "Broken: "); [EOL]     Validate.validIndex(array, 1, "Broken: "); [EOL]     try { [EOL]         Validate.validIndex(array, -1, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray, "Message"); [EOL]     assertSame(strArray, test); [EOL] } <line_num>: 656,677
@Test [EOL] public void testValidIndex_array() { [EOL]     final Object[] array = new Object[2]; [EOL]     Validate.validIndex(array, 0); [EOL]     Validate.validIndex(array, 1); [EOL]     try { [EOL]         Validate.validIndex(array, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(array, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated array index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String[] strArray = new String[] { "Hi" }; [EOL]     final String[] test = Validate.noNullElements(strArray); [EOL]     assertSame(strArray, test); [EOL] } <line_num>: 679,700
@Test [EOL] public void testValidIndex_withMessage_collection() { [EOL]     final Collection<String> coll = new ArrayList<String>(); [EOL]     coll.add(null); [EOL]     coll.add(null); [EOL]     Validate.validIndex(coll, 0, "Broken: "); [EOL]     Validate.validIndex(coll, 1, "Broken: "); [EOL]     try { [EOL]         Validate.validIndex(coll, -1, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(coll, 2, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     final List<String> strColl = Arrays.asList(new String[] { "Hi" }); [EOL]     final List<String> test = Validate.validIndex(strColl, 0, "Message"); [EOL]     assertSame(strColl, test); [EOL] } <line_num>: 704,727
@Test [EOL] public void testValidIndex_collection() { [EOL]     final Collection<String> coll = new ArrayList<String>(); [EOL]     coll.add(null); [EOL]     coll.add(null); [EOL]     Validate.validIndex(coll, 0); [EOL]     Validate.validIndex(coll, 1); [EOL]     try { [EOL]         Validate.validIndex(coll, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated collection index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(coll, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated collection index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final List<String> strColl = Arrays.asList(new String[] { "Hi" }); [EOL]     final List<String> test = Validate.validIndex(strColl, 0); [EOL]     assertSame(strColl, test); [EOL] } <line_num>: 729,752
@Test [EOL] public void testValidIndex_withMessage_charSequence() { [EOL]     final CharSequence str = "Hi"; [EOL]     Validate.validIndex(str, 0, "Broken: "); [EOL]     Validate.validIndex(str, 1, "Broken: "); [EOL]     try { [EOL]         Validate.validIndex(str, -1, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(str, 2, "Broken: "); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("Broken: ", ex.getMessage()); [EOL]     } [EOL]     final String input = "Hi"; [EOL]     final String test = Validate.validIndex(input, 0, "Message"); [EOL]     assertSame(input, test); [EOL] } <line_num>: 756,777
@Test [EOL] public void testValidIndex_charSequence() { [EOL]     final CharSequence str = "Hi"; [EOL]     Validate.validIndex(str, 0); [EOL]     Validate.validIndex(str, 1); [EOL]     try { [EOL]         Validate.validIndex(str, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(str, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String input = "Hi"; [EOL]     final String test = Validate.validIndex(input, 0); [EOL]     assertSame(input, test); [EOL] } <line_num>: 779,800
@Test [EOL] public void testMatchesPattern() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); [EOL]     } [EOL] } <line_num>: 802,816
@Test [EOL] public void testMatchesPattern_withMessage() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*", "Does not match"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*", "Does not match"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Does not match", e.getMessage()); [EOL]     } [EOL] } <line_num>: 818,832
@Test [EOL] public void testInclusiveBetween() { [EOL]     Validate.inclusiveBetween("a", "c", "b"); [EOL]     Validate.inclusiveBetween(0, 2, 1); [EOL]     Validate.inclusiveBetween(0, 2, 2); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] } <line_num>: 834,846
@Test [EOL] public void testInclusiveBetween_withMessage() { [EOL]     Validate.inclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.inclusiveBetween(0, 2, 1, "Error"); [EOL]     Validate.inclusiveBetween(0, 2, 2, "Error"); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] } <line_num>: 848,860
@Test [EOL] public void testExclusiveBetween() { [EOL]     Validate.exclusiveBetween("a", "c", "b"); [EOL]     Validate.exclusiveBetween(0, 2, 1); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified exclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 5 is not in the specified exclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] } <line_num>: 862,879
@Test [EOL] public void testExclusiveBetween_withMessage() { [EOL]     Validate.exclusiveBetween("a", "c", "b", "Error"); [EOL]     Validate.exclusiveBetween(0, 2, 1, "Error"); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] } <line_num>: 881,898
@Test [EOL] public void testIsInstanceOf() { [EOL]     Validate.isInstanceOf(String.class, "hi"); [EOL]     Validate.isInstanceOf(Integer.class, 1); [EOL] } <line_num>: 900,904
@Test [EOL] public void testIsInstanceOfExceptionMessage() { [EOL]     try { [EOL]         Validate.isInstanceOf(List.class, "hi"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); [EOL]     } [EOL] } <line_num>: 906,914
@Test [EOL] public void testIsInstanceOf_withMessage() { [EOL]     Validate.isInstanceOf(String.class, "hi", "Error"); [EOL]     Validate.isInstanceOf(Integer.class, 1, "Error"); [EOL]     try { [EOL]         Validate.isInstanceOf(List.class, "hi", "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] } <line_num>: 916,926
@Test [EOL] public void testIsAssignable() { [EOL]     Validate.isAssignableFrom(CharSequence.class, String.class); [EOL]     Validate.isAssignableFrom(AbstractList.class, ArrayList.class); [EOL] } <line_num>: 928,932
@Test [EOL] public void testIsAssignableExceptionMessage() { [EOL]     try { [EOL]         Validate.isAssignableFrom(List.class, String.class); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Cannot assign a java.lang.String to a java.util.List", e.getMessage()); [EOL]     } [EOL] } <line_num>: 934,942
@Test [EOL] public void testIsAssignable_withMessage() { [EOL]     Validate.isAssignableFrom(CharSequence.class, String.class, "Error"); [EOL]     Validate.isAssignableFrom(AbstractList.class, ArrayList.class, "Error"); [EOL]     try { [EOL]         Validate.isAssignableFrom(List.class, String.class, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] } <line_num>: 944,954
