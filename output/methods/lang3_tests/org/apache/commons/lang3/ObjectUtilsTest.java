CloneableString(final String s) { [EOL]     super(s); [EOL] } <line_num>: 611,613
UncloneableString(final String s) { [EOL]     super(s); [EOL] } <line_num>: 626,628
public NonComparableCharSequence(final String value) { [EOL]     super(); [EOL]     Validate.notNull(value); [EOL]     this.value = value; [EOL] } <line_num>: 639,643
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new ObjectUtils()); [EOL]     final Constructor<?>[] cons = ObjectUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(ObjectUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(ObjectUtils.class.getModifiers())); [EOL] } <line_num>: 53,61
@Test [EOL] public void testIsNull() { [EOL]     final Object o = FOO; [EOL]     final Object dflt = BAR; [EOL]     assertSame("dflt was not returned when o was null", dflt, ObjectUtils.defaultIfNull(null, dflt)); [EOL]     assertSame("dflt was returned when o was not null", o, ObjectUtils.defaultIfNull(o, dflt)); [EOL] } <line_num>: 64,70
@Test [EOL] public void testFirstNonNull() { [EOL]     assertEquals(null, ObjectUtils.firstNonNull(null, null)); [EOL]     assertEquals("", ObjectUtils.firstNonNull(null, "")); [EOL]     final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, "123", "456"); [EOL]     assertEquals("123", firstNonNullGenerics); [EOL]     assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); [EOL]     assertEquals(null, ObjectUtils.firstNonNull()); [EOL]     assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); [EOL]     assertNull(ObjectUtils.firstNonNull()); [EOL]     assertNull(ObjectUtils.firstNonNull(null, null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object) null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object[]) null)); [EOL] } <line_num>: 72,88
@Test [EOL] public void testEquals() { [EOL]     assertTrue("ObjectUtils.equals(null, null) returned false", ObjectUtils.equals(null, null)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", null) returned true", !ObjectUtils.equals(FOO, null)); [EOL]     assertTrue("ObjectUtils.equals(null, \"bar\") returned true", !ObjectUtils.equals(null, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"bar\") returned true", !ObjectUtils.equals(FOO, BAR)); [EOL]     assertTrue("ObjectUtils.equals(\"foo\", \"foo\") returned false", ObjectUtils.equals(FOO, FOO)); [EOL] } <line_num>: 91,98
@Test [EOL] public void testNotEqual() { [EOL]     assertFalse("ObjectUtils.notEqual(null, null) returned false", ObjectUtils.notEqual(null, null)); [EOL]     assertTrue("ObjectUtils.notEqual(\"foo\", null) returned true", ObjectUtils.notEqual(FOO, null)); [EOL]     assertTrue("ObjectUtils.notEqual(null, \"bar\") returned true", ObjectUtils.notEqual(null, BAR)); [EOL]     assertTrue("ObjectUtils.notEqual(\"foo\", \"bar\") returned true", ObjectUtils.notEqual(FOO, BAR)); [EOL]     assertFalse("ObjectUtils.notEqual(\"foo\", \"foo\") returned false", ObjectUtils.notEqual(FOO, FOO)); [EOL] } <line_num>: 100,107
@Test [EOL] public void testHashCode() { [EOL]     assertEquals(0, ObjectUtils.hashCode(null)); [EOL]     assertEquals("a".hashCode(), ObjectUtils.hashCode("a")); [EOL] } <line_num>: 109,113
@Test [EOL] public void testHashCodeMulti_multiple_emptyArray() { [EOL]     final Object[] array = new Object[0]; [EOL]     assertEquals(1, ObjectUtils.hashCodeMulti(array)); [EOL] } <line_num>: 115,119
@Test [EOL] public void testHashCodeMulti_multiple_nullArray() { [EOL]     final Object[] array = null; [EOL]     assertEquals(1, ObjectUtils.hashCodeMulti(array)); [EOL] } <line_num>: 121,125
@Test [EOL] public void testHashCodeMulti_multiple_likeList() { [EOL]     final List<Object> list0 = new ArrayList<Object>(Arrays.asList()); [EOL]     assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti()); [EOL]     final List<Object> list1 = new ArrayList<Object>(Arrays.asList("a")); [EOL]     assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti("a")); [EOL]     final List<Object> list2 = new ArrayList<Object>(Arrays.asList("a", "b")); [EOL]     assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti("a", "b")); [EOL]     final List<Object> list3 = new ArrayList<Object>(Arrays.asList("a", "b", "c")); [EOL]     assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti("a", "b", "c")); [EOL] } <line_num>: 127,140
@Test [EOL] public void testIdentityToStringStringBuffer() { [EOL]     final Integer i = Integer.valueOf(45); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     final StringBuffer buffer = new StringBuffer(); [EOL]     ObjectUtils.identityToString(buffer, i); [EOL]     assertEquals(expected, buffer.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StringBuffer) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StringBuffer(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] } <line_num>: 183,202
@Test [EOL] public void testIdentityToStringStringBuilder() { [EOL]     assertEquals(null, ObjectUtils.identityToString(null)); [EOL]     assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), ObjectUtils.identityToString(FOO)); [EOL]     final Integer i = Integer.valueOf(90); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     assertEquals(expected, ObjectUtils.identityToString(i)); [EOL]     final StringBuilder builder = new StringBuilder(); [EOL]     ObjectUtils.identityToString(builder, i); [EOL]     assertEquals(expected, builder.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StringBuilder) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StringBuilder(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] } <line_num>: 204,230
@Test [EOL] public void testIdentityToStringStrBuilder() { [EOL]     final Integer i = Integer.valueOf(102); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     final StrBuilder builder = new StrBuilder(); [EOL]     ObjectUtils.identityToString(builder, i); [EOL]     assertEquals(expected, builder.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StrBuilder) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StrBuilder(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] } <line_num>: 232,252
@Test [EOL] public void testIdentityToStringAppendable() { [EOL]     final Integer i = Integer.valueOf(121); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     try { [EOL]         final Appendable appendable = new StringBuilder(); [EOL]         ObjectUtils.identityToString(appendable, i); [EOL]         assertEquals(expected, appendable.toString()); [EOL]     } catch (IOException ex) { [EOL]         fail("IOException unexpected"); [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString((Appendable) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } catch (IOException ex) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString((Appendable) (new StringBuilder()), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } catch (IOException ex) { [EOL]     } [EOL] } <line_num>: 254,280
@Test [EOL] public void testToString_Object() { [EOL]     assertEquals("", ObjectUtils.toString((Object) null)); [EOL]     assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE)); [EOL] } <line_num>: 282,286
@Test [EOL] public void testToString_ObjectString() { [EOL]     assertEquals(BAR, ObjectUtils.toString((Object) null, BAR)); [EOL]     assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR)); [EOL] } <line_num>: 288,292
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testNull() { [EOL]     assertNotNull(ObjectUtils.NULL); [EOL]     assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null); [EOL]     assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL)); [EOL] } <line_num>: 294,301
@Test [EOL] public void testMax() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.max((String) null)); [EOL]     assertNull(ObjectUtils.max(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1)); [EOL]     assertNull(ObjectUtils.max((String) null, (String) null)); [EOL] } <line_num>: 303,327
@Test [EOL] public void testMin() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     final Date nonNullComparable1 = calendar.getTime(); [EOL]     final Date nonNullComparable2 = calendar.getTime(); [EOL]     final String[] nullAray = null; [EOL]     calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1); [EOL]     final Date minComparable = calendar.getTime(); [EOL]     assertNotSame(nonNullComparable1, nonNullComparable2); [EOL]     assertNull(ObjectUtils.min((String) null)); [EOL]     assertNull(ObjectUtils.min(nullAray)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null)); [EOL]     assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2)); [EOL]     assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable)); [EOL]     assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1)); [EOL]     assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable)); [EOL]     assertNull(ObjectUtils.min((String) null, (String) null)); [EOL] } <line_num>: 329,353
@Test [EOL] public void testCompare() { [EOL]     final Integer one = Integer.valueOf(1); [EOL]     final Integer two = Integer.valueOf(2); [EOL]     final Integer nullValue = null; [EOL]     assertEquals("Null Null false", 0, ObjectUtils.compare(nullValue, nullValue)); [EOL]     assertEquals("Null Null true", 0, ObjectUtils.compare(nullValue, nullValue, true)); [EOL]     assertEquals("Null one false", -1, ObjectUtils.compare(nullValue, one)); [EOL]     assertEquals("Null one true", 1, ObjectUtils.compare(nullValue, one, true)); [EOL]     assertEquals("one Null false", 1, ObjectUtils.compare(one, nullValue)); [EOL]     assertEquals("one Null true", -1, ObjectUtils.compare(one, nullValue, true)); [EOL]     assertEquals("one two false", -1, ObjectUtils.compare(one, two)); [EOL]     assertEquals("one two true", -1, ObjectUtils.compare(one, two, true)); [EOL] } <line_num>: 358,375
@Test [EOL] public void testMedian() { [EOL]     assertEquals("foo", ObjectUtils.median("foo")); [EOL]     assertEquals("bar", ObjectUtils.median("foo", "bar")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah")); [EOL]     assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah")); [EOL]     assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10))); [EOL]     assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9))); [EOL]     assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8))); [EOL] } <line_num>: 377,392
@Test(expected = NullPointerException.class) [EOL] public void testMedian_nullItems() { [EOL]     ObjectUtils.median((String[]) null); [EOL] } <line_num>: 394,397
@Test(expected = IllegalArgumentException.class) [EOL] public void testMedian_emptyItems() { [EOL]     ObjectUtils.<String>median(); [EOL] } <line_num>: 399,402
@Test [EOL] public void testComparatorMedian() { [EOL]     final CharSequenceComparator cmp = new CharSequenceComparator(); [EOL]     final NonComparableCharSequence foo = new NonComparableCharSequence("foo"); [EOL]     final NonComparableCharSequence bar = new NonComparableCharSequence("bar"); [EOL]     final NonComparableCharSequence baz = new NonComparableCharSequence("baz"); [EOL]     final NonComparableCharSequence blah = new NonComparableCharSequence("blah"); [EOL]     final NonComparableCharSequence wah = new NonComparableCharSequence("wah"); [EOL]     assertSame(foo, ObjectUtils.median(cmp, foo)); [EOL]     assertSame(bar, ObjectUtils.median(cmp, foo, bar)); [EOL]     assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz)); [EOL]     assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz, blah)); [EOL]     assertSame(blah, ObjectUtils.median(cmp, foo, bar, baz, blah, wah)); [EOL] } <line_num>: 404,417
@Test(expected = NullPointerException.class) [EOL] public void testComparatorMedian_nullComparator() { [EOL]     ObjectUtils.median((Comparator<CharSequence>) null, new NonComparableCharSequence("foo")); [EOL] } <line_num>: 419,422
@Test(expected = NullPointerException.class) [EOL] public void testComparatorMedian_nullItems() { [EOL]     ObjectUtils.median(new CharSequenceComparator(), (CharSequence[]) null); [EOL] } <line_num>: 424,427
@Test(expected = IllegalArgumentException.class) [EOL] public void testComparatorMedian_emptyItems() { [EOL]     ObjectUtils.median(new CharSequenceComparator()); [EOL] } <line_num>: 429,432
@SuppressWarnings("unchecked") [EOL] @Test [EOL] public void testMode() { [EOL]     assertNull(ObjectUtils.mode((Object[]) null)); [EOL]     assertNull(ObjectUtils.mode()); [EOL]     assertNull(ObjectUtils.mode("foo", "bar", "baz")); [EOL]     assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar")); [EOL]     assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo")); [EOL]     assertEquals(Integer.valueOf(9), ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9))); [EOL] } <line_num>: 434,444
@Test [EOL] public void testCloneOfCloneable() { [EOL]     final CloneableString string = new CloneableString("apache"); [EOL]     final CloneableString stringClone = ObjectUtils.clone(string); [EOL]     assertEquals("apache", stringClone.getValue()); [EOL] } <line_num>: 449,454
@Test [EOL] public void testCloneOfNotCloneable() { [EOL]     final String string = new String("apache"); [EOL]     assertNull(ObjectUtils.clone(string)); [EOL] } <line_num>: 459,463
@Test(expected = NoSuchMethodException.class) [EOL] public void testCloneOfUncloneable() throws Throwable { [EOL]     final UncloneableString string = new UncloneableString("apache"); [EOL]     try { [EOL]         ObjectUtils.clone(string); [EOL]         fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]     } catch (final CloneFailedException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] } <line_num>: 468,477
@Test [EOL] public void testCloneOfStringArray() { [EOL]     assertTrue(Arrays.deepEquals(new String[] { "string" }, ObjectUtils.clone(new String[] { "string" }))); [EOL] } <line_num>: 482,486
@Test [EOL] public void testCloneOfPrimitiveArray() { [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, ObjectUtils.clone(new int[] { 1 }))); [EOL] } <line_num>: 491,494
@Test [EOL] public void testPossibleCloneOfCloneable() { [EOL]     final CloneableString string = new CloneableString("apache"); [EOL]     final CloneableString stringClone = ObjectUtils.cloneIfPossible(string); [EOL]     assertEquals("apache", stringClone.getValue()); [EOL] } <line_num>: 499,504
@Test [EOL] public void testPossibleCloneOfNotCloneable() { [EOL]     final String string = new String("apache"); [EOL]     assertSame(string, ObjectUtils.cloneIfPossible(string)); [EOL] } <line_num>: 509,513
@Test(expected = NoSuchMethodException.class) [EOL] public void testPossibleCloneOfUncloneable() throws Throwable { [EOL]     final UncloneableString string = new UncloneableString("apache"); [EOL]     try { [EOL]         ObjectUtils.cloneIfPossible(string); [EOL]         fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]     } catch (final CloneFailedException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] } <line_num>: 518,527
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 529,604
@Override [EOL] public CloneableString clone() throws CloneNotSupportedException { [EOL]     return (CloneableString) super.clone(); [EOL] } <line_num>: 615,618
@Override [EOL] public char charAt(final int arg0) { [EOL]     return value.charAt(arg0); [EOL] } <line_num>: 645,648
@Override [EOL] public int length() { [EOL]     return value.length(); [EOL] } <line_num>: 650,653
@Override [EOL] public CharSequence subSequence(final int arg0, final int arg1) { [EOL]     return value.subSequence(arg0, arg1); [EOL] } <line_num>: 655,658
@Override [EOL] public String toString() { [EOL]     return value; [EOL] } <line_num>: 660,663
@Override [EOL] public int compare(final CharSequence o1, final CharSequence o2) { [EOL]     return o1.toString().compareTo(o2.toString()); [EOL] } <line_num>: 668,671
