@Test [EOL] public void testIsEmpty() { [EOL]     assertTrue(StringUtils.isEmpty(null)); [EOL]     assertTrue(StringUtils.isEmpty("")); [EOL]     assertFalse(StringUtils.isEmpty(" ")); [EOL]     assertFalse(StringUtils.isEmpty("foo")); [EOL]     assertFalse(StringUtils.isEmpty("  foo  ")); [EOL] } <line_num>: 36,43
@Test [EOL] public void testIsNotEmpty() { [EOL]     assertFalse(StringUtils.isNotEmpty(null)); [EOL]     assertFalse(StringUtils.isNotEmpty("")); [EOL]     assertTrue(StringUtils.isNotEmpty(" ")); [EOL]     assertTrue(StringUtils.isNotEmpty("foo")); [EOL]     assertTrue(StringUtils.isNotEmpty("  foo  ")); [EOL] } <line_num>: 45,52
@Test [EOL] public void testIsBlank() { [EOL]     assertTrue(StringUtils.isBlank(null)); [EOL]     assertTrue(StringUtils.isBlank("")); [EOL]     assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertFalse(StringUtils.isBlank("foo")); [EOL]     assertFalse(StringUtils.isBlank("  foo  ")); [EOL] } <line_num>: 54,61
@Test [EOL] public void testIsNotBlank() { [EOL]     assertFalse(StringUtils.isNotBlank(null)); [EOL]     assertFalse(StringUtils.isNotBlank("")); [EOL]     assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]     assertTrue(StringUtils.isNotBlank("foo")); [EOL]     assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL] } <line_num>: 63,70
@Test [EOL] public void testTrim() { [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trim(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trim(FOO + "")); [EOL]     assertEquals("", StringUtils.trim(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trim("")); [EOL]     assertEquals(null, StringUtils.trim(null)); [EOL] } <line_num>: 73,84
@Test [EOL] public void testTrimToNull() { [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToNull(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToNull(FOO + "")); [EOL]     assertEquals(null, StringUtils.trimToNull(" \t\r\n\b ")); [EOL]     assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals(null, StringUtils.trimToNull("")); [EOL]     assertEquals(null, StringUtils.trimToNull(null)); [EOL] } <line_num>: 86,97
@Test [EOL] public void testTrimToEmpty() { [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); [EOL]     assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trimToEmpty("")); [EOL]     assertEquals("", StringUtils.trimToEmpty(null)); [EOL] } <line_num>: 99,110
@Test [EOL] public void testStrip_String() { [EOL]     assertEquals(null, StringUtils.strip(null)); [EOL]     assertEquals("", StringUtils.strip("")); [EOL]     assertEquals("", StringUtils.strip("        ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] } <line_num>: 113,121
@Test [EOL] public void testStripToNull_String() { [EOL]     assertEquals(null, StringUtils.stripToNull(null)); [EOL]     assertEquals(null, StringUtils.stripToNull("")); [EOL]     assertEquals(null, StringUtils.stripToNull("        ")); [EOL]     assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals("ab c", StringUtils.stripToNull("  ab c  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] } <line_num>: 123,132
@Test [EOL] public void testStripToEmpty_String() { [EOL]     assertEquals("", StringUtils.stripToEmpty(null)); [EOL]     assertEquals("", StringUtils.stripToEmpty("")); [EOL]     assertEquals("", StringUtils.stripToEmpty("        ")); [EOL]     assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] } <line_num>: 134,143
@Test [EOL] public void testStrip_StringString() { [EOL]     assertEquals(null, StringUtils.strip(null, null)); [EOL]     assertEquals("", StringUtils.strip("", null)); [EOL]     assertEquals("", StringUtils.strip("        ", null)); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ", null)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); [EOL]     assertEquals(null, StringUtils.strip(null, "")); [EOL]     assertEquals("", StringUtils.strip("", "")); [EOL]     assertEquals("        ", StringUtils.strip("        ", "")); [EOL]     assertEquals("  abc  ", StringUtils.strip("  abc  ", "")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); [EOL]     assertEquals(null, StringUtils.strip(null, " ")); [EOL]     assertEquals("", StringUtils.strip("", " ")); [EOL]     assertEquals("", StringUtils.strip("        ", " ")); [EOL]     assertEquals("abc", StringUtils.strip("  abc  ", " ")); [EOL]     assertEquals(null, StringUtils.strip(null, "ab")); [EOL]     assertEquals("", StringUtils.strip("", "ab")); [EOL]     assertEquals("        ", StringUtils.strip("        ", "ab")); [EOL]     assertEquals("  abc  ", StringUtils.strip("  abc  ", "ab")); [EOL]     assertEquals("c", StringUtils.strip("abcabab", "ab")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); [EOL] } <line_num>: 145,175
@Test [EOL] public void testStripStart_StringString() { [EOL]     assertEquals(null, StringUtils.stripStart(null, null)); [EOL]     assertEquals("", StringUtils.stripStart("", null)); [EOL]     assertEquals("", StringUtils.stripStart("        ", null)); [EOL]     assertEquals("abc  ", StringUtils.stripStart("  abc  ", null)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); [EOL]     assertEquals(null, StringUtils.stripStart(null, "")); [EOL]     assertEquals("", StringUtils.stripStart("", "")); [EOL]     assertEquals("        ", StringUtils.stripStart("        ", "")); [EOL]     assertEquals("  abc  ", StringUtils.stripStart("  abc  ", "")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, "")); [EOL]     assertEquals(null, StringUtils.stripStart(null, " ")); [EOL]     assertEquals("", StringUtils.stripStart("", " ")); [EOL]     assertEquals("", StringUtils.stripStart("        ", " ")); [EOL]     assertEquals("abc  ", StringUtils.stripStart("  abc  ", " ")); [EOL]     assertEquals(null, StringUtils.stripStart(null, "ab")); [EOL]     assertEquals("", StringUtils.stripStart("", "ab")); [EOL]     assertEquals("        ", StringUtils.stripStart("        ", "ab")); [EOL]     assertEquals("  abc  ", StringUtils.stripStart("  abc  ", "ab")); [EOL]     assertEquals("cabab", StringUtils.stripStart("abcabab", "ab")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, "")); [EOL] } <line_num>: 177,207
@Test [EOL] public void testStripEnd_StringString() { [EOL]     assertEquals(null, StringUtils.stripEnd(null, null)); [EOL]     assertEquals("", StringUtils.stripEnd("", null)); [EOL]     assertEquals("", StringUtils.stripEnd("        ", null)); [EOL]     assertEquals("  abc", StringUtils.stripEnd("  abc  ", null)); [EOL]     assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); [EOL]     assertEquals(null, StringUtils.stripEnd(null, "")); [EOL]     assertEquals("", StringUtils.stripEnd("", "")); [EOL]     assertEquals("        ", StringUtils.stripEnd("        ", "")); [EOL]     assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); [EOL]     assertEquals(null, StringUtils.stripEnd(null, " ")); [EOL]     assertEquals("", StringUtils.stripEnd("", " ")); [EOL]     assertEquals("", StringUtils.stripEnd("        ", " ")); [EOL]     assertEquals("  abc", StringUtils.stripEnd("  abc  ", " ")); [EOL]     assertEquals(null, StringUtils.stripEnd(null, "ab")); [EOL]     assertEquals("", StringUtils.stripEnd("", "ab")); [EOL]     assertEquals("        ", StringUtils.stripEnd("        ", "ab")); [EOL]     assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "ab")); [EOL]     assertEquals("abc", StringUtils.stripEnd("abcabab", "ab")); [EOL]     assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); [EOL] } <line_num>: 209,239
@Test [EOL] public void testStripAll() { [EOL]     final String[] empty = new String[0]; [EOL]     final String[] fooSpace = new String[] { "  " + FOO + "  ", "  " + FOO, FOO + "  " }; [EOL]     final String[] fooDots = new String[] { ".." + FOO + "..", ".." + FOO, FOO + ".." }; [EOL]     final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]     assertNull(StringUtils.stripAll((String[]) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll()); [EOL]     assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null)); [EOL]     assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]     assertNull(StringUtils.stripAll(null, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]     assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL] } <line_num>: 241,260
@Test [EOL] public void testStripAccents() { [EOL]     final String cue = "\u00C7\u00FA\u00EA"; [EOL]     assertEquals("Failed to strip accents from " + cue, "Cue", StringUtils.stripAccents(cue)); [EOL]     final String lots = "\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C7\u00C8\u00C9" + "\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D1\u00D2\u00D3" + "\u00D4\u00D5\u00D6\u00D9\u00DA\u00DB\u00DC\u00DD"; [EOL]     assertEquals("Failed to strip accents from " + lots, "AAAAAACEEEEIIIINOOOOOUUUUY", StringUtils.stripAccents(lots)); [EOL]     assertNull("Failed null safety", StringUtils.stripAccents(null)); [EOL]     assertEquals("Failed empty String", "", StringUtils.stripAccents("")); [EOL]     assertEquals("Failed to handle non-accented text", "control", StringUtils.stripAccents("control")); [EOL]     assertEquals("Failed to handle easy example", "eclair", StringUtils.stripAccents("\u00E9clair")); [EOL] } <line_num>: 262,278
