@Before [EOL] public void setup() throws Exception { [EOL]     field1 = getClass().getDeclaredField("dummy1"); [EOL]     field2 = getClass().getDeclaredField("dummy2"); [EOL]     field3 = getClass().getDeclaredField("dummy3"); [EOL]     field4 = getClass().getDeclaredField("dummy4"); [EOL] } <line_num>: 389,395
@Test [EOL] public void testEquivalence() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]     assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] } <line_num>: 397,401
@Test [EOL] public void testSameInstance() { [EOL]     assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] } <line_num>: 403,406
@Test [EOL] public void testNonEquivalentAnnotationsOfSameType() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] } <line_num>: 408,412
@Test [EOL] public void testAnnotationsOfDifferingTypes() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4.getAnnotation(NestAnnotation.class))); [EOL]     assertFalse(AnnotationUtils.equals(field4.getAnnotation(NestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL] } <line_num>: 414,418
@Test [EOL] public void testOneArgNull() { [EOL]     assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]     assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL] } <line_num>: 420,424
@Test [EOL] public void testBothArgsNull() { [EOL]     assertTrue(AnnotationUtils.equals(null, null)); [EOL] } <line_num>: 426,429
@Test [EOL] public void testIsValidAnnotationMemberType() { [EOL]     for (final Class<?> type : new Class[] { byte.class, short.class, int.class, char.class, long.class, float.class, double.class, boolean.class, String.class, Class.class, NestAnnotation.class, TestAnnotation.class, Stooge.class, ElementType.class }) { [EOL]         assertTrue(AnnotationUtils.isValidAnnotationMemberType(type)); [EOL]         assertTrue(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass())); [EOL]     } [EOL]     for (final Class<?> type : new Class[] { Object.class, Map.class, Collection.class }) { [EOL]         assertFalse(AnnotationUtils.isValidAnnotationMemberType(type)); [EOL]         assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass())); [EOL]     } [EOL] } <line_num>: 431,445
@Override [EOL] public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable { [EOL]     if ("equals".equals(method.getName()) && method.getParameterTypes().length == 1) { [EOL]         return Boolean.valueOf(proxy == args[0]); [EOL]     } [EOL]     if ("hashCode".equals(method.getName()) && method.getParameterTypes().length == 0) { [EOL]         return Integer.valueOf(System.identityHashCode(proxy)); [EOL]     } [EOL]     if ("toString".equals(method.getName()) && method.getParameterTypes().length == 0) { [EOL]         return "Test proxy"; [EOL]     } [EOL]     return method.invoke(real, args); [EOL] } <line_num>: 454,466
@Test(timeout = 666000) [EOL] public void testGeneratedAnnotationEquivalentToRealAnnotation() throws Exception { [EOL]     final Test real = getClass().getDeclaredMethod("testGeneratedAnnotationEquivalentToRealAnnotation").getAnnotation(Test.class); [EOL]     final InvocationHandler generatedTestInvocationHandler = new InvocationHandler() { [EOL]  [EOL]         @Override [EOL]         public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable { [EOL]             if ("equals".equals(method.getName()) && method.getParameterTypes().length == 1) { [EOL]                 return Boolean.valueOf(proxy == args[0]); [EOL]             } [EOL]             if ("hashCode".equals(method.getName()) && method.getParameterTypes().length == 0) { [EOL]                 return Integer.valueOf(System.identityHashCode(proxy)); [EOL]             } [EOL]             if ("toString".equals(method.getName()) && method.getParameterTypes().length == 0) { [EOL]                 return "Test proxy"; [EOL]             } [EOL]             return method.invoke(real, args); [EOL]         } [EOL]     }; [EOL]     final Test generated = (Test) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { Test.class }, generatedTestInvocationHandler); [EOL]     assertTrue(real.equals(generated)); [EOL]     assertFalse(generated.equals(real)); [EOL]     assertTrue(AnnotationUtils.equals(generated, real)); [EOL]     assertTrue(AnnotationUtils.equals(real, generated)); [EOL]     final Test generated2 = (Test) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { Test.class }, generatedTestInvocationHandler); [EOL]     assertFalse(generated.equals(generated2)); [EOL]     assertFalse(generated2.equals(generated)); [EOL]     assertTrue(AnnotationUtils.equals(generated, generated2)); [EOL]     assertTrue(AnnotationUtils.equals(generated2, generated)); [EOL] } <line_num>: 447,484
@Test(timeout = 666000) [EOL] public void testHashCode() throws Exception { [EOL]     final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]     assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]     final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]     final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]     assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL] } <line_num>: 486,494
@Test(timeout = 666000) [EOL] public void testToString() throws Exception { [EOL]     final Test testAnno = getClass().getDeclaredMethod("testToString").getAnnotation(Test.class); [EOL]     final String toString = AnnotationUtils.toString(testAnno); [EOL]     assertTrue(toString.startsWith("@org.junit.Test(")); [EOL]     assertTrue(toString.endsWith(")")); [EOL]     assertTrue(toString.contains("expected=class org.junit.Test$None")); [EOL]     assertTrue(toString.contains("timeout=666000")); [EOL]     assertTrue(toString.contains(", ")); [EOL] } <line_num>: 496,506
