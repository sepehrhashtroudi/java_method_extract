@Test [EOL] public void testBasic() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.FALSE); [EOL]     assertEquals(0, triple.getLeft().intValue()); [EOL]     assertEquals("foo", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL]     final MutableTriple<Object, String, String> triple2 = new MutableTriple<Object, String, String>(null, "bar", "hello"); [EOL]     assertNull(triple2.getLeft()); [EOL]     assertEquals("bar", triple2.getMiddle()); [EOL]     assertEquals("hello", triple2.getRight()); [EOL] } <line_num>: 37,47
@Test [EOL] public void testDefault() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(); [EOL]     assertNull(triple.getLeft()); [EOL]     assertNull(triple.getMiddle()); [EOL]     assertNull(triple.getRight()); [EOL] } <line_num>: 49,55
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     triple.setLeft(42); [EOL]     triple.setMiddle("bar"); [EOL]     triple.setRight(Boolean.FALSE); [EOL]     assertEquals(42, triple.getLeft().intValue()); [EOL]     assertEquals("bar", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL] } <line_num>: 57,66
@Test [EOL] public void testTripleOf() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = MutableTriple.of(0, "foo", Boolean.TRUE); [EOL]     assertEquals(0, triple.getLeft().intValue()); [EOL]     assertEquals("foo", triple.getMiddle()); [EOL]     assertEquals(Boolean.TRUE, triple.getRight()); [EOL]     final MutableTriple<Object, String, String> triple2 = MutableTriple.of(null, "bar", "hello"); [EOL]     assertNull(triple2.getLeft()); [EOL]     assertEquals("bar", triple2.getMiddle()); [EOL]     assertEquals("hello", triple2.getRight()); [EOL] } <line_num>: 68,78
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(MutableTriple.of(null, "foo", "baz"), MutableTriple.of(null, "foo", "baz")); [EOL]     assertFalse(MutableTriple.of("foo", 0, Boolean.TRUE).equals(MutableTriple.of("foo", null, Boolean.TRUE))); [EOL]     assertFalse(MutableTriple.of("foo", "bar", "baz").equals(MutableTriple.of("xyz", "bar", "baz"))); [EOL]     assertFalse(MutableTriple.of("foo", "bar", "baz").equals(MutableTriple.of("foo", "bar", "blo"))); [EOL]     final MutableTriple<String, String, String> p = MutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] } <line_num>: 80,90
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(MutableTriple.of(null, "foo", "baz").hashCode(), MutableTriple.of(null, "foo", "baz").hashCode()); [EOL] } <line_num>: 92,95
@Test [EOL] public void testToString() throws Exception { [EOL]     assertEquals("(null,null,null)", MutableTriple.of(null, null, null).toString()); [EOL]     assertEquals("(null,two,null)", MutableTriple.of(null, "two", null).toString()); [EOL]     assertEquals("(one,null,null)", MutableTriple.of("one", null, null).toString()); [EOL]     assertEquals("(one,two,null)", MutableTriple.of("one", "two", null).toString()); [EOL]     assertEquals("(null,two,three)", MutableTriple.of(null, "two", "three").toString()); [EOL]     assertEquals("(one,null,three)", MutableTriple.of("one", null, "three").toString()); [EOL]     assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString()); [EOL] } <line_num>: 97,106
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> origTriple = MutableTriple.of(0, "foo", Boolean.TRUE); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origTriple); [EOL]     final MutableTriple<Integer, String, Boolean> deserializedTriple = (MutableTriple<Integer, String, Boolean>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origTriple, deserializedTriple); [EOL]     assertEquals(origTriple.hashCode(), deserializedTriple.hashCode()); [EOL] } <line_num>: 108,119
