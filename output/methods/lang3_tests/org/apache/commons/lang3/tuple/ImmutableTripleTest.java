@Test [EOL] public void testBasic() throws Exception { [EOL]     final ImmutableTriple<Integer, String, Boolean> triple = new ImmutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     assertEquals(0, triple.left.intValue()); [EOL]     assertEquals(0, triple.getLeft().intValue()); [EOL]     assertEquals("foo", triple.middle); [EOL]     assertEquals("foo", triple.getMiddle()); [EOL]     assertEquals(Boolean.TRUE, triple.right); [EOL]     assertEquals(Boolean.TRUE, triple.getRight()); [EOL]     final ImmutableTriple<Object, String, Integer> triple2 = new ImmutableTriple<Object, String, Integer>(null, "bar", 42); [EOL]     assertNull(triple2.left); [EOL]     assertNull(triple2.getLeft()); [EOL]     assertEquals("bar", triple2.middle); [EOL]     assertEquals("bar", triple2.getMiddle()); [EOL]     assertEquals(new Integer(42), triple2.right); [EOL]     assertEquals(new Integer(42), triple2.getRight()); [EOL] } <line_num>: 37,53
@Test [EOL] public void testTripleOf() throws Exception { [EOL]     final ImmutableTriple<Integer, String, Boolean> triple = ImmutableTriple.of(0, "foo", Boolean.FALSE); [EOL]     assertEquals(0, triple.left.intValue()); [EOL]     assertEquals(0, triple.getLeft().intValue()); [EOL]     assertEquals("foo", triple.middle); [EOL]     assertEquals("foo", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.right); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL]     final ImmutableTriple<Object, String, Boolean> triple2 = ImmutableTriple.of(null, "bar", Boolean.TRUE); [EOL]     assertNull(triple2.left); [EOL]     assertNull(triple2.getLeft()); [EOL]     assertEquals("bar", triple2.middle); [EOL]     assertEquals("bar", triple2.getMiddle()); [EOL]     assertEquals(Boolean.TRUE, triple2.right); [EOL]     assertEquals(Boolean.TRUE, triple2.getRight()); [EOL] } <line_num>: 55,71
@Test [EOL] public void testEquals() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]     assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]     assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]     final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]     assertTrue(p.equals(p)); [EOL]     assertFalse(p.equals(new Object())); [EOL] } <line_num>: 73,82
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode()); [EOL] } <line_num>: 84,87
@Test [EOL] public void testToString() throws Exception { [EOL]     assertEquals("(null,null,null)", ImmutableTriple.of(null, null, null).toString()); [EOL]     assertEquals("(null,two,null)", ImmutableTriple.of(null, "two", null).toString()); [EOL]     assertEquals("(one,null,null)", ImmutableTriple.of("one", null, null).toString()); [EOL]     assertEquals("(one,two,null)", ImmutableTriple.of("one", "two", null).toString()); [EOL]     assertEquals("(null,two,three)", ImmutableTriple.of(null, "two", "three").toString()); [EOL]     assertEquals("(one,null,three)", ImmutableTriple.of("one", null, "three").toString()); [EOL]     assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString()); [EOL] } <line_num>: 89,98
@Test [EOL] @SuppressWarnings("unchecked") [EOL] public void testSerialization() throws Exception { [EOL]     final ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, "foo", Boolean.TRUE); [EOL]     final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]     out.writeObject(origTriple); [EOL]     final ImmutableTriple<Integer, String, Boolean> deserializedTriple = (ImmutableTriple<Integer, String, Boolean>) new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]     assertEquals(origTriple, deserializedTriple); [EOL]     assertEquals(origTriple.hashCode(), deserializedTriple.hashCode()); [EOL] } <line_num>: 100,111
