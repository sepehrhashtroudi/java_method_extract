@Test [EOL] public void testTripleOf() throws Exception { [EOL]     final Triple<Integer, String, Boolean> triple = Triple.of(0, "foo", Boolean.TRUE); [EOL]     assertTrue(triple instanceof ImmutableTriple<?, ?, ?>); [EOL]     assertEquals(0, ((ImmutableTriple<Integer, String, Boolean>) triple).left.intValue()); [EOL]     assertEquals("foo", ((ImmutableTriple<Integer, String, Boolean>) triple).middle); [EOL]     assertEquals(Boolean.TRUE, ((ImmutableTriple<Integer, String, Boolean>) triple).right); [EOL]     final Triple<Object, String, Long> triple2 = Triple.of(null, "bar", Long.valueOf(200L)); [EOL]     assertTrue(triple2 instanceof ImmutableTriple<?, ?, ?>); [EOL]     assertNull(((ImmutableTriple<Object, String, Long>) triple2).left); [EOL]     assertEquals("bar", ((ImmutableTriple<Object, String, Long>) triple2).middle); [EOL]     assertEquals(new Long(200L), ((ImmutableTriple<Object, String, Long>) triple2).right); [EOL] } <line_num>: 35,47
@Test [EOL] public void testCompatibilityBetweenTriples() throws Exception { [EOL]     final Triple<Integer, String, Boolean> triple = ImmutableTriple.of(0, "foo", Boolean.TRUE); [EOL]     final Triple<Integer, String, Boolean> triple2 = MutableTriple.of(0, "foo", Boolean.TRUE); [EOL]     assertEquals(triple, triple2); [EOL]     assertEquals(triple.hashCode(), triple2.hashCode()); [EOL]     final HashSet<Triple<Integer, String, Boolean>> set = new HashSet<Triple<Integer, String, Boolean>>(); [EOL]     set.add(triple); [EOL]     assertTrue(set.contains(triple2)); [EOL] } <line_num>: 49,58
@Test [EOL] public void testComparable1() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "D", "A"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("B", "C", "A"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] } <line_num>: 60,68
@Test [EOL] public void testComparable2() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "C", "B"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "D", "B"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] } <line_num>: 70,78
@Test [EOL] public void testComparable3() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("A", "A", "D"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("A", "B", "C"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] } <line_num>: 80,88
@Test [EOL] public void testComparable4() throws Exception { [EOL]     final Triple<String, String, String> triple1 = Triple.of("B", "A", "C"); [EOL]     final Triple<String, String, String> triple2 = Triple.of("B", "A", "D"); [EOL]     assertTrue(triple1.compareTo(triple1) == 0); [EOL]     assertTrue(triple1.compareTo(triple2) < 0); [EOL]     assertTrue(triple2.compareTo(triple2) == 0); [EOL]     assertTrue(triple2.compareTo(triple1) > 0); [EOL] } <line_num>: 90,98
@Test [EOL] public void testToString() throws Exception { [EOL]     final Triple<String, String, String> triple = Triple.of("Key", "Something", "Value"); [EOL]     assertEquals("(Key,Something,Value)", triple.toString()); [EOL] } <line_num>: 100,104
@Test [EOL] public void testToStringCustom() throws Exception { [EOL]     final Calendar date = Calendar.getInstance(); [EOL]     date.set(2011, Calendar.APRIL, 25); [EOL]     final Triple<String, String, Calendar> triple = Triple.of("DOB", "string", date); [EOL]     assertEquals("Test created on " + "04-25-2011", triple.toString("Test created on %3$tm-%3$td-%3$tY")); [EOL] } <line_num>: 106,112
@Test [EOL] public void testFormattable_simple() throws Exception { [EOL]     final Triple<String, String, String> triple = Triple.of("Key", "Something", "Value"); [EOL]     assertEquals("(Key,Something,Value)", String.format("%1$s", triple)); [EOL] } <line_num>: 114,118
@Test [EOL] public void testFormattable_padded() throws Exception { [EOL]     final Triple<String, String, String> triple = Triple.of("Key", "Something", "Value"); [EOL]     assertEquals("         (Key,Something,Value)", String.format("%1$30s", triple)); [EOL] } <line_num>: 120,124
