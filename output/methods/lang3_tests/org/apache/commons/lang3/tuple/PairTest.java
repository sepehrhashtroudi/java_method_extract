@Test [EOL] public void testPairOf() throws Exception { [EOL]     final Pair<Integer, String> pair = Pair.of(0, "foo"); [EOL]     assertTrue(pair instanceof ImmutablePair<?, ?>); [EOL]     assertEquals(0, ((ImmutablePair<Integer, String>) pair).left.intValue()); [EOL]     assertEquals("foo", ((ImmutablePair<Integer, String>) pair).right); [EOL]     final Pair<Object, String> pair2 = Pair.of(null, "bar"); [EOL]     assertTrue(pair2 instanceof ImmutablePair<?, ?>); [EOL]     assertNull(((ImmutablePair<Object, String>) pair2).left); [EOL]     assertEquals("bar", ((ImmutablePair<Object, String>) pair2).right); [EOL] } <line_num>: 38,48
@Test [EOL] public void testCompatibilityBetweenPairs() throws Exception { [EOL]     final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); [EOL]     final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); [EOL]     assertEquals(pair, pair2); [EOL]     assertEquals(pair.hashCode(), pair2.hashCode()); [EOL]     final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); [EOL]     set.add(pair); [EOL]     assertTrue(set.contains(pair2)); [EOL]     pair2.setValue("bar"); [EOL]     assertFalse(pair.equals(pair2)); [EOL]     assertFalse(pair.hashCode() == pair2.hashCode()); [EOL] } <line_num>: 50,63
@Test [EOL] public void testMapEntry() throws Exception { [EOL]     final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); [EOL]     final HashMap<Integer, String> map = new HashMap<Integer, String>(); [EOL]     map.put(0, "foo"); [EOL]     final Entry<Integer, String> entry = map.entrySet().iterator().next(); [EOL]     assertEquals(pair, entry); [EOL]     assertEquals(pair.hashCode(), entry.hashCode()); [EOL] } <line_num>: 65,73
@Test [EOL] public void testComparable1() throws Exception { [EOL]     final Pair<String, String> pair1 = Pair.of("A", "D"); [EOL]     final Pair<String, String> pair2 = Pair.of("B", "C"); [EOL]     assertTrue(pair1.compareTo(pair1) == 0); [EOL]     assertTrue(pair1.compareTo(pair2) < 0); [EOL]     assertTrue(pair2.compareTo(pair2) == 0); [EOL]     assertTrue(pair2.compareTo(pair1) > 0); [EOL] } <line_num>: 75,83
@Test [EOL] public void testComparable2() throws Exception { [EOL]     final Pair<String, String> pair1 = Pair.of("A", "C"); [EOL]     final Pair<String, String> pair2 = Pair.of("A", "D"); [EOL]     assertTrue(pair1.compareTo(pair1) == 0); [EOL]     assertTrue(pair1.compareTo(pair2) < 0); [EOL]     assertTrue(pair2.compareTo(pair2) == 0); [EOL]     assertTrue(pair2.compareTo(pair1) > 0); [EOL] } <line_num>: 85,93
@Test [EOL] public void testToString() throws Exception { [EOL]     final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]     assertEquals("(Key,Value)", pair.toString()); [EOL] } <line_num>: 95,99
@Test [EOL] public void testToStringCustom() throws Exception { [EOL]     final Calendar date = Calendar.getInstance(); [EOL]     date.set(2011, Calendar.APRIL, 25); [EOL]     final Pair<String, Calendar> pair = Pair.of("DOB", date); [EOL]     assertEquals("Test created on " + "04-25-2011", pair.toString("Test created on %2$tm-%2$td-%2$tY")); [EOL] } <line_num>: 101,107
@Test [EOL] public void testFormattable_simple() throws Exception { [EOL]     final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]     assertEquals("(Key,Value)", String.format("%1$s", pair)); [EOL] } <line_num>: 109,113
@Test [EOL] public void testFormattable_padded() throws Exception { [EOL]     final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]     assertEquals("         (Key,Value)", String.format("%1$20s", pair)); [EOL] } <line_num>: 115,119
