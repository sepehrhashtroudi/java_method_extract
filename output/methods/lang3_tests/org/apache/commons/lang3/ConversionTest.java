@Test [EOL] public void testHexDigitToInt() { [EOL]     assertEquals(0, Conversion.hexDigitToInt('0')); [EOL]     assertEquals(1, Conversion.hexDigitToInt('1')); [EOL]     assertEquals(2, Conversion.hexDigitToInt('2')); [EOL]     assertEquals(3, Conversion.hexDigitToInt('3')); [EOL]     assertEquals(4, Conversion.hexDigitToInt('4')); [EOL]     assertEquals(5, Conversion.hexDigitToInt('5')); [EOL]     assertEquals(6, Conversion.hexDigitToInt('6')); [EOL]     assertEquals(7, Conversion.hexDigitToInt('7')); [EOL]     assertEquals(8, Conversion.hexDigitToInt('8')); [EOL]     assertEquals(9, Conversion.hexDigitToInt('9')); [EOL]     assertEquals(10, Conversion.hexDigitToInt('A')); [EOL]     assertEquals(10, Conversion.hexDigitToInt('a')); [EOL]     assertEquals(11, Conversion.hexDigitToInt('B')); [EOL]     assertEquals(11, Conversion.hexDigitToInt('b')); [EOL]     assertEquals(12, Conversion.hexDigitToInt('C')); [EOL]     assertEquals(12, Conversion.hexDigitToInt('c')); [EOL]     assertEquals(13, Conversion.hexDigitToInt('D')); [EOL]     assertEquals(13, Conversion.hexDigitToInt('d')); [EOL]     assertEquals(14, Conversion.hexDigitToInt('E')); [EOL]     assertEquals(14, Conversion.hexDigitToInt('e')); [EOL]     assertEquals(15, Conversion.hexDigitToInt('F')); [EOL]     assertEquals(15, Conversion.hexDigitToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 40,70
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 75,105
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 110,162
@Test [EOL] public void testHexDigitMsb0ToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 167,219
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 224,252
@Test [EOL] public void testBinaryToHexDigit_2args() { [EOL]     final boolean[] shortArray = new boolean[] { false, true, true }; [EOL]     assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL] } <line_num>: 257,271
@Test [EOL] public void testBinaryToHexDigitMsb0_bits() { [EOL]     assertEquals('0', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigitMsb0_4bits(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 276,321
@Test [EOL] public void testBinaryToHexDigitMsb0_4bits_2args() { [EOL]     final boolean[] shortArray = new boolean[] { true, true, false, true }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0)); [EOL]     final boolean[] longArray = new boolean[] { true, false, true, false, false, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3)); [EOL]     final boolean[] maxLengthArray = new boolean[] { true, false, true, false, false, true, true, true }; [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0)); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1)); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2)); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3)); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4)); [EOL]     final boolean[] javaDocCheck = new boolean[] { true, false, false, true, true, false, true, false }; [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3)); [EOL] } <line_num>: 326,356
@Test [EOL] public void testBinaryBeMsb0ToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false })); [EOL]     try { [EOL]         Conversion.binaryBeMsb0ToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 361,406
@Test [EOL] public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false }, 2)); [EOL]     final boolean[] shortArray = new boolean[] { true, true, false }; [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]     final boolean[] shortArray2 = new boolean[] { true, true, true, false, false, true, false, true }; [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); [EOL]     final boolean[] multiBytesArray = new boolean[] { true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true }; [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); [EOL]     assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); [EOL]     assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); [EOL]     assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); [EOL]     assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); [EOL]     assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); [EOL]     assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); [EOL]     assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); [EOL]     assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); [EOL]     assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); [EOL]     assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); [EOL]     assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); [EOL] } <line_num>: 411,453
@Test [EOL] public void testIntToHexDigit() { [EOL]     assertEquals('0', Conversion.intToHexDigit(0)); [EOL]     assertEquals('1', Conversion.intToHexDigit(1)); [EOL]     assertEquals('2', Conversion.intToHexDigit(2)); [EOL]     assertEquals('3', Conversion.intToHexDigit(3)); [EOL]     assertEquals('4', Conversion.intToHexDigit(4)); [EOL]     assertEquals('5', Conversion.intToHexDigit(5)); [EOL]     assertEquals('6', Conversion.intToHexDigit(6)); [EOL]     assertEquals('7', Conversion.intToHexDigit(7)); [EOL]     assertEquals('8', Conversion.intToHexDigit(8)); [EOL]     assertEquals('9', Conversion.intToHexDigit(9)); [EOL]     assertEquals('a', Conversion.intToHexDigit(10)); [EOL]     assertEquals('b', Conversion.intToHexDigit(11)); [EOL]     assertEquals('c', Conversion.intToHexDigit(12)); [EOL]     assertEquals('d', Conversion.intToHexDigit(13)); [EOL]     assertEquals('e', Conversion.intToHexDigit(14)); [EOL]     assertEquals('f', Conversion.intToHexDigit(15)); [EOL]     try { [EOL]         Conversion.intToHexDigit(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 458,482
@Test [EOL] public void testIntToHexDigitMsb0() { [EOL]     assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]     assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]     assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]     assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]     assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]     assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]     assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]     assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]     assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]     assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]     assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]     assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]     assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]     assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]     assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]     assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]     try { [EOL]         Conversion.intToHexDigitMsb0(16); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 487,511
static String dbgPrint(final boolean[] src) { [EOL]     final StringBuilder sb = new StringBuilder(); [EOL]     for (final boolean e : src) { [EOL]         if (e) { [EOL]             sb.append("1,"); [EOL]         } else { [EOL]             sb.append("0,"); [EOL]         } [EOL]     } [EOL]     final String out = sb.toString(); [EOL]     return out.substring(0, out.length() - 1); [EOL] } <line_num>: 513,524
static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) { [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < expected.length; i++) { [EOL]         try { [EOL]             assertEquals(expected[i], actual[i]); [EOL]         } catch (final Throwable e) { [EOL]             final String msg = "Mismatch at index " + i + " between:\n" + dbgPrint(expected) + " and\n" + dbgPrint(actual); [EOL]             fail(msg + "\n" + e.getMessage()); [EOL]         } [EOL]     } [EOL] } <line_num>: 527,542
@Test [EOL] public void testIntArrayToLong() { [EOL]     final int[] src = new int[] { 0xCDF1F0C1, 0x0F123456, 0x78000000 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); [EOL]     assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); [EOL]     assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1)); [EOL] } <line_num>: 547,560
@Test [EOL] public void testShortArrayToLong() { [EOL]     final short[] src = new short[] { (short) 0xCDF1, (short) 0xF0C1, (short) 0x0F12, (short) 0x3456, (short) 0x7800 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2)); [EOL]     assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x123456CDF1BCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]     assertEquals(0x123478003456DEF0L, Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2)); [EOL] } <line_num>: 565,581
@Test [EOL] public void testByteArrayToLong() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4)); [EOL]     assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]     assertEquals(0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2)); [EOL] } <line_num>: 586,601
@Test [EOL] public void testShortArrayToInt() { [EOL]     final short[] src = new short[] { (short) 0xCDF1, (short) 0xF0C1, (short) 0x0F12, (short) 0x3456, (short) 0x7800 }; [EOL]     assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); [EOL]     assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); [EOL]     assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]     assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); [EOL] } <line_num>: 606,617
@Test [EOL] public void testByteArrayToInt() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); [EOL]     assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); [EOL]     assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]     assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1)); [EOL] } <line_num>: 622,634
@Test [EOL] public void testByteArrayToShort() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0)); [EOL]     assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1)); [EOL]     assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2)); [EOL]     assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0)); [EOL]     assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1)); [EOL] } <line_num>: 639,652
@Test [EOL] public void testHexToLong() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8)); [EOL]     assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8)); [EOL]     assertEquals(0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3)); [EOL] } <line_num>: 657,668
@Test [EOL] public void testHexToInt() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8)); [EOL]     assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8)); [EOL]     assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0)); [EOL]     assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3)); [EOL] } <line_num>: 673,682
@Test [EOL] public void testHexToShort() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals((short) 0x0000, Conversion.hexToShort(src, 0, (short) 0, 0, 0)); [EOL]     assertEquals((short) 0x000C, Conversion.hexToShort(src, 0, (short) 0, 0, 1)); [EOL]     assertEquals((short) 0x1FDC, Conversion.hexToShort(src, 0, (short) 0, 0, 4)); [EOL]     assertEquals((short) 0xF1FD, Conversion.hexToShort(src, 1, (short) 0, 0, 4)); [EOL]     assertEquals((short) 0x1234, Conversion.hexToShort(src, 0, (short) 0x1234, 0, 0)); [EOL]     assertEquals((short) 0x8764, Conversion.hexToShort(src, 15, (short) 0x1234, 4, 3)); [EOL] } <line_num>: 687,696
@Test [EOL] public void testHexToByte() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0)); [EOL]     assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1)); [EOL]     assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2)); [EOL]     assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0)); [EOL]     assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1)); [EOL] } <line_num>: 701,710
@Test [EOL] public void testBinaryToLong() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]     assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]     assertEquals(0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567876BCDEF0L, Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL] } <line_num>: 715,734
@Test [EOL] public void testBinaryToInt() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]     assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]     assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]     assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]     assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); [EOL]     assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); [EOL] } <line_num>: 739,755
@Test [EOL] public void testBinaryToShort() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals((short) 0x0000, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 0 * 4)); [EOL]     assertEquals((short) 0x000C, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 1 * 4)); [EOL]     assertEquals((short) 0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short) 0, 0, 4 * 4)); [EOL]     assertEquals((short) 0x1234, Conversion.binaryToShort(src, 0 * 4, (short) 0x1234, 0, 0 * 4)); [EOL]     assertEquals((short) 0x8764, Conversion.binaryToShort(src, 15 * 4, (short) 0x1234, 4, 3 * 4)); [EOL] } <line_num>: 760,778
@Test [EOL] public void testBinaryToByte() { [EOL]     final boolean[] src = new boolean[] { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true }; [EOL]     assertEquals((byte) 0x00, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 0 * 4)); [EOL]     assertEquals((byte) 0x0C, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 1 * 4)); [EOL]     assertEquals((byte) 0xDC, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 2 * 4)); [EOL]     assertEquals((byte) 0xFD, Conversion.binaryToByte(src, 1 * 4, (byte) 0, 0, 2 * 4)); [EOL]     assertEquals((byte) 0x34, Conversion.binaryToByte(src, 0 * 4, (byte) 0x34, 0, 0 * 4)); [EOL]     assertEquals((byte) 0x84, Conversion.binaryToByte(src, 17 * 4, (byte) 0x34, 4, 1 * 4)); [EOL] } <line_num>: 783,799
@Test [EOL] public void testLongToIntArray() { [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 0, 0)); [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[] {}, 0, 0)); [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 100, 0)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new int[] { 0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new int[] { 0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678 }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0x091A2B3C }, Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[] { 0 }, 0, 1)); [EOL] } <line_num>: 804,854
@Test [EOL] public void testLongToShortArray() { [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 100, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 100, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 3)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0x1234 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB, (short) 0x5678 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 1, 3)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xE6F7, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xF37B, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 2, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x79BD, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 3, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xBCDE, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 4, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new short[] { (short) 0x2B3C }, Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[] { 0 }, 0, 1)); [EOL] } <line_num>: 859,929
@Test [EOL] public void testIntToShortArray() { [EOL]     assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 0, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 100, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 0, new short[] {}, 100, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0x5678, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0x5678, (short) 0x1234, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0x1234 }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678 }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x2B3C, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 1, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x159E, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 2, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x8ACF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 3, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x4567, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 4, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0x091A }, Conversion.intToShortArray(0x12345678, 17, new short[] { 0 }, 0, 1)); [EOL] } <line_num>: 934,990
@Test [EOL] public void testLongToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 7)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7)); [EOL] } <line_num>: 995,1099
@Test [EOL] public void testIntToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 3)); [EOL] } <line_num>: 1104,1181
@Test [EOL] public void testShortToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 1)); [EOL] } <line_num>: 1186,1242
@Test [EOL] public void testLongToHex() { [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); [EOL]     assertEquals("ffffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]     assertEquals("3fffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("feffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]     assertEquals("fedcffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]     assertEquals("fedcba098765432fffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 15)); [EOL]     assertEquals("fedcba0987654321ffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 16)); [EOL]     assertEquals("fff3ffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]     assertEquals("ffffefffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]     assertEquals("ffffedcfffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]     assertEquals("ffffedcba098765432ffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 15)); [EOL]     assertEquals("ffffedcba0987654321fffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 16)); [EOL]     assertEquals("7fffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("bfffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("fffdb975121fca86420fffff", Conversion.longToHex(0x1234567890ABCDEFL, 3, "ffffffffffffffffffffffff", 3, 16)); [EOL]     assertEquals("fffedcba0987654321ffffff", Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 15)); [EOL]     assertEquals("fedcba0987654321", Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 0, 16)); [EOL]     try { [EOL]         Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 1, 8); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 1247,1307
@Test [EOL] public void testIntToHex() { [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); [EOL]     assertEquals("ffffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]     assertEquals("3fffffffffffffffffffffff", Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("feffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]     assertEquals("fedcffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]     assertEquals("fedcba0fffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 7)); [EOL]     assertEquals("fedcba09ffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 8)); [EOL]     assertEquals("fff3ffffffffffffffffffff", Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]     assertEquals("ffffefffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]     assertEquals("ffffedcfffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]     assertEquals("ffffedcba0ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 7)); [EOL]     assertEquals("ffffedcba09fffffffffffff", Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 8)); [EOL]     assertEquals("7fffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("bfffffffffffffffffffffff", Conversion.intToHex(0x90ABCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("fffdb97512ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 3, "ffffffffffffffffffffffff", 3, 8)); [EOL]     assertEquals("fffedcba09ffffffffffffff", Conversion.intToHex(0x90ABCDEF, 4, "ffffffffffffffffffffffff", 3, 7)); [EOL]     assertEquals("fedcba09", Conversion.intToHex(0x90ABCDEF, 0, "", 0, 8)); [EOL]     try { [EOL]         Conversion.intToHex(0x90ABCDEF, 0, "", 1, 8); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 1312,1371
@Test [EOL] public void testShortToHex() { [EOL]     assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.shortToHex((short) 0x0000, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 100, 0)); [EOL]     assertEquals("ffffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]     assertEquals("3fffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("feffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]     assertEquals("fedfffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3)); [EOL]     assertEquals("fedcffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]     assertEquals("fff3ffffffffffffffffffff", Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]     assertEquals("ffffefffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]     assertEquals("7fffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("bfffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("fffdb9ffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 3, "ffffffffffffffffffffffff", 3, 4)); [EOL]     assertEquals("fffedcffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 4, "ffffffffffffffffffffffff", 3, 3)); [EOL]     assertEquals("fedc", Conversion.shortToHex((short) 0xCDEF, 0, "", 0, 4)); [EOL]     try { [EOL]         Conversion.shortToHex((short) 0xCDEF, 0, "", 1, 4); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 1376,1423
@Test [EOL] public void testByteToHex() { [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 100, 0)); [EOL]     assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 0)); [EOL]     assertEquals("f0000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 1)); [EOL]     assertEquals("fe000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 2)); [EOL]     assertEquals("000f0", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 1)); [EOL]     assertEquals("000fe", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 2)); [EOL]     assertEquals("70000", Conversion.byteToHex((byte) 0xEF, 1, "00000", 0, 1)); [EOL]     assertEquals("b0000", Conversion.byteToHex((byte) 0xEF, 2, "00000", 0, 1)); [EOL]     assertEquals("000df", Conversion.byteToHex((byte) 0xEF, 3, "00000", 3, 2)); [EOL]     assertEquals("000e0", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 1)); [EOL]     assertEquals("fe", Conversion.byteToHex((byte) 0xEF, 0, "", 0, 2)); [EOL]     try { [EOL]         Conversion.byteToHex((byte) 0xEF, 0, "", 1, 2); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 1428,1451
@Test [EOL] public void testLongToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62)); [EOL] } <line_num>: 1456,1574
@Test [EOL] public void testIntToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30)); [EOL] } <line_num>: 1579,1651
@Test [EOL] public void testShortToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 15)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 16)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 16)); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 1, new boolean[21], 0, 15)); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 0, 14)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 3, 14)); [EOL] } <line_num>: 1656,1723
@Test [EOL] public void testByteToBinary() { [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 100, new boolean[] {}, 0, 0)); [EOL]     assertBinaryEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 100, 0)); [EOL]     assertBinaryEquals(new boolean[69], Conversion.byteToBinary((byte) 0xEF, 0, new boolean[69], 0, 0)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 1)); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 2)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 3)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 7)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, true, false, false, true, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 8)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 1)); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false, true, false, true, false, false, true, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 8)); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true, false, false, true, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 1, new boolean[13], 0, 7)); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 0, 6)); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true, false, true, false, false, true, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 3, 6)); [EOL] } <line_num>: 1728,1771
@Test [EOL] public void testUuidToByteArray() { [EOL]     assertArrayEquals(new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }, Conversion.uuidToByteArray(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), new byte[16], 0, 16)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 0, 16)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 4, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x00, (byte) 0x00 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 2, 12)); [EOL] } <line_num>: 1776,1798
@Test [EOL] public void testByteArrayToUuid() { [EOL]     assertEquals(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), Conversion.byteArrayToUuid(new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }, 0)); [EOL]     assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), Conversion.byteArrayToUuid(new byte[] { (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, 0)); [EOL]     assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), Conversion.byteArrayToUuid(new byte[] { 0, 0, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, 2)); [EOL] } <line_num>: 1803,1823
