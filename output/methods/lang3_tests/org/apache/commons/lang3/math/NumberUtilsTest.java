@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new NumberUtils()); [EOL]     final Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers())); [EOL] } <line_num>: 40,48
@Test [EOL] public void testToIntString() { [EOL]     assertTrue("toInt(String) 1 failed", NumberUtils.toInt("12345") == 12345); [EOL]     assertTrue("toInt(String) 2 failed", NumberUtils.toInt("abc") == 0); [EOL]     assertTrue("toInt(empty) failed", NumberUtils.toInt("") == 0); [EOL]     assertTrue("toInt(null) failed", NumberUtils.toInt(null) == 0); [EOL] } <line_num>: 55,61
@Test [EOL] public void testToIntStringI() { [EOL]     assertTrue("toInt(String,int) 1 failed", NumberUtils.toInt("12345", 5) == 12345); [EOL]     assertTrue("toInt(String,int) 2 failed", NumberUtils.toInt("1234.5", 5) == 5); [EOL] } <line_num>: 66,70
@Test [EOL] public void testToLongString() { [EOL]     assertTrue("toLong(String) 1 failed", NumberUtils.toLong("12345") == 12345l); [EOL]     assertTrue("toLong(String) 2 failed", NumberUtils.toLong("abc") == 0l); [EOL]     assertTrue("toLong(String) 3 failed", NumberUtils.toLong("1L") == 0l); [EOL]     assertTrue("toLong(String) 4 failed", NumberUtils.toLong("1l") == 0l); [EOL]     assertTrue("toLong(Long.MAX_VALUE) failed", NumberUtils.toLong(Long.MAX_VALUE + "") == Long.MAX_VALUE); [EOL]     assertTrue("toLong(Long.MIN_VALUE) failed", NumberUtils.toLong(Long.MIN_VALUE + "") == Long.MIN_VALUE); [EOL]     assertTrue("toLong(empty) failed", NumberUtils.toLong("") == 0l); [EOL]     assertTrue("toLong(null) failed", NumberUtils.toLong(null) == 0l); [EOL] } <line_num>: 75,85
@Test [EOL] public void testToLongStringL() { [EOL]     assertTrue("toLong(String,long) 1 failed", NumberUtils.toLong("12345", 5l) == 12345l); [EOL]     assertTrue("toLong(String,long) 2 failed", NumberUtils.toLong("1234.5", 5l) == 5l); [EOL] } <line_num>: 90,94
@Test [EOL] public void testToFloatString() { [EOL]     assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); [EOL]     assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); [EOL]     assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); [EOL]     assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE + "") == Float.MAX_VALUE); [EOL]     assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE + "") == Float.MIN_VALUE); [EOL]     assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); [EOL]     assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); [EOL] } <line_num>: 99,108
@Test [EOL] public void testToFloatStringF() { [EOL]     assertTrue("toFloat(String,int) 1 failed", NumberUtils.toFloat("1.2345", 5.1f) == 1.2345f); [EOL]     assertTrue("toFloat(String,int) 2 failed", NumberUtils.toFloat("a", 5.0f) == 5.0f); [EOL] } <line_num>: 113,117
@Test [EOL] public void testStringCreateNumberEnsureNoPrecisionLoss() { [EOL]     String shouldBeFloat = "1.23"; [EOL]     String shouldBeDouble = "3.40282354e+38"; [EOL]     String shouldBeBigDecimal = "1.797693134862315759e+308"; [EOL]     assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float); [EOL]     assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double); [EOL]     assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal); [EOL] } <line_num>: 122,131
@Test [EOL] public void testStringToDoubleString() { [EOL]     assertTrue("toDouble(String) 1 failed", NumberUtils.toDouble("-1.2345") == -1.2345d); [EOL]     assertTrue("toDouble(String) 2 failed", NumberUtils.toDouble("1.2345") == 1.2345d); [EOL]     assertTrue("toDouble(String) 3 failed", NumberUtils.toDouble("abc") == 0.0d); [EOL]     assertTrue("toDouble(Double.MAX_VALUE) failed", NumberUtils.toDouble(Double.MAX_VALUE + "") == Double.MAX_VALUE); [EOL]     assertTrue("toDouble(Double.MIN_VALUE) failed", NumberUtils.toDouble(Double.MIN_VALUE + "") == Double.MIN_VALUE); [EOL]     assertTrue("toDouble(empty) failed", NumberUtils.toDouble("") == 0.0d); [EOL]     assertTrue("toDouble(null) failed", NumberUtils.toDouble(null) == 0.0d); [EOL] } <line_num>: 135,144
@Test [EOL] public void testStringToDoubleStringD() { [EOL]     assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d); [EOL]     assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d); [EOL] } <line_num>: 149,153
@Test [EOL] public void testToByteString() { [EOL]     assertTrue("toByte(String) 1 failed", NumberUtils.toByte("123") == 123); [EOL]     assertTrue("toByte(String) 2 failed", NumberUtils.toByte("abc") == 0); [EOL]     assertTrue("toByte(empty) failed", NumberUtils.toByte("") == 0); [EOL]     assertTrue("toByte(null) failed", NumberUtils.toByte(null) == 0); [EOL] } <line_num>: 158,164
@Test [EOL] public void testToByteStringI() { [EOL]     assertTrue("toByte(String,byte) 1 failed", NumberUtils.toByte("123", (byte) 5) == 123); [EOL]     assertTrue("toByte(String,byte) 2 failed", NumberUtils.toByte("12.3", (byte) 5) == 5); [EOL] } <line_num>: 169,173
@Test [EOL] public void testToShortString() { [EOL]     assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); [EOL]     assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); [EOL]     assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); [EOL]     assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); [EOL] } <line_num>: 178,184
@Test [EOL] public void testToShortStringI() { [EOL]     assertTrue("toShort(String,short) 1 failed", NumberUtils.toShort("12345", (short) 5) == 12345); [EOL]     assertTrue("toShort(String,short) 2 failed", NumberUtils.toShort("1234.5", (short) 5) == 5); [EOL] } <line_num>: 189,193
@Test [EOL] public void testCreateNumber() { [EOL]     assertEquals("createNumber(String) 1 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5")); [EOL]     assertEquals("createNumber(String) 2 failed", Integer.valueOf("12345"), NumberUtils.createNumber("12345")); [EOL]     assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5D")); [EOL]     assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5d")); [EOL]     assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5F")); [EOL]     assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5f")); [EOL]     assertEquals("createNumber(String) 5 failed", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L))); [EOL]     assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345L")); [EOL]     assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345l")); [EOL]     assertEquals("createNumber(String) 7 failed", Float.valueOf("-1234.5"), NumberUtils.createNumber("-1234.5")); [EOL]     assertEquals("createNumber(String) 8 failed", Integer.valueOf("-12345"), NumberUtils.createNumber("-12345")); [EOL]     assertTrue("createNumber(String) 9a failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue()); [EOL]     assertTrue("createNumber(String) 9b failed", 0xFADE == NumberUtils.createNumber("0Xfade").intValue()); [EOL]     assertTrue("createNumber(String) 10a failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue()); [EOL]     assertTrue("createNumber(String) 10b failed", -0xFADE == NumberUtils.createNumber("-0Xfade").intValue()); [EOL]     assertEquals("createNumber(String) 11 failed", Double.valueOf("1.1E200"), NumberUtils.createNumber("1.1E200")); [EOL]     assertEquals("createNumber(String) 12 failed", Float.valueOf("1.1E20"), NumberUtils.createNumber("1.1E20")); [EOL]     assertEquals("createNumber(String) 13 failed", Double.valueOf("-1.1E200"), NumberUtils.createNumber("-1.1E200")); [EOL]     assertEquals("createNumber(String) 14 failed", Double.valueOf("1.1E-200"), NumberUtils.createNumber("1.1E-200")); [EOL]     assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null)); [EOL]     assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils.createNumber("12345678901234567890L")); [EOL]     assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F")); [EOL]     assertEquals("createNumber(String) 16 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L")); [EOL]     assertEquals("createNumber(String) 17 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE)); [EOL]     assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils.createNumber("10" + Long.MAX_VALUE)); [EOL]     assertEquals("createNumber(String) LANG-521 failed", Float.valueOf("2."), NumberUtils.createNumber("2.")); [EOL]     assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE")); [EOL]     assertEquals("createNumber(String) LANG-693 failed", Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("" + Double.MAX_VALUE)); [EOL]     final Number bigNum = NumberUtils.createNumber("-1.1E-700F"); [EOL]     assertNotNull(bigNum); [EOL]     assertEquals(BigDecimal.class, bigNum.getClass()); [EOL] } <line_num>: 195,247
@Test [EOL] public void TestLang747() { [EOL]     assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000")); [EOL]     assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000")); [EOL]     assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF")); [EOL]     assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000")); [EOL]     assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000")); [EOL]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000")); [EOL]     assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF")); [EOL]     assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000")); [EOL]     assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000")); [EOL]     assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF")); [EOL]     assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000")); [EOL]     assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF")); [EOL] } <line_num>: 249,284
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_1() { [EOL]     NumberUtils.createNumber("--1.1E-700F"); [EOL] } <line_num>: 286,290
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_2() { [EOL]     NumberUtils.createNumber("-1.1E+0-7e00"); [EOL] } <line_num>: 292,296
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_3() { [EOL]     NumberUtils.createNumber("-11E+0-7e00"); [EOL] } <line_num>: 298,302
@Test(expected = NumberFormatException.class) [EOL] public void testCreateNumberFailure_4() { [EOL]     NumberUtils.createNumber("1eE+00001"); [EOL] } <line_num>: 304,308
@Test [EOL] public void testCreateNumberMagnitude() { [EOL]     assertEquals(Float.valueOf(Float.MAX_VALUE), NumberUtils.createNumber("3.4028235e+38")); [EOL]     assertEquals(Double.valueOf(3.4028236e+38), NumberUtils.createNumber("3.4028236e+38")); [EOL]     assertEquals(Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]     assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]     assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]     assertEquals(Long.valueOf(0x123456789L), NumberUtils.createNumber("0x123456789")); [EOL]     assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]     assertEquals(new BigInteger("7fffffffffffffff0", 16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]     assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber("#7fffffffffffffff")); [EOL]     assertEquals(new BigInteger("7fffffffffffffff0", 16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]     assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); [EOL]     assertEquals(Long.valueOf(037777777777L), NumberUtils.createNumber("037777777777")); [EOL]     assertEquals(Long.valueOf(0777777777777777777777L), NumberUtils.createNumber("0777777777777777777777")); [EOL]     assertEquals(new BigInteger("1777777777777777777777", 8), NumberUtils.createNumber("01777777777777777777777")); [EOL] } <line_num>: 312,338
@Test [EOL] public void testCreateFloat() { [EOL]     assertEquals("createFloat(String) failed", Float.valueOf("1234.5"), NumberUtils.createFloat("1234.5")); [EOL]     assertEquals("createFloat(null) failed", null, NumberUtils.createFloat(null)); [EOL]     this.testCreateFloatFailure(""); [EOL]     this.testCreateFloatFailure(" "); [EOL]     this.testCreateFloatFailure("\b\t\n\f\r"); [EOL]     this.testCreateFloatFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] } <line_num>: 340,349
protected void testCreateFloatFailure(final String str) { [EOL]     try { [EOL]         final Float value = NumberUtils.createFloat(str); [EOL]         fail("createFloat(\"" + str + "\") should have failed: " + value); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 351,358
@Test [EOL] public void testCreateDouble() { [EOL]     assertEquals("createDouble(String) failed", Double.valueOf("1234.5"), NumberUtils.createDouble("1234.5")); [EOL]     assertEquals("createDouble(null) failed", null, NumberUtils.createDouble(null)); [EOL]     this.testCreateDoubleFailure(""); [EOL]     this.testCreateDoubleFailure(" "); [EOL]     this.testCreateDoubleFailure("\b\t\n\f\r"); [EOL]     this.testCreateDoubleFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] } <line_num>: 360,369
protected void testCreateDoubleFailure(final String str) { [EOL]     try { [EOL]         final Double value = NumberUtils.createDouble(str); [EOL]         fail("createDouble(\"" + str + "\") should have failed: " + value); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 371,378
@Test [EOL] public void testCreateInteger() { [EOL]     assertEquals("createInteger(String) failed", Integer.valueOf("12345"), NumberUtils.createInteger("12345")); [EOL]     assertEquals("createInteger(null) failed", null, NumberUtils.createInteger(null)); [EOL]     this.testCreateIntegerFailure(""); [EOL]     this.testCreateIntegerFailure(" "); [EOL]     this.testCreateIntegerFailure("\b\t\n\f\r"); [EOL]     this.testCreateIntegerFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] } <line_num>: 380,389
protected void testCreateIntegerFailure(final String str) { [EOL]     try { [EOL]         final Integer value = NumberUtils.createInteger(str); [EOL]         fail("createInteger(\"" + str + "\") should have failed: " + value); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 391,398
@Test [EOL] public void testCreateLong() { [EOL]     assertEquals("createLong(String) failed", Long.valueOf("12345"), NumberUtils.createLong("12345")); [EOL]     assertEquals("createLong(null) failed", null, NumberUtils.createLong(null)); [EOL]     this.testCreateLongFailure(""); [EOL]     this.testCreateLongFailure(" "); [EOL]     this.testCreateLongFailure("\b\t\n\f\r"); [EOL]     this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] } <line_num>: 400,409
protected void testCreateLongFailure(final String str) { [EOL]     try { [EOL]         final Long value = NumberUtils.createLong(str); [EOL]         fail("createLong(\"" + str + "\") should have failed: " + value); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 411,418
@Test [EOL] public void testCreateBigInteger() { [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("12345"), NumberUtils.createBigInteger("12345")); [EOL]     assertEquals("createBigInteger(null) failed", null, NumberUtils.createBigInteger(null)); [EOL]     this.testCreateBigIntegerFailure(""); [EOL]     this.testCreateBigIntegerFailure(" "); [EOL]     this.testCreateBigIntegerFailure("\b\t\n\f\r"); [EOL]     this.testCreateBigIntegerFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("255"), NumberUtils.createBigInteger("0xff")); [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("255"), NumberUtils.createBigInteger("#ff")); [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("-255"), NumberUtils.createBigInteger("-0xff")); [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("255"), NumberUtils.createBigInteger("0377")); [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("-255"), NumberUtils.createBigInteger("-0377")); [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("-255"), NumberUtils.createBigInteger("-0377")); [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("-0"), NumberUtils.createBigInteger("-0")); [EOL]     assertEquals("createBigInteger(String) failed", new BigInteger("0"), NumberUtils.createBigInteger("0")); [EOL]     testCreateBigIntegerFailure("#"); [EOL]     testCreateBigIntegerFailure("-#"); [EOL]     testCreateBigIntegerFailure("0x"); [EOL]     testCreateBigIntegerFailure("-0x"); [EOL] } <line_num>: 420,441
protected void testCreateBigIntegerFailure(final String str) { [EOL]     try { [EOL]         final BigInteger value = NumberUtils.createBigInteger(str); [EOL]         fail("createBigInteger(\"" + str + "\") should have failed: " + value); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 443,450
@Test [EOL] public void testCreateBigDecimal() { [EOL]     assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5")); [EOL]     assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null)); [EOL]     this.testCreateBigDecimalFailure(""); [EOL]     this.testCreateBigDecimalFailure(" "); [EOL]     this.testCreateBigDecimalFailure("\b\t\n\f\r"); [EOL]     this.testCreateBigDecimalFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL]     this.testCreateBigDecimalFailure("-"); [EOL]     this.testCreateBigDecimalFailure("--"); [EOL]     this.testCreateBigDecimalFailure("--0"); [EOL]     this.testCreateBigDecimalFailure("+"); [EOL]     this.testCreateBigDecimalFailure("++"); [EOL]     this.testCreateBigDecimalFailure("++0"); [EOL] } <line_num>: 452,467
protected void testCreateBigDecimalFailure(final String str) { [EOL]     try { [EOL]         final BigDecimal value = NumberUtils.createBigDecimal(str); [EOL]         fail("createBigDecimal(\"" + str + "\") should have failed: " + value); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 469,476
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_nullArray() { [EOL]     NumberUtils.min((long[]) null); [EOL] } <line_num>: 480,483
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_emptyArray() { [EOL]     NumberUtils.min(new long[0]); [EOL] } <line_num>: 485,488
@Test [EOL] public void testMinLong() { [EOL]     assertEquals("min(long[]) failed for array length 1", 5, NumberUtils.min(new long[] { 5 })); [EOL]     assertEquals("min(long[]) failed for array length 2", 6, NumberUtils.min(new long[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 })); [EOL] } <line_num>: 490,504
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinInt_nullArray() { [EOL]     NumberUtils.min((int[]) null); [EOL] } <line_num>: 506,509
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinInt_emptyArray() { [EOL]     NumberUtils.min(new int[0]); [EOL] } <line_num>: 511,514
@Test [EOL] public void testMinInt() { [EOL]     assertEquals("min(int[]) failed for array length 1", 5, NumberUtils.min(new int[] { 5 })); [EOL]     assertEquals("min(int[]) failed for array length 2", 6, NumberUtils.min(new int[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); [EOL] } <line_num>: 516,530
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinShort_nullArray() { [EOL]     NumberUtils.min((short[]) null); [EOL] } <line_num>: 532,535
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinShort_emptyArray() { [EOL]     NumberUtils.min(new short[0]); [EOL] } <line_num>: 537,540
@Test [EOL] public void testMinShort() { [EOL]     assertEquals("min(short[]) failed for array length 1", 5, NumberUtils.min(new short[] { 5 })); [EOL]     assertEquals("min(short[]) failed for array length 2", 6, NumberUtils.min(new short[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); [EOL] } <line_num>: 542,556
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinByte_nullArray() { [EOL]     NumberUtils.min((byte[]) null); [EOL] } <line_num>: 558,561
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinByte_emptyArray() { [EOL]     NumberUtils.min(new byte[0]); [EOL] } <line_num>: 563,566
@Test [EOL] public void testMinByte() { [EOL]     assertEquals("min(byte[]) failed for array length 1", 5, NumberUtils.min(new byte[] { 5 })); [EOL]     assertEquals("min(byte[]) failed for array length 2", 6, NumberUtils.min(new byte[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 })); [EOL] } <line_num>: 568,582
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinDouble_nullArray() { [EOL]     NumberUtils.min((double[]) null); [EOL] } <line_num>: 584,587
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinDouble_emptyArray() { [EOL]     NumberUtils.min(new double[0]); [EOL] } <line_num>: 589,592
@Test [EOL] public void testMinDouble() { [EOL]     assertEquals("min(double[]) failed for array length 1", 5.12, NumberUtils.min(new double[] { 5.12 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 2", 6.23, NumberUtils.min(new double[] { 6.23, 9.34 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 5", -10.45, NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }), 0); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001); [EOL] } <line_num>: 594,615
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinFloat_nullArray() { [EOL]     NumberUtils.min((float[]) null); [EOL] } <line_num>: 617,620
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinFloat_emptyArray() { [EOL]     NumberUtils.min(new float[0]); [EOL] } <line_num>: 622,625
@Test [EOL] public void testMinFloat() { [EOL]     assertEquals("min(float[]) failed for array length 1", 5.9f, NumberUtils.min(new float[] { 5.9f }), 0); [EOL]     assertEquals("min(float[]) failed for array length 2", 6.8f, NumberUtils.min(new float[] { 6.8f, 9.7f }), 0); [EOL]     assertEquals("min(float[]) failed for array length 5", -10.6f, NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }), 0); [EOL]     assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f); [EOL] } <line_num>: 627,648
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxLong_nullArray() { [EOL]     NumberUtils.max((long[]) null); [EOL] } <line_num>: 650,653
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxLong_emptyArray() { [EOL]     NumberUtils.max(new long[0]); [EOL] } <line_num>: 655,658
@Test [EOL] public void testMaxLong() { [EOL]     assertEquals("max(long[]) failed for array length 1", 5, NumberUtils.max(new long[] { 5 })); [EOL]     assertEquals("max(long[]) failed for array length 2", 9, NumberUtils.max(new long[] { 6, 9 })); [EOL]     assertEquals("max(long[]) failed for array length 5", 10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL] } <line_num>: 660,678
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxInt_nullArray() { [EOL]     NumberUtils.max((int[]) null); [EOL] } <line_num>: 680,683
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxInt_emptyArray() { [EOL]     NumberUtils.max(new int[0]); [EOL] } <line_num>: 685,688
@Test [EOL] public void testMaxInt() { [EOL]     assertEquals("max(int[]) failed for array length 1", 5, NumberUtils.max(new int[] { 5 })); [EOL]     assertEquals("max(int[]) failed for array length 2", 9, NumberUtils.max(new int[] { 6, 9 })); [EOL]     assertEquals("max(int[]) failed for array length 5", 10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); [EOL] } <line_num>: 690,708
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxShort_nullArray() { [EOL]     NumberUtils.max((short[]) null); [EOL] } <line_num>: 710,713
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxShort_emptyArray() { [EOL]     NumberUtils.max(new short[0]); [EOL] } <line_num>: 715,718
@Test [EOL] public void testMaxShort() { [EOL]     assertEquals("max(short[]) failed for array length 1", 5, NumberUtils.max(new short[] { 5 })); [EOL]     assertEquals("max(short[]) failed for array length 2", 9, NumberUtils.max(new short[] { 6, 9 })); [EOL]     assertEquals("max(short[]) failed for array length 5", 10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 })); [EOL] } <line_num>: 720,738
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxByte_nullArray() { [EOL]     NumberUtils.max((byte[]) null); [EOL] } <line_num>: 740,743
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxByte_emptyArray() { [EOL]     NumberUtils.max(new byte[0]); [EOL] } <line_num>: 745,748
@Test [EOL] public void testMaxByte() { [EOL]     assertEquals("max(byte[]) failed for array length 1", 5, NumberUtils.max(new byte[] { 5 })); [EOL]     assertEquals("max(byte[]) failed for array length 2", 9, NumberUtils.max(new byte[] { 6, 9 })); [EOL]     assertEquals("max(byte[]) failed for array length 5", 10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); [EOL] } <line_num>: 750,768
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxDouble_nullArray() { [EOL]     NumberUtils.max((double[]) null); [EOL] } <line_num>: 770,773
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxDouble_emptyArray() { [EOL]     NumberUtils.max(new double[0]); [EOL] } <line_num>: 775,778
@Test [EOL] public void testMaxDouble() { [EOL]     final double[] d = null; [EOL]     try { [EOL]         NumberUtils.max(d); [EOL]         fail("No exception was thrown for null input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         NumberUtils.max(new double[0]); [EOL]         fail("No exception was thrown for empty input."); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("max(double[]) failed for array length 1", 5.1f, NumberUtils.max(new double[] { 5.1f }), 0); [EOL]     assertEquals("max(double[]) failed for array length 2", 9.2f, NumberUtils.max(new double[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(double[]) failed for float length 5", 10.4f, NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001); [EOL] } <line_num>: 780,812
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxFloat_nullArray() { [EOL]     NumberUtils.max((float[]) null); [EOL] } <line_num>: 814,817
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxFloat_emptyArray() { [EOL]     NumberUtils.max(new float[0]); [EOL] } <line_num>: 819,822
@Test [EOL] public void testMaxFloat() { [EOL]     assertEquals("max(float[]) failed for array length 1", 5.1f, NumberUtils.max(new float[] { 5.1f }), 0); [EOL]     assertEquals("max(float[]) failed for array length 2", 9.2f, NumberUtils.max(new float[] { 6.3f, 9.2f }), 0); [EOL]     assertEquals("max(float[]) failed for float length 5", 10.4f, NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }), 0); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]     assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f); [EOL] } <line_num>: 824,845
@Test [EOL] public void testMinimumLong() { [EOL]     assertEquals("minimum(long,long,long) 1 failed", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L)); [EOL]     assertEquals("minimum(long,long,long) 2 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L)); [EOL]     assertEquals("minimum(long,long,long) 3 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L)); [EOL]     assertEquals("minimum(long,long,long) 4 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L)); [EOL]     assertEquals("minimum(long,long,long) 5 failed", 12345L, NumberUtils.min(12345L, 12345L, 12345L)); [EOL] } <line_num>: 847,854
@Test [EOL] public void testMinimumInt() { [EOL]     assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); [EOL]     assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); [EOL]     assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345)); [EOL]     assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345)); [EOL]     assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345)); [EOL] } <line_num>: 856,863
@Test [EOL] public void testMinimumShort() { [EOL]     final short low = 1234; [EOL]     final short mid = 1234 + 1; [EOL]     final short high = 1234 + 2; [EOL]     assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, high)); [EOL]     assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, low, high)); [EOL]     assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(mid, high, low)); [EOL]     assertEquals("minimum(short,short,short) 1 failed", low, NumberUtils.min(low, mid, low)); [EOL] } <line_num>: 865,874
@Test [EOL] public void testMinimumByte() { [EOL]     final byte low = 123; [EOL]     final byte mid = 123 + 1; [EOL]     final byte high = 123 + 2; [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, high)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, low, high)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, high, low)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, low)); [EOL] } <line_num>: 876,885
@Test [EOL] public void testMinimumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001); [EOL] } <line_num>: 887,897
@Test [EOL] public void testMinimumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f); [EOL] } <line_num>: 899,909
@Test [EOL] public void testMaximumLong() { [EOL]     assertEquals("maximum(long,long,long) 1 failed", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 2 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L)); [EOL]     assertEquals("maximum(long,long,long) 3 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 4 failed", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L)); [EOL]     assertEquals("maximum(long,long,long) 5 failed", 12345L, NumberUtils.max(12345L, 12345L, 12345L)); [EOL] } <line_num>: 911,918
@Test [EOL] public void testMaximumInt() { [EOL]     assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2)); [EOL]     assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2)); [EOL]     assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345)); [EOL]     assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345)); [EOL]     assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345)); [EOL] } <line_num>: 920,927
@Test [EOL] public void testMaximumShort() { [EOL]     final short low = 1234; [EOL]     final short mid = 1234 + 1; [EOL]     final short high = 1234 + 2; [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high)); [EOL] } <line_num>: 929,938
@Test [EOL] public void testMaximumByte() { [EOL]     final byte low = 123; [EOL]     final byte mid = 123 + 1; [EOL]     final byte high = 123 + 2; [EOL]     assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(low, mid, high)); [EOL]     assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, low, high)); [EOL]     assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(mid, high, low)); [EOL]     assertEquals("maximum(byte,byte,byte) 1 failed", high, NumberUtils.max(high, mid, high)); [EOL] } <line_num>: 940,949
@Test [EOL] public void testMaximumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001); [EOL] } <line_num>: 951,961
@Test [EOL] public void testMaximumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f); [EOL]     assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f); [EOL] } <line_num>: 963,973
@Test [EOL] public void testCompareDouble() { [EOL]     assertTrue(Double.compare(Double.NaN, Double.NaN) == 0); [EOL]     assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(Double.NaN, 1.2d) == +1); [EOL]     assertTrue(Double.compare(Double.NaN, 0.0d) == +1); [EOL]     assertTrue(Double.compare(Double.NaN, -0.0d) == +1); [EOL]     assertTrue(Double.compare(Double.NaN, -1.2d) == +1); [EOL]     assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(1.2d, Double.NaN) == -1); [EOL]     assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1); [EOL]     assertTrue(Double.compare(1.2d, 1.2d) == 0); [EOL]     assertTrue(Double.compare(1.2d, 0.0d) == +1); [EOL]     assertTrue(Double.compare(1.2d, -0.0d) == +1); [EOL]     assertTrue(Double.compare(1.2d, -1.2d) == +1); [EOL]     assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(0.0d, Double.NaN) == -1); [EOL]     assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1); [EOL]     assertTrue(Double.compare(0.0d, 1.2d) == -1); [EOL]     assertTrue(Double.compare(0.0d, 0.0d) == 0); [EOL]     assertTrue(Double.compare(0.0d, -0.0d) == +1); [EOL]     assertTrue(Double.compare(0.0d, -1.2d) == +1); [EOL]     assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(-0.0d, Double.NaN) == -1); [EOL]     assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1); [EOL]     assertTrue(Double.compare(-0.0d, 1.2d) == -1); [EOL]     assertTrue(Double.compare(-0.0d, 0.0d) == -1); [EOL]     assertTrue(Double.compare(-0.0d, -0.0d) == 0); [EOL]     assertTrue(Double.compare(-0.0d, -1.2d) == +1); [EOL]     assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(-1.2d, Double.NaN) == -1); [EOL]     assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1); [EOL]     assertTrue(Double.compare(-1.2d, 1.2d) == -1); [EOL]     assertTrue(Double.compare(-1.2d, 0.0d) == -1); [EOL]     assertTrue(Double.compare(-1.2d, -0.0d) == -1); [EOL]     assertTrue(Double.compare(-1.2d, -1.2d) == 0); [EOL]     assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1); [EOL]     assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0); [EOL]     assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1); [EOL]     assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0); [EOL] } <line_num>: 976,1067
@Test [EOL] public void testCompareFloat() { [EOL]     assertTrue(Float.compare(Float.NaN, Float.NaN) == 0); [EOL]     assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(Float.NaN, 1.2f) == +1); [EOL]     assertTrue(Float.compare(Float.NaN, 0.0f) == +1); [EOL]     assertTrue(Float.compare(Float.NaN, -0.0f) == +1); [EOL]     assertTrue(Float.compare(Float.NaN, -1.2f) == +1); [EOL]     assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(1.2f, Float.NaN) == -1); [EOL]     assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1); [EOL]     assertTrue(Float.compare(1.2f, 1.2f) == 0); [EOL]     assertTrue(Float.compare(1.2f, 0.0f) == +1); [EOL]     assertTrue(Float.compare(1.2f, -0.0f) == +1); [EOL]     assertTrue(Float.compare(1.2f, -1.2f) == +1); [EOL]     assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(0.0f, Float.NaN) == -1); [EOL]     assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1); [EOL]     assertTrue(Float.compare(0.0f, 1.2f) == -1); [EOL]     assertTrue(Float.compare(0.0f, 0.0f) == 0); [EOL]     assertTrue(Float.compare(0.0f, -0.0f) == +1); [EOL]     assertTrue(Float.compare(0.0f, -1.2f) == +1); [EOL]     assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(-0.0f, Float.NaN) == -1); [EOL]     assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1); [EOL]     assertTrue(Float.compare(-0.0f, 1.2f) == -1); [EOL]     assertTrue(Float.compare(-0.0f, 0.0f) == -1); [EOL]     assertTrue(Float.compare(-0.0f, -0.0f) == 0); [EOL]     assertTrue(Float.compare(-0.0f, -1.2f) == +1); [EOL]     assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(-1.2f, Float.NaN) == -1); [EOL]     assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1); [EOL]     assertTrue(Float.compare(-1.2f, 1.2f) == -1); [EOL]     assertTrue(Float.compare(-1.2f, 0.0f) == -1); [EOL]     assertTrue(Float.compare(-1.2f, -0.0f) == -1); [EOL]     assertTrue(Float.compare(-1.2f, -1.2f) == 0); [EOL]     assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1); [EOL]     assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0); [EOL]     assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1); [EOL]     assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0); [EOL] } <line_num>: 1069,1160
@Test [EOL] public void testIsDigits() { [EOL]     assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]     assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]     assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]     assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]     assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]     assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL] } <line_num>: 1162,1170
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] } <line_num>: 1176,1318
private boolean checkCreateNumber(final String val) { [EOL]     try { [EOL]         final Object obj = NumberUtils.createNumber(val); [EOL]         if (obj == null) { [EOL]             return false; [EOL]         } [EOL]         return true; [EOL]     } catch (final NumberFormatException e) { [EOL]         return false; [EOL]     } [EOL] } <line_num>: 1320,1330
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testConstants() { [EOL]     assertTrue(NumberUtils.LONG_ZERO instanceof Long); [EOL]     assertTrue(NumberUtils.LONG_ONE instanceof Long); [EOL]     assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long); [EOL]     assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer); [EOL]     assertTrue(NumberUtils.INTEGER_ONE instanceof Integer); [EOL]     assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer); [EOL]     assertTrue(NumberUtils.SHORT_ZERO instanceof Short); [EOL]     assertTrue(NumberUtils.SHORT_ONE instanceof Short); [EOL]     assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short); [EOL]     assertTrue(NumberUtils.BYTE_ZERO instanceof Byte); [EOL]     assertTrue(NumberUtils.BYTE_ONE instanceof Byte); [EOL]     assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte); [EOL]     assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double); [EOL]     assertTrue(NumberUtils.DOUBLE_ONE instanceof Double); [EOL]     assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double); [EOL]     assertTrue(NumberUtils.FLOAT_ZERO instanceof Float); [EOL]     assertTrue(NumberUtils.FLOAT_ONE instanceof Float); [EOL]     assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float); [EOL]     assertTrue(NumberUtils.LONG_ZERO.longValue() == 0); [EOL]     assertTrue(NumberUtils.LONG_ONE.longValue() == 1); [EOL]     assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1); [EOL]     assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0); [EOL]     assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1); [EOL]     assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1); [EOL]     assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0); [EOL]     assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1); [EOL]     assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1); [EOL]     assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0); [EOL]     assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1); [EOL]     assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1); [EOL]     assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d); [EOL]     assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d); [EOL]     assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d); [EOL]     assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f); [EOL]     assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f); [EOL]     assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f); [EOL] } <line_num>: 1332,1372
@Test [EOL] public void testLang300() { [EOL]     NumberUtils.createNumber("-1l"); [EOL]     NumberUtils.createNumber("01l"); [EOL]     NumberUtils.createNumber("1l"); [EOL] } <line_num>: 1374,1379
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] } <line_num>: 1381,1401
