@Test [EOL] public void testConstants() { [EOL]     assertEquals(0, Fraction.ZERO.getNumerator()); [EOL]     assertEquals(1, Fraction.ZERO.getDenominator()); [EOL]     assertEquals(1, Fraction.ONE.getNumerator()); [EOL]     assertEquals(1, Fraction.ONE.getDenominator()); [EOL]     assertEquals(1, Fraction.ONE_HALF.getNumerator()); [EOL]     assertEquals(2, Fraction.ONE_HALF.getDenominator()); [EOL]     assertEquals(1, Fraction.ONE_THIRD.getNumerator()); [EOL]     assertEquals(3, Fraction.ONE_THIRD.getDenominator()); [EOL]     assertEquals(2, Fraction.TWO_THIRDS.getNumerator()); [EOL]     assertEquals(3, Fraction.TWO_THIRDS.getDenominator()); [EOL]     assertEquals(1, Fraction.ONE_QUARTER.getNumerator()); [EOL]     assertEquals(4, Fraction.ONE_QUARTER.getDenominator()); [EOL]     assertEquals(2, Fraction.TWO_QUARTERS.getNumerator()); [EOL]     assertEquals(4, Fraction.TWO_QUARTERS.getDenominator()); [EOL]     assertEquals(3, Fraction.THREE_QUARTERS.getNumerator()); [EOL]     assertEquals(4, Fraction.THREE_QUARTERS.getDenominator()); [EOL]     assertEquals(1, Fraction.ONE_FIFTH.getNumerator()); [EOL]     assertEquals(5, Fraction.ONE_FIFTH.getDenominator()); [EOL]     assertEquals(2, Fraction.TWO_FIFTHS.getNumerator()); [EOL]     assertEquals(5, Fraction.TWO_FIFTHS.getDenominator()); [EOL]     assertEquals(3, Fraction.THREE_FIFTHS.getNumerator()); [EOL]     assertEquals(5, Fraction.THREE_FIFTHS.getDenominator()); [EOL]     assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator()); [EOL]     assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator()); [EOL] } <line_num>: 39,76
@Test [EOL] public void testFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(23, 345); [EOL]     assertEquals(23, f.getNumerator()); [EOL]     assertEquals(345, f.getDenominator()); [EOL]     f = Fraction.getFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, 10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, -10); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f = Fraction.getFraction(-6, -10); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(4, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 78,147
@Test [EOL] public void testFactory_int_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(0, 0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(2, 0, 2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(1, 1, 2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(1, -6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, -6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, -6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(-1, 6, 10); [EOL]     assertEquals(-16, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(-1, -6, 10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-1, 6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-1, -6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(0, 1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, 2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-1, -3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE); [EOL]     assertEquals(-Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(0, 4, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, 1, Integer.MAX_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 149,251
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] } <line_num>: 252,341
@Test [EOL] public void testFactory_double() { [EOL]     Fraction f = null; [EOL]     try { [EOL]         f = Fraction.getFraction(Double.NaN); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Double.POSITIVE_INFINITY); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Double.NEGATIVE_INFINITY); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction((double) Integer.MAX_VALUE + 1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(0.0d); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.0d); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(0.5d); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(-0.875d); [EOL]     assertEquals(-7, f.getNumerator()); [EOL]     assertEquals(8, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.25d); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction(0.66666d); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(1.0d / 10001d); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     Fraction f2 = null; [EOL]     for (int i = 1; i <= 100; i++) { [EOL]         for (int j = 1; j <= i; j++) { [EOL]             try { [EOL]                 f = Fraction.getFraction((double) j / (double) i); [EOL]             } catch (final ArithmeticException ex) { [EOL]                 System.err.println(j + " " + i); [EOL]                 throw ex; [EOL]             } [EOL]             f2 = Fraction.getReducedFraction(j, i); [EOL]             assertEquals(f2.getNumerator(), f.getNumerator()); [EOL]             assertEquals(f2.getDenominator(), f.getDenominator()); [EOL]         } [EOL]     } [EOL]     for (int i = 1001; i <= 10000; i += SKIP) { [EOL]         for (int j = 1; j <= i; j++) { [EOL]             try { [EOL]                 f = Fraction.getFraction((double) j / (double) i); [EOL]             } catch (final ArithmeticException ex) { [EOL]                 System.err.println(j + " " + i); [EOL]                 throw ex; [EOL]             } [EOL]             f2 = Fraction.getReducedFraction(j, i); [EOL]             assertEquals(f2.getNumerator(), f.getNumerator()); [EOL]             assertEquals(f2.getDenominator(), f.getDenominator()); [EOL]         } [EOL]     } [EOL] } <line_num>: 343,431
@Test(expected = IllegalArgumentException.class) [EOL] public void testFactory_String() { [EOL]     Fraction.getFraction(null); [EOL] } <line_num>: 433,436
@Test [EOL] public void testFactory_String_double() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0.0"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("0.66666"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2.3R"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2147483648"); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("."); [EOL]         fail("Expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 439,473
@Test [EOL] public void testFactory_String_proper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0 0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 1/5"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("7 1/2"); [EOL]     assertEquals(15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("1 2/4"); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction("-7 1/2"); [EOL]     assertEquals(-15, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("-1 2/4"); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("a 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 b/4"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2 "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" 3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(" "); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 475,532
@Test [EOL] public void testFactory_String_improper() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction("0/1"); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction("1/5"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getFraction("1/2"); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction("2/3"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction("7/3"); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction("2/4"); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction("2/d"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2e/3"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("2/"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction("/"); [EOL]         fail("expecting NumberFormatException"); [EOL]     } catch (final NumberFormatException ex) { [EOL]     } [EOL] } <line_num>: 534,581
@Test [EOL] public void testGets() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5, 6); [EOL]     assertEquals(23, f.getNumerator()); [EOL]     assertEquals(3, f.getProperWhole()); [EOL]     assertEquals(5, f.getProperNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(-3, 5, 6); [EOL]     assertEquals(-23, f.getNumerator()); [EOL]     assertEquals(-3, f.getProperWhole()); [EOL]     assertEquals(5, f.getProperNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(Integer.MIN_VALUE, f.getProperWhole()); [EOL]     assertEquals(0, f.getProperNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] } <line_num>: 583,604
@Test [EOL] public void testConversions() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 7, 8); [EOL]     assertEquals(3, f.intValue()); [EOL]     assertEquals(3L, f.longValue()); [EOL]     assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]     assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL] } <line_num>: 606,615
@Test [EOL] public void testReduce() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     Fraction result = f.reduce(); [EOL]     assertEquals(2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     f = Fraction.getFraction(-2, -3); [EOL]     result = f.reduce(); [EOL]     assertEquals(2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     f = Fraction.getFraction(2, -3); [EOL]     result = f.reduce(); [EOL]     assertEquals(-2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     f = Fraction.getFraction(-2, 3); [EOL]     result = f.reduce(); [EOL]     assertEquals(-2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     assertSame(f, result); [EOL]     f = Fraction.getFraction(2, 3); [EOL]     result = f.reduce(); [EOL]     assertEquals(2, result.getNumerator()); [EOL]     assertEquals(3, result.getDenominator()); [EOL]     assertSame(f, result); [EOL]     f = Fraction.getFraction(0, 1); [EOL]     result = f.reduce(); [EOL]     assertEquals(0, result.getNumerator()); [EOL]     assertEquals(1, result.getDenominator()); [EOL]     assertSame(f, result); [EOL]     f = Fraction.getFraction(0, 100); [EOL]     result = f.reduce(); [EOL]     assertEquals(0, result.getNumerator()); [EOL]     assertEquals(1, result.getDenominator()); [EOL]     assertSame(result, Fraction.ZERO); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 2); [EOL]     result = f.reduce(); [EOL]     assertEquals(Integer.MIN_VALUE / 2, result.getNumerator()); [EOL]     assertEquals(1, result.getDenominator()); [EOL] } <line_num>: 617,664
@Test [EOL] public void testInvert() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.invert(); [EOL]     assertEquals(75, f.getNumerator()); [EOL]     assertEquals(50, f.getDenominator()); [EOL]     f = Fraction.getFraction(4, 3); [EOL]     f = f.invert(); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(4, f.getDenominator()); [EOL]     f = Fraction.getFraction(-15, 47); [EOL]     f = f.invert(); [EOL]     assertEquals(-47, f.getNumerator()); [EOL]     assertEquals(15, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 3); [EOL]     try { [EOL]         f = f.invert(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.invert(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.invert(); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL] } <line_num>: 666,702
@Test [EOL] public void testNegate() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.negate(); [EOL]     assertEquals(-50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.negate(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE - 1, Integer.MAX_VALUE); [EOL]     f = f.negate(); [EOL]     assertEquals(Integer.MIN_VALUE + 2, f.getNumerator()); [EOL]     assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.negate(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 704,729
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 731,760
@Test [EOL] public void testPow() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     assertSame(f, f.pow(1)); [EOL]     assertEquals(f, f.pow(1)); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-1); [EOL]     assertEquals(5, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f = Fraction.getFraction(3, 5); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(Fraction.ONE, f.pow(0)); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     assertEquals(f, f.pow(1)); [EOL]     assertFalse(f.pow(1).equals(Fraction.getFraction(3, 5))); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(3); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-1); [EOL]     assertEquals(10, f.getNumerator()); [EOL]     assertEquals(6, f.getDenominator()); [EOL]     f = Fraction.getFraction(6, 10); [EOL]     f = f.pow(-2); [EOL]     assertEquals(25, f.getNumerator()); [EOL]     assertEquals(9, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1231); [EOL]     f = f.pow(1); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1231, f.getDenominator()); [EOL]     f = f.pow(2); [EOL]     assertTrue(0 == f.compareTo(Fraction.ZERO)); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.pow(-1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(1, 1); [EOL]     f = f.pow(0); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(-1); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MAX_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = f.pow(Integer.MIN_VALUE); [EOL]     assertEquals(f, Fraction.ONE); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.pow(3); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(65536, 1); [EOL]     try { [EOL]         f = f.pow(2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 762,873
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 875,992
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 994,1105
@Test [EOL] public void testMultiply() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(6, 10); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(9, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f = f.multiplyBy(f2); [EOL]     assertEquals(27, f.getNumerator()); [EOL]     assertEquals(125, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(-6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(-3, 5); [EOL]     f2 = Fraction.getFraction(-2, 5); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(25, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f = f1.multiplyBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.multiplyBy(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.multiplyBy(f1); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1107,1174
@Test [EOL] public void testDivide() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.ZERO; [EOL]     try { [EOL]         f = f1.divideBy(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(2, 7); [EOL]     f = f1.divideBy(f2); [EOL]     assertSame(Fraction.ZERO, f); [EOL]     f1 = Fraction.getFraction(2, 7); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]     f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]     f = f1.divideBy(f2); [EOL]     assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f.divideBy(null); [EOL]         fail("IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1.invert()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] } <line_num>: 1176,1232
@Test [EOL] public void testEquals() { [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     assertFalse(f1.equals(null)); [EOL]     assertFalse(f1.equals(new Object())); [EOL]     assertFalse(f1.equals(Integer.valueOf(6))); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertFalse(f1.equals(f2)); [EOL]     assertTrue(f1.equals(f1)); [EOL]     assertTrue(f2.equals(f2)); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.equals(f2)); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertFalse(f1.equals(f2)); [EOL] } <line_num>: 1234,1255
@Test [EOL] public void testHashCode() { [EOL]     final Fraction f1 = Fraction.getFraction(3, 5); [EOL]     Fraction f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.hashCode() == f2.hashCode()); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.hashCode() != f2.hashCode()); [EOL] } <line_num>: 1257,1269
@Test [EOL] public void testCompareTo() { [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.compareTo(f1) == 0); [EOL]     try { [EOL]         f1.compareTo(null); [EOL]         fail("expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     assertTrue(f1.compareTo(f2) > 0); [EOL]     assertTrue(f2.compareTo(f2) == 0); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     assertTrue(f1.compareTo(f2) < 0); [EOL]     assertTrue(f2.compareTo(f2) == 0); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     assertTrue(f1.compareTo(f2) == 0); [EOL]     assertTrue(f2.compareTo(f2) == 0); [EOL]     f2 = Fraction.getFraction(6, 10); [EOL]     assertTrue(f1.compareTo(f2) == 0); [EOL]     assertTrue(f2.compareTo(f2) == 0); [EOL]     f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertTrue(f1.compareTo(f2) > 0); [EOL]     assertTrue(f2.compareTo(f2) == 0); [EOL] } <line_num>: 1271,1304
@Test [EOL] public void testToString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("7/5", f.toString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("4/2", f.toString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0/2", f.toString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("2/2", f.toString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648/1", f.toString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-2147483648/2147483647", f.toString()); [EOL] } <line_num>: 1306,1332
@Test [EOL] public void testToProperString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toProperString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toProperString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(14, 10); [EOL]     assertEquals("1 4/10", f.toProperString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("2", f.toProperString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0", f.toProperString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("1", f.toProperString()); [EOL]     f = Fraction.getFraction(-7, 5); [EOL]     assertEquals("-1 2/5", f.toProperString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648", f.toProperString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-1 1/2147483647", f.toProperString()); [EOL]     assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL] } <line_num>: 1334,1368
