@Test [EOL] public void testClass() { [EOL]     assertTrue(Modifier.isPublic(CharSet.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(CharSet.class.getModifiers())); [EOL] } <line_num>: 38,42
@Test [EOL] public void testGetInstance() { [EOL]     assertSame(CharSet.EMPTY, CharSet.getInstance((String) null)); [EOL]     assertSame(CharSet.EMPTY, CharSet.getInstance("")); [EOL]     assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z")); [EOL]     assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z")); [EOL]     assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z")); [EOL]     assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z")); [EOL]     assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9")); [EOL] } <line_num>: 45,54
@Test [EOL] public void testGetInstance_Stringarray() { [EOL]     assertEquals(null, CharSet.getInstance((String[]) null)); [EOL]     assertEquals("[]", CharSet.getInstance(new String[0]).toString()); [EOL]     assertEquals("[]", CharSet.getInstance(new String[] { null }).toString()); [EOL]     assertEquals("[a-e]", CharSet.getInstance(new String[] { "a-e" }).toString()); [EOL] } <line_num>: 57,63
@Test [EOL] public void testConstructor_String_simple() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance((String) null); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance(""); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[]", set.toString()); [EOL]     assertEquals(0, array.length); [EOL]     set = CharSet.getInstance("a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a", array[0].toString()); [EOL]     set = CharSet.getInstance("^a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a", array[0].toString()); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("a-e", array[0].toString()); [EOL]     set = CharSet.getInstance("^a-e"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals("[^a-e]", set.toString()); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals("^a-e", array[0].toString()); [EOL] } <line_num>: 66,104
@Test [EOL] public void testConstructor_String_combo() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("abc"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(3, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]     set = CharSet.getInstance("a-ce-f"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'c'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f'))); [EOL]     set = CharSet.getInstance("ae-f"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f'))); [EOL]     set = CharSet.getInstance("e-fa"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f'))); [EOL]     set = CharSet.getInstance("ae-fm-pz"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(4, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('m', 'p'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('z'))); [EOL] } <line_num>: 106,143
@Test [EOL] public void testConstructor_String_comboNegated() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^abc"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(3, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]     set = CharSet.getInstance("b^ac"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(3, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]     set = CharSet.getInstance("db^ac"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(4, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]     set = CharSet.getInstance("^b^a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('b'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     set = CharSet.getInstance("b^a-c^z"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(3, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('z'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL] } <line_num>: 145,184
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] } <line_num>: 186,232
@Test [EOL] public void testConstructor_String_oddNegate() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^^^^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     set = CharSet.getInstance("a^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); [EOL]     set = CharSet.getInstance("^a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("^^-c"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); [EOL]     set = CharSet.getInstance("^c-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     set = CharSet.getInstance("^c-^d"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]     set = CharSet.getInstance("^^-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL] } <line_num>: 234,292
@Test [EOL] public void testConstructor_String_oddCombinations() { [EOL]     CharSet set; [EOL]     CharRange[] array = null; [EOL]     set = CharSet.getInstance("a-^c"); [EOL]     array = set.getCharRanges(); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]     assertFalse(set.contains('b')); [EOL]     assertTrue(set.contains('^')); [EOL]     assertTrue(set.contains('_')); [EOL]     assertTrue(set.contains('c')); [EOL]     set = CharSet.getInstance("^a-^c"); [EOL]     array = set.getCharRanges(); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]     assertTrue(set.contains('b')); [EOL]     assertFalse(set.contains('^')); [EOL]     assertFalse(set.contains('_')); [EOL]     set = CharSet.getInstance("a- ^-- "); [EOL]     array = set.getCharRanges(); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', ' '))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); [EOL]     assertTrue(set.contains('#')); [EOL]     assertTrue(set.contains('^')); [EOL]     assertTrue(set.contains('a')); [EOL]     assertTrue(set.contains('*')); [EOL]     assertTrue(set.contains('A')); [EOL]     set = CharSet.getInstance("^-b"); [EOL]     array = set.getCharRanges(); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b'))); [EOL]     assertTrue(set.contains('b')); [EOL]     assertTrue(set.contains('_')); [EOL]     assertFalse(set.contains('A')); [EOL]     assertTrue(set.contains('^')); [EOL]     set = CharSet.getInstance("b-^"); [EOL]     array = set.getCharRanges(); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b'))); [EOL]     assertTrue(set.contains('b')); [EOL]     assertTrue(set.contains('^')); [EOL]     assertTrue(set.contains('a')); [EOL]     assertFalse(set.contains('c')); [EOL] } <line_num>: 294,341
@Test [EOL] public void testEquals_Object() { [EOL]     final CharSet abc = CharSet.getInstance("abc"); [EOL]     final CharSet abc2 = CharSet.getInstance("abc"); [EOL]     final CharSet atoc = CharSet.getInstance("a-c"); [EOL]     final CharSet atoc2 = CharSet.getInstance("a-c"); [EOL]     final CharSet notatoc = CharSet.getInstance("^a-c"); [EOL]     final CharSet notatoc2 = CharSet.getInstance("^a-c"); [EOL]     assertFalse(abc.equals(null)); [EOL]     assertTrue(abc.equals(abc)); [EOL]     assertTrue(abc.equals(abc2)); [EOL]     assertFalse(abc.equals(atoc)); [EOL]     assertFalse(abc.equals(notatoc)); [EOL]     assertFalse(atoc.equals(abc)); [EOL]     assertTrue(atoc.equals(atoc)); [EOL]     assertTrue(atoc.equals(atoc2)); [EOL]     assertFalse(atoc.equals(notatoc)); [EOL]     assertFalse(notatoc.equals(abc)); [EOL]     assertFalse(notatoc.equals(atoc)); [EOL]     assertTrue(notatoc.equals(notatoc)); [EOL]     assertTrue(notatoc.equals(notatoc2)); [EOL] } <line_num>: 344,369
@Test [EOL] public void testHashCode() { [EOL]     final CharSet abc = CharSet.getInstance("abc"); [EOL]     final CharSet abc2 = CharSet.getInstance("abc"); [EOL]     final CharSet atoc = CharSet.getInstance("a-c"); [EOL]     final CharSet atoc2 = CharSet.getInstance("a-c"); [EOL]     final CharSet notatoc = CharSet.getInstance("^a-c"); [EOL]     final CharSet notatoc2 = CharSet.getInstance("^a-c"); [EOL]     assertEquals(abc.hashCode(), abc.hashCode()); [EOL]     assertEquals(abc.hashCode(), abc2.hashCode()); [EOL]     assertEquals(atoc.hashCode(), atoc.hashCode()); [EOL]     assertEquals(atoc.hashCode(), atoc2.hashCode()); [EOL]     assertEquals(notatoc.hashCode(), notatoc.hashCode()); [EOL]     assertEquals(notatoc.hashCode(), notatoc2.hashCode()); [EOL] } <line_num>: 371,386
@Test [EOL] public void testContains_Char() { [EOL]     final CharSet btod = CharSet.getInstance("b-d"); [EOL]     final CharSet dtob = CharSet.getInstance("d-b"); [EOL]     final CharSet bcd = CharSet.getInstance("bcd"); [EOL]     final CharSet bd = CharSet.getInstance("bd"); [EOL]     final CharSet notbtod = CharSet.getInstance("^b-d"); [EOL]     assertFalse(btod.contains('a')); [EOL]     assertTrue(btod.contains('b')); [EOL]     assertTrue(btod.contains('c')); [EOL]     assertTrue(btod.contains('d')); [EOL]     assertFalse(btod.contains('e')); [EOL]     assertFalse(bcd.contains('a')); [EOL]     assertTrue(bcd.contains('b')); [EOL]     assertTrue(bcd.contains('c')); [EOL]     assertTrue(bcd.contains('d')); [EOL]     assertFalse(bcd.contains('e')); [EOL]     assertFalse(bd.contains('a')); [EOL]     assertTrue(bd.contains('b')); [EOL]     assertFalse(bd.contains('c')); [EOL]     assertTrue(bd.contains('d')); [EOL]     assertFalse(bd.contains('e')); [EOL]     assertTrue(notbtod.contains('a')); [EOL]     assertFalse(notbtod.contains('b')); [EOL]     assertFalse(notbtod.contains('c')); [EOL]     assertFalse(notbtod.contains('d')); [EOL]     assertTrue(notbtod.contains('e')); [EOL]     assertFalse(dtob.contains('a')); [EOL]     assertTrue(dtob.contains('b')); [EOL]     assertTrue(dtob.contains('c')); [EOL]     assertTrue(dtob.contains('d')); [EOL]     assertFalse(dtob.contains('e')); [EOL]     final CharRange[] array = dtob.getCharRanges(); [EOL]     assertEquals("[b-d]", dtob.toString()); [EOL]     assertEquals(1, array.length); [EOL] } <line_num>: 389,430
@Test [EOL] public void testSerialization() { [EOL]     CharSet set = CharSet.getInstance("a"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("a-e"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL]     set = CharSet.getInstance("be-f^a-z"); [EOL]     assertEquals(set, SerializationUtils.clone(set)); [EOL] } <line_num>: 433,441
@Test [EOL] public void testStatics() { [EOL]     CharRange[] array; [EOL]     array = CharSet.EMPTY.getCharRanges(); [EOL]     assertEquals(0, array.length); [EOL]     array = CharSet.ASCII_ALPHA.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z'))); [EOL]     array = CharSet.ASCII_ALPHA_LOWER.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z'))); [EOL]     array = CharSet.ASCII_ALPHA_UPPER.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z'))); [EOL]     array = CharSet.ASCII_NUMERIC.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('0', '9'))); [EOL] } <line_num>: 444,467
