public String foo() { [EOL]     return "foo()"; [EOL] } <line_num>: 48,50
public static String bar() { [EOL]     return "bar()"; [EOL] } <line_num>: 55,57
public static String bar(final int i) { [EOL]     return "bar(int)"; [EOL] } <line_num>: 59,61
public static String bar(final Integer i) { [EOL]     return "bar(Integer)"; [EOL] } <line_num>: 63,65
public static String bar(final double d) { [EOL]     return "bar(double)"; [EOL] } <line_num>: 67,69
public static String bar(final String s) { [EOL]     return "bar(String)"; [EOL] } <line_num>: 71,73
public static String bar(final Object o) { [EOL]     return "bar(Object)"; [EOL] } <line_num>: 75,77
public static void oneParameterStatic(final String s) { [EOL] } <line_num>: 79,81
@SuppressWarnings("unused") [EOL] private void privateStuff() { [EOL] } <line_num>: 83,85
public String foo() { [EOL]     return "foo()"; [EOL] } <line_num>: 88,90
public String foo(final int i) { [EOL]     return "foo(int)"; [EOL] } <line_num>: 92,94
public String foo(final Integer i) { [EOL]     return "foo(Integer)"; [EOL] } <line_num>: 96,98
public String foo(final double d) { [EOL]     return "foo(double)"; [EOL] } <line_num>: 100,102
public String foo(final String s) { [EOL]     return "foo(String)"; [EOL] } <line_num>: 104,106
public String foo(final Object o) { [EOL]     return "foo(Object)"; [EOL] } <line_num>: 108,110
public void oneParameter(final String s) { [EOL] } <line_num>: 112,114
@Override [EOL] public Object getValue() { [EOL]     return null; [EOL] } <line_num>: 118,121
@Override [EOL] public void setValue(final Object value) { [EOL] } <line_num>: 123,125
@Before [EOL] public void setUp() throws Exception { [EOL]     testBean = new TestBean(); [EOL]     classCache.clear(); [EOL] } <line_num>: 131,135
@Test [EOL] public void testConstructor() throws Exception { [EOL]     assertNotNull(MethodUtils.class.newInstance()); [EOL] } <line_num>: 137,140
@Test [EOL] public void testInvokeMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", Boolean.TRUE)); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.LONG_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.DOUBLE_ONE)); [EOL] } <line_num>: 142,164
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] } <line_num>: 166,201
@Test [EOL] public void testInvokeStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]     try { [EOL]         MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] } <line_num>: 203,231
@Test [EOL] public void testInvokeExactStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] } <line_num>: 233,269
@Test [EOL] public void testGetAccessibleInterfaceMethod() throws Exception { [EOL]     final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null }; [EOL]     for (final Class<?>[] element : p) { [EOL]         final Method method = TestMutable.class.getMethod("getValue", element); [EOL]         final Method accessibleMethod = MethodUtils.getAccessibleMethod(method); [EOL]         assertNotSame(accessibleMethod, method); [EOL]         assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); [EOL]     } [EOL] } <line_num>: 271,280
@Test [EOL] public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]     final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]     assertNotNull(expected); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]     assertNull(actual); [EOL] } <line_num>: 282,288
@Test [EOL] public void testGetAccessibleInterfaceMethodFromDescription() throws Exception { [EOL]     final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null }; [EOL]     for (final Class<?>[] element : p) { [EOL]         final Method accessibleMethod = MethodUtils.getAccessibleMethod(TestMutable.class, "getValue", element); [EOL]         assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); [EOL]     } [EOL] } <line_num>: 290,299
@Test [EOL] public void testGetAccessiblePublicMethod() throws Exception { [EOL]     assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class.getMethod("getValue", ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass()); [EOL] } <line_num>: 301,306
@Test [EOL] public void testGetAccessiblePublicMethodFromDescription() throws Exception { [EOL]     assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class, "getValue", ArrayUtils.EMPTY_CLASS_ARRAY).getDeclaringClass()); [EOL] } <line_num>: 308,313
@Test [EOL] public void testGetAccessibleMethodInaccessible() throws Exception { [EOL]     final Method expected = TestBean.class.getDeclaredMethod("privateStuff"); [EOL]     final Method actual = MethodUtils.getAccessibleMethod(expected); [EOL]     assertNull(actual); [EOL] } <line_num>: 315,320
@Test [EOL] public void testGetMatchingAccessibleMethod() throws Exception { [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(String.class), singletonArray(String.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Object.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", singletonArray(ParentObject.class), singletonArray(ParentObject.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", singletonArray(ChildObject.class), singletonArray(ParentObject.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", singletonArray(ParentObject.class), singletonArray(GrandParentObject.class)); [EOL]     expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", singletonArray(ChildObject.class), singletonArray(ChildInterface.class)); [EOL] } <line_num>: 322,372
@Test [EOL] public void testNullArgument() { [EOL]     expectMatchingAccessibleMethodParameterTypes(TestBean.class, "oneParameter", singletonArray(null), singletonArray(String.class)); [EOL] } <line_num>: 374,378
private void expectMatchingAccessibleMethodParameterTypes(final Class<?> cls, final String methodName, final Class<?>[] requestTypes, final Class<?>[] actualTypes) { [EOL]     final Method m = MethodUtils.getMatchingAccessibleMethod(cls, methodName, requestTypes); [EOL]     assertTrue(toString(m.getParameterTypes()) + " not equals " + toString(actualTypes), Arrays.equals(actualTypes, m.getParameterTypes())); [EOL] } <line_num>: 380,387
private String toString(final Class<?>[] c) { [EOL]     return Arrays.asList(c).toString(); [EOL] } <line_num>: 389,391
private Class<?>[] singletonArray(final Class<?> c) { [EOL]     Class<?>[] result = classCache.get(c); [EOL]     if (result == null) { [EOL]         result = new Class[] { c }; [EOL]         classCache.put(c, result); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 393,400
public void testOne(final Object obj) { [EOL] } <line_num>: 403,403
public void testOne(final GrandParentObject obj) { [EOL] } <line_num>: 404,404
public void testOne(final ParentObject obj) { [EOL] } <line_num>: 405,405
public void testTwo(final Object obj) { [EOL] } <line_num>: 406,406
public void testTwo(final GrandParentObject obj) { [EOL] } <line_num>: 407,407
public void testTwo(final ChildInterface obj) { [EOL] } <line_num>: 408,408
