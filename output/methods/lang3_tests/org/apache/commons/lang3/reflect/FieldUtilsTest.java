@Before [EOL] public void setUp() { [EOL]     StaticContainer.reset(); [EOL]     publicChild = new PublicChild(); [EOL]     publiclyShadowedChild = new PubliclyShadowedChild(); [EOL]     privatelyShadowedChild = new PrivatelyShadowedChild(); [EOL] } <line_num>: 64,70
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new FieldUtils()); [EOL]     final Constructor<?>[] cons = FieldUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(FieldUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(FieldUtils.class.getModifiers())); [EOL] } <line_num>: 72,80
@Test [EOL] public void testGetField() { [EOL]     assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, "VALUE").getDeclaringClass()); [EOL]     assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s").getDeclaringClass()); [EOL]     assertNull(FieldUtils.getField(PublicChild.class, "b")); [EOL]     assertNull(FieldUtils.getField(PublicChild.class, "i")); [EOL]     assertNull(FieldUtils.getField(PublicChild.class, "d")); [EOL]     assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE").getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s").getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b").getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i").getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d").getDeclaringClass()); [EOL]     assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE").getDeclaringClass()); [EOL]     assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, "s").getDeclaringClass()); [EOL]     assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "b")); [EOL]     assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "i")); [EOL]     assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, "d")); [EOL] } <line_num>: 82,99
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldIllegalArgumentException1() { [EOL]     FieldUtils.getField(null, "none"); [EOL] } <line_num>: 101,104
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null); [EOL] } <line_num>: 106,109
@Test [EOL] public void testGetFieldForceAccess() { [EOL]     assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, "VALUE", true).getDeclaringClass()); [EOL]     assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "s", true).getDeclaringClass()); [EOL]     assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "b", true).getDeclaringClass()); [EOL]     assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "i", true).getDeclaringClass()); [EOL]     assertEquals(parentClass, FieldUtils.getField(PublicChild.class, "d", true).getDeclaringClass()); [EOL]     assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, "VALUE", true).getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "s", true).getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "b", true).getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "i", true).getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, "d", true).getDeclaringClass()); [EOL]     assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, "VALUE", true).getDeclaringClass()); [EOL]     assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "s", true).getDeclaringClass()); [EOL]     assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "b", true).getDeclaringClass()); [EOL]     assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "i", true).getDeclaringClass()); [EOL]     assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, "d", true).getDeclaringClass()); [EOL] } <line_num>: 111,128
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException1() { [EOL]     FieldUtils.getField(null, "none", true); [EOL] } <line_num>: 130,133
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null, true); [EOL] } <line_num>: 135,138
@Test [EOL] public void testGetAllFields() { [EOL]     assertArrayEquals(new Field[0], FieldUtils.getAllFields(Object.class)); [EOL]     final Field[] fieldsNumber = Number.class.getDeclaredFields(); [EOL]     assertArrayEquals(fieldsNumber, FieldUtils.getAllFields(Number.class)); [EOL]     final Field[] fieldsInteger = Integer.class.getDeclaredFields(); [EOL]     assertArrayEquals(ArrayUtils.addAll(fieldsInteger, fieldsNumber), FieldUtils.getAllFields(Integer.class)); [EOL]     assertEquals(5, FieldUtils.getAllFields(PublicChild.class).length); [EOL] } <line_num>: 140,148
private <T> List<T> asArrayList(T... values) { [EOL]     final ArrayList<T> arrayList = new ArrayList<T>(); [EOL]     for (T t : values) { [EOL]         arrayList.add(t); [EOL]     } [EOL]     return arrayList; [EOL] } <line_num>: 150,156
@Test [EOL] public void testGetAllFieldsList() { [EOL]     assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size()); [EOL]     final List<Field> fieldsNumber = asArrayList(Number.class.getDeclaredFields()); [EOL]     assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class)); [EOL]     final List<Field> fieldsInteger = asArrayList(Integer.class.getDeclaredFields()); [EOL]     final List<Field> allFieldsInteger = new ArrayList<Field>(fieldsInteger); [EOL]     allFieldsInteger.addAll(fieldsNumber); [EOL]     assertEquals(allFieldsInteger, FieldUtils.getAllFieldsList(Integer.class)); [EOL]     assertEquals(5, FieldUtils.getAllFieldsList(PublicChild.class).size()); [EOL] } <line_num>: 158,168
@Test [EOL] public void testGetDeclaredField() { [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "VALUE")); [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s")); [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b")); [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i")); [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d")); [EOL]     assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s").getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b").getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i").getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d").getDeclaringClass()); [EOL]     assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s")); [EOL]     assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b")); [EOL]     assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i")); [EOL]     assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d")); [EOL] } <line_num>: 170,187
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldAccessIllegalArgumentException1() { [EOL]     FieldUtils.getDeclaredField(null, "none"); [EOL] } <line_num>: 189,192
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldAccessIllegalArgumentException2() { [EOL]     FieldUtils.getDeclaredField(PublicChild.class, null); [EOL] } <line_num>: 194,197
@Test [EOL] public void testGetDeclaredFieldForceAccess() { [EOL]     assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, "VALUE", true).getDeclaringClass()); [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "s", true)); [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "b", true)); [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "i", true)); [EOL]     assertNull(FieldUtils.getDeclaredField(PublicChild.class, "d", true)); [EOL]     assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "VALUE", true)); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "s", true).getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "b", true).getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "i", true).getDeclaringClass()); [EOL]     assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, "d", true).getDeclaringClass()); [EOL]     assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "VALUE", true)); [EOL]     assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "s", true).getDeclaringClass()); [EOL]     assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "b", true).getDeclaringClass()); [EOL]     assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "i", true).getDeclaringClass()); [EOL]     assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, "d", true).getDeclaringClass()); [EOL] } <line_num>: 199,216
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldForceAccessIllegalArgumentException1() { [EOL]     FieldUtils.getDeclaredField(null, "none", true); [EOL] } <line_num>: 218,221
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetDeclaredFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getDeclaredField(PublicChild.class, null, true); [EOL] } <line_num>: 223,226
@Test [EOL] public void testReadStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); [EOL] } <line_num>: 228,231
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException1() throws Exception { [EOL]     FieldUtils.readStaticField(null); [EOL] } <line_num>: 233,236
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldIllegalArgumentException2() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s"); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] } <line_num>: 238,244
@Test [EOL] public void testReadStaticFieldForceAccess() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, "VALUE"))); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, "VALUE"))); [EOL] } <line_num>: 246,250
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException1() throws Exception { [EOL]     FieldUtils.readStaticField(null, true); [EOL] } <line_num>: 252,255
@Test(expected = IllegalArgumentException.class) [EOL] public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception { [EOL]     final Field nonStaticField = FieldUtils.getField(PublicChild.class, "s", true); [EOL]     assumeNotNull(nonStaticField); [EOL]     FieldUtils.readStaticField(nonStaticField); [EOL] } <line_num>: 257,262
@Test [EOL] public void testReadNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, "VALUE")); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none"); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist"); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s"); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 264,298
@Test [EOL] public void testReadNamedStaticFieldForceAccess() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, "VALUE", true)); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, "VALUE", true)); [EOL]     assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, "VALUE", true)); [EOL]     assertEquals("child", FieldUtils.readStaticField(PublicChild.class, "VALUE", true)); [EOL]     try { [EOL]         FieldUtils.readStaticField(null, "none", true); [EOL]         fail("null class should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, null, true); [EOL]         fail("null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(Foo.class, "does_not_exist", true); [EOL]         fail("a field that doesn't exist should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readStaticField(PublicChild.class, "s", false); [EOL]         fail("non-static field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 300,334
@Test [EOL] public void testReadDeclaredNamedStaticField() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE")); [EOL]     try { [EOL]         assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 336,357
@Test [EOL] public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true)); [EOL]     assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true)); [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 359,375
@Test [EOL] public void testReadField() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 377,402
@Test [EOL] public void testReadFieldForceAccess() throws Exception { [EOL]     final Field parentS = FieldUtils.getDeclaredField(parentClass, "s"); [EOL]     parentS.setAccessible(false); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publicChild, true)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, publiclyShadowedChild, true)); [EOL]     assertEquals("s", FieldUtils.readField(parentS, privatelyShadowedChild, true)); [EOL]     final Field parentB = FieldUtils.getDeclaredField(parentClass, "b", true); [EOL]     parentB.setAccessible(false); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true)); [EOL]     final Field parentI = FieldUtils.getDeclaredField(parentClass, "i", true); [EOL]     parentI.setAccessible(false); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publicChild, true)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true)); [EOL]     assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true)); [EOL]     final Field parentD = FieldUtils.getDeclaredField(parentClass, "d", true); [EOL]     parentD.setAccessible(false); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publicChild, true)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true)); [EOL]     assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true)); [EOL]     try { [EOL]         FieldUtils.readField((Field) null, publicChild, true); [EOL]         fail("a null field should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 404,433
@Test [EOL] public void testReadNamedField() throws Exception { [EOL]     assertEquals("s", FieldUtils.readField(publicChild, "s")); [EOL]     assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     assertEquals("s", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.readField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 435,494
@Test [EOL] public void testReadNamedFieldForceAccess() throws Exception { [EOL]     assertEquals("s", FieldUtils.readField(publicChild, "s", true)); [EOL]     assertEquals("ss", FieldUtils.readField(publiclyShadowedChild, "s", true)); [EOL]     assertEquals("ss", FieldUtils.readField(privatelyShadowedChild, "s", true)); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, "b", true)); [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, "b", true)); [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, "b", true)); [EOL]     assertEquals(I0, FieldUtils.readField(publicChild, "i", true)); [EOL]     assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, "i", true)); [EOL]     assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, "i", true)); [EOL]     assertEquals(D0, FieldUtils.readField(publicChild, "d", true)); [EOL]     assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, "d", true)); [EOL]     assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, "d", true)); [EOL]     try { [EOL]         FieldUtils.readField(publicChild, null, true); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readField((Object) null, "none", true); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 496,524
@Test [EOL] public void testReadDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none"); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(privatelyShadowedChild, "s")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, "i")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, "d")); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 526,594
@Test [EOL] public void testReadDeclaredNamedFieldForceAccess() throws Exception { [EOL]     try { [EOL]         FieldUtils.readDeclaredField(publicChild, null, true); [EOL]         fail("a null field name should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.readDeclaredField((Object) null, "none", true); [EOL]         fail("a null target should cause an IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals("s", FieldUtils.readDeclaredField(publicChild, "s", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true)); [EOL]     assertEquals("ss", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true)); [EOL]     try { [EOL]         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, "b", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true)); [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true)); [EOL]     try { [EOL]         assertEquals(I0, FieldUtils.readDeclaredField(publicChild, "i", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true)); [EOL]     assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true)); [EOL]     try { [EOL]         assertEquals(D0, FieldUtils.readDeclaredField(publicChild, "d", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true)); [EOL]     assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true)); [EOL] } <line_num>: 596,644
@Test [EOL] public void testWriteStaticField() throws Exception { [EOL]     Field field = StaticContainer.class.getDeclaredField("mutablePublic"); [EOL]     FieldUtils.writeStaticField(field, "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     field = StaticContainer.class.getDeclaredField("mutableProtected"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("mutablePackage"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("mutablePrivate"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] } <line_num>: 646,700
@Test [EOL] public void testWriteStaticFieldForceAccess() throws Exception { [EOL]     Field field = StaticContainer.class.getDeclaredField("mutablePublic"); [EOL]     FieldUtils.writeStaticField(field, "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     field = StaticContainer.class.getDeclaredField("mutableProtected"); [EOL]     FieldUtils.writeStaticField(field, "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     field = StaticContainer.class.getDeclaredField("mutablePackage"); [EOL]     FieldUtils.writeStaticField(field, "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     field = StaticContainer.class.getDeclaredField("mutablePrivate"); [EOL]     FieldUtils.writeStaticField(field, "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     field = StaticContainer.class.getDeclaredField("IMMUTABLE_PUBLIC"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("IMMUTABLE_PROTECTED"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("IMMUTABLE_PACKAGE"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = StaticContainer.class.getDeclaredField("IMMUTABLE_PRIVATE"); [EOL]     try { [EOL]         FieldUtils.writeStaticField(field, "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] } <line_num>: 702,744
@Test [EOL] public void testWriteNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 746,792
@Test [EOL] public void testWriteNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeStaticField(StaticContainerChild.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeStaticField(StaticContainerChild.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] } <line_num>: 794,828
@Test [EOL] public void testWriteDeclaredNamedStaticField() throws Exception { [EOL]     FieldUtils.writeStaticField(StaticContainer.class, "mutablePublic", "new"); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new"); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 830,876
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] } <line_num>: 878,912
@Test [EOL] public void testWriteField() throws Exception { [EOL]     Field field = parentClass.getDeclaredField("s"); [EOL]     FieldUtils.writeField(field, publicChild, "S"); [EOL]     assertEquals("S", field.get(publicChild)); [EOL]     field = parentClass.getDeclaredField("b"); [EOL]     try { [EOL]         FieldUtils.writeField(field, publicChild, Boolean.TRUE); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = parentClass.getDeclaredField("i"); [EOL]     try { [EOL]         FieldUtils.writeField(field, publicChild, Integer.valueOf(Integer.MAX_VALUE)); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     field = parentClass.getDeclaredField("d"); [EOL]     try { [EOL]         FieldUtils.writeField(field, publicChild, Double.valueOf(Double.MAX_VALUE)); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] } <line_num>: 914,938
@Test [EOL] public void testWriteFieldForceAccess() throws Exception { [EOL]     Field field = parentClass.getDeclaredField("s"); [EOL]     FieldUtils.writeField(field, publicChild, "S", true); [EOL]     assertEquals("S", field.get(publicChild)); [EOL]     field = parentClass.getDeclaredField("b"); [EOL]     FieldUtils.writeField(field, publicChild, Boolean.TRUE, true); [EOL]     assertEquals(Boolean.TRUE, field.get(publicChild)); [EOL]     field = parentClass.getDeclaredField("i"); [EOL]     FieldUtils.writeField(field, publicChild, Integer.valueOf(Integer.MAX_VALUE), true); [EOL]     assertEquals(Integer.valueOf(Integer.MAX_VALUE), field.get(publicChild)); [EOL]     field = parentClass.getDeclaredField("d"); [EOL]     FieldUtils.writeField(field, publicChild, Double.valueOf(Double.MAX_VALUE), true); [EOL]     assertEquals(Double.valueOf(Double.MAX_VALUE), field.get(publicChild)); [EOL] } <line_num>: 940,954
@Test [EOL] public void testWriteNamedField() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d")); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s")); [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 956,1008
@Test [EOL] public void testWriteNamedFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeField(publicChild, "s", "S", true); [EOL]     assertEquals("S", FieldUtils.readField(publicChild, "s", true)); [EOL]     FieldUtils.writeField(publicChild, "b", Boolean.TRUE, true); [EOL]     assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, "b", true)); [EOL]     FieldUtils.writeField(publicChild, "i", Integer.valueOf(1), true); [EOL]     assertEquals(Integer.valueOf(1), FieldUtils.readField(publicChild, "i", true)); [EOL]     FieldUtils.writeField(publicChild, "d", Double.valueOf(1.0), true); [EOL]     assertEquals(Double.valueOf(1.0), FieldUtils.readField(publicChild, "d", true)); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "s", "S", true); [EOL]     assertEquals("S", FieldUtils.readField(publiclyShadowedChild, "s", true)); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "b", Boolean.FALSE, true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, "b", true)); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "i", Integer.valueOf(0), true); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, "i", true)); [EOL]     FieldUtils.writeField(publiclyShadowedChild, "d", Double.valueOf(0.0), true); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, "d", true)); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "s", "S", true); [EOL]     assertEquals("S", FieldUtils.readField(privatelyShadowedChild, "s", true)); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "b", Boolean.FALSE, true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, "b", true)); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "i", Integer.valueOf(0), true); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readField(privatelyShadowedChild, "i", true)); [EOL]     FieldUtils.writeField(privatelyShadowedChild, "d", Double.valueOf(0.0), true); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readField(privatelyShadowedChild, "d", true)); [EOL] } <line_num>: 1010,1038
@Test [EOL] public void testWriteDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 1040,1100
@Test [EOL] public void testWriteDeclaredNamedFieldForceAccess() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S", true); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE, true); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1), true); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0), true); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S", true); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s", true)); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE, true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b", true)); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0), true); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i", true)); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0), true); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d", true)); [EOL]     FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S", true); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(privatelyShadowedChild, "s", true)); [EOL]     FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.FALSE, true); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, "b", true)); [EOL]     FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(0), true); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(privatelyShadowedChild, "i", true)); [EOL]     FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(0.0), true); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, "d", true)); [EOL] } <line_num>: 1102,1146
@Test(expected = IllegalArgumentException.class) [EOL] public void testAmbig() { [EOL]     FieldUtils.getField(Ambig.class, "VALUE"); [EOL] } <line_num>: 1148,1151
