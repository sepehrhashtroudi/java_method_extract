public AClass(final AAClass<String> enclosingInstance) { [EOL]     enclosingInstance.super(); [EOL] } <line_num>: 705,707
public void dummyMethod(final List list0, final List<Object> list1, final List<?> list2, final List<? super Object> list3, final List<String> list4, final List<? extends String> list5, final List<? super String> list6, final List[] list7, final List<Object>[] list8, final List<?>[] list9, final List<? super Object>[] list10, final List<String>[] list11, final List<? extends String>[] list12, final List<? super String>[] list13) { [EOL] } <line_num>: 99,104
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAssignable() throws SecurityException, NoSuchMethodException, NoSuchFieldException { [EOL]     List list0 = null; [EOL]     List<Object> list1 = null; [EOL]     List<?> list2 = null; [EOL]     List<? super Object> list3 = null; [EOL]     List<String> list4 = null; [EOL]     List<? extends String> list5 = null; [EOL]     List<? super String> list6 = null; [EOL]     List[] list7 = null; [EOL]     List<Object>[] list8 = null; [EOL]     List<?>[] list9 = null; [EOL]     List<? super Object>[] list10 = null; [EOL]     List<String>[] list11 = null; [EOL]     List<? extends String>[] list12 = null; [EOL]     List<? super String>[] list13; [EOL]     final Class<?> clazz = getClass(); [EOL]     final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     delegateBooleanAssertion(types, 0, 0, true); [EOL]     list1 = list0; [EOL]     delegateBooleanAssertion(types, 0, 1, true); [EOL]     list0 = list1; [EOL]     delegateBooleanAssertion(types, 1, 0, true); [EOL]     list2 = list0; [EOL]     delegateBooleanAssertion(types, 0, 2, true); [EOL]     list0 = list2; [EOL]     delegateBooleanAssertion(types, 2, 0, true); [EOL]     list3 = list0; [EOL]     delegateBooleanAssertion(types, 0, 3, true); [EOL]     list0 = list3; [EOL]     delegateBooleanAssertion(types, 3, 0, true); [EOL]     list4 = list0; [EOL]     delegateBooleanAssertion(types, 0, 4, true); [EOL]     list0 = list4; [EOL]     delegateBooleanAssertion(types, 4, 0, true); [EOL]     list5 = list0; [EOL]     delegateBooleanAssertion(types, 0, 5, true); [EOL]     list0 = list5; [EOL]     delegateBooleanAssertion(types, 5, 0, true); [EOL]     list6 = list0; [EOL]     delegateBooleanAssertion(types, 0, 6, true); [EOL]     list0 = list6; [EOL]     delegateBooleanAssertion(types, 6, 0, true); [EOL]     delegateBooleanAssertion(types, 1, 1, true); [EOL]     list2 = list1; [EOL]     delegateBooleanAssertion(types, 1, 2, true); [EOL]     list1 = (List<Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 1, false); [EOL]     list3 = list1; [EOL]     delegateBooleanAssertion(types, 1, 3, true); [EOL]     list1 = (List<Object>) list3; [EOL]     delegateBooleanAssertion(types, 3, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 1, false); [EOL]     delegateBooleanAssertion(types, 1, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 1, false); [EOL]     list6 = list1; [EOL]     delegateBooleanAssertion(types, 1, 6, true); [EOL]     list1 = (List<Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 1, false); [EOL]     delegateBooleanAssertion(types, 2, 2, true); [EOL]     list2 = list3; [EOL]     delegateBooleanAssertion(types, 2, 3, false); [EOL]     list2 = list4; [EOL]     delegateBooleanAssertion(types, 3, 2, true); [EOL]     list3 = (List<? super Object>) list2; [EOL]     delegateBooleanAssertion(types, 2, 4, false); [EOL]     list2 = list5; [EOL]     delegateBooleanAssertion(types, 4, 2, true); [EOL]     list4 = (List<String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 5, false); [EOL]     list2 = list6; [EOL]     delegateBooleanAssertion(types, 5, 2, true); [EOL]     list5 = (List<? extends String>) list2; [EOL]     delegateBooleanAssertion(types, 2, 6, false); [EOL]     delegateBooleanAssertion(types, 6, 2, true); [EOL]     list6 = (List<? super String>) list2; [EOL]     delegateBooleanAssertion(types, 3, 3, true); [EOL]     delegateBooleanAssertion(types, 3, 4, false); [EOL]     delegateBooleanAssertion(types, 4, 3, false); [EOL]     delegateBooleanAssertion(types, 3, 5, false); [EOL]     delegateBooleanAssertion(types, 5, 3, false); [EOL]     list6 = list3; [EOL]     delegateBooleanAssertion(types, 3, 6, true); [EOL]     list3 = (List<? super Object>) list6; [EOL]     delegateBooleanAssertion(types, 6, 3, false); [EOL]     delegateBooleanAssertion(types, 4, 4, true); [EOL]     list5 = list4; [EOL]     delegateBooleanAssertion(types, 4, 5, true); [EOL]     list4 = (List<String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 4, false); [EOL]     list6 = list4; [EOL]     delegateBooleanAssertion(types, 4, 6, true); [EOL]     list4 = (List<String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 4, false); [EOL]     delegateBooleanAssertion(types, 5, 5, true); [EOL]     list6 = (List<? super String>) list5; [EOL]     delegateBooleanAssertion(types, 5, 6, false); [EOL]     list5 = (List<? extends String>) list6; [EOL]     delegateBooleanAssertion(types, 6, 5, false); [EOL]     delegateBooleanAssertion(types, 6, 6, true); [EOL]     delegateBooleanAssertion(types, 7, 7, true); [EOL]     list8 = list7; [EOL]     delegateBooleanAssertion(types, 7, 8, true); [EOL]     list7 = list8; [EOL]     delegateBooleanAssertion(types, 8, 7, true); [EOL]     list9 = list7; [EOL]     delegateBooleanAssertion(types, 7, 9, true); [EOL]     list7 = list9; [EOL]     delegateBooleanAssertion(types, 9, 7, true); [EOL]     list10 = list7; [EOL]     delegateBooleanAssertion(types, 7, 10, true); [EOL]     list7 = list10; [EOL]     delegateBooleanAssertion(types, 10, 7, true); [EOL]     list11 = list7; [EOL]     delegateBooleanAssertion(types, 7, 11, true); [EOL]     list7 = list11; [EOL]     delegateBooleanAssertion(types, 11, 7, true); [EOL]     list12 = list7; [EOL]     delegateBooleanAssertion(types, 7, 12, true); [EOL]     list7 = list12; [EOL]     delegateBooleanAssertion(types, 12, 7, true); [EOL]     list13 = list7; [EOL]     delegateBooleanAssertion(types, 7, 13, true); [EOL]     list7 = list13; [EOL]     delegateBooleanAssertion(types, 13, 7, true); [EOL]     delegateBooleanAssertion(types, 8, 8, true); [EOL]     list9 = list8; [EOL]     delegateBooleanAssertion(types, 8, 9, true); [EOL]     list8 = (List<Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 8, false); [EOL]     list10 = list8; [EOL]     delegateBooleanAssertion(types, 8, 10, true); [EOL]     list8 = (List<Object>[]) list10; [EOL]     delegateBooleanAssertion(types, 10, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 8, false); [EOL]     delegateBooleanAssertion(types, 8, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 8, false); [EOL]     list13 = list8; [EOL]     delegateBooleanAssertion(types, 8, 13, true); [EOL]     list8 = (List<Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 8, false); [EOL]     delegateBooleanAssertion(types, 9, 9, true); [EOL]     list10 = (List<? super Object>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 10, false); [EOL]     list9 = list10; [EOL]     delegateBooleanAssertion(types, 10, 9, true); [EOL]     list11 = (List<String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 11, false); [EOL]     list9 = list11; [EOL]     delegateBooleanAssertion(types, 11, 9, true); [EOL]     list12 = (List<? extends String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 12, false); [EOL]     list9 = list12; [EOL]     delegateBooleanAssertion(types, 12, 9, true); [EOL]     list13 = (List<? super String>[]) list9; [EOL]     delegateBooleanAssertion(types, 9, 13, false); [EOL]     list9 = list13; [EOL]     delegateBooleanAssertion(types, 13, 9, true); [EOL]     delegateBooleanAssertion(types, 10, 10, true); [EOL]     delegateBooleanAssertion(types, 10, 11, false); [EOL]     delegateBooleanAssertion(types, 11, 10, false); [EOL]     delegateBooleanAssertion(types, 10, 12, false); [EOL]     delegateBooleanAssertion(types, 12, 10, false); [EOL]     list13 = list10; [EOL]     delegateBooleanAssertion(types, 10, 13, true); [EOL]     list10 = (List<? super Object>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 10, false); [EOL]     delegateBooleanAssertion(types, 11, 11, true); [EOL]     list12 = list11; [EOL]     delegateBooleanAssertion(types, 11, 12, true); [EOL]     list11 = (List<String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 11, false); [EOL]     list13 = list11; [EOL]     delegateBooleanAssertion(types, 11, 13, true); [EOL]     list11 = (List<String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 11, false); [EOL]     delegateBooleanAssertion(types, 12, 12, true); [EOL]     list13 = (List<? super String>[]) list12; [EOL]     delegateBooleanAssertion(types, 12, 13, false); [EOL]     list12 = (List<? extends String>[]) list13; [EOL]     delegateBooleanAssertion(types, 13, 12, false); [EOL]     delegateBooleanAssertion(types, 13, 13, true); [EOL]     final Type disType = getClass().getField("dis").getGenericType(); [EOL]     final Type datType = getClass().getField("dat").getGenericType(); [EOL]     final Type daType = getClass().getField("da").getGenericType(); [EOL]     final Type uhderType = getClass().getField("uhder").getGenericType(); [EOL]     final Type dingType = getClass().getField("ding").getGenericType(); [EOL]     final Type testerType = getClass().getField("tester").getGenericType(); [EOL]     final Type tester2Type = getClass().getField("tester2").getGenericType(); [EOL]     final Type dat2Type = getClass().getField("dat2").getGenericType(); [EOL]     final Type dat3Type = getClass().getField("dat3").getGenericType(); [EOL]     dis = dat; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(datType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(daType, disType)); [EOL]     dis = uhder; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType)); [EOL]     dis = ding; [EOL]     Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType)); [EOL]     dis = tester; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(testerType, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType)); [EOL]     final char ch = 0; [EOL]     final boolean bo = false; [EOL]     final byte by = 0; [EOL]     final short sh = 0; [EOL]     int in = 0; [EOL]     long lo = 0; [EOL]     final float fl = 0; [EOL]     double du = 0; [EOL]     du = ch; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class)); [EOL]     du = by; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class)); [EOL]     du = sh; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class)); [EOL]     du = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class)); [EOL]     du = lo; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class)); [EOL]     du = fl; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class)); [EOL]     lo = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class)); [EOL]     lo = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class)); [EOL]     in = Integer.valueOf(0); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class)); [EOL]     final Integer inte = in; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class)); [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType)); [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class)); [EOL]     final Serializable ser = 1; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class)); [EOL]     final Type longComparableType = getClass().getField("longComparable").getGenericType(); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class)); [EOL]     final Integer[] ia = null; [EOL]     final Type caType = getClass().getField("intWildcardComparable").getGenericType(); [EOL]     intWildcardComparable = ia; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType)); [EOL]     Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class)); [EOL]     final int[] ina = null; [EOL]     Object[] oa; [EOL]     Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class)); [EOL]     oa = new Integer[0]; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class)); [EOL]     final Type bClassType = AClass.class.getField("bClass").getGenericType(); [EOL]     final Type cClassType = AClass.class.getField("cClass").getGenericType(); [EOL]     final Type dClassType = AClass.class.getField("dClass").getGenericType(); [EOL]     final Type eClassType = AClass.class.getField("eClass").getGenericType(); [EOL]     final Type fClassType = AClass.class.getField("fClass").getGenericType(); [EOL]     final AClass aClass = new AClass(new AAClass<String>()); [EOL]     aClass.bClass = aClass.cClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType)); [EOL]     aClass.bClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType)); [EOL]     aClass.bClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType)); [EOL]     aClass.bClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType)); [EOL]     aClass.cClass = aClass.dClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType)); [EOL]     aClass.cClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType)); [EOL]     aClass.cClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType)); [EOL]     aClass.dClass = aClass.eClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType)); [EOL]     aClass.dClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType)); [EOL]     aClass.eClass = aClass.fClass; [EOL]     Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType)); [EOL] } <line_num>: 106,442
public void delegateBooleanAssertion(final Type[] types, final int i2, final int i1, final boolean expected) { [EOL]     final Type type1 = types[i1]; [EOL]     final Type type2 = types[i2]; [EOL]     final boolean isAssignable = TypeUtils.isAssignable(type2, type1); [EOL]     if (expected) { [EOL]         Assert.assertTrue("[" + i1 + ", " + i2 + "]: From " + StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + " to " + StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable); [EOL]     } else { [EOL]         Assert.assertFalse("[" + i1 + ", " + i2 + "]: From " + StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + " to " + StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable); [EOL]     } [EOL] } <line_num>: 444,458
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsInstance() throws SecurityException, NoSuchFieldException { [EOL]     final Type intComparableType = getClass().getField("intComparable").getGenericType(); [EOL]     final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); [EOL]     intComparable = 1; [EOL]     Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); [EOL]     Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); [EOL] } <line_num>: 460,469
@Test [EOL] public void testGetTypeArguments() { [EOL]     Map<TypeVariable<?>, Type> typeVarAssigns; [EOL]     TypeVariable<?> treeSetTypeVar; [EOL]     Type typeArg; [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); [EOL]     treeSetTypeVar = Comparable.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     typeArg = typeVarAssigns.get(treeSetTypeVar); [EOL]     Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar)); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); [EOL]     treeSetTypeVar = Comparable.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     typeArg = typeVarAssigns.get(treeSetTypeVar); [EOL]     Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar)); [EOL]     final Collection<Integer> col = Arrays.asList(new Integer[0]); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class); [EOL]     treeSetTypeVar = Comparable.class.getTypeParameters()[0]; [EOL]     Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class); [EOL]     Assert.assertTrue(typeVarAssigns.size() == 2); [EOL]     Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0])); [EOL]     Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0])); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class); [EOL]     Assert.assertEquals(2, typeVarAssigns.size()); [EOL]     Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0])); [EOL]     Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1])); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(And.class, This.class); [EOL]     Assert.assertEquals(2, typeVarAssigns.size()); [EOL]     Assert.assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[0])); [EOL]     Assert.assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[1])); [EOL]     typeVarAssigns = TypeUtils.getTypeArguments(Thing.class, Other.class); [EOL]     Assert.assertEquals(2, typeVarAssigns.size()); [EOL]     Assert.assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(getClass().getTypeParameters()[0])); [EOL]     Assert.assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(Other.class.getTypeParameters()[0])); [EOL] } <line_num>: 471,518
@Test [EOL] public void testDetermineTypeVariableAssignments() throws SecurityException, NoSuchFieldException, NoSuchMethodException { [EOL]     final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable").getGenericType(); [EOL]     final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType); [EOL]     final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; [EOL]     Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); [EOL]     Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar)); [EOL] } <line_num>: 535,546
@Test [EOL] public void testGetRawType() throws SecurityException, NoSuchFieldException { [EOL]     final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField("stringParent").getGenericType(); [EOL]     final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField("integerParent").getGenericType(); [EOL]     final Type foosFieldType = GenericTypeHolder.class.getDeclaredField("foos").getGenericType(); [EOL]     final Type genericParentT = GenericParent.class.getTypeParameters()[0]; [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); [EOL]     Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); [EOL]     Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); [EOL] } <line_num>: 548,572
@Test [EOL] public void testIsArrayTypeClasses() { [EOL]     Assert.assertTrue(TypeUtils.isArrayType(boolean[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(byte[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(short[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(int[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(char[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(long[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(float[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(double[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(Object[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(String[].class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(boolean.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(byte.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(short.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(int.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(char.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(long.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(float.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(double.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(Object.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(String.class)); [EOL] } <line_num>: 574,597
@Test [EOL] public void testIsArrayGenericTypes() throws Exception { [EOL]     final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(types[0])); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(types[1])); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(types[2])); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(types[3])); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(types[4])); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(types[5])); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(types[6])); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(types[7])); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(types[8])); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(types[9])); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(types[10])); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(types[11])); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(types[12])); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(types[13])); [EOL] } <line_num>: 599,621
@Test [EOL] public void testGetPrimitiveArrayComponentType() throws Exception { [EOL]     Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class)); [EOL]     Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class)); [EOL]     Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class)); [EOL]     Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class)); [EOL]     Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class)); [EOL]     Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class)); [EOL]     Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class)); [EOL]     Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(byte.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(short.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(int.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(char.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(long.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(float.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(double.class)); [EOL] } <line_num>: 623,642
@Test [EOL] public void testGetArrayComponentType() throws Exception { [EOL]     final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class); [EOL]     final Type[] types = method.getGenericParameterTypes(); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); [EOL]     Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); [EOL]     Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); [EOL]     Assert.assertEquals(types[2], TypeUtils.getArrayComponentType(types[9])); [EOL]     Assert.assertEquals(types[3], TypeUtils.getArrayComponentType(types[10])); [EOL]     Assert.assertEquals(types[4], TypeUtils.getArrayComponentType(types[11])); [EOL]     Assert.assertEquals(types[5], TypeUtils.getArrayComponentType(types[12])); [EOL]     Assert.assertEquals(types[6], TypeUtils.getArrayComponentType(types[13])); [EOL] } <line_num>: 644,666
@Test [EOL] public void testLang820() throws Exception { [EOL]     final Type[] typeArray = { String.class, String.class }; [EOL]     final Type[] expectedArray = { String.class }; [EOL]     Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray)); [EOL] } <line_num>: 668,673
public static <G extends Comparable<G>> G stub() { [EOL]     return null; [EOL] } <line_num>: 677,679
public static <G extends Comparable<? super G>> G stub2() { [EOL]     return null; [EOL] } <line_num>: 681,683
public static <T extends Comparable<? extends T>> T stub3() { [EOL]     return null; [EOL] } <line_num>: 685,687
