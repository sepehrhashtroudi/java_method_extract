public TestBean() { [EOL]     toString = "()"; [EOL] } <line_num>: 39,41
public TestBean(final int i) { [EOL]     toString = "(int)"; [EOL] } <line_num>: 43,45
public TestBean(final Integer i) { [EOL]     toString = "(Integer)"; [EOL] } <line_num>: 47,49
public TestBean(final double d) { [EOL]     toString = "(double)"; [EOL] } <line_num>: 51,53
public TestBean(final String s) { [EOL]     toString = "(String)"; [EOL] } <line_num>: 55,57
public TestBean(final Object o) { [EOL]     toString = "(Object)"; [EOL] } <line_num>: 59,61
@SuppressWarnings("unused") [EOL] public PrivateClass() { [EOL] } <line_num>: 70,72
public ConstructorUtilsTest() { [EOL]     classCache = new HashMap<Class<?>, Class<?>[]>(); [EOL] } <line_num>: 77,79
@Override [EOL] public String toString() { [EOL]     return toString; [EOL] } <line_num>: 63,66
@Before [EOL] public void setUp() throws Exception { [EOL]     classCache.clear(); [EOL] } <line_num>: 82,85
@Test [EOL] public void testConstructor() throws Exception { [EOL]     assertNotNull(MethodUtils.class.newInstance()); [EOL] } <line_num>: 87,90
@Test [EOL] public void testInvokeConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(int)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL] } <line_num>: 92,113
@Test [EOL] public void testInvokeExactConstructor() throws Exception { [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]     assertEquals("()", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString()); [EOL]     assertEquals("(String)", ConstructorUtils.invokeExactConstructor(TestBean.class, "").toString()); [EOL]     assertEquals("(Object)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString()); [EOL]     assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]     assertEquals("(double)", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString()); [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] } <line_num>: 115,149
@Test [EOL] public void testGetAccessibleConstructor() throws Exception { [EOL]     assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY))); [EOL]     assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY))); [EOL] } <line_num>: 151,157
@Test [EOL] public void testGetAccessibleConstructorFromDescription() throws Exception { [EOL]     assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class, ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL] } <line_num>: 159,165
@Test [EOL] public void testGetMatchingAccessibleMethod() throws Exception { [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(String.class), singletonArray(String.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Object.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL] } <line_num>: 167,207
@Test [EOL] public void testNullArgument() { [EOL]     expectMatchingAccessibleConstructorParameterTypes(MutableObject.class, singletonArray(null), singletonArray(Object.class)); [EOL] } <line_num>: 209,213
private void expectMatchingAccessibleConstructorParameterTypes(final Class<?> cls, final Class<?>[] requestTypes, final Class<?>[] actualTypes) { [EOL]     final Constructor<?> c = ConstructorUtils.getMatchingAccessibleConstructor(cls, requestTypes); [EOL]     assertTrue(toString(c.getParameterTypes()) + " not equals " + toString(actualTypes), Arrays.equals(actualTypes, c.getParameterTypes())); [EOL] } <line_num>: 215,222
private String toString(final Class<?>[] c) { [EOL]     return Arrays.asList(c).toString(); [EOL] } <line_num>: 224,226
private Class<?>[] singletonArray(final Class<?> c) { [EOL]     Class<?>[] result = classCache.get(c); [EOL]     if (result == null) { [EOL]         result = new Class[] { c }; [EOL]         classCache.put(c, result); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 228,235
