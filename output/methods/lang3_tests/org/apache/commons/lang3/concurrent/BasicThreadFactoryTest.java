@Before [EOL] public void setUp() throws Exception { [EOL]     builder = new BasicThreadFactory.Builder(); [EOL] } <line_num>: 45,48
private void checkFactoryDefaults(final BasicThreadFactory factory) { [EOL]     assertNull("Got a naming pattern", factory.getNamingPattern()); [EOL]     assertNull("Got an exception handler", factory.getUncaughtExceptionHandler()); [EOL]     assertNull("Got a priority", factory.getPriority()); [EOL]     assertNull("Got a daemon flag", factory.getDaemonFlag()); [EOL]     assertNotNull("No wrapped factory", factory.getWrappedFactory()); [EOL] } <line_num>: 55,62
@Test [EOL] public void testBuildDefaults() { [EOL]     final BasicThreadFactory factory = builder.build(); [EOL]     checkFactoryDefaults(factory); [EOL] } <line_num>: 67,71
@Test(expected = NullPointerException.class) [EOL] public void testBuildNamingPatternNull() { [EOL]     builder.namingPattern(null); [EOL] } <line_num>: 76,79
@Test(expected = NullPointerException.class) [EOL] public void testBuildWrappedFactoryNull() { [EOL]     builder.wrappedFactory(null); [EOL] } <line_num>: 84,87
@Test(expected = NullPointerException.class) [EOL] public void testBuildUncaughtExceptionHandlerNull() { [EOL]     builder.uncaughtExceptionHandler(null); [EOL] } <line_num>: 92,95
@Test [EOL] public void testBuilderReset() { [EOL]     final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]     final Thread.UncaughtExceptionHandler exHandler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     EasyMock.replay(wrappedFactory, exHandler); [EOL]     builder.namingPattern(PATTERN).daemon(true).priority(Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler).wrappedFactory(wrappedFactory); [EOL]     builder.reset(); [EOL]     final BasicThreadFactory factory = builder.build(); [EOL]     checkFactoryDefaults(factory); [EOL]     assertNotSame("Wrapped factory not reset", wrappedFactory, factory.getWrappedFactory()); [EOL]     EasyMock.verify(wrappedFactory, exHandler); [EOL] } <line_num>: 100,115
@Test [EOL] public void testBuilderResetAfterBuild() { [EOL]     builder.wrappedFactory(EasyMock.createNiceMock(ThreadFactory.class)).namingPattern(PATTERN).daemon(true).build(); [EOL]     checkFactoryDefaults(builder.build()); [EOL] } <line_num>: 120,125
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] } <line_num>: 130,148
@Test [EOL] public void testNewThreadNoNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final String name = "unchangedThreadName"; [EOL]     final Thread t = new Thread(name); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Name was changed", name, t.getName()); [EOL]     EasyMock.verify(wrapped, r); [EOL] } <line_num>: 154,166
private void checkDaemonFlag(final boolean flag) { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).daemon(flag).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertTrue("Wrong daemon flag", flag == t.isDaemon()); [EOL]     EasyMock.verify(wrapped, r); [EOL] } <line_num>: 173,184
@Test [EOL] public void testNewThreadDaemonTrue() { [EOL]     checkDaemonFlag(true); [EOL] } <line_num>: 189,192
@Test [EOL] public void testNewThreadDaemonFalse() { [EOL]     checkDaemonFlag(false); [EOL] } <line_num>: 197,200
@Test [EOL] public void testNewThreadNoDaemonFlag() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r1 = EasyMock.createMock(Runnable.class); [EOL]     final Runnable r2 = EasyMock.createMock(Runnable.class); [EOL]     final Thread t1 = new Thread(); [EOL]     final Thread t2 = new Thread(); [EOL]     t1.setDaemon(true); [EOL]     EasyMock.expect(wrapped.newThread(r1)).andReturn(t1); [EOL]     EasyMock.expect(wrapped.newThread(r2)).andReturn(t2); [EOL]     EasyMock.replay(wrapped, r1, r2); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).build(); [EOL]     assertSame("Wrong thread 1", t1, factory.newThread(r1)); [EOL]     assertTrue("No daemon thread", t1.isDaemon()); [EOL]     assertSame("Wrong thread 2", t2, factory.newThread(r2)); [EOL]     assertFalse("A daemon thread", t2.isDaemon()); [EOL]     EasyMock.verify(wrapped, r1, r2); [EOL] } <line_num>: 206,223
@Test [EOL] public void testNewThreadPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final int priority = Thread.NORM_PRIORITY + 1; [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", priority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] } <line_num>: 228,241
@Test [EOL] public void testNewThreadNoPriority() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int orgPriority = Thread.NORM_PRIORITY + 1; [EOL]     final Thread t = new Thread(); [EOL]     t.setPriority(orgPriority); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong priority", orgPriority, t.getPriority()); [EOL]     EasyMock.verify(wrapped, r); [EOL] } <line_num>: 247,260
@Test [EOL] public void testNewThreadExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] } <line_num>: 265,280
@Test [EOL] public void testNewThreadNoExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     t.setUncaughtExceptionHandler(handler); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] } <line_num>: 286,301
