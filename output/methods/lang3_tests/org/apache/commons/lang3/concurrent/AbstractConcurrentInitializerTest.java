@Test [EOL] public void testGet() throws ConcurrentException { [EOL]     assertNotNull("No managed object", createInitializer().get()); [EOL] } <line_num>: 43,46
@Test [EOL] public void testGetMultipleTimes() throws ConcurrentException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final Object obj = initializer.get(); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         assertEquals("Got different object at " + i, obj, initializer.get()); [EOL]     } [EOL] } <line_num>: 52,59
@Override [EOL] public void run() { [EOL]     try { [EOL]         startLatch.await(); [EOL]         object = initializer.get(); [EOL]     } catch (final InterruptedException iex) { [EOL]     } catch (final ConcurrentException cex) { [EOL]         object = cex; [EOL]     } [EOL] } <line_num>: 74,86
@Test [EOL] public void testGetConcurrent() throws ConcurrentException, InterruptedException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final int threadCount = 20; [EOL]     final CountDownLatch startLatch = new CountDownLatch(1); [EOL]     class GetThread extends Thread { [EOL]  [EOL]         Object object; [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 startLatch.await(); [EOL]                 object = initializer.get(); [EOL]             } catch (final InterruptedException iex) { [EOL]             } catch (final ConcurrentException cex) { [EOL]                 object = cex; [EOL]             } [EOL]         } [EOL]     } [EOL]     final GetThread[] threads = new GetThread[threadCount]; [EOL]     for (int i = 0; i < threadCount; i++) { [EOL]         threads[i] = new GetThread(); [EOL]         threads[i].start(); [EOL]     } [EOL]     startLatch.countDown(); [EOL]     for (final Thread t : threads) { [EOL]         t.join(); [EOL]     } [EOL]     final Object managedObject = initializer.get(); [EOL]     for (final GetThread t : threads) { [EOL]         assertEquals("Wrong object", managedObject, t.object); [EOL]     } [EOL] } <line_num>: 65,106
protected abstract ConcurrentInitializer<Object> createInitializer(); <line_num>: 114,114
