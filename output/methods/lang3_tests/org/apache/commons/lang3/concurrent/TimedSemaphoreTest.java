public TimedSemaphoreTestImpl(final long timePeriod, final TimeUnit timeUnit, final int limit) { [EOL]     super(timePeriod, timeUnit, limit); [EOL] } <line_num>: 383,386
public TimedSemaphoreTestImpl(final ScheduledExecutorService service, final long timePeriod, final TimeUnit timeUnit, final int limit) { [EOL]     super(service, timePeriod, timeUnit, limit); [EOL] } <line_num>: 388,391
public SemaphoreThread(final TimedSemaphore b, final CountDownLatch l, final int c, final int lc) { [EOL]     semaphore = b; [EOL]     latch = l; [EOL]     count = c; [EOL]     latchCount = lc; [EOL] } <line_num>: 451,456
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] } <line_num>: 52,69
@Test(expected = IllegalArgumentException.class) [EOL] public void testInitInvalidPeriod() { [EOL]     new TimedSemaphore(0L, UNIT, LIMIT); [EOL] } <line_num>: 75,78
@Test [EOL] public void testInitDefaultService() { [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledThreadPoolExecutor exec = (ScheduledThreadPoolExecutor) semaphore.getExecutorService(); [EOL]     assertFalse("Wrong periodic task policy", exec.getContinueExistingPeriodicTasksAfterShutdownPolicy()); [EOL]     assertFalse("Wrong delayed task policy", exec.getExecuteExistingDelayedTasksAfterShutdownPolicy()); [EOL]     assertFalse("Already shutdown", exec.isShutdown()); [EOL]     semaphore.shutdown(); [EOL] } <line_num>: 84,95
@Test [EOL] public void testStartTimer() throws InterruptedException { [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD, UNIT, LIMIT); [EOL]     final ScheduledFuture<?> future = semaphore.startTimer(); [EOL]     assertNotNull("No future returned", future); [EOL]     Thread.sleep(PERIOD); [EOL]     final int trials = 10; [EOL]     int count = 0; [EOL]     do { [EOL]         Thread.sleep(PERIOD); [EOL]         if (count++ > trials) { [EOL]             fail("endOfPeriod() not called!"); [EOL]         } [EOL]     } while (semaphore.getPeriodEnds() <= 0); [EOL]     semaphore.shutdown(); [EOL] } <line_num>: 100,116
@Test [EOL] public void testShutdownOwnExecutor() { [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); [EOL]     semaphore.shutdown(); [EOL]     assertTrue("Not shutdown", semaphore.isShutdown()); [EOL]     assertTrue("Executor not shutdown", semaphore.getExecutorService().isShutdown()); [EOL] } <line_num>: 122,129
@Test [EOL] public void testShutdownSharedExecutorNoTask() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     semaphore.shutdown(); [EOL]     assertTrue("Not shutdown", semaphore.isShutdown()); [EOL]     EasyMock.verify(service); [EOL] } <line_num>: 135,145
private void prepareStartTimer(final ScheduledExecutorService service, final ScheduledFuture<?> future) { [EOL]     service.scheduleAtFixedRate((Runnable) EasyMock.anyObject(), EasyMock.eq(PERIOD), EasyMock.eq(PERIOD), EasyMock.eq(UNIT)); [EOL]     EasyMock.expectLastCall().andReturn(future); [EOL] } <line_num>: 153,158
@Test [EOL] public void testShutdownSharedExecutorTask() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, LIMIT); [EOL]     semaphore.acquire(); [EOL]     semaphore.shutdown(); [EOL]     assertTrue("Not shutdown", semaphore.isShutdown()); [EOL]     EasyMock.verify(service, future); [EOL] } <line_num>: 164,178
@Test [EOL] public void testShutdownMultipleTimes() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, LIMIT); [EOL]     semaphore.acquire(); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         semaphore.shutdown(); [EOL]     } [EOL]     EasyMock.verify(service, future); [EOL] } <line_num>: 183,198
@Test [EOL] public void testAcquireLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final int count = 10; [EOL]     final CountDownLatch latch = new CountDownLatch(count - 1); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, 1); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count - 1); [EOL]     semaphore.setLimit(count - 1); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     assertEquals("Wrong semaphore count", count - 1, semaphore.getAcquireCount()); [EOL]     semaphore.endOfPeriod(); [EOL]     t.join(); [EOL]     assertEquals("Wrong semaphore count (2)", 1, semaphore.getAcquireCount()); [EOL]     assertEquals("Wrong acquire() count", count - 1, semaphore.getLastAcquiresPerPeriod()); [EOL]     EasyMock.verify(service, future); [EOL] } <line_num>: 203,232
@Test [EOL] public void testAcquireMultipleThreads() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, 1); [EOL]     semaphore.latch = new CountDownLatch(1); [EOL]     final int count = 10; [EOL]     final SemaphoreThread[] threads = new SemaphoreThread[count]; [EOL]     for (int i = 0; i < count; i++) { [EOL]         threads[i] = new SemaphoreThread(semaphore, null, 1, 0); [EOL]         threads[i].start(); [EOL]     } [EOL]     for (int i = 0; i < count; i++) { [EOL]         semaphore.latch.await(); [EOL]         assertEquals("Wrong count", 1, semaphore.getAcquireCount()); [EOL]         semaphore.latch = new CountDownLatch(1); [EOL]         semaphore.endOfPeriod(); [EOL]         assertEquals("Wrong acquire count", 1, semaphore.getLastAcquiresPerPeriod()); [EOL]     } [EOL]     for (int i = 0; i < count; i++) { [EOL]         threads[i].join(); [EOL]     } [EOL]     EasyMock.verify(service, future); [EOL] } <line_num>: 240,268
@Test [EOL] public void testAcquireNoLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD, UNIT, TimedSemaphore.NO_LIMIT); [EOL]     final int count = 1000; [EOL]     final CountDownLatch latch = new CountDownLatch(count); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     EasyMock.verify(service, future); [EOL] } <line_num>: 275,290
@Test(expected = IllegalStateException.class) [EOL] public void testPassAfterShutdown() throws InterruptedException { [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); [EOL]     semaphore.shutdown(); [EOL]     semaphore.acquire(); [EOL] } <line_num>: 295,300
@Test [EOL] public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]     final int count = 1000; [EOL]     final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]     semaphore.setLimit(count / 4); [EOL]     final CountDownLatch latch = new CountDownLatch(count); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     semaphore.shutdown(); [EOL]     assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); [EOL] } <line_num>: 308,320
@Test [EOL] public void testGetAverageCallsPerPeriod() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     semaphore.acquire(); [EOL]     semaphore.endOfPeriod(); [EOL]     assertEquals("Wrong average (1)", 1.0, semaphore.getAverageCallsPerPeriod(), .005); [EOL]     semaphore.acquire(); [EOL]     semaphore.acquire(); [EOL]     semaphore.endOfPeriod(); [EOL]     assertEquals("Wrong average (2)", 1.5, semaphore.getAverageCallsPerPeriod(), .005); [EOL]     EasyMock.verify(service, future); [EOL] } <line_num>: 325,344
@Test [EOL] public void testGetAvailablePermits() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     for (int i = 0; i < LIMIT; i++) { [EOL]         assertEquals("Wrong available count at " + i, LIMIT - i, semaphore.getAvailablePermits()); [EOL]         semaphore.acquire(); [EOL]     } [EOL]     semaphore.endOfPeriod(); [EOL]     assertEquals("Wrong available count in new period", LIMIT, semaphore.getAvailablePermits()); [EOL]     EasyMock.verify(service, future); [EOL] } <line_num>: 349,367
public int getPeriodEnds() { [EOL]     synchronized (this) { [EOL]         return periodEnds; [EOL]     } [EOL] } <line_num>: 398,402
@Override [EOL] public synchronized void acquire() throws InterruptedException { [EOL]     super.acquire(); [EOL]     if (latch != null) { [EOL]         latch.countDown(); [EOL]     } [EOL] } <line_num>: 407,413
@Override [EOL] protected synchronized void endOfPeriod() { [EOL]     super.endOfPeriod(); [EOL]     periodEnds++; [EOL] } <line_num>: 418,422
@Override [EOL] protected ScheduledFuture<?> startTimer() { [EOL]     return schedFuture != null ? schedFuture : super.startTimer(); [EOL] } <line_num>: 427,430
@Override [EOL] public void run() { [EOL]     try { [EOL]         for (int i = 0; i < count; i++) { [EOL]             semaphore.acquire(); [EOL]             if (i < latchCount) { [EOL]                 latch.countDown(); [EOL]             } [EOL]         } [EOL]     } catch (final InterruptedException iex) { [EOL]         Thread.currentThread().interrupt(); [EOL]     } [EOL] } <line_num>: 463,476
