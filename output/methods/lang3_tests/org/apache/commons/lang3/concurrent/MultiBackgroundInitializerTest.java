@Before [EOL] public void setUp() throws Exception { [EOL]     initializer = new MultiBackgroundInitializer(); [EOL] } <line_num>: 45,48
private void checkChild(final BackgroundInitializer<?> child, final ExecutorService expExec) throws ConcurrentException { [EOL]     final ChildBackgroundInitializer cinit = (ChildBackgroundInitializer) child; [EOL]     final Integer result = cinit.get(); [EOL]     assertEquals("Wrong result", 1, result.intValue()); [EOL]     assertEquals("Wrong number of executions", 1, cinit.initializeCalls); [EOL]     if (expExec != null) { [EOL]         assertEquals("Wrong executor service", expExec, cinit.currentExecutor); [EOL]     } [EOL] } <line_num>: 59,69
@Test(expected = IllegalArgumentException.class) [EOL] public void testAddInitializerNullName() { [EOL]     initializer.addInitializer(null, new ChildBackgroundInitializer()); [EOL] } <line_num>: 75,78
@Test(expected = IllegalArgumentException.class) [EOL] public void testAddInitializerNullInit() { [EOL]     initializer.addInitializer(CHILD_INIT, null); [EOL] } <line_num>: 84,87
@Test [EOL] public void testInitializeNoChildren() throws ConcurrentException { [EOL]     assertTrue("Wrong result of start()", initializer.start()); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertTrue("Got child initializers", res.initializerNames().isEmpty()); [EOL]     assertTrue("Executor not shutdown", initializer.getActiveExecutor().isShutdown()); [EOL] } <line_num>: 92,100
private MultiBackgroundInitializer.MultiBackgroundInitializerResults checkInitialize() throws ConcurrentException { [EOL]     final int count = 5; [EOL]     for (int i = 0; i < count; i++) { [EOL]         initializer.addInitializer(CHILD_INIT + i, new ChildBackgroundInitializer()); [EOL]     } [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertEquals("Wrong number of child initializers", count, res.initializerNames().size()); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final String key = CHILD_INIT + i; [EOL]         assertTrue("Name not found: " + key, res.initializerNames().contains(key)); [EOL]         assertEquals("Wrong result object", Integer.valueOf(1), res.getResultObject(key)); [EOL]         assertFalse("Exception flag", res.isException(key)); [EOL]         assertNull("Got an exception", res.getException(key)); [EOL]         checkChild(res.getInitializer(key), initializer.getActiveExecutor()); [EOL]     } [EOL]     return res; [EOL] } <line_num>: 108,131
@Test [EOL] public void testInitializeTempExec() throws ConcurrentException { [EOL]     checkInitialize(); [EOL]     assertTrue("Executor not shutdown", initializer.getActiveExecutor().isShutdown()); [EOL] } <line_num>: 136,141
@Test [EOL] public void testInitializeExternalExec() throws ConcurrentException { [EOL]     final ExecutorService exec = Executors.newCachedThreadPool(); [EOL]     try { [EOL]         initializer = new MultiBackgroundInitializer(exec); [EOL]         checkInitialize(); [EOL]         assertEquals("Wrong executor", exec, initializer.getActiveExecutor()); [EOL]         assertFalse("Executor was shutdown", exec.isShutdown()); [EOL]     } finally { [EOL]         exec.shutdown(); [EOL]     } [EOL] } <line_num>: 146,158
@Test [EOL] public void testInitializeChildWithExecutor() throws ConcurrentException { [EOL]     final String initExec = "childInitializerWithExecutor"; [EOL]     final ExecutorService exec = Executors.newSingleThreadExecutor(); [EOL]     try { [EOL]         final ChildBackgroundInitializer c1 = new ChildBackgroundInitializer(); [EOL]         final ChildBackgroundInitializer c2 = new ChildBackgroundInitializer(); [EOL]         c2.setExternalExecutor(exec); [EOL]         initializer.addInitializer(CHILD_INIT, c1); [EOL]         initializer.addInitializer(initExec, c2); [EOL]         initializer.start(); [EOL]         initializer.get(); [EOL]         checkChild(c1, initializer.getActiveExecutor()); [EOL]         checkChild(c2, exec); [EOL]     } finally { [EOL]         exec.shutdown(); [EOL]     } [EOL] } <line_num>: 164,181
@Test [EOL] public void testAddInitializerAfterStart() throws ConcurrentException { [EOL]     initializer.start(); [EOL]     try { [EOL]         initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         fail("Could add initializer after start()!"); [EOL]     } catch (final IllegalStateException istex) { [EOL]         initializer.get(); [EOL]     } [EOL] } <line_num>: 187,197
@Test(expected = NoSuchElementException.class) [EOL] public void testResultGetInitializerUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.getInitializer("unknown"); [EOL] } <line_num>: 203,207
@Test(expected = NoSuchElementException.class) [EOL] public void testResultGetResultObjectUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.getResultObject("unknown"); [EOL] } <line_num>: 213,217
@Test(expected = NoSuchElementException.class) [EOL] public void testResultGetExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.getException("unknown"); [EOL] } <line_num>: 223,227
@Test(expected = NoSuchElementException.class) [EOL] public void testResultIsExceptionUnknown() throws ConcurrentException { [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); [EOL]     res.isException("unknown"); [EOL] } <line_num>: 233,237
@Test(expected = UnsupportedOperationException.class) [EOL] public void testResultInitializerNamesModify() throws ConcurrentException { [EOL]     checkInitialize(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     final Iterator<String> it = res.initializerNames().iterator(); [EOL]     it.next(); [EOL]     it.remove(); [EOL] } <line_num>: 242,250
@Test [EOL] public void testInitializeRuntimeEx() { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     child.ex = new RuntimeException(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     try { [EOL]         initializer.get(); [EOL]         fail("Runtime exception not thrown!"); [EOL]     } catch (final Exception ex) { [EOL]         assertEquals("Wrong exception", child.ex, ex); [EOL]     } [EOL] } <line_num>: 256,268
@Test [EOL] public void testInitializeEx() throws ConcurrentException { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     child.ex = new Exception(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertTrue("No exception flag", res.isException(CHILD_INIT)); [EOL]     assertNull("Got a results object", res.getResultObject(CHILD_INIT)); [EOL]     final ConcurrentException cex = res.getException(CHILD_INIT); [EOL]     assertEquals("Wrong cause", child.ex, cex.getCause()); [EOL] } <line_num>: 274,286
@Test [EOL] public void testInitializeResultsIsSuccessfulTrue() throws ConcurrentException { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertTrue("Wrong success flag", res.isSuccessful()); [EOL] } <line_num>: 292,301
@Test [EOL] public void testInitializeResultsIsSuccessfulFalse() throws ConcurrentException { [EOL]     final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]     child.ex = new Exception(); [EOL]     initializer.addInitializer(CHILD_INIT, child); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     assertFalse("Wrong success flag", res.isSuccessful()); [EOL] } <line_num>: 307,317
@Test [EOL] public void testInitializeNested() throws ConcurrentException { [EOL]     final String nameMulti = "multiChildInitializer"; [EOL]     initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]     final MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer(); [EOL]     final int count = 3; [EOL]     for (int i = 0; i < count; i++) { [EOL]         mi2.addInitializer(CHILD_INIT + i, new ChildBackgroundInitializer()); [EOL]     } [EOL]     initializer.addInitializer(nameMulti, mi2); [EOL]     initializer.start(); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get(); [EOL]     final ExecutorService exec = initializer.getActiveExecutor(); [EOL]     checkChild(res.getInitializer(CHILD_INIT), exec); [EOL]     final MultiBackgroundInitializer.MultiBackgroundInitializerResults res2 = (MultiBackgroundInitializer.MultiBackgroundInitializerResults) res.getResultObject(nameMulti); [EOL]     assertEquals("Wrong number of initializers", count, res2.initializerNames().size()); [EOL]     for (int i = 0; i < count; i++) { [EOL]         checkChild(res2.getInitializer(CHILD_INIT + i), exec); [EOL]     } [EOL]     assertTrue("Executor not shutdown", exec.isShutdown()); [EOL] } <line_num>: 323,349
@Override [EOL] protected Integer initialize() throws Exception { [EOL]     currentExecutor = getActiveExecutor(); [EOL]     initializeCalls++; [EOL]     if (ex != null) { [EOL]         throw ex; [EOL]     } [EOL]     return Integer.valueOf(initializeCalls); [EOL] } <line_num>: 369,379
