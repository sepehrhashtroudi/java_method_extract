@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentExceptionCauseUnchecked() { [EOL]     new ConcurrentException(new RuntimeException()); [EOL] } <line_num>: 44,47
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentExceptionCauseError() { [EOL]     new ConcurrentException("An error", new Error()); [EOL] } <line_num>: 52,55
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentExceptionCauseNull() { [EOL]     new ConcurrentException(null); [EOL] } <line_num>: 60,63
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentRuntimeExceptionCauseUnchecked() { [EOL]     new ConcurrentRuntimeException(new RuntimeException()); [EOL] } <line_num>: 68,71
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentRuntimeExceptionCauseError() { [EOL]     new ConcurrentRuntimeException("An error", new Error()); [EOL] } <line_num>: 76,79
@Test(expected = IllegalArgumentException.class) [EOL] public void testConcurrentRuntimeExceptionCauseNull() { [EOL]     new ConcurrentRuntimeException(null); [EOL] } <line_num>: 84,87
@Test [EOL] public void testExtractCauseNull() { [EOL]     assertNull("Non null result", ConcurrentUtils.extractCause(null)); [EOL] } <line_num>: 92,95
@Test [EOL] public void testExtractCauseNullCause() { [EOL]     assertNull("Non null result", ConcurrentUtils.extractCause(new ExecutionException("Test", null))); [EOL] } <line_num>: 100,104
@Test [EOL] public void testExtractCauseError() { [EOL]     final Error err = new AssertionError("Test"); [EOL]     try { [EOL]         ConcurrentUtils.extractCause(new ExecutionException(err)); [EOL]         fail("Error not thrown!"); [EOL]     } catch (final Error e) { [EOL]         assertEquals("Wrong error", err, e); [EOL]     } [EOL] } <line_num>: 109,118
@Test [EOL] public void testExtractCauseUncheckedException() { [EOL]     final RuntimeException rex = new RuntimeException("Test"); [EOL]     try { [EOL]         ConcurrentUtils.extractCause(new ExecutionException(rex)); [EOL]         fail("Runtime exception not thrown!"); [EOL]     } catch (final RuntimeException r) { [EOL]         assertEquals("Wrong exception", rex, r); [EOL]     } [EOL] } <line_num>: 123,132
@Test [EOL] public void testExtractCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] } <line_num>: 137,143
@Test [EOL] public void testExtractCauseUncheckedNull() { [EOL]     assertNull("Non null result", ConcurrentUtils.extractCauseUnchecked(null)); [EOL] } <line_num>: 148,151
@Test [EOL] public void testExtractCauseUncheckedNullCause() { [EOL]     assertNull("Non null result", ConcurrentUtils.extractCauseUnchecked(new ExecutionException("Test", null))); [EOL] } <line_num>: 156,160
@Test [EOL] public void testExtractCauseUncheckedError() { [EOL]     final Error err = new AssertionError("Test"); [EOL]     try { [EOL]         ConcurrentUtils.extractCauseUnchecked(new ExecutionException(err)); [EOL]         fail("Error not thrown!"); [EOL]     } catch (final Error e) { [EOL]         assertEquals("Wrong error", err, e); [EOL]     } [EOL] } <line_num>: 165,174
@Test [EOL] public void testExtractCauseUncheckedUncheckedException() { [EOL]     final RuntimeException rex = new RuntimeException("Test"); [EOL]     try { [EOL]         ConcurrentUtils.extractCauseUnchecked(new ExecutionException(rex)); [EOL]         fail("Runtime exception not thrown!"); [EOL]     } catch (final RuntimeException r) { [EOL]         assertEquals("Wrong exception", rex, r); [EOL]     } [EOL] } <line_num>: 179,188
@Test [EOL] public void testExtractCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     final ConcurrentRuntimeException cex = ConcurrentUtils.extractCauseUnchecked(new ExecutionException(ex)); [EOL]     assertSame("Wrong cause", ex, cex.getCause()); [EOL] } <line_num>: 193,199
@Test [EOL] public void testHandleCauseError() throws ConcurrentException { [EOL]     final Error err = new AssertionError("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCause(new ExecutionException(err)); [EOL]         fail("Error not thrown!"); [EOL]     } catch (final Error e) { [EOL]         assertEquals("Wrong error", err, e); [EOL]     } [EOL] } <line_num>: 204,213
@Test [EOL] public void testHandleCauseUncheckedException() throws ConcurrentException { [EOL]     final RuntimeException rex = new RuntimeException("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCause(new ExecutionException(rex)); [EOL]         fail("Runtime exception not thrown!"); [EOL]     } catch (final RuntimeException r) { [EOL]         assertEquals("Wrong exception", rex, r); [EOL]     } [EOL] } <line_num>: 218,227
@Test [EOL] public void testHandleCauseChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]         fail("ConcurrentException not thrown!"); [EOL]     } catch (final ConcurrentException cex) { [EOL]         assertEquals("Wrong cause", ex, cex.getCause()); [EOL]     } [EOL] } <line_num>: 232,241
@Test [EOL] public void testHandleCauseNull() throws ConcurrentException { [EOL]     ConcurrentUtils.handleCause(null); [EOL]     ConcurrentUtils.handleCause(new ExecutionException("Test", null)); [EOL] } <line_num>: 248,252
@Test [EOL] public void testHandleCauseUncheckedError() { [EOL]     final Error err = new AssertionError("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(err)); [EOL]         fail("Error not thrown!"); [EOL]     } catch (final Error e) { [EOL]         assertEquals("Wrong error", err, e); [EOL]     } [EOL] } <line_num>: 257,266
@Test [EOL] public void testHandleCauseUncheckedUncheckedException() { [EOL]     final RuntimeException rex = new RuntimeException("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(rex)); [EOL]         fail("Runtime exception not thrown!"); [EOL]     } catch (final RuntimeException r) { [EOL]         assertEquals("Wrong exception", rex, r); [EOL]     } [EOL] } <line_num>: 271,280
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] } <line_num>: 285,294
@Test [EOL] public void testHandleCauseUncheckedNull() { [EOL]     ConcurrentUtils.handleCauseUnchecked(null); [EOL]     ConcurrentUtils.handleCauseUnchecked(new ExecutionException("Test", null)); [EOL] } <line_num>: 301,306
@Test [EOL] public void testInitializeNull() throws ConcurrentException { [EOL]     assertNull("Got a result", ConcurrentUtils.initialize(null)); [EOL] } <line_num>: 312,315
@Test [EOL] public void testInitialize() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Object result = new Object(); [EOL]     EasyMock.expect(init.get()).andReturn(result); [EOL]     EasyMock.replay(init); [EOL]     assertSame("Wrong result object", result, ConcurrentUtils.initialize(init)); [EOL]     EasyMock.verify(init); [EOL] } <line_num>: 320,332
@Test [EOL] public void testInitializeUncheckedNull() { [EOL]     assertNull("Got a result", ConcurrentUtils.initializeUnchecked(null)); [EOL] } <line_num>: 337,340
@Test [EOL] public void testInitializeUnchecked() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Object result = new Object(); [EOL]     EasyMock.expect(init.get()).andReturn(result); [EOL]     EasyMock.replay(init); [EOL]     assertSame("Wrong result object", result, ConcurrentUtils.initializeUnchecked(init)); [EOL]     EasyMock.verify(init); [EOL] } <line_num>: 345,357
@Test [EOL] public void testInitializeUncheckedEx() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception cause = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.initializeUnchecked(init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertSame("Wrong cause", cause, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] } <line_num>: 362,378
@Test [EOL] public void testConstantFuture_Integer() throws Exception { [EOL]     final Integer value = Integer.valueOf(5); [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] } <line_num>: 384,395
@Test [EOL] public void testConstantFuture_null() throws Exception { [EOL]     final Integer value = null; [EOL]     final Future<Integer> test = ConcurrentUtils.constantFuture(value); [EOL]     assertTrue(test.isDone()); [EOL]     assertSame(value, test.get()); [EOL]     assertSame(value, test.get(1000, TimeUnit.SECONDS)); [EOL]     assertSame(value, test.get(1000, null)); [EOL]     assertFalse(test.isCancelled()); [EOL]     assertFalse(test.cancel(true)); [EOL]     assertFalse(test.cancel(false)); [EOL] } <line_num>: 400,411
@Test [EOL] public void testPutIfAbsentKeyPresent() { [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.putIfAbsent(map, key, 0)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL] } <line_num>: 417,426
@Test [EOL] public void testPutIfAbsentKeyNotPresent() { [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.putIfAbsent(map, key, value)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL] } <line_num>: 431,439
@Test [EOL] public void testPutIfAbsentNullMap() { [EOL]     assertNull("Wrong result", ConcurrentUtils.putIfAbsent(null, "test", 100)); [EOL] } <line_num>: 444,448
@Test [EOL] public void testCreateIfAbsentKeyPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     EasyMock.replay(init); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     map.put(key, value); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] } <line_num>: 453,468
@Test [EOL] public void testCreateIfAbsentKeyNotPresent() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     EasyMock.expect(init.get()).andReturn(value); [EOL]     EasyMock.replay(init); [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL]     EasyMock.verify(init); [EOL] } <line_num>: 473,488
@Test [EOL] public void testCreateIfAbsentNullMap() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     EasyMock.replay(init); [EOL]     assertNull("Wrong result", ConcurrentUtils.createIfAbsent(null, "test", init)); [EOL]     EasyMock.verify(init); [EOL] } <line_num>: 493,503
@Test [EOL] public void testCreateIfAbsentNullInit() throws ConcurrentException { [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     map.put(key, value); [EOL]     assertNull("Wrong result", ConcurrentUtils.createIfAbsent(map, key, null)); [EOL]     assertEquals("Map was changed", value, map.get(key)); [EOL] } <line_num>: 508,517
@Test [EOL] public void testCreateIfAbsentUncheckedSuccess() { [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     assertEquals("Wrong result", value, ConcurrentUtils.createIfAbsentUnchecked(map, key, new ConstantInitializer<Integer>(value))); [EOL]     assertEquals("Wrong value in map", value, map.get(key)); [EOL] } <line_num>: 522,531
@Test [EOL] public void testCreateIfAbsentUncheckedException() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception ex = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.createIfAbsentUnchecked(new ConcurrentHashMap<String, Integer>(), "test", init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] } <line_num>: 536,554
