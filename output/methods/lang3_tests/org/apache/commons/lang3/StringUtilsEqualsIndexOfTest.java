public CustomCharSequence(final CharSequence seq) { [EOL]     this.seq = seq; [EOL] } <line_num>: 471,473
@Test [EOL] public void testContains_Char() { [EOL]     assertFalse(StringUtils.contains(null, ' ')); [EOL]     assertFalse(StringUtils.contains("", ' ')); [EOL]     assertFalse(StringUtils.contains("", null)); [EOL]     assertFalse(StringUtils.contains(null, null)); [EOL]     assertTrue(StringUtils.contains("abc", 'a')); [EOL]     assertTrue(StringUtils.contains("abc", 'b')); [EOL]     assertTrue(StringUtils.contains("abc", 'c')); [EOL]     assertFalse(StringUtils.contains("abc", 'z')); [EOL] } <line_num>: 64,74
@Test [EOL] public void testContains_String() { [EOL]     assertFalse(StringUtils.contains(null, null)); [EOL]     assertFalse(StringUtils.contains(null, "")); [EOL]     assertFalse(StringUtils.contains(null, "a")); [EOL]     assertFalse(StringUtils.contains("", null)); [EOL]     assertTrue(StringUtils.contains("", "")); [EOL]     assertFalse(StringUtils.contains("", "a")); [EOL]     assertTrue(StringUtils.contains("abc", "a")); [EOL]     assertTrue(StringUtils.contains("abc", "b")); [EOL]     assertTrue(StringUtils.contains("abc", "c")); [EOL]     assertTrue(StringUtils.contains("abc", "abc")); [EOL]     assertFalse(StringUtils.contains("abc", "z")); [EOL] } <line_num>: 76,89
@Test [EOL] public void testContains_StringWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001)); [EOL]     assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001)); [EOL]     assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + "a", "a")); [EOL]     assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + "a", "a")); [EOL] } <line_num>: 94,104
@Test [EOL] public void testContains_StringWithSupplementaryChars() { [EOL]     assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20000)); [EOL]     assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20001)); [EOL]     assertTrue(StringUtils.contains(CharU20000, CharU20000)); [EOL]     assertFalse(StringUtils.contains(CharU20000, CharU20001)); [EOL] } <line_num>: 109,115
@Test [EOL] public void testContainsAny_StringCharArray() { [EOL]     assertFalse(StringUtils.containsAny(null, (char[]) null)); [EOL]     assertFalse(StringUtils.containsAny(null, new char[0])); [EOL]     assertFalse(StringUtils.containsAny(null, new char[] { 'a', 'b' })); [EOL]     assertFalse(StringUtils.containsAny("", (char[]) null)); [EOL]     assertFalse(StringUtils.containsAny("", new char[0])); [EOL]     assertFalse(StringUtils.containsAny("", new char[] { 'a', 'b' })); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (char[]) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", new char[0])); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", new char[] { 'z', 'a' })); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", new char[] { 'b', 'y' })); [EOL]     assertFalse(StringUtils.containsAny("ab", new char[] { 'z' })); [EOL] } <line_num>: 117,132
@Test [EOL] public void testContainsAny_StringCharArrayWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] } <line_num>: 137,147
@Test [EOL] public void testContainsAny_StringCharArrayWithSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]     assertTrue(StringUtils.containsAny("a" + CharU20000 + CharU20001, "a".toCharArray())); [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + "a" + CharU20001, "a".toCharArray())); [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + "a", "a".toCharArray())); [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]     assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray())); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]     assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]     assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray())); [EOL] } <line_num>: 152,167
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(StringUtils.containsAny(null, (String) null)); [EOL]     assertFalse(StringUtils.containsAny(null, "")); [EOL]     assertFalse(StringUtils.containsAny(null, "ab")); [EOL]     assertFalse(StringUtils.containsAny("", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("", "")); [EOL]     assertFalse(StringUtils.containsAny("", "ab")); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); [EOL]     assertFalse(StringUtils.containsAny("zzabyycdxx", "")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); [EOL]     assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); [EOL]     assertFalse(StringUtils.containsAny("ab", "z")); [EOL] } <line_num>: 169,184
@Test [EOL] public void testContainsAny_StringWithBadSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow)); [EOL] } <line_num>: 189,198
@Test [EOL] public void testContainsAny_StringWithSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001)); [EOL]     assertTrue(StringUtils.containsAny(CharU20000, CharU20000)); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]     assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]     assertFalse(StringUtils.containsAny(CharU20000, CharU20001)); [EOL]     assertFalse(StringUtils.containsAny(CharU20001, CharU20000)); [EOL] } <line_num>: 203,215
@Test [EOL] public void testContainsIgnoreCase_LocaleIndependence() { [EOL]     final Locale orig = Locale.getDefault(); [EOL]     final Locale[] locales = { Locale.ENGLISH, new Locale("tr"), Locale.getDefault() }; [EOL]     final String[][] tdata = { { "i", "I" }, { "I", "i" }, { "\u03C2", "\u03C3" }, { "\u03A3", "\u03C2" }, { "\u03A3", "\u03C3" } }; [EOL]     final String[][] fdata = { { "\u00DF", "SS" } }; [EOL]     try { [EOL]         for (final Locale locale : locales) { [EOL]             Locale.setDefault(locale); [EOL]             for (int j = 0; j < tdata.length; j++) { [EOL]                 assertTrue(Locale.getDefault() + ": " + j + " " + tdata[j][0] + " " + tdata[j][1], StringUtils.containsIgnoreCase(tdata[j][0], tdata[j][1])); [EOL]             } [EOL]             for (int j = 0; j < fdata.length; j++) { [EOL]                 assertFalse(Locale.getDefault() + ": " + j + " " + fdata[j][0] + " " + fdata[j][1], StringUtils.containsIgnoreCase(fdata[j][0], fdata[j][1])); [EOL]             } [EOL]         } [EOL]     } finally { [EOL]         Locale.setDefault(orig); [EOL]     } [EOL] } <line_num>: 217,250
@Test [EOL] public void testContainsIgnoreCase_StringString() { [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]     assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "A")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "abc")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "ABC")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); [EOL] } <line_num>: 252,285
@Test [EOL] public void testContainsNone_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { '.' }; [EOL]     final char[] chars3 = { 'c', 'd' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]     assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] } <line_num>: 287,311
@Test [EOL] public void testContainsNone_CharArrayWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray())); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray())); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray())); [EOL] } <line_num>: 316,326
@Test [EOL] public void testContainsNone_CharArrayWithSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]     assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]     assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray())); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]     assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]     assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray())); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray())); [EOL] } <line_num>: 331,343
@Test [EOL] public void testContainsNone_String() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab."; [EOL]     final String chars1 = "b"; [EOL]     final String chars2 = "."; [EOL]     final String chars3 = "cd"; [EOL]     assertTrue(StringUtils.containsNone(null, (String) null)); [EOL]     assertTrue(StringUtils.containsNone("", (String) null)); [EOL]     assertTrue(StringUtils.containsNone(null, "")); [EOL]     assertTrue(StringUtils.containsNone(str1, "")); [EOL]     assertTrue(StringUtils.containsNone("", "")); [EOL]     assertTrue(StringUtils.containsNone("", chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars1)); [EOL]     assertFalse(StringUtils.containsNone(str3, chars2)); [EOL]     assertTrue(StringUtils.containsNone(str3, chars3)); [EOL] } <line_num>: 345,368
@Test [EOL] public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]     assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]     assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]     assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]     assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL] } <line_num>: 373,383
@Test [EOL] public void testContainsNone_StringWithSupplementaryChars() { [EOL]     assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000)); [EOL]     assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001)); [EOL]     assertFalse(StringUtils.containsNone(CharU20000, CharU20000)); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]     assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]     assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]     assertTrue(StringUtils.containsNone(CharU20000, CharU20001)); [EOL]     assertTrue(StringUtils.containsNone(CharU20001, CharU20000)); [EOL] } <line_num>: 388,400
@Test [EOL] public void testContainsOnly_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab"; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { 'a' }; [EOL]     final char[] chars3 = { 'a', 'b' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertFalse(StringUtils.containsOnly(null, (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly("", (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly(null, emptyChars)); [EOL]     assertFalse(StringUtils.containsOnly(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str1, chars1)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars3)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str2, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars3)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str3, chars3)); [EOL] } <line_num>: 402,426
@Test [EOL] public void testContainsOnly_String() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab"; [EOL]     final String chars1 = "b"; [EOL]     final String chars2 = "a"; [EOL]     final String chars3 = "ab"; [EOL]     assertFalse(StringUtils.containsOnly(null, (String) null)); [EOL]     assertFalse(StringUtils.containsOnly("", (String) null)); [EOL]     assertFalse(StringUtils.containsOnly(null, "")); [EOL]     assertFalse(StringUtils.containsOnly(str1, "")); [EOL]     assertTrue(StringUtils.containsOnly("", "")); [EOL]     assertTrue(StringUtils.containsOnly("", chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str1, chars1)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars3)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str2, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars3)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str3, chars3)); [EOL] } <line_num>: 428,451
@Test [EOL] public void testContainsWhitespace() { [EOL]     assertFalse(StringUtils.containsWhitespace("")); [EOL]     assertTrue(StringUtils.containsWhitespace(" ")); [EOL]     assertFalse(StringUtils.containsWhitespace("a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a ")); [EOL]     assertTrue(StringUtils.containsWhitespace(" a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a\t")); [EOL]     assertTrue(StringUtils.containsWhitespace("\n")); [EOL] } <line_num>: 453,462
@Override [EOL] public char charAt(final int index) { [EOL]     return seq.charAt(index); [EOL] } <line_num>: 475,478
@Override [EOL] public int length() { [EOL]     return seq.length(); [EOL] } <line_num>: 480,483
@Override [EOL] public CharSequence subSequence(final int start, final int end) { [EOL]     return new CustomCharSequence(seq.subSequence(start, end)); [EOL] } <line_num>: 485,488
@Override [EOL] public boolean equals(final Object obj) { [EOL]     if (obj == null || !(obj instanceof CustomCharSequence)) { [EOL]         return false; [EOL]     } [EOL]     final CustomCharSequence other = (CustomCharSequence) obj; [EOL]     return seq.equals(other.seq); [EOL] } <line_num>: 490,497
@Override [EOL] public int hashCode() { [EOL]     return seq.hashCode(); [EOL] } <line_num>: 499,502
@Override [EOL] public String toString() { [EOL]     return seq.toString(); [EOL] } <line_num>: 504,507
@Test [EOL] public void testCustomCharSequence() { [EOL]     assertThat(new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO)); [EOL]     assertThat(FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO))); [EOL]     assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO)); [EOL] } <line_num>: 510,515
@Test [EOL] public void testEquals() { [EOL]     final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]     assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]     assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]     assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, null)); [EOL]     assertFalse(StringUtils.equals(null, fooCs)); [EOL]     assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]     assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL] } <line_num>: 517,532
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] } <line_num>: 534,545
@Test [EOL] public void testEqualsIgnoreCase() { [EOL]     assertTrue(StringUtils.equalsIgnoreCase(null, null)); [EOL]     assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO)); [EOL]     assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR)); [EOL]     assertFalse(StringUtils.equalsIgnoreCase(FOO, null)); [EOL]     assertFalse(StringUtils.equalsIgnoreCase(null, FOO)); [EOL]     assertTrue(StringUtils.equalsIgnoreCase("", "")); [EOL]     assertFalse(StringUtils.equalsIgnoreCase("abcd", "abcd ")); [EOL] } <line_num>: 547,558
@Test [EOL] public void testIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ')); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a')); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b')); [EOL]     assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] } <line_num>: 561,569
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] } <line_num>: 571,584
@Test [EOL] public void testIndexOf_String() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOf("", null)); [EOL]     assertEquals(0, StringUtils.indexOf("", "")); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", "a")); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", "b")); [EOL]     assertEquals(1, StringUtils.indexOf("aabaabaa", "ab")); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", "")); [EOL]     assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b")); [EOL] } <line_num>: 586,597
@Test [EOL] public void testIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.indexOf("", "", 0)); [EOL]     assertEquals(0, StringUtils.indexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.indexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.indexOf("abc", "", 0)); [EOL]     assertEquals(0, StringUtils.indexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.indexOf("abc", "", 9)); [EOL]     assertEquals(3, StringUtils.indexOf("abc", "", 3)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(1, StringUtils.indexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", "", 2)); [EOL]     assertEquals(7, StringUtils.indexOf("12345678", "8", 5)); [EOL]     assertEquals(7, StringUtils.indexOf("12345678", "8", 6)); [EOL]     assertEquals(7, StringUtils.indexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.indexOf("12345678", "8", 8)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] } <line_num>: 599,629
@Test [EOL] public void testIndexOfAny_StringCharArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new char[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new char[] { 'a', 'b' })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new char[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new char[] { 'a', 'b' })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", new char[0])); [EOL]     assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", new char[] { 'z', 'a' })); [EOL]     assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", new char[] { 'b', 'y' })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("ab", new char[] { 'z' })); [EOL] } <line_num>: 631,646
@Test [EOL] public void testIndexOfAny_StringCharArrayWithSupplementaryChars() { [EOL]     assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]     assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]     assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray())); [EOL]     assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray())); [EOL] } <line_num>: 651,657
@Test [EOL] public void testIndexOfAny_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", "")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", "")); [EOL]     assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za")); [EOL]     assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by")); [EOL]     assertEquals(-1, StringUtils.indexOfAny("ab", "z")); [EOL] } <line_num>: 659,674
@Test [EOL] public void testIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]     assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.indexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.indexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null })); [EOL] } <line_num>: 676,692
@Test [EOL] public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]     assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]     assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]     assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); [EOL] } <line_num>: 697,703
@Test [EOL] public void testIndexOfAnyBut_StringCharArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] { 'a', 'b' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", new char[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", new char[] { 'a', 'b' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", new char[0])); [EOL]     assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] { 'z', 'a' })); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] { 'b', 'y' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("aba", new char[] { 'a', 'b' })); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("aba", new char[] { 'z' })); [EOL] } <line_num>: 705,722
@Test [EOL] public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]     assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL] } <line_num>: 724,730
@Test [EOL] public void testIndexOfAnyBut_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", "")); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", "")); [EOL]     assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za")); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by")); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("ab", "z")); [EOL] } <line_num>: 732,747
@Test [EOL] public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]     assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL] } <line_num>: 749,755
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] } <line_num>: 757,770
@Test [EOL] public void testIndexOfIgnoreCase_StringInt() { [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", -1)); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0)); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 1)); [EOL]     assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 2)); [EOL]     assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 3)); [EOL]     assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 4)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 5)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 6)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 7)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 8)); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aab", "AB", 1)); [EOL]     assertEquals(5, StringUtils.indexOfIgnoreCase("aabaabaa", "", 5)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("ab", "AAB", 0)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("aab", "AAB", 1)); [EOL] } <line_num>: 772,788
@Test [EOL] public void testLastIndexOf_char() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]     assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL] } <line_num>: 790,798
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] } <line_num>: 800,814
@Test [EOL] public void testLastIndexOf_String() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "a")); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "")); [EOL]     assertEquals(8, StringUtils.lastIndexOf("aabaabaa", "")); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a")); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b")); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab")); [EOL]     assertEquals(4, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "ab")); [EOL] } <line_num>: 816,828
@Test [EOL] public void testLastIndexOf_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 8)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("12345678", "8", 7)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("12345678", "8", 6)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 2)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "ba", 3)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL] } <line_num>: 830,866
@Test [EOL] public void testLastIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); [EOL]     assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.lastIndexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] { null })); [EOL] } <line_num>: 868,888
@Test [EOL] public void testLastIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]     assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); [EOL] } <line_num>: 890,906
@Test [EOL] public void testLastIndexOfIgnoreCase_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOfIgnoreCase("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)); [EOL]     assertEquals(1, StringUtils.lastIndexOfIgnoreCase("aab", "AB", 1)); [EOL] } <line_num>: 908,931
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] } <line_num>: 933,946
@Test [EOL] public void testOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]     assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]     assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]     assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]     assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]     assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]     assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]     assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]     assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]     assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]     assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL] } <line_num>: 948,1009
