@SuppressWarnings("cast") [EOL] @Before [EOL] public void setUp() { [EOL]     byteRange = Range.between((byte) 0, (byte) 5); [EOL]     byteRange2 = Range.between((byte) 0, (byte) 5); [EOL]     byteRange3 = Range.between((byte) 0, (byte) 10); [EOL]     intRange = Range.between((int) 10, (int) 20); [EOL]     longRange = Range.between((long) 10, (long) 20); [EOL]     floatRange = Range.between((float) 10, (float) 20); [EOL]     doubleRange = Range.between((double) 10, (double) 20); [EOL] } <line_num>: 51,62
@Override [EOL] public int compareTo(final Object other) { [EOL]     return 1; [EOL] } <line_num>: 70,73
@SuppressWarnings({ "rawtypes", "unchecked" }) [EOL] @Test [EOL] public void testComparableConstructors() { [EOL]     final Comparable c = new Comparable() { [EOL]  [EOL]         @Override [EOL]         public int compareTo(final Object other) { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     final Range r1 = Range.is(c); [EOL]     final Range r2 = Range.between(c, c); [EOL]     assertEquals(true, r1.isNaturalOrdering()); [EOL]     assertEquals(true, r2.isNaturalOrdering()); [EOL] } <line_num>: 65,79
@Override [EOL] public int compare(final Integer o1, final Integer o2) { [EOL]     return 0; [EOL] } <line_num>: 84,87
@Test [EOL] public void testIsWithCompare() { [EOL]     final Comparator<Integer> c = new Comparator<Integer>() { [EOL]  [EOL]         @Override [EOL]         public int compare(final Integer o1, final Integer o2) { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Range<Integer> ri = Range.is(10); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertFalse("should not contain 11", ri.contains(11)); [EOL]     ri = Range.is(10, c); [EOL]     assertFalse("should not contain null", ri.contains(null)); [EOL]     assertTrue("should contain 10", ri.contains(10)); [EOL]     assertTrue("should contain 11", ri.contains(11)); [EOL] } <line_num>: 81,97
@Override [EOL] public int compare(final Integer o1, final Integer o2) { [EOL]     return 0; [EOL] } <line_num>: 103,106
@Test [EOL] public void testBetweenWithCompare() { [EOL]     final Comparator<Integer> c = new Comparator<Integer>() { [EOL]  [EOL]         @Override [EOL]         public int compare(final Integer o1, final Integer o2) { [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]     Range<Integer> rb = Range.between(-10, 20); [EOL]     assertFalse("should not contain null", rb.contains(null)); [EOL]     assertTrue("should contain 10", rb.contains(10)); [EOL]     assertTrue("should contain -10", rb.contains(-10)); [EOL]     assertFalse("should not contain 21", rb.contains(21)); [EOL]     assertFalse("should not contain -11", rb.contains(-11)); [EOL]     rb = Range.between(-10, 20, c); [EOL]     assertFalse("should not contain null", rb.contains(null)); [EOL]     assertTrue("should contain 10", rb.contains(10)); [EOL]     assertTrue("should contain -10", rb.contains(-10)); [EOL]     assertTrue("should contain 21", rb.contains(21)); [EOL]     assertTrue("should contain -11", rb.contains(-11)); [EOL] } <line_num>: 99,120
@Test [EOL] public void testRangeOfChars() { [EOL]     final Range<Character> chars = Range.between('a', 'z'); [EOL]     assertTrue(chars.contains('b')); [EOL]     assertFalse(chars.contains('B')); [EOL] } <line_num>: 123,128
@Test [EOL] public void testEqualsObject() { [EOL]     assertEquals(byteRange, byteRange); [EOL]     assertEquals(byteRange, byteRange2); [EOL]     assertEquals(byteRange2, byteRange2); [EOL]     assertTrue(byteRange.equals(byteRange)); [EOL]     assertTrue(byteRange2.equals(byteRange2)); [EOL]     assertTrue(byteRange3.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(byteRange3)); [EOL]     assertFalse(byteRange2.equals(null)); [EOL]     assertFalse(byteRange2.equals("Ni!")); [EOL] } <line_num>: 131,142
@Test [EOL] public void testHashCode() { [EOL]     assertEquals(byteRange.hashCode(), byteRange2.hashCode()); [EOL]     assertFalse(byteRange.hashCode() == byteRange3.hashCode()); [EOL]     assertEquals(intRange.hashCode(), intRange.hashCode()); [EOL]     assertTrue(intRange.hashCode() != 0); [EOL] } <line_num>: 144,151
@Test [EOL] public void testToString() { [EOL]     assertNotNull(byteRange.toString()); [EOL]     final String str = intRange.toString(); [EOL]     assertEquals("[10..20]", str); [EOL]     assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL] } <line_num>: 153,160
@Test [EOL] public void testToStringFormat() { [EOL]     final String str = intRange.toString("From %1$s to %2$s"); [EOL]     assertEquals("From 10 to 20", str); [EOL] } <line_num>: 162,166
@Test [EOL] public void testGetMinimum() { [EOL]     assertEquals(10, (int) intRange.getMinimum()); [EOL]     assertEquals(10L, (long) longRange.getMinimum()); [EOL]     assertEquals(10f, floatRange.getMinimum(), 0.00001f); [EOL]     assertEquals(10d, doubleRange.getMinimum(), 0.00001d); [EOL] } <line_num>: 169,175
@Test [EOL] public void testGetMaximum() { [EOL]     assertEquals(20, (int) intRange.getMaximum()); [EOL]     assertEquals(20L, (long) longRange.getMaximum()); [EOL]     assertEquals(20f, floatRange.getMaximum(), 0.00001f); [EOL]     assertEquals(20d, doubleRange.getMaximum(), 0.00001d); [EOL] } <line_num>: 177,183
@Test [EOL] public void testContains() { [EOL]     assertFalse(intRange.contains(null)); [EOL]     assertFalse(intRange.contains(5)); [EOL]     assertTrue(intRange.contains(10)); [EOL]     assertTrue(intRange.contains(15)); [EOL]     assertTrue(intRange.contains(20)); [EOL]     assertFalse(intRange.contains(25)); [EOL] } <line_num>: 185,194
@Test [EOL] public void testIsAfter() { [EOL]     assertFalse(intRange.isAfter(null)); [EOL]     assertTrue(intRange.isAfter(5)); [EOL]     assertFalse(intRange.isAfter(10)); [EOL]     assertFalse(intRange.isAfter(15)); [EOL]     assertFalse(intRange.isAfter(20)); [EOL]     assertFalse(intRange.isAfter(25)); [EOL] } <line_num>: 196,205
@Test [EOL] public void testIsStartedBy() { [EOL]     assertFalse(intRange.isStartedBy(null)); [EOL]     assertFalse(intRange.isStartedBy(5)); [EOL]     assertTrue(intRange.isStartedBy(10)); [EOL]     assertFalse(intRange.isStartedBy(15)); [EOL]     assertFalse(intRange.isStartedBy(20)); [EOL]     assertFalse(intRange.isStartedBy(25)); [EOL] } <line_num>: 207,216
@Test [EOL] public void testIsEndedBy() { [EOL]     assertFalse(intRange.isEndedBy(null)); [EOL]     assertFalse(intRange.isEndedBy(5)); [EOL]     assertFalse(intRange.isEndedBy(10)); [EOL]     assertFalse(intRange.isEndedBy(15)); [EOL]     assertTrue(intRange.isEndedBy(20)); [EOL]     assertFalse(intRange.isEndedBy(25)); [EOL] } <line_num>: 218,227
@Test [EOL] public void testIsBefore() { [EOL]     assertFalse(intRange.isBefore(null)); [EOL]     assertFalse(intRange.isBefore(5)); [EOL]     assertFalse(intRange.isBefore(10)); [EOL]     assertFalse(intRange.isBefore(15)); [EOL]     assertFalse(intRange.isBefore(20)); [EOL]     assertTrue(intRange.isBefore(25)); [EOL] } <line_num>: 229,238
@Test [EOL] public void testElementCompareTo() { [EOL]     try { [EOL]         intRange.elementCompareTo(null); [EOL]         fail("NullPointerException should have been thrown"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     assertEquals(-1, intRange.elementCompareTo(5)); [EOL]     assertEquals(0, intRange.elementCompareTo(10)); [EOL]     assertEquals(0, intRange.elementCompareTo(15)); [EOL]     assertEquals(0, intRange.elementCompareTo(20)); [EOL]     assertEquals(1, intRange.elementCompareTo(25)); [EOL] } <line_num>: 240,254
@Test [EOL] public void testContainsRange() { [EOL]     assertFalse(intRange.containsRange(null)); [EOL]     assertTrue(intRange.containsRange(Range.between(12, 18))); [EOL]     assertFalse(intRange.containsRange(Range.between(32, 45))); [EOL]     assertFalse(intRange.containsRange(Range.between(2, 8))); [EOL]     assertTrue(intRange.containsRange(Range.between(10, 20))); [EOL]     assertFalse(intRange.containsRange(Range.between(9, 14))); [EOL]     assertFalse(intRange.containsRange(Range.between(16, 21))); [EOL]     assertTrue(intRange.containsRange(Range.between(10, 19))); [EOL]     assertFalse(intRange.containsRange(Range.between(10, 21))); [EOL]     assertTrue(intRange.containsRange(Range.between(11, 20))); [EOL]     assertFalse(intRange.containsRange(Range.between(9, 20))); [EOL]     assertFalse(intRange.containsRange(Range.between(-11, -18))); [EOL] } <line_num>: 257,287
@Test [EOL] public void testIsAfterRange() { [EOL]     assertFalse(intRange.isAfterRange(null)); [EOL]     assertTrue(intRange.isAfterRange(Range.between(5, 9))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(5, 10))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(5, 20))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(5, 25))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(15, 25))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(21, 25))); [EOL]     assertFalse(intRange.isAfterRange(Range.between(10, 20))); [EOL] } <line_num>: 289,303
@Test [EOL] public void testIsOverlappedBy() { [EOL]     assertFalse(intRange.isOverlappedBy(null)); [EOL]     assertTrue(intRange.isOverlappedBy(Range.between(12, 18))); [EOL]     assertFalse(intRange.isOverlappedBy(Range.between(32, 45))); [EOL]     assertFalse(intRange.isOverlappedBy(Range.between(2, 8))); [EOL]     assertTrue(intRange.isOverlappedBy(Range.between(10, 20))); [EOL]     assertTrue(intRange.isOverlappedBy(Range.between(9, 14))); [EOL]     assertTrue(intRange.isOverlappedBy(Range.between(16, 21))); [EOL]     assertTrue(intRange.isOverlappedBy(Range.between(10, 19))); [EOL]     assertTrue(intRange.isOverlappedBy(Range.between(10, 21))); [EOL]     assertTrue(intRange.isOverlappedBy(Range.between(11, 20))); [EOL]     assertTrue(intRange.isOverlappedBy(Range.between(9, 20))); [EOL]     assertFalse(intRange.isOverlappedBy(Range.between(-11, -18))); [EOL] } <line_num>: 305,335
@Test [EOL] public void testIsBeforeRange() { [EOL]     assertFalse(intRange.isBeforeRange(null)); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 9))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 10))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 20))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 25))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(15, 25))); [EOL]     assertTrue(intRange.isBeforeRange(Range.between(21, 25))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(10, 20))); [EOL] } <line_num>: 337,351
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] } <line_num>: 353,362
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNull() { [EOL]     intRange.intersectionWith(null); [EOL] } <line_num>: 364,367
@Test(expected = IllegalArgumentException.class) [EOL] public void testIntersectionWithNonOverlapping() { [EOL]     intRange.intersectionWith(Range.between(0, 9)); [EOL] } <line_num>: 369,372
@Test [EOL] public void testSerializing() { [EOL]     SerializationUtils.clone(intRange); [EOL] } <line_num>: 375,378
