@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new DurationFormatUtils()); [EOL]     final Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(DurationFormatUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(DurationFormatUtils.class.getModifiers())); [EOL] } <line_num>: 34,42
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] } <line_num>: 45,128
@Test [EOL] public void testFormatDurationPluralWords() { [EOL]     final long oneSecond = 1000; [EOL]     final long oneMinute = oneSecond * 60; [EOL]     final long oneHour = oneMinute * 60; [EOL]     final long oneDay = oneHour * 24; [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(oneSecond, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneSecond * 2, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 2 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneSecond * 11, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 11 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneMinute, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneMinute * 2, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneMinute * 11, false, false); [EOL]     assertEquals("0 days 0 hours 11 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneMinute + oneSecond, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneHour, false, false); [EOL]     assertEquals("0 days 1 hour 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneHour * 2, false, false); [EOL]     assertEquals("0 days 2 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneHour * 11, false, false); [EOL]     assertEquals("0 days 11 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond, false, false); [EOL]     assertEquals("0 days 1 hour 1 minute 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneDay, false, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneDay * 2, false, false); [EOL]     assertEquals("2 days 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneDay * 11, false, false); [EOL]     assertEquals("11 days 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute + oneSecond, false, false); [EOL]     assertEquals("1 day 1 hour 1 minute 1 second", text); [EOL] } <line_num>: 133,174
@Test [EOL] public void testFormatDurationHMS() { [EOL]     long time = 0; [EOL]     assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1; [EOL]     assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 15; [EOL]     assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 165; [EOL]     assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 1675; [EOL]     assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 13465; [EOL]     assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 72789; [EOL]     assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 32 * 60000; [EOL]     assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     time = 12789 + 62 * 60000; [EOL]     assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL] } <line_num>: 176,204
@Test [EOL] public void testFormatDurationISO() { [EOL]     assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); [EOL]     assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); [EOL] } <line_num>: 206,213
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] } <line_num>: 215,251
@Test [EOL] public void testFormatPeriodISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar base = Calendar.getInstance(timeZone); [EOL]     base.set(1970, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     cal.set(Calendar.MILLISECOND, 1); [EOL]     String text; [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]     cal.set(1971, 1, 3, 10, 30, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]     assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL] } <line_num>: 253,279
@Test [EOL] public void testFormatPeriod() { [EOL]     final Calendar cal1970 = Calendar.getInstance(); [EOL]     cal1970.set(1970, 0, 1, 0, 0, 0); [EOL]     cal1970.set(Calendar.MILLISECOND, 0); [EOL]     final long time1970 = cal1970.getTime().getTime(); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyMM")); [EOL]     long time = time1970 + 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatPeriod(time1970, time, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatPeriod(time1970, time, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatPeriod(time1970, time, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatPeriod(time1970, time, "mm:ss")); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(1973, 6, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     time = cal.getTime().getTime(); [EOL]     assertEquals("36", DurationFormatUtils.formatPeriod(time1970, time, "yM")); [EOL]     assertEquals("3 years 6 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'")); [EOL]     assertEquals("03/06", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM")); [EOL]     cal.set(1973, 10, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     time = cal.getTime().getTime(); [EOL]     assertEquals("310", DurationFormatUtils.formatPeriod(time1970, time, "yM")); [EOL]     assertEquals("3 years 10 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'")); [EOL]     assertEquals("03/10", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM")); [EOL]     cal.set(1974, 0, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     time = cal.getTime().getTime(); [EOL]     assertEquals("40", DurationFormatUtils.formatPeriod(time1970, time, "yM")); [EOL]     assertEquals("4 years 0 months", DurationFormatUtils.formatPeriod(time1970, time, "y' years 'M' months'")); [EOL]     assertEquals("04/00", DurationFormatUtils.formatPeriod(time1970, time, "yy/MM")); [EOL]     assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "M")); [EOL]     assertEquals("48", DurationFormatUtils.formatPeriod(time1970, time, "MM")); [EOL]     assertEquals("048", DurationFormatUtils.formatPeriod(time1970, time, "MMM")); [EOL] } <line_num>: 281,333
@Test [EOL] public void testLexx() { [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.y, 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx("yMdHmsS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 2), new DurationFormatUtils.Token(new StringBuilder(":"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 2), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]     assertArrayEquals(new DurationFormatUtils.Token[] { new DurationFormatUtils.Token(new StringBuilder("P"), 1), new DurationFormatUtils.Token(DurationFormatUtils.y, 4), new DurationFormatUtils.Token(new StringBuilder("Y"), 1), new DurationFormatUtils.Token(DurationFormatUtils.M, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.d, 1), new DurationFormatUtils.Token(new StringBuilder("DT"), 1), new DurationFormatUtils.Token(DurationFormatUtils.H, 1), new DurationFormatUtils.Token(new StringBuilder("H"), 1), new DurationFormatUtils.Token(DurationFormatUtils.m, 1), new DurationFormatUtils.Token(new StringBuilder("M"), 1), new DurationFormatUtils.Token(DurationFormatUtils.s, 1), new DurationFormatUtils.Token(new StringBuilder("."), 1), new DurationFormatUtils.Token(DurationFormatUtils.S, 1), new DurationFormatUtils.Token(new StringBuilder("S"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]     final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]     assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]     assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token(new Object()))); [EOL]     assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y, 1))); [EOL]     final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]     assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL] } <line_num>: 335,385
@Test [EOL] public void testBugzilla38401() { [EOL]     assertEqualDuration("0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL] } <line_num>: 389,393
@Test [EOL] public void testJiraLang281() { [EOL]     assertEqualDuration("09", new int[] { 2005, 11, 31, 0, 0, 0 }, new int[] { 2006, 9, 6, 0, 0, 0 }, "MM"); [EOL] } <line_num>: 396,400
@Test [EOL] public void testLANG815() { [EOL]     final Calendar calendar = Calendar.getInstance(); [EOL]     calendar.set(2012, 6, 30, 0, 0, 0); [EOL]     final long startMillis = calendar.getTimeInMillis(); [EOL]     calendar.set(2012, 8, 8); [EOL]     final long endMillis = calendar.getTimeInMillis(); [EOL]     assertEquals("1 9", DurationFormatUtils.formatPeriod(startMillis, endMillis, "M d")); [EOL] } <line_num>: 402,412
@Test [EOL] public void testLowDurations() { [EOL]     for (int hr = 0; hr < 24; hr++) { [EOL]         for (int min = 0; min < 60; min++) { [EOL]             for (int sec = 0; sec < 60; sec++) { [EOL]                 assertEqualDuration(hr + ":" + min + ":" + sec, new int[] { 2000, 0, 1, 0, 0, 0, 0 }, new int[] { 2000, 0, 1, hr, min, sec }, "H:m:s"); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 415,428
@Test [EOL] public void testEdgeDurations() { [EOL]     assertEqualDuration("01", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("12", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("11", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, "MM"); [EOL]     assertEqualDuration("01 26", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("54", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("09 12", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("287", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("11 30", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("364", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("12 00", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "MM dd"); [EOL]     assertEqualDuration("365", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("31", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("92", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("77", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("136", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("137", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("135", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("364", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("729", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("365", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("333", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("393", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("369", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("338", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("28", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, "dd"); [EOL]     assertEqualDuration("48", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M"); [EOL]     assertEqualDuration("11 28", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, "M d"); [EOL] } <line_num>: 431,519
@Test [EOL] public void testDurationsByBruteForce() { [EOL]     bruteForce(2006, 0, 1, "d", Calendar.DAY_OF_MONTH); [EOL]     bruteForce(2006, 0, 2, "d", Calendar.DAY_OF_MONTH); [EOL]     bruteForce(2007, 1, 2, "d", Calendar.DAY_OF_MONTH); [EOL]     bruteForce(2004, 1, 29, "d", Calendar.DAY_OF_MONTH); [EOL]     bruteForce(1996, 1, 29, "d", Calendar.DAY_OF_MONTH); [EOL]     bruteForce(1969, 1, 28, "M", Calendar.MONTH); [EOL] } <line_num>: 521,531
private void bruteForce(final int year, final int month, final int day, final String format, final int calendarType) { [EOL]     final String msg = year + "-" + month + "-" + day + " to "; [EOL]     final Calendar c = Calendar.getInstance(); [EOL]     c.set(year, month, day, 0, 0, 0); [EOL]     final int[] array1 = new int[] { year, month, day, 0, 0, 0 }; [EOL]     final int[] array2 = new int[] { year, month, day, 0, 0, 0 }; [EOL]     for (int i = 0; i < FOUR_YEARS; i++) { [EOL]         array2[0] = c.get(Calendar.YEAR); [EOL]         array2[1] = c.get(Calendar.MONTH); [EOL]         array2[2] = c.get(Calendar.DAY_OF_MONTH); [EOL]         final String tmpMsg = msg + array2[0] + "-" + array2[1] + "-" + array2[2] + " at "; [EOL]         assertEqualDuration(tmpMsg + i, Integer.toString(i), array1, array2, format); [EOL]         c.add(calendarType, 1); [EOL]     } [EOL] } <line_num>: 545,559
private void assertEqualDuration(final String expected, final int[] start, final int[] end, final String format) { [EOL]     assertEqualDuration(null, expected, start, end, format); [EOL] } <line_num>: 561,563
private void assertEqualDuration(final String message, final String expected, final int[] start, final int[] end, final String format) { [EOL]     final Calendar cal1 = Calendar.getInstance(); [EOL]     cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]); [EOL]     cal1.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal2 = Calendar.getInstance(); [EOL]     cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]); [EOL]     cal2.set(Calendar.MILLISECOND, 0); [EOL]     final long milli1 = cal1.getTime().getTime(); [EOL]     final long milli2 = cal2.getTime().getTime(); [EOL]     final String result = DurationFormatUtils.formatPeriod(milli1, milli2, format); [EOL]     if (message == null) { [EOL]         assertEquals(expected, result); [EOL]     } else { [EOL]         assertEquals(message, expected, result); [EOL]     } [EOL] } <line_num>: 564,579
private void assertArrayEquals(final DurationFormatUtils.Token[] obj1, final DurationFormatUtils.Token[] obj2) { [EOL]     assertEquals("Arrays are unequal length. ", obj1.length, obj2.length); [EOL]     for (int i = 0; i < obj1.length; i++) { [EOL]         assertTrue("Index " + i + " not equal, " + obj1[i] + " vs " + obj2[i], obj1[i].equals(obj2[i])); [EOL]     } [EOL] } <line_num>: 581,586
