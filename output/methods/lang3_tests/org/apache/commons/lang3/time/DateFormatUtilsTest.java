@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new DateFormatUtils()); [EOL]     final Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers())); [EOL] } <line_num>: 34,42
@Test [EOL] public void testFormat() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US)); [EOL] } <line_num>: 45,66
@Test [EOL] public void testFormatCalendar() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL] } <line_num>: 69,90
@Test [EOL] public void testFormatUTC() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     assertEquals("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL] } <line_num>: 92,103
@Test [EOL] public void testDateTimeISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 9, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23T09:11:12", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23T09:11:12", text); [EOL]     text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23T09:11:12-03:00", text); [EOL] } <line_num>: 105,127
@Test [EOL] public void testDateISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.ISO_DATE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL]     text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("2002-02-23-03:00", text); [EOL] } <line_num>: 129,151
@Test [EOL] public void testTimeISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("T10:11:12", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("T10:11:12", text); [EOL]     text = DateFormatUtils.ISO_TIME_FORMAT.format(cal); [EOL]     assertEquals("T10:11:12", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("T10:11:12-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("T10:11:12-03:00", text); [EOL]     text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("T10:11:12-03:00", text); [EOL] } <line_num>: 153,175
@Test [EOL] public void testTimeNoTISO() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2002, 1, 23, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("10:11:12", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("10:11:12", text); [EOL]     text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal); [EOL]     assertEquals("10:11:12", text); [EOL]     text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("10:11:12-03:00", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]     assertEquals("10:11:12-03:00", text); [EOL]     text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal); [EOL]     assertEquals("10:11:12-03:00", text); [EOL] } <line_num>: 177,199
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] } <line_num>: 201,222
