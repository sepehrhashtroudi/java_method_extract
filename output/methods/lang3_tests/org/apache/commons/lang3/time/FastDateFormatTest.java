@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] } <line_num>: 52,57
@Test [EOL] public void test_getInstance_String() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance("MM-DD-yyyy"); [EOL]     final FastDateFormat format3 = FastDateFormat.getInstance("MM-DD-yyyy"); [EOL]     assertTrue(format1 != format2); [EOL]     assertSame(format2, format3); [EOL]     assertEquals("MM/DD/yyyy", format1.getPattern()); [EOL]     assertEquals(TimeZone.getDefault(), format1.getTimeZone()); [EOL]     assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL] } <line_num>: 59,70
@Test [EOL] public void test_getInstance_String_TimeZone() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getTimeZone("Atlantic/Reykjavik")); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy"); [EOL]         assertTrue(format1 != format2); [EOL]         assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]         assertSame(format3, format4); [EOL]         assertTrue(format3 != format5); [EOL]         assertTrue(format4 != format6); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] } <line_num>: 72,99
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] } <line_num>: 101,117
@Test [EOL] public void test_changeDefault_Locale_DateInstance() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]         Locale.setDefault(Locale.GERMANY); [EOL]         final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]         assertSame(Locale.GERMANY, format1.getLocale()); [EOL]         assertSame(Locale.US, format2.getLocale()); [EOL]         assertSame(Locale.GERMANY, format3.getLocale()); [EOL]         assertTrue(format1 != format2); [EOL]         assertTrue(format2 != format3); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] } <line_num>: 119,138
@Test [EOL] public void test_changeDefault_Locale_DateTimeInstance() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL); [EOL]         Locale.setDefault(Locale.GERMANY); [EOL]         final FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL); [EOL]         assertSame(Locale.GERMANY, format1.getLocale()); [EOL]         assertSame(Locale.US, format2.getLocale()); [EOL]         assertSame(Locale.GERMANY, format3.getLocale()); [EOL]         assertTrue(format1 != format2); [EOL]         assertTrue(format2 != format3); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] } <line_num>: 140,159
@Test [EOL] public void test_getInstance_String_TimeZone_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault(), Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]         assertEquals(TimeZone.getDefault(), format3.getTimeZone()); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]         assertEquals(Locale.GERMANY, format2.getLocale()); [EOL]         assertEquals(Locale.GERMANY, format3.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] } <line_num>: 161,187
@Test [EOL] public void testCheckDefaults() { [EOL]     final FastDateFormat format = FastDateFormat.getInstance(); [EOL]     final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]     assertEquals(medium, format); [EOL]     final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]     assertEquals(sdf.toPattern(), format.getPattern()); [EOL]     assertEquals(Locale.getDefault(), format.getLocale()); [EOL]     assertEquals(TimeZone.getDefault(), format.getTimeZone()); [EOL] } <line_num>: 189,200
@Test [EOL] public void testCheckDifferingStyles() { [EOL]     final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US); [EOL]     final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US); [EOL]     final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT, Locale.US); [EOL]     final FastDateFormat longLong = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.LONG, Locale.US); [EOL]     assertFalse(shortShort.equals(shortLong)); [EOL]     assertFalse(shortShort.equals(longShort)); [EOL]     assertFalse(shortShort.equals(longLong)); [EOL]     assertFalse(shortLong.equals(longShort)); [EOL]     assertFalse(shortLong.equals(longLong)); [EOL]     assertFalse(longShort.equals(longLong)); [EOL] } <line_num>: 202,215
@Test [EOL] public void testDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] } <line_num>: 217,227
@Test [EOL] public void testTimeDefaults() { [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL] } <line_num>: 229,239
@Test [EOL] public void testTimeDateDefaults() { [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]     assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL] } <line_num>: 241,251
@Override [EOL] public Object parseObject(final String formattedDate) throws ParseException { [EOL]     synchronized (this) { [EOL]         return super.parse(formattedDate); [EOL]     } [EOL] } <line_num>: 261,266
@Test [EOL] public void testParseSync() throws InterruptedException { [EOL]     final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]     final FastDateFormat formatter = FastDateFormat.getInstance(pattern); [EOL]     final long sdfTime = measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]  [EOL]         private static final long serialVersionUID = 1L; [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String formattedDate) throws ParseException { [EOL]             synchronized (this) { [EOL]                 return super.parse(formattedDate); [EOL]             } [EOL]         } [EOL]     }); [EOL]     final long fdfTime = measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]     final String times = ">>FastDateFormatTest: FastDateParser:" + fdfTime + "  SimpleDateFormat:" + sdfTime; [EOL]     System.out.println(times); [EOL] } <line_num>: 253,273
@Override [EOL] public void run() { [EOL]     for (int i = 0; i < NROUNDS; ++i) { [EOL]         try { [EOL]             final Date date = new Date(); [EOL]             final String formattedDate = formatter.format(date); [EOL]             final long start = System.currentTimeMillis(); [EOL]             final Object pd = parser.parseObject(formattedDate); [EOL]             totalElapsed.addAndGet(System.currentTimeMillis() - start); [EOL]             if (!date.equals(pd)) { [EOL]                 failures.incrementAndGet(); [EOL]             } [EOL]         } catch (final Exception e) { [EOL]             failures.incrementAndGet(); [EOL]             e.printStackTrace(); [EOL]         } [EOL]     } [EOL] } <line_num>: 285,302
private long measureTime(final Format formatter, final Format parser) throws InterruptedException { [EOL]     final ExecutorService pool = Executors.newFixedThreadPool(NTHREADS); [EOL]     final AtomicInteger failures = new AtomicInteger(0); [EOL]     final AtomicLong totalElapsed = new AtomicLong(0); [EOL]     for (int i = 0; i < NTHREADS; ++i) { [EOL]         pool.submit(new Runnable() { [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 for (int i = 0; i < NROUNDS; ++i) { [EOL]                     try { [EOL]                         final Date date = new Date(); [EOL]                         final String formattedDate = formatter.format(date); [EOL]                         final long start = System.currentTimeMillis(); [EOL]                         final Object pd = parser.parseObject(formattedDate); [EOL]                         totalElapsed.addAndGet(System.currentTimeMillis() - start); [EOL]                         if (!date.equals(pd)) { [EOL]                             failures.incrementAndGet(); [EOL]                         } [EOL]                     } catch (final Exception e) { [EOL]                         failures.incrementAndGet(); [EOL]                         e.printStackTrace(); [EOL]                     } [EOL]                 } [EOL]             } [EOL]         }); [EOL]     } [EOL]     pool.shutdown(); [EOL]     if (!pool.awaitTermination(20, TimeUnit.SECONDS)) { [EOL]         pool.shutdownNow(); [EOL]         fail("did not complete tasks"); [EOL]     } [EOL]     assertEquals(0, failures.get()); [EOL]     return totalElapsed.get(); [EOL] } <line_num>: 278,312
