@Before [EOL] public void setUp() throws Exception { [EOL]     dateParser = new SimpleDateFormat("MMM dd, yyyy", Locale.ENGLISH); [EOL]     dateTimeParser = new SimpleDateFormat("MMM dd, yyyy H:mm:ss.SSS", Locale.ENGLISH); [EOL]     dateAmPm1 = dateTimeParser.parse("February 3, 2002 01:10:00.000"); [EOL]     dateAmPm2 = dateTimeParser.parse("February 3, 2002 11:10:00.000"); [EOL]     dateAmPm3 = dateTimeParser.parse("February 3, 2002 13:10:00.000"); [EOL]     dateAmPm4 = dateTimeParser.parse("February 3, 2002 19:10:00.000"); [EOL]     date0 = dateTimeParser.parse("February 3, 2002 12:34:56.789"); [EOL]     date1 = dateTimeParser.parse("February 12, 2002 12:34:56.789"); [EOL]     date2 = dateTimeParser.parse("November 18, 2001 1:23:11.321"); [EOL]     defaultZone = TimeZone.getDefault(); [EOL]     zone = TimeZone.getTimeZone("MET"); [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     date3 = dateTimeParser.parse("March 30, 2003 05:30:45.000"); [EOL]     date4 = dateTimeParser.parse("March 30, 2003 01:10:00.000"); [EOL]     date5 = dateTimeParser.parse("March 30, 2003 01:40:00.000"); [EOL]     date6 = dateTimeParser.parse("March 30, 2003 02:10:00.000"); [EOL]     date7 = dateTimeParser.parse("March 30, 2003 02:40:00.000"); [EOL]     date8 = dateTimeParser.parse("October 26, 2003 05:30:45.000"); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     TimeZone.setDefault(defaultZone); [EOL]     calAmPm1 = Calendar.getInstance(); [EOL]     calAmPm1.setTime(dateAmPm1); [EOL]     calAmPm2 = Calendar.getInstance(); [EOL]     calAmPm2.setTime(dateAmPm2); [EOL]     calAmPm3 = Calendar.getInstance(); [EOL]     calAmPm3.setTime(dateAmPm3); [EOL]     calAmPm4 = Calendar.getInstance(); [EOL]     calAmPm4.setTime(dateAmPm4); [EOL]     cal1 = Calendar.getInstance(); [EOL]     cal1.setTime(date1); [EOL]     cal2 = Calendar.getInstance(); [EOL]     cal2.setTime(date2); [EOL]     TimeZone.setDefault(zone); [EOL]     cal3 = Calendar.getInstance(); [EOL]     cal3.setTime(date3); [EOL]     cal4 = Calendar.getInstance(); [EOL]     cal4.setTime(date4); [EOL]     cal5 = Calendar.getInstance(); [EOL]     cal5.setTime(date5); [EOL]     cal6 = Calendar.getInstance(); [EOL]     cal6.setTime(date6); [EOL]     cal7 = Calendar.getInstance(); [EOL]     cal7.setTime(date7); [EOL]     cal8 = Calendar.getInstance(); [EOL]     cal8.setTime(date8); [EOL]     TimeZone.setDefault(defaultZone); [EOL] } <line_num>: 94,146
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new DateUtils()); [EOL]     final Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(DateUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(DateUtils.class.getModifiers())); [EOL] } <line_num>: 149,157
@Test [EOL] public void testIsSameDay_Date() { [EOL]     Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]     Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]     assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]     date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]     assertFalse(DateUtils.isSameDay(date1, date2)); [EOL]     date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]     assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]     date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); [EOL]     assertFalse(DateUtils.isSameDay(date1, date2)); [EOL]     try { [EOL]         DateUtils.isSameDay((Date) null, (Date) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 160,175
@Test [EOL] public void testIsSameDay_Cal() { [EOL]     final GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45); [EOL]     final GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45); [EOL]     assertTrue(DateUtils.isSameDay(cal1, cal2)); [EOL]     cal2.add(Calendar.DAY_OF_YEAR, 1); [EOL]     assertFalse(DateUtils.isSameDay(cal1, cal2)); [EOL]     cal1.add(Calendar.DAY_OF_YEAR, 1); [EOL]     assertTrue(DateUtils.isSameDay(cal1, cal2)); [EOL]     cal2.add(Calendar.YEAR, 1); [EOL]     assertFalse(DateUtils.isSameDay(cal1, cal2)); [EOL]     try { [EOL]         DateUtils.isSameDay((Calendar) null, (Calendar) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 178,193
@Test [EOL] public void testIsSameInstant_Date() { [EOL]     Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]     Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]     assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]     date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]     assertFalse(DateUtils.isSameInstant(date1, date2)); [EOL]     date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]     assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]     date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); [EOL]     assertFalse(DateUtils.isSameInstant(date1, date2)); [EOL]     try { [EOL]         DateUtils.isSameInstant((Date) null, (Date) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 196,211
@Test [EOL] public void testIsSameInstant_Cal() { [EOL]     final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); [EOL]     final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); [EOL]     cal1.set(2004, 6, 9, 13, 45, 0); [EOL]     cal1.set(Calendar.MILLISECOND, 0); [EOL]     cal2.set(2004, 6, 9, 13, 45, 0); [EOL]     cal2.set(Calendar.MILLISECOND, 0); [EOL]     assertFalse(DateUtils.isSameInstant(cal1, cal2)); [EOL]     cal2.set(2004, 6, 9, 11, 45, 0); [EOL]     assertTrue(DateUtils.isSameInstant(cal1, cal2)); [EOL]     try { [EOL]         DateUtils.isSameInstant((Calendar) null, (Calendar) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 214,230
@Test [EOL] public void testIsSameLocalTime_Cal() { [EOL]     final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); [EOL]     final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); [EOL]     cal1.set(2004, 6, 9, 13, 45, 0); [EOL]     cal1.set(Calendar.MILLISECOND, 0); [EOL]     cal2.set(2004, 6, 9, 13, 45, 0); [EOL]     cal2.set(Calendar.MILLISECOND, 0); [EOL]     assertTrue(DateUtils.isSameLocalTime(cal1, cal2)); [EOL]     final Calendar cal3 = Calendar.getInstance(); [EOL]     final Calendar cal4 = Calendar.getInstance(); [EOL]     cal3.set(2004, 6, 9, 4, 0, 0); [EOL]     cal4.set(2004, 6, 9, 16, 0, 0); [EOL]     cal3.set(Calendar.MILLISECOND, 0); [EOL]     cal4.set(Calendar.MILLISECOND, 0); [EOL]     assertFalse("LANG-677", DateUtils.isSameLocalTime(cal3, cal4)); [EOL]     cal2.set(2004, 6, 9, 11, 45, 0); [EOL]     assertFalse(DateUtils.isSameLocalTime(cal1, cal2)); [EOL]     try { [EOL]         DateUtils.isSameLocalTime((Calendar) null, (Calendar) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 233,257
@Test [EOL] public void testParseDate() throws Exception { [EOL]     final GregorianCalendar cal = new GregorianCalendar(1972, 11, 3); [EOL]     String dateStr = "1972-12-03"; [EOL]     final String[] parsers = new String[] { "yyyy'-'DDD", "yyyy'-'MM'-'dd", "yyyyMMdd" }; [EOL]     Date date = DateUtils.parseDate(dateStr, parsers); [EOL]     assertEquals(cal.getTime(), date); [EOL]     dateStr = "1972-338"; [EOL]     date = DateUtils.parseDate(dateStr, parsers); [EOL]     assertEquals(cal.getTime(), date); [EOL]     dateStr = "19721203"; [EOL]     date = DateUtils.parseDate(dateStr, parsers); [EOL]     assertEquals(cal.getTime(), date); [EOL]     try { [EOL]         DateUtils.parseDate("PURPLE", parsers); [EOL]         fail(); [EOL]     } catch (final ParseException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.parseDate("197212AB", parsers); [EOL]         fail(); [EOL]     } catch (final ParseException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.parseDate(null, parsers); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.parseDate(dateStr, (String[]) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.parseDate(dateStr, new String[0]); [EOL]         fail(); [EOL]     } catch (final ParseException ex) { [EOL]     } [EOL] } <line_num>: 260,296
@Test [EOL] public void testParseDateWithLeniency() throws Exception { [EOL]     final GregorianCalendar cal = new GregorianCalendar(1998, 6, 30); [EOL]     final String dateStr = "02 942, 1996"; [EOL]     final String[] parsers = new String[] { "MM DDD, yyyy" }; [EOL]     Date date = DateUtils.parseDate(dateStr, parsers); [EOL]     assertEquals(cal.getTime(), date); [EOL]     try { [EOL]         date = DateUtils.parseDateStrictly(dateStr, parsers); [EOL]         fail(); [EOL]     } catch (final ParseException ex) { [EOL]     } [EOL] } <line_num>: 298,311
@Test [EOL] public void testAddYears() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addYears(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addYears(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2001, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addYears(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 1999, 6, 5, 4, 3, 2, 1); [EOL] } <line_num>: 314,331
@Test [EOL] public void testAddMonths() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addMonths(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addMonths(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 7, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addMonths(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 5, 5, 4, 3, 2, 1); [EOL] } <line_num>: 334,351
@Test [EOL] public void testAddWeeks() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addWeeks(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addWeeks(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 12, 4, 3, 2, 1); [EOL]     result = DateUtils.addWeeks(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 5, 28, 4, 3, 2, 1); [EOL] } <line_num>: 354,371
@Test [EOL] public void testAddDays() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addDays(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addDays(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 6, 4, 3, 2, 1); [EOL]     result = DateUtils.addDays(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 4, 4, 3, 2, 1); [EOL] } <line_num>: 374,391
@Test [EOL] public void testAddHours() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addHours(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addHours(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 5, 3, 2, 1); [EOL]     result = DateUtils.addHours(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 3, 3, 2, 1); [EOL] } <line_num>: 394,411
@Test [EOL] public void testAddMinutes() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addMinutes(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addMinutes(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 4, 2, 1); [EOL]     result = DateUtils.addMinutes(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 2, 2, 1); [EOL] } <line_num>: 414,431
@Test [EOL] public void testAddSeconds() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addSeconds(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addSeconds(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 3, 1); [EOL]     result = DateUtils.addSeconds(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 1, 1); [EOL] } <line_num>: 434,451
@Test [EOL] public void testAddMilliseconds() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addMilliseconds(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addMilliseconds(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 2); [EOL]     result = DateUtils.addMilliseconds(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 0); [EOL] } <line_num>: 454,471
@Test [EOL] public void testSetYears() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setYears(base, 2000); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.setYears(base, 2008); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2008, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.setYears(base, 2005); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2005, 6, 5, 4, 3, 2, 1); [EOL] } <line_num>: 474,491
@Test [EOL] public void testSetMonths() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMonths(base, 5); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 5, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.setMonths(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 1, 5, 4, 3, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setMonths(base, 12); [EOL]         fail("DateUtils.setMonths did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 494,513
@Test [EOL] public void testSetDays() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setDays(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 1, 4, 3, 2, 1); [EOL]     result = DateUtils.setDays(base, 29); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 29, 4, 3, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setDays(base, 32); [EOL]         fail("DateUtils.setDays did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 516,535
@Test [EOL] public void testSetHours() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setHours(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 0, 3, 2, 1); [EOL]     result = DateUtils.setHours(base, 23); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 23, 3, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setHours(base, 24); [EOL]         fail("DateUtils.setHours did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 538,557
@Test [EOL] public void testSetMinutes() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMinutes(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 0, 2, 1); [EOL]     result = DateUtils.setMinutes(base, 59); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 59, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setMinutes(base, 60); [EOL]         fail("DateUtils.setMinutes did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 560,579
@Test [EOL] public void testSetSeconds() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setSeconds(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 0, 1); [EOL]     result = DateUtils.setSeconds(base, 59); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 59, 1); [EOL]     try { [EOL]         result = DateUtils.setSeconds(base, 60); [EOL]         fail("DateUtils.setSeconds did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 582,601
@Test [EOL] public void testSetMilliseconds() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMilliseconds(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 0); [EOL]     result = DateUtils.setMilliseconds(base, 999); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 999); [EOL]     try { [EOL]         result = DateUtils.setMilliseconds(base, 1000); [EOL]         fail("DateUtils.setMilliseconds did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] } <line_num>: 604,623
private void assertDate(final Date date, final int year, final int month, final int day, final int hour, final int min, final int sec, final int mil) throws Exception { [EOL]     final GregorianCalendar cal = new GregorianCalendar(); [EOL]     cal.setTime(date); [EOL]     assertEquals(year, cal.get(Calendar.YEAR)); [EOL]     assertEquals(month, cal.get(Calendar.MONTH)); [EOL]     assertEquals(day, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(min, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(sec, cal.get(Calendar.SECOND)); [EOL]     assertEquals(mil, cal.get(Calendar.MILLISECOND)); [EOL] } <line_num>: 626,636
@Test [EOL] public void testToCalendar() { [EOL]     assertEquals("Failed to convert to a Calendar and back", date1, DateUtils.toCalendar(date1).getTime()); [EOL]     try { [EOL]         DateUtils.toCalendar(null); [EOL]         fail("Expected NullPointerException to be thrown"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] } <line_num>: 639,648
@Test [EOL] public void testRound() throws Exception { [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round(date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round(date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-0 failed", dateParser.parse("February 1, 2002"), DateUtils.round(date0, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round(date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round(date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round(date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round(date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round(date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round(date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round(date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round(date2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("round year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("round year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.round((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("round month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.round((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("round month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.round((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("round semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.round((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.round((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("round date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.round((Object) date1, Calendar.DATE)); [EOL]     assertEquals("round date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.round((Object) date2, Calendar.DATE)); [EOL]     assertEquals("round hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.round((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("round hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.round((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("round minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.round((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("round minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.round((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("round second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("round second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.round((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("round calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.round((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.round((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.round(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertEquals("round ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.round((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("round ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.round((Object) calAmPm4, Calendar.AM_PM)); [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round(date7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.round((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 01:00:00.000"), DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("round MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date rounding tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL] } <line_num>: 654,872
@Test [EOL] public void testRoundLang346() throws Exception { [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Calendar testCalendar = Calendar.getInstance(); [EOL]     testCalendar.set(2007, 6, 2, 8, 8, 50); [EOL]     Date date = testCalendar.getTime(); [EOL]     assertEquals("Minute Round Up Failed", dateTimeParser.parse("July 2, 2007 08:09:00.000"), DateUtils.round(date, Calendar.MINUTE)); [EOL]     testCalendar.set(2007, 6, 2, 8, 8, 20); [EOL]     date = testCalendar.getTime(); [EOL]     assertEquals("Minute No Round Failed", dateTimeParser.parse("July 2, 2007 08:08:00.000"), DateUtils.round(date, Calendar.MINUTE)); [EOL]     testCalendar.set(2007, 6, 2, 8, 8, 50); [EOL]     testCalendar.set(Calendar.MILLISECOND, 600); [EOL]     date = testCalendar.getTime(); [EOL]     assertEquals("Second Round Up with 600 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:51.000"), DateUtils.round(date, Calendar.SECOND)); [EOL]     testCalendar.set(2007, 6, 2, 8, 8, 50); [EOL]     testCalendar.set(Calendar.MILLISECOND, 200); [EOL]     date = testCalendar.getTime(); [EOL]     assertEquals("Second Round Down with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:50.000"), DateUtils.round(date, Calendar.SECOND)); [EOL]     testCalendar.set(2007, 6, 2, 8, 8, 20); [EOL]     testCalendar.set(Calendar.MILLISECOND, 600); [EOL]     date = testCalendar.getTime(); [EOL]     assertEquals("Second Round Up with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:21.000"), DateUtils.round(date, Calendar.SECOND)); [EOL]     testCalendar.set(2007, 6, 2, 8, 8, 20); [EOL]     testCalendar.set(Calendar.MILLISECOND, 200); [EOL]     date = testCalendar.getTime(); [EOL]     assertEquals("Second Round Down with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:20.000"), DateUtils.round(date, Calendar.SECOND)); [EOL]     testCalendar.set(2007, 6, 2, 8, 8, 50); [EOL]     date = testCalendar.getTime(); [EOL]     assertEquals("Hour Round Down Failed", dateTimeParser.parse("July 2, 2007 08:00:00.000"), DateUtils.round(date, Calendar.HOUR)); [EOL]     testCalendar.set(2007, 6, 2, 8, 31, 50); [EOL]     date = testCalendar.getTime(); [EOL]     assertEquals("Hour Round Up Failed", dateTimeParser.parse("July 2, 2007 09:00:00.000"), DateUtils.round(date, Calendar.HOUR)); [EOL] } <line_num>: 878,936
@Test [EOL] public void testTruncate() throws Exception { [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate(date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate(date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate(date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate(date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate(date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate(date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate(date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate(date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate(date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate(date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate(date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate year-1 failed", dateParser.parse("January 1, 2002"), DateUtils.truncate((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("truncate year-2 failed", dateParser.parse("January 1, 2001"), DateUtils.truncate((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("truncate month-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("truncate month-2 failed", dateParser.parse("November 1, 2001"), DateUtils.truncate((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("truncate semimonth-1 failed", dateParser.parse("February 1, 2002"), DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate semimonth-2 failed", dateParser.parse("November 16, 2001"), DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("truncate date-1 failed", dateParser.parse("February 12, 2002"), DateUtils.truncate((Object) date1, Calendar.DATE)); [EOL]     assertEquals("truncate date-2 failed", dateParser.parse("November 18, 2001"), DateUtils.truncate((Object) date2, Calendar.DATE)); [EOL]     assertEquals("truncate hour-1 failed", dateTimeParser.parse("February 12, 2002 12:00:00.000"), DateUtils.truncate((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("truncate hour-2 failed", dateTimeParser.parse("November 18, 2001 1:00:00.000"), DateUtils.truncate((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("truncate minute-1 failed", dateTimeParser.parse("February 12, 2002 12:34:00.000"), DateUtils.truncate((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("truncate minute-2 failed", dateTimeParser.parse("November 18, 2001 1:23:00.000"), DateUtils.truncate((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("truncate second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("truncate second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("truncate calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:56.000"), DateUtils.truncate((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("truncate calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:11.000"), DateUtils.truncate((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("truncate ampm-1 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-2 failed", dateTimeParser.parse("February 3, 2002 00:00:00.000"), DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-3 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("truncate ampm-4 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.truncate((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.truncate("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate(date3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("March 30, 2003 00:00:00.000"), DateUtils.truncate((Object) cal3, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate(date8, Calendar.DATE)); [EOL]     assertEquals("truncate MET date across DST change-over", dateTimeParser.parse("October 26, 2003 00:00:00.000"), DateUtils.truncate((Object) cal8, Calendar.DATE)); [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.truncate(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] } <line_num>: 941,1128
@Test [EOL] public void testTruncateLang59() throws Exception { [EOL]     if (!SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         this.warn("WARNING: Test for LANG-59 not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]         return; [EOL]     } [EOL]     final TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT"); [EOL]     TimeZone.setDefault(MST_MDT); [EOL]     final DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z"); [EOL]     format.setTimeZone(MST_MDT); [EOL]     final Date oct31_01MDT = new Date(1099206000000L); [EOL]     final Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L); [EOL]     final Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L); [EOL]     final Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L); [EOL]     final Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L); [EOL]     assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT)); [EOL]     assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT)); [EOL]     assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT)); [EOL]     assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT)); [EOL]     assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT)); [EOL]     final Calendar gval = Calendar.getInstance(); [EOL]     gval.setTime(new Date(oct31_01MDT.getTime())); [EOL]     gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); [EOL]     assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L); [EOL]     assertEquals("Truncate Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND)); [EOL]     assertEquals("Truncate Calendar.SECOND", oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND)); [EOL]     assertEquals("Truncate Calendar.MINUTE", oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE)); [EOL]     assertEquals("Truncate Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("Truncate Calendar.HOUR", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR)); [EOL]     assertEquals("Truncate Calendar.DATE", oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE)); [EOL]     assertEquals("Round Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND)); [EOL]     assertEquals("Round Calendar.SECOND", oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND)); [EOL]     assertEquals("Round Calendar.MINUTE", oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE)); [EOL]     assertEquals("Round Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("Round Calendar.HOUR", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR)); [EOL]     assertEquals("Round Calendar.DATE", oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE)); [EOL]     TimeZone.setDefault(defaultZone); [EOL] } <line_num>: 1135,1208
@Test [EOL] public void testLang530() throws ParseException { [EOL]     final Date d = new Date(); [EOL]     final String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d); [EOL]     final Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() }); [EOL]     assertEquals("Date not equal to itself ISO formatted and parsed", d.getTime(), d2.getTime() + d.getTime() % 1000); [EOL] } <line_num>: 1211,1218
@Test [EOL] public void testCeil() throws Exception { [EOL]     assertEquals("ceiling javadoc-1 failed", dateTimeParser.parse("March 28, 2002 14:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.HOUR)); [EOL]     assertEquals("ceiling javadoc-2 failed", dateTimeParser.parse("April 1, 2002 00:00:00.000"), DateUtils.ceiling(dateTimeParser.parse("March 28, 2002 13:45:01.231"), Calendar.MONTH)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling(date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling(date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling year-1 failed", dateParser.parse("January 1, 2003"), DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]     assertEquals("ceiling year-2 failed", dateParser.parse("January 1, 2002"), DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]     assertEquals("ceiling month-1 failed", dateParser.parse("March 1, 2002"), DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]     assertEquals("ceiling month-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]     assertEquals("ceiling semimonth-1 failed", dateParser.parse("February 16, 2002"), DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling semimonth-2 failed", dateParser.parse("December 1, 2001"), DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]     assertEquals("ceiling date-1 failed", dateParser.parse("February 13, 2002"), DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]     assertEquals("ceiling date-2 failed", dateParser.parse("November 19, 2001"), DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]     assertEquals("ceiling hour-1 failed", dateTimeParser.parse("February 12, 2002 13:00:00.000"), DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]     assertEquals("ceiling hour-2 failed", dateTimeParser.parse("November 18, 2001 2:00:00.000"), DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]     assertEquals("ceiling minute-1 failed", dateTimeParser.parse("February 12, 2002 12:35:00.000"), DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]     assertEquals("ceiling minute-2 failed", dateTimeParser.parse("November 18, 2001 1:24:00.000"), DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]     assertEquals("ceiling second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]     assertEquals("ceiling second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]     assertEquals("ceiling calendar second-1 failed", dateTimeParser.parse("February 12, 2002 12:34:57.000"), DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]     assertEquals("ceiling calendar second-2 failed", dateTimeParser.parse("November 18, 2001 1:23:12.000"), DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]     assertEquals("ceiling ampm-1 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-2 failed", dateTimeParser.parse("February 3, 2002 12:00:00.000"), DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-3 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]     assertEquals("ceiling ampm-4 failed", dateTimeParser.parse("February 4, 2002 00:00:00.000"), DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]     try { [EOL]         DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling("", Calendar.SECOND); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.ceiling(date1, -9999); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     TimeZone.setDefault(zone); [EOL]     dateTimeParser.setTimeZone(zone); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling(date7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 31, 2003 00:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 03:00:00.000"), DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", dateTimeParser.parse("March 30, 2003 04:00:00.000"), DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]     } else { [EOL]         this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]     } [EOL]     TimeZone.setDefault(defaultZone); [EOL]     dateTimeParser.setTimeZone(defaultZone); [EOL]     final Date endOfTime = new Date(Long.MAX_VALUE); [EOL]     final GregorianCalendar endCal = new GregorianCalendar(); [EOL]     endCal.setTime(endOfTime); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000001); [EOL]     try { [EOL]         DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         fail(); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     endCal.set(Calendar.YEAR, 280000000); [EOL]     final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]     assertEquals(0, cal.get(Calendar.HOUR)); [EOL] } <line_num>: 1223,1468
@Test [EOL] public void testIteratorEx() throws Exception { [EOL]     try { [EOL]         DateUtils.iterator(Calendar.getInstance(), -9999); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER); [EOL]         fail(); [EOL]     } catch (final ClassCastException ex) { [EOL]     } [EOL] } <line_num>: 1473,1494
@Test [EOL] public void testWeekIterator() throws Exception { [EOL]     final Calendar now = Calendar.getInstance(); [EOL]     for (int i = 0; i < 7; i++) { [EOL]         final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]         final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]         sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]         final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]         if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]             monday.add(Calendar.DATE, -6); [EOL]         } else { [EOL]             monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]         } [EOL]         final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]         centered.add(Calendar.DATE, -3); [EOL]         Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]         assertWeekIterator(it, sunday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]         assertWeekIterator(it, monday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]         assertWeekIterator(it, today); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         try { [EOL]             it.next(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) { [EOL]         } [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         it.next(); [EOL]         try { [EOL]             it.remove(); [EOL]         } catch (final UnsupportedOperationException ex) { [EOL]         } [EOL]         now.add(Calendar.DATE, 1); [EOL]     } [EOL] } <line_num>: 1499,1541
@Test [EOL] public void testMonthIterator() throws Exception { [EOL]     Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 27, 2002"), dateParser.parse("March 2, 2002")); [EOL]     it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("January 28, 2002"), dateParser.parse("March 3, 2002")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 28, 2001"), dateParser.parse("December 1, 2001")); [EOL]     it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]     assertWeekIterator(it, dateParser.parse("October 29, 2001"), dateParser.parse("December 2, 2001")); [EOL] } <line_num>: 1546,1567
@Test [EOL] public void testLANG799_EN_OK() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL]     try { [EOL]         DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         DateUtils.parseDateStrictly("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] } <line_num>: 1569,1579
@Test(expected = ParseException.class) [EOL] public void testLANG799_EN_FAIL() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] } <line_num>: 1582,1591
@Test [EOL] public void testLANG799_DE_OK() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.GERMAN); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         DateUtils.parseDateStrictly("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] } <line_num>: 1593,1603
@Test(expected = ParseException.class) [EOL] public void testLANG799_DE_FAIL() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.GERMAN); [EOL]     try { [EOL]         DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] } <line_num>: 1606,1615
@Test [EOL] public void testLANG799_EN_WITH_DE_LOCALE() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.ENGLISH); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", Locale.GERMAN, "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] } <line_num>: 1618,1627
private static void assertWeekIterator(final Iterator<?> it, final Calendar start) { [EOL]     final Calendar end = (Calendar) start.clone(); [EOL]     end.add(Calendar.DATE, 6); [EOL]     assertWeekIterator(it, start, end); [EOL] } <line_num>: 1633,1638
private static void assertWeekIterator(final Iterator<?> it, final Date start, final Date end) { [EOL]     final Calendar calStart = Calendar.getInstance(); [EOL]     calStart.setTime(start); [EOL]     final Calendar calEnd = Calendar.getInstance(); [EOL]     calEnd.setTime(end); [EOL]     assertWeekIterator(it, calStart, calEnd); [EOL] } <line_num>: 1643,1650
private static void assertWeekIterator(final Iterator<?> it, final Calendar start, final Calendar end) { [EOL]     Calendar cal = (Calendar) it.next(); [EOL]     assertCalendarsEquals("", start, cal, 0); [EOL]     Calendar last = null; [EOL]     int count = 1; [EOL]     while (it.hasNext()) { [EOL]         assertCalendarsEquals("", cal, DateUtils.truncate(cal, Calendar.DATE), 0); [EOL]         last = cal; [EOL]         cal = (Calendar) it.next(); [EOL]         count++; [EOL]         last.add(Calendar.DATE, 1); [EOL]         assertCalendarsEquals("", last, cal, 0); [EOL]     } [EOL]     if (count % 7 != 0) { [EOL]         throw new AssertionFailedError("There were " + count + " days in this iterator"); [EOL]     } [EOL]     assertCalendarsEquals("", end, cal, 0); [EOL] } <line_num>: 1657,1678
private static void assertCalendarsEquals(final String message, final Calendar cal1, final Calendar cal2, final long delta) { [EOL]     if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) { [EOL]         throw new AssertionFailedError(message + " expected " + cal1.getTime() + " but got " + cal2.getTime()); [EOL]     } [EOL] } <line_num>: 1684,1689
void warn(final String msg) { [EOL]     System.err.println(msg); [EOL] } <line_num>: 1691,1693
