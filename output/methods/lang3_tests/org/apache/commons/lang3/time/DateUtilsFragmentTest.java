@Before [EOL] public void setUp() { [EOL]     aCalendar = Calendar.getInstance(); [EOL]     aCalendar.set(2005, months, days, hours, minutes, seconds); [EOL]     aCalendar.set(Calendar.MILLISECOND, millis); [EOL]     aDate = aCalendar.getTime(); [EOL] } <line_num>: 38,44
@Test [EOL] public void testNullDate() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 46,72
@Test [EOL] public void testNullCalendar() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 74,100
@Test [EOL] public void testInvalidFragmentWithDate() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aDate, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 102,128
@Test [EOL] public void testInvalidFragmentWithCalendar() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 130,156
@Test [EOL] public void testMillisecondFragmentInLargerUnitWithDate() { [EOL]     assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND)); [EOL] } <line_num>: 158,165
@Test [EOL] public void testMillisecondFragmentInLargerUnitWithCalendar() { [EOL]     assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND)); [EOL] } <line_num>: 167,174
@Test [EOL] public void testSecondFragmentInLargerUnitWithDate() { [EOL]     assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND)); [EOL] } <line_num>: 176,182
@Test [EOL] public void testSecondFragmentInLargerUnitWithCalendar() { [EOL]     assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND)); [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND)); [EOL] } <line_num>: 184,190
@Test [EOL] public void testMinuteFragmentInLargerUnitWithDate() { [EOL]     assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]     assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL] } <line_num>: 192,197
@Test [EOL] public void testMinuteFragmentInLargerUnitWithCalendar() { [EOL]     assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE)); [EOL]     assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE)); [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE)); [EOL] } <line_num>: 199,204
@Test [EOL] public void testHourOfDayFragmentInLargerUnitWithDate() { [EOL]     assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY)); [EOL] } <line_num>: 206,210
@Test [EOL] public void testHourOfDayFragmentInLargerUnitWithCalendar() { [EOL]     assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY)); [EOL] } <line_num>: 212,216
@Test [EOL] public void testDayOfYearFragmentInLargerUnitWithDate() { [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR)); [EOL] } <line_num>: 218,221
@Test [EOL] public void testDayOfYearFragmentInLargerUnitWithCalendar() { [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR)); [EOL] } <line_num>: 223,226
@Test [EOL] public void testDateFragmentInLargerUnitWithDate() { [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE)); [EOL] } <line_num>: 228,231
@Test [EOL] public void testDateFragmentInLargerUnitWithCalendar() { [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE)); [EOL] } <line_num>: 233,236
@Test [EOL] public void testMillisecondsOfSecondWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND); [EOL]     assertEquals(millis, testResult); [EOL] } <line_num>: 240,244
@Test [EOL] public void testMillisecondsOfSecondWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND); [EOL]     assertEquals(millis, testResult); [EOL]     assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult); [EOL] } <line_num>: 246,251
@Test [EOL] public void testMillisecondsOfMinuteWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult); [EOL] } <line_num>: 255,259
@Test [EOL] public void testMillisecondsOfMinuteWithCalender() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult); [EOL] } <line_num>: 261,265
@Test [EOL] public void testSecondsofMinuteWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE); [EOL]     assertEquals(seconds, testResult); [EOL] } <line_num>: 267,271
@Test [EOL] public void testSecondsofMinuteWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE); [EOL]     assertEquals(seconds, testResult); [EOL]     assertEquals(aCalendar.get(Calendar.SECOND), testResult); [EOL] } <line_num>: 273,278
@Test [EOL] public void testMillisecondsOfHourWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult); [EOL] } <line_num>: 282,286
@Test [EOL] public void testMillisecondsOfHourWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult); [EOL] } <line_num>: 288,292
@Test [EOL] public void testSecondsofHourWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY); [EOL]     assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND), testResult); [EOL] } <line_num>: 294,302
@Test [EOL] public void testSecondsofHourWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY); [EOL]     assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND), testResult); [EOL] } <line_num>: 304,312
@Test [EOL] public void testMinutesOfHourWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY); [EOL]     assertEquals(minutes, testResult); [EOL] } <line_num>: 314,318
@Test [EOL] public void testMinutesOfHourWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY); [EOL]     assertEquals(minutes, testResult); [EOL] } <line_num>: 320,324
@Test [EOL] public void testMillisecondsOfDayWithDate() { [EOL]     long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE); [EOL]     final long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); [EOL]     assertEquals(expectedValue, testresult); [EOL]     testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testresult); [EOL] } <line_num>: 327,334
@Test [EOL] public void testMillisecondsOfDayWithCalendar() { [EOL]     long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE); [EOL]     final long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); [EOL]     assertEquals(expectedValue, testresult); [EOL]     testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testresult); [EOL] } <line_num>: 336,343
@Test [EOL] public void testSecondsOfDayWithDate() { [EOL]     long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE); [EOL]     final long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR)) / DateUtils.MILLIS_PER_SECOND; [EOL]     assertEquals(expectedValue, testresult); [EOL]     testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testresult); [EOL] } <line_num>: 345,352
@Test [EOL] public void testSecondsOfDayWithCalendar() { [EOL]     long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE); [EOL]     final long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR)) / DateUtils.MILLIS_PER_SECOND; [EOL]     assertEquals(expectedValue, testresult); [EOL]     testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testresult); [EOL] } <line_num>: 354,361
@Test [EOL] public void testMinutesOfDayWithDate() { [EOL]     long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE); [EOL]     final long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR)) / DateUtils.MILLIS_PER_MINUTE; [EOL]     assertEquals(expectedValue, testResult); [EOL]     testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testResult); [EOL] } <line_num>: 363,370
@Test [EOL] public void testMinutesOfDayWithCalendar() { [EOL]     long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE); [EOL]     final long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR)) / DateUtils.MILLIS_PER_MINUTE; [EOL]     assertEquals(expectedValue, testResult); [EOL]     testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testResult); [EOL] } <line_num>: 372,379
@Test [EOL] public void testHoursOfDayWithDate() { [EOL]     long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE); [EOL]     final long expectedValue = hours; [EOL]     assertEquals(expectedValue, testResult); [EOL]     testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testResult); [EOL] } <line_num>: 381,388
@Test [EOL] public void testHoursOfDayWithCalendar() { [EOL]     long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE); [EOL]     final long expectedValue = hours; [EOL]     assertEquals(expectedValue, testResult); [EOL]     testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testResult); [EOL] } <line_num>: 390,397
@Test [EOL] public void testMillisecondsOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY), testResult); [EOL] } <line_num>: 401,407
@Test [EOL] public void testMillisecondsOfMonthWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY), testResult); [EOL] } <line_num>: 409,415
@Test [EOL] public void testSecondsOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] } <line_num>: 417,426
@Test [EOL] public void testSecondsOfMonthWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] } <line_num>: 428,437
@Test [EOL] public void testMinutesOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH); [EOL]     assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE, testResult); [EOL] } <line_num>: 439,446
@Test [EOL] public void testMinutesOfMonthWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH); [EOL]     assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE, testResult); [EOL] } <line_num>: 448,454
@Test [EOL] public void testHoursOfMonthWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH); [EOL]     assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR, testResult); [EOL] } <line_num>: 456,462
@Test [EOL] public void testHoursOfMonthWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH); [EOL]     assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR, testResult); [EOL] } <line_num>: 464,470
@Test [EOL] public void testMillisecondsOfYearWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.setTime(aDate); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY), testResult); [EOL] } <line_num>: 473,481
@Test [EOL] public void testMillisecondsOfYearWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY), testResult); [EOL] } <line_num>: 483,489
@Test [EOL] public void testSecondsOfYearWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.setTime(aDate); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] } <line_num>: 491,502
@Test [EOL] public void testSecondsOfYearWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR); [EOL]     assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND, testResult); [EOL] } <line_num>: 504,513
@Test [EOL] public void testMinutesOfYearWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.setTime(aDate); [EOL]     assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE, testResult); [EOL] } <line_num>: 515,524
@Test [EOL] public void testMinutesOfYearWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR); [EOL]     assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE, testResult); [EOL] } <line_num>: 526,532
@Test [EOL] public void testHoursOfYearWithDate() { [EOL]     final long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.setTime(aDate); [EOL]     assertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR, testResult); [EOL] } <line_num>: 534,542
@Test [EOL] public void testHoursOfYearWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR); [EOL]     assertEquals(hours + ((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR, testResult); [EOL] } <line_num>: 544,550
