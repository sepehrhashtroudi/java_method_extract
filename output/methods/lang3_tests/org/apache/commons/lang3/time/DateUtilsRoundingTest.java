@Before [EOL] public void setUp() throws Exception { [EOL]     dateTimeParser = new SimpleDateFormat("MMM dd, yyyy H:mm:ss.SSS", Locale.ENGLISH); [EOL]     targetYearDate = dateTimeParser.parse("January 1, 2007 0:00:00.000"); [EOL]     targetDateDate = targetDayOfMonthDate = dateTimeParser.parse("June 1, 2008 0:00:00.000"); [EOL]     targetAmDate = dateTimeParser.parse("June 1, 2008 0:00:00.000"); [EOL]     targetPmDate = dateTimeParser.parse("June 1, 2008 12:00:00.000"); [EOL]     targetHourDate = dateTimeParser.parse("June 1, 2008 8:00:00.000"); [EOL]     targetHourOfDayDate = dateTimeParser.parse("June 1, 2008 8:00:00.000"); [EOL]     targetMinuteDate = dateTimeParser.parse("June 1, 2008 8:15:00.000"); [EOL]     targetSecondDate = dateTimeParser.parse("June 1, 2008 8:15:14.000"); [EOL]     targetMilliSecondDate = dateTimeParser.parse("June 1, 2008 8:15:14.231"); [EOL]     januaryOneDate = dateTimeParser.parse("January 1, 2008 0:00:00.000"); [EOL]     januaryOneCalendar = Calendar.getInstance(); [EOL]     januaryOneCalendar.setTime(januaryOneDate); [EOL] } <line_num>: 58,76
@Test [EOL] public void testRoundYear() throws Exception { [EOL]     final int calendarField = Calendar.YEAR; [EOL]     final Date roundedUpDate = dateTimeParser.parse("January 1, 2008 0:00:00.000"); [EOL]     final Date roundedDownDate = targetYearDate; [EOL]     final Date lastRoundedDownDate = dateTimeParser.parse("June 30, 2007 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL] } <line_num>: 84,91
@Test [EOL] public void testRoundMonth() throws Exception { [EOL]     final int calendarField = Calendar.MONTH; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("February 15, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("April 1, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("April 15, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("May 16, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 17, 2007 00:00:00.000"); [EOL]     maxDate = dateTimeParser.parse("January 16, 2008 23:59:59.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 101,135
@Test [EOL] public void testRoundSemiMonth() throws Exception { [EOL]     final int calendarField = DateUtils.SEMI_MONTH; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("February 16, 2007 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("February 8, 2007 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("February 16, 2007 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("February 23, 2007 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("February 16, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("February 8, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("February 16, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("February 23, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("April 16, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("April 1, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("April 8, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("April 16, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("April 23, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("May 16, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("May 8, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 0:00:00.000"); [EOL]     roundedDownDate = dateTimeParser.parse("May 16, 2008 0:00:00.000"); [EOL]     lastRoundedDownDate = dateTimeParser.parse("May 23, 2008 23:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 24, 2007 00:00:00.000"); [EOL]     maxDate = dateTimeParser.parse("January 8, 2008 23:59:59.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 145,203
@Test [EOL] public void testRoundDate() throws Exception { [EOL]     final int calendarField = Calendar.DATE; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000"); [EOL]     roundedDownDate = targetDateDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 11:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 12:00:00.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 11:59:59.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 213,228
@Test [EOL] public void testRoundDayOfMonth() throws Exception { [EOL]     final int calendarField = Calendar.DAY_OF_MONTH; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000"); [EOL]     roundedDownDate = targetDayOfMonthDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 11:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 12:00:00.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 11:59:59.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 238,253
@Test [EOL] public void testRoundAmPm() throws Exception { [EOL]     final int calendarField = Calendar.AM_PM; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 12:00:00.000"); [EOL]     roundedDownDate = targetAmDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 5:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000"); [EOL]     roundedDownDate = targetPmDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 17:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 18:00:00.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 5:59:59.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 263,285
@Test [EOL] public void testRoundHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 9:00:00.000"); [EOL]     roundedDownDate = targetHourOfDayDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:29:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:30:00.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:29:59.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 295,310
@Test [EOL] public void testRoundHour() throws Exception { [EOL]     final int calendarField = Calendar.HOUR; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 9:00:00.000"); [EOL]     roundedDownDate = targetHourDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:29:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:30:00.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:29:59.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 320,335
@Test [EOL] public void testRoundMinute() throws Exception { [EOL]     final int calendarField = Calendar.MINUTE; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 8:16:00.000"); [EOL]     roundedDownDate = targetMinuteDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:29.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:59:30.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:00:29.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 345,360
@Test [EOL] public void testRoundSecond() throws Exception { [EOL]     final int calendarField = Calendar.SECOND; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 8:15:15.000"); [EOL]     roundedDownDate = targetSecondDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:14.499"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:59:59.500"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:00:00.499"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 370,385
@Test [EOL] public void testRoundMilliSecond() throws Exception { [EOL]     final int calendarField = Calendar.MILLISECOND; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedDownDate = lastRoundedDownDate = targetMilliSecondDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 8:15:14.232"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = maxDate = januaryOneDate; [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] } <line_num>: 395,408
@Test [EOL] public void testTruncateYear() throws Exception { [EOL]     final int calendarField = Calendar.YEAR; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("December 31, 2007 23:59:59.999"); [EOL]     baseTruncateTest(targetYearDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 416,421
@Test [EOL] public void testTruncateMonth() throws Exception { [EOL]     final int calendarField = Calendar.MONTH; [EOL]     final Date truncatedDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]     final Date lastTruncateDate = dateTimeParser.parse("March 31, 2008 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 429,435
@Test [EOL] public void testTruncateSemiMonth() throws Exception { [EOL]     final int calendarField = DateUtils.SEMI_MONTH; [EOL]     Date truncatedDate, lastTruncateDate; [EOL]     truncatedDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); [EOL]     lastTruncateDate = dateTimeParser.parse("February 15, 2007 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL]     truncatedDate = dateTimeParser.parse("February 16, 2007 0:00:00.000"); [EOL]     lastTruncateDate = dateTimeParser.parse("February 28, 2007 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL]     truncatedDate = dateTimeParser.parse("February 1, 2008 0:00:00.000"); [EOL]     lastTruncateDate = dateTimeParser.parse("February 15, 2008 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL]     truncatedDate = dateTimeParser.parse("February 16, 2008 0:00:00.000"); [EOL]     lastTruncateDate = dateTimeParser.parse("February 29, 2008 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL]     truncatedDate = dateTimeParser.parse("April 1, 2008 0:00:00.000"); [EOL]     lastTruncateDate = dateTimeParser.parse("April 15, 2008 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL]     truncatedDate = dateTimeParser.parse("April 16, 2008 0:00:00.000"); [EOL]     lastTruncateDate = dateTimeParser.parse("April 30, 2008 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL]     truncatedDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]     lastTruncateDate = dateTimeParser.parse("March 15, 2008 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL]     truncatedDate = dateTimeParser.parse("March 16, 2008 0:00:00.000"); [EOL]     lastTruncateDate = dateTimeParser.parse("March 31, 2008 23:59:59.999"); [EOL]     baseTruncateTest(truncatedDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 444,489
@Test [EOL] public void testTruncateDate() throws Exception { [EOL]     final int calendarField = Calendar.DATE; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); [EOL]     baseTruncateTest(targetDateDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 497,502
@Test [EOL] public void testTruncateDayOfMonth() throws Exception { [EOL]     final int calendarField = Calendar.DAY_OF_MONTH; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); [EOL]     baseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 510,515
@Test [EOL] public void testTruncateAmPm() throws Exception { [EOL]     final int calendarField = Calendar.AM_PM; [EOL]     Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 11:59:59.999"); [EOL]     baseTruncateTest(targetAmDate, lastTruncateDate, calendarField); [EOL]     lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); [EOL]     baseTruncateTest(targetPmDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 524,535
@Test [EOL] public void testTruncateHour() throws Exception { [EOL]     final int calendarField = Calendar.HOUR; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 543,548
@Test [EOL] public void testTruncateHourOfDay() throws Exception { [EOL]     final int calendarField = Calendar.HOUR_OF_DAY; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:59:59.999"); [EOL]     baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 556,561
@Test [EOL] public void testTruncateMinute() throws Exception { [EOL]     final int calendarField = Calendar.MINUTE; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]     baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 569,574
@Test [EOL] public void testTruncateSecond() throws Exception { [EOL]     final int calendarField = Calendar.SECOND; [EOL]     final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:14.999"); [EOL]     baseTruncateTest(targetSecondDate, lastTruncateDate, calendarField); [EOL] } <line_num>: 582,587
@Test [EOL] public void testTruncateMilliSecond() throws Exception { [EOL]     final int calendarField = Calendar.MILLISECOND; [EOL]     baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField); [EOL] } <line_num>: 595,599
protected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) { [EOL]     final Date firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1); [EOL]     assertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField)); [EOL]     assertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField)); [EOL]     assertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField)); [EOL]     assertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField)); [EOL]     Calendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar; [EOL]     roundedDownCalendar = Calendar.getInstance(); [EOL]     roundedUpCalendar = Calendar.getInstance(); [EOL]     lastRoundDownCalendar = Calendar.getInstance(); [EOL]     firstRoundUpCalendar = Calendar.getInstance(); [EOL]     roundedDownCalendar.setTime(roundedDownDate); [EOL]     roundedUpCalendar.setTime(roundedUpDate); [EOL]     lastRoundDownCalendar.setTime(lastRoundDownDate); [EOL]     firstRoundUpCalendar.setTime(firstRoundUpDate); [EOL]     assertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField)); [EOL]     assertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField)); [EOL]     assertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField)); [EOL]     assertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField)); [EOL]     assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField)); [EOL]     assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField)); [EOL]     assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField)); [EOL]     assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField)); [EOL]     assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField)); [EOL]     assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField)); [EOL]     assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField)); [EOL]     assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField)); [EOL] } <line_num>: 613,648
protected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) { [EOL]     final Date nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1); [EOL]     assertEquals("Truncating " + fdf.format(truncatedDate) + " as Date with CalendarField-value " + calendarField + " must return itself", truncatedDate, DateUtils.truncate(truncatedDate, calendarField)); [EOL]     assertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField)); [EOL]     assertFalse(fdf.format(lastTruncateDate) + " is not an extreme when truncating as Date with CalendarField-value " + calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField))); [EOL]     Calendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar; [EOL]     truncatedCalendar = Calendar.getInstance(); [EOL]     lastTruncateCalendar = Calendar.getInstance(); [EOL]     nextTruncateCalendar = Calendar.getInstance(); [EOL]     truncatedCalendar.setTime(truncatedDate); [EOL]     lastTruncateCalendar.setTime(lastTruncateDate); [EOL]     nextTruncateCalendar.setTime(nextTruncateDate); [EOL]     assertEquals("Truncating " + fdf.format(truncatedCalendar) + " as Calendar with CalendarField-value " + calendarField + " must return itself", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField)); [EOL]     assertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField)); [EOL]     assertFalse(fdf.format(lastTruncateCalendar) + " is not an extreme when truncating as Calendar with CalendarField-value " + calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField))); [EOL]     assertEquals("Truncating " + fdf.format(truncatedDate) + " as Date cast to Object with CalendarField-value " + calendarField + " must return itself as Date", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField)); [EOL]     assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField)); [EOL]     assertFalse(fdf.format(lastTruncateDate) + " is not an extreme when truncating as Date cast to Object with CalendarField-value " + calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField))); [EOL]     assertEquals("Truncating " + fdf.format(truncatedCalendar) + " as Calendar cast to Object with CalendarField-value " + calendarField + " must return itself as Date", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField)); [EOL]     assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField)); [EOL]     assertFalse(fdf.format(lastTruncateCalendar) + " is not an extreme when truncating as Calendar cast to Object with CalendarField-value " + calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField))); [EOL] } <line_num>: 661,690
protected void roundToJanuaryFirst(final Date minDate, final Date maxDate, final int calendarField) { [EOL]     assertEquals("Rounding " + fdf.format(januaryOneDate) + " as Date with CalendarField-value " + calendarField + " must return itself", januaryOneDate, DateUtils.round(januaryOneDate, calendarField)); [EOL]     assertEquals(januaryOneDate, DateUtils.round(minDate, calendarField)); [EOL]     assertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField)); [EOL]     final Calendar minCalendar = Calendar.getInstance(); [EOL]     minCalendar.setTime(minDate); [EOL]     final Calendar maxCalendar = Calendar.getInstance(); [EOL]     maxCalendar.setTime(maxDate); [EOL]     assertEquals("Rounding " + fdf.format(januaryOneCalendar) + " as Date with CalendarField-value " + calendarField + " must return itself", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField)); [EOL]     assertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField)); [EOL]     assertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField)); [EOL]     final Date toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1); [EOL]     final Date toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1); [EOL]     assertFalse(fdf.format(minDate) + " is not an lower-extreme when rounding as Date with CalendarField-value " + calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField))); [EOL]     assertFalse(fdf.format(maxDate) + " is not an upper-extreme when rounding as Date with CalendarField-value " + calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField))); [EOL]     final Calendar toPrevRoundCalendar = Calendar.getInstance(); [EOL]     toPrevRoundCalendar.setTime(toPrevRoundDate); [EOL]     final Calendar toNextRoundCalendar = Calendar.getInstance(); [EOL]     toNextRoundCalendar.setTime(toNextRoundDate); [EOL]     assertFalse(fdf.format(minCalendar) + " is not an lower-extreme when rounding as Date with CalendarField-value " + calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField))); [EOL]     assertFalse(fdf.format(maxCalendar) + " is not an upper-extreme when rounding as Date with CalendarField-value " + calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField))); [EOL] } <line_num>: 702,726
