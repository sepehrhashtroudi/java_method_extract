@Test(expected = NullPointerException.class) [EOL] public void testAddNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(null); [EOL] } <line_num>: 45,50
@Test(expected = NullPointerException.class) [EOL] public void testRemoveNullListener() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.removeListener(null); [EOL] } <line_num>: 52,57
@Test [EOL] public void testEventDispatchOrder() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     final List<VetoableChangeListener> calledListeners = new ArrayList<VetoableChangeListener>(); [EOL]     final VetoableChangeListener listener1 = createListener(calledListeners); [EOL]     final VetoableChangeListener listener2 = createListener(calledListeners); [EOL]     listenerSupport.addListener(listener1); [EOL]     listenerSupport.addListener(listener2); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(calledListeners.size(), 2); [EOL]     assertSame(calledListeners.get(0), listener1); [EOL]     assertSame(calledListeners.get(1), listener2); [EOL] } <line_num>: 59,73
@Test(expected = IllegalArgumentException.class) [EOL] public void testCreateWithNonInterfaceParameter() { [EOL]     EventListenerSupport.create(String.class); [EOL] } <line_num>: 75,79
@Test(expected = NullPointerException.class) [EOL] public void testCreateWithNullParameter() { [EOL]     EventListenerSupport.create(null); [EOL] } <line_num>: 81,85
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] } <line_num>: 87,98
@Test [EOL] public void testGetListeners() { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     final VetoableChangeListener[] listeners = listenerSupport.getListeners(); [EOL]     assertEquals(0, listeners.length); [EOL]     assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); [EOL]     final VetoableChangeListener[] empty = listeners; [EOL]     assertSame(empty, listenerSupport.getListeners()); [EOL]     final VetoableChangeListener listener1 = EasyMock.createNiceMock(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(listener1); [EOL]     assertEquals(1, listenerSupport.getListeners().length); [EOL]     final VetoableChangeListener listener2 = EasyMock.createNiceMock(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(listener2); [EOL]     assertEquals(2, listenerSupport.getListeners().length); [EOL]     listenerSupport.removeListener(listener1); [EOL]     assertEquals(1, listenerSupport.getListeners().length); [EOL]     listenerSupport.removeListener(listener2); [EOL]     assertSame(empty, listenerSupport.getListeners()); [EOL] } <line_num>: 100,121
@Override [EOL] public void vetoableChange(final PropertyChangeEvent e) { [EOL] } <line_num>: 128,130
@Test [EOL] public void testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     listenerSupport.addListener(new VetoableChangeListener() { [EOL]  [EOL]         @Override [EOL]         public void vetoableChange(final PropertyChangeEvent e) { [EOL]         } [EOL]     }); [EOL]     listenerSupport.addListener(EasyMock.createNiceMock(VetoableChangeListener.class)); [EOL]     final ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream); [EOL]     objectOutputStream.writeObject(listenerSupport); [EOL]     objectOutputStream.close(); [EOL]     @SuppressWarnings("unchecked") [EOL]     final EventListenerSupport<VetoableChangeListener> deserializedListenerSupport = (EventListenerSupport<VetoableChangeListener>) new ObjectInputStream(new ByteArrayInputStream(outputStream.toByteArray())).readObject(); [EOL]     final VetoableChangeListener[] listeners = deserializedListenerSupport.getListeners(); [EOL]     assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType()); [EOL]     assertEquals(1, listeners.length); [EOL]     final VetoableChangeListener listener = listeners[0]; [EOL]     final PropertyChangeEvent evt = new PropertyChangeEvent(new Date(), "Day", 7, 9); [EOL]     listener.vetoableChange(evt); [EOL]     EasyMock.replay(listener); [EOL]     deserializedListenerSupport.fire().vetoableChange(evt); [EOL]     EasyMock.verify(listener); [EOL]     deserializedListenerSupport.removeListener(listener); [EOL]     assertEquals(0, deserializedListenerSupport.getListeners().length); [EOL] } <line_num>: 123,163
@Override [EOL] public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable { [EOL]     return "vetoableChange".equals(method.getName()) && "Hour".equals(((PropertyChangeEvent) args[0]).getPropertyName()) ? null : super.invoke(proxy, method, args); [EOL] } <line_num>: 178,184
@Override [EOL] protected java.lang.reflect.InvocationHandler createInvocationHandler() { [EOL]     return new ProxyInvocationHandler() { [EOL]  [EOL]         @Override [EOL]         public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable { [EOL]             return "vetoableChange".equals(method.getName()) && "Hour".equals(((PropertyChangeEvent) args[0]).getPropertyName()) ? null : super.invoke(proxy, method, args); [EOL]         } [EOL]     }; [EOL] } <line_num>: 172,186
@Test [EOL] public void testSubclassInvocationHandling() throws PropertyVetoException { [EOL]     @SuppressWarnings("serial") [EOL]     final EventListenerSupport<VetoableChangeListener> eventListenerSupport = new EventListenerSupport<VetoableChangeListener>(VetoableChangeListener.class) { [EOL]  [EOL]         @Override [EOL]         protected java.lang.reflect.InvocationHandler createInvocationHandler() { [EOL]             return new ProxyInvocationHandler() { [EOL]  [EOL]                 @Override [EOL]                 public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable { [EOL]                     return "vetoableChange".equals(method.getName()) && "Hour".equals(((PropertyChangeEvent) args[0]).getPropertyName()) ? null : super.invoke(proxy, method, args); [EOL]                 } [EOL]             }; [EOL]         } [EOL]     }; [EOL]     final VetoableChangeListener listener = EasyMock.createNiceMock(VetoableChangeListener.class); [EOL]     eventListenerSupport.addListener(listener); [EOL]     final Object source = new Date(); [EOL]     final PropertyChangeEvent ignore = new PropertyChangeEvent(source, "Hour", 5, 6); [EOL]     final PropertyChangeEvent respond = new PropertyChangeEvent(source, "Day", 6, 7); [EOL]     listener.vetoableChange(respond); [EOL]     EasyMock.replay(listener); [EOL]     eventListenerSupport.fire().vetoableChange(ignore); [EOL]     eventListenerSupport.fire().vetoableChange(respond); [EOL]     EasyMock.verify(listener); [EOL] } <line_num>: 165,199
@Override [EOL] public void vetoableChange(final PropertyChangeEvent e) { [EOL]     listenerSupport.removeListener(this); [EOL] } <line_num>: 205,209
private void addDeregisterListener(final EventListenerSupport<VetoableChangeListener> listenerSupport) { [EOL]     listenerSupport.addListener(new VetoableChangeListener() { [EOL]  [EOL]         @Override [EOL]         public void vetoableChange(final PropertyChangeEvent e) { [EOL]             listenerSupport.removeListener(this); [EOL]         } [EOL]     }); [EOL] } <line_num>: 201,211
@Override [EOL] public void vetoableChange(final PropertyChangeEvent e) { [EOL]     calledListeners.add(this); [EOL] } <line_num>: 217,221
private VetoableChangeListener createListener(final List<VetoableChangeListener> calledListeners) { [EOL]     return new VetoableChangeListener() { [EOL]  [EOL]         @Override [EOL]         public void vetoableChange(final PropertyChangeEvent e) { [EOL]             calledListeners.add(this); [EOL]         } [EOL]     }; [EOL] } <line_num>: 213,223
