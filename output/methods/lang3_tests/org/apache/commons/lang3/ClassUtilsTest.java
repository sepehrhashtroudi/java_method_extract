@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new ClassUtils()); [EOL]     final Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(ClassUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(ClassUtils.class.getModifiers())); [EOL] } <line_num>: 56,64
@Test [EOL] public void test_getShortClassName_Object() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL] } <line_num>: 67,79
@Test [EOL] public void test_getShortClassName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); [EOL]     assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); [EOL]     assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); [EOL]     assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); [EOL]     assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); [EOL]     assertEquals("byte", ClassUtils.getShortClassName(byte.class)); [EOL]     assertEquals("char", ClassUtils.getShortClassName(char.class)); [EOL]     assertEquals("short", ClassUtils.getShortClassName(short.class)); [EOL]     assertEquals("int", ClassUtils.getShortClassName(int.class)); [EOL]     assertEquals("long", ClassUtils.getShortClassName(long.class)); [EOL]     assertEquals("float", ClassUtils.getShortClassName(float.class)); [EOL]     assertEquals("double", ClassUtils.getShortClassName(double.class)); [EOL]     assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); [EOL]     assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); [EOL]     assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); [EOL]     assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); [EOL]     assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); [EOL]     assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); [EOL]     assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); [EOL]     assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); [EOL]     assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); [EOL]     assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); [EOL]     assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); [EOL] } <line_num>: 81,121
@Test [EOL] public void test_getShortClassName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); [EOL]     assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); [EOL]     assertEquals("", ClassUtils.getShortClassName((String) null)); [EOL]     assertEquals("", ClassUtils.getShortClassName("")); [EOL] } <line_num>: 125,131
@Test [EOL] public void test_getSimpleName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getSimpleName(ClassUtils.class)); [EOL]     assertEquals("Entry", ClassUtils.getSimpleName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getSimpleName((Class<?>) null)); [EOL]     assertEquals("String[]", ClassUtils.getSimpleName(String[].class)); [EOL]     assertEquals("Entry[]", ClassUtils.getSimpleName(Map.Entry[].class)); [EOL]     assertEquals("boolean", ClassUtils.getSimpleName(boolean.class)); [EOL]     assertEquals("byte", ClassUtils.getSimpleName(byte.class)); [EOL]     assertEquals("char", ClassUtils.getSimpleName(char.class)); [EOL]     assertEquals("short", ClassUtils.getSimpleName(short.class)); [EOL]     assertEquals("int", ClassUtils.getSimpleName(int.class)); [EOL]     assertEquals("long", ClassUtils.getSimpleName(long.class)); [EOL]     assertEquals("float", ClassUtils.getSimpleName(float.class)); [EOL]     assertEquals("double", ClassUtils.getSimpleName(double.class)); [EOL]     assertEquals("boolean[]", ClassUtils.getSimpleName(boolean[].class)); [EOL]     assertEquals("byte[]", ClassUtils.getSimpleName(byte[].class)); [EOL]     assertEquals("char[]", ClassUtils.getSimpleName(char[].class)); [EOL]     assertEquals("short[]", ClassUtils.getSimpleName(short[].class)); [EOL]     assertEquals("int[]", ClassUtils.getSimpleName(int[].class)); [EOL]     assertEquals("long[]", ClassUtils.getSimpleName(long[].class)); [EOL]     assertEquals("float[]", ClassUtils.getSimpleName(float[].class)); [EOL]     assertEquals("double[]", ClassUtils.getSimpleName(double[].class)); [EOL]     assertEquals("String[][]", ClassUtils.getSimpleName(String[][].class)); [EOL]     assertEquals("String[][][]", ClassUtils.getSimpleName(String[][][].class)); [EOL]     assertEquals("String[][][][]", ClassUtils.getSimpleName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("", ClassUtils.getSimpleName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("Named", ClassUtils.getSimpleName(Named.class)); [EOL] } <line_num>: 133,172
@Test [EOL] public void test_getSimpleName_Object() { [EOL]     assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]     assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]     assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); [EOL] } <line_num>: 174,180
@Test [EOL] public void test_getPackageName_Object() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>")); [EOL]     assertEquals("<null>", ClassUtils.getPackageName(null, "<null>")); [EOL] } <line_num>: 183,188
@Test [EOL] public void test_getPackageName_Class() { [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String.class)); [EOL]     assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getPackageName((Class<?>) null)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(boolean[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(byte[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(char[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(short[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(int[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(long[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(float[].class)); [EOL]     assertEquals("", ClassUtils.getPackageName(double[].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class)); [EOL]     assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class)); [EOL] } <line_num>: 190,218
@Test [EOL] public void test_getPackageName_String() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); [EOL]     assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); [EOL]     assertEquals("", ClassUtils.getPackageName((String) null)); [EOL]     assertEquals("", ClassUtils.getPackageName("")); [EOL] } <line_num>: 220,226
@Test [EOL] public void test_getAllSuperclasses_Class() { [EOL]     final List<?> list = ClassUtils.getAllSuperclasses(CY.class); [EOL]     assertEquals(2, list.size()); [EOL]     assertEquals(CX.class, list.get(0)); [EOL]     assertEquals(Object.class, list.get(1)); [EOL]     assertEquals(null, ClassUtils.getAllSuperclasses(null)); [EOL] } <line_num>: 229,237
@Test [EOL] public void test_getAllInterfaces_Class() { [EOL]     final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]     assertEquals(6, list.size()); [EOL]     assertEquals(IB.class, list.get(0)); [EOL]     assertEquals(IC.class, list.get(1)); [EOL]     assertEquals(ID.class, list.get(2)); [EOL]     assertEquals(IE.class, list.get(3)); [EOL]     assertEquals(IF.class, list.get(4)); [EOL]     assertEquals(IA.class, list.get(5)); [EOL]     assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL] } <line_num>: 239,251
@Test [EOL] public void test_convertClassNamesToClasses_List() { [EOL]     final List<String> list = new ArrayList<String>(); [EOL]     List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(0, result.size()); [EOL]     list.add("java.lang.String"); [EOL]     list.add("java.lang.xxx"); [EOL]     list.add("java.lang.Object"); [EOL]     result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(String.class, result.get(0)); [EOL]     assertEquals(null, result.get(1)); [EOL]     assertEquals(Object.class, result.get(2)); [EOL]     @SuppressWarnings("unchecked") [EOL]     final List<Object> olist = (List<Object>) (List<?>) list; [EOL]     olist.add(new Object()); [EOL]     try { [EOL]         ClassUtils.convertClassNamesToClasses(list); [EOL]         fail("Should not have been able to convert list"); [EOL]     } catch (final ClassCastException expected) { [EOL]     } [EOL]     assertEquals(null, ClassUtils.convertClassNamesToClasses(null)); [EOL] } <line_num>: 271,295
@Test [EOL] public void test_convertClassesToClassNames_List() { [EOL]     final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]     List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]     assertEquals(0, result.size()); [EOL]     list.add(String.class); [EOL]     list.add(null); [EOL]     list.add(Object.class); [EOL]     result = ClassUtils.convertClassesToClassNames(list); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("java.lang.String", result.get(0)); [EOL]     assertEquals(null, result.get(1)); [EOL]     assertEquals("java.lang.Object", result.get(2)); [EOL]     @SuppressWarnings("unchecked") [EOL]     final List<Object> olist = (List<Object>) (List<?>) list; [EOL]     olist.add(new Object()); [EOL]     try { [EOL]         ClassUtils.convertClassesToClassNames(list); [EOL]         fail("Should not have been able to convert list"); [EOL]     } catch (final ClassCastException expected) { [EOL]     } [EOL]     assertEquals(null, ClassUtils.convertClassesToClassNames(null)); [EOL] } <line_num>: 297,321
@Test [EOL] public void test_isInnerClass_Class() { [EOL]     assertTrue(ClassUtils.isInnerClass(Inner.class)); [EOL]     assertTrue(ClassUtils.isInnerClass(Map.Entry.class)); [EOL]     assertTrue(ClassUtils.isInnerClass(new Cloneable() { [EOL]     }.getClass())); [EOL]     assertFalse(ClassUtils.isInnerClass(this.getClass())); [EOL]     assertFalse(ClassUtils.isInnerClass(String.class)); [EOL]     assertFalse(ClassUtils.isInnerClass(null)); [EOL] } <line_num>: 324,333
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2)); [EOL] } <line_num>: 336,365
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray_Autoboxing() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2, true)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2, true)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0, true)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0, true)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, null, true)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, true)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s, true)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s, true)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1, true)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true)); [EOL] } <line_num>: 367,393
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2, false)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2, false)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, null, false)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false)); [EOL] } <line_num>: 395,421
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] } <line_num>: 423,449
@Test [EOL] public void test_isAssignable_Autoboxing() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null, true)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class, true)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class, true)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true)); [EOL] } <line_num>: 451,473
@Test [EOL] public void test_isAssignable_NoAutoboxing() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null, false)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class, false)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class, false)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class, false)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class, false)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class, false)); [EOL]     assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false)); [EOL]     assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false)); [EOL]     assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false)); [EOL]     assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false)); [EOL]     assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false)); [EOL]     assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false)); [EOL] } <line_num>: 475,497
@Test [EOL] public void test_isAssignable_Widening() throws Exception { [EOL]     assertFalse("byte -> char", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE)); [EOL]     assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE)); [EOL]     assertTrue("byte -> short", ClassUtils.isAssignable(Byte.TYPE, Short.TYPE)); [EOL]     assertTrue("byte -> int", ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE)); [EOL]     assertTrue("byte -> long", ClassUtils.isAssignable(Byte.TYPE, Long.TYPE)); [EOL]     assertTrue("byte -> float", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE)); [EOL]     assertTrue("byte -> double", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE)); [EOL]     assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE)); [EOL]     assertFalse("short -> char", ClassUtils.isAssignable(Short.TYPE, Character.TYPE)); [EOL]     assertFalse("short -> byte", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE)); [EOL]     assertTrue("short -> short", ClassUtils.isAssignable(Short.TYPE, Short.TYPE)); [EOL]     assertTrue("short -> int", ClassUtils.isAssignable(Short.TYPE, Integer.TYPE)); [EOL]     assertTrue("short -> long", ClassUtils.isAssignable(Short.TYPE, Long.TYPE)); [EOL]     assertTrue("short -> float", ClassUtils.isAssignable(Short.TYPE, Float.TYPE)); [EOL]     assertTrue("short -> double", ClassUtils.isAssignable(Short.TYPE, Double.TYPE)); [EOL]     assertFalse("short -> boolean", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE)); [EOL]     assertTrue("char -> char", ClassUtils.isAssignable(Character.TYPE, Character.TYPE)); [EOL]     assertFalse("char -> byte", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE)); [EOL]     assertFalse("char -> short", ClassUtils.isAssignable(Character.TYPE, Short.TYPE)); [EOL]     assertTrue("char -> int", ClassUtils.isAssignable(Character.TYPE, Integer.TYPE)); [EOL]     assertTrue("char -> long", ClassUtils.isAssignable(Character.TYPE, Long.TYPE)); [EOL]     assertTrue("char -> float", ClassUtils.isAssignable(Character.TYPE, Float.TYPE)); [EOL]     assertTrue("char -> double", ClassUtils.isAssignable(Character.TYPE, Double.TYPE)); [EOL]     assertFalse("char -> boolean", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE)); [EOL]     assertFalse("int -> char", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE)); [EOL]     assertFalse("int -> byte", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE)); [EOL]     assertFalse("int -> short", ClassUtils.isAssignable(Integer.TYPE, Short.TYPE)); [EOL]     assertTrue("int -> int", ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue("int -> long", ClassUtils.isAssignable(Integer.TYPE, Long.TYPE)); [EOL]     assertTrue("int -> float", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE)); [EOL]     assertTrue("int -> double", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE)); [EOL]     assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE)); [EOL]     assertFalse("long -> char", ClassUtils.isAssignable(Long.TYPE, Character.TYPE)); [EOL]     assertFalse("long -> byte", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE)); [EOL]     assertFalse("long -> short", ClassUtils.isAssignable(Long.TYPE, Short.TYPE)); [EOL]     assertFalse("long -> int", ClassUtils.isAssignable(Long.TYPE, Integer.TYPE)); [EOL]     assertTrue("long -> long", ClassUtils.isAssignable(Long.TYPE, Long.TYPE)); [EOL]     assertTrue("long -> float", ClassUtils.isAssignable(Long.TYPE, Float.TYPE)); [EOL]     assertTrue("long -> double", ClassUtils.isAssignable(Long.TYPE, Double.TYPE)); [EOL]     assertFalse("long -> boolean", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE)); [EOL]     assertFalse("float -> char", ClassUtils.isAssignable(Float.TYPE, Character.TYPE)); [EOL]     assertFalse("float -> byte", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE)); [EOL]     assertFalse("float -> short", ClassUtils.isAssignable(Float.TYPE, Short.TYPE)); [EOL]     assertFalse("float -> int", ClassUtils.isAssignable(Float.TYPE, Integer.TYPE)); [EOL]     assertFalse("float -> long", ClassUtils.isAssignable(Float.TYPE, Long.TYPE)); [EOL]     assertTrue("float -> float", ClassUtils.isAssignable(Float.TYPE, Float.TYPE)); [EOL]     assertTrue("float -> double", ClassUtils.isAssignable(Float.TYPE, Double.TYPE)); [EOL]     assertFalse("float -> boolean", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE)); [EOL]     assertFalse("double -> char", ClassUtils.isAssignable(Double.TYPE, Character.TYPE)); [EOL]     assertFalse("double -> byte", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE)); [EOL]     assertFalse("double -> short", ClassUtils.isAssignable(Double.TYPE, Short.TYPE)); [EOL]     assertFalse("double -> int", ClassUtils.isAssignable(Double.TYPE, Integer.TYPE)); [EOL]     assertFalse("double -> long", ClassUtils.isAssignable(Double.TYPE, Long.TYPE)); [EOL]     assertFalse("double -> float", ClassUtils.isAssignable(Double.TYPE, Float.TYPE)); [EOL]     assertTrue("double -> double", ClassUtils.isAssignable(Double.TYPE, Double.TYPE)); [EOL]     assertFalse("double -> boolean", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE)); [EOL]     assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE)); [EOL]     assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE)); [EOL]     assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE)); [EOL]     assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE)); [EOL]     assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE)); [EOL]     assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE)); [EOL]     assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE)); [EOL]     assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL] } <line_num>: 499,580
@Test [EOL] public void test_isAssignable_DefaultUnboxing_Widening() throws Exception { [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE)); [EOL]     assertEquals("byte -> byte", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE)); [EOL]     assertEquals("byte -> short", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE)); [EOL]     assertEquals("byte -> int", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE)); [EOL]     assertEquals("byte -> long", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE)); [EOL]     assertEquals("byte -> float", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE)); [EOL]     assertEquals("byte -> double", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE)); [EOL]     assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE)); [EOL]     assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE)); [EOL]     assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE)); [EOL]     assertEquals("short -> short", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE)); [EOL]     assertEquals("short -> int", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE)); [EOL]     assertEquals("short -> long", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE)); [EOL]     assertEquals("short -> float", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE)); [EOL]     assertEquals("short -> double", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE)); [EOL]     assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE)); [EOL]     assertEquals("char -> char", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE)); [EOL]     assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE)); [EOL]     assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE)); [EOL]     assertEquals("char -> int", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE)); [EOL]     assertEquals("char -> long", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE)); [EOL]     assertEquals("char -> float", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE)); [EOL]     assertEquals("char -> double", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE)); [EOL]     assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE)); [EOL]     assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE)); [EOL]     assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE)); [EOL]     assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE)); [EOL]     assertEquals("int -> int", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals("int -> long", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE)); [EOL]     assertEquals("int -> float", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE)); [EOL]     assertEquals("int -> double", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE)); [EOL]     assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE)); [EOL]     assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE)); [EOL]     assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE)); [EOL]     assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE)); [EOL]     assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE)); [EOL]     assertEquals("long -> long", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE)); [EOL]     assertEquals("long -> float", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE)); [EOL]     assertEquals("long -> double", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE)); [EOL]     assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE)); [EOL]     assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE)); [EOL]     assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE)); [EOL]     assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE)); [EOL]     assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE)); [EOL]     assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE)); [EOL]     assertEquals("float -> float", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE)); [EOL]     assertEquals("float -> double", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE)); [EOL]     assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE)); [EOL]     assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE)); [EOL]     assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE)); [EOL]     assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE)); [EOL]     assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE)); [EOL]     assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE)); [EOL]     assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE)); [EOL]     assertEquals("double -> double", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE)); [EOL]     assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE)); [EOL]     assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE)); [EOL]     assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE)); [EOL]     assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE)); [EOL]     assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE)); [EOL]     assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE)); [EOL]     assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE)); [EOL]     assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE)); [EOL]     assertEquals("boolean -> boolean", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL] } <line_num>: 582,665
@Test [EOL] public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]     assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]     assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]     assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); [EOL]     assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); [EOL]     assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); [EOL]     assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); [EOL]     assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); [EOL]     assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true)); [EOL]     assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE, true)); [EOL]     assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE, true)); [EOL]     assertTrue("short -> short", ClassUtils.isAssignable(Short.class, Short.TYPE, true)); [EOL]     assertTrue("short -> int", ClassUtils.isAssignable(Short.class, Integer.TYPE, true)); [EOL]     assertTrue("short -> long", ClassUtils.isAssignable(Short.class, Long.TYPE, true)); [EOL]     assertTrue("short -> float", ClassUtils.isAssignable(Short.class, Float.TYPE, true)); [EOL]     assertTrue("short -> double", ClassUtils.isAssignable(Short.class, Double.TYPE, true)); [EOL]     assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true)); [EOL]     assertTrue("char -> char", ClassUtils.isAssignable(Character.class, Character.TYPE, true)); [EOL]     assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE, true)); [EOL]     assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE, true)); [EOL]     assertTrue("char -> int", ClassUtils.isAssignable(Character.class, Integer.TYPE, true)); [EOL]     assertTrue("char -> long", ClassUtils.isAssignable(Character.class, Long.TYPE, true)); [EOL]     assertTrue("char -> float", ClassUtils.isAssignable(Character.class, Float.TYPE, true)); [EOL]     assertTrue("char -> double", ClassUtils.isAssignable(Character.class, Double.TYPE, true)); [EOL]     assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true)); [EOL]     assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE, true)); [EOL]     assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true)); [EOL]     assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE, true)); [EOL]     assertTrue("int -> int", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true)); [EOL]     assertTrue("int -> long", ClassUtils.isAssignable(Integer.class, Long.TYPE, true)); [EOL]     assertTrue("int -> float", ClassUtils.isAssignable(Integer.class, Float.TYPE, true)); [EOL]     assertTrue("int -> double", ClassUtils.isAssignable(Integer.class, Double.TYPE, true)); [EOL]     assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true)); [EOL]     assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE, true)); [EOL]     assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE, true)); [EOL]     assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE, true)); [EOL]     assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE, true)); [EOL]     assertTrue("long -> long", ClassUtils.isAssignable(Long.class, Long.TYPE, true)); [EOL]     assertTrue("long -> float", ClassUtils.isAssignable(Long.class, Float.TYPE, true)); [EOL]     assertTrue("long -> double", ClassUtils.isAssignable(Long.class, Double.TYPE, true)); [EOL]     assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true)); [EOL]     assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE, true)); [EOL]     assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE, true)); [EOL]     assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE, true)); [EOL]     assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE, true)); [EOL]     assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE, true)); [EOL]     assertTrue("float -> float", ClassUtils.isAssignable(Float.class, Float.TYPE, true)); [EOL]     assertTrue("float -> double", ClassUtils.isAssignable(Float.class, Double.TYPE, true)); [EOL]     assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true)); [EOL]     assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE, true)); [EOL]     assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE, true)); [EOL]     assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE, true)); [EOL]     assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE, true)); [EOL]     assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE, true)); [EOL]     assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE, true)); [EOL]     assertTrue("double -> double", ClassUtils.isAssignable(Double.class, Double.TYPE, true)); [EOL]     assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true)); [EOL]     assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true)); [EOL]     assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true)); [EOL]     assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true)); [EOL]     assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true)); [EOL]     assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true)); [EOL]     assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true)); [EOL]     assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true)); [EOL]     assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true)); [EOL] } <line_num>: 667,748
@Test [EOL] public void testIsPrimitiveOrWrapper() { [EOL]     assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]     assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]     assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [EOL]     assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); [EOL]     assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); [EOL]     assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); [EOL]     assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); [EOL]     assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL]     assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); [EOL]     assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); [EOL]     assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); [EOL]     assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); [EOL]     assertTrue("int", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE)); [EOL]     assertTrue("long", ClassUtils.isPrimitiveOrWrapper(Long.TYPE)); [EOL]     assertTrue("double", ClassUtils.isPrimitiveOrWrapper(Double.TYPE)); [EOL]     assertTrue("float", ClassUtils.isPrimitiveOrWrapper(Float.TYPE)); [EOL]     assertTrue("Void.TYPE", ClassUtils.isPrimitiveOrWrapper(Void.TYPE)); [EOL]     assertFalse("null", ClassUtils.isPrimitiveOrWrapper(null)); [EOL]     assertFalse("Void.class", ClassUtils.isPrimitiveOrWrapper(Void.class)); [EOL]     assertFalse("String.class", ClassUtils.isPrimitiveOrWrapper(String.class)); [EOL]     assertFalse("this.getClass()", ClassUtils.isPrimitiveOrWrapper(this.getClass())); [EOL] } <line_num>: 750,779
@Test [EOL] public void testIsPrimitiveWrapper() { [EOL]     assertTrue("Boolean.class", ClassUtils.isPrimitiveWrapper(Boolean.class)); [EOL]     assertTrue("Byte.class", ClassUtils.isPrimitiveWrapper(Byte.class)); [EOL]     assertTrue("Character.class", ClassUtils.isPrimitiveWrapper(Character.class)); [EOL]     assertTrue("Short.class", ClassUtils.isPrimitiveWrapper(Short.class)); [EOL]     assertTrue("Integer.class", ClassUtils.isPrimitiveWrapper(Integer.class)); [EOL]     assertTrue("Long.class", ClassUtils.isPrimitiveWrapper(Long.class)); [EOL]     assertTrue("Double.class", ClassUtils.isPrimitiveWrapper(Double.class)); [EOL]     assertTrue("Float.class", ClassUtils.isPrimitiveWrapper(Float.class)); [EOL]     assertFalse("boolean", ClassUtils.isPrimitiveWrapper(Boolean.TYPE)); [EOL]     assertFalse("byte", ClassUtils.isPrimitiveWrapper(Byte.TYPE)); [EOL]     assertFalse("char", ClassUtils.isPrimitiveWrapper(Character.TYPE)); [EOL]     assertFalse("short", ClassUtils.isPrimitiveWrapper(Short.TYPE)); [EOL]     assertFalse("int", ClassUtils.isPrimitiveWrapper(Integer.TYPE)); [EOL]     assertFalse("long", ClassUtils.isPrimitiveWrapper(Long.TYPE)); [EOL]     assertFalse("double", ClassUtils.isPrimitiveWrapper(Double.TYPE)); [EOL]     assertFalse("float", ClassUtils.isPrimitiveWrapper(Float.TYPE)); [EOL]     assertFalse("null", ClassUtils.isPrimitiveWrapper(null)); [EOL]     assertFalse("Void.class", ClassUtils.isPrimitiveWrapper(Void.class)); [EOL]     assertFalse("Void.TYPE", ClassUtils.isPrimitiveWrapper(Void.TYPE)); [EOL]     assertFalse("String.class", ClassUtils.isPrimitiveWrapper(String.class)); [EOL]     assertFalse("this.getClass()", ClassUtils.isPrimitiveWrapper(this.getClass())); [EOL] } <line_num>: 781,810
@Test [EOL] public void testPrimitiveToWrapper() { [EOL]     assertEquals("boolean -> Boolean.class", Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE)); [EOL]     assertEquals("byte -> Byte.class", Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE)); [EOL]     assertEquals("char -> Character.class", Character.class, ClassUtils.primitiveToWrapper(Character.TYPE)); [EOL]     assertEquals("short -> Short.class", Short.class, ClassUtils.primitiveToWrapper(Short.TYPE)); [EOL]     assertEquals("int -> Integer.class", Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE)); [EOL]     assertEquals("long -> Long.class", Long.class, ClassUtils.primitiveToWrapper(Long.TYPE)); [EOL]     assertEquals("double -> Double.class", Double.class, ClassUtils.primitiveToWrapper(Double.TYPE)); [EOL]     assertEquals("float -> Float.class", Float.class, ClassUtils.primitiveToWrapper(Float.TYPE)); [EOL]     assertEquals("String.class -> String.class", String.class, ClassUtils.primitiveToWrapper(String.class)); [EOL]     assertEquals("ClassUtils.class -> ClassUtils.class", org.apache.commons.lang3.ClassUtils.class, ClassUtils.primitiveToWrapper(org.apache.commons.lang3.ClassUtils.class)); [EOL]     assertEquals("Void.TYPE -> Void.TYPE", Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE)); [EOL]     assertNull("null -> null", ClassUtils.primitiveToWrapper(null)); [EOL] } <line_num>: 812,845
@Test [EOL] public void testPrimitivesToWrappers() { [EOL]     assertNull("null -> null", ClassUtils.primitivesToWrappers((Class<?>[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers())); [EOL]     final Class<?>[] castNull = ClassUtils.primitivesToWrappers((Class<?>) null); [EOL]     assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); [EOL]     assertArrayEquals("empty -> empty", ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     final Class<?>[] primitives = new Class[] { Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE, String.class, ClassUtils.class }; [EOL]     final Class<?>[] wrappers = ClassUtils.primitivesToWrappers(primitives); [EOL]     for (int i = 0; i < primitives.length; i++) { [EOL]         final Class<?> primitive = primitives[i]; [EOL]         final Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive); [EOL]         assertEquals(primitive + " -> " + expectedWrapper, expectedWrapper, wrappers[i]); [EOL]     } [EOL]     final Class<?>[] noPrimitives = new Class[] { String.class, ClassUtils.class, Void.TYPE }; [EOL]     assertNotSame("unmodified", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives)); [EOL] } <line_num>: 847,883
@Test [EOL] public void testWrapperToPrimitive() { [EOL]     final Class<?>[] primitives = { Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE }; [EOL]     for (final Class<?> primitive : primitives) { [EOL]         final Class<?> wrapperCls = ClassUtils.primitiveToWrapper(primitive); [EOL]         assertFalse("Still primitive", wrapperCls.isPrimitive()); [EOL]         assertEquals(wrapperCls + " -> " + primitive, primitive, ClassUtils.wrapperToPrimitive(wrapperCls)); [EOL]     } [EOL] } <line_num>: 885,898
@Test [EOL] public void testWrapperToPrimitiveNoWrapper() { [EOL]     assertNull("Wrong result for non wrapper class", ClassUtils.wrapperToPrimitive(String.class)); [EOL] } <line_num>: 900,903
@Test [EOL] public void testWrapperToPrimitiveNull() { [EOL]     assertNull("Wrong result for null class", ClassUtils.wrapperToPrimitive(null)); [EOL] } <line_num>: 905,908
@Test [EOL] public void testWrappersToPrimitives() { [EOL]     final Class<?>[] classes = { Boolean.class, Byte.class, Character.class, Short.class, Integer.class, Long.class, Float.class, Double.class, String.class, ClassUtils.class, null }; [EOL]     final Class<?>[] primitives = ClassUtils.wrappersToPrimitives(classes); [EOL]     assertEquals("Wrong length of result array", classes.length, primitives.length); [EOL]     for (int i = 0; i < classes.length; i++) { [EOL]         final Class<?> expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]); [EOL]         assertEquals(classes[i] + " -> " + expectedPrimitive, expectedPrimitive, primitives[i]); [EOL]     } [EOL] } <line_num>: 910,927
@Test [EOL] public void testWrappersToPrimitivesNull() { [EOL]     assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives())); [EOL]     final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>) null); [EOL]     assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[] { null }, castNull)); [EOL] } <line_num>: 929,937
@Test [EOL] public void testWrappersToPrimitivesEmpty() { [EOL]     final Class<?>[] empty = new Class[0]; [EOL]     assertArrayEquals("Wrong result for empty input", empty, ClassUtils.wrappersToPrimitives(empty)); [EOL] } <line_num>: 939,943
@Test [EOL] public void testGetClassClassNotFound() throws Exception { [EOL]     assertGetClassThrowsClassNotFound("bool"); [EOL]     assertGetClassThrowsClassNotFound("bool[]"); [EOL]     assertGetClassThrowsClassNotFound("integer[]"); [EOL] } <line_num>: 945,950
@Test [EOL] public void testGetClassInvalidArguments() throws Exception { [EOL]     assertGetClassThrowsNullPointerException(null); [EOL]     assertGetClassThrowsClassNotFound("[][][]"); [EOL]     assertGetClassThrowsClassNotFound("[[]"); [EOL]     assertGetClassThrowsClassNotFound("["); [EOL]     assertGetClassThrowsClassNotFound("java.lang.String]["); [EOL]     assertGetClassThrowsClassNotFound(".hello.world"); [EOL]     assertGetClassThrowsClassNotFound("hello..world"); [EOL] } <line_num>: 952,961
@Test [EOL] public void testWithInterleavingWhitespace() throws ClassNotFoundException { [EOL]     assertEquals(int[].class, ClassUtils.getClass(" int [ ] ")); [EOL]     assertEquals(long[].class, ClassUtils.getClass("\rlong\t[\n]\r")); [EOL]     assertEquals(short[].class, ClassUtils.getClass("\tshort                \t\t[]")); [EOL]     assertEquals(byte[].class, ClassUtils.getClass("byte[\t\t\n\r]   ")); [EOL] } <line_num>: 963,969
@Test [EOL] public void testGetInnerClass() throws ClassNotFoundException { [EOL]     assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested")); [EOL]     assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested")); [EOL]     assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested")); [EOL]     assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass("org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested")); [EOL] } <line_num>: 971,977
@Test [EOL] public void testGetClassByNormalNameArrays() throws ClassNotFoundException { [EOL]     assertEquals(int[].class, ClassUtils.getClass("int[]")); [EOL]     assertEquals(long[].class, ClassUtils.getClass("long[]")); [EOL]     assertEquals(short[].class, ClassUtils.getClass("short[]")); [EOL]     assertEquals(byte[].class, ClassUtils.getClass("byte[]")); [EOL]     assertEquals(char[].class, ClassUtils.getClass("char[]")); [EOL]     assertEquals(float[].class, ClassUtils.getClass("float[]")); [EOL]     assertEquals(double[].class, ClassUtils.getClass("double[]")); [EOL]     assertEquals(boolean[].class, ClassUtils.getClass("boolean[]")); [EOL]     assertEquals(String[].class, ClassUtils.getClass("java.lang.String[]")); [EOL]     assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("java.util.Map.Entry[]")); [EOL]     assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("java.util.Map$Entry[]")); [EOL]     assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("[Ljava.util.Map.Entry;")); [EOL]     assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass("[Ljava.util.Map$Entry;")); [EOL] } <line_num>: 979,994
@Test [EOL] public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException { [EOL]     assertEquals(int[][].class, ClassUtils.getClass("int[][]")); [EOL]     assertEquals(long[][].class, ClassUtils.getClass("long[][]")); [EOL]     assertEquals(short[][].class, ClassUtils.getClass("short[][]")); [EOL]     assertEquals(byte[][].class, ClassUtils.getClass("byte[][]")); [EOL]     assertEquals(char[][].class, ClassUtils.getClass("char[][]")); [EOL]     assertEquals(float[][].class, ClassUtils.getClass("float[][]")); [EOL]     assertEquals(double[][].class, ClassUtils.getClass("double[][]")); [EOL]     assertEquals(boolean[][].class, ClassUtils.getClass("boolean[][]")); [EOL]     assertEquals(String[][].class, ClassUtils.getClass("java.lang.String[][]")); [EOL] } <line_num>: 996,1007
@Test [EOL] public void testGetClassWithArrayClasses2D() throws Exception { [EOL]     assertGetClassReturnsClass(String[][].class); [EOL]     assertGetClassReturnsClass(int[][].class); [EOL]     assertGetClassReturnsClass(long[][].class); [EOL]     assertGetClassReturnsClass(short[][].class); [EOL]     assertGetClassReturnsClass(byte[][].class); [EOL]     assertGetClassReturnsClass(char[][].class); [EOL]     assertGetClassReturnsClass(float[][].class); [EOL]     assertGetClassReturnsClass(double[][].class); [EOL]     assertGetClassReturnsClass(boolean[][].class); [EOL] } <line_num>: 1009,1020
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] } <line_num>: 1022,1033
@Test [EOL] public void testGetClassRawPrimitives() throws ClassNotFoundException { [EOL]     assertEquals(int.class, ClassUtils.getClass("int")); [EOL]     assertEquals(long.class, ClassUtils.getClass("long")); [EOL]     assertEquals(short.class, ClassUtils.getClass("short")); [EOL]     assertEquals(byte.class, ClassUtils.getClass("byte")); [EOL]     assertEquals(char.class, ClassUtils.getClass("char")); [EOL]     assertEquals(float.class, ClassUtils.getClass("float")); [EOL]     assertEquals(double.class, ClassUtils.getClass("double")); [EOL]     assertEquals(boolean.class, ClassUtils.getClass("boolean")); [EOL] } <line_num>: 1035,1045
private void assertGetClassReturnsClass(final Class<?> c) throws Exception { [EOL]     assertEquals(c, ClassUtils.getClass(c.getName())); [EOL] } <line_num>: 1047,1049
private void assertGetClassThrowsException(final String className, final Class<?> exceptionType) throws Exception { [EOL]     try { [EOL]         ClassUtils.getClass(className); [EOL]         fail("ClassUtils.getClass() should fail with an exception of type " + exceptionType.getName() + " when given class name \"" + className + "\"."); [EOL]     } catch (final Exception e) { [EOL]         assertTrue(exceptionType.isAssignableFrom(e.getClass())); [EOL]     } [EOL] } <line_num>: 1051,1059
private void assertGetClassThrowsNullPointerException(final String className) throws Exception { [EOL]     assertGetClassThrowsException(className, NullPointerException.class); [EOL] } <line_num>: 1061,1063
private void assertGetClassThrowsClassNotFound(final String className) throws Exception { [EOL]     assertGetClassThrowsException(className, ClassNotFoundException.class); [EOL] } <line_num>: 1065,1067
@Test [EOL] public void testShowJavaBug() throws Exception { [EOL]     final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]     final Method isEmptyMethod = set.getClass().getMethod("isEmpty", new Class[0]); [EOL]     try { [EOL]         isEmptyMethod.invoke(set, new Object[0]); [EOL]         fail("Failed to throw IllegalAccessException as expected"); [EOL]     } catch (final IllegalAccessException iae) { [EOL]     } [EOL] } <line_num>: 1071,1082
@Test [EOL] public void testGetPublicMethod() throws Exception { [EOL]     final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]     final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty", new Class[0]); [EOL]     assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); [EOL]     try { [EOL]         isEmptyMethod.invoke(set, new Object[0]); [EOL]     } catch (final java.lang.IllegalAccessException iae) { [EOL]         fail("Should not have thrown IllegalAccessException"); [EOL]     } [EOL]     final Method toStringMethod = ClassUtils.getPublicMethod(Object.class, "toString", new Class[0]); [EOL]     assertEquals(Object.class.getMethod("toString", new Class[0]), toStringMethod); [EOL] } <line_num>: 1084,1100
@Test [EOL] public void testToClass_object() { [EOL]     assertNull(ClassUtils.toClass((Object[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); [EOL]     final Class<?>[] castNull = ClassUtils.toClass((Object) null); [EOL]     assertTrue("(Object)null -> [null]", Arrays.equals(new Object[] { null }, castNull)); [EOL]     assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, ClassUtils.toClass(new Object[] { "Test", Integer.valueOf(1), Double.valueOf(99d) }))); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, ClassUtils.toClass(new Object[] { "Test", null, Double.valueOf(99d) }))); [EOL] } <line_num>: 1102,1119
@Test [EOL] public void test_getShortCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getShortCanonicalName(null, "<null>")); [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(new Inner(), "<null>")); [EOL] } <line_num>: 1121,1135
@Test [EOL] public void test_getShortCanonicalName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class)); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class)); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class)); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class)); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.7", ClassUtils.getShortCanonicalName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("ClassUtilsTest.6Named", ClassUtils.getShortCanonicalName(Named.class)); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(Inner.class)); [EOL] } <line_num>: 1137,1150
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] } <line_num>: 1152,1168
@Test [EOL] public void test_getPackageCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL] } <line_num>: 1170,1184
@Test [EOL] public void test_getPackageCanonicalName_Class() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils.class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[].class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(ClassUtils[][].class)); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(int[].class)); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(int[][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Named.class)); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(Inner.class)); [EOL] } <line_num>: 1186,1199
@Test [EOL] public void test_getPackageCanonicalName_String() { [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName("[I")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName("[[I")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName("int[]")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName("int[][]")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] } <line_num>: 1201,1222
