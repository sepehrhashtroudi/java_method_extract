@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new BooleanUtils()); [EOL]     final Constructor<?>[] cons = BooleanUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers())); [EOL] } <line_num>: 38,46
@Test [EOL] public void test_negate_Boolean() { [EOL]     assertSame(null, BooleanUtils.negate(null)); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE)); [EOL] } <line_num>: 49,54
@Test [EOL] public void test_isTrue_Boolean() { [EOL]     assertTrue(BooleanUtils.isTrue(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.isTrue(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.isTrue((Boolean) null)); [EOL] } <line_num>: 57,62
@Test [EOL] public void test_isNotTrue_Boolean() { [EOL]     assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE)); [EOL]     assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE)); [EOL]     assertTrue(BooleanUtils.isNotTrue((Boolean) null)); [EOL] } <line_num>: 64,69
@Test [EOL] public void test_isFalse_Boolean() { [EOL]     assertFalse(BooleanUtils.isFalse(Boolean.TRUE)); [EOL]     assertTrue(BooleanUtils.isFalse(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.isFalse((Boolean) null)); [EOL] } <line_num>: 72,77
@Test [EOL] public void test_isNotFalse_Boolean() { [EOL]     assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE)); [EOL]     assertTrue(BooleanUtils.isNotFalse((Boolean) null)); [EOL] } <line_num>: 79,84
@Test [EOL] public void test_toBoolean_Boolean() { [EOL]     assertTrue(BooleanUtils.toBoolean(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.toBoolean(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.toBoolean((Boolean) null)); [EOL] } <line_num>: 87,92
@Test [EOL] public void test_toBooleanDefaultIfNull_Boolean_boolean() { [EOL]     assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true)); [EOL]     assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false)); [EOL]     assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true)); [EOL]     assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false)); [EOL]     assertTrue(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true)); [EOL]     assertFalse(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false)); [EOL] } <line_num>: 94,102
@Test [EOL] public void test_toBoolean_int() { [EOL]     assertTrue(BooleanUtils.toBoolean(1)); [EOL]     assertTrue(BooleanUtils.toBoolean(-1)); [EOL]     assertFalse(BooleanUtils.toBoolean(0)); [EOL] } <line_num>: 106,111
@Test [EOL] public void test_toBooleanObject_int() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0)); [EOL] } <line_num>: 113,118
@Test [EOL] public void test_toBooleanObject_Integer() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1))); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1))); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0))); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((Integer) null)); [EOL] } <line_num>: 120,126
@Test [EOL] public void test_toBoolean_int_int_int() { [EOL]     assertTrue(BooleanUtils.toBoolean(6, 6, 7)); [EOL]     assertFalse(BooleanUtils.toBoolean(7, 6, 7)); [EOL] } <line_num>: 129,133
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBoolean_int_int_int_noMatch() { [EOL]     BooleanUtils.toBoolean(8, 6, 7); [EOL] } <line_num>: 135,138
@Test [EOL] public void test_toBoolean_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven)); [EOL]     assertFalse(BooleanUtils.toBoolean((Integer) null, six, null)); [EOL]     assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven)); [EOL]     assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven)); [EOL] } <line_num>: 140,150
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBoolean_Integer_Integer_Integer_nullValue() { [EOL]     BooleanUtils.toBoolean(null, Integer.valueOf(6), Integer.valueOf(7)); [EOL] } <line_num>: 152,155
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBoolean_Integer_Integer_Integer_noMatch() { [EOL]     BooleanUtils.toBoolean(Integer.valueOf(8), Integer.valueOf(6), Integer.valueOf(7)); [EOL] } <line_num>: 157,160
@Test [EOL] public void test_toBooleanObject_int_int_int() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL] } <line_num>: 163,168
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_int_int_int_noMatch() { [EOL]     BooleanUtils.toBooleanObject(9, 6, 7, 8); [EOL] } <line_num>: 170,173
@Test [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL] } <line_num>: 175,188
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue() { [EOL]     BooleanUtils.toBooleanObject(null, Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)); [EOL] } <line_num>: 190,193
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch() { [EOL]     BooleanUtils.toBooleanObject(Integer.valueOf(9), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)); [EOL] } <line_num>: 195,198
@Test [EOL] public void test_toInteger_boolean() { [EOL]     assertEquals(1, BooleanUtils.toInteger(true)); [EOL]     assertEquals(0, BooleanUtils.toInteger(false)); [EOL] } <line_num>: 201,205
@Test [EOL] public void test_toIntegerObject_boolean() { [EOL]     assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true)); [EOL]     assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false)); [EOL] } <line_num>: 207,211
@Test [EOL] public void test_toIntegerObject_Boolean() { [EOL]     assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(Boolean.TRUE)); [EOL]     assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(Boolean.FALSE)); [EOL]     assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null)); [EOL] } <line_num>: 213,218
@Test [EOL] public void test_toInteger_boolean_int_int() { [EOL]     assertEquals(6, BooleanUtils.toInteger(true, 6, 7)); [EOL]     assertEquals(7, BooleanUtils.toInteger(false, 6, 7)); [EOL] } <line_num>: 221,225
@Test [EOL] public void test_toInteger_Boolean_int_int_int() { [EOL]     assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8)); [EOL]     assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8)); [EOL]     assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8)); [EOL] } <line_num>: 227,232
@Test [EOL] public void test_toIntegerObject_boolean_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven)); [EOL]     assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven)); [EOL] } <line_num>: 234,240
@Test [EOL] public void test_toIntegerObject_Boolean_Integer_Integer_Integer() { [EOL]     final Integer six = Integer.valueOf(6); [EOL]     final Integer seven = Integer.valueOf(7); [EOL]     final Integer eight = Integer.valueOf(8); [EOL]     assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight)); [EOL]     assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight)); [EOL]     assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight)); [EOL]     assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null)); [EOL] } <line_num>: 242,251
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] } <line_num>: 255,287
@Test [EOL] public void test_toBooleanObject_String_String_String_String() { [EOL]     assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]     assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL] } <line_num>: 289,298
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_String_String_String_String_nullValue() { [EOL]     BooleanUtils.toBooleanObject((String) null, "Y", "N", "U"); [EOL] } <line_num>: 300,303
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_String_String_String_String_noMatch() { [EOL]     BooleanUtils.toBooleanObject("X", "Y", "N", "U"); [EOL] } <line_num>: 305,308
@Test [EOL] public void test_toBoolean_String() { [EOL]     assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]     assertFalse(BooleanUtils.toBoolean("")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("oof")); [EOL]     assertFalse(BooleanUtils.toBoolean("yep")); [EOL]     assertFalse(BooleanUtils.toBoolean("trux")); [EOL]     assertFalse(BooleanUtils.toBoolean("false")); [EOL]     assertFalse(BooleanUtils.toBoolean("a")); [EOL]     assertTrue(BooleanUtils.toBoolean("true")); [EOL]     assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]     assertTrue(BooleanUtils.toBoolean("truE")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]     assertTrue(BooleanUtils.toBoolean("True")); [EOL]     assertTrue(BooleanUtils.toBoolean("on")); [EOL]     assertTrue(BooleanUtils.toBoolean("oN")); [EOL]     assertTrue(BooleanUtils.toBoolean("On")); [EOL]     assertTrue(BooleanUtils.toBoolean("ON")); [EOL]     assertTrue(BooleanUtils.toBoolean("yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("yES")); [EOL]     assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("YES")); [EOL]     assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]     assertFalse(BooleanUtils.toBoolean("tru")); [EOL]     assertFalse(BooleanUtils.toBoolean("no")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("yoo")); [EOL] } <line_num>: 311,356
@Test [EOL] public void test_toBoolean_String_String_String() { [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, "N")); [EOL]     assertFalse(BooleanUtils.toBoolean((String) null, "Y", null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "N")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("N"))); [EOL]     assertFalse(BooleanUtils.toBoolean("N", "Y", "N")); [EOL]     assertFalse(BooleanUtils.toBoolean("N", new String("Y"), new String("N"))); [EOL]     assertTrue(BooleanUtils.toBoolean((String) null, null, null)); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", "Y", "Y")); [EOL]     assertTrue(BooleanUtils.toBoolean("Y", new String("Y"), new String("Y"))); [EOL] } <line_num>: 358,369
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBoolean_String_String_String_nullValue() { [EOL]     BooleanUtils.toBoolean(null, "Y", "N"); [EOL] } <line_num>: 371,374
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBoolean_String_String_String_noMatch() { [EOL]     BooleanUtils.toBoolean("X", "Y", "N"); [EOL] } <line_num>: 376,379
@Test [EOL] public void test_toStringTrueFalse_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null)); [EOL]     assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE)); [EOL]     assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE)); [EOL] } <line_num>: 382,387
@Test [EOL] public void test_toStringOnOff_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null)); [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE)); [EOL] } <line_num>: 389,394
@Test [EOL] public void test_toStringYesNo_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null)); [EOL]     assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE)); [EOL]     assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE)); [EOL] } <line_num>: 396,401
@Test [EOL] public void test_toString_Boolean_String_String_String() { [EOL]     assertEquals("U", BooleanUtils.toString((Boolean) null, "Y", "N", "U")); [EOL]     assertEquals("Y", BooleanUtils.toString(Boolean.TRUE, "Y", "N", "U")); [EOL]     assertEquals("N", BooleanUtils.toString(Boolean.FALSE, "Y", "N", "U")); [EOL] } <line_num>: 403,408
@Test [EOL] public void test_toStringTrueFalse_boolean() { [EOL]     assertEquals("true", BooleanUtils.toStringTrueFalse(true)); [EOL]     assertEquals("false", BooleanUtils.toStringTrueFalse(false)); [EOL] } <line_num>: 411,415
@Test [EOL] public void test_toStringOnOff_boolean() { [EOL]     assertEquals("on", BooleanUtils.toStringOnOff(true)); [EOL]     assertEquals("off", BooleanUtils.toStringOnOff(false)); [EOL] } <line_num>: 417,421
@Test [EOL] public void test_toStringYesNo_boolean() { [EOL]     assertEquals("yes", BooleanUtils.toStringYesNo(true)); [EOL]     assertEquals("no", BooleanUtils.toStringYesNo(false)); [EOL] } <line_num>: 423,427
@Test [EOL] public void test_toString_boolean_String_String_String() { [EOL]     assertEquals("Y", BooleanUtils.toString(true, "Y", "N")); [EOL]     assertEquals("N", BooleanUtils.toString(false, "Y", "N")); [EOL] } <line_num>: 429,433
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_nullInput() { [EOL]     BooleanUtils.xor((boolean[]) null); [EOL] } <line_num>: 437,440
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_emptyInput() { [EOL]     BooleanUtils.xor(new boolean[] {}); [EOL] } <line_num>: 442,445
@Test [EOL] public void testXor_primitive_validInput_2items() { [EOL]     assertTrue("True result for (true, true)", !BooleanUtils.xor(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new boolean[] { false, false })); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.xor(new boolean[] { true, false })); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.xor(new boolean[] { false, true })); [EOL] } <line_num>: 447,464
@Test [EOL] public void testXor_primitive_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new boolean[] { false, false, true })); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new boolean[] { false, true, false })); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new boolean[] { true, false, false })); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new boolean[] { true, true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new boolean[] { false, false, false })); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new boolean[] { true, true, false })); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new boolean[] { true, false, true })); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new boolean[] { false, true, true })); [EOL] } <line_num>: 466,499
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_nullInput() { [EOL]     BooleanUtils.xor((Boolean[]) null); [EOL] } <line_num>: 501,504
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_emptyInput() { [EOL]     BooleanUtils.xor(new Boolean[] {}); [EOL] } <line_num>: 506,509
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_nullElementInput() { [EOL]     BooleanUtils.xor(new Boolean[] { null }); [EOL] } <line_num>: 511,514
@Test [EOL] public void testXor_object_validInput_2items() { [EOL]     assertTrue("True result for (true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] } <line_num>: 516,541
@Test [EOL] public void testXor_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", !BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] } <line_num>: 543,616
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_nullInput() { [EOL]     BooleanUtils.and((boolean[]) null); [EOL] } <line_num>: 620,623
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_primitive_emptyInput() { [EOL]     BooleanUtils.and(new boolean[] {}); [EOL] } <line_num>: 625,628
@Test [EOL] public void testAnd_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.and(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false })); [EOL]     assertTrue("True result for (true, false)", !BooleanUtils.and(new boolean[] { true, false })); [EOL]     assertTrue("True result for (false, true)", !BooleanUtils.and(new boolean[] { false, true })); [EOL] } <line_num>: 630,647
@Test [EOL] public void testAnd_primitive_validInput_3items() { [EOL]     assertTrue("True result for (false, false, true)", !BooleanUtils.and(new boolean[] { false, false, true })); [EOL]     assertTrue("True result for (false, true, false)", !BooleanUtils.and(new boolean[] { false, true, false })); [EOL]     assertTrue("True result for (true, false, false)", !BooleanUtils.and(new boolean[] { true, false, false })); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.and(new boolean[] { true, true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false, false })); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.and(new boolean[] { true, true, false })); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.and(new boolean[] { true, false, true })); [EOL]     assertTrue("True result for (false, true, true)", !BooleanUtils.and(new boolean[] { false, true, true })); [EOL] } <line_num>: 649,682
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullInput() { [EOL]     BooleanUtils.and((Boolean[]) null); [EOL] } <line_num>: 684,687
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_emptyInput() { [EOL]     BooleanUtils.and(new Boolean[] {}); [EOL] } <line_num>: 689,692
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_nullElementInput() { [EOL]     BooleanUtils.and(new Boolean[] { null }); [EOL] } <line_num>: 694,697
@Test [EOL] public void testAnd_object_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] } <line_num>: 699,724
@Test [EOL] public void testAnd_object_validInput_3items() { [EOL]     assertTrue("True result for (false, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] } <line_num>: 726,799
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_nullInput() { [EOL]     BooleanUtils.or((boolean[]) null); [EOL] } <line_num>: 803,806
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_emptyInput() { [EOL]     BooleanUtils.or(new boolean[] {}); [EOL] } <line_num>: 808,811
@Test [EOL] public void testOr_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new boolean[] { false, false })); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new boolean[] { true, false })); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new boolean[] { false, true })); [EOL] } <line_num>: 813,830
@Test [EOL] public void testOr_primitive_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.or(new boolean[] { false, false, true })); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.or(new boolean[] { false, true, false })); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.or(new boolean[] { true, false, false })); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.or(new boolean[] { true, true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new boolean[] { false, false, false })); [EOL]     assertTrue("False result for (true, true, false)", BooleanUtils.or(new boolean[] { true, true, false })); [EOL]     assertTrue("False result for (true, false, true)", BooleanUtils.or(new boolean[] { true, false, true })); [EOL]     assertTrue("False result for (false, true, true)", BooleanUtils.or(new boolean[] { false, true, true })); [EOL] } <line_num>: 832,866
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullInput() { [EOL]     BooleanUtils.or((Boolean[]) null); [EOL] } <line_num>: 867,870
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_emptyInput() { [EOL]     BooleanUtils.or(new Boolean[] {}); [EOL] } <line_num>: 872,875
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullElementInput() { [EOL]     BooleanUtils.or(new Boolean[] { null }); [EOL] } <line_num>: 877,880
@Test [EOL] public void testOr_object_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL] } <line_num>: 882,907
@Test [EOL] public void testOr_object_validInput_3items() { [EOL]     assertTrue("False result for (false, false, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, false)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, false)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, false, true)", BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("False result for (false, true, true)", BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] } <line_num>: 909,982
