@Before [EOL] public void setUp() { [EOL]     iString = "foo"; [EOL]     iInteger = Integer.valueOf(7); [EOL]     iMap = new HashMap<Object, Object>(); [EOL]     iMap.put("FOO", iString); [EOL]     iMap.put("BAR", iInteger); [EOL] } <line_num>: 57,64
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new SerializationUtils()); [EOL]     final Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(SerializationUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(SerializationUtils.class.getModifiers())); [EOL] } <line_num>: 68,76
@Test [EOL] public void testException() { [EOL]     SerializationException serEx; [EOL]     final Exception ex = new Exception(); [EOL]     serEx = new SerializationException(); [EOL]     assertSame(null, serEx.getMessage()); [EOL]     assertSame(null, serEx.getCause()); [EOL]     serEx = new SerializationException("Message"); [EOL]     assertSame("Message", serEx.getMessage()); [EOL]     assertSame(null, serEx.getCause()); [EOL]     serEx = new SerializationException(ex); [EOL]     assertEquals("java.lang.Exception", serEx.getMessage()); [EOL]     assertSame(ex, serEx.getCause()); [EOL]     serEx = new SerializationException("Message", ex); [EOL]     assertSame("Message", serEx.getMessage()); [EOL]     assertSame(ex, serEx.getCause()); [EOL] } <line_num>: 78,98
@Test [EOL] public void testSerializeStream() throws Exception { [EOL]     final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]     SerializationUtils.serialize(iMap, streamTest); [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final byte[] testBytes = streamTest.toByteArray(); [EOL]     final byte[] realBytes = streamReal.toByteArray(); [EOL]     assertEquals(testBytes.length, realBytes.length); [EOL]     for (int i = 0; i < realBytes.length; i++) { [EOL]         assertEquals(realBytes[i], testBytes[i]); [EOL]     } [EOL] } <line_num>: 102,119
@Test [EOL] public void testSerializeStreamUnserializable() throws Exception { [EOL]     final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.serialize(iMap, streamTest); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 121,131
@Test [EOL] public void testSerializeStreamNullObj() throws Exception { [EOL]     final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]     SerializationUtils.serialize(null, streamTest); [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(null); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final byte[] testBytes = streamTest.toByteArray(); [EOL]     final byte[] realBytes = streamReal.toByteArray(); [EOL]     assertEquals(testBytes.length, realBytes.length); [EOL]     for (int i = 0; i < realBytes.length; i++) { [EOL]         assertEquals(realBytes[i], testBytes[i]); [EOL]     } [EOL] } <line_num>: 133,150
@Test [EOL] public void testSerializeStreamObjNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.serialize(iMap, null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 152,160
@Test [EOL] public void testSerializeStreamNullNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.serialize(null, null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 162,170
@Override [EOL] public void write(final int arg0) throws IOException { [EOL]     throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE); [EOL] } <line_num>: 177,180
@Test [EOL] public void testSerializeIOException() throws Exception { [EOL]     final OutputStream streamTest = new OutputStream() { [EOL]  [EOL]         @Override [EOL]         public void write(final int arg0) throws IOException { [EOL]             throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE); [EOL]         } [EOL]     }; [EOL]     try { [EOL]         SerializationUtils.serialize(iMap, streamTest); [EOL]     } catch (final SerializationException e) { [EOL]         assertEquals("java.io.IOException: " + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage()); [EOL]     } [EOL] } <line_num>: 172,188
@Test [EOL] public void testDeserializeStream() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]     final Object test = SerializationUtils.deserialize(inTest); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] } <line_num>: 192,211
@Test(expected = ClassCastException.class) [EOL] public void testDeserializeClassCastException() { [EOL]     final String value = "Hello"; [EOL]     final byte[] serialized = SerializationUtils.serialize(value); [EOL]     Assert.assertEquals(value, SerializationUtils.deserialize(serialized)); [EOL]     @SuppressWarnings("unused") [EOL]     final Integer i = SerializationUtils.deserialize(serialized); [EOL] } <line_num>: 213,221
@Test [EOL] public void testDeserializeStreamOfNull() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(null); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]     final Object test = SerializationUtils.deserialize(inTest); [EOL]     assertNull(test); [EOL] } <line_num>: 223,234
@Test [EOL] public void testDeserializeStreamNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((InputStream) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 236,244
@Test [EOL] public void testDeserializeStreamBadStream() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0])); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 246,254
@Test [EOL] public void testDeserializeStreamClassNotFound() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(new ClassNotFoundSerialization()); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final Object test = SerializationUtils.deserialize(inTest); [EOL]     } catch (final SerializationException se) { [EOL]         assertEquals("java.lang.ClassNotFoundException: " + CLASS_NOT_FOUND_MESSAGE, se.getMessage()); [EOL]     } [EOL] } <line_num>: 256,272
@Test [EOL] public void testSerializeBytes() throws Exception { [EOL]     final byte[] testBytes = SerializationUtils.serialize(iMap); [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final byte[] realBytes = streamReal.toByteArray(); [EOL]     assertEquals(testBytes.length, realBytes.length); [EOL]     for (int i = 0; i < realBytes.length; i++) { [EOL]         assertEquals(realBytes[i], testBytes[i]); [EOL]     } [EOL] } <line_num>: 276,291
@Test [EOL] public void testSerializeBytesUnserializable() throws Exception { [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.serialize(iMap); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 293,302
@Test [EOL] public void testSerializeBytesNull() throws Exception { [EOL]     final byte[] testBytes = SerializationUtils.serialize(null); [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(null); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final byte[] realBytes = streamReal.toByteArray(); [EOL]     assertEquals(testBytes.length, realBytes.length); [EOL]     for (int i = 0; i < realBytes.length; i++) { [EOL]         assertEquals(realBytes[i], testBytes[i]); [EOL]     } [EOL] } <line_num>: 304,319
@Test [EOL] public void testDeserializeBytes() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final Object test = SerializationUtils.deserialize(streamReal.toByteArray()); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] } <line_num>: 323,341
@Test [EOL] public void testDeserializeBytesOfNull() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(null); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final Object test = SerializationUtils.deserialize(streamReal.toByteArray()); [EOL]     assertNull(test); [EOL] } <line_num>: 343,353
@Test [EOL] public void testDeserializeBytesNull() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize((byte[]) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 355,363
@Test [EOL] public void testDeserializeBytesBadStream() throws Exception { [EOL]     try { [EOL]         SerializationUtils.deserialize(new byte[0]); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 365,373
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] } <line_num>: 377,389
@Test [EOL] public void testCloneNull() throws Exception { [EOL]     final Object test = SerializationUtils.clone(null); [EOL]     assertNull(test); [EOL] } <line_num>: 391,395
@Test [EOL] public void testCloneUnserializable() throws Exception { [EOL]     try { [EOL]         iMap.put(new Object(), new Object()); [EOL]         SerializationUtils.clone(iMap); [EOL]     } catch (final SerializationException ex) { [EOL]         return; [EOL]     } [EOL]     fail(); [EOL] } <line_num>: 397,406
@Test [EOL] public void testPrimitiveTypeClassSerialization() { [EOL]     final Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class, boolean.class, char.class, void.class }; [EOL]     for (final Class<?> primitiveType : primitiveTypes) { [EOL]         final Class<?> clone = SerializationUtils.clone(primitiveType); [EOL]         assertEquals(primitiveType, clone); [EOL]     } [EOL] } <line_num>: 408,417
private void readObject(final ObjectInputStream in) throws ClassNotFoundException { [EOL]     throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE); [EOL] } <line_num>: 425,427
