@Test [EOL] public void testSubstring_StringInt() { [EOL]     assertEquals(null, StringUtils.substring(null, 0)); [EOL]     assertEquals("", StringUtils.substring("", 0)); [EOL]     assertEquals("", StringUtils.substring("", 2)); [EOL]     assertEquals("", StringUtils.substring(SENTENCE, 80)); [EOL]     assertEquals(BAZ, StringUtils.substring(SENTENCE, 8)); [EOL]     assertEquals(BAZ, StringUtils.substring(SENTENCE, -3)); [EOL]     assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0)); [EOL]     assertEquals("abc", StringUtils.substring("abc", -4)); [EOL]     assertEquals("abc", StringUtils.substring("abc", -3)); [EOL]     assertEquals("bc", StringUtils.substring("abc", -2)); [EOL]     assertEquals("c", StringUtils.substring("abc", -1)); [EOL]     assertEquals("abc", StringUtils.substring("abc", 0)); [EOL]     assertEquals("bc", StringUtils.substring("abc", 1)); [EOL]     assertEquals("c", StringUtils.substring("abc", 2)); [EOL]     assertEquals("", StringUtils.substring("abc", 3)); [EOL]     assertEquals("", StringUtils.substring("abc", 4)); [EOL] } <line_num>: 39,58
@Test [EOL] public void testSubstring_StringIntInt() { [EOL]     assertEquals(null, StringUtils.substring(null, 0, 0)); [EOL]     assertEquals(null, StringUtils.substring(null, 1, 2)); [EOL]     assertEquals("", StringUtils.substring("", 0, 0)); [EOL]     assertEquals("", StringUtils.substring("", 1, 2)); [EOL]     assertEquals("", StringUtils.substring("", -2, -1)); [EOL]     assertEquals("", StringUtils.substring(SENTENCE, 8, 6)); [EOL]     assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3)); [EOL]     assertEquals("o", StringUtils.substring(SENTENCE, -9, 3)); [EOL]     assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8)); [EOL]     assertEquals("o", StringUtils.substring(SENTENCE, -9, -8)); [EOL]     assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80)); [EOL]     assertEquals("", StringUtils.substring(SENTENCE, 2, 2)); [EOL]     assertEquals("b", StringUtils.substring("abc", -2, -1)); [EOL] } <line_num>: 60,76
@Test [EOL] public void testLeft_String() { [EOL]     assertSame(null, StringUtils.left(null, -1)); [EOL]     assertSame(null, StringUtils.left(null, 0)); [EOL]     assertSame(null, StringUtils.left(null, 2)); [EOL]     assertEquals("", StringUtils.left("", -1)); [EOL]     assertEquals("", StringUtils.left("", 0)); [EOL]     assertEquals("", StringUtils.left("", 2)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.left(FOOBAR, 0)); [EOL]     assertEquals(FOO, StringUtils.left(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); [EOL] } <line_num>: 78,92
@Test [EOL] public void testRight_String() { [EOL]     assertSame(null, StringUtils.right(null, -1)); [EOL]     assertSame(null, StringUtils.right(null, 0)); [EOL]     assertSame(null, StringUtils.right(null, 2)); [EOL]     assertEquals("", StringUtils.right("", -1)); [EOL]     assertEquals("", StringUtils.right("", 0)); [EOL]     assertEquals("", StringUtils.right("", 2)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, -1)); [EOL]     assertEquals("", StringUtils.right(FOOBAR, 0)); [EOL]     assertEquals(BAR, StringUtils.right(FOOBAR, 3)); [EOL]     assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); [EOL] } <line_num>: 94,108
@Test [EOL] public void testMid_String() { [EOL]     assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]     assertEquals("", StringUtils.mid("", 0, -1)); [EOL]     assertEquals("", StringUtils.mid("", 0, 0)); [EOL]     assertEquals("", StringUtils.mid("", 0, 2)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]     assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]     assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL] } <line_num>: 110,130
@Test [EOL] public void testSubstringBefore_StringString() { [EOL]     assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]     assertEquals("", StringUtils.substringBefore("", null)); [EOL]     assertEquals("", StringUtils.substringBefore("", "")); [EOL]     assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]     assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]     assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]     assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "")); [EOL] } <line_num>: 133,151
@Test [EOL] public void testSubstringAfter_StringString() { [EOL]     assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]     assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]     assertEquals(null, StringUtils.substringAfter(null, "XX")); [EOL]     assertEquals("", StringUtils.substringAfter("", null)); [EOL]     assertEquals("", StringUtils.substringAfter("", "")); [EOL]     assertEquals("", StringUtils.substringAfter("", "XX")); [EOL]     assertEquals("", StringUtils.substringAfter("foo", null)); [EOL]     assertEquals("ot", StringUtils.substringAfter("foot", "o")); [EOL]     assertEquals("bc", StringUtils.substringAfter("abc", "a")); [EOL]     assertEquals("cba", StringUtils.substringAfter("abcba", "b")); [EOL]     assertEquals("", StringUtils.substringAfter("abc", "c")); [EOL]     assertEquals("abc", StringUtils.substringAfter("abc", "")); [EOL]     assertEquals("", StringUtils.substringAfter("abc", "d")); [EOL] } <line_num>: 153,171
@Test [EOL] public void testSubstringBeforeLast_StringString() { [EOL]     assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringBeforeLast(null, null)); [EOL]     assertEquals(null, StringUtils.substringBeforeLast(null, "")); [EOL]     assertEquals(null, StringUtils.substringBeforeLast(null, "XX")); [EOL]     assertEquals("", StringUtils.substringBeforeLast("", null)); [EOL]     assertEquals("", StringUtils.substringBeforeLast("", "")); [EOL]     assertEquals("", StringUtils.substringBeforeLast("", "XX")); [EOL]     assertEquals("foo", StringUtils.substringBeforeLast("foo", null)); [EOL]     assertEquals("foo", StringUtils.substringBeforeLast("foo", "b")); [EOL]     assertEquals("fo", StringUtils.substringBeforeLast("foo", "o")); [EOL]     assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d")); [EOL]     assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d")); [EOL]     assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d")); [EOL]     assertEquals("a", StringUtils.substringBeforeLast("abc", "b")); [EOL]     assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n")); [EOL]     assertEquals("a", StringUtils.substringBeforeLast("a", null)); [EOL]     assertEquals("a", StringUtils.substringBeforeLast("a", "")); [EOL]     assertEquals("", StringUtils.substringBeforeLast("a", "a")); [EOL] } <line_num>: 173,195
@Test [EOL] public void testSubstringAfterLast_StringString() { [EOL]     assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringAfterLast(null, null)); [EOL]     assertEquals(null, StringUtils.substringAfterLast(null, "")); [EOL]     assertEquals(null, StringUtils.substringAfterLast(null, "XX")); [EOL]     assertEquals("", StringUtils.substringAfterLast("", null)); [EOL]     assertEquals("", StringUtils.substringAfterLast("", "")); [EOL]     assertEquals("", StringUtils.substringAfterLast("", "a")); [EOL]     assertEquals("", StringUtils.substringAfterLast("foo", null)); [EOL]     assertEquals("", StringUtils.substringAfterLast("foo", "b")); [EOL]     assertEquals("t", StringUtils.substringAfterLast("foot", "o")); [EOL]     assertEquals("bc", StringUtils.substringAfterLast("abc", "a")); [EOL]     assertEquals("a", StringUtils.substringAfterLast("abcba", "b")); [EOL]     assertEquals("", StringUtils.substringAfterLast("abc", "c")); [EOL]     assertEquals("", StringUtils.substringAfterLast("", "d")); [EOL]     assertEquals("", StringUtils.substringAfterLast("abc", "")); [EOL] } <line_num>: 197,216
@Test [EOL] public void testSubstringBetween_StringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "tag")); [EOL]     assertEquals("", StringUtils.substringBetween("", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "abc")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", null)); [EOL]     assertEquals("", StringUtils.substringBetween("abc", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("abc", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abca", "a")); [EOL]     assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); [EOL]     assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); [EOL] } <line_num>: 219,231
@Test [EOL] public void testSubstringBetween_StringStringString() { [EOL]     assertEquals(null, StringUtils.substringBetween(null, "", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", null, "")); [EOL]     assertEquals(null, StringUtils.substringBetween("", "", null)); [EOL]     assertEquals("", StringUtils.substringBetween("", "", "")); [EOL]     assertEquals("", StringUtils.substringBetween("foo", "", "")); [EOL]     assertEquals(null, StringUtils.substringBetween("foo", "", "]")); [EOL]     assertEquals(null, StringUtils.substringBetween("foo", "[", "]")); [EOL]     assertEquals("", StringUtils.substringBetween("    ", " ", "  ")); [EOL]     assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo>", "</foo>")); [EOL] } <line_num>: 233,244
@Test [EOL] public void testSubstringsBetween_StringStringString() { [EOL]     String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]     assertEquals(3, results.length); [EOL]     assertEquals("one", results[0]); [EOL]     assertEquals("two", results[1]); [EOL]     assertEquals("three", results[2]); [EOL]     results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]     assertEquals(2, results.length); [EOL]     assertEquals("one", results[0]); [EOL]     assertEquals("two", results[1]); [EOL]     results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]     assertEquals(2, results.length); [EOL]     assertEquals("one", results[0]); [EOL]     assertEquals("two", results[1]); [EOL]     results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]     assertEquals(1, results.length); [EOL]     assertEquals("one", results[0]); [EOL]     results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]     assertEquals(1, results.length); [EOL]     assertEquals("three", results[0]); [EOL]     results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba"); [EOL]     assertEquals(1, results.length); [EOL]     assertEquals("hello", results[0]); [EOL]     results = StringUtils.substringsBetween("one, two, three", "[", "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("[one, two, three", "[", "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("one, two, three]", "[", "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("[one], [two], [three]", "[", null); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("[one], [two], [three]", null, "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("[one], [two], [three]", "", ""); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween(null, "[", "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("", "[", "]"); [EOL]     assertEquals(0, results.length); [EOL] } <line_num>: 249,305
@Test [EOL] public void testCountMatches_String() { [EOL]     assertEquals(0, StringUtils.countMatches(null, null)); [EOL]     assertEquals(0, StringUtils.countMatches("blah", null)); [EOL]     assertEquals(0, StringUtils.countMatches(null, "DD")); [EOL]     assertEquals(0, StringUtils.countMatches("x", "")); [EOL]     assertEquals(0, StringUtils.countMatches("", "")); [EOL]     assertEquals(3, StringUtils.countMatches("one long someone sentence of one", "one")); [EOL]     assertEquals(0, StringUtils.countMatches("one long someone sentence of one", "two")); [EOL]     assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo")); [EOL] } <line_num>: 308,323
