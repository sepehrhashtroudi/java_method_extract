@Test [EOL] public void testRemoveObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.remove(new Object[] { "a" }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new Object[] { "a", "b" }, 0); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new Object[] { "a", "b" }, 1); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new Object[] { "a", "b", "c" }, 1); [EOL]     assertTrue(Arrays.equals(new Object[] { "a", "c" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new Object[] { "a", "b" }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new Object[] { "a", "b" }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((Object[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 36,63
@Test [EOL] public void testRemoveNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.remove(inarray, 1); [EOL]     assertEquals(2, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 1); [EOL]     assertEquals(1, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.remove(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] } <line_num>: 65,79
@Test [EOL] public void testRemoveBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.remove(new boolean[] { true }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 0); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false, true }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((boolean[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 81,108
@Test [EOL] public void testRemoveByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.remove(new byte[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new byte[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new byte[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new byte[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new byte[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new byte[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((byte[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 110,137
@Test [EOL] public void testRemoveCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.remove(new char[] { 'a' }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b', 'c' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((char[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 139,166
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 168,195
@Test [EOL] public void testRemoveFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.remove(new float[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new float[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new float[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((float[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 197,224
@Test [EOL] public void testRemoveIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.remove(new int[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((int[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 226,253
@Test [EOL] public void testRemoveLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.remove(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new long[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new long[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((long[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 255,282
@Test [EOL] public void testRemoveShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.remove(new short[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new short[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new short[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new short[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new short[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new short[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((short[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 284,311
@Test [EOL] public void testRemoveElementObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElement((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] } <line_num>: 313,330
@Test [EOL] public void testRemoveElementBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.removeElement((boolean[]) null, true); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new boolean[] { true }, true); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new boolean[] { true, false }, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new boolean[] { true, false, true }, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 332,349
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 351,368
@Test [EOL] public void testRemoveElementCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.removeElement((char[]) null, 'a'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 370,387
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElement((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 389,407
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.removeElement((float[]) null, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new float[] { 1, 2, 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 409,427
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElement((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 429,446
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElement((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 448,466
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 468,485
