@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new CharSetUtils()); [EOL]     final Constructor<?>[] cons = CharSetUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(CharSetUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(CharSetUtils.class.getModifiers())); [EOL] } <line_num>: 37,45
@Test [EOL] public void testSqueeze_StringString() { [EOL]     assertEquals(null, CharSetUtils.squeeze(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.squeeze(null, "")); [EOL]     assertEquals("", CharSetUtils.squeeze("", (String) null)); [EOL]     assertEquals("", CharSetUtils.squeeze("", "")); [EOL]     assertEquals("", CharSetUtils.squeeze("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", "")); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); [EOL]     assertEquals("helo", CharSetUtils.squeeze("hello", "l-p")); [EOL]     assertEquals("heloo", CharSetUtils.squeeze("helloo", "l")); [EOL]     assertEquals("hello", CharSetUtils.squeeze("helloo", "^l")); [EOL] } <line_num>: 48,63
@Test [EOL] public void testSqueeze_StringStringarray() { [EOL]     assertEquals(null, CharSetUtils.squeeze(null, (String[]) null)); [EOL]     assertEquals(null, CharSetUtils.squeeze(null, new String[0])); [EOL]     assertEquals(null, CharSetUtils.squeeze(null, new String[] { null })); [EOL]     assertEquals(null, CharSetUtils.squeeze(null, new String[] { "el" })); [EOL]     assertEquals("", CharSetUtils.squeeze("", (String[]) null)); [EOL]     assertEquals("", CharSetUtils.squeeze("", new String[0])); [EOL]     assertEquals("", CharSetUtils.squeeze("", new String[] { null })); [EOL]     assertEquals("", CharSetUtils.squeeze("", new String[] { "a-e" })); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", (String[]) null)); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", new String[0])); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", new String[] { null })); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", new String[] { "a-e" })); [EOL]     assertEquals("helo", CharSetUtils.squeeze("hello", new String[] { "el" })); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", new String[] { "e" })); [EOL]     assertEquals("fofof", CharSetUtils.squeeze("fooffooff", new String[] { "of" })); [EOL]     assertEquals("fof", CharSetUtils.squeeze("fooooff", new String[] { "fo" })); [EOL] } <line_num>: 65,86
@Test [EOL] public void testContainsAny_StringString() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, "")); [EOL]     assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", "")); [EOL]     assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]     assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL] } <line_num>: 89,102
@Test [EOL] public void testContainsAny_StringStringarray() { [EOL]     assertFalse(CharSetUtils.containsAny(null, (String[]) null)); [EOL]     assertFalse(CharSetUtils.containsAny(null, new String[0])); [EOL]     assertFalse(CharSetUtils.containsAny(null, new String[] { null })); [EOL]     assertFalse(CharSetUtils.containsAny(null, new String[] { "a-e" })); [EOL]     assertFalse(CharSetUtils.containsAny("", (String[]) null)); [EOL]     assertFalse(CharSetUtils.containsAny("", new String[0])); [EOL]     assertFalse(CharSetUtils.containsAny("", new String[] { null })); [EOL]     assertFalse(CharSetUtils.containsAny("", new String[] { "a-e" })); [EOL]     assertFalse(CharSetUtils.containsAny("hello", (String[]) null)); [EOL]     assertFalse(CharSetUtils.containsAny("hello", new String[0])); [EOL]     assertFalse(CharSetUtils.containsAny("hello", new String[] { null })); [EOL]     assertTrue(CharSetUtils.containsAny("hello", new String[] { "a-e" })); [EOL]     assertTrue(CharSetUtils.containsAny("hello", new String[] { "el" })); [EOL]     assertFalse(CharSetUtils.containsAny("hello", new String[] { "x" })); [EOL]     assertTrue(CharSetUtils.containsAny("hello", new String[] { "e-i" })); [EOL]     assertTrue(CharSetUtils.containsAny("hello", new String[] { "a-z" })); [EOL]     assertFalse(CharSetUtils.containsAny("hello", new String[] { "" })); [EOL] } <line_num>: 104,126
@Test [EOL] public void testCount_StringString() { [EOL]     assertEquals(0, CharSetUtils.count(null, (String) null)); [EOL]     assertEquals(0, CharSetUtils.count(null, "")); [EOL]     assertEquals(0, CharSetUtils.count("", (String) null)); [EOL]     assertEquals(0, CharSetUtils.count("", "")); [EOL]     assertEquals(0, CharSetUtils.count("", "a-e")); [EOL]     assertEquals(0, CharSetUtils.count("hello", (String) null)); [EOL]     assertEquals(0, CharSetUtils.count("hello", "")); [EOL]     assertEquals(1, CharSetUtils.count("hello", "a-e")); [EOL]     assertEquals(3, CharSetUtils.count("hello", "l-p")); [EOL] } <line_num>: 129,142
@Test [EOL] public void testCount_StringStringarray() { [EOL]     assertEquals(0, CharSetUtils.count(null, (String[]) null)); [EOL]     assertEquals(0, CharSetUtils.count(null, new String[0])); [EOL]     assertEquals(0, CharSetUtils.count(null, new String[] { null })); [EOL]     assertEquals(0, CharSetUtils.count(null, new String[] { "a-e" })); [EOL]     assertEquals(0, CharSetUtils.count("", (String[]) null)); [EOL]     assertEquals(0, CharSetUtils.count("", new String[0])); [EOL]     assertEquals(0, CharSetUtils.count("", new String[] { null })); [EOL]     assertEquals(0, CharSetUtils.count("", new String[] { "a-e" })); [EOL]     assertEquals(0, CharSetUtils.count("hello", (String[]) null)); [EOL]     assertEquals(0, CharSetUtils.count("hello", new String[0])); [EOL]     assertEquals(0, CharSetUtils.count("hello", new String[] { null })); [EOL]     assertEquals(1, CharSetUtils.count("hello", new String[] { "a-e" })); [EOL]     assertEquals(3, CharSetUtils.count("hello", new String[] { "el" })); [EOL]     assertEquals(0, CharSetUtils.count("hello", new String[] { "x" })); [EOL]     assertEquals(2, CharSetUtils.count("hello", new String[] { "e-i" })); [EOL]     assertEquals(5, CharSetUtils.count("hello", new String[] { "a-z" })); [EOL]     assertEquals(0, CharSetUtils.count("hello", new String[] { "" })); [EOL] } <line_num>: 144,166
@Test [EOL] public void testKeep_StringString() { [EOL]     assertEquals(null, CharSetUtils.keep(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.keep(null, "")); [EOL]     assertEquals("", CharSetUtils.keep("", (String) null)); [EOL]     assertEquals("", CharSetUtils.keep("", "")); [EOL]     assertEquals("", CharSetUtils.keep("", "a-e")); [EOL]     assertEquals("", CharSetUtils.keep("hello", (String) null)); [EOL]     assertEquals("", CharSetUtils.keep("hello", "")); [EOL]     assertEquals("", CharSetUtils.keep("hello", "xyz")); [EOL]     assertEquals("hello", CharSetUtils.keep("hello", "a-z")); [EOL]     assertEquals("hello", CharSetUtils.keep("hello", "oleh")); [EOL]     assertEquals("ell", CharSetUtils.keep("hello", "el")); [EOL] } <line_num>: 169,184
@Test [EOL] public void testKeep_StringStringarray() { [EOL]     assertEquals(null, CharSetUtils.keep(null, (String[]) null)); [EOL]     assertEquals(null, CharSetUtils.keep(null, new String[0])); [EOL]     assertEquals(null, CharSetUtils.keep(null, new String[] { null })); [EOL]     assertEquals(null, CharSetUtils.keep(null, new String[] { "a-e" })); [EOL]     assertEquals("", CharSetUtils.keep("", (String[]) null)); [EOL]     assertEquals("", CharSetUtils.keep("", new String[0])); [EOL]     assertEquals("", CharSetUtils.keep("", new String[] { null })); [EOL]     assertEquals("", CharSetUtils.keep("", new String[] { "a-e" })); [EOL]     assertEquals("", CharSetUtils.keep("hello", (String[]) null)); [EOL]     assertEquals("", CharSetUtils.keep("hello", new String[0])); [EOL]     assertEquals("", CharSetUtils.keep("hello", new String[] { null })); [EOL]     assertEquals("e", CharSetUtils.keep("hello", new String[] { "a-e" })); [EOL]     assertEquals("e", CharSetUtils.keep("hello", new String[] { "a-e" })); [EOL]     assertEquals("ell", CharSetUtils.keep("hello", new String[] { "el" })); [EOL]     assertEquals("hello", CharSetUtils.keep("hello", new String[] { "elho" })); [EOL]     assertEquals("hello", CharSetUtils.keep("hello", new String[] { "a-z" })); [EOL]     assertEquals("----", CharSetUtils.keep("----", new String[] { "-" })); [EOL]     assertEquals("ll", CharSetUtils.keep("hello", new String[] { "l" })); [EOL] } <line_num>: 186,209
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] } <line_num>: 212,226
@Test [EOL] public void testDelete_StringStringarray() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String[]) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, new String[0])); [EOL]     assertEquals(null, CharSetUtils.delete(null, new String[] { null })); [EOL]     assertEquals(null, CharSetUtils.delete(null, new String[] { "el" })); [EOL]     assertEquals("", CharSetUtils.delete("", (String[]) null)); [EOL]     assertEquals("", CharSetUtils.delete("", new String[0])); [EOL]     assertEquals("", CharSetUtils.delete("", new String[] { null })); [EOL]     assertEquals("", CharSetUtils.delete("", new String[] { "a-e" })); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String[]) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", new String[0])); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", new String[] { null })); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", new String[] { "xyz" })); [EOL]     assertEquals("ho", CharSetUtils.delete("hello", new String[] { "el" })); [EOL]     assertEquals("", CharSetUtils.delete("hello", new String[] { "elho" })); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", new String[] { "" })); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("", CharSetUtils.delete("hello", new String[] { "a-z" })); [EOL]     assertEquals("", CharSetUtils.delete("----", new String[] { "-" })); [EOL]     assertEquals("heo", CharSetUtils.delete("hello", new String[] { "l" })); [EOL] } <line_num>: 228,252
