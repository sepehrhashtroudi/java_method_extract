@Test [EOL] public void testIsAlpha() { [EOL]     assertFalse(StringUtils.isAlpha(null)); [EOL]     assertFalse(StringUtils.isAlpha("")); [EOL]     assertFalse(StringUtils.isAlpha(" ")); [EOL]     assertTrue(StringUtils.isAlpha("a")); [EOL]     assertTrue(StringUtils.isAlpha("A")); [EOL]     assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlpha("ham kso")); [EOL]     assertFalse(StringUtils.isAlpha("1")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlpha("_")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL] } <line_num>: 33,46
@Test [EOL] public void testIsAlphanumeric() { [EOL]     assertFalse(StringUtils.isAlphanumeric(null)); [EOL]     assertFalse(StringUtils.isAlphanumeric("")); [EOL]     assertFalse(StringUtils.isAlphanumeric(" ")); [EOL]     assertTrue(StringUtils.isAlphanumeric("a")); [EOL]     assertTrue(StringUtils.isAlphanumeric("A")); [EOL]     assertTrue(StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlphanumeric("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumeric("1")); [EOL]     assertTrue(StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumeric("_")); [EOL]     assertFalse(StringUtils.isAlphanumeric("hkHKHik*khbkuh")); [EOL] } <line_num>: 48,61
@Test [EOL] public void testIsWhitespace() { [EOL]     assertFalse(StringUtils.isWhitespace(null)); [EOL]     assertTrue(StringUtils.isWhitespace("")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]     assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]     assertTrue(StringUtils.isWhitespace(" ")); [EOL]     assertFalse(StringUtils.isWhitespace(" a ")); [EOL]     assertFalse(StringUtils.isWhitespace("a  ")); [EOL]     assertFalse(StringUtils.isWhitespace("  a")); [EOL]     assertFalse(StringUtils.isWhitespace("aba")); [EOL]     assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL] } <line_num>: 63,77
@Test [EOL] public void testIsAlphaspace() { [EOL]     assertFalse(StringUtils.isAlphaSpace(null)); [EOL]     assertTrue(StringUtils.isAlphaSpace("")); [EOL]     assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphaSpace("a")); [EOL]     assertTrue(StringUtils.isAlphaSpace("A")); [EOL]     assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]     assertFalse(StringUtils.isAlphaSpace("1")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphaSpace("_")); [EOL]     assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL] } <line_num>: 79,92
@Test [EOL] public void testIsAlphanumericSpace() { [EOL]     assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("A")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("ham kso")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("1")); [EOL]     assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("_")); [EOL]     assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); [EOL] } <line_num>: 94,107
@Test [EOL] public void testIsAsciiPrintable_String() { [EOL]     assertFalse(StringUtils.isAsciiPrintable(null)); [EOL]     assertTrue(StringUtils.isAsciiPrintable("")); [EOL]     assertTrue(StringUtils.isAsciiPrintable(" ")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("a")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("A")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("Ceki")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1000")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10 00")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("10\t00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10.00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10,00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab-c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0020")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0021")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u007e")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("\u007f")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("G?lc?")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?=")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc")); [EOL] } <line_num>: 109,133
@Test [EOL] public void testIsNumeric() { [EOL]     assertFalse(StringUtils.isNumeric(null)); [EOL]     assertFalse(StringUtils.isNumeric("")); [EOL]     assertFalse(StringUtils.isNumeric(" ")); [EOL]     assertFalse(StringUtils.isNumeric("a")); [EOL]     assertFalse(StringUtils.isNumeric("A")); [EOL]     assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isNumeric("ham kso")); [EOL]     assertTrue(StringUtils.isNumeric("1")); [EOL]     assertTrue(StringUtils.isNumeric("1000")); [EOL]     assertFalse(StringUtils.isNumeric("2.3")); [EOL]     assertFalse(StringUtils.isNumeric("10 00")); [EOL]     assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isNumeric("_")); [EOL]     assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh")); [EOL]     assertFalse(StringUtils.isNumeric("+123")); [EOL]     assertFalse(StringUtils.isNumeric("-123")); [EOL] } <line_num>: 135,153
@Test [EOL] public void testIsNumericSpace() { [EOL]     assertFalse(StringUtils.isNumericSpace(null)); [EOL]     assertTrue(StringUtils.isNumericSpace("")); [EOL]     assertTrue(StringUtils.isNumericSpace(" ")); [EOL]     assertFalse(StringUtils.isNumericSpace("a")); [EOL]     assertFalse(StringUtils.isNumericSpace("A")); [EOL]     assertFalse(StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isNumericSpace("ham kso")); [EOL]     assertTrue(StringUtils.isNumericSpace("1")); [EOL]     assertTrue(StringUtils.isNumericSpace("1000")); [EOL]     assertFalse(StringUtils.isNumericSpace("2.3")); [EOL]     assertTrue(StringUtils.isNumericSpace("10 00")); [EOL]     assertFalse(StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isNumericSpace("_")); [EOL]     assertFalse(StringUtils.isNumericSpace("hkHKHik*khbkuh")); [EOL] } <line_num>: 155,171
