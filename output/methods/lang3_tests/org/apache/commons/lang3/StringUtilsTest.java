@Override [EOL] public String toString() { [EOL]     return null; [EOL] } <line_num>: 81,84
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new StringUtils()); [EOL]     final Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(StringUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(StringUtils.class.getModifiers())); [EOL] } <line_num>: 111,119
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] } <line_num>: 122,178
@Test [EOL] public void testSwapCase_String() { [EOL]     assertEquals(null, StringUtils.swapCase(null)); [EOL]     assertEquals("", StringUtils.swapCase("")); [EOL]     assertEquals("  ", StringUtils.swapCase("  ")); [EOL]     assertEquals("i", WordUtils.swapCase("I")); [EOL]     assertEquals("I", WordUtils.swapCase("i")); [EOL]     assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123")); [EOL]     assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123")); [EOL]     assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123")); [EOL]     assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123")); [EOL]     final String test = "This String contains a TitleCase character: \u01C8"; [EOL]     final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]     assertEquals(expect, WordUtils.swapCase(test)); [EOL] } <line_num>: 180,196
@Test [EOL] public void testJoin_Objects() { [EOL]     assertEquals("abc", StringUtils.join("a", "b", "c")); [EOL]     assertEquals("a", StringUtils.join(null, "", "a")); [EOL]     assertEquals(null, StringUtils.join((Object[]) null)); [EOL] } <line_num>: 199,204
@Test [EOL] public void testJoin_Objectarray() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null)); [EOL]     assertEquals("", StringUtils.join()); [EOL]     assertEquals("", StringUtils.join((Object) null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); [EOL]     assertEquals("abc", StringUtils.join(new String[] { "a", "b", "c" })); [EOL]     assertEquals("a", StringUtils.join(new String[] { null, "a", "" })); [EOL]     assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); [EOL]     assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); [EOL] } <line_num>: 206,221
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] } <line_num>: 223,237
@Test [EOL] public void testJoin_ArrayOfChars() { [EOL]     assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] } <line_num>: 239,244
@Test [EOL] public void testJoin_ArrayOfBytes() { [EOL]     assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] } <line_num>: 246,251
@Test [EOL] public void testJoin_ArrayOfInts() { [EOL]     assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] } <line_num>: 253,258
@Test [EOL] public void testJoin_ArrayOfLongs() { [EOL]     assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] } <line_num>: 260,265
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] } <line_num>: 267,272
@Test [EOL] public void testJoin_ArrayOfDoubles() { [EOL]     assertEquals(null, StringUtils.join((double[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] } <line_num>: 274,279
@Test [EOL] public void testJoin_ArrayOfShorts() { [EOL]     assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] } <line_num>: 281,286
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] } <line_num>: 288,310
@Test [EOL] public void testJoin_IteratorChar() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL] } <line_num>: 312,319
@Test [EOL] public void testJoin_IteratorString() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), "")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), "x")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), "")); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR)); [EOL] } <line_num>: 321,336
@Test [EOL] public void testJoin_IterableChar() { [EOL]     assertEquals(null, StringUtils.join((Iterable<?>) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR)); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x')); [EOL] } <line_num>: 338,345
@Test [EOL] public void testJoin_IterableString() { [EOL]     assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL] } <line_num>: 347,362
@Test [EOL] public void testSplit_String() { [EOL]     assertArrayEquals(null, StringUtils.split(null)); [EOL]     assertEquals(0, StringUtils.split("").length); [EOL]     String str = "a b  .c"; [EOL]     String[] res = StringUtils.split(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a "; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.split(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[1]); [EOL] } <line_num>: 364,386
@Test [EOL] public void testSplit_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.split(null, '.')); [EOL]     assertEquals(0, StringUtils.split("", '.').length); [EOL]     String str = "a.b.. c"; [EOL]     String[] res = StringUtils.split(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = ".a."; [EOL]     res = StringUtils.split(str, '.'); [EOL]     assertEquals(1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.split(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL] } <line_num>: 388,411
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] } <line_num>: 413,445
private void innerTestSplit(final char separator, final String sepStr, final char noMatch) { [EOL]     final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]     final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]     String[] res; [EOL]     res = StringUtils.split(str, sepStr); [EOL]     assertEquals(msg, 3, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     assertEquals(msg, "b", res[1]); [EOL]     assertEquals(msg, noMatch + "c", res[2]); [EOL]     final String str2 = separator + "a" + separator; [EOL]     res = StringUtils.split(str2, sepStr); [EOL]     assertEquals(msg, 1, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     res = StringUtils.split(str, sepStr, -1); [EOL]     assertEquals(msg, 3, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     assertEquals(msg, "b", res[1]); [EOL]     assertEquals(msg, noMatch + "c", res[2]); [EOL]     res = StringUtils.split(str, sepStr, 0); [EOL]     assertEquals(msg, 3, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     assertEquals(msg, "b", res[1]); [EOL]     assertEquals(msg, noMatch + "c", res[2]); [EOL]     res = StringUtils.split(str, sepStr, 1); [EOL]     assertEquals(msg, 1, res.length); [EOL]     assertEquals(msg, str, res[0]); [EOL]     res = StringUtils.split(str, sepStr, 2); [EOL]     assertEquals(msg, 2, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     assertEquals(msg, str.substring(2), res[1]); [EOL] } <line_num>: 447,485
@Test [EOL] public void testSplitByWholeString_StringStringBoolean() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".")); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".").length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de", "fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy"); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL]     final String[] splitWithMultipleSeparatorExpectedResults = { "ab", "cd", "ef" }; [EOL]     final String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator("ab:cd::ef", ":"); [EOL]     assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length); [EOL]     for (int i = 0; i < splitWithMultipleSeparatorExpectedResults.length; i++) { [EOL]         assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]); [EOL]     } [EOL] } <line_num>: 487,517
@Test [EOL] public void testSplitByWholeString_StringStringBooleanInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy", 2); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i++) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL] } <line_num>: 519,544
@Test [EOL] public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, ".", -1)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens("", ".", -1).length); [EOL]     String input = "ab   de fg"; [EOL]     String[] expected = new String[] { "ab", "", "", "de", "fg" }; [EOL]     String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2:::3::::4"; [EOL]     expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, "::", -1); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL]     input = "1::2::3:4"; [EOL]     expected = new String[] { "1", "", "2", ":3:4" }; [EOL]     actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, ":", 4); [EOL]     assertEquals(expected.length, actual.length); [EOL]     for (int i = 0; i < actual.length; i += 1) { [EOL]         assertEquals(expected[i], actual[i]); [EOL]     } [EOL] } <line_num>: 546,591
@Test [EOL] public void testSplitPreserveAllTokens_String() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("").length); [EOL]     String str = "abc def"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(2, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("def", res[1]); [EOL]     str = "abc  def"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("abc", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("def", res[2]); [EOL]     str = " abc "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("abc", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = "a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(".c", res[2]); [EOL]     str = " a b .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals(".c", res[3]); [EOL]     str = "a  b  .c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals(".c", res[4]); [EOL]     str = " a  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = " a  b"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str); [EOL]     assertEquals(WHITESPACE.length() + 1, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     for (int i = 1; i < WHITESPACE.length() - 1; i++) { [EOL]         assertEquals("", res[i]); [EOL]     } [EOL]     assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]); [EOL] } <line_num>: 593,667
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 669,779
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] } <line_num>: 781,909
private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]     final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]     final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]     String[] res; [EOL]     res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]     assertEquals(msg, 4, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     assertEquals(msg, "b", res[1]); [EOL]     assertEquals(msg, "", res[2]); [EOL]     assertEquals(msg, noMatch + "c", res[3]); [EOL]     final String str2 = separator + "a" + separator; [EOL]     res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]     assertEquals(msg, 3, res.length); [EOL]     assertEquals(msg, "", res[0]); [EOL]     assertEquals(msg, "a", res[1]); [EOL]     assertEquals(msg, "", res[2]); [EOL]     res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]     assertEquals(msg, 4, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     assertEquals(msg, "b", res[1]); [EOL]     assertEquals(msg, "", res[2]); [EOL]     assertEquals(msg, noMatch + "c", res[3]); [EOL]     res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]     assertEquals(msg, 4, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     assertEquals(msg, "b", res[1]); [EOL]     assertEquals(msg, "", res[2]); [EOL]     assertEquals(msg, noMatch + "c", res[3]); [EOL]     res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]     assertEquals(msg, 1, res.length); [EOL]     assertEquals(msg, str, res[0]); [EOL]     res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]     assertEquals(msg, 2, res.length); [EOL]     assertEquals(msg, "a", res[0]); [EOL]     assertEquals(msg, str.substring(2), res[1]); [EOL] } <line_num>: 911,954
@Test [EOL] public void testSplitByCharacterType() { [EOL]     assertNull(StringUtils.splitByCharacterType(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterType("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterType("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterType("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "B", "ar" }, StringUtils.splitByCharacterType("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "B", "ar" }, StringUtils.splitByCharacterType("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASFR", "ules" }, StringUtils.splitByCharacterType("ASFRules"))); [EOL] } <line_num>: 956,981
@Test [EOL] public void testSplitByCharacterTypeCamelCase() { [EOL]     assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL] } <line_num>: 983,1008
@Test [EOL] public void testDeleteWhitespace_String() { [EOL]     assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]     assertEquals("", StringUtils.deleteWhitespace("")); [EOL]     assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]     assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]     assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]     assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL] } <line_num>: 1010,1022
@Test [EOL] public void testLang623() { [EOL]     assertEquals("t", StringUtils.replaceChars("\u00DE", '\u00DE', 't')); [EOL]     assertEquals("t", StringUtils.replaceChars("\u00FE", '\u00FE', 't')); [EOL] } <line_num>: 1024,1028
@Test [EOL] public void testReplace_StringStringString() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replace("", null, null)); [EOL]     assertEquals("", StringUtils.replace("", null, "any")); [EOL]     assertEquals("", StringUtils.replace("", "any", null)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, null)); [EOL]     assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); [EOL]     assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); [EOL]     assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); [EOL] } <line_num>: 1030,1050
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] } <line_num>: 1052,1055
@Test [EOL] public void testRemovePattern() { [EOL]     assertEquals("", StringUtils.removePattern("<A>x\\ny</A>", "<A>.*</A>")); [EOL] } <line_num>: 1057,1060
@Test [EOL] public void testReplace_StringStringStringInt() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null, 2)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any", 2)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null, 2)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any", 2)); [EOL]     assertEquals("", StringUtils.replace("", null, null, 2)); [EOL]     assertEquals("", StringUtils.replace("", null, "any", 2)); [EOL]     assertEquals("", StringUtils.replace("", "any", null, 2)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any", 2)); [EOL]     final String str = new String(new char[] { 'o', 'o', 'f', 'o', 'o' }); [EOL]     assertSame(str, StringUtils.replace(str, "x", "", -1)); [EOL]     assertEquals("f", StringUtils.replace("oofoo", "o", "", -1)); [EOL]     assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0)); [EOL]     assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1)); [EOL]     assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2)); [EOL]     assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3)); [EOL]     assertEquals("f", StringUtils.replace("oofoo", "o", "", 4)); [EOL]     assertEquals("f", StringUtils.replace("oofoo", "o", "", -5)); [EOL]     assertEquals("f", StringUtils.replace("oofoo", "o", "", 1000)); [EOL] } <line_num>: 1062,1086
@Test [EOL] public void testReplaceOnce_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replaceOnce(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", null, "any")); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", null)); [EOL]     assertEquals("", StringUtils.replaceOnce("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); [EOL]     assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); [EOL] } <line_num>: 1088,1106
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] } <line_num>: 1111,1141
@Test [EOL] public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]     assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "tcte"); [EOL]     try { [EOL]         StringUtils.replaceEachRepeatedly("abcde", new String[] { "ab", "d" }, new String[] { "d", "ab" }); [EOL]         fail("Should be a circular reference"); [EOL]     } catch (final IllegalStateException e) { [EOL]     } [EOL] } <line_num>: 1146,1167
@Test [EOL] public void testReplaceChars_StringCharChar() { [EOL]     assertEquals(null, StringUtils.replaceChars(null, 'b', 'z')); [EOL]     assertEquals("", StringUtils.replaceChars("", 'b', 'z')); [EOL]     assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z')); [EOL]     assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z')); [EOL] } <line_num>: 1169,1175
@Test [EOL] public void testReplaceChars_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]     assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]     assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]     assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]     assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]     assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]     assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]     assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]     assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]     assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]     assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]     assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]     assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]     assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]     assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]     assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL] } <line_num>: 1177,1221
@Test [EOL] public void testOverlay_StringStringIntInt() { [EOL]     assertEquals(null, StringUtils.overlay(null, null, 2, 4)); [EOL]     assertEquals(null, StringUtils.overlay(null, null, -2, -4)); [EOL]     assertEquals("", StringUtils.overlay("", null, 0, 0)); [EOL]     assertEquals("", StringUtils.overlay("", "", 0, 0)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); [EOL]     assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4)); [EOL]     assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2)); [EOL]     assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4)); [EOL]     assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2)); [EOL]     assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4)); [EOL]     assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1)); [EOL]     assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1)); [EOL]     assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2)); [EOL]     assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10)); [EOL]     assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4)); [EOL]     assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10)); [EOL]     assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8)); [EOL] } <line_num>: 1223,1249
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] } <line_num>: 1251,1262
@Test [EOL] public void testRepeat_StringStringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]     assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]     assertEquals("", StringUtils.repeat("", null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]     assertEquals("", StringUtils.repeat("", "", 2)); [EOL]     assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]     assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL] } <line_num>: 1264,1276
@Test [EOL] public void testChop() { [EOL]     final String[][] chopCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { "foo", "fo" }, { "foo\nfoo", "foo\nfo" }, { "\n", "" }, { "\r", "" }, { "\r\n", "" }, { null, null }, { "", "" }, { "a", "" } }; [EOL]     for (final String[] chopCase : chopCases) { [EOL]         final String original = chopCase[0]; [EOL]         final String expectedResult = chopCase[1]; [EOL]         assertEquals("chop(String) failed", expectedResult, StringUtils.chop(original)); [EOL]     } [EOL] } <line_num>: 1278,1301
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testChomp() { [EOL]     final String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n" }, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n" } }; [EOL]     for (final String[] chompCase : chompCases) { [EOL]         final String original = chompCase[0]; [EOL]         final String expectedResult = chompCase[1]; [EOL]         assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); [EOL]     } [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); [EOL]     assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); [EOL]     assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); [EOL]     assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); [EOL]     assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); [EOL]     assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); [EOL] } <line_num>: 1303,1360
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] } <line_num>: 1363,1370
@Test [EOL] public void testRightPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); [EOL]     assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); [EOL]     final String str = StringUtils.rightPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] } <line_num>: 1372,1383
@Test [EOL] public void testRightPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5, "-+")); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5, " ")); [EOL]     assertEquals(null, StringUtils.rightPad(null, 8, null)); [EOL]     assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+")); [EOL]     assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~")); [EOL]     assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1, " ")); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5, null)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5, "")); [EOL] } <line_num>: 1385,1397
@Test [EOL] public void testLeftPad_StringInt() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL] } <line_num>: 1400,1406
@Test [EOL] public void testLeftPad_StringIntChar() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, ' ')); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, ' ')); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, ' ')); [EOL]     assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); [EOL]     assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); [EOL]     final String str = StringUtils.leftPad("aaa", 10000, 'a'); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] } <line_num>: 1408,1419
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] } <line_num>: 1421,1433
@Test [EOL] public void testLengthString() { [EOL]     assertEquals(0, StringUtils.length(null)); [EOL]     assertEquals(0, StringUtils.length("")); [EOL]     assertEquals(0, StringUtils.length(StringUtils.EMPTY)); [EOL]     assertEquals(1, StringUtils.length("A")); [EOL]     assertEquals(1, StringUtils.length(" ")); [EOL]     assertEquals(8, StringUtils.length("ABCDEFGH")); [EOL] } <line_num>: 1435,1443
@Test [EOL] public void testLengthStringBuffer() { [EOL]     assertEquals(0, StringUtils.length(new StringBuffer(""))); [EOL]     assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY))); [EOL]     assertEquals(1, StringUtils.length(new StringBuffer("A"))); [EOL]     assertEquals(1, StringUtils.length(new StringBuffer(" "))); [EOL]     assertEquals(8, StringUtils.length(new StringBuffer("ABCDEFGH"))); [EOL] } <line_num>: 1445,1452
@Test [EOL] public void testLengthStringBuilder() { [EOL]     assertEquals(0, StringUtils.length(new StringBuilder(""))); [EOL]     assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY))); [EOL]     assertEquals(1, StringUtils.length(new StringBuilder("A"))); [EOL]     assertEquals(1, StringUtils.length(new StringBuilder(" "))); [EOL]     assertEquals(8, StringUtils.length(new StringBuilder("ABCDEFGH"))); [EOL] } <line_num>: 1454,1461
@Test [EOL] public void testLength_CharBuffer() { [EOL]     assertEquals(0, StringUtils.length(CharBuffer.wrap(""))); [EOL]     assertEquals(1, StringUtils.length(CharBuffer.wrap("A"))); [EOL]     assertEquals(1, StringUtils.length(CharBuffer.wrap(" "))); [EOL]     assertEquals(8, StringUtils.length(CharBuffer.wrap("ABCDEFGH"))); [EOL] } <line_num>: 1463,1469
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] } <line_num>: 1472,1485
@Test [EOL] public void testCenter_StringIntChar() { [EOL]     assertEquals(null, StringUtils.center(null, -1, ' ')); [EOL]     assertEquals(null, StringUtils.center(null, 4, ' ')); [EOL]     assertEquals("    ", StringUtils.center("", 4, ' ')); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, ' ')); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, ' ')); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, ' ')); [EOL]     assertEquals("    ", StringUtils.center("", 4, ' ')); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, ' ')); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, ' ')); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, ' ')); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5, ' ')); [EOL]     assertEquals("xxaxx", StringUtils.center("a", 5, 'x')); [EOL] } <line_num>: 1487,1501
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] } <line_num>: 1503,1520
@Test [EOL] public void testReverse_String() { [EOL]     assertEquals(null, StringUtils.reverse(null)); [EOL]     assertEquals("", StringUtils.reverse("")); [EOL]     assertEquals("sdrawkcab", StringUtils.reverse("backwards")); [EOL] } <line_num>: 1523,1528
@Test [EOL] public void testReverseDelimited_StringChar() { [EOL]     assertEquals(null, StringUtils.reverseDelimited(null, '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL]     assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.')); [EOL]     assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.')); [EOL]     assertEquals("", StringUtils.reverseDelimited("", '.')); [EOL] } <line_num>: 1530,1537
@Test [EOL] public void testDefault_String() { [EOL]     assertEquals("", StringUtils.defaultString(null)); [EOL]     assertEquals("", StringUtils.defaultString("")); [EOL]     assertEquals("abc", StringUtils.defaultString("abc")); [EOL] } <line_num>: 1540,1545
@Test [EOL] public void testDefault_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultString(null, "NULL")); [EOL]     assertEquals("", StringUtils.defaultString("", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultString("abc", "NULL")); [EOL] } <line_num>: 1547,1552
@Test [EOL] public void testDefaultIfEmpty_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(null, "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty("", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty("abc", "NULL")); [EOL]     assertNull(StringUtils.defaultIfEmpty("", null)); [EOL]     final String s = StringUtils.defaultIfEmpty("abc", "NULL"); [EOL]     assertEquals("abc", s); [EOL] } <line_num>: 1554,1563
@Test [EOL] public void testDefaultIfBlank_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(null, "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank("", "NULL")); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(" ", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank("abc", "NULL")); [EOL]     assertNull(StringUtils.defaultIfBlank("", null)); [EOL]     final String s = StringUtils.defaultIfBlank("abc", "NULL"); [EOL]     assertEquals("abc", s); [EOL] } <line_num>: 1565,1575
@Test [EOL] public void testDefaultIfEmpty_StringBuilders() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuilder(""), new StringBuilder("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuilder("abc"), new StringBuilder("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfEmpty(new StringBuilder(""), null)); [EOL]     final StringBuilder s = StringUtils.defaultIfEmpty(new StringBuilder("abc"), new StringBuilder("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] } <line_num>: 1577,1585
@Test [EOL] public void testDefaultIfBlank_StringBuilders() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuilder(""), new StringBuilder("NULL")).toString()); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuilder(" "), new StringBuilder("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank(new StringBuilder("abc"), new StringBuilder("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfBlank(new StringBuilder(""), null)); [EOL]     final StringBuilder s = StringUtils.defaultIfBlank(new StringBuilder("abc"), new StringBuilder("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] } <line_num>: 1587,1596
@Test [EOL] public void testDefaultIfEmpty_StringBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), null)); [EOL]     final StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] } <line_num>: 1598,1606
@Test [EOL] public void testDefaultIfBlank_StringBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfBlank(new StringBuffer(""), null)); [EOL]     final StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] } <line_num>: 1608,1617
@Test [EOL] public void testDefaultIfEmpty_CharBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfEmpty(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfEmpty(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(""), null)); [EOL]     final CharBuffer s = StringUtils.defaultIfEmpty(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] } <line_num>: 1619,1627
@Test [EOL] public void testDefaultIfBlank_CharBuffers() { [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString()); [EOL]     assertEquals("NULL", StringUtils.defaultIfBlank(CharBuffer.wrap(" "), CharBuffer.wrap("NULL")).toString()); [EOL]     assertEquals("abc", StringUtils.defaultIfBlank(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString()); [EOL]     assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(""), null)); [EOL]     final CharBuffer s = StringUtils.defaultIfBlank(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")); [EOL]     assertEquals("abc", s.toString()); [EOL] } <line_num>: 1629,1638
@Test [EOL] public void testAbbreviate_StringInt() { [EOL]     assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]     assertEquals("", StringUtils.abbreviate("", 10)); [EOL]     assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]     assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); [EOL]     final String raspberry = "raspberry peach"; [EOL]     assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); [EOL]     assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); [EOL]     assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); [EOL]     assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6)); [EOL]     assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7)); [EOL]     assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8)); [EOL]     assertEquals("a...", StringUtils.abbreviate("abcdefg", 4)); [EOL]     assertEquals("", StringUtils.abbreviate("", 4)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abc", 3); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1641,1666
@Test [EOL] public void testAbbreviate_StringIntInt() { [EOL]     assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]     assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]     assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]         fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     final String raspberry = "raspberry peach"; [EOL]     assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); [EOL]     assertEquals(null, StringUtils.abbreviate(null, 7, 14)); [EOL]     assertAbbreviateWithOffset("abcdefg...", -1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 0, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 1, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 2, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 3, 10); [EOL]     assertAbbreviateWithOffset("abcdefg...", 4, 10); [EOL]     assertAbbreviateWithOffset("...fghi...", 5, 10); [EOL]     assertAbbreviateWithOffset("...ghij...", 6, 10); [EOL]     assertAbbreviateWithOffset("...hijk...", 7, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 8, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 9, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 11, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 12, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 13, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 14, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 15, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", 16, 10); [EOL]     assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); [EOL] } <line_num>: 1668,1716
private void assertAbbreviateWithOffset(final String expected, final int offset, final int maxWidth) { [EOL]     final String abcdefghijklmno = "abcdefghijklmno"; [EOL]     final String message = "abbreviate(String,int,int) failed"; [EOL]     final String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth); [EOL]     if (offset >= 0 && offset < abcdefghijklmno.length()) { [EOL]         assertTrue(message + " -- should contain offset character", actual.indexOf((char) ('a' + offset)) != -1); [EOL]     } [EOL]     assertTrue(message + " -- should not be greater than maxWidth", actual.length() <= maxWidth); [EOL]     assertEquals(message, expected, actual); [EOL] } <line_num>: 1718,1729
@Test [EOL] public void testAbbreviateMiddle() { [EOL]     assertNull(StringUtils.abbreviateMiddle(null, null, 0)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", null, 0)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 0)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 3)); [EOL]     assertEquals("ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4)); [EOL]     assertEquals("A very long text with un...f the text is complete.", StringUtils.abbreviateMiddle("A very long text with unimportant stuff in the middle but interesting start and " + "end to see if the text is complete.", "...", 50)); [EOL]     final String longText = "Start text" + StringUtils.repeat("x", 10000) + "Close text"; [EOL]     assertEquals("Start text->Close text", StringUtils.abbreviateMiddle(longText, "->", 22)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2)); [EOL]     assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1)); [EOL]     assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3)); [EOL]     assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4)); [EOL]     assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5)); [EOL] } <line_num>: 1731,1770
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] } <line_num>: 1773,1784
@Test [EOL] public void testDifferenceAt_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]     assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]     assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]     assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]     assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL] } <line_num>: 1786,1798
@Test [EOL] public void testGetLevenshteinDistance_StringString() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("", "a")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog")); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo")); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz")); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo")); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo")); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1801,1829
@Test [EOL] public void testGetLevenshteinDistance_StringStringInt() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]     assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog", 1)); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant", 3)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo", 7)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo", 6)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant", 7)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant", 6)); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz", 8)); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo", 8)); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo", 1)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 1831,1912
@Test [EOL] public void testEMPTY() { [EOL]     assertNotNull(StringUtils.EMPTY); [EOL]     assertEquals("", StringUtils.EMPTY); [EOL]     assertEquals(0, StringUtils.EMPTY.length()); [EOL] } <line_num>: 1917,1922
@Test [EOL] public void testIsAllLowerCase() { [EOL]     assertFalse(StringUtils.isAllLowerCase(null)); [EOL]     assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]     assertFalse(StringUtils.isAllLowerCase("abC")); [EOL] } <line_num>: 1927,1934
@Test [EOL] public void testIsAllUpperCase() { [EOL]     assertFalse(StringUtils.isAllUpperCase(null)); [EOL]     assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllUpperCase("ABC")); [EOL]     assertFalse(StringUtils.isAllUpperCase("ABC ")); [EOL]     assertFalse(StringUtils.isAllUpperCase("aBC")); [EOL] } <line_num>: 1939,1946
@Test [EOL] public void testRemoveStart() { [EOL]     assertNull(StringUtils.removeStart(null, null)); [EOL]     assertNull(StringUtils.removeStart(null, "")); [EOL]     assertNull(StringUtils.removeStart(null, "a")); [EOL]     assertEquals(StringUtils.removeStart("", null), ""); [EOL]     assertEquals(StringUtils.removeStart("", ""), ""); [EOL]     assertEquals(StringUtils.removeStart("", "a"), ""); [EOL]     assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeStart("domain.com", null), "domain.com"); [EOL] } <line_num>: 1948,1965
@Test [EOL] public void testRemoveStartIgnoreCase() { [EOL]     assertNull("removeStartIgnoreCase(null, null)", StringUtils.removeStartIgnoreCase(null, null)); [EOL]     assertNull("removeStartIgnoreCase(null, \"\")", StringUtils.removeStartIgnoreCase(null, "")); [EOL]     assertNull("removeStartIgnoreCase(null, \"a\")", StringUtils.removeStartIgnoreCase(null, "a")); [EOL]     assertEquals("removeStartIgnoreCase(\"\", null)", StringUtils.removeStartIgnoreCase("", null), ""); [EOL]     assertEquals("removeStartIgnoreCase(\"\", \"\")", StringUtils.removeStartIgnoreCase("", ""), ""); [EOL]     assertEquals("removeStartIgnoreCase(\"\", \"a\")", StringUtils.removeStartIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "www."), "domain.com"); [EOL]     assertEquals("removeStartIgnoreCase(\"domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("domain.com", "www."), "domain.com"); [EOL]     assertEquals("removeStartIgnoreCase(\"domain.com\", \"\")", StringUtils.removeStartIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeStartIgnoreCase(\"domain.com\", null)", StringUtils.removeStartIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "WWW."), "domain.com"); [EOL] } <line_num>: 1967,1987
@Test [EOL] public void testRemoveEnd() { [EOL]     assertNull(StringUtils.removeEnd(null, null)); [EOL]     assertNull(StringUtils.removeEnd(null, "")); [EOL]     assertNull(StringUtils.removeEnd(null, "a")); [EOL]     assertEquals(StringUtils.removeEnd("", null), ""); [EOL]     assertEquals(StringUtils.removeEnd("", ""), ""); [EOL]     assertEquals(StringUtils.removeEnd("", "a"), ""); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com"); [EOL]     assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com"); [EOL] } <line_num>: 1989,2007
@Test [EOL] public void testRemoveEndIgnoreCase() { [EOL]     assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]     assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]     assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]     assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]     assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL] } <line_num>: 2009,2031
@Test [EOL] public void testRemove_String() { [EOL]     assertEquals(null, StringUtils.remove(null, null)); [EOL]     assertEquals(null, StringUtils.remove(null, "")); [EOL]     assertEquals(null, StringUtils.remove(null, "a")); [EOL]     assertEquals("", StringUtils.remove("", null)); [EOL]     assertEquals("", StringUtils.remove("", "")); [EOL]     assertEquals("", StringUtils.remove("", "a")); [EOL]     assertEquals(null, StringUtils.remove(null, null)); [EOL]     assertEquals("", StringUtils.remove("", null)); [EOL]     assertEquals("a", StringUtils.remove("a", null)); [EOL]     assertEquals(null, StringUtils.remove(null, "")); [EOL]     assertEquals("", StringUtils.remove("", "")); [EOL]     assertEquals("a", StringUtils.remove("a", "")); [EOL]     assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]     assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL] } <line_num>: 2033,2060
@Test [EOL] public void testRemove_char() { [EOL]     assertEquals(null, StringUtils.remove(null, 'a')); [EOL]     assertEquals(null, StringUtils.remove(null, 'a')); [EOL]     assertEquals(null, StringUtils.remove(null, 'a')); [EOL]     assertEquals("", StringUtils.remove("", 'a')); [EOL]     assertEquals("", StringUtils.remove("", 'a')); [EOL]     assertEquals("", StringUtils.remove("", 'a')); [EOL]     assertEquals("qeed", StringUtils.remove("queued", 'u')); [EOL]     assertEquals("queued", StringUtils.remove("queued", 'z')); [EOL] } <line_num>: 2062,2079
@Test [EOL] public void testDifferenceAt_StringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); [EOL]     assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); [EOL]     assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); [EOL] } <line_num>: 2081,2100
@Test [EOL] public void testGetCommonPrefix_StringArray() { [EOL]     assertEquals("", StringUtils.getCommonPrefix((String[]) null)); [EOL]     assertEquals("", StringUtils.getCommonPrefix()); [EOL]     assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]     assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]     assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]     assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]     assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]     assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]     assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]     assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]     assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]     assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL] } <line_num>: 2102,2121
@Test [EOL] public void testNormalizeSpace() { [EOL]     assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]     assertEquals("", StringUtils.normalizeSpace("")); [EOL]     assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\n")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u0009")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000B")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u000C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001C")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001D")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001E")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\u001F")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\f")); [EOL]     assertEquals("", StringUtils.normalizeSpace("\r")); [EOL]     assertEquals("a", StringUtils.normalizeSpace("  a  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); [EOL]     assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); [EOL] } <line_num>: 2123,2142
@Test [EOL] public void testLANG666() { [EOL]     assertEquals("12", StringUtils.stripEnd("120.00", ".0")); [EOL]     assertEquals("121", StringUtils.stripEnd("121.00", ".0")); [EOL] } <line_num>: 2144,2148
@Test [EOL] public void testStringUtilsCharSequenceContract() { [EOL]     final Class<StringUtils> c = StringUtils.class; [EOL]     final Method[] methods = c.getMethods(); [EOL]     for (final Method m : methods) { [EOL]         if (m.getReturnType() == String.class || m.getReturnType() == String[].class) { [EOL]             final Class<?>[] params = m.getParameterTypes(); [EOL]             if (params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) { [EOL]                 fail("The method " + m + " appears to be mutable in spirit and therefore must not accept a CharSequence"); [EOL]             } [EOL]         } else { [EOL]             final Class<?>[] params = m.getParameterTypes(); [EOL]             if (params.length > 0 && (params[0] == String.class || params[0] == String[].class)) { [EOL]                 fail("The method " + m + " appears to be immutable in spirit and therefore must not accept a String"); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 2154,2176
@Test [EOL] public void testToString() throws UnsupportedEncodingException { [EOL]     final String expectedString = "The quick brown fox jumped over the lazy dog."; [EOL]     String encoding = SystemUtils.FILE_ENCODING; [EOL]     byte[] expectedBytes = expectedString.getBytes(encoding); [EOL]     assertArrayEquals(expectedBytes, expectedString.getBytes()); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, null)); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding)); [EOL]     encoding = "UTF-16"; [EOL]     expectedBytes = expectedString.getBytes(encoding); [EOL]     assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding)); [EOL] } <line_num>: 2184,2197
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] } <line_num>: 2199,2209
@Test [EOL] public void testEscapeSurrogatePairsLang858() throws Exception { [EOL]     assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD")); [EOL]     assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); [EOL] } <line_num>: 2216,2220
@Test [EOL] public void testUnescapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.unescapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml4("\uDBFF\uDFFD")); [EOL] } <line_num>: 2222,2231
@Test [EOL] public void testAppendIfMissing() { [EOL]     assertEquals("appendIfMissing(null,null)", null, StringUtils.appendIfMissing(null, null)); [EOL]     assertEquals("appendIfMissing(abc,null)", "abc", StringUtils.appendIfMissing("abc", null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz)", "xyz", StringUtils.appendIfMissing("", "xyz")); [EOL]     assertEquals("appendIfMissing(abc,xyz)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissing(aXYZ,xyz)", "aXYZxyz", StringUtils.appendIfMissing("aXYZ", "xyz")); [EOL]     assertEquals("appendIfMissing(null,null,null)", null, StringUtils.appendIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,null,null)", "abc", StringUtils.appendIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(\"\",xyz,null))", "xyz", StringUtils.appendIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissing(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissing(abc,xyz,\"\")", "abc", StringUtils.appendIfMissing("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissing(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissing("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissing("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcXYZ,xyz,mno)", "abcXYZxyz", StringUtils.appendIfMissing("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissing(abcMNO,xyz,mno)", "abcMNOxyz", StringUtils.appendIfMissing("abcMNO", "xyz", "mno")); [EOL] } <line_num>: 2236,2255
@Test [EOL] public void testAppendIfMissingIgnoreCase() { [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz")); [EOL]     assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno")); [EOL]     assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno")); [EOL] } <line_num>: 2260,2279
@Test [EOL] public void testPrependIfMissing() { [EOL]     assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); [EOL]     assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); [EOL]     assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); [EOL] } <line_num>: 2284,2303
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] } <line_num>: 2308,2327
