@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new CharUtils()); [EOL]     final Constructor<?>[] cons = CharUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers())); [EOL] } <line_num>: 41,49
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testToCharacterObject_char() { [EOL]     assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]     assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); [EOL]     for (int i = 0; i < 128; i++) { [EOL]         final Character ch = CharUtils.toCharacterObject((char) i); [EOL]         final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]         assertSame(ch, ch2); [EOL]         assertEquals(i, ch.charValue()); [EOL]     } [EOL]     for (int i = 128; i < 196; i++) { [EOL]         final Character ch = CharUtils.toCharacterObject((char) i); [EOL]         final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]         assertEquals(ch, ch2); [EOL]         assertTrue(ch != ch2); [EOL]         assertEquals(i, ch.charValue()); [EOL]         assertEquals(i, ch2.charValue()); [EOL]     } [EOL]     assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a')); [EOL] } <line_num>: 51,72
@Test [EOL] public void testToCharacterObject_String() { [EOL]     assertEquals(null, CharUtils.toCharacterObject(null)); [EOL]     assertEquals(null, CharUtils.toCharacterObject("")); [EOL]     assertEquals(new Character('a'), CharUtils.toCharacterObject("a")); [EOL]     assertEquals(new Character('a'), CharUtils.toCharacterObject("abc")); [EOL]     assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject("a")); [EOL] } <line_num>: 74,81
@Test [EOL] public void testToChar_Character() { [EOL]     assertEquals('A', CharUtils.toChar(CHARACTER_A)); [EOL]     assertEquals('B', CharUtils.toChar(CHARACTER_B)); [EOL]     try { [EOL]         CharUtils.toChar((Character) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 83,90
@Test [EOL] public void testToChar_Character_char() { [EOL]     assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X')); [EOL]     assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X')); [EOL]     assertEquals('X', CharUtils.toChar((Character) null, 'X')); [EOL] } <line_num>: 92,97
@Test [EOL] public void testToChar_String() { [EOL]     assertEquals('A', CharUtils.toChar("A")); [EOL]     assertEquals('B', CharUtils.toChar("BA")); [EOL]     try { [EOL]         CharUtils.toChar((String) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         CharUtils.toChar(""); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 99,109
@Test [EOL] public void testToChar_String_char() { [EOL]     assertEquals('A', CharUtils.toChar("A", 'X')); [EOL]     assertEquals('B', CharUtils.toChar("BA", 'X')); [EOL]     assertEquals('X', CharUtils.toChar("", 'X')); [EOL]     assertEquals('X', CharUtils.toChar((String) null, 'X')); [EOL] } <line_num>: 111,117
@Test [EOL] public void testToIntValue_char() { [EOL]     assertEquals(0, CharUtils.toIntValue('0')); [EOL]     assertEquals(1, CharUtils.toIntValue('1')); [EOL]     assertEquals(2, CharUtils.toIntValue('2')); [EOL]     assertEquals(3, CharUtils.toIntValue('3')); [EOL]     assertEquals(4, CharUtils.toIntValue('4')); [EOL]     assertEquals(5, CharUtils.toIntValue('5')); [EOL]     assertEquals(6, CharUtils.toIntValue('6')); [EOL]     assertEquals(7, CharUtils.toIntValue('7')); [EOL]     assertEquals(8, CharUtils.toIntValue('8')); [EOL]     assertEquals(9, CharUtils.toIntValue('9')); [EOL]     try { [EOL]         CharUtils.toIntValue('a'); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 119,134
@Test [EOL] public void testToIntValue_char_int() { [EOL]     assertEquals(0, CharUtils.toIntValue('0', -1)); [EOL]     assertEquals(3, CharUtils.toIntValue('3', -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue('a', -1)); [EOL] } <line_num>: 136,141
@Test [EOL] public void testToIntValue_Character() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'))); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'))); [EOL]     try { [EOL]         CharUtils.toIntValue(null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         CharUtils.toIntValue(CHARACTER_A); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] } <line_num>: 143,153
@Test [EOL] public void testToIntValue_Character_int() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(null, -1)); [EOL] } <line_num>: 155,161
@Test [EOL] public void testToString_char() { [EOL]     assertEquals("a", CharUtils.toString('a')); [EOL]     assertSame(CharUtils.toString('a'), CharUtils.toString('a')); [EOL]     for (int i = 0; i < 128; i++) { [EOL]         final String str = CharUtils.toString((char) i); [EOL]         final String str2 = CharUtils.toString((char) i); [EOL]         assertSame(str, str2); [EOL]         assertEquals(1, str.length()); [EOL]         assertEquals(i, str.charAt(0)); [EOL]     } [EOL]     for (int i = 128; i < 196; i++) { [EOL]         final String str = CharUtils.toString((char) i); [EOL]         final String str2 = CharUtils.toString((char) i); [EOL]         assertEquals(str, str2); [EOL]         assertTrue(str != str2); [EOL]         assertEquals(1, str.length()); [EOL]         assertEquals(i, str.charAt(0)); [EOL]         assertEquals(1, str2.length()); [EOL]         assertEquals(i, str2.charAt(0)); [EOL]     } [EOL] } <line_num>: 163,185
@Test [EOL] public void testToString_Character() { [EOL]     assertEquals(null, CharUtils.toString(null)); [EOL]     assertEquals("A", CharUtils.toString(CHARACTER_A)); [EOL]     assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A)); [EOL] } <line_num>: 187,192
@Test [EOL] public void testToUnicodeEscaped_char() { [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped('A')); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         final String str = CharUtils.unicodeEscaped((char) i); [EOL]         assertEquals(6, str.length()); [EOL]         final int val = Integer.parseInt(str.substring(2), 16); [EOL]         assertEquals(i, val); [EOL]     } [EOL]     assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999)); [EOL]     assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001)); [EOL] } <line_num>: 194,206
@Test [EOL] public void testToUnicodeEscaped_Character() { [EOL]     assertEquals(null, CharUtils.unicodeEscaped(null)); [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped(CHARACTER_A)); [EOL] } <line_num>: 208,212
@Test [EOL] public void testIsAscii_char() { [EOL]     assertTrue(CharUtils.isAscii('a')); [EOL]     assertTrue(CharUtils.isAscii('A')); [EOL]     assertTrue(CharUtils.isAscii('3')); [EOL]     assertTrue(CharUtils.isAscii('-')); [EOL]     assertTrue(CharUtils.isAscii('\n')); [EOL]     assertFalse(CharUtils.isAscii(CHAR_COPY)); [EOL]     for (int i = 0; i < 128; i++) { [EOL]         if (i < 128) { [EOL]             assertTrue(CharUtils.isAscii((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAscii((char) i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 214,230
@Test [EOL] public void testIsAsciiPrintable_char() { [EOL]     assertTrue(CharUtils.isAsciiPrintable('a')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('A')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('3')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('-')); [EOL]     assertFalse(CharUtils.isAsciiPrintable('\n')); [EOL]     assertFalse(CharUtils.isAscii(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 32 && i <= 126) { [EOL]             assertTrue(CharUtils.isAsciiPrintable((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiPrintable((char) i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 232,248
@Test [EOL] public void testIsAsciiControl_char() { [EOL]     assertFalse(CharUtils.isAsciiControl('a')); [EOL]     assertFalse(CharUtils.isAsciiControl('A')); [EOL]     assertFalse(CharUtils.isAsciiControl('3')); [EOL]     assertFalse(CharUtils.isAsciiControl('-')); [EOL]     assertTrue(CharUtils.isAsciiControl('\n')); [EOL]     assertFalse(CharUtils.isAsciiControl(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i < 32 || i == 127) { [EOL]             assertTrue(CharUtils.isAsciiControl((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiControl((char) i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 250,266
@Test [EOL] public void testIsAsciiAlpha_char() { [EOL]     assertTrue(CharUtils.isAsciiAlpha('a')); [EOL]     assertTrue(CharUtils.isAsciiAlpha('A')); [EOL]     assertFalse(CharUtils.isAsciiAlpha('3')); [EOL]     assertFalse(CharUtils.isAsciiAlpha('-')); [EOL]     assertFalse(CharUtils.isAsciiAlpha('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlpha(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) { [EOL]             assertTrue(CharUtils.isAsciiAlpha((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlpha((char) i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 268,284
@Test [EOL] public void testIsAsciiAlphaUpper_char() { [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('a')); [EOL]     assertTrue(CharUtils.isAsciiAlphaUpper('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'A' && i <= 'Z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 286,302
@Test [EOL] public void testIsAsciiAlphaLower_char() { [EOL]     assertTrue(CharUtils.isAsciiAlphaLower('a')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'a' && i <= 'z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaLower((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaLower((char) i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 304,320
@Test [EOL] public void testIsAsciiNumeric_char() { [EOL]     assertFalse(CharUtils.isAsciiNumeric('a')); [EOL]     assertFalse(CharUtils.isAsciiNumeric('A')); [EOL]     assertTrue(CharUtils.isAsciiNumeric('3')); [EOL]     assertFalse(CharUtils.isAsciiNumeric('-')); [EOL]     assertFalse(CharUtils.isAsciiNumeric('\n')); [EOL]     assertFalse(CharUtils.isAsciiNumeric(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= '0' && i <= '9') { [EOL]             assertTrue(CharUtils.isAsciiNumeric((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiNumeric((char) i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 322,338
@Test [EOL] public void testIsAsciiAlphanumeric_char() { [EOL]     assertTrue(CharUtils.isAsciiAlphanumeric('a')); [EOL]     assertTrue(CharUtils.isAsciiAlphanumeric('A')); [EOL]     assertTrue(CharUtils.isAsciiAlphanumeric('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphanumeric('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphanumeric('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphanumeric(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) { [EOL]             assertTrue(CharUtils.isAsciiAlphanumeric((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphanumeric((char) i)); [EOL]         } [EOL]     } [EOL] } <line_num>: 340,356
