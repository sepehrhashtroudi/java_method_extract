@Test [EOL] public void testClass() { [EOL]     assertFalse(Modifier.isPublic(CharRange.class.getModifiers())); [EOL]     assertTrue(Modifier.isFinal(CharRange.class.getModifiers())); [EOL] } <line_num>: 41,46
@Test [EOL] public void testConstructorAccessors_is() { [EOL]     final CharRange rangea = CharRange.is('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertFalse(rangea.isNegated()); [EOL]     assertEquals("a", rangea.toString()); [EOL] } <line_num>: 49,56
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] } <line_num>: 58,65
@Test [EOL] public void testConstructorAccessors_isIn_Same() { [EOL]     final CharRange rangea = CharRange.isIn('a', 'a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertFalse(rangea.isNegated()); [EOL]     assertEquals("a", rangea.toString()); [EOL] } <line_num>: 67,74
@Test [EOL] public void testConstructorAccessors_isIn_Normal() { [EOL]     final CharRange rangea = CharRange.isIn('a', 'e'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('e', rangea.getEnd()); [EOL]     assertFalse(rangea.isNegated()); [EOL]     assertEquals("a-e", rangea.toString()); [EOL] } <line_num>: 76,83
@Test [EOL] public void testConstructorAccessors_isIn_Reversed() { [EOL]     final CharRange rangea = CharRange.isIn('e', 'a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('e', rangea.getEnd()); [EOL]     assertFalse(rangea.isNegated()); [EOL]     assertEquals("a-e", rangea.toString()); [EOL] } <line_num>: 85,92
@Test [EOL] public void testConstructorAccessors_isNotIn_Same() { [EOL]     final CharRange rangea = CharRange.isNotIn('a', 'a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] } <line_num>: 94,101
@Test [EOL] public void testConstructorAccessors_isNotIn_Normal() { [EOL]     final CharRange rangea = CharRange.isNotIn('a', 'e'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('e', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a-e", rangea.toString()); [EOL] } <line_num>: 103,110
@Test [EOL] public void testConstructorAccessors_isNotIn_Reversed() { [EOL]     final CharRange rangea = CharRange.isNotIn('e', 'a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('e', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a-e", rangea.toString()); [EOL] } <line_num>: 112,119
@Test [EOL] public void testEquals_Object() { [EOL]     final CharRange rangea = CharRange.is('a'); [EOL]     final CharRange rangeae = CharRange.isIn('a', 'e'); [EOL]     final CharRange rangenotbf = CharRange.isIn('b', 'f'); [EOL]     assertFalse(rangea.equals(null)); [EOL]     assertTrue(rangea.equals(rangea)); [EOL]     assertTrue(rangea.equals(CharRange.is('a'))); [EOL]     assertTrue(rangeae.equals(rangeae)); [EOL]     assertTrue(rangeae.equals(CharRange.isIn('a', 'e'))); [EOL]     assertTrue(rangenotbf.equals(rangenotbf)); [EOL]     assertTrue(rangenotbf.equals(CharRange.isIn('b', 'f'))); [EOL]     assertFalse(rangea.equals(rangeae)); [EOL]     assertFalse(rangea.equals(rangenotbf)); [EOL]     assertFalse(rangeae.equals(rangea)); [EOL]     assertFalse(rangeae.equals(rangenotbf)); [EOL]     assertFalse(rangenotbf.equals(rangea)); [EOL]     assertFalse(rangenotbf.equals(rangeae)); [EOL] } <line_num>: 122,143
@Test [EOL] public void testHashCode() { [EOL]     final CharRange rangea = CharRange.is('a'); [EOL]     final CharRange rangeae = CharRange.isIn('a', 'e'); [EOL]     final CharRange rangenotbf = CharRange.isIn('b', 'f'); [EOL]     assertTrue(rangea.hashCode() == rangea.hashCode()); [EOL]     assertTrue(rangea.hashCode() == CharRange.is('a').hashCode()); [EOL]     assertTrue(rangeae.hashCode() == rangeae.hashCode()); [EOL]     assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode()); [EOL]     assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode()); [EOL]     assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode()); [EOL]     assertFalse(rangea.hashCode() == rangeae.hashCode()); [EOL]     assertFalse(rangea.hashCode() == rangenotbf.hashCode()); [EOL]     assertFalse(rangeae.hashCode() == rangea.hashCode()); [EOL]     assertFalse(rangeae.hashCode() == rangenotbf.hashCode()); [EOL]     assertFalse(rangenotbf.hashCode() == rangea.hashCode()); [EOL]     assertFalse(rangenotbf.hashCode() == rangeae.hashCode()); [EOL] } <line_num>: 145,164
@Test [EOL] public void testContains_Char() { [EOL]     CharRange range = CharRange.is('c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('c', 'd'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('d', 'c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isNotIn('c', 'd'); [EOL]     assertTrue(range.contains('b')); [EOL]     assertFalse(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertTrue(range.contains('e')); [EOL]     assertTrue(range.contains((char) 0)); [EOL]     assertTrue(range.contains(Character.MAX_VALUE)); [EOL] } <line_num>: 167,194
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] } <line_num>: 197,310
@Test [EOL] public void testContainsNullArg() { [EOL]     final CharRange range = CharRange.is('a'); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final boolean contains = range.contains(null); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The Range must not be null", e.getMessage()); [EOL]     } [EOL] } <line_num>: 312,322
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] } <line_num>: 324,389
@Test [EOL] public void testSerialization() { [EOL]     CharRange range = CharRange.is('a'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isNotIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL] } <line_num>: 392,400
