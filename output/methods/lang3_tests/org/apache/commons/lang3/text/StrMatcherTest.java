@Test [EOL] public void testCommaMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     assertSame(matcher, StrMatcher.commaMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 0)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 1)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL] } <line_num>: 39,46
@Test [EOL] public void testTabMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.tabMatcher(); [EOL]     assertSame(matcher, StrMatcher.tabMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL] } <line_num>: 49,56
@Test [EOL] public void testSpaceMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.spaceMatcher(); [EOL]     assertSame(matcher, StrMatcher.spaceMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL] } <line_num>: 59,66
@Test [EOL] public void testSplitMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.splitMatcher(); [EOL]     assertSame(matcher, StrMatcher.splitMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL] } <line_num>: 69,82
@Test [EOL] public void testTrimMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.trimMatcher(); [EOL]     assertSame(matcher, StrMatcher.trimMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 10)); [EOL] } <line_num>: 85,98
@Test [EOL] public void testSingleQuoteMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.singleQuoteMatcher(); [EOL]     assertSame(matcher, StrMatcher.singleQuoteMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 11)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 12)); [EOL] } <line_num>: 101,108
@Test [EOL] public void testDoubleQuoteMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.doubleQuoteMatcher(); [EOL]     assertSame(matcher, StrMatcher.doubleQuoteMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 11)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 12)); [EOL] } <line_num>: 111,117
@Test [EOL] public void testQuoteMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.quoteMatcher(); [EOL]     assertSame(matcher, StrMatcher.quoteMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 11)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 12)); [EOL] } <line_num>: 120,127
@Test [EOL] public void testNoneMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.noneMatcher(); [EOL]     assertSame(matcher, StrMatcher.noneMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 1)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 5)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 7)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 8)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 9)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 11)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 12)); [EOL] } <line_num>: 130,147
@Test [EOL] public void testCharMatcher_char() { [EOL]     final StrMatcher matcher = StrMatcher.charMatcher('c'); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL] } <line_num>: 150,159
@Test [EOL] public void testCharSetMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL] } <line_num>: 162,174
@Test [EOL] public void testCharSetMatcher_charArray() { [EOL]     final StrMatcher matcher = StrMatcher.charSetMatcher("ace".toCharArray()); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0])); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null)); [EOL]     assertTrue(StrMatcher.charSetMatcher("a".toCharArray()) instanceof StrMatcher.CharMatcher); [EOL] } <line_num>: 177,189
@Test [EOL] public void testStringMatcher_String() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 0)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 2)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 4)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher("")); [EOL]     assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null)); [EOL] } <line_num>: 192,203
@Test [EOL] public void testMatcherIndices() { [EOL]     final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length)); [EOL]     assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2)); [EOL] } <line_num>: 206,215
