@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new WordUtils()); [EOL]     final Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(WordUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(WordUtils.class.getModifiers())); [EOL] } <line_num>: 37,45
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] } <line_num>: 48,74
@Test [EOL] public void testWrap_StringIntStringBoolean() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]     assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]     assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]     assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]     assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]     assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]     assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]     assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]     assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]     assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]     input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]     input = "Here is one line"; [EOL]     expected = "Here\nis one\nline"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]     expected = "Here\nis\none\nline"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]     assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]     input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]     expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]     input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]     expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]     input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]     expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]     expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]     expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] } <line_num>: 76,153
@Test [EOL] public void testCapitalize_String() { [EOL]     assertEquals(null, WordUtils.capitalize(null)); [EOL]     assertEquals("", WordUtils.capitalize("")); [EOL]     assertEquals("  ", WordUtils.capitalize("  ")); [EOL]     assertEquals("I", WordUtils.capitalize("I")); [EOL]     assertEquals("I", WordUtils.capitalize("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalize("I Am Here 123")); [EOL]     assertEquals("I Am HERE 123", WordUtils.capitalize("i am HERE 123")); [EOL]     assertEquals("I AM HERE 123", WordUtils.capitalize("I AM HERE 123")); [EOL] } <line_num>: 156,168
@Test [EOL] public void testCapitalizeWithDelimiters_String() { [EOL]     assertEquals(null, WordUtils.capitalize(null, null)); [EOL]     assertEquals("", WordUtils.capitalize("", new char[0])); [EOL]     assertEquals("  ", WordUtils.capitalize("  ", new char[0])); [EOL]     char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]     assertEquals("I", WordUtils.capitalize("I", chars)); [EOL]     assertEquals("I", WordUtils.capitalize("i", chars)); [EOL]     assertEquals("I-Am Here+123", WordUtils.capitalize("i-am here+123", chars)); [EOL]     assertEquals("I Am+Here-123", WordUtils.capitalize("I Am+Here-123", chars)); [EOL]     assertEquals("I+Am-HERE 123", WordUtils.capitalize("i+am-HERE 123", chars)); [EOL]     assertEquals("I-AM HERE+123", WordUtils.capitalize("I-AM HERE+123", chars)); [EOL]     chars = new char[] { '.' }; [EOL]     assertEquals("I aM.Fine", WordUtils.capitalize("i aM.fine", chars)); [EOL]     assertEquals("I Am.fine", WordUtils.capitalize("i am.fine", null)); [EOL] } <line_num>: 170,186
@Test [EOL] public void testCapitalizeFully_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("")); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("I")); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123")); [EOL]     assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123")); [EOL] } <line_num>: 188,200
@Test [EOL] public void testCapitalizeFullyWithDelimiters_String() { [EOL]     assertEquals(null, WordUtils.capitalizeFully(null, null)); [EOL]     assertEquals("", WordUtils.capitalizeFully("", new char[0])); [EOL]     assertEquals("  ", WordUtils.capitalizeFully("  ", new char[0])); [EOL]     char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]     assertEquals("I", WordUtils.capitalizeFully("I", chars)); [EOL]     assertEquals("I", WordUtils.capitalizeFully("i", chars)); [EOL]     assertEquals("I-Am Here+123", WordUtils.capitalizeFully("i-am here+123", chars)); [EOL]     assertEquals("I Am+Here-123", WordUtils.capitalizeFully("I Am+Here-123", chars)); [EOL]     assertEquals("I+Am-Here 123", WordUtils.capitalizeFully("i+am-HERE 123", chars)); [EOL]     assertEquals("I-Am Here+123", WordUtils.capitalizeFully("I-AM HERE+123", chars)); [EOL]     chars = new char[] { '.' }; [EOL]     assertEquals("I am.Fine", WordUtils.capitalizeFully("i aM.fine", chars)); [EOL]     assertEquals("I Am.fine", WordUtils.capitalizeFully("i am.fine", null)); [EOL] } <line_num>: 202,218
@Test [EOL] public void testUncapitalize_String() { [EOL]     assertEquals(null, WordUtils.uncapitalize(null)); [EOL]     assertEquals("", WordUtils.uncapitalize("")); [EOL]     assertEquals("  ", WordUtils.uncapitalize("  ")); [EOL]     assertEquals("i", WordUtils.uncapitalize("I")); [EOL]     assertEquals("i", WordUtils.uncapitalize("i")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123")); [EOL]     assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123")); [EOL]     assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123")); [EOL]     assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123")); [EOL] } <line_num>: 220,232
@Test [EOL] public void testUncapitalizeWithDelimiters_String() { [EOL]     assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]     assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]     assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]     char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]     assertEquals("i", WordUtils.uncapitalize("I", chars)); [EOL]     assertEquals("i", WordUtils.uncapitalize("i", chars)); [EOL]     assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars)); [EOL]     assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars)); [EOL]     assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars)); [EOL]     assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars)); [EOL]     chars = new char[] { '.' }; [EOL]     assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars)); [EOL]     assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null)); [EOL] } <line_num>: 234,250
@Test [EOL] public void testInitials_String() { [EOL]     assertEquals(null, WordUtils.initials(null)); [EOL]     assertEquals("", WordUtils.initials("")); [EOL]     assertEquals("", WordUtils.initials("  ")); [EOL]     assertEquals("I", WordUtils.initials("I")); [EOL]     assertEquals("i", WordUtils.initials("i")); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL] } <line_num>: 253,265
@Test [EOL] public void testInitials_String_charArray() { [EOL]     char[] array = null; [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("I", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("S", WordUtils.initials("SJC", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123", array)); [EOL]     array = new char[0]; [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("", WordUtils.initials("I", array)); [EOL]     assertEquals("", WordUtils.initials("i", array)); [EOL]     assertEquals("", WordUtils.initials("SJC", array)); [EOL]     assertEquals("", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("", WordUtils.initials("i am here 123", array)); [EOL]     array = " ".toCharArray(); [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("I", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("S", WordUtils.initials("SJC", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123", array)); [EOL]     array = " .".toCharArray(); [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("I", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("S", WordUtils.initials("SJC", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123", array)); [EOL]     array = " .'".toCharArray(); [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("I", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("S", WordUtils.initials("SJC", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("KOM", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123", array)); [EOL]     array = "SIJo1".toCharArray(); [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals(" ", WordUtils.initials("  ", array)); [EOL]     assertEquals("", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("C", WordUtils.initials("SJC", array)); [EOL]     assertEquals("Bh", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("B.", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals(" h", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("K", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("i2", WordUtils.initials("i am here 123", array)); [EOL] } <line_num>: 268,347
@Test [EOL] public void testSwapCase_String() { [EOL]     assertEquals(null, WordUtils.swapCase(null)); [EOL]     assertEquals("", WordUtils.swapCase("")); [EOL]     assertEquals("  ", WordUtils.swapCase("  ")); [EOL]     assertEquals("i", WordUtils.swapCase("I")); [EOL]     assertEquals("I", WordUtils.swapCase("i")); [EOL]     assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123")); [EOL]     assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123")); [EOL]     assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123")); [EOL]     assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123")); [EOL]     final String test = "This String contains a TitleCase character: \u01C8"; [EOL]     final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]     assertEquals(expect, WordUtils.swapCase(test)); [EOL] } <line_num>: 350,366
