@Override [EOL] public String toString() { [EOL]     return "foo"; [EOL] } <line_num>: 41,44
@Test [EOL] public void testAppendNewLine() { [EOL]     StrBuilder sb = new StrBuilder("---"); [EOL]     sb.appendNewLine().append("+++"); [EOL]     assertEquals("---" + SEP + "+++", sb.toString()); [EOL]     sb = new StrBuilder("---"); [EOL]     sb.setNewLineText("#").appendNewLine().setNewLineText(null).appendNewLine(); [EOL]     assertEquals("---#" + SEP, sb.toString()); [EOL] } <line_num>: 48,57
@Test [EOL] public void testAppendWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL"); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendNull(); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb.append((Object) null); [EOL]     assertEquals("NULLNULL", sb.toString()); [EOL]     sb.append(FOO); [EOL]     assertEquals("NULLNULLfoo", sb.toString()); [EOL]     sb.append((String) null); [EOL]     assertEquals("NULLNULLfooNULL", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("NULLNULLfooNULL", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("NULLNULLfooNULLbar", sb.toString()); [EOL]     sb.append((StringBuffer) null); [EOL]     assertEquals("NULLNULLfooNULLbarNULL", sb.toString()); [EOL]     sb.append(new StringBuffer("baz")); [EOL]     assertEquals("NULLNULLfooNULLbarNULLbaz", sb.toString()); [EOL] } <line_num>: 60,89
@Test [EOL] public void testAppend_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendNull(); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append((Object) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(FOO); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append((StringBuffer) null); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("baz")); [EOL]     assertEquals("foobaz", sb.toString()); [EOL]     sb.append(new StrBuilder("yes")); [EOL]     assertEquals("foobazyes", sb.toString()); [EOL]     sb.append((CharSequence) "Seq"); [EOL]     assertEquals("foobazyesSeq", sb.toString()); [EOL]     sb.append(new StringBuilder("bld")); [EOL]     assertEquals("foobazyesSeqbld", sb.toString()); [EOL] } <line_num>: 92,118
@Test [EOL] public void testAppend_StringBuilder() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuilder("foo")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuilder("")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuilder("bar")); [EOL]     assertEquals("foobar", sb.toString()); [EOL] } <line_num>: 121,136
@Test [EOL] public void testAppend_String() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(""); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("bar"); [EOL]     assertEquals("foobar", sb.toString()); [EOL] } <line_num>: 139,154
@Test [EOL] public void testAppend_String_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("foo", 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append("bar", -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append("bar", 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("bar", 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append("abcbardef", 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append((CharSequence) "abcbardef", 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] } <line_num>: 157,217
@Test [EOL] public void testAppend_StringBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), -1, 1); [EOL]         fail("append(StringBuilder, -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 3, 1); [EOL]         fail("append(StringBuilder, 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 1, -1); [EOL]         fail("append(StringBuilder,, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 1, 3); [EOL]         fail("append(StringBuilder, 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), -1, 3); [EOL]         fail("append(StringBuilder, -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 4, 0); [EOL]         fail("append(StringBuilder, 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append(new StringBuilder("abcbardef"), 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] } <line_num>: 220,280
@Test [EOL] public void testAppend_StringBuffer() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StringBuffer) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuffer("foo")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("bar")); [EOL]     assertEquals("foobar", sb.toString()); [EOL] } <line_num>: 283,298
@Test [EOL] public void testAppend_StringBuffer_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuffer("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuffer("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] } <line_num>: 301,358
@Test [EOL] public void testAppend_StrBuilder() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("bar")); [EOL]     assertEquals("foobar", sb.toString()); [EOL] } <line_num>: 361,376
@Test [EOL] public void testAppend_StrBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StrBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] } <line_num>: 379,436
@Test [EOL] public void testAppend_CharArray() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((char[]) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new char[0]); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foo", sb.toString()); [EOL] } <line_num>: 439,451
@Test [EOL] public void testAppend_CharArray_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((char[]) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new char[] { 'f', 'o', 'o' }, 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new char[] { 'b', 'a', 'r' }, 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new char[] { 'b', 'a', 'r' }, 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new char[] { 'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] } <line_num>: 454,511
@Test [EOL] public void testAppend_Boolean() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(true); [EOL]     assertEquals("true", sb.toString()); [EOL]     sb.append(false); [EOL]     assertEquals("truefalse", sb.toString()); [EOL]     sb.append('!'); [EOL]     assertEquals("truefalse!", sb.toString()); [EOL] } <line_num>: 514,525
@Test [EOL] public void testAppend_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append(0); [EOL]     assertEquals("0", sb.toString()); [EOL]     sb.append(1L); [EOL]     assertEquals("01", sb.toString()); [EOL]     sb.append(2.3f); [EOL]     assertEquals("012.3", sb.toString()); [EOL]     sb.append(4.5d); [EOL]     assertEquals("012.34.5", sb.toString()); [EOL] } <line_num>: 528,542
@Override [EOL] public StrBuilder append(final String str) { [EOL]     count[0]++; [EOL]     return super.append(str); [EOL] } <line_num>: 549,553
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 554,558
@Test [EOL] public void testAppendln_FormattedString() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("Hello %s", "Alice"); [EOL]     assertEquals("Hello Alice" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 545,564
@Test [EOL] public void testAppendln_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln((Object) null); [EOL]     assertEquals("" + SEP, sb.toString()); [EOL]     sb.appendln(FOO); [EOL]     assertEquals(SEP + "foo" + SEP, sb.toString()); [EOL]     sb.appendln(Integer.valueOf(6)); [EOL]     assertEquals(SEP + "foo" + SEP + "6" + SEP, sb.toString()); [EOL] } <line_num>: 567,578
@Override [EOL] public StrBuilder append(final String str) { [EOL]     count[0]++; [EOL]     return super.append(str); [EOL] } <line_num>: 585,589
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 590,594
@Test [EOL] public void testAppendln_String() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo"); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 581,600
@Override [EOL] public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]     count[0]++; [EOL]     return super.append(str, startIndex, length); [EOL] } <line_num>: 607,611
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 612,616
@Test [EOL] public void testAppendln_String_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo", 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 603,622
@Override [EOL] public StrBuilder append(final StringBuffer str) { [EOL]     count[0]++; [EOL]     return super.append(str); [EOL] } <line_num>: 629,633
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 634,638
@Test [EOL] public void testAppendln_StringBuffer() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 625,644
@Override [EOL] public StrBuilder append(final StringBuilder str) { [EOL]     count[0]++; [EOL]     return super.append(str); [EOL] } <line_num>: 651,655
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 656,660
@Test [EOL] public void testAppendln_StringBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 647,666
@Override [EOL] public StrBuilder append(final StringBuffer str, final int startIndex, final int length) { [EOL]     count[0]++; [EOL]     return super.append(str, startIndex, length); [EOL] } <line_num>: 673,677
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 678,682
@Test [EOL] public void testAppendln_StringBuffer_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuffer str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuffer("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 669,688
@Override [EOL] public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]     count[0]++; [EOL]     return super.append(str, startIndex, length); [EOL] } <line_num>: 695,699
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 700,704
@Test [EOL] public void testAppendln_StringBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 691,710
@Override [EOL] public StrBuilder append(final StrBuilder str) { [EOL]     count[0]++; [EOL]     return super.append(str); [EOL] } <line_num>: 717,721
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 722,726
@Test [EOL] public void testAppendln_StrBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 713,732
@Override [EOL] public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]     count[0]++; [EOL]     return super.append(str, startIndex, length); [EOL] } <line_num>: 739,743
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 744,748
@Test [EOL] public void testAppendln_StrBuilder_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 735,754
@Override [EOL] public StrBuilder append(final char[] str) { [EOL]     count[0]++; [EOL]     return super.append(str); [EOL] } <line_num>: 761,765
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 766,770
@Test [EOL] public void testAppendln_CharArray() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray()); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 757,776
@Override [EOL] public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]     count[0]++; [EOL]     return super.append(str, startIndex, length); [EOL] } <line_num>: 783,787
@Override [EOL] public StrBuilder appendNewLine() { [EOL]     count[1]++; [EOL]     return super.appendNewLine(); [EOL] } <line_num>: 788,792
@Test [EOL] public void testAppendln_CharArray_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray(), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] } <line_num>: 779,798
@Test [EOL] public void testAppendln_Boolean() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(true); [EOL]     assertEquals("true" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(false); [EOL]     assertEquals("false" + SEP, sb.toString()); [EOL] } <line_num>: 801,810
@Test [EOL] public void testAppendln_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(0); [EOL]     assertEquals("0" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(1L); [EOL]     assertEquals("1" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(2.3f); [EOL]     assertEquals("2.3" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(4.5d); [EOL]     assertEquals("4.5" + SEP, sb.toString()); [EOL] } <line_num>: 813,830
@Test [EOL] public void testAppendPadding() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(-1, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(0, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(1, '-'); [EOL]     assertEquals("foo-", sb.toString()); [EOL]     sb.appendPadding(16, '-'); [EOL]     assertEquals(20, sb.length()); [EOL]     assertEquals("foo-----------------", sb.toString()); [EOL] } <line_num>: 833,852
@Test [EOL] public void testAppendFixedWidthPadLeft() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft("foo", -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 1, '-'); [EOL]     assertEquals("o", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 2, '-'); [EOL]     assertEquals("oo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 3, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 4, '-'); [EOL]     assertEquals("-foo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft("foo", 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------foo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.setNullText("null"); [EOL]     sb.appendFixedWidthPadLeft(null, 5, '-'); [EOL]     assertEquals("-null", sb.toString()); [EOL] } <line_num>: 855,891
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] } <line_num>: 894,925
@Test [EOL] public void testAppendFixedWidthPadRight() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadRight("foo", -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 1, '-'); [EOL]     assertEquals("f", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 2, '-'); [EOL]     assertEquals("fo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 3, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 4, '-'); [EOL]     assertEquals("foo-", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight("foo", 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("foo-------", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.setNullText("null"); [EOL]     sb.appendFixedWidthPadRight(null, 5, '-'); [EOL]     assertEquals("null-", sb.toString()); [EOL] } <line_num>: 928,964
@Test [EOL] public void testLang299() { [EOL]     final StrBuilder sb = new StrBuilder(1); [EOL]     sb.appendFixedWidthPadRight("foo", 1, '-'); [EOL]     assertEquals("f", sb.toString()); [EOL] } <line_num>: 967,972
@Test [EOL] public void testAppendFixedWidthPadRight_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadRight(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 1, '-'); [EOL]     assertEquals("1", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 2, '-'); [EOL]     assertEquals("12", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 4, '-'); [EOL]     assertEquals("123-", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadRight(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("123-------", sb.toString()); [EOL] } <line_num>: 975,1006
@Test [EOL] public void testAppend_FormattedString() { [EOL]     StrBuilder sb; [EOL]     sb = new StrBuilder(); [EOL]     sb.append("Hi", (Object[]) null); [EOL]     assertEquals("Hi", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("Hi", "Alice"); [EOL]     assertEquals("Hi", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("Hi %s", "Alice"); [EOL]     assertEquals("Hi Alice", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append("Hi %s %,d", "Alice", 5000); [EOL]     assertEquals("Hi Alice 5,000", sb.toString()); [EOL] } <line_num>: 1009,1028
@Test [EOL] public void testAppendAll_Array() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendAll((Object[]) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(new Object[0]); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(new Object[] { "foo", "bar", "baz" }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll("foo", "bar", "baz"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL] } <line_num>: 1031,1048
@Test [EOL] public void testAppendAll_Collection() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendAll((Collection<?>) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Collections.EMPTY_LIST); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Arrays.asList(new Object[] { "foo", "bar", "baz" })); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL] } <line_num>: 1051,1064
@Test [EOL] public void testAppendAll_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendAll((Iterator<?>) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Collections.EMPTY_LIST.iterator()); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator()); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL] } <line_num>: 1067,1080
@Test [EOL] public void testAppendWithSeparators_Array() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Object[]) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[0], ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", "bar", "baz" }, ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", "bar", "baz" }, null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(new Object[] { "foo", null, "baz" }, ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] } <line_num>: 1083,1104
@Test [EOL] public void testAppendWithSeparators_Collection() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Collection<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] } <line_num>: 1107,1128
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] } <line_num>: 1131,1152
@Test [EOL] public void testAppendWithSeparatorsWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.appendWithSeparators(new Object[] { "foo", null, "baz" }, ","); [EOL]     assertEquals("foo,null,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }), ","); [EOL]     assertEquals("foo,null,baz", sb.toString()); [EOL] } <line_num>: 1155,1165
@Test [EOL] public void testAppendSeparator_String() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(","); [EOL]     assertEquals("foo,", sb.toString()); [EOL] } <line_num>: 1168,1177
@Test [EOL] public void testAppendSeparator_String_String() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final String startSeparator = "order by "; [EOL]     final String standardSeparator = ","; [EOL]     final String foo = "foo"; [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.append(foo); [EOL]     assertEquals(startSeparator + foo, sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator + foo + standardSeparator, sb.toString()); [EOL] } <line_num>: 1180,1200
@Test [EOL] public void testAppendSeparator_char() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(','); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(','); [EOL]     assertEquals("foo,", sb.toString()); [EOL] } <line_num>: 1203,1212
@Test [EOL] public void testAppendSeparator_char_char() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final char startSeparator = ':'; [EOL]     final char standardSeparator = ','; [EOL]     final String foo = "foo"; [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(String.valueOf(startSeparator), sb.toString()); [EOL]     sb.append(foo); [EOL]     assertEquals(String.valueOf(startSeparator) + foo, sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString()); [EOL] } <line_num>: 1213,1225
@Test [EOL] public void testAppendSeparator_String_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(",", 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(",", 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(",", -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] } <line_num>: 1228,1240
@Test [EOL] public void testAppendSeparator_char_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(',', 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(',', 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(',', -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] } <line_num>: 1243,1255
@Test [EOL] public void testInsert() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'f', 'o', 'o' }); [EOL]         fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0]); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'f', 'o', 'o' }); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]         fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[0], 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3); [EOL]         fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3); [EOL]         fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1); [EOL]         fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10); [EOL]         fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, true); [EOL]         fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, true); [EOL]         fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, true); [EOL]     assertEquals("truebarbaz", sb.toString()); [EOL]     sb.insert(0, false); [EOL]     assertEquals("falsetruebarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, '!'); [EOL]         fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, '!'); [EOL]         fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '!'); [EOL]     assertEquals("!barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 0); [EOL]         fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 0); [EOL]         fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, '0'); [EOL]     assertEquals("0barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 1L); [EOL]         fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 1L); [EOL]         fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 1L); [EOL]     assertEquals("1barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 2.3F); [EOL]         fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 2.3F); [EOL]         fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 2.3F); [EOL]     assertEquals("2.3barbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, 4.5D); [EOL]         fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, 4.5D); [EOL]         fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, 4.5D); [EOL]     assertEquals("4.5barbaz", sb.toString()); [EOL] } <line_num>: 1258,1522
@Test [EOL] public void testInsertWithNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("null"); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, FOO); [EOL]         fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, FOO); [EOL]         fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (Object) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, FOO); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.append("barbaz"); [EOL]     assertEquals("barbaz", sb.toString()); [EOL]     try { [EOL]         sb.insert(-1, "foo"); [EOL]         fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.insert(7, "foo"); [EOL]         fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.insert(0, (String) null); [EOL]     assertEquals("nullbarbaz", sb.toString()); [EOL]     sb.insert(0, "foo"); [EOL]     assertEquals("foonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null); [EOL]     assertEquals("nullfoonullbarbaz", sb.toString()); [EOL]     sb.insert(0, (char[]) null, 0, 0); [EOL]     assertEquals("nullnullfoonullbarbaz", sb.toString()); [EOL] } <line_num>: 1525,1581
