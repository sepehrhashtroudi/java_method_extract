@Before [EOL] public void setUp() throws Exception { [EOL]     values = new HashMap<String, String>(); [EOL]     values.put("animal", "quick brown fox"); [EOL]     values.put("target", "lazy dog"); [EOL] } <line_num>: 39,44
@After [EOL] public void tearDown() throws Exception { [EOL]     values = null; [EOL] } <line_num>: 46,49
@Test [EOL] public void testReplaceSimple() { [EOL]     doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL] } <line_num>: 55,58
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] } <line_num>: 63,66
@Test [EOL] public void testReplaceNoVariables() { [EOL]     doTestNoReplace("The balloon arrived."); [EOL] } <line_num>: 71,74
@Test [EOL] public void testReplaceNull() { [EOL]     doTestNoReplace(null); [EOL] } <line_num>: 79,82
@Test [EOL] public void testReplaceEmpty() { [EOL]     doTestNoReplace(""); [EOL] } <line_num>: 87,90
@Test [EOL] public void testReplaceChangedMap() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     values.put("target", "moon"); [EOL]     assertEquals("The quick brown fox jumps over the moon.", sub.replace("The ${animal} jumps over the ${target}.")); [EOL] } <line_num>: 95,100
@Test [EOL] public void testReplaceUnknownKey() { [EOL]     doTestReplace("The ${person} jumps over the lazy dog.", "The ${person} jumps over the ${target}.", true); [EOL] } <line_num>: 105,108
@Test [EOL] public void testReplaceAdjacentAtStart() { [EOL]     values.put("code", "GBP"); [EOL]     values.put("amount", "12.50"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     assertEquals("GBP12.50 charged", sub.replace("${code}${amount} charged")); [EOL] } <line_num>: 113,119
@Test [EOL] public void testReplaceAdjacentAtEnd() { [EOL]     values.put("code", "GBP"); [EOL]     values.put("amount", "12.50"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     assertEquals("Amount is GBP12.50", sub.replace("Amount is ${code}${amount}")); [EOL] } <line_num>: 124,130
@Test [EOL] public void testReplaceRecursive() { [EOL]     values.put("animal", "${critter}"); [EOL]     values.put("target", "${pet}"); [EOL]     values.put("pet", "${petCharacteristic} dog"); [EOL]     values.put("petCharacteristic", "lazy"); [EOL]     values.put("critter", "${critterSpeed} ${critterColor} ${critterType}"); [EOL]     values.put("critterSpeed", "quick"); [EOL]     values.put("critterColor", "brown"); [EOL]     values.put("critterType", "fox"); [EOL]     doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL] } <line_num>: 135,146
@Test [EOL] public void testReplaceEscaping() { [EOL]     doTestReplace("The ${animal} jumps over the lazy dog.", "The $${animal} jumps over the ${target}.", true); [EOL] } <line_num>: 151,154
@Test [EOL] public void testReplaceSoloEscaping() { [EOL]     doTestReplace("${animal}", "$${animal}", false); [EOL] } <line_num>: 159,162
@Test [EOL] public void testReplaceComplexEscaping() { [EOL]     doTestReplace("The ${quick brown fox} jumps over the lazy dog.", "The $${${animal}} jumps over the ${target}.", true); [EOL] } <line_num>: 167,170
@Test [EOL] public void testReplaceNoPrefixNoSuffix() { [EOL]     doTestReplace("The animal jumps over the lazy dog.", "The animal jumps over the ${target}.", true); [EOL] } <line_num>: 175,178
@Test [EOL] public void testReplaceIncompletePrefix() { [EOL]     doTestReplace("The {animal} jumps over the lazy dog.", "The {animal} jumps over the ${target}.", true); [EOL] } <line_num>: 183,186
@Test [EOL] public void testReplacePrefixNoSuffix() { [EOL]     doTestReplace("The ${animal jumps over the ${target} lazy dog.", "The ${animal jumps over the ${target} ${target}.", true); [EOL] } <line_num>: 191,194
@Test [EOL] public void testReplaceNoPrefixSuffix() { [EOL]     doTestReplace("The animal} jumps over the lazy dog.", "The animal} jumps over the ${target}.", true); [EOL] } <line_num>: 199,202
@Test [EOL] public void testReplaceEmptyKeys() { [EOL]     doTestReplace("The ${} jumps over the lazy dog.", "The ${} jumps over the ${target}.", true); [EOL] } <line_num>: 207,210
@Test [EOL] public void testReplaceToIdentical() { [EOL]     values.put("animal", "$${${thing}}"); [EOL]     values.put("thing", "animal"); [EOL]     doTestReplace("The ${animal} jumps.", "The ${animal} jumps.", true); [EOL] } <line_num>: 215,220
@Test [EOL] public void testCyclicReplacement() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("animal", "${critter}"); [EOL]     map.put("target", "${pet}"); [EOL]     map.put("pet", "${petCharacteristic} dog"); [EOL]     map.put("petCharacteristic", "lazy"); [EOL]     map.put("critter", "${critterSpeed} ${critterColor} ${critterType}"); [EOL]     map.put("critterSpeed", "quick"); [EOL]     map.put("critterColor", "brown"); [EOL]     map.put("critterType", "${animal}"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(map); [EOL]     try { [EOL]         sub.replace("The ${animal} jumps over the ${target}."); [EOL]         fail("Cyclic replacement was not detected!"); [EOL]     } catch (final IllegalStateException ex) { [EOL]     } [EOL] } <line_num>: 226,244
@Test [EOL] public void testReplaceWeirdPattens() { [EOL]     doTestNoReplace(""); [EOL]     doTestNoReplace("${}"); [EOL]     doTestNoReplace("${ }"); [EOL]     doTestNoReplace("${\t}"); [EOL]     doTestNoReplace("${\n}"); [EOL]     doTestNoReplace("${\b}"); [EOL]     doTestNoReplace("${"); [EOL]     doTestNoReplace("$}"); [EOL]     doTestNoReplace("}"); [EOL]     doTestNoReplace("${}$"); [EOL]     doTestNoReplace("${${"); [EOL]     doTestNoReplace("${${}}"); [EOL]     doTestNoReplace("${$${}}"); [EOL]     doTestNoReplace("${$$${}}"); [EOL]     doTestNoReplace("${$$${$}}"); [EOL]     doTestNoReplace("${${}}"); [EOL]     doTestNoReplace("${${ }}"); [EOL] } <line_num>: 249,268
@Test [EOL] public void testReplacePartialString_noReplace() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15)); [EOL] } <line_num>: 273,277
@Test [EOL] public void testReplaceInVariable() { [EOL]     values.put("animal.1", "fox"); [EOL]     values.put("animal.2", "mouse"); [EOL]     values.put("species", "2"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     sub.setEnableSubstitutionInVariables(true); [EOL]     assertEquals("Wrong result (1)", "The mouse jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL]     values.put("species", "1"); [EOL]     assertEquals("Wrong result (2)", "The fox jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL] } <line_num>: 282,298
@Test [EOL] public void testReplaceInVariableDisabled() { [EOL]     values.put("animal.1", "fox"); [EOL]     values.put("animal.2", "mouse"); [EOL]     values.put("species", "2"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     assertEquals("Wrong result", "The ${animal.${species}} jumps over the lazy dog.", sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL] } <line_num>: 303,313
@Test [EOL] public void testReplaceInVariableRecursive() { [EOL]     values.put("animal.2", "brown fox"); [EOL]     values.put("animal.1", "white mouse"); [EOL]     values.put("color", "white"); [EOL]     values.put("species.white", "1"); [EOL]     values.put("species.brown", "2"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     sub.setEnableSubstitutionInVariables(true); [EOL]     assertEquals("Wrong result", "The white mouse jumps over the lazy dog.", sub.replace("The ${animal.${species.${color}}} jumps over the ${target}.")); [EOL] } <line_num>: 318,331
@Override [EOL] protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) { [EOL]     assertEquals("name", variableName); [EOL]     assertSame(builder, buf); [EOL]     assertEquals(3, startPos); [EOL]     assertEquals(10, endPos); [EOL]     return "jakarta"; [EOL] } <line_num>: 343,350
@Test [EOL] public void testResolveVariable() { [EOL]     final StrBuilder builder = new StrBuilder("Hi ${name}!"); [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("name", "commons"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(map) { [EOL]  [EOL]         @Override [EOL]         protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) { [EOL]             assertEquals("name", variableName); [EOL]             assertSame(builder, buf); [EOL]             assertEquals(3, startPos); [EOL]             assertEquals(10, endPos); [EOL]             return "jakarta"; [EOL]         } [EOL]     }; [EOL]     sub.replaceIn(builder); [EOL]     assertEquals("Hi jakarta!", builder.toString()); [EOL] } <line_num>: 337,354
@Test [EOL] public void testConstructorNoArgs() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals("Hi ${name}", sub.replace("Hi ${name}")); [EOL] } <line_num>: 360,364
@Test [EOL] public void testConstructorMapPrefixSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("name", "commons"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(map, "<", ">"); [EOL]     assertEquals("Hi < commons", sub.replace("Hi $< <name>")); [EOL] } <line_num>: 369,375
@Test [EOL] public void testConstructorMapFull() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("name", "commons"); [EOL]     final StrSubstitutor sub = new StrSubstitutor(map, "<", ">", '!'); [EOL]     assertEquals("Hi < commons", sub.replace("Hi !< <name>")); [EOL] } <line_num>: 380,386
@Test [EOL] public void testGetSetEscape() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals('$', sub.getEscapeChar()); [EOL]     sub.setEscapeChar('<'); [EOL]     assertEquals('<', sub.getEscapeChar()); [EOL] } <line_num>: 392,398
@Test [EOL] public void testGetSetPrefix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariablePrefix('<'); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariablePrefix("<<"); [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariablePrefix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariablePrefixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]     try { [EOL]         sub.setVariablePrefixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL] } <line_num>: 403,430
@Test [EOL] public void testGetSetSuffix() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     sub.setVariableSuffix('<'); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]     sub.setVariableSuffix("<<"); [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     try { [EOL]         sub.setVariableSuffix((String) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]     final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]     sub.setVariableSuffixMatcher(matcher); [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]     try { [EOL]         sub.setVariableSuffixMatcher((StrMatcher) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL] } <line_num>: 435,462
@Test [EOL] public void testStaticReplace() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL] } <line_num>: 468,473
@Test [EOL] public void testStaticReplacePrefixSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi <name>!", map, "<", ">")); [EOL] } <line_num>: 478,483
@Test [EOL] public void testStaticReplaceSystemProperties() { [EOL]     final StrBuilder buf = new StrBuilder(); [EOL]     buf.append("Hi ").append(System.getProperty("user.name")); [EOL]     buf.append(", you are working with "); [EOL]     buf.append(System.getProperty("os.name")); [EOL]     buf.append(", your home directory is "); [EOL]     buf.append(System.getProperty("user.home")).append('.'); [EOL]     assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties("Hi ${user.name}, you are " + "working with ${os.name}, your home " + "directory is ${user.home}.")); [EOL] } <line_num>: 488,499
@Test [EOL] public void testSubstituteDefaultProperties() { [EOL]     final String org = "${doesnotwork}"; [EOL]     System.setProperty("doesnotwork", "It works!"); [EOL]     final Properties props = new Properties(System.getProperties()); [EOL]     assertEquals("It works!", StrSubstitutor.replace(org, props)); [EOL] } <line_num>: 504,513
@Test [EOL] public void testSamePrefixAndSuffix() { [EOL]     final Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("greeting", "Hello"); [EOL]     map.put(" there ", "XXX"); [EOL]     map.put("name", "commons"); [EOL]     assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name@!", map, "@", "@")); [EOL]     assertEquals("Hello there commons!", StrSubstitutor.replace("@greeting@ there @name@!", map, "@", "@")); [EOL] } <line_num>: 515,523
private void doTestReplace(final String expectedResult, final String replaceTemplate, final boolean substring) { [EOL]     final String expectedShortResult = expectedResult.substring(1, expectedResult.length() - 1); [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     assertEquals(expectedResult, sub.replace(replaceTemplate)); [EOL]     if (substring) { [EOL]         assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2)); [EOL]     } [EOL]     final char[] chars = replaceTemplate.toCharArray(); [EOL]     assertEquals(expectedResult, sub.replace(chars)); [EOL]     if (substring) { [EOL]         assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2)); [EOL]     } [EOL]     StringBuffer buf = new StringBuffer(replaceTemplate); [EOL]     assertEquals(expectedResult, sub.replace(buf)); [EOL]     if (substring) { [EOL]         assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2)); [EOL]     } [EOL]     StringBuilder builder = new StringBuilder(replaceTemplate); [EOL]     assertEquals(expectedResult, sub.replace(builder)); [EOL]     if (substring) { [EOL]         assertEquals(expectedShortResult, sub.replace(builder, 1, builder.length() - 2)); [EOL]     } [EOL]     StrBuilder bld = new StrBuilder(replaceTemplate); [EOL]     assertEquals(expectedResult, sub.replace(bld)); [EOL]     if (substring) { [EOL]         assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2)); [EOL]     } [EOL]     final MutableObject<String> obj = new MutableObject<String>(replaceTemplate); [EOL]     assertEquals(expectedResult, sub.replace(obj)); [EOL]     buf = new StringBuffer(replaceTemplate); [EOL]     assertTrue(sub.replaceIn(buf)); [EOL]     assertEquals(expectedResult, buf.toString()); [EOL]     if (substring) { [EOL]         buf = new StringBuffer(replaceTemplate); [EOL]         assertTrue(sub.replaceIn(buf, 1, buf.length() - 2)); [EOL]         assertEquals(expectedResult, buf.toString()); [EOL]     } [EOL]     builder = new StringBuilder(replaceTemplate); [EOL]     assertTrue(sub.replaceIn(builder)); [EOL]     assertEquals(expectedResult, builder.toString()); [EOL]     if (substring) { [EOL]         builder = new StringBuilder(replaceTemplate); [EOL]         assertTrue(sub.replaceIn(builder, 1, builder.length() - 2)); [EOL]         assertEquals(expectedResult, builder.toString()); [EOL]     } [EOL]     bld = new StrBuilder(replaceTemplate); [EOL]     assertTrue(sub.replaceIn(bld)); [EOL]     assertEquals(expectedResult, bld.toString()); [EOL]     if (substring) { [EOL]         bld = new StrBuilder(replaceTemplate); [EOL]         assertTrue(sub.replaceIn(bld, 1, bld.length() - 2)); [EOL]         assertEquals(expectedResult, bld.toString()); [EOL]     } [EOL] } <line_num>: 526,597
private void doTestNoReplace(final String replaceTemplate) { [EOL]     final StrSubstitutor sub = new StrSubstitutor(values); [EOL]     if (replaceTemplate == null) { [EOL]         assertEquals(null, sub.replace((String) null)); [EOL]         assertEquals(null, sub.replace((String) null, 0, 100)); [EOL]         assertEquals(null, sub.replace((char[]) null)); [EOL]         assertEquals(null, sub.replace((char[]) null, 0, 100)); [EOL]         assertEquals(null, sub.replace((StringBuffer) null)); [EOL]         assertEquals(null, sub.replace((StringBuffer) null, 0, 100)); [EOL]         assertEquals(null, sub.replace((StrBuilder) null)); [EOL]         assertEquals(null, sub.replace((StrBuilder) null, 0, 100)); [EOL]         assertEquals(null, sub.replace((Object) null)); [EOL]         assertFalse(sub.replaceIn((StringBuffer) null)); [EOL]         assertFalse(sub.replaceIn((StringBuffer) null, 0, 100)); [EOL]         assertFalse(sub.replaceIn((StrBuilder) null)); [EOL]         assertFalse(sub.replaceIn((StrBuilder) null, 0, 100)); [EOL]     } else { [EOL]         assertEquals(replaceTemplate, sub.replace(replaceTemplate)); [EOL]         final StrBuilder bld = new StrBuilder(replaceTemplate); [EOL]         assertFalse(sub.replaceIn(bld)); [EOL]         assertEquals(replaceTemplate, bld.toString()); [EOL]     } [EOL] } <line_num>: 599,622
