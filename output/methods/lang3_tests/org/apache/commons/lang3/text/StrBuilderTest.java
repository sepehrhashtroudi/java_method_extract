@Test [EOL] public void testConstructors() { [EOL]     final StrBuilder sb0 = new StrBuilder(); [EOL]     assertEquals(32, sb0.capacity()); [EOL]     assertEquals(0, sb0.length()); [EOL]     assertEquals(0, sb0.size()); [EOL]     final StrBuilder sb1 = new StrBuilder(32); [EOL]     assertEquals(32, sb1.capacity()); [EOL]     assertEquals(0, sb1.length()); [EOL]     assertEquals(0, sb1.size()); [EOL]     final StrBuilder sb2 = new StrBuilder(0); [EOL]     assertEquals(32, sb2.capacity()); [EOL]     assertEquals(0, sb2.length()); [EOL]     assertEquals(0, sb2.size()); [EOL]     final StrBuilder sb3 = new StrBuilder(-1); [EOL]     assertEquals(32, sb3.capacity()); [EOL]     assertEquals(0, sb3.length()); [EOL]     assertEquals(0, sb3.size()); [EOL]     final StrBuilder sb4 = new StrBuilder(1); [EOL]     assertEquals(1, sb4.capacity()); [EOL]     assertEquals(0, sb4.length()); [EOL]     assertEquals(0, sb4.size()); [EOL]     final StrBuilder sb5 = new StrBuilder((String) null); [EOL]     assertEquals(32, sb5.capacity()); [EOL]     assertEquals(0, sb5.length()); [EOL]     assertEquals(0, sb5.size()); [EOL]     final StrBuilder sb6 = new StrBuilder(""); [EOL]     assertEquals(32, sb6.capacity()); [EOL]     assertEquals(0, sb6.length()); [EOL]     assertEquals(0, sb6.size()); [EOL]     final StrBuilder sb7 = new StrBuilder("foo"); [EOL]     assertEquals(35, sb7.capacity()); [EOL]     assertEquals(3, sb7.length()); [EOL]     assertEquals(3, sb7.size()); [EOL] } <line_num>: 36,77
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] } <line_num>: 80,92
@Test [EOL] public void testGetSetNewLineText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL]     sb.setNewLineText("#"); [EOL]     assertEquals("#", sb.getNewLineText()); [EOL]     sb.setNewLineText(""); [EOL]     assertEquals("", sb.getNewLineText()); [EOL]     sb.setNewLineText((String) null); [EOL]     assertEquals(null, sb.getNewLineText()); [EOL] } <line_num>: 95,108
@Test [EOL] public void testGetSetNullText() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(null, sb.getNullText()); [EOL]     sb.setNullText("null"); [EOL]     assertEquals("null", sb.getNullText()); [EOL]     sb.setNullText(""); [EOL]     assertEquals(null, sb.getNullText()); [EOL]     sb.setNullText("NULL"); [EOL]     assertEquals("NULL", sb.getNullText()); [EOL]     sb.setNullText((String) null); [EOL]     assertEquals(null, sb.getNullText()); [EOL] } <line_num>: 111,127
@Test [EOL] public void testCapacityAndLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(32, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.ensureCapacity(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("foo"); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(3, sb.length()); [EOL]     assertEquals(3, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.clear(); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("123456789012345678901234567890123"); [EOL]     assertTrue(sb.capacity() > 32); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.ensureCapacity(16); [EOL]     assertTrue(sb.capacity() > 16); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.setLength(33); [EOL]     assertEquals(33, sb.capacity()); [EOL]     assertEquals(33, sb.length()); [EOL]     assertEquals(33, sb.size()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(16); [EOL]     assertTrue(sb.capacity() >= 16); [EOL]     assertEquals(16, sb.length()); [EOL]     assertEquals(16, sb.size()); [EOL]     assertEquals("1234567890123456", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(32); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(32, sb.length()); [EOL]     assertEquals(32, sb.size()); [EOL]     assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]     assertTrue(sb.isEmpty() == false); [EOL]     sb.setLength(0); [EOL]     assertTrue(sb.capacity() >= 32); [EOL]     assertEquals(0, sb.length()); [EOL]     assertEquals(0, sb.size()); [EOL]     assertTrue(sb.isEmpty()); [EOL] } <line_num>: 130,212
@Test [EOL] public void testLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(0, sb.length()); [EOL]     sb.append("Hello"); [EOL]     assertEquals(5, sb.length()); [EOL] } <line_num>: 215,222
@Test [EOL] public void testSetLength() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("Hello"); [EOL]     sb.setLength(2); [EOL]     assertEquals("He", sb.toString()); [EOL]     sb.setLength(2); [EOL]     assertEquals("He", sb.toString()); [EOL]     sb.setLength(3); [EOL]     assertEquals("He\0", sb.toString()); [EOL]     try { [EOL]         sb.setLength(-1); [EOL]         fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 224,241
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] } <line_num>: 244,251
@Test [EOL] public void testEnsureCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.ensureCapacity(2); [EOL]     assertTrue(sb.capacity() >= 2); [EOL]     sb.ensureCapacity(-1); [EOL]     assertTrue(sb.capacity() >= 0); [EOL]     sb.append("HelloWorld"); [EOL]     sb.ensureCapacity(40); [EOL]     assertTrue(sb.capacity() >= 40); [EOL] } <line_num>: 253,265
@Test [EOL] public void testMinimizeCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(0, sb.capacity()); [EOL]     sb.append("HelloWorld"); [EOL]     sb.minimizeCapacity(); [EOL]     assertEquals(10, sb.capacity()); [EOL] } <line_num>: 267,276
@Test [EOL] public void testSize() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(0, sb.size()); [EOL]     sb.append("Hello"); [EOL]     assertEquals(5, sb.size()); [EOL] } <line_num>: 279,286
@Test [EOL] public void testIsEmpty() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("Hello"); [EOL]     assertFalse(sb.isEmpty()); [EOL]     sb.clear(); [EOL]     assertTrue(sb.isEmpty()); [EOL] } <line_num>: 288,298
@Test [EOL] public void testClear() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("Hello"); [EOL]     sb.clear(); [EOL]     assertEquals(0, sb.length()); [EOL]     assertTrue(sb.buffer.length >= 5); [EOL] } <line_num>: 300,307
@Test [EOL] public void testCharAt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     try { [EOL]         sb.charAt(0); [EOL]         fail("charAt(0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.charAt(-1); [EOL]         fail("charAt(-1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("foo"); [EOL]     assertEquals('f', sb.charAt(0)); [EOL]     assertEquals('o', sb.charAt(1)); [EOL]     assertEquals('o', sb.charAt(2)); [EOL]     try { [EOL]         sb.charAt(-1); [EOL]         fail("charAt(-1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.charAt(3); [EOL]         fail("charAt(3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 310,341
@Test [EOL] public void testSetCharAt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     try { [EOL]         sb.setCharAt(0, 'f'); [EOL]         fail("setCharAt(0,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.setCharAt(-1, 'f'); [EOL]         fail("setCharAt(-1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("foo"); [EOL]     sb.setCharAt(0, 'b'); [EOL]     sb.setCharAt(1, 'a'); [EOL]     sb.setCharAt(2, 'r'); [EOL]     try { [EOL]         sb.setCharAt(3, '!'); [EOL]         fail("setCharAt(3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     assertEquals("bar", sb.toString()); [EOL] } <line_num>: 344,370
@Test [EOL] public void testDeleteCharAt() { [EOL]     final StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.deleteCharAt(0); [EOL]     assertEquals("bc", sb.toString()); [EOL]     try { [EOL]         sb.deleteCharAt(1000); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 373,383
@Test [EOL] public void testToCharArray() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray()); [EOL]     char[] a = sb.toCharArray(); [EOL]     assertNotNull("toCharArray() result is null", a); [EOL]     assertEquals("toCharArray() result is too large", 0, a.length); [EOL]     sb.append("junit"); [EOL]     a = sb.toCharArray(); [EOL]     assertEquals("toCharArray() result incorrect length", 5, a.length); [EOL]     assertTrue("toCharArray() result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL] } <line_num>: 386,399
@Test [EOL] public void testToCharArrayIntInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0)); [EOL]     sb.append("junit"); [EOL]     char[] a = sb.toCharArray(0, 20); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 5, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 4); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 4); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 1); [EOL]     assertNotNull("toCharArray(int,int) result is null", a); [EOL]     try { [EOL]         sb.toCharArray(-1, 5); [EOL]         fail("no string index out of bound on -1"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.toCharArray(6, 5); [EOL]         fail("no string index out of bound on -1"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 401,433
@Test [EOL] public void testGetChars() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     char[] input = new char[10]; [EOL]     char[] a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[10], a)); [EOL]     sb.append("junit"); [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a)); [EOL]     a = sb.getChars(null); [EOL]     assertNotSame(input, a); [EOL]     assertEquals(5, a.length); [EOL]     assertTrue(Arrays.equals("junit".toCharArray(), a)); [EOL]     input = new char[5]; [EOL]     a = sb.getChars(input); [EOL]     assertSame(input, a); [EOL]     input = new char[4]; [EOL]     a = sb.getChars(input); [EOL]     assertNotSame(input, a); [EOL] } <line_num>: 435,461
@Test [EOL] public void testGetCharsIntIntCharArrayInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("junit"); [EOL]     char[] a = new char[5]; [EOL]     sb.getChars(0, 5, a, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'j', 'u', 'n', 'i', 't' }, a)); [EOL]     a = new char[5]; [EOL]     sb.getChars(0, 2, a, 3); [EOL]     assertTrue(Arrays.equals(new char[] { 0, 0, 0, 'j', 'u' }, a)); [EOL]     try { [EOL]         sb.getChars(-1, 0, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, -1, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(0, 20, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.getChars(4, 2, a, 0); [EOL]         fail("no exception"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 463,503
@Test [EOL] public void testDeleteIntInt() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.delete(0, 1); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.delete(1, 2); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.delete(0, 1); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.delete(0, 1000); [EOL]     assertEquals("", sb.toString()); [EOL]     try { [EOL]         sb.delete(1, 2); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.delete(-1, 1); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder("anything"); [EOL]     try { [EOL]         sb.delete(2, 1); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 506,532
@Test [EOL] public void testDeleteAll_char() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll('X'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll('a'); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll('c'); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll('b'); [EOL]     assertEquals("", sb.toString()); [EOL] } <line_num>: 535,550
@Test [EOL] public void testDeleteFirst_char() { [EOL]     StrBuilder sb = new StrBuilder("abcba"); [EOL]     sb.deleteFirst('X'); [EOL]     assertEquals("abcba", sb.toString()); [EOL]     sb.deleteFirst('a'); [EOL]     assertEquals("bcba", sb.toString()); [EOL]     sb.deleteFirst('c'); [EOL]     assertEquals("bba", sb.toString()); [EOL]     sb.deleteFirst('b'); [EOL]     assertEquals("ba", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst('b'); [EOL]     assertEquals("", sb.toString()); [EOL] } <line_num>: 552,567
@Test [EOL] public void testDeleteAll_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll((String) null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll(""); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll("X"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteAll("a"); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.deleteAll("c"); [EOL]     assertEquals("bbb", sb.toString()); [EOL]     sb.deleteAll("b"); [EOL]     assertEquals("", sb.toString()); [EOL]     sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteAll("bc"); [EOL]     assertEquals("acba", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll("bc"); [EOL]     assertEquals("", sb.toString()); [EOL] } <line_num>: 570,594
@Test [EOL] public void testDeleteFirst_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteFirst((String) null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteFirst(""); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteFirst("X"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.deleteFirst("a"); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.deleteFirst("c"); [EOL]     assertEquals("bbccba", sb.toString()); [EOL]     sb.deleteFirst("b"); [EOL]     assertEquals("bccba", sb.toString()); [EOL]     sb = new StrBuilder("abcbccba"); [EOL]     sb.deleteFirst("bc"); [EOL]     assertEquals("abccba", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst("bc"); [EOL]     assertEquals("", sb.toString()); [EOL] } <line_num>: 596,620
@Test [EOL] public void testDeleteAll_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteAll((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("xy", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] } <line_num>: 623,638
@Test [EOL] public void testDeleteFirst_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteFirst((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("xA1A2yA3", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteFirst(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] } <line_num>: 640,655
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 658,691
@Test [EOL] public void testReplaceAll_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll('a', 'd'); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll('b', 'e'); [EOL]     assertEquals("dececced", sb.toString()); [EOL]     sb.replaceAll('c', 'f'); [EOL]     assertEquals("defeffed", sb.toString()); [EOL]     sb.replaceAll('d', 'd'); [EOL]     assertEquals("defeffed", sb.toString()); [EOL] } <line_num>: 694,707
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] } <line_num>: 710,723
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] } <line_num>: 726,754
@Test [EOL] public void testReplaceFirst_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst("a", "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst("d", null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst("cb", "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst("b", "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL] } <line_num>: 756,784
@Test [EOL] public void testReplaceAll_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceAll(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-******-***", sb.toString()); [EOL] } <line_num>: 787,819
@Test [EOL] public void testReplaceFirst_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccba", sb.toString()); [EOL]     sb.replaceFirst(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-ccba", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcba", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceFirst(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxb", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceFirst(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-A2A3-A4", sb.toString()); [EOL] } <line_num>: 821,853
@Test [EOL] public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replace((StrMatcher) null, "x", 0, sb.length(), -1); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replace(StrMatcher.charMatcher('a'), "x", 0, sb.length(), -1); [EOL]     assertEquals("xbcbccbx", sb.toString()); [EOL]     sb.replace(StrMatcher.stringMatcher("cb"), "x", 0, sb.length(), -1); [EOL]     assertEquals("xbxcxx", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replace(A_NUMBER_MATCHER, "***", 0, sb.length(), -1); [EOL]     assertEquals("***-******-***", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.replace(A_NUMBER_MATCHER, "***", 0, sb.length(), -1); [EOL]     assertEquals("", sb.toString()); [EOL] } <line_num>: 856,875
@Test [EOL] public void testReplace_StrMatcher_String_int_int_int_VaryReplace() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replace(StrMatcher.stringMatcher("cb"), "cb", 0, sb.length(), -1); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb = new StrBuilder("abcbccba"); [EOL]     sb.replace(StrMatcher.stringMatcher("cb"), "-", 0, sb.length(), -1); [EOL]     assertEquals("ab-c-a", sb.toString()); [EOL]     sb = new StrBuilder("abcbccba"); [EOL]     sb.replace(StrMatcher.stringMatcher("cb"), "+++", 0, sb.length(), -1); [EOL]     assertEquals("ab+++c+++a", sb.toString()); [EOL]     sb = new StrBuilder("abcbccba"); [EOL]     sb.replace(StrMatcher.stringMatcher("cb"), "", 0, sb.length(), -1); [EOL]     assertEquals("abca", sb.toString()); [EOL]     sb = new StrBuilder("abcbccba"); [EOL]     sb.replace(StrMatcher.stringMatcher("cb"), null, 0, sb.length(), -1); [EOL]     assertEquals("abca", sb.toString()); [EOL] } <line_num>: 877,898
@Test [EOL] public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() { [EOL]     StrBuilder sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, sb.length(), -1); [EOL]     assertEquals("-x--y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 1, sb.length(), -1); [EOL]     assertEquals("aax--y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 2, sb.length(), -1); [EOL]     assertEquals("aax--y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 3, sb.length(), -1); [EOL]     assertEquals("aax--y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 4, sb.length(), -1); [EOL]     assertEquals("aaxa-ay-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 5, sb.length(), -1); [EOL]     assertEquals("aaxaa-y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 6, sb.length(), -1); [EOL]     assertEquals("aaxaaaay-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 7, sb.length(), -1); [EOL]     assertEquals("aaxaaaay-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 8, sb.length(), -1); [EOL]     assertEquals("aaxaaaay-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 9, sb.length(), -1); [EOL]     assertEquals("aaxaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 10, sb.length(), -1); [EOL]     assertEquals("aaxaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     try { [EOL]         sb.replace(StrMatcher.stringMatcher("aa"), "-", 11, sb.length(), -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals("aaxaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     try { [EOL]         sb.replace(StrMatcher.stringMatcher("aa"), "-", -1, sb.length(), -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals("aaxaaaayaa", sb.toString()); [EOL] } <line_num>: 900,959
@Test [EOL] public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() { [EOL]     StrBuilder sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 0, -1); [EOL]     assertEquals("aaxaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 2, -1); [EOL]     assertEquals("-xaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 3, -1); [EOL]     assertEquals("-xaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 4, -1); [EOL]     assertEquals("-xaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 5, -1); [EOL]     assertEquals("-x-aayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 6, -1); [EOL]     assertEquals("-x-aayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 7, -1); [EOL]     assertEquals("-x--yaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 8, -1); [EOL]     assertEquals("-x--yaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 9, -1); [EOL]     assertEquals("-x--yaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, -1); [EOL]     assertEquals("-x--y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 1000, -1); [EOL]     assertEquals("-x--y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     try { [EOL]         sb.replace(StrMatcher.stringMatcher("aa"), "-", 2, 1, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals("aaxaaaayaa", sb.toString()); [EOL] } <line_num>: 961,1013
@Test [EOL] public void testReplace_StrMatcher_String_int_int_int_VaryCount() { [EOL]     StrBuilder sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, -1); [EOL]     assertEquals("-x--y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 0); [EOL]     assertEquals("aaxaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 1); [EOL]     assertEquals("-xaaaayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 2); [EOL]     assertEquals("-x-aayaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 3); [EOL]     assertEquals("-x--yaa", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 4); [EOL]     assertEquals("-x--y-", sb.toString()); [EOL]     sb = new StrBuilder("aaxaaaayaa"); [EOL]     sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 10, 5); [EOL]     assertEquals("-x--y-", sb.toString()); [EOL] } <line_num>: 1015,1044
@Test [EOL] public void testReverse() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(true); [EOL]     assertEquals("eurt", sb.reverse().toString()); [EOL]     assertEquals("true", sb.reverse().toString()); [EOL] } <line_num>: 1047,1055
@Test [EOL] public void testTrim() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(" \u0000 "); [EOL]     assertEquals("", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append(" \u0000 a b c \u0000 "); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL]     sb.clear().append("a b c"); [EOL]     assertEquals("a b c", sb.trim().toString()); [EOL] } <line_num>: 1058,1077
@Test [EOL] public void testStartsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.startsWith("a")); [EOL]     assertFalse(sb.startsWith(null)); [EOL]     assertTrue(sb.startsWith("")); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.startsWith("a")); [EOL]     assertTrue(sb.startsWith("ab")); [EOL]     assertTrue(sb.startsWith("abc")); [EOL]     assertFalse(sb.startsWith("cba")); [EOL] } <line_num>: 1080,1091
@Test [EOL] public void testEndsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.endsWith("a")); [EOL]     assertFalse(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("")); [EOL]     assertFalse(sb.endsWith(null)); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("bc")); [EOL]     assertTrue(sb.endsWith("abc")); [EOL]     assertFalse(sb.endsWith("cba")); [EOL]     assertFalse(sb.endsWith("abcd")); [EOL]     assertFalse(sb.endsWith(" abc")); [EOL]     assertFalse(sb.endsWith("abc ")); [EOL] } <line_num>: 1093,1108
@Test [EOL] public void testSubSequenceIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     try { [EOL]         sb.subSequence(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(2, sb.length() + 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.subSequence(3, 2); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     assertEquals("hello", sb.subSequence(0, 5)); [EOL]     assertEquals("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); [EOL]     assertEquals("goodbye", sb.subSequence(6, 13)); [EOL]     assertEquals("hello goodbye".subSequence(6, 13), sb.subSequence(6, 13)); [EOL] } <line_num>: 1111,1143
@Test [EOL] public void testSubstringInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("goodbye", sb.substring(6)); [EOL]     assertEquals("hello goodbye".substring(6), sb.substring(6)); [EOL]     assertEquals("hello goodbye", sb.substring(0)); [EOL]     assertEquals("hello goodbye".substring(0), sb.substring(0)); [EOL]     try { [EOL]         sb.substring(-1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 1145,1162
@Test [EOL] public void testSubstringIntInt() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye"); [EOL]     assertEquals("hello", sb.substring(0, 5)); [EOL]     assertEquals("hello goodbye".substring(0, 6), sb.substring(0, 6)); [EOL]     assertEquals("goodbye", sb.substring(6, 13)); [EOL]     assertEquals("hello goodbye".substring(6, 13), sb.substring(6, 13)); [EOL]     assertEquals("goodbye", sb.substring(6, 20)); [EOL]     try { [EOL]         sb.substring(-1, 5); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.substring(15, 20); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 1164,1184
@Test [EOL] public void testMidString() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]     assertEquals("goodbye", sb.midString(6, 7)); [EOL]     assertEquals("hello", sb.midString(0, 5)); [EOL]     assertEquals("hello", sb.midString(-5, 5)); [EOL]     assertEquals("", sb.midString(0, -1)); [EOL]     assertEquals("", sb.midString(20, 2)); [EOL]     assertEquals("hello", sb.midString(14, 22)); [EOL] } <line_num>: 1187,1196
@Test [EOL] public void testRightString() { [EOL]     final StrBuilder sb = new StrBuilder("left right"); [EOL]     assertEquals("right", sb.rightString(5)); [EOL]     assertEquals("", sb.rightString(0)); [EOL]     assertEquals("", sb.rightString(-5)); [EOL]     assertEquals("left right", sb.rightString(15)); [EOL] } <line_num>: 1198,1205
@Test [EOL] public void testLeftString() { [EOL]     final StrBuilder sb = new StrBuilder("left right"); [EOL]     assertEquals("left", sb.leftString(4)); [EOL]     assertEquals("", sb.leftString(0)); [EOL]     assertEquals("", sb.leftString(-5)); [EOL]     assertEquals("left right", sb.leftString(15)); [EOL] } <line_num>: 1207,1214
@Test [EOL] public void testContains_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains('a')); [EOL]     assertTrue(sb.contains('o')); [EOL]     assertTrue(sb.contains('z')); [EOL]     assertFalse(sb.contains('1')); [EOL] } <line_num>: 1217,1224
@Test [EOL] public void testContains_String() { [EOL]     final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains("a")); [EOL]     assertTrue(sb.contains("pq")); [EOL]     assertTrue(sb.contains("z")); [EOL]     assertFalse(sb.contains("zyx")); [EOL]     assertFalse(sb.contains((String) null)); [EOL] } <line_num>: 1226,1234
@Test [EOL] public void testContains_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]     assertTrue(sb.contains(StrMatcher.charMatcher('a'))); [EOL]     assertTrue(sb.contains(StrMatcher.stringMatcher("pq"))); [EOL]     assertTrue(sb.contains(StrMatcher.charMatcher('z'))); [EOL]     assertFalse(sb.contains(StrMatcher.stringMatcher("zy"))); [EOL]     assertFalse(sb.contains((StrMatcher) null)); [EOL]     sb = new StrBuilder(); [EOL]     assertFalse(sb.contains(A_NUMBER_MATCHER)); [EOL]     sb.append("B A1 C"); [EOL]     assertTrue(sb.contains(A_NUMBER_MATCHER)); [EOL] } <line_num>: 1236,1249
@Test [EOL] public void testIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a')); [EOL]     assertEquals("abab".indexOf('a'), sb.indexOf('a')); [EOL]     assertEquals(1, sb.indexOf('b')); [EOL]     assertEquals("abab".indexOf('b'), sb.indexOf('b')); [EOL]     assertEquals(-1, sb.indexOf('z')); [EOL] } <line_num>: 1252,1264
@Test [EOL] public void testIndexOf_char_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf('a', -1)); [EOL]     assertEquals(0, sb.indexOf('a', 0)); [EOL]     assertEquals(2, sb.indexOf('a', 1)); [EOL]     assertEquals(-1, sb.indexOf('a', 4)); [EOL]     assertEquals(-1, sb.indexOf('a', 5)); [EOL]     assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1)); [EOL]     assertEquals(3, sb.indexOf('b', 2)); [EOL]     assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2)); [EOL]     assertEquals(-1, sb.indexOf('z', 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.indexOf('z', 0)); [EOL]     assertEquals(-1, sb.indexOf('z', 3)); [EOL] } <line_num>: 1266,1286
@Test [EOL] public void testLastIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf('a')); [EOL]     assertEquals("abab".lastIndexOf('a'), sb.lastIndexOf('a')); [EOL]     assertEquals(3, sb.lastIndexOf('b')); [EOL]     assertEquals("abab".lastIndexOf('b'), sb.lastIndexOf('b')); [EOL]     assertEquals(-1, sb.lastIndexOf('z')); [EOL] } <line_num>: 1288,1300
@Test [EOL] public void testLastIndexOf_char_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf('a', -1)); [EOL]     assertEquals(0, sb.lastIndexOf('a', 0)); [EOL]     assertEquals(0, sb.lastIndexOf('a', 1)); [EOL]     assertEquals("abab".lastIndexOf('a', 1), sb.lastIndexOf('a', 1)); [EOL]     assertEquals(1, sb.lastIndexOf('b', 2)); [EOL]     assertEquals("abab".lastIndexOf('b', 2), sb.lastIndexOf('b', 2)); [EOL]     assertEquals(-1, sb.lastIndexOf('z', 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf('z', sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf('z', 1)); [EOL] } <line_num>: 1302,1320
@Test [EOL] public void testIndexOf_String() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf("a")); [EOL]     assertEquals("abab".indexOf("a"), sb.indexOf("a")); [EOL]     assertEquals(0, sb.indexOf("ab")); [EOL]     assertEquals("abab".indexOf("ab"), sb.indexOf("ab")); [EOL]     assertEquals(1, sb.indexOf("b")); [EOL]     assertEquals("abab".indexOf("b"), sb.indexOf("b")); [EOL]     assertEquals(1, sb.indexOf("ba")); [EOL]     assertEquals("abab".indexOf("ba"), sb.indexOf("ba")); [EOL]     assertEquals(-1, sb.indexOf("z")); [EOL]     assertEquals(-1, sb.indexOf((String) null)); [EOL] } <line_num>: 1323,1344
@Test [EOL] public void testIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(0, sb.indexOf("a", -1)); [EOL]     assertEquals(0, sb.indexOf("a", 0)); [EOL]     assertEquals(2, sb.indexOf("a", 1)); [EOL]     assertEquals(2, sb.indexOf("a", 2)); [EOL]     assertEquals(-1, sb.indexOf("a", 3)); [EOL]     assertEquals(-1, sb.indexOf("a", 4)); [EOL]     assertEquals(-1, sb.indexOf("a", 5)); [EOL]     assertEquals(-1, sb.indexOf("abcdef", 0)); [EOL]     assertEquals(0, sb.indexOf("", 0)); [EOL]     assertEquals(1, sb.indexOf("", 1)); [EOL]     assertEquals("abab".indexOf("a", 1), sb.indexOf("a", 1)); [EOL]     assertEquals(2, sb.indexOf("ab", 1)); [EOL]     assertEquals("abab".indexOf("ab", 1), sb.indexOf("ab", 1)); [EOL]     assertEquals(3, sb.indexOf("b", 2)); [EOL]     assertEquals("abab".indexOf("b", 2), sb.indexOf("b", 2)); [EOL]     assertEquals(1, sb.indexOf("ba", 1)); [EOL]     assertEquals("abab".indexOf("ba", 2), sb.indexOf("ba", 2)); [EOL]     assertEquals(-1, sb.indexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.indexOf("za", 0)); [EOL]     assertEquals(-1, sb.indexOf("za", 3)); [EOL]     assertEquals(-1, sb.indexOf((String) null, 2)); [EOL] } <line_num>: 1346,1381
@Test [EOL] public void testLastIndexOf_String() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf("a")); [EOL]     assertEquals("abab".lastIndexOf("a"), sb.lastIndexOf("a")); [EOL]     assertEquals(2, sb.lastIndexOf("ab")); [EOL]     assertEquals("abab".lastIndexOf("ab"), sb.lastIndexOf("ab")); [EOL]     assertEquals(3, sb.lastIndexOf("b")); [EOL]     assertEquals("abab".lastIndexOf("b"), sb.lastIndexOf("b")); [EOL]     assertEquals(1, sb.lastIndexOf("ba")); [EOL]     assertEquals("abab".lastIndexOf("ba"), sb.lastIndexOf("ba")); [EOL]     assertEquals(-1, sb.lastIndexOf("z")); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null)); [EOL] } <line_num>: 1383,1404
@Test [EOL] public void testLastIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]     assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]     assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]     assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]     assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]     assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]     assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]     assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]     assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]     assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL] } <line_num>: 1406,1441
@Test [EOL] public void testIndexOf_StrMatcher() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]     assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'))); [EOL]     assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher())); [EOL]     assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d'))); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher())); [EOL]     assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]     sb.append(" A1 junction"); [EOL]     assertEquals(6, sb.indexOf(A_NUMBER_MATCHER)); [EOL] } <line_num>: 1444,1460
@Test [EOL] public void testIndexOf_StrMatcher_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.indexOf((StrMatcher) null, 2)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0)); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2)); [EOL]     assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20)); [EOL]     assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1)); [EOL]     assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0)); [EOL]     assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1)); [EOL]     assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2)); [EOL]     assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6)); [EOL]     assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2)); [EOL]     assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0)); [EOL]     assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0)); [EOL]     assertEquals(-1, sb.indexOf((StrMatcher) null, 0)); [EOL]     sb.append(" A1 junction with A2"); [EOL]     assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5)); [EOL]     assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6)); [EOL]     assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7)); [EOL]     assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22)); [EOL]     assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23)); [EOL]     assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24)); [EOL] } <line_num>: 1462,1500
@Test [EOL] public void testLastIndexOf_StrMatcher() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'))); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'))); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher())); [EOL]     assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d'))); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher())); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null)); [EOL]     sb.append(" A1 junction"); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER)); [EOL] } <line_num>: 1502,1518
@Test [EOL] public void testLastIndexOf_StrMatcher_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1)); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2)); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]     assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0)); [EOL]     assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1)); [EOL]     assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2)); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3)); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4)); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5)); [EOL]     assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0)); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2)); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4)); [EOL]     assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20)); [EOL]     assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0)); [EOL]     assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0)); [EOL]     sb.append(" A1 junction with A2"); [EOL]     assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5)); [EOL]     assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7)); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22)); [EOL]     assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); [EOL]     assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24)); [EOL] } <line_num>: 1520,1559
@Override [EOL] public int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd) { [EOL]     if (buffer[pos] == 'A') { [EOL]         pos++; [EOL]         if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') { [EOL]             return 2; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] } <line_num>: 1562,1571
@Test [EOL] public void testAsTokenizer() throws Exception { [EOL]     final StrBuilder b = new StrBuilder(); [EOL]     b.append("a b "); [EOL]     final StrTokenizer t = b.asTokenizer(); [EOL]     final String[] tokens1 = t.getTokenArray(); [EOL]     assertEquals(2, tokens1.length); [EOL]     assertEquals("a", tokens1[0]); [EOL]     assertEquals("b", tokens1[1]); [EOL]     assertEquals(2, t.size()); [EOL]     b.append("c d "); [EOL]     final String[] tokens2 = t.getTokenArray(); [EOL]     assertEquals(2, tokens2.length); [EOL]     assertEquals("a", tokens2[0]); [EOL]     assertEquals("b", tokens2[1]); [EOL]     assertEquals(2, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     t.reset(); [EOL]     final String[] tokens3 = t.getTokenArray(); [EOL]     assertEquals(4, tokens3.length); [EOL]     assertEquals("a", tokens3[0]); [EOL]     assertEquals("b", tokens3[1]); [EOL]     assertEquals("c", tokens3[2]); [EOL]     assertEquals("d", tokens3[3]); [EOL]     assertEquals(4, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     assertEquals("c", t.next()); [EOL]     assertEquals("d", t.next()); [EOL]     assertEquals("a b c d ", t.getContent()); [EOL] } <line_num>: 1575,1611
@Test [EOL] public void testAsReader() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("some text"); [EOL]     Reader reader = sb.asReader(); [EOL]     assertTrue(reader.ready()); [EOL]     final char[] buf = new char[40]; [EOL]     assertEquals(9, reader.read(buf)); [EOL]     assertEquals("some text", new String(buf, 0, 9)); [EOL]     assertEquals(-1, reader.read()); [EOL]     assertFalse(reader.ready()); [EOL]     assertEquals(0, reader.skip(2)); [EOL]     assertEquals(0, reader.skip(-1)); [EOL]     assertTrue(reader.markSupported()); [EOL]     reader = sb.asReader(); [EOL]     assertEquals('s', reader.read()); [EOL]     reader.mark(-1); [EOL]     char[] array = new char[3]; [EOL]     assertEquals(3, reader.read(array, 0, 3)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('m', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     reader.reset(); [EOL]     assertEquals(1, reader.read(array, 1, 1)); [EOL]     assertEquals('o', array[0]); [EOL]     assertEquals('o', array[1]); [EOL]     assertEquals('e', array[2]); [EOL]     assertEquals(2, reader.skip(2)); [EOL]     assertEquals(' ', reader.read()); [EOL]     assertTrue(reader.ready()); [EOL]     reader.close(); [EOL]     assertTrue(reader.ready()); [EOL]     reader = sb.asReader(); [EOL]     array = new char[3]; [EOL]     try { [EOL]         reader.read(array, -1, 0); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, -1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 100, 1); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, 0, 100); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     try { [EOL]         reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]         fail(); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]     } [EOL]     assertEquals(0, reader.read(array, 0, 0)); [EOL]     assertEquals(0, array[0]); [EOL]     assertEquals(0, array[1]); [EOL]     assertEquals(0, array[2]); [EOL]     reader.skip(9); [EOL]     assertEquals(-1, reader.read(array, 0, 1)); [EOL]     reader.reset(); [EOL]     array = new char[30]; [EOL]     assertEquals(9, reader.read(array, 0, 30)); [EOL] } <line_num>: 1614,1683
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] } <line_num>: 1686,1718
@Test [EOL] public void testEqualsIgnoreCase() { [EOL]     final StrBuilder sb1 = new StrBuilder(); [EOL]     final StrBuilder sb2 = new StrBuilder(); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]     assertTrue(sb2.equalsIgnoreCase(sb2)); [EOL]     sb1.append("abc"); [EOL]     assertFalse(sb1.equalsIgnoreCase(sb2)); [EOL]     sb2.append("ABC"); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]     sb2.clear().append("abc"); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]     assertTrue(sb2.equalsIgnoreCase(sb2)); [EOL]     sb2.clear().append("aBc"); [EOL]     assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL] } <line_num>: 1721,1742
@Test [EOL] public void testEquals() { [EOL]     final StrBuilder sb1 = new StrBuilder(); [EOL]     final StrBuilder sb2 = new StrBuilder(); [EOL]     assertTrue(sb1.equals(sb2)); [EOL]     assertTrue(sb1.equals(sb1)); [EOL]     assertTrue(sb2.equals(sb2)); [EOL]     assertTrue(sb1.equals((Object) sb2)); [EOL]     sb1.append("abc"); [EOL]     assertFalse(sb1.equals(sb2)); [EOL]     assertFalse(sb1.equals((Object) sb2)); [EOL]     sb2.append("ABC"); [EOL]     assertFalse(sb1.equals(sb2)); [EOL]     assertFalse(sb1.equals((Object) sb2)); [EOL]     sb2.clear().append("abc"); [EOL]     assertTrue(sb1.equals(sb2)); [EOL]     assertTrue(sb1.equals((Object) sb2)); [EOL]     assertFalse(sb1.equals(Integer.valueOf(1))); [EOL]     assertFalse(sb1.equals("abc")); [EOL] } <line_num>: 1745,1768
@Test [EOL] public void testHashCode() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final int hc1a = sb.hashCode(); [EOL]     final int hc1b = sb.hashCode(); [EOL]     assertEquals(0, hc1a); [EOL]     assertEquals(hc1a, hc1b); [EOL]     sb.append("abc"); [EOL]     final int hc2a = sb.hashCode(); [EOL]     final int hc2b = sb.hashCode(); [EOL]     assertTrue(hc2a != 0); [EOL]     assertEquals(hc2a, hc2b); [EOL] } <line_num>: 1771,1784
@Test [EOL] public void testToString() { [EOL]     final StrBuilder sb = new StrBuilder("abc"); [EOL]     assertEquals("abc", sb.toString()); [EOL] } <line_num>: 1787,1791
@Test [EOL] public void testToStringBuffer() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString()); [EOL]     sb.append("junit"); [EOL]     assertEquals(new StringBuffer("junit").toString(), sb.toStringBuffer().toString()); [EOL] } <line_num>: 1794,1801
@Test [EOL] public void testToStringBuilder() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString()); [EOL]     sb.append("junit"); [EOL]     assertEquals(new StringBuilder("junit").toString(), sb.toStringBuilder().toString()); [EOL] } <line_num>: 1804,1811
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] } <line_num>: 1814,1819
@Test [EOL] public void testIndexOfLang294() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertEquals(-1, sb.indexOf("three")); [EOL] } <line_num>: 1821,1826
@Test [EOL] public void testLang295() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertFalse("The contains(char) method is looking beyond the end of the string", sb.contains('h')); [EOL]     assertEquals("The indexOf(char) method is looking beyond the end of the string", -1, sb.indexOf('h')); [EOL] } <line_num>: 1829,1835
@Test [EOL] public void testLang412Right() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]     assertEquals("Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL] } <line_num>: 1838,1843
@Test [EOL] public void testLang412Left() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(null, 10, '*'); [EOL]     assertEquals("Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString()); [EOL] } <line_num>: 1845,1850
@Test [EOL] public void testAsBuilder() { [EOL]     final StrBuilder sb = new StrBuilder().appendAll("Lorem", " ", "ipsum", " ", "dolor"); [EOL]     assertEquals(sb.toString(), sb.build()); [EOL] } <line_num>: 1852,1856
