@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new SystemUtils()); [EOL]     final Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(SystemUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(SystemUtils.class.getModifiers())); [EOL] } <line_num>: 42,50
@Test [EOL] public void testGetJavaHome() { [EOL]     final File dir = SystemUtils.getJavaHome(); [EOL]     Assert.assertNotNull(dir); [EOL]     Assert.assertTrue(dir.exists()); [EOL] } <line_num>: 55,60
@Test [EOL] public void testGetJavaIoTmpDir() { [EOL]     final File dir = SystemUtils.getJavaIoTmpDir(); [EOL]     Assert.assertNotNull(dir); [EOL]     Assert.assertTrue(dir.exists()); [EOL] } <line_num>: 65,70
@Test [EOL] public void testGetUserDir() { [EOL]     final File dir = SystemUtils.getUserDir(); [EOL]     Assert.assertNotNull(dir); [EOL]     Assert.assertTrue(dir.exists()); [EOL] } <line_num>: 75,80
@Test [EOL] public void testGetUserHome() { [EOL]     final File dir = SystemUtils.getUserHome(); [EOL]     Assert.assertNotNull(dir); [EOL]     Assert.assertTrue(dir.exists()); [EOL] } <line_num>: 85,90
@Test [EOL] public void testIS_JAVA() { [EOL]     final String javaVersion = System.getProperty("java.version"); [EOL]     if (javaVersion == null) { [EOL]         assertFalse(SystemUtils.IS_JAVA_1_1); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_2); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_3); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_4); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_5); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_6); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_7); [EOL]     } else if (javaVersion.startsWith("1.1")) { [EOL]         assertTrue(SystemUtils.IS_JAVA_1_1); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_2); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_3); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_4); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_5); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_6); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_7); [EOL]     } else if (javaVersion.startsWith("1.2")) { [EOL]         assertFalse(SystemUtils.IS_JAVA_1_1); [EOL]         assertTrue(SystemUtils.IS_JAVA_1_2); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_3); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_4); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_5); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_6); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_7); [EOL]     } else if (javaVersion.startsWith("1.3")) { [EOL]         assertFalse(SystemUtils.IS_JAVA_1_1); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_2); [EOL]         assertTrue(SystemUtils.IS_JAVA_1_3); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_4); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_5); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_6); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_7); [EOL]     } else if (javaVersion.startsWith("1.4")) { [EOL]         assertFalse(SystemUtils.IS_JAVA_1_1); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_2); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_3); [EOL]         assertTrue(SystemUtils.IS_JAVA_1_4); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_5); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_6); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_7); [EOL]     } else if (javaVersion.startsWith("1.5")) { [EOL]         assertFalse(SystemUtils.IS_JAVA_1_1); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_2); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_3); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_4); [EOL]         assertTrue(SystemUtils.IS_JAVA_1_5); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_6); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_7); [EOL]     } else if (javaVersion.startsWith("1.6")) { [EOL]         assertFalse(SystemUtils.IS_JAVA_1_1); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_2); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_3); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_4); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_5); [EOL]         assertTrue(SystemUtils.IS_JAVA_1_6); [EOL]         assertFalse(SystemUtils.IS_JAVA_1_7); [EOL]     } else { [EOL]         System.out.println("Can't test IS_JAVA value: " + javaVersion); [EOL]     } [EOL] } <line_num>: 92,154
@Test [EOL] public void testIS_OS() { [EOL]     final String osName = System.getProperty("os.name"); [EOL]     if (osName == null) { [EOL]         assertFalse(SystemUtils.IS_OS_WINDOWS); [EOL]         assertFalse(SystemUtils.IS_OS_UNIX); [EOL]         assertFalse(SystemUtils.IS_OS_SOLARIS); [EOL]         assertFalse(SystemUtils.IS_OS_LINUX); [EOL]         assertFalse(SystemUtils.IS_OS_MAC_OSX); [EOL]     } else if (osName.startsWith("Windows")) { [EOL]         assertFalse(SystemUtils.IS_OS_UNIX); [EOL]         assertTrue(SystemUtils.IS_OS_WINDOWS); [EOL]     } else if (osName.startsWith("Solaris")) { [EOL]         assertTrue(SystemUtils.IS_OS_SOLARIS); [EOL]         assertTrue(SystemUtils.IS_OS_UNIX); [EOL]         assertFalse(SystemUtils.IS_OS_WINDOWS); [EOL]     } else if (osName.toLowerCase(Locale.ENGLISH).startsWith("linux")) { [EOL]         assertTrue(SystemUtils.IS_OS_LINUX); [EOL]         assertTrue(SystemUtils.IS_OS_UNIX); [EOL]         assertFalse(SystemUtils.IS_OS_WINDOWS); [EOL]     } else if (osName.startsWith("Mac OS X")) { [EOL]         assertTrue(SystemUtils.IS_OS_MAC_OSX); [EOL]         assertTrue(SystemUtils.IS_OS_UNIX); [EOL]         assertFalse(SystemUtils.IS_OS_WINDOWS); [EOL]     } else if (osName.startsWith("OS/2")) { [EOL]         assertTrue(SystemUtils.IS_OS_OS2); [EOL]         assertFalse(SystemUtils.IS_OS_UNIX); [EOL]         assertFalse(SystemUtils.IS_OS_WINDOWS); [EOL]     } else if (osName.startsWith("SunOS")) { [EOL]         assertTrue(SystemUtils.IS_OS_SUN_OS); [EOL]         assertTrue(SystemUtils.IS_OS_UNIX); [EOL]         assertFalse(SystemUtils.IS_OS_WINDOWS); [EOL]     } else if (osName.startsWith("FreeBSD")) { [EOL]         assertTrue(SystemUtils.IS_OS_FREE_BSD); [EOL]         assertTrue(SystemUtils.IS_OS_UNIX); [EOL]         assertFalse(SystemUtils.IS_OS_WINDOWS); [EOL]     } else { [EOL]         System.out.println("Can't test IS_OS value: " + osName); [EOL]     } [EOL] } <line_num>: 156,195
@Test [EOL] public void testJavaVersionMatches() { [EOL]     String javaVersion = null; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = ""; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.0"; [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.1"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.2"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.3.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.3.1"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.4.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.4.1"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.4.2"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.5.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.6.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     javaVersion = "1.7.0"; [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]     assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]     assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL] } <line_num>: 197,316
@Test [EOL] public void testOSMatchesName() { [EOL]     String osName = null; [EOL]     assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     osName = ""; [EOL]     assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     osName = "Windows 95"; [EOL]     assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     osName = "Windows NT"; [EOL]     assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     osName = "OS/2"; [EOL]     assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL] } <line_num>: 318,330
@Test [EOL] public void testOSMatchesNameAndVersion() { [EOL]     String osName = null; [EOL]     String osVersion = null; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = ""; [EOL]     osVersion = ""; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 95"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 95"; [EOL]     osVersion = "4.1"; [EOL]     assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 98"; [EOL]     osVersion = "4.1"; [EOL]     assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows NT"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "OS/2"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL] } <line_num>: 332,355
@Test [EOL] public void testJavaAwtHeadless() { [EOL]     final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]     final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]     final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]     assertNotNull(expectedStringValueWithDefault); [EOL]     if (atLeastJava14) { [EOL]         final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]         if (expectedStringValue != null) { [EOL]             assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]         } [EOL]         assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]     } else { [EOL]         assertNull(expectedStringValue); [EOL]         assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL]     assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL] } <line_num>: 357,375
