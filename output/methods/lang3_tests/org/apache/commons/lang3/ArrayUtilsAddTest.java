@Test [EOL] public void testJira567() { [EOL]     Number[] n; [EOL]     n = ArrayUtils.addAll(new Number[] { Integer.valueOf(1) }, new Long[] { Long.valueOf(2) }); [EOL]     assertEquals(2, n.length); [EOL]     assertEquals(Number.class, n.getClass().getComponentType()); [EOL]     try { [EOL]         n = ArrayUtils.addAll(new Integer[] { Integer.valueOf(1) }, new Long[] { Long.valueOf(2) }); [EOL]         fail("Should have generated IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException expected) { [EOL]     } [EOL] } <line_num>: 38,51
@Test [EOL] public void testAddObjectArrayBoolean() { [EOL]     boolean[] newArray; [EOL]     newArray = ArrayUtils.add((boolean[]) null, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, newArray)); [EOL]     assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((boolean[]) null, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, newArray)); [EOL]     assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); [EOL]     final boolean[] array1 = new boolean[] { true, false, true }; [EOL]     newArray = ArrayUtils.add(array1, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true, false }, newArray)); [EOL]     assertEquals(Boolean.TYPE, newArray.getClass().getComponentType()); [EOL] } <line_num>: 53,66
@Test [EOL] public void testAddObjectArrayByte() { [EOL]     byte[] newArray; [EOL]     newArray = ArrayUtils.add((byte[]) null, (byte) 0); [EOL]     assertTrue(Arrays.equals(new byte[] { 0 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((byte[]) null, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     final byte[] array1 = new byte[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (byte) 0); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (byte) 4); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL] } <line_num>: 68,84
@Test [EOL] public void testAddObjectArrayChar() { [EOL]     char[] newArray; [EOL]     newArray = ArrayUtils.add((char[]) null, (char) 0); [EOL]     assertTrue(Arrays.equals(new char[] { 0 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((char[]) null, (char) 1); [EOL]     assertTrue(Arrays.equals(new char[] { 1 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     final char[] array1 = new char[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (char) 0); [EOL]     assertTrue(Arrays.equals(new char[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (char) 4); [EOL]     assertTrue(Arrays.equals(new char[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL] } <line_num>: 86,102
@Test [EOL] public void testAddObjectArrayDouble() { [EOL]     double[] newArray; [EOL]     newArray = ArrayUtils.add((double[]) null, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 0 }, newArray)); [EOL]     assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((double[]) null, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, newArray)); [EOL]     assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]     final double[] array1 = new double[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL] } <line_num>: 104,120
@Test [EOL] public void testAddObjectArrayFloat() { [EOL]     float[] newArray; [EOL]     newArray = ArrayUtils.add((float[]) null, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 0 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((float[]) null, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     final float[] array1 = new float[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL] } <line_num>: 122,138
@Test [EOL] public void testAddObjectArrayInt() { [EOL]     int[] newArray; [EOL]     newArray = ArrayUtils.add((int[]) null, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 0 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((int[]) null, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     final int[] array1 = new int[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Integer.TYPE, newArray.getClass().getComponentType()); [EOL] } <line_num>: 140,156
@Test [EOL] public void testAddObjectArrayLong() { [EOL]     long[] newArray; [EOL]     newArray = ArrayUtils.add((long[]) null, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 0 }, newArray)); [EOL]     assertEquals(Long.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((long[]) null, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, newArray)); [EOL]     assertEquals(Long.TYPE, newArray.getClass().getComponentType()); [EOL]     final long[] array1 = new long[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Long.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Long.TYPE, newArray.getClass().getComponentType()); [EOL] } <line_num>: 158,174
@Test [EOL] public void testAddObjectArrayShort() { [EOL]     short[] newArray; [EOL]     newArray = ArrayUtils.add((short[]) null, (short) 0); [EOL]     assertTrue(Arrays.equals(new short[] { 0 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((short[]) null, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 1 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     final short[] array1 = new short[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (short) 0); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (short) 4); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL] } <line_num>: 176,192
@Test [EOL] public void testAddObjectArrayObject() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] newStringArray = ArrayUtils.add(null, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newStringArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newStringArray)); [EOL]     assertEquals(String.class, newStringArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     Number[] numberArray1 = new Number[] { Integer.valueOf(1), Double.valueOf(2) }; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Number[] { Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Number.class, newArray.getClass().getComponentType()); [EOL]     numberArray1 = null; [EOL]     newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(3) }, newArray)); [EOL]     assertEquals(Float.class, newArray.getClass().getComponentType()); [EOL] } <line_num>: 194,228
@Test [EOL] public void testLANG571() { [EOL]     final String[] stringArray = null; [EOL]     final String aString = null; [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final String[] sa = ArrayUtils.add(stringArray, 0, aString); [EOL]         fail("Should have caused IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 230,250
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] } <line_num>: 252,368
@Test [EOL] public void testAddObjectAtIndex() { [EOL]     Object[] newArray; [EOL]     newArray = ArrayUtils.add((Object[]) null, 0, "a"); [EOL]     assertTrue(Arrays.equals(new String[] { "a" }, newArray)); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]     assertTrue(Arrays.equals(new String[] { null, "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", null, "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "d" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final Object[] o = new Object[] { "1", "2", "4" }; [EOL]     final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]     final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]     assertNotNull(result); [EOL]     assertEquals(4, result.length); [EOL]     assertEquals("1", result[0]); [EOL]     assertEquals("2", result[1]); [EOL]     assertEquals("3", result[2]); [EOL]     assertEquals("4", result[3]); [EOL]     assertNotNull(result2); [EOL]     assertEquals(4, result2.length); [EOL]     assertEquals("1", result2[0]); [EOL]     assertEquals("2", result2[1]); [EOL]     assertEquals("4", result2[2]); [EOL]     assertEquals("5", result2[3]); [EOL]     boolean[] booleanArray = ArrayUtils.add(null, 0, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(null, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, booleanArray)); [EOL]     booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, booleanArray)); [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, 4, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         booleanArray = ArrayUtils.add(new boolean[] { true, false }, -1, true); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     char[] charArray = ArrayUtils.add((char[]) null, 0, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add((char[]) null, -1, 'a'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c'); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'a', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'k', 'b' }, charArray)); [EOL]     charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 't', 'b', 'c' }, charArray)); [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         charArray = ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add((short[]) null, -1, (short) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 10 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4); [EOL]     assertTrue(Arrays.equals(new short[] { -4, 2, 6 }, shortArray)); [EOL]     shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 6, 1, 3 }, shortArray)); [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         shortArray = ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add((byte[]) null, -1, (byte) 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 3 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 6 }, byteArray)); [EOL]     byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 6, 1, 3 }, byteArray)); [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         byteArray = ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add((int[]) null, -1, 2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 10 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4); [EOL]     assertTrue(Arrays.equals(new int[] { -4, 2, 6 }, intArray)); [EOL]     intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 6, 1, 3 }, intArray)); [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, 4, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         intArray = ArrayUtils.add(new int[] { 2, 6 }, -1, 10); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 1L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add((long[]) null, -1, 2L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 10L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L); [EOL]     assertTrue(Arrays.equals(new long[] { -4L, 2L, 6L }, longArray)); [EOL]     longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]     assertTrue(Arrays.equals(new long[] { 2L, 6L, 1L, 3L }, longArray)); [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         longArray = ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.2f, 1.1f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add((float[]) null, -1, 2.2f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]     assertTrue(Arrays.equals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray)); [EOL]     floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]     assertTrue(Arrays.equals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray)); [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL]     double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2); [EOL]     assertTrue(Arrays.equals(new double[] { 2.2, 1.1 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add((double[]) null, -1, 2.2); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]     } [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]     assertTrue(Arrays.equals(new double[] { 2.3, 6.4, 10.5 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]     assertTrue(Arrays.equals(new double[] { -4.8, 2.6, 6.7 }, doubleArray)); [EOL]     doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]     assertTrue(Arrays.equals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray)); [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]         assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]     } [EOL] } <line_num>: 370,610
