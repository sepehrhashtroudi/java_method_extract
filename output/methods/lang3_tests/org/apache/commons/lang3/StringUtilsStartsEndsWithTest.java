@Test [EOL] public void testStartsWith() { [EOL]     assertTrue("startsWith(null, null)", StringUtils.startsWith(null, (String) null)); [EOL]     assertFalse("startsWith(FOOBAR, null)", StringUtils.startsWith(FOOBAR, (String) null)); [EOL]     assertFalse("startsWith(null, FOO)", StringUtils.startsWith(null, FOO)); [EOL]     assertTrue("startsWith(FOOBAR, \"\")", StringUtils.startsWith(FOOBAR, "")); [EOL]     assertTrue("startsWith(foobar, foo)", StringUtils.startsWith(foobar, foo)); [EOL]     assertTrue("startsWith(FOOBAR, FOO)", StringUtils.startsWith(FOOBAR, FOO)); [EOL]     assertFalse("startsWith(foobar, FOO)", StringUtils.startsWith(foobar, FOO)); [EOL]     assertFalse("startsWith(FOOBAR, foo)", StringUtils.startsWith(FOOBAR, foo)); [EOL]     assertFalse("startsWith(foo, foobar)", StringUtils.startsWith(foo, foobar)); [EOL]     assertFalse("startsWith(foo, foobar)", StringUtils.startsWith(bar, foobar)); [EOL]     assertFalse("startsWith(foobar, bar)", StringUtils.startsWith(foobar, bar)); [EOL]     assertFalse("startsWith(FOOBAR, BAR)", StringUtils.startsWith(FOOBAR, BAR)); [EOL]     assertFalse("startsWith(foobar, BAR)", StringUtils.startsWith(foobar, BAR)); [EOL]     assertFalse("startsWith(FOOBAR, bar)", StringUtils.startsWith(FOOBAR, bar)); [EOL] } <line_num>: 41,60
@Test [EOL] public void testStartsWithIgnoreCase() { [EOL]     assertTrue("startsWithIgnoreCase(null, null)", StringUtils.startsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("startsWithIgnoreCase(null, FOO)", StringUtils.startsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); [EOL]     assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); [EOL]     assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); [EOL]     assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); [EOL] } <line_num>: 65,84
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] } <line_num>: 86,98
@Test [EOL] public void testEndsWith() { [EOL]     assertTrue("endsWith(null, null)", StringUtils.endsWith(null, (String) null)); [EOL]     assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String) null)); [EOL]     assertFalse("endsWith(null, FOO)", StringUtils.endsWith(null, FOO)); [EOL]     assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); [EOL]     assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); [EOL]     assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); [EOL]     assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); [EOL]     assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); [EOL]     assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); [EOL]     assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); [EOL]     assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); [EOL]     assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); [EOL]     assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B4")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)", StringUtils.endsWith("\u03B1\u03B2\u03B3\u03B4", "\u03B3\u0394")); [EOL] } <line_num>: 104,130
@Test [EOL] public void testEndsWithIgnoreCase() { [EOL]     assertTrue("endsWithIgnoreCase(null, null)", StringUtils.endsWithIgnoreCase(null, (String) null)); [EOL]     assertFalse("endsWithIgnoreCase(FOOBAR, null)", StringUtils.endsWithIgnoreCase(FOOBAR, (String) null)); [EOL]     assertFalse("endsWithIgnoreCase(null, FOO)", StringUtils.endsWithIgnoreCase(null, FOO)); [EOL]     assertTrue("endsWithIgnoreCase(FOOBAR, \"\")", StringUtils.endsWithIgnoreCase(FOOBAR, "")); [EOL]     assertFalse("endsWithIgnoreCase(foobar, foo)", StringUtils.endsWithIgnoreCase(foobar, foo)); [EOL]     assertFalse("endsWithIgnoreCase(FOOBAR, FOO)", StringUtils.endsWithIgnoreCase(FOOBAR, FOO)); [EOL]     assertFalse("endsWithIgnoreCase(foobar, FOO)", StringUtils.endsWithIgnoreCase(foobar, FOO)); [EOL]     assertFalse("endsWithIgnoreCase(FOOBAR, foo)", StringUtils.endsWithIgnoreCase(FOOBAR, foo)); [EOL]     assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(foo, foobar)); [EOL]     assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(bar, foobar)); [EOL]     assertTrue("endsWithIgnoreCase(foobar, bar)", StringUtils.endsWithIgnoreCase(foobar, bar)); [EOL]     assertTrue("endsWithIgnoreCase(FOOBAR, BAR)", StringUtils.endsWithIgnoreCase(FOOBAR, BAR)); [EOL]     assertTrue("endsWithIgnoreCase(foobar, BAR)", StringUtils.endsWithIgnoreCase(foobar, BAR)); [EOL]     assertTrue("endsWithIgnoreCase(FOOBAR, bar)", StringUtils.endsWithIgnoreCase(FOOBAR, bar)); [EOL]     assertTrue(StringUtils.endsWithIgnoreCase("abcdef", "def")); [EOL]     assertTrue(StringUtils.endsWithIgnoreCase("ABCDEF", "def")); [EOL]     assertFalse(StringUtils.endsWithIgnoreCase("ABCDEF", "cde")); [EOL]     assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u0394)", StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0394")); [EOL]     assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u0393)", StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0393")); [EOL] } <line_num>: 135,166
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] } <line_num>: 168,180
