@Test [EOL] public void testRemoveAllObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeAll(new Object[] { "a" }, 0); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b" }, 0, 1); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c" }, 1, 2); [EOL]     assertArrayEquals(new Object[] { "a" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 1, 2); [EOL]     assertArrayEquals(new Object[] { "a", "d" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 3); [EOL]     assertArrayEquals(new Object[] { "b", "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d", "e" }, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c", "e" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d", "e" }, 0, 2, 4); [EOL]     assertArrayEquals(new Object[] { "b", "d" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 0, 1, 3, 0, 1, 3); [EOL]     assertArrayEquals(new Object[] { "c" }, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 2, 1, 0, 3); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new Object[] { "a", "b", "c", "d" }, 2, 0, 1, 3, 0, 2, 1, 3); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] } <line_num>: 37,73
@Test [EOL] public void testRemoveAllObjectArrayRemoveNone() { [EOL]     final Object[] array1 = new Object[] { "foo", "bar", "baz" }; [EOL]     final Object[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(Object.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 75,82
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllObjectArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new Object[] { "a", "b" }, -1); [EOL] } <line_num>: 84,87
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllObjectArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new Object[] { "a", "b" }, 2); [EOL] } <line_num>: 89,92
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullObjectArray() { [EOL]     ArrayUtils.remove((Object[]) null, 0); [EOL] } <line_num>: 94,97
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] } <line_num>: 99,123
@Test [EOL] public void testRemoveAllBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.removeAll(new boolean[] { true }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false }, 0); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, true }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 0, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 0, 2); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 1, 2); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 1, 3); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 1, 3, 4); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, false, false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 0, 1, 2); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true, false, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 125,171
@Test [EOL] public void testRemoveAllBooleanArrayRemoveNone() { [EOL]     final boolean[] array1 = new boolean[] { true, false }; [EOL]     final boolean[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertTrue(Arrays.equals(array1, array2)); [EOL]     assertEquals(boolean.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 173,180
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllBooleanArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new boolean[] { true, false }, -1); [EOL] } <line_num>: 182,185
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllBooleanArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new boolean[] { true, false }, 2); [EOL] } <line_num>: 187,190
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] } <line_num>: 192,195
@Test [EOL] public void testRemoveAllByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeAll(new byte[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 3 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 4 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 197,237
@Test [EOL] public void testRemoveAllByteArrayRemoveNone() { [EOL]     final byte[] array1 = new byte[] { 1, 2 }; [EOL]     final byte[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(byte.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 239,246
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, -1); [EOL] } <line_num>: 248,251
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllByteArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new byte[] { 1, 2 }, 2); [EOL] } <line_num>: 253,256
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullByteArray() { [EOL]     ArrayUtils.removeAll((byte[]) null, 0); [EOL] } <line_num>: 258,261
@Test [EOL] public void testRemoveAllCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.removeAll(new char[] { 'a' }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 0, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 1, 2); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 0, 2); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e' }, 1, 3); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c', 'e' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e' }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'd' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c', 'e', 'g' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'd', 'f' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 263,303
@Test [EOL] public void testRemoveAllCharArrayRemoveNone() { [EOL]     final char[] array1 = new char[] { 'a', 'b' }; [EOL]     final char[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(char.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 305,312
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllCharArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new char[] { 'a', 'b' }, -1); [EOL] } <line_num>: 314,317
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllCharArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new char[] { 'a', 'b' }, 2); [EOL] } <line_num>: 319,322
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullCharArray() { [EOL]     ArrayUtils.removeAll((char[]) null, 0); [EOL] } <line_num>: 324,327
@Test [EOL] public void testRemoveAllDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeAll(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 3 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 329,369
@Test [EOL] public void testRemoveAllDoubleArrayRemoveNone() { [EOL]     final double[] array1 = new double[] { 1, 2 }; [EOL]     final double[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertTrue(Arrays.equals(array1, array2)); [EOL]     assertEquals(double.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 371,378
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllDoubleArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new double[] { 1, 2 }, -1); [EOL] } <line_num>: 380,383
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllDoubleArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new double[] { 1, 2 }, 2); [EOL] } <line_num>: 385,388
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullDoubleArray() { [EOL]     ArrayUtils.removeAll((double[]) null, 0); [EOL] } <line_num>: 390,393
@Test [EOL] public void testRemoveAllFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.removeAll(new float[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new float[] { 3 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 4 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new float[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 395,435
@Test [EOL] public void testRemoveAllFloatArrayRemoveNone() { [EOL]     final float[] array1 = new float[] { 1, 2 }; [EOL]     final float[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertTrue(Arrays.equals(array1, array2)); [EOL]     assertEquals(float.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 437,444
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, -1); [EOL] } <line_num>: 446,449
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL] } <line_num>: 451,454
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullFloatArray() { [EOL]     ArrayUtils.removeAll((float[]) null, 0); [EOL] } <line_num>: 456,459
@Test [EOL] public void testRemoveAllIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeAll(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.EMPTY_INT_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     array = ArrayUtils.removeAll(new int[] { 1 }, ArrayUtils.EMPTY_INT_ARRAY); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     array = ArrayUtils.removeAll(new int[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 3 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 4 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 461,505
@Test [EOL] public void testRemoveAllIntArrayRemoveNone() { [EOL]     final int[] array1 = new int[] { 1, 2 }; [EOL]     final int[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(int.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 507,514
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllIntArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new int[] { 1, 2 }, -1); [EOL] } <line_num>: 516,519
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllIntArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new int[] { 1, 2 }, 2); [EOL] } <line_num>: 521,524
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullIntArray() { [EOL]     ArrayUtils.removeAll((int[]) null, 0); [EOL] } <line_num>: 526,529
@Test [EOL] public void testRemoveAllLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeAll(new long[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new long[] { 3 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 531,571
@Test [EOL] public void testRemoveAllLongArrayRemoveNone() { [EOL]     final long[] array1 = new long[] { 1, 2 }; [EOL]     final long[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(long.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 573,580
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllLongArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new long[] { 1, 2 }, -1); [EOL] } <line_num>: 582,585
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllLongArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new long[] { 1, 2 }, 2); [EOL] } <line_num>: 587,590
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullLongArray() { [EOL]     ArrayUtils.removeAll((long[]) null, 0); [EOL] } <line_num>: 592,595
@Test [EOL] public void testRemoveAllShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeAll(new short[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2 }, 0, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 0, 1); [EOL]     assertTrue(Arrays.equals(new short[] { 3 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 0, 2); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 3, 5 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 4 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]     assertTrue(Arrays.equals(new short[] { 1, 3, 5, 7 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 4, 6 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 597,637
@Test [EOL] public void testRemoveAllShortArrayRemoveNone() { [EOL]     final short[] array1 = new short[] { 1, 2 }; [EOL]     final short[] array2 = ArrayUtils.removeAll(array1); [EOL]     assertNotSame(array1, array2); [EOL]     assertArrayEquals(array1, array2); [EOL]     assertEquals(short.class, array2.getClass().getComponentType()); [EOL] } <line_num>: 639,646
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllShortArrayNegativeIndex() { [EOL]     ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0); [EOL] } <line_num>: 648,651
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllShortArrayOutOfBoundsIndex() { [EOL]     ArrayUtils.removeAll(new short[] { 1, 2 }, 2, 0); [EOL] } <line_num>: 653,656
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullShortArray() { [EOL]     ArrayUtils.removeAll((short[]) null, 0); [EOL] } <line_num>: 658,661
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] } <line_num>: 663,704
@Test [EOL] public void testRemoveElementBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((boolean[]) null, true, false); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true, false); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true }, true, false); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false }, true, false); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false }, true, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true, true, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 706,747
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElements((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((byte[]) null, (byte) 1, (byte) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1, (byte) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1, (byte) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1, (byte) 1, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 749,790
@Test [EOL] public void testRemoveElementCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((char[]) null, 'a', 'b'); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a', 'b'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a' }, 'a', 'b'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'b'); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'b'); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a', 'a', 'a'); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 792,833
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 835,877
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementFloatArray() { [EOL]     float[] array; [EOL]     array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((float[]) null, (float) 1, (float) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 2); [EOL]     assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1, (float) 1, (float) 1); [EOL]     assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]     assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 879,921
@Test [EOL] public void testRemoveElementIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((int[]) null, 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 923,964
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 966,1008
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2); [EOL]     assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] } <line_num>: 1010,1051
