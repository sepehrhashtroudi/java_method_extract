@Test [EOL] public void testConstructable() { [EOL]     new EnumUtils(); [EOL] } <line_num>: 40,44
@Test [EOL] public void test_getEnumMap() { [EOL]     final Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class); [EOL]     assertEquals("getEnumMap not created correctly", "{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString()); [EOL]     assertEquals(3, test.size()); [EOL]     assertTrue(test.containsKey("RED")); [EOL]     assertEquals(Traffic.RED, test.get("RED")); [EOL]     assertTrue(test.containsKey("AMBER")); [EOL]     assertEquals(Traffic.AMBER, test.get("AMBER")); [EOL]     assertTrue(test.containsKey("GREEN")); [EOL]     assertEquals(Traffic.GREEN, test.get("GREEN")); [EOL]     assertFalse(test.containsKey("PURPLE")); [EOL] } <line_num>: 46,58
@Test [EOL] public void test_getEnumList() { [EOL]     final List<Traffic> test = EnumUtils.getEnumList(Traffic.class); [EOL]     assertEquals(3, test.size()); [EOL]     assertEquals(Traffic.RED, test.get(0)); [EOL]     assertEquals(Traffic.AMBER, test.get(1)); [EOL]     assertEquals(Traffic.GREEN, test.get(2)); [EOL] } <line_num>: 60,67
@Test [EOL] public void test_isEnum() { [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "RED")); [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "AMBER")); [EOL]     assertTrue(EnumUtils.isValidEnum(Traffic.class, "GREEN")); [EOL]     assertFalse(EnumUtils.isValidEnum(Traffic.class, "PURPLE")); [EOL]     assertFalse(EnumUtils.isValidEnum(Traffic.class, null)); [EOL] } <line_num>: 69,76
@Test(expected = NullPointerException.class) [EOL] public void test_isEnum_nullClass() { [EOL]     EnumUtils.isValidEnum((Class<Traffic>) null, "PURPLE"); [EOL] } <line_num>: 78,81
@Test [EOL] public void test_getEnum() { [EOL]     assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); [EOL]     assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); [EOL]     assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); [EOL]     assertEquals(null, EnumUtils.getEnum(Traffic.class, "PURPLE")); [EOL]     assertEquals(null, EnumUtils.getEnum(Traffic.class, null)); [EOL] } <line_num>: 83,90
@Test(expected = NullPointerException.class) [EOL] public void test_getEnum_nullClass() { [EOL]     EnumUtils.getEnum((Class<Traffic>) null, "PURPLE"); [EOL] } <line_num>: 92,95
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullClass() { [EOL]     EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED)); [EOL] } <line_num>: 97,100
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClass() { [EOL]     EnumUtils.generateBitVectors(null, EnumSet.of(Traffic.RED)); [EOL] } <line_num>: 102,105
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullIterable() { [EOL]     EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL] } <line_num>: 107,110
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullIterable() { [EOL]     EnumUtils.generateBitVectors(null, (Iterable<Traffic>) null); [EOL] } <line_num>: 112,115
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVector_nullElement() { [EOL]     EnumUtils.generateBitVector(Traffic.class, Arrays.asList(Traffic.RED, null)); [EOL] } <line_num>: 117,120
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVectors_nullElement() { [EOL]     EnumUtils.generateBitVectors(Traffic.class, Arrays.asList(Traffic.RED, null)); [EOL] } <line_num>: 122,125
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullClassWithArray() { [EOL]     EnumUtils.generateBitVector(null, Traffic.RED); [EOL] } <line_num>: 127,130
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullClassWithArray() { [EOL]     EnumUtils.generateBitVectors(null, Traffic.RED); [EOL] } <line_num>: 132,135
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullArray() { [EOL]     EnumUtils.generateBitVector(Traffic.class, (Traffic[]) null); [EOL] } <line_num>: 137,140
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVectors_nullArray() { [EOL]     EnumUtils.generateBitVectors(Traffic.class, (Traffic[]) null); [EOL] } <line_num>: 142,145
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVector_nullArrayElement() { [EOL]     EnumUtils.generateBitVector(Traffic.class, Traffic.RED, null); [EOL] } <line_num>: 147,150
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVectors_nullArrayElement() { [EOL]     EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null); [EOL] } <line_num>: 152,155
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVector_longClass() { [EOL]     EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1)); [EOL] } <line_num>: 157,160
@Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVector_longClassWithArray() { [EOL]     EnumUtils.generateBitVector(TooMany.class, TooMany.A1); [EOL] } <line_num>: 162,165
@SuppressWarnings("unchecked") [EOL] @Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVector_nonEnumClass() { [EOL]     @SuppressWarnings("rawtypes") [EOL]     final Class rawType = Object.class; [EOL]     @SuppressWarnings("rawtypes") [EOL]     final List rawList = new ArrayList(); [EOL]     EnumUtils.generateBitVector(rawType, rawList); [EOL] } <line_num>: 167,177
@SuppressWarnings("unchecked") [EOL] @Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVectors_nonEnumClass() { [EOL]     @SuppressWarnings("rawtypes") [EOL]     final Class rawType = Object.class; [EOL]     @SuppressWarnings("rawtypes") [EOL]     final List rawList = new ArrayList(); [EOL]     EnumUtils.generateBitVectors(rawType, rawList); [EOL] } <line_num>: 179,189
@SuppressWarnings("unchecked") [EOL] @Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVector_nonEnumClassWithArray() { [EOL]     @SuppressWarnings("rawtypes") [EOL]     final Class rawType = Object.class; [EOL]     EnumUtils.generateBitVector(rawType); [EOL] } <line_num>: 191,198
@SuppressWarnings("unchecked") [EOL] @Test(expected = IllegalArgumentException.class) [EOL] public void test_generateBitVectors_nonEnumClassWithArray() { [EOL]     @SuppressWarnings("rawtypes") [EOL]     final Class rawType = Object.class; [EOL]     EnumUtils.generateBitVectors(rawType); [EOL] } <line_num>: 200,207
@Test [EOL] public void test_generateBitVector() { [EOL]     assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class))); [EOL]     assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED))); [EOL]     assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER))); [EOL]     assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN))); [EOL]     assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER))); [EOL]     assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN))); [EOL]     assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN))); [EOL]     assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN))); [EOL] } <line_num>: 209,219
@Test [EOL] public void test_generateBitVectors() { [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L); [EOL] } <line_num>: 221,231
@Test [EOL] public void test_generateBitVectorFromArray() { [EOL]     assertEquals(0L, EnumUtils.generateBitVector(Traffic.class)); [EOL]     assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED)); [EOL]     assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER)); [EOL]     assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, Traffic.GREEN)); [EOL]     assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER)); [EOL]     assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.GREEN)); [EOL]     assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER, Traffic.GREEN)); [EOL]     assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN)); [EOL]     assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN)); [EOL] } <line_num>: 233,245
@Test [EOL] public void test_generateBitVectorsFromArray() { [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L); [EOL] } <line_num>: 247,259
private void assertArrayEquals(final long[] actual, final long... expected) { [EOL]     Assert.assertArrayEquals(expected, actual); [EOL] } <line_num>: 261,263
@Test(expected = NullPointerException.class) [EOL] public void test_processBitVector_nullClass() { [EOL]     final Class<Traffic> empty = null; [EOL]     EnumUtils.processBitVector(empty, 0L); [EOL] } <line_num>: 265,269
@Test(expected = NullPointerException.class) [EOL] public void test_processBitVectors_nullClass() { [EOL]     final Class<Traffic> empty = null; [EOL]     EnumUtils.processBitVectors(empty, 0L); [EOL] } <line_num>: 271,275
@Test [EOL] public void test_processBitVector() { [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); [EOL] } <line_num>: 277,287
@Test [EOL] public void test_processBitVectors() { [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 7L)); [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 0L, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 7L)); [EOL]     assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 666L, 0L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 666L, 1L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 2L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 3L)); [EOL]     assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 4L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 5L)); [EOL]     assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 6L)); [EOL]     assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 7L)); [EOL] } <line_num>: 289,318
@Test(expected = IllegalArgumentException.class) [EOL] public void test_processBitVector_longClass() { [EOL]     EnumUtils.processBitVector(TooMany.class, 0L); [EOL] } <line_num>: 320,323
public void test_processBitVectors_longClass() { [EOL]     assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L)); [EOL]     assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 1L)); [EOL]     assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 2L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 3L)); [EOL]     assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 4L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 5L)); [EOL]     assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 6L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 7L)); [EOL]     assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L, 0L)); [EOL]     assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 0L, 1L)); [EOL]     assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 2L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 3L)); [EOL]     assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 4L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 5L)); [EOL]     assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 6L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L)); [EOL]     assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 0L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 1L)); [EOL]     assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 2L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 3L)); [EOL]     assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 4L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 5L)); [EOL]     assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 6L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 7L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 7L)); [EOL]     assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 0L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 1L)); [EOL]     assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 2L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 3L)); [EOL]     assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 4L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 5L)); [EOL]     assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 6L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 7L)); [EOL]     assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 7L)); [EOL] } <line_num>: 325,365
