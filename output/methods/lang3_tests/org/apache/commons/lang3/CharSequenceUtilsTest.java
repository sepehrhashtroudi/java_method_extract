@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new CharSequenceUtils()); [EOL]     final Constructor<?>[] cons = CharSequenceUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(CharSequenceUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(CharSequenceUtils.class.getModifiers())); [EOL] } <line_num>: 39,47
@Test [EOL] public void testSubSequence() { [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0)); [EOL]     Assert.assertEquals("012", CharSequenceUtils.subSequence("012", 0)); [EOL]     Assert.assertEquals("12", CharSequenceUtils.subSequence("012", 1)); [EOL]     Assert.assertEquals("2", CharSequenceUtils.subSequence("012", 2)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3)); [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] } <line_num>: 50,81
