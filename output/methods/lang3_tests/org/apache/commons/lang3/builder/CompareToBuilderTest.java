public TestObject(final int a) { [EOL]     this.a = a; [EOL] } <line_num>: 37,39
public TestSubObject() { [EOL]     super(0); [EOL] } <line_num>: 72,74
public TestSubObject(final int a, final int b) { [EOL]     super(a); [EOL]     this.b = b; [EOL] } <line_num>: 75,78
public TestTransientSubObject(final int a, final int t) { [EOL]     super(a); [EOL]     this.t = t; [EOL] } <line_num>: 95,98
@Override [EOL] public boolean equals(final Object o) { [EOL]     if (o == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(o instanceof TestObject)) { [EOL]         return false; [EOL]     } [EOL]     final TestObject rhs = (TestObject) o; [EOL]     return a == rhs.a; [EOL] } <line_num>: 40,50
@Override [EOL] public int hashCode() { [EOL]     return a; [EOL] } <line_num>: 52,55
public void setA(final int a) { [EOL]     this.a = a; [EOL] } <line_num>: 57,59
public int getA() { [EOL]     return a; [EOL] } <line_num>: 61,63
@Override [EOL] public int compareTo(final TestObject rhs) { [EOL]     return a < rhs.a ? -1 : a > rhs.a ? +1 : 0; [EOL] } <line_num>: 64,67
@Override [EOL] public boolean equals(final Object o) { [EOL]     if (o == this) { [EOL]         return true; [EOL]     } [EOL]     if (!(o instanceof TestSubObject)) { [EOL]         return false; [EOL]     } [EOL]     final TestSubObject rhs = (TestSubObject) o; [EOL]     return super.equals(o) && b == rhs.b; [EOL] } <line_num>: 79,89
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] } <line_num>: 101,110
@Test(expected = NullPointerException.class) [EOL] public void testReflectionCompareEx1() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     CompareToBuilder.reflectionCompare(o1, null); [EOL] } <line_num>: 112,116
@Test(expected = ClassCastException.class) [EOL] public void testReflectionCompareEx2() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final Object o2 = new Object(); [EOL]     CompareToBuilder.reflectionCompare(o1, o2); [EOL] } <line_num>: 118,123
@Test [EOL] public void testReflectionHierarchyCompare() { [EOL]     testReflectionHierarchyCompare(false, null); [EOL] } <line_num>: 125,128
@Test [EOL] public void testReflectionHierarchyCompareExcludeFields() { [EOL]     final String[] excludeFields = new String[] { "b" }; [EOL]     testReflectionHierarchyCompare(true, excludeFields); [EOL]     TestSubObject x; [EOL]     TestSubObject y; [EOL]     TestSubObject z; [EOL]     x = new TestSubObject(1, 1); [EOL]     y = new TestSubObject(2, 1); [EOL]     z = new TestSubObject(3, 1); [EOL]     assertXYZCompareOrder(x, y, z, true, excludeFields); [EOL]     x = new TestSubObject(1, 3); [EOL]     y = new TestSubObject(2, 2); [EOL]     z = new TestSubObject(3, 1); [EOL]     assertXYZCompareOrder(x, y, z, true, excludeFields); [EOL] } <line_num>: 130,148
@Test [EOL] public void testReflectionHierarchyCompareTransients() { [EOL]     testReflectionHierarchyCompare(true, null); [EOL]     TestTransientSubObject x; [EOL]     TestTransientSubObject y; [EOL]     TestTransientSubObject z; [EOL]     x = new TestTransientSubObject(1, 1); [EOL]     y = new TestTransientSubObject(2, 2); [EOL]     z = new TestTransientSubObject(3, 3); [EOL]     assertXYZCompareOrder(x, y, z, true, null); [EOL]     x = new TestTransientSubObject(1, 1); [EOL]     y = new TestTransientSubObject(1, 2); [EOL]     z = new TestTransientSubObject(1, 3); [EOL]     assertXYZCompareOrder(x, y, z, true, null); [EOL] } <line_num>: 150,167
private void assertXYZCompareOrder(final Object x, final Object y, final Object z, final boolean testTransients, final String[] excludeFields) { [EOL]     assertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients, null, excludeFields)); [EOL]     assertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients, null, excludeFields)); [EOL]     assertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients, null, excludeFields)); [EOL]     assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields)); [EOL]     assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields)); [EOL]     assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields)); [EOL]     assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients, null, excludeFields)); [EOL]     assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients, null, excludeFields)); [EOL]     assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields)); [EOL] } <line_num>: 169,181
private void testReflectionHierarchyCompare(final boolean testTransients, final String[] excludeFields) { [EOL]     final TestObject to1 = new TestObject(1); [EOL]     final TestObject to2 = new TestObject(2); [EOL]     final TestObject to3 = new TestObject(3); [EOL]     final TestSubObject tso1 = new TestSubObject(1, 1); [EOL]     final TestSubObject tso2 = new TestSubObject(2, 2); [EOL]     final TestSubObject tso3 = new TestSubObject(3, 3); [EOL]     assertReflectionCompareContract(to1, to1, to1, false, excludeFields); [EOL]     assertReflectionCompareContract(to1, to2, to3, false, excludeFields); [EOL]     assertReflectionCompareContract(tso1, tso1, tso1, false, excludeFields); [EOL]     assertReflectionCompareContract(tso1, tso2, tso3, false, excludeFields); [EOL]     assertReflectionCompareContract("1", "2", "3", false, excludeFields); [EOL]     assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients)); [EOL]     assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients)); [EOL]     assertXYZCompareOrder(to1, to2, to3, true, null); [EOL]     assertXYZCompareOrder(tso1, tso2, tso3, true, null); [EOL] } <line_num>: 183,204
private void assertReflectionCompareContract(final Object x, final Object y, final Object z, final boolean testTransients, final String[] excludeFields) { [EOL]     assertTrue(reflectionCompareSignum(x, y, testTransients, excludeFields) == -reflectionCompareSignum(y, x, testTransients, excludeFields)); [EOL]     if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) > 0 && CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields) > 0) { [EOL]         assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields) > 0); [EOL]     } [EOL]     if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) == 0) { [EOL]         assertTrue(reflectionCompareSignum(x, z, testTransients, excludeFields) == -reflectionCompareSignum(y, z, testTransients, excludeFields)); [EOL]     } [EOL]     assertTrue(CompareToBuilder.reflectionCompare(x, y, testTransients) == 0 == EqualsBuilder.reflectionEquals(x, y, testTransients)); [EOL] } <line_num>: 215,233
private int reflectionCompareSignum(final Object lhs, final Object rhs, final boolean testTransients, final String[] excludeFields) { [EOL]     return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs, rhs, testTransients)).signum(); [EOL] } <line_num>: 245,247
@Test [EOL] public void testAppendSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL] } <line_num>: 249,262
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0); [EOL] } <line_num>: 264,277
@Test [EOL] public void testObjectBuild() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]     assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); [EOL]     assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build()); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0); [EOL] } <line_num>: 279,292
@Test(expected = ClassCastException.class) [EOL] public void testObjectEx2() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final Object o2 = new Object(); [EOL]     new CompareToBuilder().append(o1, o2); [EOL] } <line_num>: 294,299
@Test [EOL] public void testObjectComparator() { [EOL]     final String o1 = "Fred"; [EOL]     String o2 = "Fred"; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]     o2 = "FRED"; [EOL]     assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]     o2 = "FREDA"; [EOL]     assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0); [EOL] } <line_num>: 301,317
@Test [EOL] public void testObjectComparatorNull() { [EOL]     final String o1 = "Fred"; [EOL]     String o2 = "Fred"; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1, null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() == 0); [EOL]     o2 = "Zebra"; [EOL]     assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object) null, (Object) null, null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0); [EOL] } <line_num>: 319,332
@Test [EOL] public void testLong() { [EOL]     final long o1 = 1L; [EOL]     final long o2 = 2L; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0); [EOL] } <line_num>: 334,345
@Test [EOL] public void testInt() { [EOL]     final int o1 = 1; [EOL]     final int o2 = 2; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0); [EOL] } <line_num>: 347,358
@Test [EOL] public void testShort() { [EOL]     final short o1 = 1; [EOL]     final short o2 = 2; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0); [EOL] } <line_num>: 360,371
@Test [EOL] public void testChar() { [EOL]     final char o1 = 1; [EOL]     final char o2 = 2; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0); [EOL] } <line_num>: 373,384
@Test [EOL] public void testByte() { [EOL]     final byte o1 = 1; [EOL]     final byte o2 = 2; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0); [EOL] } <line_num>: 386,397
@Test [EOL] public void testDouble() { [EOL]     final double o1 = 1; [EOL]     final double o2 = 2; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0); [EOL] } <line_num>: 399,418
@Test [EOL] public void testFloat() { [EOL]     final float o1 = 1; [EOL]     final float o2 = 2; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0); [EOL] } <line_num>: 420,439
@Test [EOL] public void testBoolean() { [EOL]     final boolean o1 = true; [EOL]     final boolean o2 = false; [EOL]     assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0); [EOL] } <line_num>: 441,449
@Test [EOL] public void testObjectArray() { [EOL]     final TestObject[] obj1 = new TestObject[2]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     final TestObject[] obj2 = new TestObject[2]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     final TestObject[] obj3 = new TestObject[3]; [EOL]     obj3[0] = new TestObject(4); [EOL]     obj3[1] = new TestObject(5); [EOL]     obj3[2] = new TestObject(6); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 451,476
@Test [EOL] public void testLongArray() { [EOL]     final long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     final long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     final long[] obj3 = new long[3]; [EOL]     obj3[0] = 5L; [EOL]     obj3[1] = 6L; [EOL]     obj3[2] = 7L; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((long[]) null, (long[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 478,503
@Test [EOL] public void testIntArray() { [EOL]     final int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final int[] obj3 = new int[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 505,530
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 532,557
@Test [EOL] public void testCharArray() { [EOL]     final char[] obj1 = new char[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final char[] obj2 = new char[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final char[] obj3 = new char[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 559,584
@Test [EOL] public void testByteArray() { [EOL]     final byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final byte[] obj3 = new byte[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 586,611
@Test [EOL] public void testDoubleArray() { [EOL]     final double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final double[] obj3 = new double[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 613,638
@Test [EOL] public void testFloatArray() { [EOL]     final float[] obj1 = new float[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final float[] obj2 = new float[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final float[] obj3 = new float[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((float[]) null, (float[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 640,665
@Test [EOL] public void testBooleanArray() { [EOL]     final boolean[] obj1 = new boolean[2]; [EOL]     obj1[0] = true; [EOL]     obj1[1] = false; [EOL]     final boolean[] obj2 = new boolean[2]; [EOL]     obj2[0] = true; [EOL]     obj2[1] = false; [EOL]     final boolean[] obj3 = new boolean[3]; [EOL]     obj3[0] = true; [EOL]     obj3[1] = false; [EOL]     obj3[2] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] } <line_num>: 667,692
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     final long[][] array3 = new long[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 694,716
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 718,740
@Test [EOL] public void testMultiShortArray() { [EOL]     final short[][] array1 = new short[2][2]; [EOL]     final short[][] array2 = new short[2][2]; [EOL]     final short[][] array3 = new short[2][3]; [EOL]     for (short i = 0; i < array1.length; ++i) { [EOL]         for (short j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (short) ((i + 1) * (j + 1)); [EOL]             array2[i][j] = (short) ((i + 1) * (j + 1)); [EOL]             array3[i][j] = (short) ((i + 1) * (j + 1)); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 742,764
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     final char[][] array3 = new char[2][3]; [EOL]     for (short i = 0; i < array1.length; ++i) { [EOL]         for (short j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (char) ((i + 1) * (j + 1)); [EOL]             array2[i][j] = (char) ((i + 1) * (j + 1)); [EOL]             array3[i][j] = (char) ((i + 1) * (j + 1)); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 766,788
@Test [EOL] public void testMultiByteArray() { [EOL]     final byte[][] array1 = new byte[2][2]; [EOL]     final byte[][] array2 = new byte[2][2]; [EOL]     final byte[][] array3 = new byte[2][3]; [EOL]     for (byte i = 0; i < array1.length; ++i) { [EOL]         for (byte j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (byte) ((i + 1) * (j + 1)); [EOL]             array2[i][j] = (byte) ((i + 1) * (j + 1)); [EOL]             array3[i][j] = (byte) ((i + 1) * (j + 1)); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 790,812
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     final float[][] array3 = new float[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 814,836
@Test [EOL] public void testMultiDoubleArray() { [EOL]     final double[][] array1 = new double[2][2]; [EOL]     final double[][] array2 = new double[2][2]; [EOL]     final double[][] array3 = new double[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 127; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 838,860
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     final boolean[][] array3 = new boolean[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 ^ j == 1; [EOL]             array2[i][j] = i == 1 ^ j == 1; [EOL]             array3[i][j] = i == 1 ^ j == 1; [EOL]         } [EOL]     } [EOL]     array3[1][2] = false; [EOL]     array3[1][2] = false; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = true; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 862,884
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     final long[][] array3 = new long[3][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 886,912
@Test [EOL] public void testMixedArray() { [EOL]     final Object[] array1 = new Object[2]; [EOL]     final Object[] array2 = new Object[2]; [EOL]     final Object[] array3 = new Object[2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         array3[i] = new long[3]; [EOL]         for (int j = 0; j < 2; ++j) { [EOL]             ((long[]) array1[i])[j] = (i + 1) * (j + 1); [EOL]             ((long[]) array2[i])[j] = (i + 1) * (j + 1); [EOL]             ((long[]) array3[i])[j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     ((long[]) array3[0])[2] = 1; [EOL]     ((long[]) array3[1])[2] = 1; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     ((long[]) array1[1])[1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] } <line_num>: 914,938
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final TestObject[] array3 = new TestObject[3]; [EOL]     array3[0] = new TestObject(4); [EOL]     array3[1] = new TestObject(5); [EOL]     array3[2] = new TestObject(6); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = new TestObject(7); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 940,965
@Test [EOL] public void testLongArrayHiddenByObject() { [EOL]     final long[] array1 = new long[2]; [EOL]     array1[0] = 5L; [EOL]     array1[1] = 6L; [EOL]     final long[] array2 = new long[2]; [EOL]     array2[0] = 5L; [EOL]     array2[1] = 6L; [EOL]     final long[] array3 = new long[3]; [EOL]     array3[0] = 5L; [EOL]     array3[1] = 6L; [EOL]     array3[2] = 7L; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 967,990
@Test [EOL] public void testIntArrayHiddenByObject() { [EOL]     final int[] array1 = new int[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final int[] array2 = new int[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final int[] array3 = new int[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 992,1015
@Test [EOL] public void testShortArrayHiddenByObject() { [EOL]     final short[] array1 = new short[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final short[] array2 = new short[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final short[] array3 = new short[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 1017,1040
@Test [EOL] public void testCharArrayHiddenByObject() { [EOL]     final char[] array1 = new char[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final char[] array2 = new char[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final char[] array3 = new char[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 1042,1065
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final byte[] array3 = new byte[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 1067,1090
@Test [EOL] public void testDoubleArrayHiddenByObject() { [EOL]     final double[] array1 = new double[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final double[] array2 = new double[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final double[] array3 = new double[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 1092,1115
@Test [EOL] public void testFloatArrayHiddenByObject() { [EOL]     final float[] array1 = new float[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final float[] array2 = new float[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final float[] array3 = new float[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 1117,1140
@Test [EOL] public void testBooleanArrayHiddenByObject() { [EOL]     final boolean[] array1 = new boolean[2]; [EOL]     array1[0] = true; [EOL]     array1[1] = false; [EOL]     final boolean[] array2 = new boolean[2]; [EOL]     array2[0] = true; [EOL]     array2[1] = false; [EOL]     final boolean[] array3 = new boolean[3]; [EOL]     array3[0] = true; [EOL]     array3[1] = false; [EOL]     array3[2] = true; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = true; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] } <line_num>: 1142,1165
