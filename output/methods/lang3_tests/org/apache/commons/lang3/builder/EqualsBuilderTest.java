public TestObject() { [EOL] } <line_num>: 39,40
public TestObject(final int a) { [EOL]     this.a = a; [EOL] } <line_num>: 41,43
public TestSubObject() { [EOL]     super(0); [EOL] } <line_num>: 72,74
public TestSubObject(final int a, final int b) { [EOL]     super(a); [EOL]     this.b = b; [EOL] } <line_num>: 75,78
public TestEmptySubObject(final int a) { [EOL]     super(a); [EOL] } <line_num>: 106,108
public TestTSubObject(final int a, final int t) { [EOL]     super(a); [EOL]     this.t = t; [EOL] } <line_num>: 114,117
public TestTTSubObject(final int a, final int t, final int tt) { [EOL]     super(a, t); [EOL]     this.tt = tt; [EOL] } <line_num>: 123,126
public TestTTLeafObject(final int a, final int t, final int tt, final int leafValue) { [EOL]     super(a, t, tt); [EOL]     this.leafValue = leafValue; [EOL] } <line_num>: 132,135
public TestTSubObject2(final int a, final int t) { [EOL]     super(a); [EOL] } <line_num>: 140,142
public TestACanEqualB(final int a) { [EOL]     this.a = a; [EOL] } <line_num>: 943,945
public TestBCanEqualA(final int b) { [EOL]     this.b = b; [EOL] } <line_num>: 974,976
public TestObjectWithMultipleFields(final int one, final int two, final int three) { [EOL]     this.one = new TestObject(one); [EOL]     this.two = new TestObject(two); [EOL]     this.three = new TestObject(three); [EOL] } <line_num>: 1074,1078
public TestObjectReference(final int one) { [EOL]     this.one = new TestObject(one); [EOL] } <line_num>: 1116,1118
@Override [EOL] public boolean equals(final Object o) { [EOL]     if (o == null) { [EOL]         return false; [EOL]     } [EOL]     if (o == this) { [EOL]         return true; [EOL]     } [EOL]     if (o.getClass() != getClass()) { [EOL]         return false; [EOL]     } [EOL]     final TestObject rhs = (TestObject) o; [EOL]     return a == rhs.a; [EOL] } <line_num>: 44,54
@Override [EOL] public int hashCode() { [EOL]     return a; [EOL] } <line_num>: 56,59
public void setA(final int a) { [EOL]     this.a = a; [EOL] } <line_num>: 61,63
public int getA() { [EOL]     return a; [EOL] } <line_num>: 65,67
@Override [EOL] public boolean equals(final Object o) { [EOL]     if (o == null) { [EOL]         return false; [EOL]     } [EOL]     if (o == this) { [EOL]         return true; [EOL]     } [EOL]     if (o.getClass() != getClass()) { [EOL]         return false; [EOL]     } [EOL]     final TestSubObject rhs = (TestSubObject) o; [EOL]     return super.equals(o) && b == rhs.b; [EOL] } <line_num>: 79,89
@Override [EOL] public int hashCode() { [EOL]     return b * 17 + super.hashCode(); [EOL] } <line_num>: 91,94
public void setB(final int b) { [EOL]     this.b = b; [EOL] } <line_num>: 96,98
public int getB() { [EOL]     return b; [EOL] } <line_num>: 100,102
public int getT() { [EOL]     return t; [EOL] } <line_num>: 143,145
public void setT(final int t) { [EOL]     this.t = t; [EOL] } <line_num>: 146,148
@Test [EOL] public void testReflectionEquals() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); [EOL]     o2.setA(4); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); [EOL] } <line_num>: 151,165
@Test [EOL] public void testReflectionHierarchyEquals() { [EOL]     testReflectionHierarchyEquals(false); [EOL]     testReflectionHierarchyEquals(true); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true)); [EOL] } <line_num>: 167,177
private void testReflectionHierarchyEquals(final boolean testTransients) { [EOL]     final TestObject to1 = new TestObject(4); [EOL]     final TestObject to1Bis = new TestObject(4); [EOL]     final TestObject to1Ter = new TestObject(4); [EOL]     final TestObject to2 = new TestObject(5); [EOL]     final TestEmptySubObject teso = new TestEmptySubObject(4); [EOL]     final TestTSubObject ttso = new TestTSubObject(4, 1); [EOL]     final TestTTSubObject tttso = new TestTTSubObject(4, 1, 2); [EOL]     final TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3); [EOL]     final TestSubObject tso1 = new TestSubObject(1, 4); [EOL]     final TestSubObject tso1bis = new TestSubObject(1, 4); [EOL]     final TestSubObject tso1ter = new TestSubObject(1, 4); [EOL]     final TestSubObject tso2 = new TestSubObject(2, 5); [EOL]     testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients); [EOL]     testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(tso1, this)); [EOL] } <line_num>: 179,233
private void testReflectionEqualsEquivalenceRelationship(final TestObject to, final TestObject toBis, final TestObject toTer, final TestObject to2, final TestObject oToChange, final boolean testTransients) { [EOL]     assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, toTer, testTransients) && EqualsBuilder.reflectionEquals(to, toTer, testTransients)); [EOL]     oToChange.setA(to.getA()); [EOL]     if (oToChange instanceof TestSubObject) { [EOL]         ((TestSubObject) oToChange).setB(((TestSubObject) to).getB()); [EOL]     } [EOL]     assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients)); [EOL]     oToChange.setA(to.getA() + 1); [EOL]     if (oToChange instanceof TestSubObject) { [EOL]         ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1); [EOL]     } [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients)); [EOL]     assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients)); [EOL] } <line_num>: 251,292
@Test [EOL] public void testSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]     assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL] } <line_num>: 294,302
@Test [EOL] public void testObject() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL]     o2.setA(4); [EOL]     assertTrue(new EqualsBuilder().append(o1, o2).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, this).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, null).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(null, o2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals()); [EOL] } <line_num>: 304,318
@Test [EOL] public void testObjectBuild() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build()); [EOL]     o2.setA(4); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build()); [EOL]     assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build()); [EOL]     assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, (Object) null).build()); [EOL] } <line_num>: 320,334
@Test [EOL] public void testLong() { [EOL]     final long o1 = 1L; [EOL]     final long o2 = 2L; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] } <line_num>: 336,342
@Test [EOL] public void testInt() { [EOL]     final int o1 = 1; [EOL]     final int o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] } <line_num>: 344,350
@Test [EOL] public void testShort() { [EOL]     final short o1 = 1; [EOL]     final short o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] } <line_num>: 352,358
@Test [EOL] public void testChar() { [EOL]     final char o1 = 1; [EOL]     final char o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] } <line_num>: 360,366
@Test [EOL] public void testByte() { [EOL]     final byte o1 = 1; [EOL]     final byte o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] } <line_num>: 368,374
@Test [EOL] public void testDouble() { [EOL]     final double o1 = 1; [EOL]     final double o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals()); [EOL] } <line_num>: 376,385
@Test [EOL] public void testFloat() { [EOL]     final float o1 = 1; [EOL]     final float o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals()); [EOL] } <line_num>: 387,396
@Test [EOL] public void testAccessors() { [EOL]     final EqualsBuilder equalsBuilder = new EqualsBuilder(); [EOL]     assertTrue(equalsBuilder.isEquals()); [EOL]     equalsBuilder.setEquals(true); [EOL]     assertTrue(equalsBuilder.isEquals()); [EOL]     equalsBuilder.setEquals(false); [EOL]     assertFalse(equalsBuilder.isEquals()); [EOL] } <line_num>: 398,406
@Test [EOL] public void testReset() { [EOL]     final EqualsBuilder equalsBuilder = new EqualsBuilder(); [EOL]     assertTrue(equalsBuilder.isEquals()); [EOL]     equalsBuilder.setEquals(false); [EOL]     assertFalse(equalsBuilder.isEquals()); [EOL]     equalsBuilder.reset(); [EOL]     assertTrue(equalsBuilder.isEquals()); [EOL] } <line_num>: 408,416
@Test [EOL] public void testBoolean() { [EOL]     final boolean o1 = true; [EOL]     final boolean o2 = false; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] } <line_num>: 418,424
@Test [EOL] public void testObjectArray() { [EOL]     TestObject[] obj1 = new TestObject[3]; [EOL]     obj1[0] = new TestObject(4); [EOL]     obj1[1] = new TestObject(5); [EOL]     obj1[2] = null; [EOL]     TestObject[] obj2 = new TestObject[3]; [EOL]     obj2[0] = new TestObject(4); [EOL]     obj2[1] = new TestObject(5); [EOL]     obj2[2] = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1].setA(6); [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1].setA(5); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[2] = obj1[1]; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[2] = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 426,453
@Test [EOL] public void testLongArray() { [EOL]     long[] obj1 = new long[2]; [EOL]     obj1[0] = 5L; [EOL]     obj1[1] = 6L; [EOL]     long[] obj2 = new long[2]; [EOL]     obj2[0] = 5L; [EOL]     obj2[1] = 6L; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 455,472
@Test [EOL] public void testIntArray() { [EOL]     int[] obj1 = new int[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     int[] obj2 = new int[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 474,491
@Test [EOL] public void testShortArray() { [EOL]     short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 493,510
@Test [EOL] public void testCharArray() { [EOL]     char[] obj1 = new char[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     char[] obj2 = new char[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 512,529
@Test [EOL] public void testByteArray() { [EOL]     byte[] obj1 = new byte[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     byte[] obj2 = new byte[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 531,548
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 550,567
@Test [EOL] public void testFloatArray() { [EOL]     float[] obj1 = new float[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     float[] obj2 = new float[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 569,586
@Test [EOL] public void testBooleanArray() { [EOL]     boolean[] obj1 = new boolean[2]; [EOL]     obj1[0] = true; [EOL]     obj1[1] = false; [EOL]     boolean[] obj2 = new boolean[2]; [EOL]     obj2[0] = true; [EOL]     obj2[1] = false; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = true; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 588,605
@Test [EOL] public void testMultiLongArray() { [EOL]     final long[][] array1 = new long[2][2]; [EOL]     final long[][] array2 = new long[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 607,621
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 623,637
@Test [EOL] public void testMultiShortArray() { [EOL]     final short[][] array1 = new short[2][2]; [EOL]     final short[][] array2 = new short[2][2]; [EOL]     for (short i = 0; i < array1.length; ++i) { [EOL]         for (short j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 639,653
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 655,669
@Test [EOL] public void testMultiByteArray() { [EOL]     final byte[][] array1 = new byte[2][2]; [EOL]     final byte[][] array2 = new byte[2][2]; [EOL]     for (byte i = 0; i < array1.length; ++i) { [EOL]         for (byte j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 671,685
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 687,701
@Test [EOL] public void testMultiDoubleArray() { [EOL]     final double[][] array1 = new double[2][2]; [EOL]     final double[][] array2 = new double[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 703,717
@Test [EOL] public void testMultiBooleanArray() { [EOL]     final boolean[][] array1 = new boolean[2][2]; [EOL]     final boolean[][] array2 = new boolean[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i == 1 || j == 1; [EOL]             array2[i][j] = i == 1 || j == 1; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = false; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     final boolean[] array3 = new boolean[] { true, true }; [EOL]     assertFalse(new EqualsBuilder().append(array1, array3).isEquals()); [EOL]     assertFalse(new EqualsBuilder().append(array3, array1).isEquals()); [EOL]     assertFalse(new EqualsBuilder().append(array2, array3).isEquals()); [EOL]     assertFalse(new EqualsBuilder().append(array3, array2).isEquals()); [EOL] } <line_num>: 719,740
@Test [EOL] public void testRaggedArray() { [EOL]     final long[][] array1 = new long[2][]; [EOL]     final long[][] array2 = new long[2][]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         for (int j = 0; j < array1[i].length; ++j) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 742,758
@Test [EOL] public void testMixedArray() { [EOL]     final Object[] array1 = new Object[2]; [EOL]     final Object[] array2 = new Object[2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         array1[i] = new long[2]; [EOL]         array2[i] = new long[2]; [EOL]         for (int j = 0; j < 2; ++j) { [EOL]             ((long[]) array1[i])[j] = (i + 1) * (j + 1); [EOL]             ((long[]) array2[i])[j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     ((long[]) array1[1])[1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] } <line_num>: 760,776
@Test [EOL] public void testObjectArrayHiddenByObject() { [EOL]     final TestObject[] array1 = new TestObject[2]; [EOL]     array1[0] = new TestObject(4); [EOL]     array1[1] = new TestObject(5); [EOL]     final TestObject[] array2 = new TestObject[2]; [EOL]     array2[0] = new TestObject(4); [EOL]     array2[1] = new TestObject(5); [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1].setA(6); [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 778,794
@Test [EOL] public void testLongArrayHiddenByObject() { [EOL]     final long[] array1 = new long[2]; [EOL]     array1[0] = 5L; [EOL]     array1[1] = 6L; [EOL]     final long[] array2 = new long[2]; [EOL]     array2[0] = 5L; [EOL]     array2[1] = 6L; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 796,812
@Test [EOL] public void testIntArrayHiddenByObject() { [EOL]     final int[] array1 = new int[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final int[] array2 = new int[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 814,830
@Test [EOL] public void testShortArrayHiddenByObject() { [EOL]     final short[] array1 = new short[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final short[] array2 = new short[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 832,848
@Test [EOL] public void testCharArrayHiddenByObject() { [EOL]     final char[] array1 = new char[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final char[] array2 = new char[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 850,866
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 868,884
@Test [EOL] public void testDoubleArrayHiddenByObject() { [EOL]     final double[] array1 = new double[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final double[] array2 = new double[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 886,902
@Test [EOL] public void testFloatArrayHiddenByObject() { [EOL]     final float[] array1 = new float[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final float[] array2 = new float[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 904,920
@Test [EOL] public void testBooleanArrayHiddenByObject() { [EOL]     final boolean[] array1 = new boolean[2]; [EOL]     array1[0] = true; [EOL]     array1[1] = false; [EOL]     final boolean[] array2 = new boolean[2]; [EOL]     array2[0] = true; [EOL]     array2[1] = false; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = true; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] } <line_num>: 922,938
@Override [EOL] public boolean equals(final Object o) { [EOL]     if (o == this) { [EOL]         return true; [EOL]     } [EOL]     if (o instanceof TestACanEqualB) { [EOL]         return this.a == ((TestACanEqualB) o).getA(); [EOL]     } [EOL]     if (o instanceof TestBCanEqualA) { [EOL]         return this.a == ((TestBCanEqualA) o).getB(); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 947,959
@Override [EOL] public int hashCode() { [EOL]     return a; [EOL] } <line_num>: 961,964
public int getA() { [EOL]     return this.a; [EOL] } <line_num>: 966,968
@Override [EOL] public boolean equals(final Object o) { [EOL]     if (o == this) { [EOL]         return true; [EOL]     } [EOL]     if (o instanceof TestACanEqualB) { [EOL]         return this.b == ((TestACanEqualB) o).getA(); [EOL]     } [EOL]     if (o instanceof TestBCanEqualA) { [EOL]         return this.b == ((TestBCanEqualA) o).getB(); [EOL]     } [EOL]     return false; [EOL] } <line_num>: 978,990
@Override [EOL] public int hashCode() { [EOL]     return b; [EOL] } <line_num>: 992,995
public int getB() { [EOL]     return this.b; [EOL] } <line_num>: 997,999
@Test [EOL] public void testUnrelatedClasses() { [EOL]     final Object[] x = new Object[] { new TestACanEqualB(1) }; [EOL]     final Object[] y = new Object[] { new TestBCanEqualA(1) }; [EOL]     assertTrue(Arrays.equals(x, x)); [EOL]     assertTrue(Arrays.equals(y, y)); [EOL]     assertTrue(Arrays.equals(x, y)); [EOL]     assertTrue(Arrays.equals(y, x)); [EOL]     assertTrue(x[0].equals(x[0])); [EOL]     assertTrue(y[0].equals(y[0])); [EOL]     assertTrue(x[0].equals(y[0])); [EOL]     assertTrue(y[0].equals(x[0])); [EOL]     assertTrue(new EqualsBuilder().append(x, x).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(x, y).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(y, x).isEquals()); [EOL] } <line_num>: 1007,1026
@Test [EOL] public void testNpeForNullElement() { [EOL]     final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; [EOL]     final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; [EOL]     new EqualsBuilder().append(x1, x2); [EOL] } <line_num>: 1031,1039
@Test [EOL] public void testReflectionEqualsExcludeFields() throws Exception { [EOL]     final TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3); [EOL]     final TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {})); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "xxx" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three", "xxx" })); [EOL] } <line_num>: 1041,1064
@Test [EOL] public void testCyclicalObjectReferences() { [EOL]     final TestObjectReference refX1 = new TestObjectReference(1); [EOL]     final TestObjectReference x1 = new TestObjectReference(1); [EOL]     x1.setObjectReference(refX1); [EOL]     refX1.setObjectReference(x1); [EOL]     final TestObjectReference refX2 = new TestObjectReference(1); [EOL]     final TestObjectReference x2 = new TestObjectReference(1); [EOL]     x2.setObjectReference(refX2); [EOL]     refX2.setObjectReference(x2); [EOL]     final TestObjectReference refX3 = new TestObjectReference(2); [EOL]     final TestObjectReference x3 = new TestObjectReference(2); [EOL]     x3.setObjectReference(refX3); [EOL]     refX3.setObjectReference(x3); [EOL]     assertTrue(x1.equals(x2)); [EOL]     assertNull(EqualsBuilder.getRegistry()); [EOL]     assertFalse(x1.equals(x3)); [EOL]     assertNull(EqualsBuilder.getRegistry()); [EOL]     assertFalse(x2.equals(x3)); [EOL]     assertNull(EqualsBuilder.getRegistry()); [EOL] } <line_num>: 1085,1108
public void setObjectReference(final TestObjectReference reference) { [EOL]     this.reference = reference; [EOL] } <line_num>: 1120,1122
@Override [EOL] public boolean equals(final Object obj) { [EOL]     return EqualsBuilder.reflectionEquals(this, obj); [EOL] } <line_num>: 1124,1127
