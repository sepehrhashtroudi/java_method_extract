public SimpleReflectionTestFixture() { [EOL] } <line_num>: 480,481
public SimpleReflectionTestFixture(final Object o) { [EOL]     this.o = o; [EOL] } <line_num>: 483,485
public SelfInstanceVarReflectionTestFixture() { [EOL]     this.typeIsSelf = this; [EOL] } <line_num>: 497,499
public SelfInstanceTwoVarsReflectionTestFixture() { [EOL]     this.typeIsSelf = this; [EOL] } <line_num>: 512,514
@After [EOL] public void after() { [EOL]     validateNullToStringStyleRegistry(); [EOL] } <line_num>: 44,47
@Test [EOL] public void testConstructorEx1() { [EOL]     assertEquals("<null>", new ToStringBuilder(null).toString()); [EOL] } <line_num>: 51,54
@Test [EOL] public void testConstructorEx2() { [EOL]     assertEquals("<null>", new ToStringBuilder(null, null).toString()); [EOL]     new ToStringBuilder(this.base, null).toString(); [EOL] } <line_num>: 56,60
@Test [EOL] public void testConstructorEx3() { [EOL]     assertEquals("<null>", new ToStringBuilder(null, null, null).toString()); [EOL]     new ToStringBuilder(this.base, null, null).toString(); [EOL]     new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null).toString(); [EOL] } <line_num>: 62,67
@Test [EOL] public void testGetSetDefault() { [EOL]     try { [EOL]         ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE); [EOL]         assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle()); [EOL]     } finally { [EOL]         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE); [EOL]     } [EOL] } <line_num>: 69,78
@Test(expected = IllegalArgumentException.class) [EOL] public void testSetDefaultEx() { [EOL]     ToStringBuilder.setDefaultStyle(null); [EOL] } <line_num>: 80,83
@Test [EOL] public void testBlank() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).toString()); [EOL] } <line_num>: 85,88
@Test [EOL] public void testReflectionInteger() { [EOL]     assertEquals(baseStr + "[value=5]", ToStringBuilder.reflectionToString(base)); [EOL] } <line_num>: 93,96
@Test [EOL] public void testReflectionCharacter() { [EOL]     final Character c = new Character('A'); [EOL]     assertEquals(this.toBaseString(c) + "[value=A]", ToStringBuilder.reflectionToString(c)); [EOL] } <line_num>: 101,105
@Test [EOL] public void testReflectionBoolean() { [EOL]     Boolean b; [EOL]     b = Boolean.TRUE; [EOL]     assertEquals(this.toBaseString(b) + "[value=true]", ToStringBuilder.reflectionToString(b)); [EOL]     b = Boolean.FALSE; [EOL]     assertEquals(this.toBaseString(b) + "[value=false]", ToStringBuilder.reflectionToString(b)); [EOL] } <line_num>: 110,117
private String toBaseString(final Object o) { [EOL]     return o.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(o)); [EOL] } <line_num>: 124,126
public void assertReflectionArray(final String expected, final Object actual) { [EOL]     if (actual == null) { [EOL]         return; [EOL]     } [EOL]     assertEquals(expected, ToStringBuilder.reflectionToString(actual)); [EOL]     assertEquals(expected, ToStringBuilder.reflectionToString(actual, null)); [EOL]     assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true)); [EOL]     assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false)); [EOL] } <line_num>: 143,152
@Test [EOL] public void testReflectionObjectArray() { [EOL]     Object[] array = new Object[] { null, base, new int[] { 3, 6 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 154,161
@Test [EOL] public void testReflectionLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 163,170
@Test [EOL] public void testReflectionIntArray() { [EOL]     int[] array = new int[] { 1, 2, -3, 4 }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 172,179
@Test [EOL] public void testReflectionShortArray() { [EOL]     short[] array = new short[] { 1, 2, -3, 4 }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 181,188
@Test [EOL] public void testReflectionyteArray() { [EOL]     byte[] array = new byte[] { 1, 2, -3, 4 }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 190,197
@Test [EOL] public void testReflectionCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 199,206
@Test [EOL] public void testReflectionDoubleArray() { [EOL]     double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 208,215
@Test [EOL] public void testReflectionFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 217,224
@Test [EOL] public void testReflectionBooleanArray() { [EOL]     boolean[] array = new boolean[] { true, false, false }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 226,233
@Test [EOL] public void testReflectionFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 237,244
@Test [EOL] public void testReflectionLongArrayArray() { [EOL]     long[][] array = new long[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 247,254
@Test [EOL] public void testReflectionIntArrayArray() { [EOL]     int[][] array = new int[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 256,263
@Test [EOL] public void testReflectionhortArrayArray() { [EOL]     short[][] array = new short[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 265,272
@Test [EOL] public void testReflectionByteArrayArray() { [EOL]     byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 274,281
@Test [EOL] public void testReflectionCharArrayArray() { [EOL]     char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 283,290
@Test [EOL] public void testReflectionDoubleArrayArray() { [EOL]     double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 292,299
@Test [EOL] public void testReflectionBooleanArrayArray() { [EOL]     boolean[][] array = new boolean[][] { { true, false }, null, { false } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array)); [EOL]     assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] } <line_num>: 301,309
@Test [EOL] public void testReflectionHierarchyArrayList() { [EOL] } <line_num>: 312,313
@Test [EOL] public void testReflectionHierarchy() { [EOL]     final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]     String baseStr = this.toBaseString(baseA); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]     assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]     final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]     baseStr = this.toBaseString(baseB); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]     assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]     assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]     assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL] } <line_num>: 338,361
@Test [EOL] public void testInnerClassReflection() { [EOL]     final Outer outer = new Outer(); [EOL]     assertEquals(toBaseString(outer) + "[inner=" + toBaseString(outer.inner) + "[]]", outer.toString()); [EOL] } <line_num>: 377,381
@Override [EOL] public String toString() { [EOL]     return ToStringBuilder.reflectionToString(this); [EOL] } <line_num>: 386,389
@Override [EOL] public String toString() { [EOL]     return ToStringBuilder.reflectionToString(this); [EOL] } <line_num>: 391,394
@Test [EOL] public void testReflectionArrayCycle() throws Exception { [EOL]     final Object[] objects = new Object[1]; [EOL]     objects[0] = objects; [EOL]     assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]", ToStringBuilder.reflectionToString(objects)); [EOL] } <line_num>: 402,409
@Test [EOL] public void testReflectionArrayCycleLevel2() throws Exception { [EOL]     final Object[] objects = new Object[1]; [EOL]     final Object[] objectsLevel2 = new Object[1]; [EOL]     objects[0] = objectsLevel2; [EOL]     objectsLevel2[0] = objects; [EOL]     assertEquals(this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]", ToStringBuilder.reflectionToString(objects)); [EOL]     assertEquals(this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]", ToStringBuilder.reflectionToString(objectsLevel2)); [EOL] } <line_num>: 414,426
@Test [EOL] public void testReflectionArrayArrayCycle() throws Exception { [EOL]     final Object[][] objects = new Object[2][2]; [EOL]     objects[0][0] = objects; [EOL]     objects[0][1] = objects; [EOL]     objects[1][0] = objects; [EOL]     objects[1][1] = objects; [EOL]     final String basicToString = this.toBaseString(objects); [EOL]     assertEquals(basicToString + "[{{" + basicToString + "," + basicToString + "},{" + basicToString + "," + basicToString + "}}]", ToStringBuilder.reflectionToString(objects)); [EOL] } <line_num>: 428,448
@Override [EOL] public String toString() { [EOL]     return ToStringBuilder.reflectionToString(this); [EOL] } <line_num>: 456,459
@Override [EOL] public String toString() { [EOL]     return ToStringBuilder.reflectionToString(this); [EOL] } <line_num>: 468,471
@Override [EOL] public String toString() { [EOL]     return ToStringBuilder.reflectionToString(this); [EOL] } <line_num>: 487,490
@Override [EOL] public String toString() { [EOL]     return ToStringBuilder.reflectionToString(this); [EOL] } <line_num>: 501,504
public String getOtherType() { [EOL]     return this.otherType; [EOL] } <line_num>: 516,518
@Override [EOL] public String toString() { [EOL]     return ToStringBuilder.reflectionToString(this); [EOL] } <line_num>: 520,523
@Test [EOL] public void testSimpleReflectionObjectCycle() throws Exception { [EOL]     final SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(); [EOL]     simple.o = simple; [EOL]     assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString()); [EOL] } <line_num>: 532,537
@Test [EOL] public void testSelfInstanceVarReflectionObjectCycle() throws Exception { [EOL]     final SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture(); [EOL]     assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString()); [EOL] } <line_num>: 544,548
@Test [EOL] public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception { [EOL]     final SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture(); [EOL]     assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString()); [EOL] } <line_num>: 556,560
@Test [EOL] public void testReflectionObjectCycle() throws Exception { [EOL]     final ReflectionTestCycleA a = new ReflectionTestCycleA(); [EOL]     final ReflectionTestCycleB b = new ReflectionTestCycleB(); [EOL]     a.b = b; [EOL]     b.a = a; [EOL]     assertEquals(this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]", a.toString()); [EOL] } <line_num>: 568,577
@Test [EOL] public void testReflectionArrayAndObjectCycle() throws Exception { [EOL]     final Object[] objects = new Object[1]; [EOL]     final SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects); [EOL]     objects[0] = simple; [EOL]     assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(simple) + "[o=" + this.toBaseString(objects) + "]" + "}]", ToStringBuilder.reflectionToString(objects)); [EOL]     assertEquals(this.toBaseString(simple) + "[o={" + this.toBaseString(simple) + "}]", ToStringBuilder.reflectionToString(simple)); [EOL] } <line_num>: 585,605
void validateNullToStringStyleRegistry() { [EOL]     final Map<Object, Object> registry = ToStringStyle.getRegistry(); [EOL]     assertNull("Expected null, actual: " + registry, registry); [EOL] } <line_num>: 607,610
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] } <line_num>: 613,621
@Test [EOL] public void testAppendToString() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendToString("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendToString("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendToString(null).append("a", "hello").toString()); [EOL] } <line_num>: 623,631
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] } <line_num>: 633,649
@Test [EOL] public void testObjectBuild() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).build()); [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).build()); [EOL]     assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).build()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).build()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).build()); [EOL]     assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).build()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).build()); [EOL]     assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).build()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).build()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).build()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).build()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).build()); [EOL] } <line_num>: 651,667
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] } <line_num>: 669,674
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testInt() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (int) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (int) 3).append("b", (int) 4).toString()); [EOL] } <line_num>: 676,682
@Test [EOL] public void testShort() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString()); [EOL] } <line_num>: 684,689
@Test [EOL] public void testChar() { [EOL]     assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]     assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL] } <line_num>: 691,696
@Test [EOL] public void testByte() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL] } <line_num>: 698,703
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testDouble() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL] } <line_num>: 705,711
@Test [EOL] public void testFloat() { [EOL]     assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]     assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL] } <line_num>: 713,718
@Test [EOL] public void testBoolean() { [EOL]     assertEquals(baseStr + "[true]", new ToStringBuilder(base).append(true).toString()); [EOL]     assertEquals(baseStr + "[a=true]", new ToStringBuilder(base).append("a", true).toString()); [EOL]     assertEquals(baseStr + "[a=true,b=false]", new ToStringBuilder(base).append("a", true).append("b", false).toString()); [EOL] } <line_num>: 720,725
@Test [EOL] public void testObjectArray() { [EOL]     Object[] array = new Object[] { null, base, new int[] { 3, 6 } }; [EOL]     assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 728,736
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 738,746
@Test [EOL] public void testIntArray() { [EOL]     int[] array = new int[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 748,756
@Test [EOL] public void testShortArray() { [EOL]     short[] array = new short[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 758,766
@Test [EOL] public void testByteArray() { [EOL]     byte[] array = new byte[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 768,776
@Test [EOL] public void testCharArray() { [EOL]     char[] array = new char[] { 'A', '2', '_', 'D' }; [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 778,786
@Test [EOL] public void testDoubleArray() { [EOL]     double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 788,796
@Test [EOL] public void testFloatArray() { [EOL]     float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f }; [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 798,806
@Test [EOL] public void testBooleanArray() { [EOL]     boolean[] array = new boolean[] { true, false, false }; [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 808,816
@Test [EOL] public void testLongArrayArray() { [EOL]     long[][] array = new long[][] { { 1, 2 }, null, { 5 } }; [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 818,826
@Test [EOL] public void testIntArrayArray() { [EOL]     int[][] array = new int[][] { { 1, 2 }, null, { 5 } }; [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 828,836
@Test [EOL] public void testShortArrayArray() { [EOL]     short[][] array = new short[][] { { 1, 2 }, null, { 5 } }; [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 838,846
@Test [EOL] public void testByteArrayArray() { [EOL]     byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 848,856
@Test [EOL] public void testCharArrayArray() { [EOL]     char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; [EOL]     assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 858,866
@Test [EOL] public void testDoubleArrayArray() { [EOL]     double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 868,876
@Test [EOL] public void testFloatArrayArray() { [EOL]     float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 878,886
@Test [EOL] public void testBooleanArrayArray() { [EOL]     boolean[][] array = new boolean[][] { { true, false }, null, { false } }; [EOL]     assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 888,896
@Test [EOL] public void testObjectCycle() { [EOL]     final ObjectCycle a = new ObjectCycle(); [EOL]     final ObjectCycle b = new ObjectCycle(); [EOL]     a.obj = b; [EOL]     b.obj = a; [EOL]     final String expected = toBaseString(a) + "[" + toBaseString(b) + "[" + toBaseString(a) + "]]"; [EOL]     assertEquals(expected, a.toString()); [EOL] } <line_num>: 898,907
@Override [EOL] public String toString() { [EOL]     return new ToStringBuilder(this).append(obj).toString(); [EOL] } <line_num>: 912,915
@Test [EOL] public void testSimpleReflectionStatics() { [EOL]     final SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] } <line_num>: 918,933
@Test [EOL] public void testReflectionStatics() { [EOL]     final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class)); [EOL] } <line_num>: 938,953
@Test [EOL] public void testInheritedReflectionStatics() { [EOL]     final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     assertEquals(this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL] } <line_num>: 958,973
public <T> String toStringWithStatics(final T object, final ToStringStyle style, final Class<? super T> reflectUpToClass) { [EOL]     return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass); [EOL] } <line_num>: 1000,1002
@Test [EOL] public void test_setUpToClass_valid() { [EOL]     final Integer val = Integer.valueOf(5); [EOL]     final ReflectionToStringBuilder test = new ReflectionToStringBuilder(val); [EOL]     test.setUpToClass(Number.class); [EOL]     test.toString(); [EOL] } <line_num>: 1007,1013
@Test(expected = IllegalArgumentException.class) [EOL] public void test_setUpToClass_invalid() { [EOL]     final Integer val = Integer.valueOf(5); [EOL]     final ReflectionToStringBuilder test = new ReflectionToStringBuilder(val); [EOL]     try { [EOL]         test.setUpToClass(String.class); [EOL]     } finally { [EOL]         test.toString(); [EOL]     } [EOL] } <line_num>: 1018,1027
@Test [EOL] public void testReflectionNull() { [EOL]     assertEquals("<null>", ReflectionToStringBuilder.toString(null)); [EOL] } <line_num>: 1059,1062
@Override [EOL] public String toString() { [EOL]     return new ToStringBuilder(this).append("testInt", i).toString(); [EOL] } <line_num>: 1070,1073
@Test [EOL] public void testAppendToStringUsingMultiLineStyle() { [EOL]     final MultiLineTestObject obj = new MultiLineTestObject(); [EOL]     final ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).appendToString(obj.toString()); [EOL]     assertEquals(testBuilder.toString().indexOf("testInt=31337"), -1); [EOL] } <line_num>: 1076,1082
