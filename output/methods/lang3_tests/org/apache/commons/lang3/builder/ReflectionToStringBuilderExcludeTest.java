@Test [EOL] public void test_toStringExclude() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), SECRET_FIELD); [EOL]     this.validateSecretFieldAbsent(toString); [EOL] } <line_num>: 50,54
@Test [EOL] public void test_toStringExcludeArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[] { SECRET_FIELD }); [EOL]     this.validateSecretFieldAbsent(toString); [EOL] } <line_num>: 56,60
@Test [EOL] public void test_toStringExcludeArrayWithNull() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[] { null }); [EOL]     this.validateSecretFieldPresent(toString); [EOL] } <line_num>: 62,66
@Test [EOL] public void test_toStringExcludeArrayWithNulls() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[] { null, null }); [EOL]     this.validateSecretFieldPresent(toString); [EOL] } <line_num>: 68,72
@Test [EOL] public void test_toStringExcludeCollection() { [EOL]     final List<String> excludeList = new ArrayList<String>(); [EOL]     excludeList.add(SECRET_FIELD); [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]     this.validateSecretFieldAbsent(toString); [EOL] } <line_num>: 74,80
@Test [EOL] public void test_toStringExcludeCollectionWithNull() { [EOL]     final List<String> excludeList = new ArrayList<String>(); [EOL]     excludeList.add(null); [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]     this.validateSecretFieldPresent(toString); [EOL] } <line_num>: 82,88
@Test [EOL] public void test_toStringExcludeCollectionWithNulls() { [EOL]     final List<String> excludeList = new ArrayList<String>(); [EOL]     excludeList.add(null); [EOL]     excludeList.add(null); [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]     this.validateSecretFieldPresent(toString); [EOL] } <line_num>: 90,97
@Test [EOL] public void test_toStringExcludeEmptyArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     this.validateSecretFieldPresent(toString); [EOL] } <line_num>: 99,103
@Test [EOL] public void test_toStringExcludeEmptyCollection() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList<String>()); [EOL]     this.validateSecretFieldPresent(toString); [EOL] } <line_num>: 105,109
@Test [EOL] public void test_toStringExcludeNullArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null); [EOL]     this.validateSecretFieldPresent(toString); [EOL] } <line_num>: 111,115
@Test [EOL] public void test_toStringExcludeNullCollection() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection<String>) null); [EOL]     this.validateSecretFieldPresent(toString); [EOL] } <line_num>: 117,121
private void validateNonSecretField(final String toString) { [EOL]     Assert.assertTrue(toString.indexOf(NOT_SECRET_FIELD) > ArrayUtils.INDEX_NOT_FOUND); [EOL]     Assert.assertTrue(toString.indexOf(NOT_SECRET_VALUE) > ArrayUtils.INDEX_NOT_FOUND); [EOL] } <line_num>: 123,126
private void validateSecretFieldAbsent(final String toString) { [EOL]     Assert.assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(SECRET_VALUE)); [EOL]     this.validateNonSecretField(toString); [EOL] } <line_num>: 128,131
private void validateSecretFieldPresent(final String toString) { [EOL]     Assert.assertTrue(toString.indexOf(SECRET_VALUE) > 0); [EOL]     this.validateNonSecretField(toString); [EOL] } <line_num>: 133,136
