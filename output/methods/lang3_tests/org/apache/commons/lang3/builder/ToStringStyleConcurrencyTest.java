CollectionHolder(final T collection) { [EOL]     this.collection = collection; [EOL] } <line_num>: 53,55
@Test [EOL] public void testLinkedList() throws InterruptedException, ExecutionException { [EOL]     this.testConcurrency(new CollectionHolder<List<Integer>>(new LinkedList<Integer>())); [EOL] } <line_num>: 69,72
@Test [EOL] public void testArrayList() throws InterruptedException, ExecutionException { [EOL]     this.testConcurrency(new CollectionHolder<List<Integer>>(new ArrayList<Integer>())); [EOL] } <line_num>: 74,77
@Test [EOL] public void testCopyOnWriteArrayList() throws InterruptedException, ExecutionException { [EOL]     this.testConcurrency(new CollectionHolder<List<Integer>>(new CopyOnWriteArrayList<Integer>())); [EOL] } <line_num>: 79,82
@Override [EOL] public Integer call() { [EOL]     for (int i = 0; i < REPEAT; i++) { [EOL]         new ToStringBuilder(holder).append(holder.collection); [EOL]     } [EOL]     return Integer.valueOf(REPEAT); [EOL] } <line_num>: 93,100
private void testConcurrency(final CollectionHolder<List<Integer>> holder) throws InterruptedException, ExecutionException { [EOL]     final List<Integer> list = holder.collection; [EOL]     list.addAll(LIST); [EOL]     final ExecutorService threadPool = Executors.newFixedThreadPool(2); [EOL]     final Callable<Integer> consumer = new Callable<Integer>() { [EOL]  [EOL]         @Override [EOL]         public Integer call() { [EOL]             for (int i = 0; i < REPEAT; i++) { [EOL]                 new ToStringBuilder(holder).append(holder.collection); [EOL]             } [EOL]             return Integer.valueOf(REPEAT); [EOL]         } [EOL]     }; [EOL]     final Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>(); [EOL]     tasks.add(consumer); [EOL]     tasks.add(consumer); [EOL]     final List<Future<Integer>> futures = threadPool.invokeAll(tasks); [EOL]     for (final Future<Integer> future : futures) { [EOL]         future.get(); [EOL]     } [EOL] } <line_num>: 84,109
