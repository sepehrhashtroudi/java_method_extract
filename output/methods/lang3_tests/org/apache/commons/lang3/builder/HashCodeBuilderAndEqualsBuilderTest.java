TestFixture(final int i, final char c, final String string, final short s) { [EOL]     this.i = i; [EOL]     this.c = c; [EOL]     this.string = string; [EOL]     this.s = s; [EOL] } <line_num>: 99,104
SubTestFixture(final int i, final char c, final String string, final short s, final String tString) { [EOL]     super(i, c, string, s); [EOL]     this.tString = tString; [EOL] } <line_num>: 110,113
AllTransientFixture(final int i, final char c, final String string, final short s) { [EOL]     this.i = i; [EOL]     this.c = c; [EOL]     this.string = string; [EOL]     this.s = s; [EOL] } <line_num>: 122,127
SubAllTransientFixture(final int i, final char c, final String string, final short s, final String tString) { [EOL]     super(i, c, string, s); [EOL]     this.tString = tString; [EOL] } <line_num>: 133,136
private void testInteger(final boolean testTransients) { [EOL]     final Integer i1 = Integer.valueOf(12345); [EOL]     final Integer i2 = Integer.valueOf(12345); [EOL]     assertEqualsAndHashCodeContract(i1, i2, testTransients); [EOL] } <line_num>: 34,38
@Test [EOL] public void testInteger() { [EOL]     testInteger(false); [EOL] } <line_num>: 40,43
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] } <line_num>: 45,48
@Test [EOL] public void testFixture() { [EOL]     testFixture(false); [EOL] } <line_num>: 50,53
@Test [EOL] public void testFixtureWithTransients() { [EOL]     testFixture(true); [EOL] } <line_num>: 55,58
private void testFixture(final boolean testTransients) { [EOL]     assertEqualsAndHashCodeContract(new TestFixture(2, 'c', "Test", (short) 2), new TestFixture(2, 'c', "Test", (short) 2), testTransients); [EOL]     assertEqualsAndHashCodeContract(new AllTransientFixture(2, 'c', "Test", (short) 2), new AllTransientFixture(2, 'c', "Test", (short) 2), testTransients); [EOL]     assertEqualsAndHashCodeContract(new SubTestFixture(2, 'c', "Test", (short) 2, "Same"), new SubTestFixture(2, 'c', "Test", (short) 2, "Same"), testTransients); [EOL]     assertEqualsAndHashCodeContract(new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"), new SubAllTransientFixture(2, 'c', "Test", (short) 2, "Same"), testTransients); [EOL] } <line_num>: 60,74
private void assertEqualsAndHashCodeContract(final Object lhs, final Object rhs, final boolean testTransients) { [EOL]     if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) { [EOL]         assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients)); [EOL]         assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients)); [EOL]         assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients)); [EOL]     } [EOL] } <line_num>: 84,91
