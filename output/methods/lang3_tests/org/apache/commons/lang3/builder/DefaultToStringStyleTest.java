@Before [EOL] public void setUp() throws Exception { [EOL]     ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE); [EOL] } <line_num>: 39,42
@After [EOL] public void tearDown() throws Exception { [EOL]     ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE); [EOL] } <line_num>: 44,47
@Test [EOL] public void testBlank() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).toString()); [EOL] } <line_num>: 51,54
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[<null>,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] } <line_num>: 56,64
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] } <line_num>: 66,82
@Test [EOL] public void testPerson() { [EOL]     final Person p = new Person(); [EOL]     p.name = "John Doe"; [EOL]     p.age = 33; [EOL]     p.smoker = false; [EOL]     final String pBaseStr = p.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(p)); [EOL]     assertEquals(pBaseStr + "[name=John Doe,age=33,smoker=false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL] } <line_num>: 84,92
@Test [EOL] public void testLong() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL] } <line_num>: 94,99
@Test [EOL] public void testObjectArray() { [EOL]     Object[] array = new Object[] { null, base, new int[] { 3, 6 } }; [EOL]     assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 101,109
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 111,119
@Test [EOL] public void testLongArrayArray() { [EOL]     long[][] array = new long[][] { { 1, 2 }, null, { 5 } }; [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] } <line_num>: 121,129
