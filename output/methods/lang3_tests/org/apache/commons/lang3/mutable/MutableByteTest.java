@Test [EOL] public void testConstructors() { [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); [EOL]     assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); [EOL]     assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); [EOL]     assertEquals((byte) 2, new MutableByte("2").byteValue()); [EOL] } <line_num>: 31,42
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableByte((Number) null); [EOL] } <line_num>: 44,47
@Test [EOL] public void testGetSet() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]     mutNum.setValue((byte) 1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableByte((byte) 3)); [EOL]     assertEquals((byte) 3, mutNum.byteValue()); [EOL]     assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL] } <line_num>: 49,66
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     mutNum.setValue(null); [EOL] } <line_num>: 68,72
@Test [EOL] public void testEquals() { [EOL]     final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] } <line_num>: 74,90
@Test [EOL] public void testHashCode() { [EOL]     final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode()); [EOL] } <line_num>: 92,102
@Test [EOL] public void testCompareTo() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0))); [EOL]     assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1))); [EOL]     assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1))); [EOL] } <line_num>: 104,111
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     mutNum.compareTo(null); [EOL] } <line_num>: 113,117
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] } <line_num>: 119,129
@Test [EOL] public void testToByte() { [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte()); [EOL]     assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte()); [EOL] } <line_num>: 131,135
@Test [EOL] public void testIncrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 137,144
@Test [EOL] public void testDecrement() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 146,153
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.add((byte) 1); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL] } <line_num>: 155,161
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.add(Integer.valueOf(1)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL] } <line_num>: 163,169
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract((byte) 1); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] } <line_num>: 171,177
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] } <line_num>: 179,185
@Test [EOL] public void testToString() { [EOL]     assertEquals("0", new MutableByte((byte) 0).toString()); [EOL]     assertEquals("10", new MutableByte((byte) 10).toString()); [EOL]     assertEquals("-123", new MutableByte((byte) -123).toString()); [EOL] } <line_num>: 187,192
