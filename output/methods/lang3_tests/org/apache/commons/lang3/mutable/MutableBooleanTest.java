@Test [EOL] public void testCompareTo() { [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(0, mutBool.compareTo(new MutableBoolean(false))); [EOL]     assertEquals(-1, mutBool.compareTo(new MutableBoolean(true))); [EOL]     mutBool.setValue(true); [EOL]     assertEquals(+1, mutBool.compareTo(new MutableBoolean(false))); [EOL]     assertEquals(0, mutBool.compareTo(new MutableBoolean(true))); [EOL] } <line_num>: 32,41
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     mutBool.compareTo(null); [EOL] } <line_num>: 43,47
@Test [EOL] public void testConstructors() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertTrue(new MutableBoolean(true).booleanValue()); [EOL]     assertFalse(new MutableBoolean(false).booleanValue()); [EOL]     assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue()); [EOL]     assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue()); [EOL] } <line_num>: 50,60
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableBoolean(null); [EOL] } <line_num>: 62,65
@Test [EOL] public void testEquals() { [EOL]     final MutableBoolean mutBoolA = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolB = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolC = new MutableBoolean(true); [EOL]     assertTrue(mutBoolA.equals(mutBoolA)); [EOL]     assertTrue(mutBoolA.equals(mutBoolB)); [EOL]     assertTrue(mutBoolB.equals(mutBoolA)); [EOL]     assertTrue(mutBoolB.equals(mutBoolB)); [EOL]     assertFalse(mutBoolA.equals(mutBoolC)); [EOL]     assertFalse(mutBoolB.equals(mutBoolC)); [EOL]     assertTrue(mutBoolC.equals(mutBoolC)); [EOL]     assertFalse(mutBoolA.equals(null)); [EOL]     assertFalse(mutBoolA.equals(Boolean.FALSE)); [EOL]     assertFalse(mutBoolA.equals("false")); [EOL] } <line_num>: 67,83
@Test [EOL] public void testGetSet() { [EOL]     assertFalse(new MutableBoolean().booleanValue()); [EOL]     assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     assertTrue(mutBool.isFalse()); [EOL]     assertFalse(mutBool.isTrue()); [EOL]     mutBool.setValue(Boolean.TRUE); [EOL]     assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]     assertTrue(mutBool.booleanValue()); [EOL]     assertFalse(mutBool.isFalse()); [EOL]     assertTrue(mutBool.isTrue()); [EOL]     mutBool.setValue(false); [EOL]     assertFalse(mutBool.booleanValue()); [EOL]     mutBool.setValue(true); [EOL]     assertTrue(mutBool.booleanValue()); [EOL] } <line_num>: 85,108
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableBoolean mutBool = new MutableBoolean(false); [EOL]     mutBool.setValue(null); [EOL] } <line_num>: 110,114
@Test [EOL] public void testHashCode() { [EOL]     final MutableBoolean mutBoolA = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolB = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolC = new MutableBoolean(true); [EOL]     assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode()); [EOL]     assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode()); [EOL]     assertFalse(mutBoolA.hashCode() == mutBoolC.hashCode()); [EOL]     assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode()); [EOL]     assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode()); [EOL] } <line_num>: 116,127
@Test [EOL] public void testToString() { [EOL]     assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString()); [EOL]     assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString()); [EOL] } <line_num>: 129,133
