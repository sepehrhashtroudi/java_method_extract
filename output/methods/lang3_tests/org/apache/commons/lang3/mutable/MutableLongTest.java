@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] } <line_num>: 31,42
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableLong((Number) null); [EOL] } <line_num>: 44,47
@Test [EOL] public void testGetSet() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(Long.valueOf(0), new MutableLong().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Long.valueOf(2)); [EOL]     assertEquals(2, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(3), mutNum.getValue()); [EOL] } <line_num>: 49,66
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     mutNum.setValue(null); [EOL] } <line_num>: 68,72
@Test [EOL] public void testEquals() { [EOL]     final MutableLong mutNumA = new MutableLong(0); [EOL]     final MutableLong mutNumB = new MutableLong(0); [EOL]     final MutableLong mutNumC = new MutableLong(1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Long.valueOf(0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] } <line_num>: 74,90
@Test [EOL] public void testHashCode() { [EOL]     final MutableLong mutNumA = new MutableLong(0); [EOL]     final MutableLong mutNumB = new MutableLong(0); [EOL]     final MutableLong mutNumC = new MutableLong(1); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode()); [EOL] } <line_num>: 92,102
@Test [EOL] public void testCompareTo() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, mutNum.compareTo(new MutableLong(0))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableLong(-1))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableLong(1))); [EOL] } <line_num>: 104,111
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     mutNum.compareTo(null); [EOL] } <line_num>: 113,117
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableLong mutNum = new MutableLong(1L); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] } <line_num>: 119,129
@Test [EOL] public void testToLong() { [EOL]     assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong()); [EOL]     assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong()); [EOL] } <line_num>: 131,135
@Test [EOL] public void testIncrement() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 137,144
@Test [EOL] public void testDecrement() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 146,153
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.add(1); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 155,162
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.add(Long.valueOf(1)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 164,171
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.subtract(1); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 173,180
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.subtract(Long.valueOf(1)); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 182,189
@Test [EOL] public void testToString() { [EOL]     assertEquals("0", new MutableLong(0).toString()); [EOL]     assertEquals("10", new MutableLong(10).toString()); [EOL]     assertEquals("-123", new MutableLong(-123).toString()); [EOL] } <line_num>: 191,196
