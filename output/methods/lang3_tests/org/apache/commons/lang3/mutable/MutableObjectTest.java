@Test [EOL] public void testConstructors() { [EOL]     assertEquals(null, new MutableObject<String>().getValue()); [EOL]     final Integer i = Integer.valueOf(6); [EOL]     assertSame(i, new MutableObject<Integer>(i).getValue()); [EOL]     assertSame("HI", new MutableObject<String>("HI").getValue()); [EOL]     assertSame(null, new MutableObject<Object>(null).getValue()); [EOL] } <line_num>: 31,39
@Test [EOL] public void testGetSet() { [EOL]     final MutableObject<String> mutNum = new MutableObject<String>(); [EOL]     assertEquals(null, new MutableObject<Object>().getValue()); [EOL]     mutNum.setValue("HELLO"); [EOL]     assertSame("HELLO", mutNum.getValue()); [EOL]     mutNum.setValue(null); [EOL]     assertSame(null, mutNum.getValue()); [EOL] } <line_num>: 41,51
@Test [EOL] public void testEquals() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(mutNumD)); [EOL]     assertTrue(mutNumD.equals(mutNumD)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(new Object())); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] } <line_num>: 53,73
@Test [EOL] public void testHashCode() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumD.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == "ALPHA".hashCode()); [EOL]     assertEquals(0, mutNumD.hashCode()); [EOL] } <line_num>: 75,88
@Test [EOL] public void testToString() { [EOL]     assertEquals("HI", new MutableObject<String>("HI").toString()); [EOL]     assertEquals("10.0", new MutableObject<Double>(Double.valueOf(10)).toString()); [EOL]     assertEquals("null", new MutableObject<Object>(null).toString()); [EOL] } <line_num>: 90,95
