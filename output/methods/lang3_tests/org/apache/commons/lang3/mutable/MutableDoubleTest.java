@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); [EOL]     assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); [EOL] } <line_num>: 31,42
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableDouble((Number) null); [EOL] } <line_num>: 44,47
@Test [EOL] public void testGetSet() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(0), new MutableDouble().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(1d), mutNum.getValue()); [EOL]     mutNum.setValue(Double.valueOf(2d)); [EOL]     assertEquals(2d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(2d), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableDouble(3d)); [EOL]     assertEquals(3d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(3d), mutNum.getValue()); [EOL] } <line_num>: 49,66
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     mutNum.setValue(null); [EOL] } <line_num>: 68,72
@Test [EOL] public void testNanInfinite() { [EOL]     MutableDouble mutNum = new MutableDouble(Double.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableDouble(Double.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] } <line_num>: 74,84
@Test [EOL] public void testEquals() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Double.valueOf(0d))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] } <line_num>: 86,102
@Test [EOL] public void testHashCode() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL] } <line_num>: 104,114
@Test [EOL] public void testCompareTo() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     assertEquals(0, mutNum.compareTo(new MutableDouble(0d))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableDouble(1d))); [EOL] } <line_num>: 116,123
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     mutNum.compareTo(null); [EOL] } <line_num>: 125,129
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableDouble mutNum = new MutableDouble(1.7); [EOL]     assertEquals(1.7F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.7, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] } <line_num>: 131,141
@Test [EOL] public void testToDouble() { [EOL]     assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble()); [EOL]     assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble()); [EOL] } <line_num>: 143,147
@Test [EOL] public void testIncrement() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 149,156
@Test [EOL] public void testDecrement() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 158,165
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(1.1d); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] } <line_num>: 167,173
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(Double.valueOf(1.1d)); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] } <line_num>: 175,181
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.subtract(0.9d); [EOL]     assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL] } <line_num>: 183,189
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.subtract(Double.valueOf(0.9d)); [EOL]     assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL] } <line_num>: 191,197
@Test [EOL] public void testToString() { [EOL]     assertEquals("0.0", new MutableDouble(0d).toString()); [EOL]     assertEquals("10.0", new MutableDouble(10d).toString()); [EOL]     assertEquals("-123.0", new MutableDouble(-123d).toString()); [EOL] } <line_num>: 199,204
