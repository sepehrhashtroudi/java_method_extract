@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] } <line_num>: 31,42
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableInt((Number) null); [EOL] } <line_num>: 44,47
@Test [EOL] public void testGetSet() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(Integer.valueOf(0), new MutableInt().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Integer.valueOf(2)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.intValue()); [EOL]     assertEquals(Integer.valueOf(3), mutNum.getValue()); [EOL] } <line_num>: 49,66
@Test(expected = NullPointerException.class) [EOL] public void testSetNull() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     mutNum.setValue(null); [EOL] } <line_num>: 68,72
@Test [EOL] public void testEquals() { [EOL]     this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1)); [EOL] } <line_num>: 74,79
void testEquals(final Number numA, final Number numB, final Number numC) { [EOL]     assertTrue(numA.equals(numA)); [EOL]     assertTrue(numA.equals(numB)); [EOL]     assertTrue(numB.equals(numA)); [EOL]     assertTrue(numB.equals(numB)); [EOL]     assertFalse(numA.equals(numC)); [EOL]     assertFalse(numB.equals(numC)); [EOL]     assertTrue(numC.equals(numC)); [EOL]     assertFalse(numA.equals(null)); [EOL]     assertFalse(numA.equals(Integer.valueOf(0))); [EOL]     assertFalse(numA.equals("0")); [EOL] } <line_num>: 86,97
@Test [EOL] public void testHashCode() { [EOL]     final MutableInt mutNumA = new MutableInt(0); [EOL]     final MutableInt mutNumB = new MutableInt(0); [EOL]     final MutableInt mutNumC = new MutableInt(1); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode()); [EOL] } <line_num>: 99,109
@Test [EOL] public void testCompareTo() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     assertEquals(0, mutNum.compareTo(new MutableInt(0))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableInt(-1))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableInt(1))); [EOL] } <line_num>: 111,118
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableInt mutNum = new MutableInt(0); [EOL]     mutNum.compareTo(null); [EOL] } <line_num>: 120,124
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] } <line_num>: 126,135
@Test [EOL] public void testToInteger() { [EOL]     assertEquals(Integer.valueOf(0), new MutableInt(0).toInteger()); [EOL]     assertEquals(Integer.valueOf(123), new MutableInt(123).toInteger()); [EOL] } <line_num>: 137,141
@Test [EOL] public void testIncrement() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 143,150
@Test [EOL] public void testDecrement() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 152,159
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.add(1); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 161,168
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.add(Integer.valueOf(1)); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 170,177
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.subtract(1); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 179,186
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 188,195
@Test [EOL] public void testToString() { [EOL]     assertEquals("0", new MutableInt(0).toString()); [EOL]     assertEquals("10", new MutableInt(10).toString()); [EOL]     assertEquals("-123", new MutableInt(-123).toString()); [EOL] } <line_num>: 197,202
