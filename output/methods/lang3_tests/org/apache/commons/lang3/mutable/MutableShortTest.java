@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 31,46
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 48,69
@Test [EOL] public void testEquals() { [EOL]     final MutableShort mutNumA = new MutableShort((short) 0); [EOL]     final MutableShort mutNumB = new MutableShort((short) 0); [EOL]     final MutableShort mutNumC = new MutableShort((short) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Short.valueOf((short) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] } <line_num>: 71,87
@Test [EOL] public void testHashCode() { [EOL]     final MutableShort mutNumA = new MutableShort((short) 0); [EOL]     final MutableShort mutNumB = new MutableShort((short) 0); [EOL]     final MutableShort mutNumC = new MutableShort((short) 1); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Short.valueOf((short) 0).hashCode()); [EOL] } <line_num>: 89,99
@Test [EOL] public void testCompareTo() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0))); [EOL]     assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1))); [EOL]     assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1))); [EOL]     try { [EOL]         mutNum.compareTo(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] } <line_num>: 101,112
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] } <line_num>: 114,124
@Test [EOL] public void testToShort() { [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort()); [EOL]     assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort()); [EOL] } <line_num>: 126,130
@Test [EOL] public void testIncrement() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] } <line_num>: 132,139
@Test [EOL] public void testDecrement() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] } <line_num>: 141,148
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.add((short) 1); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL] } <line_num>: 150,156
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.add(Short.valueOf((short) 1)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL] } <line_num>: 158,164
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract((short) 1); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] } <line_num>: 166,172
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.subtract(Short.valueOf((short) 1)); [EOL]     assertEquals((short) 0, mutNum.shortValue()); [EOL] } <line_num>: 174,180
@Test [EOL] public void testToString() { [EOL]     assertEquals("0", new MutableShort((short) 0).toString()); [EOL]     assertEquals("10", new MutableShort((short) 10).toString()); [EOL]     assertEquals("-123", new MutableShort((short) -123).toString()); [EOL] } <line_num>: 182,187
