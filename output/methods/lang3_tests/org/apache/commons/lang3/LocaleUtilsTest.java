@Before [EOL] public void setUp() throws Exception { [EOL]     LocaleUtils.isAvailableLocale(Locale.getDefault()); [EOL] } <line_num>: 57,61
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new LocaleUtils()); [EOL]     final Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers())); [EOL] } <line_num>: 67,75
private void assertValidToLocale(final String language) { [EOL]     final Locale locale = LocaleUtils.toLocale(language); [EOL]     assertNotNull("valid locale", locale); [EOL]     assertEquals(language, locale.getLanguage()); [EOL]     assertTrue(locale.getCountry() == null || locale.getCountry().isEmpty()); [EOL]     assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty()); [EOL] } <line_num>: 83,90
private void assertValidToLocale(final String localeString, final String language, final String country) { [EOL]     final Locale locale = LocaleUtils.toLocale(localeString); [EOL]     assertNotNull("valid locale", locale); [EOL]     assertEquals(language, locale.getLanguage()); [EOL]     assertEquals(country, locale.getCountry()); [EOL]     assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty()); [EOL] } <line_num>: 99,106
private void assertValidToLocale(final String localeString, final String language, final String country, final String variant) { [EOL]     final Locale locale = LocaleUtils.toLocale(localeString); [EOL]     assertNotNull("valid locale", locale); [EOL]     assertEquals(language, locale.getLanguage()); [EOL]     assertEquals(country, locale.getCountry()); [EOL]     assertEquals(variant, locale.getVariant()); [EOL] } <line_num>: 116,125
@Test [EOL] public void testToLocale_1Part() { [EOL]     assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]     assertValidToLocale("us"); [EOL]     assertValidToLocale("fr"); [EOL]     assertValidToLocale("de"); [EOL]     assertValidToLocale("zh"); [EOL]     assertValidToLocale("qq"); [EOL]     try { [EOL]         LocaleUtils.toLocale("Us"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("US"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u#"); [EOL]         fail("Should fail if not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("u"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uuu"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_U"); [EOL]         fail("Must be 2 chars if less than 5"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 130,172
@Test [EOL] public void testToLocale_2Part() { [EOL]     assertValidToLocale("us_EN", "us", "EN"); [EOL]     assertValidToLocale("us_ZH", "us", "ZH"); [EOL]     try { [EOL]         LocaleUtils.toLocale("us-EN"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_En"); [EOL]         fail("Should fail second part not uppercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_en"); [EOL]         fail("Should fail second part not uppercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_eN"); [EOL]         fail("Should fail second part not uppercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uS_EN"); [EOL]         fail("Should fail first part not lowercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_E3"); [EOL]         fail("Should fail second part not uppercase"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 177,207
@Test [EOL] public void testToLocale_3Part() { [EOL]     assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]     if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]     } else { [EOL]         assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]         assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("us_EN-a"); [EOL]         fail("Should fail as not underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("uu_UU_"); [EOL]         fail("Must be 3, 5 or 7+ in length"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 212,233
private void assertLocaleLookupList(final Locale locale, final Locale defaultLocale, final Locale[] expected) { [EOL]     final List<Locale> localeList = defaultLocale == null ? LocaleUtils.localeLookupList(locale) : LocaleUtils.localeLookupList(locale, defaultLocale); [EOL]     assertEquals(expected.length, localeList.size()); [EOL]     assertEquals(Arrays.asList(expected), localeList); [EOL]     assertUnmodifiableCollection(localeList); [EOL] } <line_num>: 243,251
@Test [EOL] public void testLocaleLookupList_Locale() { [EOL]     assertLocaleLookupList(null, null, new Locale[0]); [EOL]     assertLocaleLookupList(LOCALE_QQ, null, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, null, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN, null, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, null, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL] } <line_num>: 257,272
@Test [EOL] public void testLocaleLookupList_LocaleLocale() { [EOL]     assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ }); [EOL]     assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ }); [EOL]     assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN }); [EOL] } <line_num>: 277,326
@Test [EOL] public void testAvailableLocaleList() { [EOL]     final List<Locale> list = LocaleUtils.availableLocaleList(); [EOL]     final List<Locale> list2 = LocaleUtils.availableLocaleList(); [EOL]     assertNotNull(list); [EOL]     assertSame(list, list2); [EOL]     assertUnmodifiableCollection(list); [EOL]     final Locale[] jdkLocaleArray = Locale.getAvailableLocales(); [EOL]     final List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray); [EOL]     assertEquals(jdkLocaleList, list); [EOL] } <line_num>: 332,343
@Test [EOL] public void testAvailableLocaleSet() { [EOL]     final Set<Locale> set = LocaleUtils.availableLocaleSet(); [EOL]     final Set<Locale> set2 = LocaleUtils.availableLocaleSet(); [EOL]     assertNotNull(set); [EOL]     assertSame(set, set2); [EOL]     assertUnmodifiableCollection(set); [EOL]     final Locale[] jdkLocaleArray = Locale.getAvailableLocales(); [EOL]     final List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray); [EOL]     final Set<Locale> jdkLocaleSet = new HashSet<Locale>(jdkLocaleList); [EOL]     assertEquals(jdkLocaleSet, set); [EOL] } <line_num>: 349,361
@SuppressWarnings("boxing") [EOL] @Test [EOL] public void testIsAvailableLocale() { [EOL]     final Set<Locale> set = LocaleUtils.availableLocaleSet(); [EOL]     assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN)); [EOL]     assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US)); [EOL]     assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ)); [EOL]     assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR)); [EOL]     assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA)); [EOL]     assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ)); [EOL]     assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ)); [EOL] } <line_num>: 367,378
private void assertLanguageByCountry(final String country, final String[] languages) { [EOL]     final List<Locale> list = LocaleUtils.languagesByCountry(country); [EOL]     final List<Locale> list2 = LocaleUtils.languagesByCountry(country); [EOL]     assertNotNull(list); [EOL]     assertSame(list, list2); [EOL]     for (final String language : languages) { [EOL]         final Iterator<Locale> iterator = list.iterator(); [EOL]         boolean found = false; [EOL]         while (iterator.hasNext()) { [EOL]             final Locale locale = iterator.next(); [EOL]             assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty()); [EOL]             assertEquals(country, locale.getCountry()); [EOL]             if (language.equals(locale.getLanguage())) { [EOL]                 found = true; [EOL]                 break; [EOL]             } [EOL]         } [EOL]         if (!found) { [EOL]             fail("Cound not find language: " + language + " for country: " + country); [EOL]         } [EOL]     } [EOL]     assertUnmodifiableCollection(list); [EOL] } <line_num>: 390,417
@Test [EOL] public void testLanguagesByCountry() { [EOL]     assertLanguageByCountry(null, new String[0]); [EOL]     assertLanguageByCountry("GB", new String[] { "en" }); [EOL]     assertLanguageByCountry("ZZ", new String[0]); [EOL]     assertLanguageByCountry("CH", new String[] { "fr", "de", "it" }); [EOL] } <line_num>: 422,428
private void assertCountriesByLanguage(final String language, final String[] countries) { [EOL]     final List<Locale> list = LocaleUtils.countriesByLanguage(language); [EOL]     final List<Locale> list2 = LocaleUtils.countriesByLanguage(language); [EOL]     assertNotNull(list); [EOL]     assertSame(list, list2); [EOL]     for (final String countrie : countries) { [EOL]         final Iterator<Locale> iterator = list.iterator(); [EOL]         boolean found = false; [EOL]         while (iterator.hasNext()) { [EOL]             final Locale locale = iterator.next(); [EOL]             assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty()); [EOL]             assertEquals(language, locale.getLanguage()); [EOL]             if (countrie.equals(locale.getCountry())) { [EOL]                 found = true; [EOL]                 break; [EOL]             } [EOL]         } [EOL]         if (!found) { [EOL]             fail("Cound not find language: " + countrie + " for country: " + language); [EOL]         } [EOL]     } [EOL]     assertUnmodifiableCollection(list); [EOL] } <line_num>: 441,468
@Test [EOL] public void testCountriesByLanguage() { [EOL]     assertCountriesByLanguage(null, new String[0]); [EOL]     assertCountriesByLanguage("de", new String[] { "DE", "CH", "AT", "LU" }); [EOL]     assertCountriesByLanguage("zz", new String[0]); [EOL]     assertCountriesByLanguage("it", new String[] { "IT", "CH" }); [EOL] } <line_num>: 473,479
private static void assertUnmodifiableCollection(final Collection<?> coll) { [EOL]     try { [EOL]         coll.add(null); [EOL]         fail(); [EOL]     } catch (final UnsupportedOperationException ex) { [EOL]     } [EOL] } <line_num>: 484,489
@Test [EOL] public void testLang328() { [EOL]     assertValidToLocale("fr__P", "fr", "", "P"); [EOL]     assertValidToLocale("fr__POSIX", "fr", "", "POSIX"); [EOL] } <line_num>: 494,498
@Test [EOL] public void testLang865() { [EOL]     assertValidToLocale("_GB", "", "GB", ""); [EOL]     assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]     assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]     try { [EOL]         LocaleUtils.toLocale("_G"); [EOL]         fail("Must be at least 3 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_Gb"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_gB"); [EOL]         fail("Must be uppercase if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_1B"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_G1"); [EOL]         fail("Must be letter if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GB_"); [EOL]         fail("Must be at least 5 chars if starts with underscore"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         LocaleUtils.toLocale("_GBAP"); [EOL]         fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] } <line_num>: 503,543
@Test [EOL] public void testParseAllLocales() { [EOL] } <line_num>: 545,546
