public void testValidEmpty() throws Exception { [EOL]     final String DOC = "[   \n  ]"; [EOL]     JsonParser jp = createParserUsingStream(DOC, "UTF-8"); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 12,21
public void testInvalidEmptyMissingClose() throws Exception { [EOL]     final String DOC = "[ "; [EOL]     JsonParser jp = createParserUsingStream(DOC, "UTF-8"); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     try { [EOL]         jp.nextToken(); [EOL]         fail("Expected a parsing error for missing array close marker"); [EOL]     } catch (JsonParseException jex) { [EOL]         verifyException(jex, "expected close marker for ARRAY"); [EOL]     } [EOL]     jp.close(); [EOL] } <line_num>: 23,37
public void testInvalidMissingFieldName() throws Exception { [EOL]     final String DOC = "[  : 3 ] "; [EOL]     JsonParser jp = createParserUsingStream(DOC, "UTF-8"); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     try { [EOL]         jp.nextToken(); [EOL]         fail("Expected a parsing error for odd character"); [EOL]     } catch (JsonParseException jex) { [EOL]         verifyException(jex, "Unexpected character"); [EOL]     } [EOL]     jp.close(); [EOL] } <line_num>: 39,53
public void testInvalidExtraComma() throws Exception { [EOL]     final String DOC = "[ 24, ] "; [EOL]     JsonParser jp = createParserUsingStream(DOC, "UTF-8"); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(24, jp.getIntValue()); [EOL]     try { [EOL]         jp.nextToken(); [EOL]         fail("Expected a parsing error for missing array close marker"); [EOL]     } catch (JsonParseException jex) { [EOL]         verifyException(jex, "expected a value"); [EOL]     } [EOL]     jp.close(); [EOL] } <line_num>: 55,71
