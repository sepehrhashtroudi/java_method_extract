public void testBasicEscaping() throws Exception { [EOL]     doTestBasicEscaping(false); [EOL]     doTestBasicEscaping(true); [EOL] } <line_num>: 26,31
public void testLongerRandomSingleChunk() throws Exception { [EOL]     for (int round = 0; round < 80; ++round) { [EOL]         String content = generateRandom(75000 + round); [EOL]         doTestLongerRandom(content, false); [EOL]         doTestLongerRandom(content, true); [EOL]     } [EOL] } <line_num>: 33,44
public void testLongerRandomMultiChunk() throws Exception { [EOL]     for (int round = 0; round < 70; ++round) { [EOL]         String content = generateRandom(73000 + round); [EOL]         doTestLongerRandomMulti(content, false, round); [EOL]         doTestLongerRandomMulti(content, true, round); [EOL]     } [EOL] } <line_num>: 46,57
private String generateRandom(int len) { [EOL]     StringBuilder sb = new StringBuilder(len + 1000); [EOL]     Random r = new Random(len); [EOL]     for (int i = 0; i < len; ++i) { [EOL]         if (r.nextBoolean()) { [EOL]             int value = r.nextInt() & 0xFFFF; [EOL]             if (value >= 0xD800 && value <= 0xDFFF) { [EOL]                 int fullValue = (r.nextInt() & 0xFFFFF); [EOL]                 sb.append((char) (0xD800 + (fullValue >> 10))); [EOL]                 value = 0xDC00 + (fullValue & 0x3FF); [EOL]             } [EOL]             sb.append((char) value); [EOL]         } else { [EOL]             sb.append((char) (r.nextInt() & 0x7F)); [EOL]         } [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 65,87
private void doTestBasicEscaping(boolean charArray) throws Exception { [EOL]     for (int i = 0; i < SAMPLES.length; ++i) { [EOL]         String VALUE = SAMPLES[i]; [EOL]         StringWriter sw = new StringWriter(); [EOL]         JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]         gen.writeStartArray(); [EOL]         if (charArray) { [EOL]             char[] buf = new char[VALUE.length() + i]; [EOL]             VALUE.getChars(0, VALUE.length(), buf, i); [EOL]             gen.writeString(buf, i, VALUE.length()); [EOL]         } else { [EOL]             gen.writeString(VALUE); [EOL]         } [EOL]         gen.writeEndArray(); [EOL]         gen.close(); [EOL]         String docStr = sw.toString(); [EOL]         JsonParser jp = createParserUsingReader(docStr); [EOL]         assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         JsonToken t = jp.nextToken(); [EOL]         assertEquals(JsonToken.VALUE_STRING, t); [EOL]         assertEquals(VALUE, jp.getText()); [EOL]         assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]         assertEquals(null, jp.nextToken()); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 89,116
private void doTestLongerRandom(String text, boolean charArray) throws Exception { [EOL]     ByteArrayOutputStream bow = new ByteArrayOutputStream(text.length()); [EOL]     JsonGenerator gen = new JsonFactory().createGenerator(bow, JsonEncoding.UTF8); [EOL]     gen.writeStartArray(); [EOL]     if (charArray) { [EOL]         char[] buf = new char[text.length()]; [EOL]         text.getChars(0, text.length(), buf, 0); [EOL]         gen.writeString(buf, 0, text.length()); [EOL]     } else { [EOL]         gen.writeString(text); [EOL]     } [EOL]     gen.writeEndArray(); [EOL]     gen.close(); [EOL]     byte[] docData = bow.toByteArray(); [EOL]     JsonParser jp = new JsonFactory().createParser(new ByteArrayInputStream(docData)); [EOL]     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     JsonToken t = jp.nextToken(); [EOL]     assertEquals(JsonToken.VALUE_STRING, t); [EOL]     String act = jp.getText(); [EOL]     if (!text.equals(act)) { [EOL]         if (text.length() != act.length()) { [EOL]             fail("Expected string length " + text.length() + ", actual " + act.length()); [EOL]         } [EOL]         int i = 0; [EOL]         for (int len = text.length(); i < len; ++i) { [EOL]             if (text.charAt(i) != act.charAt(i)) { [EOL]                 break; [EOL]             } [EOL]         } [EOL]         fail("Strings differ at position #" + i + " (len " + text.length() + "): expected char 0x" + Integer.toHexString(text.charAt(i)) + ", actual 0x" + Integer.toHexString(act.charAt(i))); [EOL]     } [EOL]     assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertEquals(null, jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 118,155
private void doTestLongerRandomMulti(String text, boolean charArray, int round) throws Exception { [EOL]     ByteArrayOutputStream bow = new ByteArrayOutputStream(text.length()); [EOL]     JsonGenerator gen = new JsonFactory().createGenerator(bow, JsonEncoding.UTF8); [EOL]     gen.writeStartArray(); [EOL]     gen.writeString(text); [EOL]     gen.writeEndArray(); [EOL]     gen.close(); [EOL]     gen = new JsonFactory().createGenerator(bow, JsonEncoding.UTF8); [EOL]     gen.writeStartArray(); [EOL]     gen.writeStartArray(); [EOL]     Random rnd = new Random(text.length()); [EOL]     int offset = 0; [EOL]     while (offset < text.length()) { [EOL]         int shift = 1 + ((rnd.nextInt() & 0xFFFFF) % 12); [EOL]         int len = (1 << shift) + shift; [EOL]         if ((offset + len) >= text.length()) { [EOL]             len = text.length() - offset; [EOL]         } else { [EOL]             char c = text.charAt(offset + len - 1); [EOL]             if (c >= 0xD800 && c < 0xDC00) { [EOL]                 ++len; [EOL]             } [EOL]         } [EOL]         if (charArray) { [EOL]             char[] buf = new char[len]; [EOL]             text.getChars(offset, offset + len, buf, 0); [EOL]             gen.writeString(buf, 0, len); [EOL]         } else { [EOL]             gen.writeString(text.substring(offset, offset + len)); [EOL]         } [EOL]         offset += len; [EOL]     } [EOL]     gen.writeEndArray(); [EOL]     gen.close(); [EOL]     byte[] docData = bow.toByteArray(); [EOL]     JsonParser jp = new JsonFactory().createParser(new ByteArrayInputStream(docData)); [EOL]     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     offset = 0; [EOL]     while (jp.nextToken() == JsonToken.VALUE_STRING) { [EOL]         String act = jp.getText(); [EOL]         String exp = text.substring(offset, offset + act.length()); [EOL]         if (act.length() != exp.length()) { [EOL]             fail("String segment [" + offset + " - " + (offset + act.length()) + "[ differs; exp length " + exp + ", actual " + act); [EOL]         } [EOL]         if (!act.equals(exp)) { [EOL]             int i = 0; [EOL]             while (act.charAt(i) == exp.charAt(i)) { [EOL]                 ++i; [EOL]             } [EOL]             fail("String segment [" + offset + " - " + (offset + act.length()) + "[ different at offset #" + i + "; exp char 0x" + Integer.toHexString(exp.charAt(i)) + ", actual 0x" + Integer.toHexString(act.charAt(i))); [EOL]         } [EOL]         offset += act.length(); [EOL]     } [EOL]     assertEquals(JsonToken.END_ARRAY, jp.getCurrentToken()); [EOL]     jp.close(); [EOL] } <line_num>: 157,224
