public void testUtf8RawStrings() throws Exception { [EOL]     List<byte[]> strings = generateStrings(new Random(28), 750000, false); [EOL]     ByteArrayOutputStream out = new ByteArrayOutputStream(16000); [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     JsonGenerator jgen = jf.createGenerator(out, JsonEncoding.UTF8); [EOL]     jgen.writeStartArray(); [EOL]     for (byte[] str : strings) { [EOL]         jgen.writeRawUTF8String(str, 0, str.length); [EOL]     } [EOL]     jgen.writeEndArray(); [EOL]     jgen.close(); [EOL]     byte[] json = out.toByteArray(); [EOL]     JsonParser jp = jf.createParser(json); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     for (byte[] inputBytes : strings) { [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         String string = jp.getText(); [EOL]         byte[] outputBytes = string.getBytes("UTF-8"); [EOL]         assertEquals(inputBytes.length, outputBytes.length); [EOL]         assertArrayEquals(inputBytes, outputBytes); [EOL]     } [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 18,45
public void testUtf8StringsWithEscaping() throws Exception { [EOL]     List<byte[]> strings = generateStrings(new Random(28), 720000, true); [EOL]     ByteArrayOutputStream out = new ByteArrayOutputStream(16000); [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     JsonGenerator jgen = jf.createGenerator(out, JsonEncoding.UTF8); [EOL]     jgen.writeStartArray(); [EOL]     for (byte[] str : strings) { [EOL]         jgen.writeUTF8String(str, 0, str.length); [EOL]         jgen.writeRaw('\n'); [EOL]     } [EOL]     jgen.writeEndArray(); [EOL]     jgen.close(); [EOL]     byte[] json = out.toByteArray(); [EOL]     JsonParser jp = jf.createParser(json); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     for (byte[] inputBytes : strings) { [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         String string = jp.getText(); [EOL]         byte[] outputBytes = string.getBytes("UTF-8"); [EOL]         assertEquals(inputBytes.length, outputBytes.length); [EOL]         assertArrayEquals(inputBytes, outputBytes); [EOL]     } [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 51,81
private List<byte[]> generateStrings(Random rnd, int totalLength, boolean includeCtrlChars) throws IOException { [EOL]     ArrayList<byte[]> strings = new ArrayList<byte[]>(); [EOL]     do { [EOL]         int len = 2; [EOL]         int bits = rnd.nextInt(13); [EOL]         while (--bits >= 0) { [EOL]             len += len; [EOL]         } [EOL]         len = 1 + ((len + len) / 3); [EOL]         String str = generateString(rnd, len, includeCtrlChars); [EOL]         byte[] bytes = str.getBytes("UTF-8"); [EOL]         strings.add(bytes); [EOL]         totalLength -= bytes.length; [EOL]     } while (totalLength > 0); [EOL]     return strings; [EOL] } <line_num>: 89,106
private String generateString(Random rnd, int length, boolean includeCtrlChars) { [EOL]     StringBuilder sb = new StringBuilder(length); [EOL]     do { [EOL]         int i; [EOL]         switch(rnd.nextInt(3)) { [EOL]             case 0: [EOL]                 i = 2048 + rnd.nextInt(16383); [EOL]                 break; [EOL]             case 1: [EOL]                 i = 128 + rnd.nextInt(1024); [EOL]                 break; [EOL]             default: [EOL]                 i = rnd.nextInt(192); [EOL]                 if (!includeCtrlChars) { [EOL]                     i += 32; [EOL]                     if (i == '\\' || i == '"') { [EOL]                         i = '@'; [EOL]                     } [EOL]                 } [EOL]         } [EOL]         sb.append((char) i); [EOL]     } while (sb.length() < length); [EOL]     return sb.toString(); [EOL] } <line_num>: 108,133
