public void testCopyRootTokens() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     final String DOC = "\"text\\non two lines\" true false 2.0"; [EOL]     JsonParser jp = jf.createParser(new StringReader(DOC)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = jf.createGenerator(sw); [EOL]     JsonToken t; [EOL]     while ((t = jp.nextToken()) != null) { [EOL]         gen.copyCurrentEvent(jp); [EOL]         assertToken(t, jp.getCurrentToken()); [EOL]     } [EOL]     jp.close(); [EOL]     gen.close(); [EOL]     assertEquals("\"text\\non two lines\" true false 2.0", sw.toString()); [EOL] } <line_num>: 16,36
public void testCopyArrayTokens() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     final String DOC = "123 [ 1, null, [ false ] ]"; [EOL]     JsonParser jp = jf.createParser(new StringReader(DOC)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = jf.createGenerator(sw); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     gen.copyCurrentEvent(jp); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     gen.copyCurrentStructure(jp); [EOL]     assertToken(JsonToken.END_ARRAY, jp.getCurrentToken()); [EOL]     jp.close(); [EOL]     gen.close(); [EOL]     assertEquals("123 [1,null,[false]]", sw.toString()); [EOL] } <line_num>: 38,62
public void testCopyObjectTokens() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     final String DOC = "{ \"a\":1, \"b\":[{ \"c\" : null }] }"; [EOL]     JsonParser jp = jf.createParser(new StringReader(DOC)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = jf.createGenerator(sw); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     gen.copyCurrentStructure(jp); [EOL]     assertToken(JsonToken.END_OBJECT, jp.getCurrentToken()); [EOL]     jp.close(); [EOL]     gen.close(); [EOL]     assertEquals("{\"a\":1,\"b\":[{\"c\":null}]}", sw.toString()); [EOL] } <line_num>: 64,81
