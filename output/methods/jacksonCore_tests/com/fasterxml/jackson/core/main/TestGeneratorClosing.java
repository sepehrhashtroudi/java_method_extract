public MyWriter() { [EOL] } <line_num>: 33,33
public MyStream() { [EOL] } <line_num>: 47,47
@Override [EOL] public void close() throws IOException { [EOL]     _isClosed = true; [EOL]     super.close(); [EOL] } <line_num>: 35,39
public boolean isClosed() { [EOL]     return _isClosed; [EOL] } <line_num>: 40,40
@Override [EOL] public void close() throws IOException { [EOL]     _isClosed = true; [EOL]     super.close(); [EOL] } <line_num>: 49,53
public boolean isClosed() { [EOL]     return _isClosed; [EOL] } <line_num>: 54,54
@Override [EOL] public void flush() throws IOException { [EOL]     ++flushed; [EOL]     super.flush(); [EOL] } <line_num>: 61,66
@Override [EOL] public void flush() { [EOL]     ++flushed; [EOL]     super.flush(); [EOL] } <line_num>: 73,78
public void testNoAutoCloseGenerator() throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     assertTrue(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)); [EOL]     f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET); [EOL]     assertFalse(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)); [EOL]     @SuppressWarnings("resource") [EOL]     MyWriter output = new MyWriter(); [EOL]     JsonGenerator jg = f.createGenerator(output); [EOL]     assertFalse(output.isClosed()); [EOL]     jg.writeNumber(39); [EOL]     jg.close(); [EOL]     assertFalse(output.isClosed()); [EOL] } <line_num>: 92,111
public void testCloseGenerator() throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     f.enable(JsonGenerator.Feature.AUTO_CLOSE_TARGET); [EOL]     @SuppressWarnings("resource") [EOL]     MyWriter output = new MyWriter(); [EOL]     JsonGenerator jg = f.createGenerator(output); [EOL]     assertFalse(output.isClosed()); [EOL]     jg.writeNumber(39); [EOL]     jg.close(); [EOL]     assertTrue(output.isClosed()); [EOL] } <line_num>: 113,127
public void testNoAutoCloseOutputStream() throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET); [EOL]     @SuppressWarnings("resource") [EOL]     MyStream output = new MyStream(); [EOL]     JsonGenerator jg = f.createGenerator(output, JsonEncoding.UTF8); [EOL]     assertFalse(output.isClosed()); [EOL]     jg.writeNumber(39); [EOL]     jg.close(); [EOL]     assertFalse(output.isClosed()); [EOL] } <line_num>: 129,141
public void testAutoCloseArraysAndObjects() throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     assertTrue(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = f.createGenerator(sw); [EOL]     jg.writeStartArray(); [EOL]     jg.close(); [EOL]     assertEquals("[]", sw.toString()); [EOL]     sw = new StringWriter(); [EOL]     jg = f.createGenerator(sw); [EOL]     jg.writeStartObject(); [EOL]     jg.close(); [EOL]     assertEquals("{}", sw.toString()); [EOL] } <line_num>: 143,163
public void testNoAutoCloseArraysAndObjects() throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     f.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = f.createGenerator(sw); [EOL]     jg.writeStartArray(); [EOL]     jg.close(); [EOL]     assertEquals("[", sw.toString()); [EOL]     sw = new StringWriter(); [EOL]     jg = f.createGenerator(sw); [EOL]     jg.writeStartObject(); [EOL]     jg.close(); [EOL]     assertEquals("{", sw.toString()); [EOL] } <line_num>: 165,183
@SuppressWarnings("resource") [EOL] public void testAutoFlushOrNot() throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     assertTrue(f.isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)); [EOL]     MyChars sw = new MyChars(); [EOL]     JsonGenerator jg = f.createGenerator(sw); [EOL]     jg.writeStartArray(); [EOL]     jg.writeEndArray(); [EOL]     assertEquals(0, sw.flushed); [EOL]     jg.flush(); [EOL]     assertEquals(1, sw.flushed); [EOL]     jg.close(); [EOL]     MyBytes bytes = new MyBytes(); [EOL]     jg = f.createGenerator(bytes, JsonEncoding.UTF8); [EOL]     jg.writeStartArray(); [EOL]     jg.writeEndArray(); [EOL]     assertEquals(0, bytes.flushed); [EOL]     jg.flush(); [EOL]     assertEquals(1, bytes.flushed); [EOL]     assertEquals(2, bytes.toByteArray().length); [EOL]     jg.close(); [EOL]     f.disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM); [EOL]     sw = new MyChars(); [EOL]     jg = f.createGenerator(sw); [EOL]     jg.writeStartArray(); [EOL]     jg.writeEndArray(); [EOL]     assertEquals(0, sw.flushed); [EOL]     jg.flush(); [EOL]     assertEquals(0, sw.flushed); [EOL]     jg.close(); [EOL]     assertEquals("[]", sw.toString()); [EOL]     bytes = new MyBytes(); [EOL]     jg = f.createGenerator(bytes, JsonEncoding.UTF8); [EOL]     jg.writeStartArray(); [EOL]     jg.writeEndArray(); [EOL]     assertEquals(0, bytes.flushed); [EOL]     jg.flush(); [EOL]     assertEquals(0, bytes.flushed); [EOL]     jg.close(); [EOL]     assertEquals(2, bytes.toByteArray().length); [EOL] } <line_num>: 186,234
