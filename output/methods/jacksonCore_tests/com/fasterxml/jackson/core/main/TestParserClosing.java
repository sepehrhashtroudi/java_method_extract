public MyReader(String contents) { [EOL]     super(contents); [EOL] } <line_num>: 140,142
public MyStream(byte[] data) { [EOL]     super(data); [EOL] } <line_num>: 157,159
public void testNoAutoCloseReader() throws Exception { [EOL]     final String DOC = "[ 1 ]"; [EOL]     JsonFactory f = new JsonFactory(); [EOL]     assertTrue(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)); [EOL]     f.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE); [EOL]     assertFalse(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)); [EOL]     @SuppressWarnings("resource") [EOL]     MyReader input = new MyReader(DOC); [EOL]     JsonParser jp = f.createParser(input); [EOL]     assertFalse(input.isClosed()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     assertFalse(input.isClosed()); [EOL]     jp.close(); [EOL]     assertFalse(input.isClosed()); [EOL] } <line_num>: 23,50
@SuppressWarnings("resource") [EOL] public void testAutoCloseReader() throws Exception { [EOL]     final String DOC = "[ 1 ]"; [EOL]     JsonFactory f = new JsonFactory(); [EOL]     f.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); [EOL]     assertTrue(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)); [EOL]     MyReader input = new MyReader(DOC); [EOL]     JsonParser jp = f.createParser(input); [EOL]     assertFalse(input.isClosed()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     assertTrue(input.isClosed()); [EOL]     input = new MyReader(DOC); [EOL]     jp = f.createParser(input); [EOL]     assertFalse(input.isClosed()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     assertTrue(input.isClosed()); [EOL] } <line_num>: 52,77
@SuppressWarnings("resource") [EOL] public void testNoAutoCloseInputStream() throws Exception { [EOL]     final String DOC = "[ 1 ]"; [EOL]     JsonFactory f = new JsonFactory(); [EOL]     f.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE); [EOL]     MyStream input = new MyStream(DOC.getBytes("UTF-8")); [EOL]     JsonParser jp = f.createParser(input); [EOL]     assertFalse(input.isClosed()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     assertFalse(input.isClosed()); [EOL]     jp.close(); [EOL]     assertFalse(input.isClosed()); [EOL] } <line_num>: 79,100
public void testReleaseContentBytes() throws Exception { [EOL]     byte[] input = "[1]foobar".getBytes("UTF-8"); [EOL]     JsonParser jp = new JsonFactory().createParser(input); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     ByteArrayOutputStream out = new ByteArrayOutputStream(); [EOL]     assertEquals(6, jp.releaseBuffered(out)); [EOL]     assertArrayEquals("foobar".getBytes("UTF-8"), out.toByteArray()); [EOL]     jp.close(); [EOL] } <line_num>: 103,115
public void testReleaseContentChars() throws Exception { [EOL]     JsonParser jp = new JsonFactory().createParser("[true]xyz"); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     StringWriter sw = new StringWriter(); [EOL]     assertEquals(3, jp.releaseBuffered(sw)); [EOL]     assertEquals("xyz", sw.toString()); [EOL]     jp.close(); [EOL] } <line_num>: 117,128
@Override [EOL] public void close() { [EOL]     mIsClosed = true; [EOL]     super.close(); [EOL] } <line_num>: 144,148
public boolean isClosed() { [EOL]     return mIsClosed; [EOL] } <line_num>: 150,150
@Override [EOL] public void close() throws IOException { [EOL]     mIsClosed = true; [EOL]     super.close(); [EOL] } <line_num>: 161,165
public boolean isClosed() { [EOL]     return mIsClosed; [EOL] } <line_num>: 167,167
