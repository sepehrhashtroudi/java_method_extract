@Override [EOL] public void writeEndObject(JsonGenerator jg, int nrOfEntries) throws IOException, JsonGenerationException { [EOL]     jg.writeRaw("(" + nrOfEntries + ")}"); [EOL] } <line_num>: 19,24
@Override [EOL] public void writeEndArray(JsonGenerator jg, int nrOfValues) throws IOException, JsonGenerationException { [EOL]     jg.writeRaw("(" + nrOfValues + ")]"); [EOL] } <line_num>: 26,31
public void testObjectCount() throws Exception { [EOL]     final String EXP = "{\"x\":{\"a\":1,\"b\":2(2)}(1)}"; [EOL]     final JsonFactory jf = new JsonFactory(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         boolean useBytes = (i > 0); [EOL]         ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]         StringWriter sw = new StringWriter(); [EOL]         JsonGenerator gen = useBytes ? jf.createGenerator(bytes) : jf.createGenerator(sw); [EOL]         gen.setPrettyPrinter(new CountPrinter()); [EOL]         gen.writeStartObject(); [EOL]         gen.writeFieldName("x"); [EOL]         gen.writeStartObject(); [EOL]         gen.writeNumberField("a", 1); [EOL]         gen.writeNumberField("b", 2); [EOL]         gen.writeEndObject(); [EOL]         gen.writeEndObject(); [EOL]         gen.close(); [EOL]         String json = useBytes ? bytes.toString("UTF-8") : sw.toString(); [EOL]         assertEquals(EXP, json); [EOL]     } [EOL] } <line_num>: 40,64
public void testArrayCount() throws Exception { [EOL]     final String EXP = "[6,[1,2,9(3)](2)]"; [EOL]     final JsonFactory jf = new JsonFactory(); [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         boolean useBytes = (i > 0); [EOL]         ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]         StringWriter sw = new StringWriter(); [EOL]         JsonGenerator gen = useBytes ? jf.createGenerator(bytes) : jf.createGenerator(sw); [EOL]         gen.setPrettyPrinter(new CountPrinter()); [EOL]         gen.writeStartArray(); [EOL]         gen.writeNumber(6); [EOL]         gen.writeStartArray(); [EOL]         gen.writeNumber(1); [EOL]         gen.writeNumber(2); [EOL]         gen.writeNumber(9); [EOL]         gen.writeEndArray(); [EOL]         gen.writeEndArray(); [EOL]         gen.close(); [EOL]         String json = useBytes ? bytes.toString("UTF-8") : sw.toString(); [EOL]         assertEquals(EXP, json); [EOL]     } [EOL] } <line_num>: 66,92
public void testSimpleDocWithDefault() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]     gen.useDefaultPrettyPrinter(); [EOL]     _verifyPrettyPrinter(gen, sw); [EOL]     gen.close(); [EOL] } <line_num>: 94,101
@Override [EOL] public void beforeArrayValues(JsonGenerator jg) throws IOException, JsonGenerationException { [EOL]     jg.writeRaw("\t"); [EOL] } <line_num>: 118,123
@SuppressWarnings("resource") [EOL] public void testSimpleDocWithMinimal() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]     gen.setPrettyPrinter(new MinimalPrettyPrinter()); [EOL]     String docStr = _verifyPrettyPrinter(gen, sw); [EOL]     assertEquals(-1, docStr.indexOf('\n')); [EOL]     assertEquals(-1, docStr.indexOf('\t')); [EOL]     gen = new JsonFactory().createGenerator(sw); [EOL]     gen.setPrettyPrinter(new MinimalPrettyPrinter() { [EOL]  [EOL]         @Override [EOL]         public void beforeArrayValues(JsonGenerator jg) throws IOException, JsonGenerationException { [EOL]             jg.writeRaw("\t"); [EOL]         } [EOL]     }); [EOL]     docStr = _verifyPrettyPrinter(gen, sw); [EOL]     assertEquals(-1, docStr.indexOf('\n')); [EOL]     assertTrue(docStr.indexOf('\t') >= 0); [EOL]     gen.close(); [EOL] } <line_num>: 103,129
public void testCustomRootSeparatorWithPP() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     assertEquals("{} {} []", _generateRoot(jf, null)); [EOL]     assertEquals("{ } { } [ ]", _generateRoot(jf, new DefaultPrettyPrinter())); [EOL]     assertEquals("{ }|{ }|[ ]", _generateRoot(jf, new DefaultPrettyPrinter("|"))); [EOL] } <line_num>: 132,141
public void testCustomRootSeparatorWithFactory() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     jf.setRootValueSeparator("##"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = jf.createGenerator(sw); [EOL]     gen.writeNumber(13); [EOL]     gen.writeBoolean(false); [EOL]     gen.writeNull(); [EOL]     gen.close(); [EOL]     assertEquals("13##false##null", sw.toString()); [EOL] } <line_num>: 144,155
private String _verifyPrettyPrinter(JsonGenerator gen, StringWriter sw) throws Exception { [EOL]     gen.writeStartArray(); [EOL]     gen.writeNumber(3); [EOL]     gen.writeString("abc"); [EOL]     gen.writeStartArray(); [EOL]     gen.writeBoolean(true); [EOL]     gen.writeEndArray(); [EOL]     gen.writeStartObject(); [EOL]     gen.writeFieldName("f"); [EOL]     gen.writeNull(); [EOL]     gen.writeFieldName("f2"); [EOL]     gen.writeNull(); [EOL]     gen.writeEndObject(); [EOL]     gen.writeEndArray(); [EOL]     gen.close(); [EOL]     String docStr = sw.toString(); [EOL]     JsonParser jp = createParserUsingReader(docStr); [EOL]     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(3, jp.getIntValue()); [EOL]     assertEquals(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertEquals("abc", jp.getText()); [EOL]     assertEquals(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertEquals(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertEquals(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("f", jp.getText()); [EOL]     assertEquals(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertEquals(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("f2", jp.getText()); [EOL]     assertEquals(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]     assertEquals(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertEquals(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     return docStr; [EOL] } <line_num>: 163,211
protected String _generateRoot(JsonFactory jf, PrettyPrinter pp) throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]     gen.setPrettyPrinter(pp); [EOL]     gen.writeStartObject(); [EOL]     gen.writeEndObject(); [EOL]     gen.writeStartObject(); [EOL]     gen.writeEndObject(); [EOL]     gen.writeStartArray(); [EOL]     gen.writeEndArray(); [EOL]     gen.close(); [EOL]     return sw.toString(); [EOL] } <line_num>: 213,226
