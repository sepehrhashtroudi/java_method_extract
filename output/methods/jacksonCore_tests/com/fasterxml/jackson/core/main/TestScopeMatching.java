public void testUnclosedArray() throws Exception { [EOL]     @SuppressWarnings("resource") [EOL]     JsonParser jp = createParserUsingReader("[ 1, 2"); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     try { [EOL]         jp.nextToken(); [EOL]         fail("Expected an exception for unclosed ARRAY"); [EOL]     } catch (JsonParseException jpe) { [EOL]         verifyException(jpe, "expected close marker for ARRAY"); [EOL]     } [EOL] } <line_num>: 14,28
public void testUnclosedObject() throws Exception { [EOL]     @SuppressWarnings("resource") [EOL]     JsonParser jp = createParserUsingReader("{ \"key\" : 3  "); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     try { [EOL]         jp.nextToken(); [EOL]         fail("Expected an exception for unclosed OBJECT"); [EOL]     } catch (JsonParseException jpe) { [EOL]         verifyException(jpe, "expected close marker for OBJECT"); [EOL]     } [EOL] } <line_num>: 30,44
public void testEOFInName() throws Exception { [EOL]     final String JSON = "{ \"abcd"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp = (i == 0) ? createParserUsingReader(JSON) : createParserUsingStream(JSON, "UTF-8"); [EOL]         assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]         try { [EOL]             jp.nextToken(); [EOL]             fail("Expected an exception for EOF"); [EOL]         } catch (JsonParseException jpe) { [EOL]             verifyException(jpe, "Unexpected end-of-input"); [EOL]         } [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 46,62
public void testWeirdToken() throws Exception { [EOL]     final String JSON = "[ nil ]"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp = (i == 0) ? createParserUsingReader(JSON) : createParserUsingStream(JSON, "UTF-8"); [EOL]         assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         try { [EOL]             jp.nextToken(); [EOL]             fail("Expected an exception for weird token"); [EOL]         } catch (JsonParseException jpe) { [EOL]             verifyException(jpe, "Unrecognized token"); [EOL]         } [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 64,80
public void testMismatchArrayToObject() throws Exception { [EOL]     final String JSON = "[ 1, 2 }"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp = (i == 0) ? createParserUsingReader(JSON) : createParserUsingStream(JSON, "UTF-8"); [EOL]         assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         try { [EOL]             jp.nextToken(); [EOL]             fail("Expected an exception for incorrectly closed ARRAY"); [EOL]         } catch (JsonParseException jpe) { [EOL]             verifyException(jpe, "Unexpected close marker '}': expected ']'"); [EOL]         } [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 82,100
public void testMismatchObjectToArray() throws Exception { [EOL]     final String JSON = "{ ]"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp = (i == 0) ? createParserUsingReader(JSON) : createParserUsingStream(JSON, "UTF-8"); [EOL]         assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]         try { [EOL]             jp.nextToken(); [EOL]             fail("Expected an exception for incorrectly closed OBJECT"); [EOL]         } catch (JsonParseException jpe) { [EOL]             verifyException(jpe, "Unexpected close marker ']': expected '}'"); [EOL]         } [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 102,119
public void testMisssingColon() throws Exception { [EOL]     final String JSON = "{ \"a\" \"b\" }"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp = (i == 0) ? createParserUsingReader(JSON) : createParserUsingStream(JSON, "UTF-8"); [EOL]         assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]         try { [EOL]             assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]             jp.nextToken(); [EOL]             fail("Expected an exception for missing semicolon"); [EOL]         } catch (JsonParseException jpe) { [EOL]             verifyException(jpe, "was expecting a colon"); [EOL]         } [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 121,139
