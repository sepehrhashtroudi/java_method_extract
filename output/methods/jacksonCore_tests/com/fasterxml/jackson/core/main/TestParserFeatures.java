public void testDefaultSettings() { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     assertTrue(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)); [EOL]     assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_COMMENTS)); [EOL]     assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)); [EOL]     assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)); [EOL]     assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS)); [EOL] } <line_num>: 12,20
public void testQuotesRequired() throws Exception { [EOL]     _testQuotesRequired(false); [EOL]     _testQuotesRequired(true); [EOL] } <line_num>: 22,26
public void testTabsDefault() throws Exception { [EOL]     _testTabsDefault(false); [EOL]     _testTabsDefault(true); [EOL] } <line_num>: 31,35
public void testTabsEnabled() throws Exception { [EOL]     _testTabsEnabled(false); [EOL]     _testTabsEnabled(true); [EOL] } <line_num>: 37,41
private void _testQuotesRequired(boolean useStream) throws Exception { [EOL]     final String JSON = "{ test : 3 }"; [EOL]     final String EXP_ERROR_FRAGMENT = "was expecting double-quote to start"; [EOL]     JsonFactory f = new JsonFactory(); [EOL]     JsonParser jp = useStream ? createParserUsingStream(f, JSON, "UTF-8") : createParserUsingReader(f, JSON); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     try { [EOL]         jp.nextToken(); [EOL]     } catch (JsonParseException je) { [EOL]         verifyException(je, EXP_ERROR_FRAGMENT); [EOL]     } finally { [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 49,67
private void _testTabsDefault(boolean useStream) throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     String JSON = "[\"tab:\t\"]"; [EOL]     JsonParser jp = useStream ? createParserUsingStream(f, JSON, "UTF-8") : createParserUsingReader(f, JSON); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     try { [EOL]         jp.nextToken(); [EOL]         jp.getText(); [EOL]         fail("Expected exception"); [EOL]     } catch (JsonParseException e) { [EOL]         verifyException(e, "Illegal unquoted character"); [EOL]     } finally { [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 71,87
private void _testTabsEnabled(boolean useStream) throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     f.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, true); [EOL]     String FIELD = "a\tb"; [EOL]     String VALUE = "\t"; [EOL]     String JSON = "{ " + quote(FIELD) + " : " + quote(VALUE) + "}"; [EOL]     JsonParser jp = useStream ? createParserUsingStream(f, JSON, "UTF-8") : createParserUsingReader(f, JSON); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals(FIELD, jp.getText()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertEquals(VALUE, jp.getText()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 89,106
