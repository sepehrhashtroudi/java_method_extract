public void testBase64UsingInputStream() throws Exception { [EOL]     _testBase64Text(true); [EOL] } <line_num>: 12,15
public void testBase64UsingReader() throws Exception { [EOL]     _testBase64Text(false); [EOL] } <line_num>: 17,20
public void testStreaming() throws IOException { [EOL]     _testStreaming(false); [EOL]     _testStreaming(true); [EOL] } <line_num>: 23,27
@SuppressWarnings("resource") [EOL] public void _testBase64Text(boolean useBytes) throws Exception { [EOL]     final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 }; [EOL]     final Base64Variant[] VARIANTS = { Base64Variants.MIME, Base64Variants.MIME_NO_LINEFEEDS, Base64Variants.MODIFIED_FOR_URL, Base64Variants.PEM }; [EOL]     JsonFactory jsonFactory = new JsonFactory(); [EOL]     final ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]     StringWriter chars = null; [EOL]     for (int len : LENS) { [EOL]         byte[] input = new byte[len]; [EOL]         for (int i = 0; i < input.length; ++i) { [EOL]             input[i] = (byte) i; [EOL]         } [EOL]         for (Base64Variant variant : VARIANTS) { [EOL]             JsonGenerator jgen; [EOL]             if (useBytes) { [EOL]                 bytes.reset(); [EOL]                 jgen = jsonFactory.createGenerator(bytes, JsonEncoding.UTF8); [EOL]             } else { [EOL]                 chars = new StringWriter(); [EOL]                 jgen = jsonFactory.createGenerator(chars); [EOL]             } [EOL]             jgen.writeBinary(variant, input, 0, input.length); [EOL]             jgen.close(); [EOL]             JsonParser jp; [EOL]             if (useBytes) { [EOL]                 jp = jsonFactory.createParser(bytes.toByteArray()); [EOL]             } else { [EOL]                 jp = jsonFactory.createParser(chars.toString()); [EOL]             } [EOL]             assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]             byte[] data = null; [EOL]             try { [EOL]                 data = jp.getBinaryValue(variant); [EOL]             } catch (Exception e) { [EOL]                 IOException ioException = new IOException("Failed (variant " + variant + ", data length " + len + "): " + e.getMessage()); [EOL]                 ioException.initCause(e); [EOL]                 throw ioException; [EOL]             } [EOL]             assertNotNull(data); [EOL]             assertArrayEquals(data, input); [EOL]             assertNull(jp.nextToken()); [EOL]             jp.close(); [EOL]         } [EOL]     } [EOL] } <line_num>: 36,89
private byte[] _generateData(int size) { [EOL]     byte[] result = new byte[size]; [EOL]     for (int i = 0; i < size; ++i) { [EOL]         result[i] = (byte) (i % 255); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 91,98
private void _testStreaming(boolean useBytes) throws IOException { [EOL]     final int[] SIZES = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 12, 100, 350, 1900, 6000, 19000, 65000, 139000 }; [EOL]     JsonFactory jsonFactory = new JsonFactory(); [EOL]     final ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]     StringWriter chars = null; [EOL]     for (int size : SIZES) { [EOL]         byte[] data = _generateData(size); [EOL]         JsonGenerator g; [EOL]         if (useBytes) { [EOL]             bytes.reset(); [EOL]             g = jsonFactory.createGenerator(bytes, JsonEncoding.UTF8); [EOL]         } else { [EOL]             chars = new StringWriter(); [EOL]             g = jsonFactory.createGenerator(chars); [EOL]         } [EOL]         g.writeStartObject(); [EOL]         g.writeFieldName("b"); [EOL]         g.writeBinary(data); [EOL]         g.writeEndObject(); [EOL]         g.close(); [EOL]         JsonParser p; [EOL]         if (useBytes) { [EOL]             p = jsonFactory.createParser(bytes.toByteArray()); [EOL]         } else { [EOL]             p = jsonFactory.createParser(chars.toString()); [EOL]         } [EOL]         assertToken(JsonToken.START_OBJECT, p.nextToken()); [EOL]         assertToken(JsonToken.FIELD_NAME, p.nextToken()); [EOL]         assertEquals("b", p.getCurrentName()); [EOL]         assertToken(JsonToken.VALUE_STRING, p.nextToken()); [EOL]         ByteArrayOutputStream result = new ByteArrayOutputStream(size); [EOL]         int gotten = p.readBinaryValue(result); [EOL]         assertEquals(size, gotten); [EOL]         assertArrayEquals(data, result.toByteArray()); [EOL]         assertToken(JsonToken.END_OBJECT, p.nextToken()); [EOL]         assertNull(p.nextToken()); [EOL]         p.close(); [EOL]     } [EOL] } <line_num>: 100,150
