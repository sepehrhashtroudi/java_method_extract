public ThrottledInputStream(byte[] data, int maxBytes) { [EOL]     this(new ByteArrayInputStream(data), maxBytes); [EOL] } <line_num>: 14,17
public ThrottledInputStream(InputStream in, int maxBytes) { [EOL]     super(in); [EOL]     _maxBytes = maxBytes; [EOL] } <line_num>: 19,23
@Override [EOL] public int read(byte[] buf) throws IOException { [EOL]     return read(buf, 0, buf.length); [EOL] } <line_num>: 25,28
@Override [EOL] public int read(byte[] buf, int offset, int len) throws IOException { [EOL]     return in.read(buf, offset, Math.min(_maxBytes, len)); [EOL] } <line_num>: 30,33
public void testStreamingWrites() throws Exception { [EOL]     final JsonFactory f = new JsonFactory(); [EOL]     _testStreamingWrites(f, true); [EOL]     _testStreamingWrites(f, false); [EOL] } <line_num>: 43,48
public void testIssue55() throws Exception { [EOL]     final JsonFactory f = new JsonFactory(); [EOL]     ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]     JsonGenerator gen = f.createGenerator(bytes); [EOL]     ByteArrayInputStream data = new ByteArrayInputStream(new byte[2000]); [EOL]     gen.writeBinary(data, 1999); [EOL]     gen.close(); [EOL]     final int EXP_LEN = 2670; [EOL]     assertEquals(EXP_LEN, bytes.size()); [EOL]     StringWriter sw = new StringWriter(); [EOL]     gen = f.createGenerator(sw); [EOL]     data = new ByteArrayInputStream(new byte[2000]); [EOL]     gen.writeBinary(data, 1999); [EOL]     gen.close(); [EOL]     assertEquals(EXP_LEN, sw.toString().length()); [EOL] } <line_num>: 51,76
@SuppressWarnings("resource") [EOL] private void _testStreamingWrites(JsonFactory jf, boolean useBytes) throws Exception { [EOL]     final byte[] INPUT = TEXT4.getBytes("UTF-8"); [EOL]     for (Base64Variant variant : VARIANTS) { [EOL]         final String EXP_OUTPUT = "[" + quote(variant.encode(INPUT)) + "]"; [EOL]         for (boolean passLength : new boolean[] { true, false }) { [EOL]             for (int chunkSize : new int[] { 1, 2, 3, 4, 7, 11, 29, 5000 }) { [EOL]                 JsonGenerator jgen; [EOL]                 final ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]                 if (useBytes) { [EOL]                     jgen = jf.createGenerator(bytes); [EOL]                 } else { [EOL]                     jgen = jf.createGenerator(new OutputStreamWriter(bytes, "UTF-8")); [EOL]                 } [EOL]                 jgen.writeStartArray(); [EOL]                 int length = passLength ? INPUT.length : -1; [EOL]                 InputStream data = new ThrottledInputStream(INPUT, chunkSize); [EOL]                 jgen.writeBinary(variant, data, length); [EOL]                 jgen.writeEndArray(); [EOL]                 jgen.close(); [EOL]                 String JSON = bytes.toString("UTF-8"); [EOL]                 assertEquals(EXP_OUTPUT, JSON); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 95,124
