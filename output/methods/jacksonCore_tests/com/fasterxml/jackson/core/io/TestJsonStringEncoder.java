public void testQuoteAsString() throws Exception { [EOL]     JsonStringEncoder encoder = new JsonStringEncoder(); [EOL]     char[] result = encoder.quoteAsString("foobar"); [EOL]     assertArrayEquals("foobar".toCharArray(), result); [EOL]     result = encoder.quoteAsString("\"x\""); [EOL]     assertArrayEquals("\\\"x\\\"".toCharArray(), result); [EOL] } <line_num>: 14,21
public void testQuoteLongAsString() throws Exception { [EOL]     JsonStringEncoder encoder = new JsonStringEncoder(); [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     StringBuilder sb2 = new StringBuilder(); [EOL]     for (int i = 0; i < 1111; ++i) { [EOL]         sb.append('"'); [EOL]         sb2.append("\\\""); [EOL]     } [EOL]     String input = sb.toString(); [EOL]     String exp = sb2.toString(); [EOL]     char[] result = encoder.quoteAsString(input); [EOL]     assertEquals(2 * input.length(), result.length); [EOL]     assertEquals(exp, new String(result)); [EOL] } <line_num>: 24,39
public void testQuoteAsUTF8() throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     JsonStringEncoder encoder = new JsonStringEncoder(); [EOL]     int[] lengths = new int[] { 5, 19, 200, 7000, 21000, 37000 }; [EOL]     for (int length : lengths) { [EOL]         String str = generateRandom(length); [EOL]         StringWriter sw = new StringWriter(length * 2); [EOL]         JsonGenerator jgen = f.createGenerator(sw); [EOL]         jgen.writeString(str); [EOL]         jgen.close(); [EOL]         String encoded = sw.toString(); [EOL]         encoded = encoded.substring(1, encoded.length() - 1); [EOL]         byte[] expected = encoded.getBytes("UTF-8"); [EOL]         byte[] actual = encoder.quoteAsUTF8(str); [EOL]         assertArrayEquals(expected, actual); [EOL]     } [EOL] } <line_num>: 41,62
public void testEncodeAsUTF8() throws Exception { [EOL]     JsonStringEncoder encoder = new JsonStringEncoder(); [EOL]     String[] strings = new String[] { "a", "foobar", "p\u00f6ll\u00f6", "\"foo\"", generateRandom(200), generateRandom(5000), generateRandom(39000) }; [EOL]     for (String str : strings) { [EOL]         assertArrayEquals(str.getBytes("UTF-8"), encoder.encodeAsUTF8(str)); [EOL]     } [EOL] } <line_num>: 64,76
public void testCtrlChars() throws Exception { [EOL]     char[] input = new char[] { 0, 1, 2, 3, 4 }; [EOL]     char[] quoted = JsonStringEncoder.getInstance().quoteAsString(new String(input)); [EOL]     assertEquals("\\u0000\\u0001\\u0002\\u0003\\u0004", new String(quoted)); [EOL] } <line_num>: 79,84
private String generateRandom(int length) { [EOL]     StringBuilder sb = new StringBuilder(length); [EOL]     Random rnd = new Random(length); [EOL]     for (int i = 0; i < length; ++i) { [EOL]         char ch = (char) rnd.nextInt(0xCFFF); [EOL]         sb.append(ch); [EOL]     } [EOL]     return sb.toString(); [EOL] } <line_num>: 93,103
