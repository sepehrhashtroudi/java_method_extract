public void testAsInt() throws Exception { [EOL]     final String input = "[ 1, -3, 4.98, true, false, null, \"-17\", \"foo\" ]"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp; [EOL]         if (i == 0) { [EOL]             jp = createParserUsingReader(input); [EOL]         } else { [EOL]             jp = this.createParserUsingStream(input, "UTF-8"); [EOL]         } [EOL]         assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         assertEquals(0, jp.getValueAsLong()); [EOL]         assertEquals(9, jp.getValueAsLong(9)); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(1, jp.getValueAsLong()); [EOL]         assertEquals(1, jp.getValueAsLong(-99)); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(-3, jp.getValueAsLong()); [EOL]         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]         assertEquals(4, jp.getValueAsLong()); [EOL]         assertEquals(4, jp.getValueAsLong(99)); [EOL]         assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]         assertEquals(1, jp.getValueAsLong()); [EOL]         assertToken(JsonToken.VALUE_FALSE, jp.nextToken()); [EOL]         assertEquals(0, jp.getValueAsLong()); [EOL]         assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]         assertEquals(0, jp.getValueAsLong()); [EOL]         assertEquals(0, jp.getValueAsLong(27)); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(-17, jp.getValueAsLong()); [EOL]         assertEquals(-17, jp.getValueAsLong(3)); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(0, jp.getValueAsLong()); [EOL]         assertEquals(9, jp.getValueAsLong(9)); [EOL]         assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]         assertEquals(0, jp.getValueAsLong()); [EOL]         assertEquals(9, jp.getValueAsLong(9)); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 12,54
public void testAsBoolean() throws Exception { [EOL]     final String input = "[ true, false, null, 1, 0, \"true\", \"false\", \"foo\" ]"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp; [EOL]         if (i == 0) { [EOL]             jp = createParserUsingReader(input); [EOL]         } else { [EOL]             jp = this.createParserUsingStream(input, "UTF-8"); [EOL]         } [EOL]         assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         assertEquals(false, jp.getValueAsBoolean()); [EOL]         assertEquals(true, jp.getValueAsBoolean(true)); [EOL]         assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]         assertEquals(true, jp.getValueAsBoolean()); [EOL]         assertToken(JsonToken.VALUE_FALSE, jp.nextToken()); [EOL]         assertEquals(false, jp.getValueAsBoolean()); [EOL]         assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]         assertEquals(false, jp.getValueAsBoolean()); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(1, jp.getIntValue()); [EOL]         assertEquals(true, jp.getValueAsBoolean()); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(0, jp.getIntValue()); [EOL]         assertEquals(false, jp.getValueAsBoolean()); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(true, jp.getValueAsBoolean()); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(false, jp.getValueAsBoolean()); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(false, jp.getValueAsBoolean()); [EOL]         assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]         assertEquals(false, jp.getValueAsBoolean()); [EOL]         assertEquals(true, jp.getValueAsBoolean(true)); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 59,99
public void testAsLong() throws Exception { [EOL]     final String input = "[ 1, -3, 4.98, true, false, null, \"-17\", \"foo\" ]"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp; [EOL]         if (i == 0) { [EOL]             jp = createParserUsingReader(input); [EOL]         } else { [EOL]             jp = this.createParserUsingStream(input, "UTF-8"); [EOL]         } [EOL]         assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         assertEquals(0L, jp.getValueAsLong()); [EOL]         assertEquals(9L, jp.getValueAsLong(9L)); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(1L, jp.getValueAsLong()); [EOL]         assertEquals(1L, jp.getValueAsLong(-99L)); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(-3L, jp.getValueAsLong()); [EOL]         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]         assertEquals(4L, jp.getValueAsLong()); [EOL]         assertEquals(4L, jp.getValueAsLong(99L)); [EOL]         assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]         assertEquals(1L, jp.getValueAsLong()); [EOL]         assertToken(JsonToken.VALUE_FALSE, jp.nextToken()); [EOL]         assertEquals(0L, jp.getValueAsLong()); [EOL]         assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]         assertEquals(0L, jp.getValueAsLong()); [EOL]         assertEquals(0L, jp.getValueAsLong(27L)); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(-17L, jp.getValueAsLong()); [EOL]         assertEquals(-17L, jp.getValueAsLong(3L)); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(0L, jp.getValueAsLong()); [EOL]         assertEquals(9L, jp.getValueAsLong(9L)); [EOL]         assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]         assertEquals(0L, jp.getValueAsLong()); [EOL]         assertEquals(9L, jp.getValueAsLong(9L)); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 101,143
public void testAsDouble() throws Exception { [EOL]     final String input = "[ 1, -3, 4.98, true, false, null, \"-17.25\", \"foo\" ]"; [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         JsonParser jp; [EOL]         if (i == 0) { [EOL]             jp = createParserUsingReader(input); [EOL]         } else { [EOL]             jp = this.createParserUsingStream(input, "UTF-8"); [EOL]         } [EOL]         assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]         assertEquals(0.0, jp.getValueAsDouble()); [EOL]         assertEquals(9.0, jp.getValueAsDouble(9.0)); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(1., jp.getValueAsDouble()); [EOL]         assertEquals(1., jp.getValueAsDouble(-99.0)); [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]         assertEquals(-3., jp.getValueAsDouble()); [EOL]         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]         assertEquals(4.98, jp.getValueAsDouble()); [EOL]         assertEquals(4.98, jp.getValueAsDouble(12.5)); [EOL]         assertToken(JsonToken.VALUE_TRUE, jp.nextToken()); [EOL]         assertEquals(1.0, jp.getValueAsDouble()); [EOL]         assertToken(JsonToken.VALUE_FALSE, jp.nextToken()); [EOL]         assertEquals(0.0, jp.getValueAsDouble()); [EOL]         assertToken(JsonToken.VALUE_NULL, jp.nextToken()); [EOL]         assertEquals(0.0, jp.getValueAsDouble()); [EOL]         assertEquals(0.0, jp.getValueAsDouble(27.8)); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(-17.25, jp.getValueAsDouble()); [EOL]         assertEquals(-17.25, jp.getValueAsDouble(1.9)); [EOL]         assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]         assertEquals(0.0, jp.getValueAsDouble()); [EOL]         assertEquals(1.25, jp.getValueAsDouble(1.25)); [EOL]         assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]         assertEquals(0.0, jp.getValueAsDouble()); [EOL]         assertEquals(7.5, jp.getValueAsDouble(7.5)); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 145,187
