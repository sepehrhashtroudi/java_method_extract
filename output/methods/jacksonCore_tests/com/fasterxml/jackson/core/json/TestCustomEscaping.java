public MyEscapes() { [EOL]     _asciiEscapes = standardAsciiEscapesForJSON(); [EOL]     _asciiEscapes['a'] = 'A'; [EOL]     _asciiEscapes['b'] = CharacterEscapes.ESCAPE_STANDARD; [EOL]     _asciiEscapes['d'] = CharacterEscapes.ESCAPE_CUSTOM; [EOL] } <line_num>: 32,37
@Override [EOL] public int[] getEscapeCodesForAscii() { [EOL]     return _asciiEscapes; [EOL] } <line_num>: 39,42
@Override [EOL] public SerializableString getEscapeSequence(int ch) { [EOL]     if (ch == 'd') { [EOL]         return new SerializedString("[D]"); [EOL]     } [EOL]     if (ch == TWO_BYTE_ESCAPED) { [EOL]         return TWO_BYTE_ESCAPED_STRING; [EOL]     } [EOL]     if (ch == THREE_BYTE_ESCAPED) { [EOL]         return THREE_BYTE_ESCAPED_STRING; [EOL]     } [EOL]     return null; [EOL] } <line_num>: 44,57
public void testAboveAsciiEscapeWithReader() throws Exception { [EOL]     _testEscapeAboveAscii(false); [EOL] } <line_num>: 71,74
public void testAboveAsciiEscapeWithUTF8Stream() throws Exception { [EOL]     _testEscapeAboveAscii(true); [EOL] } <line_num>: 76,79
public void testEscapeCustomWithReader() throws Exception { [EOL]     _testEscapeCustom(false); [EOL] } <line_num>: 83,86
public void testEscapeCustomWithUTF8Stream() throws Exception { [EOL]     _testEscapeCustom(true); [EOL] } <line_num>: 88,91
@SuppressWarnings("resource") [EOL] private void _testEscapeAboveAscii(boolean useStream) throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     final String VALUE = "chars: [\u00A0]/[\u1234]"; [EOL]     final String KEY = "fun:\u0088:\u3456"; [EOL]     ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]     JsonGenerator jgen; [EOL]     if (useStream) { [EOL]         jgen = f.createGenerator(bytes, JsonEncoding.UTF8); [EOL]     } else { [EOL]         jgen = f.createGenerator(new OutputStreamWriter(bytes, "UTF-8")); [EOL]     } [EOL]     jgen.writeStartArray(); [EOL]     jgen.writeString(VALUE); [EOL]     jgen.writeEndArray(); [EOL]     jgen.close(); [EOL]     String json = bytes.toString("UTF-8"); [EOL]     assertEquals("[" + quote(VALUE) + "]", json); [EOL]     bytes = new ByteArrayOutputStream(); [EOL]     if (useStream) { [EOL]         jgen = f.createGenerator(bytes, JsonEncoding.UTF8); [EOL]     } else { [EOL]         jgen = f.createGenerator(new OutputStreamWriter(bytes, "UTF-8")); [EOL]     } [EOL]     jgen.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII); [EOL]     jgen.writeStartArray(); [EOL]     jgen.writeString(VALUE); [EOL]     jgen.writeEndArray(); [EOL]     jgen.close(); [EOL]     json = bytes.toString("UTF-8"); [EOL]     assertEquals("[" + quote("chars: [\\u00A0]/[\\u1234]") + "]", json); [EOL]     bytes = new ByteArrayOutputStream(); [EOL]     if (useStream) { [EOL]         jgen = f.createGenerator(bytes, JsonEncoding.UTF8); [EOL]     } else { [EOL]         jgen = f.createGenerator(new OutputStreamWriter(bytes, "UTF-8")); [EOL]     } [EOL]     jgen.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII); [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeFieldName(KEY); [EOL]     jgen.writeBoolean(true); [EOL]     jgen.writeEndObject(); [EOL]     jgen.close(); [EOL]     json = bytes.toString("UTF-8"); [EOL]     assertEquals("{" + quote("fun:\\u0088:\\u3456") + ":true}", json); [EOL] } <line_num>: 99,153
@SuppressWarnings("resource") [EOL] private void _testEscapeCustom(boolean useStream) throws Exception { [EOL]     JsonFactory f = new JsonFactory().setCharacterEscapes(new MyEscapes()); [EOL]     final String STR_IN = "[abcd/" + ((char) TWO_BYTE_ESCAPED) + "/" + ((char) THREE_BYTE_ESCAPED) + "]"; [EOL]     final String STR_OUT = "[\\A\\u0062c[D]/" + TWO_BYTE_ESCAPED_STRING + "/" + THREE_BYTE_ESCAPED_STRING + "]"; [EOL]     ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]     JsonGenerator jgen; [EOL]     if (useStream) { [EOL]         jgen = f.createGenerator(bytes, JsonEncoding.UTF8); [EOL]     } else { [EOL]         jgen = f.createGenerator(new OutputStreamWriter(bytes, "UTF-8")); [EOL]     } [EOL]     jgen.writeStartObject(); [EOL]     jgen.writeStringField(STR_IN, STR_IN); [EOL]     jgen.writeEndObject(); [EOL]     jgen.close(); [EOL]     String json = bytes.toString("UTF-8"); [EOL]     assertEquals("{" + quote(STR_OUT) + ":" + quote(STR_OUT) + "}", json); [EOL] } <line_num>: 155,176
