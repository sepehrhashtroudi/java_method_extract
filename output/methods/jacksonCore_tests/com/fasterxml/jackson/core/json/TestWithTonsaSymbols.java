public void testStreamReaderParser() throws Exception { [EOL]     _testWith(true); [EOL] } <line_num>: 24,27
public void testReaderParser() throws Exception { [EOL]     _testWith(false); [EOL] } <line_num>: 29,32
private void _testWith(boolean useStream) throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     String doc = buildDoc(FIELD_COUNT); [EOL]     for (int x = 0; x < 3; ++x) { [EOL]         JsonParser jp = useStream ? jf.createParser(new ByteArrayInputStream(doc.getBytes("UTF-8"))) : jf.createParser(new StringReader(doc)); [EOL]         assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]         for (int i = 0; i < FIELD_COUNT; ++i) { [EOL]             assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]             assertEquals(fieldNameFor(i), jp.getCurrentName()); [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]             assertEquals(i, jp.getIntValue()); [EOL]         } [EOL]         assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 40,63
private String buildDoc(int len) { [EOL]     StringBuilder sb = new StringBuilder(len * 12); [EOL]     sb.append('{'); [EOL]     for (int i = 0; i < len; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append('"'); [EOL]         fieldNameFor(sb, i); [EOL]         sb.append('"'); [EOL]         sb.append(':'); [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append('}'); [EOL]     return sb.toString(); [EOL] } <line_num>: 65,81
