public void testTokenAccess() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     _testTokenAccess(jf, false); [EOL]     _testTokenAccess(jf, true); [EOL] } <line_num>: 18,23
public void testCurrentName() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     _testCurrentName(jf, false); [EOL]     _testCurrentName(jf, true); [EOL] } <line_num>: 25,34
public void _testTokenAccess(JsonFactory jf, boolean useStream) throws Exception { [EOL]     final String DOC = "[ ]"; [EOL]     JsonParser jp = useStream ? jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8"))) : jf.createParser(DOC); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     jp.clearCurrentToken(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertNull(jp.getEmbeddedObject()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.getCurrentToken()); [EOL]     jp.clearCurrentToken(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     try { [EOL]         jp.readValueAsTree(); [EOL]         fail("Should get exception without codec"); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "No ObjectCodec defined"); [EOL]     } [EOL]     jp.close(); [EOL] } <line_num>: 42,64
private void _testCurrentName(JsonFactory jf, boolean useStream) throws Exception { [EOL]     final String DOC = "{\"first\":{\"second\":3, \"third\":false}}"; [EOL]     JsonParser jp = useStream ? jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8"))) : jf.createParser(new StringReader(DOC)); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("first", jp.getCurrentName()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertEquals("first", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("foobar"); [EOL]     assertEquals("foobar", jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("second", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals("second", jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("third", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_FALSE, jp.nextToken()); [EOL]     assertEquals("third", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertEquals("foobar", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     jp.clearCurrentToken(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     jp.close(); [EOL] } <line_num>: 66,99
