public void testDefaultSettings() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS)); [EOL]     JsonParser jp = jf.createParser(new StringReader("[ 1 ]")); [EOL]     assertFalse(jp.isEnabled(JsonParser.Feature.ALLOW_COMMENTS)); [EOL]     jp.close(); [EOL] } <line_num>: 32,40
public void testCommentsDisabled() throws Exception { [EOL]     _testDisabled(DOC_WITH_SLASHSTAR_COMMENT, false); [EOL]     _testDisabled(DOC_WITH_SLASHSLASH_COMMENT, false); [EOL]     _testDisabled(DOC_WITH_SLASHSTAR_COMMENT, true); [EOL]     _testDisabled(DOC_WITH_SLASHSLASH_COMMENT, true); [EOL] } <line_num>: 42,49
public void testCommentsEnabled() throws Exception { [EOL]     _testEnabled(DOC_WITH_SLASHSTAR_COMMENT, false); [EOL]     _testEnabled(DOC_WITH_SLASHSLASH_COMMENT, false); [EOL]     _testEnabled(DOC_WITH_SLASHSTAR_COMMENT, true); [EOL]     _testEnabled(DOC_WITH_SLASHSLASH_COMMENT, true); [EOL] } <line_num>: 51,58
public void testCommentsWithUTF8() throws Exception { [EOL]     final String JSON = "/* \u00a9 2099 Yoyodyne Inc. */\n [ \"bar? \u00a9\" ]\n"; [EOL]     _testWithUTF8Chars(JSON, false); [EOL]     _testWithUTF8Chars(JSON, true); [EOL] } <line_num>: 61,66
private void _testWithUTF8Chars(String doc, boolean useStream) throws IOException { [EOL]     JsonParser jp = _createParser(doc, useStream, true); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 74,82
private void _testDisabled(String doc, boolean useStream) throws IOException { [EOL]     JsonParser jp = _createParser(doc, useStream, false); [EOL]     try { [EOL]         jp.nextToken(); [EOL]         fail("Expected exception for unrecognized comment"); [EOL]     } catch (JsonParseException je) { [EOL]         verifyException(je, "ALLOW_COMMENTS"); [EOL]     } [EOL]     jp.close(); [EOL] } <line_num>: 84,95
private void _testEnabled(String doc, boolean useStream) throws IOException { [EOL]     JsonParser jp = _createParser(doc, useStream, true); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(1, jp.getIntValue()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] } <line_num>: 97,105
private JsonParser _createParser(String doc, boolean useStream, boolean enabled) throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     jf.configure(JsonParser.Feature.ALLOW_COMMENTS, enabled); [EOL]     JsonParser jp = useStream ? jf.createParser(doc.getBytes("UTF-8")) : jf.createParser(doc); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     return jp; [EOL] } <line_num>: 107,117
