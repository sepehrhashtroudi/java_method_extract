public void testIsNextTokenName() throws Exception { [EOL]     _testIsNextTokenName1(false); [EOL]     _testIsNextTokenName1(true); [EOL]     _testIsNextTokenName2(false); [EOL]     _testIsNextTokenName2(true); [EOL] } <line_num>: 22,28
public void testIssue34() throws Exception { [EOL]     _testIssue34(false); [EOL]     _testIssue34(true); [EOL] } <line_num>: 31,35
public void testIssue38() throws Exception { [EOL]     _testIssue38(false); [EOL]     _testIssue38(true); [EOL] } <line_num>: 38,42
private void _testIsNextTokenName1(boolean useStream) throws Exception { [EOL]     final String DOC = "{\"name\":123,\"name2\":14,\"x\":\"name\"}"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     JsonParser jp = useStream ? jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8"))) : jf.createParser(new StringReader(DOC)); [EOL]     SerializedString NAME = new SerializedString("name"); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.START_OBJECT, jp.getCurrentToken()); [EOL]     assertTrue(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]     assertEquals(NAME.getValue(), jp.getCurrentName()); [EOL]     assertEquals(NAME.getValue(), jp.getText()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]     assertEquals("name2", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]     assertEquals("x", jp.getCurrentName()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.getCurrentToken()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.END_OBJECT, jp.getCurrentToken()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     jp.close(); [EOL] } <line_num>: 50,87
private void _testIsNextTokenName2(boolean useStream) throws Exception { [EOL]     final String DOC = "{\"name\":123,\"name2\":14,\"x\":\"name\"}"; [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     JsonParser jp = useStream ? jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8"))) : jf.createParser(new StringReader(DOC)); [EOL]     SerializableString NAME = new SerializedString("name"); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.START_OBJECT, jp.getCurrentToken()); [EOL]     assertTrue(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]     assertEquals(NAME.getValue(), jp.getCurrentName()); [EOL]     assertEquals(NAME.getValue(), jp.getText()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken()); [EOL]     assertEquals(123, jp.getIntValue()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]     assertEquals("name2", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken()); [EOL]     assertEquals("x", jp.getCurrentName()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.getCurrentToken()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertToken(JsonToken.END_OBJECT, jp.getCurrentToken()); [EOL]     assertFalse(jp.nextFieldName(NAME)); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     jp.close(); [EOL] } <line_num>: 89,126
private void _testIssue34(boolean useStream) throws Exception { [EOL]     final int TESTROUNDS = 223; [EOL]     final String DOC_PART = "{ \"fieldName\": 1 }"; [EOL]     StringBuilder sb = new StringBuilder(2000); [EOL]     for (int i = 0; i < TESTROUNDS; ++i) { [EOL]         sb.append(DOC_PART); [EOL]     } [EOL]     final String DOC = sb.toString(); [EOL]     SerializableString fieldName = new SerializedString("fieldName"); [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     JsonParser parser = useStream ? jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8"))) : jf.createParser(new StringReader(DOC)); [EOL]     for (int i = 0; i < TESTROUNDS - 1; i++) { [EOL]         assertEquals(JsonToken.START_OBJECT, parser.nextToken()); [EOL]         assertTrue(parser.nextFieldName(fieldName)); [EOL]         parser.nextLongValue(-1); [EOL]         assertEquals(JsonToken.END_OBJECT, parser.nextToken()); [EOL]     } [EOL]     assertEquals(JsonToken.START_OBJECT, parser.nextToken()); [EOL]     assertTrue(parser.nextFieldName(fieldName)); [EOL]     parser.close(); [EOL] } <line_num>: 128,161
private void _testIssue38(boolean useStream) throws Exception { [EOL]     final String DOC = "{\"field\" :\"value\"}"; [EOL]     SerializableString fieldName = new SerializedString("field"); [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     JsonParser parser = useStream ? jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8"))) : jf.createParser(new StringReader(DOC)); [EOL]     assertEquals(JsonToken.START_OBJECT, parser.nextToken()); [EOL]     assertTrue(parser.nextFieldName(fieldName)); [EOL]     assertEquals(JsonToken.VALUE_STRING, parser.nextToken()); [EOL]     assertEquals("value", parser.getText()); [EOL]     assertEquals(JsonToken.END_OBJECT, parser.nextToken()); [EOL]     assertNull(parser.nextToken()); [EOL]     parser.close(); [EOL] } <line_num>: 163,178
