public void testConfigDefaults() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     JsonGenerator jg = jf.createGenerator(new StringWriter()); [EOL]     assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS)); [EOL]     assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)); [EOL]     jg.close(); [EOL] } <line_num>: 16,23
public void testFieldNameQuoting() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     _testFieldNameQuoting(jf, true); [EOL]     jf.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES); [EOL]     _testFieldNameQuoting(jf, false); [EOL]     jf.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES); [EOL]     _testFieldNameQuoting(jf, true); [EOL] } <line_num>: 25,36
public void testNonNumericQuoting() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     _testNonNumericQuoting(jf, true); [EOL]     jf.disable(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS); [EOL]     _testNonNumericQuoting(jf, false); [EOL]     jf.enable(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS); [EOL]     _testNonNumericQuoting(jf, true); [EOL] } <line_num>: 38,50
public void testNumbersAsJSONStrings() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     assertEquals("[1,2,1.25,2.25,3001,0.5,-1]", _writeNumbers(jf)); [EOL]     jf.configure(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS, true); [EOL]     assertEquals("[\"1\",\"2\",\"1.25\",\"2.25\",\"3001\",\"0.5\",\"-1\"]", _writeNumbers(jf)); [EOL] } <line_num>: 56,66
public void testBigDecimalAsPlain() throws IOException { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     BigDecimal ENG = new BigDecimal("1E+2"); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = jf.createGenerator(sw); [EOL]     jg.writeNumber(ENG); [EOL]     jg.close(); [EOL]     assertEquals("1E+2", sw.toString()); [EOL]     jf.configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true); [EOL]     sw = new StringWriter(); [EOL]     jg = jf.createGenerator(sw); [EOL]     jg.writeNumber(ENG); [EOL]     jg.close(); [EOL]     assertEquals("100", sw.toString()); [EOL] } <line_num>: 69,86
private String _writeNumbers(JsonFactory jf) throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = jf.createGenerator(sw); [EOL]     jg.writeStartArray(); [EOL]     jg.writeNumber(1); [EOL]     jg.writeNumber(2L); [EOL]     jg.writeNumber(1.25); [EOL]     jg.writeNumber(2.25f); [EOL]     jg.writeNumber(BigInteger.valueOf(3001)); [EOL]     jg.writeNumber(BigDecimal.valueOf(0.5)); [EOL]     jg.writeNumber("-1"); [EOL]     jg.writeEndArray(); [EOL]     jg.close(); [EOL]     return sw.toString(); [EOL] } <line_num>: 88,105
private void _testFieldNameQuoting(JsonFactory jf, boolean quoted) throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = jf.createGenerator(sw); [EOL]     jg.writeStartObject(); [EOL]     jg.writeFieldName("foo"); [EOL]     jg.writeNumber(1); [EOL]     jg.writeEndObject(); [EOL]     jg.close(); [EOL]     String result = sw.toString(); [EOL]     if (quoted) { [EOL]         assertEquals("{\"foo\":1}", result); [EOL]     } else { [EOL]         assertEquals("{foo:1}", result); [EOL]     } [EOL] } <line_num>: 113,130
private void _testNonNumericQuoting(JsonFactory jf, boolean quoted) throws IOException { [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = jf.createGenerator(sw); [EOL]     jg.writeStartObject(); [EOL]     jg.writeFieldName("double"); [EOL]     jg.writeNumber(Double.NaN); [EOL]     jg.writeEndObject(); [EOL]     jg.writeStartObject(); [EOL]     jg.writeFieldName("float"); [EOL]     jg.writeNumber(Float.NaN); [EOL]     jg.writeEndObject(); [EOL]     jg.close(); [EOL]     String result = sw.toString(); [EOL]     if (quoted) { [EOL]         assertEquals("{\"double\":\"NaN\"} {\"float\":\"NaN\"}", result); [EOL]     } else { [EOL]         assertEquals("{\"double\":NaN} {\"float\":NaN}", result); [EOL]     } [EOL] } <line_num>: 131,152
