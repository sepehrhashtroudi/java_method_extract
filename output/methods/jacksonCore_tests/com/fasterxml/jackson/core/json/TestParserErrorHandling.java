public void testInvalidKeywordsStream() throws Exception { [EOL]     _testInvalidKeywords(true); [EOL] } <line_num>: 13,15
public void testInvalidKeywordsReader() throws Exception { [EOL]     _testInvalidKeywords(false); [EOL] } <line_num>: 17,19
private void _testInvalidKeywords(boolean useStream) throws Exception { [EOL]     doTestInvalidKeyword1(useStream, "nul"); [EOL]     doTestInvalidKeyword1(useStream, "Null"); [EOL]     doTestInvalidKeyword1(useStream, "nulla"); [EOL]     doTestInvalidKeyword1(useStream, "fal"); [EOL]     doTestInvalidKeyword1(useStream, "False"); [EOL]     doTestInvalidKeyword1(useStream, "fals0"); [EOL]     doTestInvalidKeyword1(useStream, "falsett0"); [EOL]     doTestInvalidKeyword1(useStream, "tr"); [EOL]     doTestInvalidKeyword1(useStream, "truE"); [EOL]     doTestInvalidKeyword1(useStream, "treu"); [EOL]     doTestInvalidKeyword1(useStream, "trueenough"); [EOL]     doTestInvalidKeyword1(useStream, "C"); [EOL] } <line_num>: 27,41
private void doTestInvalidKeyword1(boolean useStream, String value) throws IOException { [EOL]     final String doc = "{ \"key1\" : " + value + " }"; [EOL]     JsonParser jp = useStream ? createParserUsingStream(doc, "UTF-8") : createParserUsingReader(doc); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     try { [EOL]         assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]         jp.nextToken(); [EOL]         fail("Expected an exception for malformed value keyword"); [EOL]     } catch (JsonParseException jex) { [EOL]         verifyException(jex, "Unrecognized token"); [EOL]         verifyException(jex, value); [EOL]     } finally { [EOL]         jp.close(); [EOL]     } [EOL]     jp = useStream ? createParserUsingStream(value, "UTF-8") : createParserUsingReader(value); [EOL]     try { [EOL]         jp.nextToken(); [EOL]         fail("Expected an exception for malformed value keyword"); [EOL]     } catch (JsonParseException jex) { [EOL]         verifyException(jex, "Unrecognized token"); [EOL]         verifyException(jex, value); [EOL]     } finally { [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 43,76
