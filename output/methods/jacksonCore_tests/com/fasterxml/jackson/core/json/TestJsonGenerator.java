public void testStringWrite() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     String[] inputStrings = new String[] { "", "X", "1234567890" }; [EOL]     for (int useReader = 0; useReader < 2; ++useReader) { [EOL]         for (int writeString = 0; writeString < 2; ++writeString) { [EOL]             for (int strIx = 0; strIx < inputStrings.length; ++strIx) { [EOL]                 String input = inputStrings[strIx]; [EOL]                 JsonGenerator gen; [EOL]                 ByteArrayOutputStream bout = new ByteArrayOutputStream(); [EOL]                 if (useReader != 0) { [EOL]                     gen = jf.createGenerator(new OutputStreamWriter(bout, "UTF-8")); [EOL]                 } else { [EOL]                     gen = jf.createGenerator(bout, JsonEncoding.UTF8); [EOL]                 } [EOL]                 if (writeString > 0) { [EOL]                     gen.writeString(input); [EOL]                 } else { [EOL]                     int len = input.length(); [EOL]                     char[] buffer = new char[len + 20]; [EOL]                     input.getChars(0, len, buffer, strIx); [EOL]                     gen.writeString(buffer, strIx, len); [EOL]                 } [EOL]                 gen.flush(); [EOL]                 gen.close(); [EOL]                 JsonParser jp = jf.createParser(new ByteArrayInputStream(bout.toByteArray())); [EOL]                 JsonToken t = jp.nextToken(); [EOL]                 assertNotNull("Document \"" + bout.toString("UTF-8") + "\" yielded no tokens", t); [EOL]                 assertEquals(JsonToken.VALUE_STRING, t); [EOL]                 assertEquals(input, jp.getText()); [EOL]                 assertEquals(null, jp.nextToken()); [EOL]                 jp.close(); [EOL]             } [EOL]         } [EOL]     } [EOL] } <line_num>: 16,54
public void testIntWrite() throws Exception { [EOL]     doTestIntWrite(false); [EOL]     doTestIntWrite(true); [EOL] } <line_num>: 56,61
public void testLongWrite() throws Exception { [EOL]     doTestLongWrite(false); [EOL]     doTestLongWrite(true); [EOL] } <line_num>: 63,68
public void testBooleanWrite() throws Exception { [EOL]     for (int i = 0; i < 4; ++i) { [EOL]         boolean state = (i & 1) == 0; [EOL]         boolean pad = (i & 2) == 0; [EOL]         StringWriter sw = new StringWriter(); [EOL]         JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]         gen.writeBoolean(state); [EOL]         if (pad) { [EOL]             gen.writeRaw(" "); [EOL]         } [EOL]         gen.close(); [EOL]         String docStr = sw.toString(); [EOL]         JsonParser jp = createParserUsingReader(docStr); [EOL]         JsonToken t = jp.nextToken(); [EOL]         String exp = Boolean.valueOf(state).toString(); [EOL]         if (!exp.equals(jp.getText())) { [EOL]             fail("Expected '" + exp + "', got '" + jp.getText()); [EOL]         } [EOL]         assertEquals(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE, t); [EOL]         assertEquals(null, jp.nextToken()); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 70,94
public void testNullWrite() throws Exception { [EOL]     for (int i = 0; i < 2; ++i) { [EOL]         boolean pad = (i & 1) == 0; [EOL]         StringWriter sw = new StringWriter(); [EOL]         JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]         gen.writeNull(); [EOL]         if (pad) { [EOL]             gen.writeRaw(" "); [EOL]         } [EOL]         gen.close(); [EOL]         String docStr = sw.toString(); [EOL]         JsonParser jp = createParserUsingReader(docStr); [EOL]         JsonToken t = jp.nextToken(); [EOL]         String exp = "null"; [EOL]         if (!exp.equals(jp.getText())) { [EOL]             fail("Expected '" + exp + "', got '" + jp.getText()); [EOL]         } [EOL]         assertEquals(JsonToken.VALUE_NULL, t); [EOL]         assertEquals(null, jp.nextToken()); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 96,119
public void testRootIntsWrite() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]     gen.writeNumber(1); [EOL]     gen.writeNumber(2); [EOL]     gen.writeNumber(-13); [EOL]     gen.close(); [EOL]     String docStr = sw.toString(); [EOL]     JsonParser jp = createParserUsingReader(docStr); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(1, jp.getIntValue()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(2, jp.getIntValue()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken()); [EOL]     assertEquals(-13, jp.getIntValue()); [EOL]     jp.close(); [EOL] } <line_num>: 123,143
public void testFieldValueWrites() throws Exception { [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]     gen.writeStartObject(); [EOL]     gen.writeNumberField("long", 3L); [EOL]     gen.writeNumberField("double", 0.25); [EOL]     gen.writeNumberField("float", -0.25f); [EOL]     gen.writeEndObject(); [EOL]     gen.close(); [EOL]     assertEquals("{\"long\":3,\"double\":0.25,\"float\":-0.25}", sw.toString().trim()); [EOL] } <line_num>: 147,160
public void testOutputContext() { [EOL] } <line_num>: 165,165
private void doTestIntWrite(boolean pad) throws Exception { [EOL]     int[] VALUES = new int[] { 0, 1, -9, 32, -32, 57, 13240, -9999, Integer.MAX_VALUE, Integer.MAX_VALUE }; [EOL]     for (int i = 0; i < VALUES.length; ++i) { [EOL]         int VALUE = VALUES[i]; [EOL]         StringWriter sw = new StringWriter(); [EOL]         JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]         gen.writeNumber(VALUE); [EOL]         if (pad) { [EOL]             gen.writeRaw(" "); [EOL]         } [EOL]         gen.close(); [EOL]         String docStr = sw.toString(); [EOL]         JsonParser jp = createParserUsingReader(docStr); [EOL]         JsonToken t = jp.nextToken(); [EOL]         assertNotNull("Document \"" + docStr + "\" yielded no tokens", t); [EOL]         String exp = "" + VALUE; [EOL]         if (!exp.equals(jp.getText())) { [EOL]             fail("Expected '" + exp + "', got '" + jp.getText()); [EOL]         } [EOL]         assertEquals(JsonToken.VALUE_NUMBER_INT, t); [EOL]         assertEquals(VALUE, jp.getIntValue()); [EOL]         assertEquals(null, jp.nextToken()); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 241,270
private void doTestLongWrite(boolean pad) throws Exception { [EOL]     long[] VALUES = new long[] { 0L, 1L, -1L, -12005002294L, Long.MIN_VALUE, Long.MAX_VALUE }; [EOL]     for (int i = 0; i < VALUES.length; ++i) { [EOL]         long VALUE = VALUES[i]; [EOL]         StringWriter sw = new StringWriter(); [EOL]         JsonGenerator gen = new JsonFactory().createGenerator(sw); [EOL]         gen.writeNumber(VALUE); [EOL]         if (pad) { [EOL]             gen.writeRaw(" "); [EOL]         } [EOL]         gen.close(); [EOL]         String docStr = sw.toString(); [EOL]         JsonParser jp = createParserUsingReader(docStr); [EOL]         JsonToken t = jp.nextToken(); [EOL]         assertNotNull("Document \"" + docStr + "\" yielded no tokens", t); [EOL]         String exp = "" + VALUE; [EOL]         if (!exp.equals(jp.getText())) { [EOL]             fail("Expected '" + exp + "', got '" + jp.getText()); [EOL]         } [EOL]         assertEquals(JsonToken.VALUE_NUMBER_INT, t); [EOL]         assertEquals(VALUE, jp.getLongValue()); [EOL]         assertEquals(null, jp.nextToken()); [EOL]         jp.close(); [EOL]     } [EOL] } <line_num>: 272,300
