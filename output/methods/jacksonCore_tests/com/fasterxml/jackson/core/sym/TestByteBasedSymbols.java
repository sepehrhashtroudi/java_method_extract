public void testSharedSymbols() throws Exception { [EOL]     JsonFactory jf = new JsonFactory(); [EOL]     String DOC0 = "{ \"a\" : 1, \"x\" : [ ] }"; [EOL]     JsonParser jp0 = createParser(jf, DOC0); [EOL]     while (jp0.nextToken() != JsonToken.START_ARRAY) { [EOL]     } [EOL]     String doc1 = createDoc(FIELD_NAMES, true); [EOL]     String doc2 = createDoc(FIELD_NAMES, false); [EOL]     for (int x = 0; x < 2; ++x) { [EOL]         JsonParser jp1 = createParser(jf, doc1); [EOL]         JsonParser jp2 = createParser(jf, doc2); [EOL]         assertToken(JsonToken.START_OBJECT, jp1.nextToken()); [EOL]         assertToken(JsonToken.START_OBJECT, jp2.nextToken()); [EOL]         int len = FIELD_NAMES.length; [EOL]         for (int i = 0; i < len; ++i) { [EOL]             assertToken(JsonToken.FIELD_NAME, jp1.nextToken()); [EOL]             assertToken(JsonToken.FIELD_NAME, jp2.nextToken()); [EOL]             assertEquals(FIELD_NAMES[i], jp1.getCurrentName()); [EOL]             assertEquals(FIELD_NAMES[len - (i + 1)], jp2.getCurrentName()); [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, jp1.nextToken()); [EOL]             assertToken(JsonToken.VALUE_NUMBER_INT, jp2.nextToken()); [EOL]             assertEquals(i, jp1.getIntValue()); [EOL]             assertEquals(i, jp2.getIntValue()); [EOL]         } [EOL]         assertToken(JsonToken.END_OBJECT, jp1.nextToken()); [EOL]         assertToken(JsonToken.END_OBJECT, jp2.nextToken()); [EOL]         jp1.close(); [EOL]         jp2.close(); [EOL]     } [EOL]     jp0.close(); [EOL] } <line_num>: 30,78
public void testAuxMethods() throws Exception { [EOL]     final int A_BYTES = 0x41414141; [EOL]     final int B_BYTES = 0x42424242; [EOL]     BytesToNameCanonicalizer nc = BytesToNameCanonicalizer.createRoot().makeChild(true, true); [EOL]     assertNull(nc.findName(A_BYTES)); [EOL]     assertNull(nc.findName(A_BYTES, B_BYTES)); [EOL]     nc.addName("AAAA", new int[] { A_BYTES }, 1); [EOL]     Name n1 = nc.findName(A_BYTES); [EOL]     assertNotNull(n1); [EOL]     assertEquals("AAAA", n1.getName()); [EOL]     nc.addName("AAAABBBB", new int[] { A_BYTES, B_BYTES }, 2); [EOL]     Name n2 = nc.findName(A_BYTES, B_BYTES); [EOL]     assertEquals("AAAABBBB", n2.getName()); [EOL]     assertNotNull(n2); [EOL]     assertNotNull(nc.toString()); [EOL] } <line_num>: 80,104
protected JsonParser createParser(JsonFactory jf, String input) throws IOException, JsonParseException { [EOL]     byte[] data = input.getBytes("UTF-8"); [EOL]     InputStream is = new ByteArrayInputStream(data); [EOL]     return jf.createParser(is); [EOL] } <line_num>: 112,118
private String createDoc(String[] fieldNames, boolean add) { [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append("{ "); [EOL]     int len = fieldNames.length; [EOL]     for (int i = 0; i < len; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(", "); [EOL]         } [EOL]         sb.append('"'); [EOL]         sb.append(add ? fieldNames[i] : fieldNames[len - (i + 1)]); [EOL]         sb.append("\" : "); [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(" }"); [EOL]     return sb.toString(); [EOL] } <line_num>: 120,137
