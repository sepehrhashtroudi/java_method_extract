public void testSimple() { [EOL]     TextBuffer tb = new TextBuffer(new BufferRecycler()); [EOL]     tb.append('a'); [EOL]     tb.append(new char[] { 'X', 'b' }, 1, 1); [EOL]     tb.append("c", 0, 1); [EOL]     assertEquals(3, tb.contentsAsArray().length); [EOL]     assertEquals("abc", tb.toString()); [EOL]     assertNotNull(tb.expandCurrentSegment()); [EOL] } <line_num>: 13,23
public void testLonger() { [EOL]     TextBuffer tb = new TextBuffer(new BufferRecycler()); [EOL]     for (int i = 0; i < 2000; ++i) { [EOL]         tb.append("abc", 0, 3); [EOL]     } [EOL]     String str = tb.contentsAsString(); [EOL]     assertEquals(6000, str.length()); [EOL]     assertEquals(6000, tb.contentsAsArray().length); [EOL]     tb.resetWithShared(new char[] { 'a' }, 0, 1); [EOL]     assertEquals(1, tb.toString().length()); [EOL] } <line_num>: 25,37
public void testLongAppend() { [EOL]     final int len = TextBuffer.MAX_SEGMENT_LEN * 3 / 2; [EOL]     StringBuilder sb = new StringBuilder(len); [EOL]     for (int i = 0; i < len; ++i) { [EOL]         sb.append('x'); [EOL]     } [EOL]     final String STR = sb.toString(); [EOL]     final String EXP = "a" + STR + "c"; [EOL]     TextBuffer tb = new TextBuffer(new BufferRecycler()); [EOL]     tb.append('a'); [EOL]     tb.append(STR, 0, len); [EOL]     tb.append('c'); [EOL]     assertEquals(len + 2, tb.size()); [EOL]     assertEquals(EXP, tb.contentsAsString()); [EOL]     tb = new TextBuffer(new BufferRecycler()); [EOL]     tb.append('a'); [EOL]     tb.append(STR.toCharArray(), 0, len); [EOL]     tb.append('c'); [EOL]     assertEquals(len + 2, tb.size()); [EOL]     assertEquals(EXP, tb.contentsAsString()); [EOL] } <line_num>: 39,64
