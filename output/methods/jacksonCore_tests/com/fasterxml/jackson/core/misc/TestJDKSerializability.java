public void testJsonFactorySerializable() throws Exception { [EOL]     JsonFactory f = new JsonFactory(); [EOL]     String origJson = "{\"simple\":[1,true,{}]}"; [EOL]     assertEquals(origJson, _copyJson(f, origJson, false)); [EOL]     byte[] frozen = jdkSerialize(f); [EOL]     JsonFactory f2 = jdkDeserialize(frozen); [EOL]     assertNotNull(f2); [EOL]     assertEquals(origJson, _copyJson(f2, origJson, false)); [EOL]     assertEquals(origJson, _copyJson(f2, origJson, true)); [EOL] } <line_num>: 19,33
public void testBase64Variant() throws Exception { [EOL]     Base64Variant orig = Base64Variants.PEM; [EOL]     byte[] stuff = jdkSerialize(orig); [EOL]     Base64Variant back = jdkDeserialize(stuff); [EOL]     assertSame(orig, back); [EOL] } <line_num>: 35,41
public void testPrettyPrinter() throws Exception { [EOL]     PrettyPrinter p = new DefaultPrettyPrinter(); [EOL]     byte[] stuff = jdkSerialize(p); [EOL]     PrettyPrinter back = jdkDeserialize(stuff); [EOL]     assertNotNull(back); [EOL] } <line_num>: 43,50
protected byte[] jdkSerialize(Object o) throws IOException { [EOL]     ByteArrayOutputStream bytes = new ByteArrayOutputStream(1000); [EOL]     ObjectOutputStream obOut = new ObjectOutputStream(bytes); [EOL]     obOut.writeObject(o); [EOL]     obOut.close(); [EOL]     return bytes.toByteArray(); [EOL] } <line_num>: 58,65
@SuppressWarnings("unchecked") [EOL] protected <T> T jdkDeserialize(byte[] raw) throws IOException { [EOL]     ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(raw)); [EOL]     try { [EOL]         return (T) objIn.readObject(); [EOL]     } catch (ClassNotFoundException e) { [EOL]         fail("Missing class: " + e.getMessage()); [EOL]         return null; [EOL]     } finally { [EOL]         objIn.close(); [EOL]     } [EOL] } <line_num>: 67,79
@SuppressWarnings("resource") [EOL] protected String _copyJson(JsonFactory f, String json, boolean useBytes) throws IOException { [EOL]     if (useBytes) { [EOL]         ByteArrayOutputStream bytes = new ByteArrayOutputStream(); [EOL]         JsonGenerator jg = f.createGenerator(bytes); [EOL]         _copyJson(f, json, jg); [EOL]         return bytes.toString("UTF-8"); [EOL]     } [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = f.createGenerator(sw); [EOL]     _copyJson(f, json, jg); [EOL]     return sw.toString(); [EOL] } <line_num>: 81,94
protected void _copyJson(JsonFactory f, String json, JsonGenerator jg) throws IOException { [EOL]     JsonParser jp = f.createParser(json); [EOL]     while (jp.nextToken() != null) { [EOL]         jg.copyCurrentEvent(jp); [EOL]     } [EOL]     jp.close(); [EOL]     jg.close(); [EOL] } <line_num>: 96,104
