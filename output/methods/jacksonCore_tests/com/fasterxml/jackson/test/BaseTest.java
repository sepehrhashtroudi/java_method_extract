public Name() { [EOL] } <line_num>: 66,66
public Name(String f, String l) { [EOL]     _first = f; [EOL]     _last = l; [EOL] } <line_num>: 67,70
public FiveMinuteUser() { [EOL] } <line_num>: 93,93
public FiveMinuteUser(String first, String last, boolean verified, Gender g, byte[] data) { [EOL]     _name = new Name(first, last); [EOL]     _isVerified = verified; [EOL]     _gender = g; [EOL]     _userImage = data; [EOL] } <line_num>: 95,101
public String getFirst() { [EOL]     return _first; [EOL] } <line_num>: 72,72
public String getLast() { [EOL]     return _last; [EOL] } <line_num>: 73,73
public void setFirst(String s) { [EOL]     _first = s; [EOL] } <line_num>: 75,75
public void setLast(String s) { [EOL]     _last = s; [EOL] } <line_num>: 76,76
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (o == null || o.getClass() != getClass()) [EOL]         return false; [EOL]     Name other = (Name) o; [EOL]     return _first.equals(other._first) && _last.equals(other._last); [EOL] } <line_num>: 78,85
public Name getName() { [EOL]     return _name; [EOL] } <line_num>: 103,103
public boolean isVerified() { [EOL]     return _isVerified; [EOL] } <line_num>: 104,104
public Gender getGender() { [EOL]     return _gender; [EOL] } <line_num>: 105,105
public byte[] getUserImage() { [EOL]     return _userImage; [EOL] } <line_num>: 106,106
public void setName(Name n) { [EOL]     _name = n; [EOL] } <line_num>: 108,108
public void setVerified(boolean b) { [EOL]     _isVerified = b; [EOL] } <line_num>: 109,109
public void setGender(Gender g) { [EOL]     _gender = g; [EOL] } <line_num>: 110,110
public void setUserImage(byte[] b) { [EOL]     _userImage = b; [EOL] } <line_num>: 111,111
@Override [EOL] public boolean equals(Object o) { [EOL]     if (o == this) [EOL]         return true; [EOL]     if (o == null || o.getClass() != getClass()) [EOL]         return false; [EOL]     FiveMinuteUser other = (FiveMinuteUser) o; [EOL]     if (_isVerified != other._isVerified) [EOL]         return false; [EOL]     if (_gender != other._gender) [EOL]         return false; [EOL]     if (!_name.equals(other._name)) [EOL]         return false; [EOL]     byte[] otherImage = other._userImage; [EOL]     if (otherImage.length != _userImage.length) [EOL]         return false; [EOL]     for (int i = 0, len = _userImage.length; i < len; ++i) { [EOL]         if (_userImage[i] != otherImage[i]) { [EOL]             return false; [EOL]         } [EOL]     } [EOL]     return true; [EOL] } <line_num>: 113,130
protected void verifyJsonSpecSampleDoc(JsonParser jp, boolean verifyContents) throws IOException { [EOL]     verifyJsonSpecSampleDoc(jp, verifyContents, true); [EOL] } <line_num>: 139,143
protected void verifyJsonSpecSampleDoc(JsonParser jp, boolean verifyContents, boolean requireNumbers) throws IOException { [EOL]     if (!jp.hasCurrentToken()) { [EOL]         jp.nextToken(); [EOL]     } [EOL]     assertToken(JsonToken.START_OBJECT, jp.getCurrentToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         verifyFieldName(jp, "Image"); [EOL]     } [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         verifyFieldName(jp, "Width"); [EOL]     } [EOL]     verifyIntToken(jp.nextToken(), requireNumbers); [EOL]     if (verifyContents) { [EOL]         verifyIntValue(jp, SAMPLE_SPEC_VALUE_WIDTH); [EOL]     } [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         verifyFieldName(jp, "Height"); [EOL]     } [EOL]     verifyIntToken(jp.nextToken(), requireNumbers); [EOL]     if (verifyContents) { [EOL]         verifyIntValue(jp, SAMPLE_SPEC_VALUE_HEIGHT); [EOL]     } [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         verifyFieldName(jp, "Title"); [EOL]     } [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertEquals(SAMPLE_SPEC_VALUE_TITLE, getAndVerifyText(jp)); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         verifyFieldName(jp, "Thumbnail"); [EOL]     } [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         verifyFieldName(jp, "Url"); [EOL]     } [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, getAndVerifyText(jp)); [EOL]     } [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         verifyFieldName(jp, "Height"); [EOL]     } [EOL]     verifyIntToken(jp.nextToken(), requireNumbers); [EOL]     if (verifyContents) { [EOL]         verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_HEIGHT); [EOL]     } [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         verifyFieldName(jp, "Width"); [EOL]     } [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     if (verifyContents) { [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, getAndVerifyText(jp)); [EOL]     } [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     verifyIntToken(jp.nextToken(), requireNumbers); [EOL]     if (verifyContents) { [EOL]         verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_ID1); [EOL]     } [EOL]     verifyIntToken(jp.nextToken(), requireNumbers); [EOL]     if (verifyContents) { [EOL]         verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_ID2); [EOL]     } [EOL]     verifyIntToken(jp.nextToken(), requireNumbers); [EOL]     if (verifyContents) { [EOL]         verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_ID3); [EOL]     } [EOL]     verifyIntToken(jp.nextToken(), requireNumbers); [EOL]     if (verifyContents) { [EOL]         verifyIntValue(jp, SAMPLE_SPEC_VALUE_TN_ID4); [EOL]     } [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL] } <line_num>: 145,242
private void verifyIntToken(JsonToken t, boolean requireNumbers) { [EOL]     if (t == JsonToken.VALUE_NUMBER_INT) { [EOL]         return; [EOL]     } [EOL]     if (requireNumbers) { [EOL]         assertToken(JsonToken.VALUE_NUMBER_INT, t); [EOL]     } [EOL]     if (t != JsonToken.VALUE_STRING) { [EOL]         fail("Expected INT or STRING value, got " + t); [EOL]     } [EOL] } <line_num>: 244,256
protected void verifyFieldName(JsonParser jp, String expName) throws IOException { [EOL]     assertEquals(expName, jp.getText()); [EOL]     assertEquals(expName, jp.getCurrentName()); [EOL] } <line_num>: 258,263
protected void verifyIntValue(JsonParser jp, long expValue) throws IOException { [EOL]     assertEquals(String.valueOf(expValue), jp.getText()); [EOL] } <line_num>: 265,270
protected JsonParser createParserUsingReader(String input) throws IOException, JsonParseException { [EOL]     return createParserUsingReader(new JsonFactory(), input); [EOL] } <line_num>: 278,282
protected JsonParser createParserUsingReader(JsonFactory f, String input) throws IOException, JsonParseException { [EOL]     return f.createParser(new StringReader(input)); [EOL] } <line_num>: 284,288
protected JsonParser createParserUsingStream(String input, String encoding) throws IOException, JsonParseException { [EOL]     return createParserUsingStream(new JsonFactory(), input, encoding); [EOL] } <line_num>: 290,294
protected JsonParser createParserUsingStream(JsonFactory f, String input, String encoding) throws IOException, JsonParseException { [EOL]     byte[] data; [EOL]     if (encoding.equalsIgnoreCase("UTF-32")) { [EOL]         data = encodeInUTF32BE(input); [EOL]     } else { [EOL]         data = input.getBytes(encoding); [EOL]     } [EOL]     InputStream is = new ByteArrayInputStream(data); [EOL]     return f.createParser(is); [EOL] } <line_num>: 296,314
protected void assertToken(JsonToken expToken, JsonToken actToken) { [EOL]     if (actToken != expToken) { [EOL]         fail("Expected token " + expToken + ", current token " + actToken); [EOL]     } [EOL] } <line_num>: 322,327
protected void assertToken(JsonToken expToken, JsonParser jp) { [EOL]     assertToken(expToken, jp.getCurrentToken()); [EOL] } <line_num>: 329,332
protected void assertType(Object ob, Class<?> expType) { [EOL]     if (ob == null) { [EOL]         fail("Expected an object of type " + expType.getName() + ", got null"); [EOL]     } [EOL]     Class<?> cls = ob.getClass(); [EOL]     if (!expType.isAssignableFrom(cls)) { [EOL]         fail("Expected type " + expType.getName() + ", got " + cls.getName()); [EOL]     } [EOL] } <line_num>: 334,343
protected void verifyException(Throwable e, String... matches) { [EOL]     String msg = e.getMessage(); [EOL]     String lmsg = (msg == null) ? "" : msg.toLowerCase(); [EOL]     for (String match : matches) { [EOL]         String lmatch = match.toLowerCase(); [EOL]         if (lmsg.indexOf(lmatch) >= 0) { [EOL]             return; [EOL]         } [EOL]     } [EOL]     fail("Expected an exception with one of substrings (" + Arrays.asList(matches) + "): got one with message \"" + msg + "\""); [EOL] } <line_num>: 345,356
protected String getAndVerifyText(JsonParser jp) throws IOException, JsonParseException { [EOL]     int actLen = jp.getTextLength(); [EOL]     char[] ch = jp.getTextCharacters(); [EOL]     String str2 = new String(ch, jp.getTextOffset(), actLen); [EOL]     String str = jp.getText(); [EOL]     if (str.length() != actLen) { [EOL]         fail("Internal problem (jp.token == " + jp.getCurrentToken() + "): jp.getText().length() ['" + str + "'] == " + str.length() + "; jp.getTextLength() == " + actLen); [EOL]     } [EOL]     assertEquals("String access via getText(), getTextXxx() must be the same", str, str2); [EOL]     return str; [EOL] } <line_num>: 363,378
protected byte[] encodeInUTF32BE(String input) { [EOL]     int len = input.length(); [EOL]     byte[] result = new byte[len * 4]; [EOL]     int ptr = 0; [EOL]     for (int i = 0; i < len; ++i, ptr += 4) { [EOL]         char c = input.charAt(i); [EOL]         result[ptr] = result[ptr + 1] = (byte) 0; [EOL]         result[ptr + 2] = (byte) (c >> 8); [EOL]         result[ptr + 3] = (byte) c; [EOL]     } [EOL]     return result; [EOL] } <line_num>: 386,398
public String quote(String str) { [EOL]     return '"' + str + '"'; [EOL] } <line_num>: 400,402
protected void fieldNameFor(StringBuilder sb, int index) { [EOL]     sb.append(FIELD_BASENAME); [EOL]     sb.append(index); [EOL]     if (index > 50) { [EOL]         sb.append('.'); [EOL]         if (index > 200) { [EOL]             sb.append(index); [EOL]             if (index > 4000) { [EOL]                 sb.append(".").append(index); [EOL]             } [EOL]         } else { [EOL]             sb.append(index >> 3); [EOL]         } [EOL]     } [EOL] } <line_num>: 404,423
protected String fieldNameFor(int index) { [EOL]     StringBuilder sb = new StringBuilder(16); [EOL]     fieldNameFor(sb, index); [EOL]     return sb.toString(); [EOL] } <line_num>: 425,430
