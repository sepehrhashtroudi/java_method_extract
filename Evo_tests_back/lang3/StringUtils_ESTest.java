/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:48:02 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.repeat("Cannot clone Cloneable type ", "ptgNwtnxatzWXwA", (-32768));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("x", ')');
      assertFalse(string1.equals((Object)string0));
      assertEquals("x", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("", "Cannot clone Cloneable type ", (-32768), (-32768));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Cannot clone Cloneable type ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Cannot clone Cloneable type ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.stripToNull("ptgNwtnxatzWXwA");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ptgNwtnxatzWXwA", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("Cannot clone Cloneable type ", "x", (-32768));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.removeEnd((String) null, "aEK60VM*X");
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isNumeric("Cannot clone Cloneable type ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("Cannot clone Cloneable type ");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string5 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.rightPad("aEK60VM*X", 25, 'D');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("aEK60VM*XDDDDDDDDDDDDDDD", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviateMiddle("Cannot clone Cloneable type ", "cnC6A#Qa.Kd}", (-32768));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertEquals("Cannot clone Cloneable type ", string7);
      assertNotNull(string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "Cannot clone Cloneable type ", 7, 19);
      assertEquals((-1), int0);
      
      String string8 = StringUtils.rightPad("x", 174, 'D');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("xDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.substringBetween("ptgNwtnxatzWXwA", "");
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");
      assertEquals(".ti')kKzb5J(cbBlh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, ')');
      assertTrue(string1.equals((Object)string0));
      assertEquals(".ti')kKzb5J(cbBlh", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";
      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.cosmmons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.apache.cosmmons.lang3.StringUtil", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.lowerCase("s");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("s", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("{}smmons.lang3.StringUtil", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = new String[26];
      stringArray0[0] = ".ti')kKzb5J(cbBlh";
      stringArray0[1] = "s";
      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";
      stringArray0[3] = "s";
      stringArray0[4] = "s";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      stringArray0[7] = "";
      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertEquals(26, stringArray0.length);
      assertNotNull(string8);
      
      String string9 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "Kby.&&D(~k)>=");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertEquals("Kby.&&D(~k)>=", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.removeEnd("{}", "s");
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertEquals("{}", string10);
      assertNotNull(string10);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.cosmmons.lang3.StringUtils", (CharSequence) "{}", (-3630));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short[] shortArray0 = new short[0];
      char char0 = '4';
      String string0 = StringUtils.join(shortArray0, '4');
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 11);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.replaceChars("', has a length less than 2", 'E', 'E');
      assertEquals("', has a length less than 2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("', has a length less than 2", "', has a length less than 2", "', has a length less than 2");
      assertTrue(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("', has a length less than 2");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.difference("', has a length less than 2", "', has a length less than 2");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "', has a length less than 2";
      String string4 = StringUtils.removeStart("", "', has a length less than 2");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringAfterLast("', has a length less than 2", "', has a length less than 2");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAllUpperCase("', has a length less than 2");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = (-76);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("x", (-76), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 114);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 1124);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split("\n", 'e');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart("", "}%");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("", "3::s0DFSZzQA>V_CN");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("3::s0DFSZzQA>V_CN", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("", (CharSequence) null, stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator(string4, (String) null, (-1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.right("", (-240));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference("", "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("'9' - '0' egnar eht ni ton si ", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-700);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[0] = (short) (-1905);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string8 = StringUtils.join(shortArray0, ')');
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals("-1905)2431)336)0)2)16)0)-2743", string8);
      assertEquals(8, shortArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new short[] {(short) (-1905), (short)2431, (short)336, (short)0, (short)2, (short)16, (short)0, (short) (-2743)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd(":;6z", (String) null);
      assertEquals(":;6z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = '{';
      String string4 = StringUtils.join(charArray0, 't');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("tttt{", string4);
      assertEquals(3, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'t', 't', '{'}, charArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Nt{2P6~Pso'");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      String string5 = StringUtils.substringAfter("Hdl6An@o)]mG1*(G5r", "Hdl6An@o)]mG1*(G5r");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString((String) null);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(" ", '8');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 114);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split("\n", 'e');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart((String) null, "}%");
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");
      assertEquals("3::s0DFSZzQA>V_CN", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 1124, "");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", (CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));
      assertNull(stringArray1);
      
      String string5 = StringUtils.right("", (-240));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference((String) null, "");
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.reverse((String) null);
      assertNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-700);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[0] = (short) (-1905);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string8 = StringUtils.join(shortArray0, ')');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("-1905)2431)336)0)2)16)0)-2743", string8);
      assertEquals(8, shortArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new short[] {(short) (-1905), (short)2431, (short)336, (short)0, (short)2, (short)16, (short)0, (short) (-2743)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1109));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'Z';
      charArray0[2] = 'X';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', 'Z', 'X'}, charArray0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(">D<O)oa1X?)");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string2);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) ">D<O)oa1X?)", (CharSequence) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.mid((String) null, (-1), 0);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1864.84706;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 'X';
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 'X';
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 'X';
      String string4 = StringUtils.join(doubleArray0, 'o', 692, (-1));
      assertEquals("", string4);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new double[] {1864.84706, (-1.0), 45.0, (-1.0), 88.0, 0.0, 88.0, 0.0, 88.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 114);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split("\n", 'e');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart((String) null, "X%");
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");
      assertEquals("3::s0DFSZzQA>V_CN", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("'9' - '0' egnar eht ni ton si ", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short) (-719);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string6 = StringUtils.defaultString("3::s0DFSZzQA>V_CN");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("3::s0DFSZzQA>V_CN", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(" ", '8');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, " ");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "null comparatorMinimum abbreviation width with offset is 7Vkn-h;Vu", 0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.remove(" vs ", 'h');
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern(" vs ", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty(" vs ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace("`4A!K;B`", "", " vs ", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`4A!K;B`", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace(" vs ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "`4A!K;B`", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " vs ", (CharSequence) "`4A!K;B`");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'h', 'h', 'h', 'h'}, charArray0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank((CharBuffer) null, charBuffer0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'h', 'h', 'h', 'h'}, charArray0);
      
      String string3 = StringUtils.trimToNull(" vs ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("vs", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("vs", "(0AV$B", "vd*+g.n+9W");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("vs", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "vs", 0, (-1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.center("", 121, 'h');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter("\n", "?O<Ssm#PEN1-^/bq");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "vs");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)64;
      String string7 = StringUtils.join(byteArray0, 'N', 105, (-4848));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertEquals(4, byteArray0.length);
      assertNotNull(string7);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-94), (byte)11, (byte)64}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.remove("null comparator", '.');
      assertEquals("null comparator", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (int) '.');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.split("null comparator", "null comparator");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replacePattern("", "", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.strip("eviation width is 4");
      assertEquals("eviation width is 4", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("eviation width is 4");
      assertEquals(19, int0);
      
      String string1 = StringUtils.abbreviateMiddle("eviation width is 4", "!D{rz~", 19);
      assertTrue(string1.equals((Object)string0));
      assertEquals("eviation width is 4", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfAny("eviation width is 4", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.capitalize("\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("clone");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("clon", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 19;
      doubleArray0[1] = (double) 19;
      String string4 = StringUtils.join(doubleArray0, '>', 19, 5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new double[] {19.0, 19.0}, doubleArray0, 0.01);
      
      String string5 = StringUtils.replace("eviation width is 4", "eviation width is 4", "clone", 992);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("clone", string5);
      assertNotNull(string5);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '>';
      intArray0[1] = 5;
      intArray0[2] = (int) '>';
      intArray0[3] = (-1);
      String string6 = StringUtils.join(intArray0, '>', 1120, (-1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals(4, intArray0.length);
      assertNotNull(string6);
      assertArrayEquals(new int[] {62, 5, 62, (-1)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'>'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("eviation width is 4");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.removeEnd("clone", "Strings must not be null");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertEquals("clone", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.chop("clon");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertEquals("clo", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.substringBetween("RWSLzV4h", "\n", "\n");
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.substringBetween("31", "31");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '3';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', '3'}, charArray0);
      
      String string1 = StringUtils.replacePattern("31", "\n", "31");
      assertEquals("31", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "MGbF51lzV'&5o!CdNz";
      stringArray0[2] = null;
      stringArray0[3] = "31";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.stripToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) string0, (CharSequence) "MGbF51lzV'&5o!CdNz");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      Iterator<Locale.FilteringMode> iterator1 = serviceLoader0.iterator();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      assertNotNull(iterator1);
      assertNotSame(iterator1, iterator0);
      
      String string5 = StringUtils.join(iterator1, 'x');
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      assertNotNull(string5);
      assertNotSame(iterator1, iterator0);
      
      String string6 = StringUtils.substringBefore(".1peB+E*\"K;i;&q{VvC", string0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals(".1peB+E*\"K;i;&q{VvC", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("31", (-1), '5');
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("31", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence[]) stringArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{");
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{");
      assertEquals("", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substring("t{", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean3 = arrayList0.add((Object) listIterator0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{");
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean4 = arrayList0.add((Object) "");
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      assertTrue(arrayList0.contains(""));
      
      arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{");
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList0.contains(""));
      
      String string2 = StringUtils.join(doubleArray0, '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0", string2);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String string3 = StringUtils.center("", 0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      boolean boolean5 = StringUtils.isNumericSpace(stringBuffer0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string4 = StringUtils.left("", 0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean6 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ");
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '}');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("*}KU}x7dwU3mi-y:", string5);
      assertEquals(3, stringArray0.length);
      assertNotNull(string5);
      
      boolean boolean7 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) "");
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7);
      
      String string6 = StringUtils.strip("0.0");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("0.0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Iterable<?>) arrayList0, '}');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertNotNull(string7);
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean8 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8);
      assertEquals(3, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string8 = StringUtils.rightPad("", (-1), '3');
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, '}');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.chomp("YU6:w]M?f:BLf)V");
      assertEquals("YU6:w]M?f:BLf)V", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "YU6:w]M?f:BLf)V", charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'='}, charArray0);
      
      String string1 = StringUtils.removeEndIgnoreCase((String) null, "Search and Replace array lengths don't match: ");
      assertNull(string1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '=';
      doubleArray0[1] = (double) '=';
      doubleArray0[2] = (double) '=';
      doubleArray0[3] = (double) '=';
      doubleArray0[4] = (double) '=';
      doubleArray0[5] = (double) '=';
      doubleArray0[6] = (double) '=';
      doubleArray0[7] = (double) '=';
      doubleArray0[8] = (double) '=';
      String string2 = StringUtils.join(doubleArray0, '=', 1039, 2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new double[] {61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0}, doubleArray0, 0.01);
      
      String string3 = StringUtils.removeEndIgnoreCase("Search and Replace array lengths don't match: ", "YU6:w]M?f:BLf)V");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("Strings must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 61.0;
      objectArray0[1] = (Object) 61.0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) '=';
      objectArray0[4] = (Object) 61.0;
      objectArray0[5] = (Object) 61.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 61.0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", 1039, 1832);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1039
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.chop("x");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", 3082);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.prependIfMissingIgnoreCase("x", "", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("x", string2);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = "\\u";
      String string4 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.exception.CloneFailedException", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.exception.CloneFailedException", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      char char0 = 'Y';
      String string5 = StringUtils.join(charArray0, 'Y', 3082, (-784));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertEquals(0, charArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.exception.CloneFailedException", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.countMatches(string3, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, int0);
      
      String string6 = StringUtils.defaultIfBlank(string3, " has no clone method");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("\\u", string6);
      assertNotNull(string6);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3082;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'Y', 3, 3082);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd(":;6z", (String) null);
      assertEquals(":;6z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = '{';
      String string4 = StringUtils.join(charArray0, 't');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("tttt{", string4);
      assertEquals(3, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'t', 't', '{'}, charArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Nt{2P6~Pso'");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      String string5 = StringUtils.substringAfter("Hdl6An@o)]mG1*(G5r", "Hdl6An@o)]mG1*(G5r");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) ":;6z", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBefore((String) null, "(?: s|[s&&[^ ]])s*");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "(?: s|[s&&[^ ]])s*", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");
      assertEquals(".ti')kKzb5J(cbBlh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3');
      assertTrue(string1.equals((Object)string0));
      assertEquals(".ti')kKzb5J(cbBlh", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";
      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.cosmmons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.cosmmons.lang3.StringUtil", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.lowerCase("s");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("s", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("{}smmons.lang3.StringUtil", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".ti')kKzb5J(cbBlh";
      stringArray0[1] = "s";
      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";
      stringArray0[3] = "s";
      stringArray0[4] = "s";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      stringArray0[7] = "";
      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertEquals(9, stringArray0.length);
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.substringsBetween("Threshold must not be negative", ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", "");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("org.apache.commons.lang3.exception.CloneFa", "s", ".ti')kKzb5J(cbBlh");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("9<-;", "9<-;");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("", "9<-;", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center((String) null, 11, 'H');
      assertNull(string2);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string3 = StringUtils.overlay("eUUr{~\"Kk", "Array and element cannot both be null", 127, 838);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("eUUr{~\"KkArray and element cannot both be null", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "eUUr{~\"KkArray and element cannot both be null", charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'p', 'H', 'H', 'H', 'H'}, charArray0);
      
      String[] stringArray0 = StringUtils.substringsBetween("uGFBSQ?f[)ER{hCc", "]QJCk)m+seUL", (String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("9.2a=P+HRf`R's^w+eE", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.uncapitalize("Array and element cannot both be null");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("array and element cannot both be null", string4);
      assertNotNull(string4);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'H';
      charArray1[1] = 'H';
      charArray1[2] = 'p';
      charArray1[3] = '[';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Array and element cannot both be null", charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'H', 'H', 'p', '['}, charArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, "lP|u?m)YI{V6F9Wy", 8);
      assertNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "The Character must not be null", 2, 5);
      assertNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBeforeLast(", Length: ", "Minimum a");
      assertEquals(", Length: ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum a", 2278);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNumeric("lP|u?m)YI{V6F9Wy");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.indexOf((CharSequence) "Minimum a", (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2278;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = 0.0F;
      String string3 = StringUtils.join(floatArray0, '*', 74, 74);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(5, floatArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new float[] {2278.0F, 2.0F, (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      String string4 = StringUtils.defaultIfBlank("Minimum a", " nxVUwt{]P)hI'O%T");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Minimum a", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replacePattern("Minimum a", ",Ih!", " is not in the range '0' - '9'");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Minimum a", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.repeat("x,,H", 678);
      assertNotNull(string0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("x,,H"));
      
      boolean boolean0 = linkedHashSet0.add("Supplied value must be a valid byte literal between -128 and 127: [");
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(linkedHashSet0.contains("x,,H"));
      
      boolean boolean1 = linkedHashSet0.add("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(linkedHashSet0.contains("x,,H"));
      
      boolean boolean2 = linkedHashSet0.contains("x,,H");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(linkedHashSet0.contains("x,,H"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string0, 82, 82);
      assertEquals(2712, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(82, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(82, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      boolean boolean3 = linkedHashSet0.add(charBuffer0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(2712, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(82, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(82, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(linkedHashSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(linkedHashSet0.contains(678));
      
      boolean boolean4 = linkedHashSet0.add(locale_FilteringMode0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(linkedHashSet0.contains(678));
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertNotNull(string1);
      assertTrue(linkedHashSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(linkedHashSet0.contains(678));
      
      int int0 = StringUtils.indexOf((CharSequence) string1, (-1940));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertFalse(linkedHashSet0.contains(678));
      
      String string2 = StringUtils.rightPad("Y)", 64, 'W');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Y)WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string2);
      assertNotNull(string2);
      
      boolean boolean5 = StringUtils.isBlank(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      boolean boolean6 = StringUtils.isAlphaSpace("Y)");
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      String string3 = StringUtils.join(charArray0, 'W');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("W", string3);
      assertEquals(1, charArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      String string4 = StringUtils.leftPad("Afh\"z$ulNc", 1, 'W');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Afh\"z$ulNc", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("x,,H", "null$E=H15Rj\"k");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("null$E=H15Rj\"k", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Y)WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", (CharSequence) string0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'm';
      charArray0[2] = 'R';
      charArray0[3] = 'M';
      charArray0[4] = '=';
      charArray0[5] = '5';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'h', 'm', 'R', 'M', '=', '5'}, charArray0);
      
      String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z|&xc}e&+;', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "Z|&xc}e&+;";
      String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3494));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      assertNotNull(string3);
      
      charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[5] = (CharSequence) "\n";
      int int1 = StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", charSequenceArray0[5], 3156);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replace("=pE~G", "', is neither of type Map.Entry nor an Array", "iFcplQz6", (-1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("=pE~G", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 3188, 'w');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, ".3tM.5I8$R", "8:=UM!08VVij");
      assertNull(stringArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'w';
      longArray0[1] = (long) 3188;
      longArray0[2] = (long) 'w';
      longArray0[3] = 3773L;
      longArray0[4] = (long) 3188;
      String string1 = StringUtils.join(longArray0, 'w', 3188, 3);
      assertEquals("", string1);
      assertEquals(5, longArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new long[] {119L, 3188L, 119L, 3773L, 3188L}, longArray0);
      
      String string2 = StringUtils.substringBetween("Array and element cannot both be null", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd("3M|Rv^#F", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertEquals("3M|Rv^#F", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)10;
      String string0 = StringUtils.join(byteArray0, 'V', (int) (byte)32, (-1433));
      assertEquals("", string0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)13, (byte)32, (byte)1, (byte) (-76), (byte)10}, byteArray0);
      
      String string1 = StringUtils.rightPad(", Len", 1175, 'T');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Len", (CharSequence) ", Len");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("gU,</fF");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase(", Len");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeStart("", "gU,</fF");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfBlank("", "");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "T";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-4035));
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean5 = StringUtils.equals(charSequenceArray0[1], (CharSequence) "");
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = StringUtils.stripAccents("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "TT");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("TT", "TT");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 116);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removePattern("", "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("pG$0h;W-R>", "TT");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("pG$0h;W-R>", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", ",FQU3=\"q$yCb$a\"_=Cm", 122);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      
      String[] stringArray3 = StringUtils.substringsBetween("LS", "Cannot store ", "xQD3IhI");
      assertNull(stringArray3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "pG$0h;W-R>");
      assertEquals(18, int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "LS", charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      boolean boolean2 = StringUtils.isNumeric("xQD3IhI");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.isAllUpperCase("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string5 = StringUtils.reverseDelimited("", ']');
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "xQD3IhI";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "pG$0h;W-R>";
      int int2 = StringUtils.lastIndexOfAny("pG$0h;W-R>", charSequenceArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, int2);
      assertEquals(4, charSequenceArray0.length);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      boolean boolean4 = StringUtils.isWhitespace("TT");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(" ", '8');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, " ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.repeat("3A", 43);
      assertEquals("3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "3A", (CharSequence) "3A");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "3A";
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'x';
      charArray0[2] = '#';
      charArray0[3] = 'e';
      charArray0[4] = '%';
      charArray0[5] = '_';
      charArray0[6] = 'y';
      charArray0[7] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("Vx#e%_y7", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'V', 'x', '#', 'e', '%', '_', 'y', '7'}, charArray0);
      
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = (CharSequence) "3A";
      charSequenceArray0[3] = (CharSequence) "3A";
      charSequenceArray0[4] = (CharSequence) "3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A";
      charSequenceArray0[5] = (CharSequence) "3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A3A";
      int int0 = StringUtils.lastIndexOfAny("3A", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.remove("null comparator", '.');
      assertEquals("null comparator", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replaceOnce("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is 7");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Minimumabbreviationwidthwithoffsetis7", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.replace("Z|&zc}e&+;", "Z|&zc}e&+;", "', is neither of type Map.Entry nor an Array", 5021);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'm';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = '.';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'h', 'm', '\u0000', 'M', 'M', '.'}, charArray0);
      
      String string1 = StringUtils.overlay("Z|&zc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z|&zc}e&+;', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array", 3156);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array";
      charSequenceArray0[2] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[3] = (CharSequence) "Z|&zc}e&+;";
      String string2 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[5] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      int int1 = StringUtils.indexOfAny((CharSequence) "Z|&zc}e&+;', is neither of type Map.Entry nor an Array", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("RWSLzV4h", 0, (String) null);
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "RWSLzV4h", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string3);
      
      int int1 = StringUtils.length("RWSLzV4h");
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 9);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");
      assertEquals(".ti')kKzb5J(cbBlh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3');
      assertTrue(string1.equals((Object)string0));
      assertEquals(".ti')kKzb5J(cbBlh", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";
      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.cosmmons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("org.apache.cosmmons.lang3.StringUtil", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.lowerCase("s");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("s", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("{}smmons.lang3.StringUtil", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".ti')kKzb5J(cbBlh";
      stringArray0[1] = "s";
      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";
      stringArray0[3] = "s";
      stringArray0[4] = "s";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      stringArray0[7] = "";
      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertEquals(9, stringArray0.length);
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.startsWithAny("{}", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "T";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "T";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-4035));
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = StringUtils.left((String) null, 1896);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(955);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(955));
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, '5');
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string0);
      assertFalse(arrayList0.contains(955));
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.mid("", 955, 3);
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.upperCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.removeStartIgnoreCase("\r", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "\r";
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      charSequenceArray0[4] = (CharSequence) charBuffer0;
      CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[0]);
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals("", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      charSequenceArray0[5] = (CharSequence) "";
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3;
      longArray0[1] = 2587L;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 955;
      longArray0[4] = (long) 955;
      longArray0[5] = (long) 3;
      longArray0[6] = (-1L);
      String string4 = StringUtils.join(longArray0, '5', 8192, (-1515));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(7, longArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new long[] {3L, 2587L, 3L, 955L, 955L, 3L, (-1L)}, longArray0);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string5 = StringUtils.chomp("\"N;ix%MK");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("\"N;ix%MK", string5);
      assertNotNull(string5);
      
      charSequenceArray0[7] = (CharSequence) "\"N;ix%MK";
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 3L;
      String string6 = StringUtils.join(floatArray0, 'L', 32, 16);
      assertTrue(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals(2, floatArray0.length);
      assertNotNull(string6);
      assertArrayEquals(new float[] {8192.0F, 3.0F}, floatArray0, 0.01F);
      
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd(":;6z", (String) null);
      assertEquals(":;6z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals(":;6z", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, (int) 't');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, (int) '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd(":;6z", (String) null);
      assertEquals(":;6z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "RWSLzV4h", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 0, "");
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 114);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split("\n", 'e');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart((String) null, "}%");
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");
      assertEquals("3::s0DFSZzQA>V_CN", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, (String) null);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));
      assertNull(stringArray1);
      
      String string5 = StringUtils.right((String) null, (-240));
      assertNull(string5);
      
      String string6 = StringUtils.difference((String) null, (String) null);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean0);
      
      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("'9' - '0' egnar eht ni ton si ", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-700);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[3] = (short) (-1905);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string8 = StringUtils.join(shortArray0, ')');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertEquals("-700)2431)336)-1905)2)16)0)-2743", string8);
      assertEquals(8, shortArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new short[] {(short) (-700), (short)2431, (short)336, (short) (-1905), (short)2, (short)16, (short)0, (short) (-2743)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "T";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "T";
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "T");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removePattern("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = new Integer((-4035));
      assertEquals((-4035), int0);
      
      boolean boolean4 = StringUtils.startsWithIgnoreCase((CharSequence) null, charSequenceArray0[3]);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'm';
      charArray0[2] = 'R';
      charArray0[3] = 'M';
      charArray0[4] = '=';
      charArray0[5] = '5';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'h', 'm', 'R', 'M', '=', '5'}, charArray0);
      
      String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z|&xc}e&+;', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("', is neither of type Map.Entry nor an Array");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "', is neither of type Map.Entry nor an Array";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "', is neither of type Map.Entry nor an Array";
      objectArray0[3] = (Object) 'm';
      objectArray0[4] = (Object) 'R';
      objectArray0[5] = (Object) '5';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, (-3453), 2241);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3453
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "T";
      charSequenceArray0[1] = (CharSequence) "T";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "T";
      boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-4035));
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "T");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceChars((String) null, "Vk&zfkT%G?ANC_ZRi_!G%*zb*}00[", "");
      assertNull(string4);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913, 1913);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("The character must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The character must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("The character must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Thecharactermustnotbenull", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Thecharactermustnotbenull", (CharSequence) "The character must not be null");
      assertEquals(5, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1913;
      doubleArray0[3] = (double) 1913;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 5;
      String string4 = StringUtils.join(doubleArray0, 'X');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("5.0X5.0X1913.0X1913.0X5.0X5.0X5.0", string4);
      assertEquals(7, doubleArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new double[] {5.0, 5.0, 1913.0, 1913.0, 5.0, 5.0, 5.0}, doubleArray0, 0.01);
      
      String string5 = StringUtils.left("Thecharactermustnotbenull", (-2027));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.startsWith("Thecharactermustnotbenull", "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("The character must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      String string6 = StringUtils.lowerCase("The character must not be null", locale0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("the character must not be null", string6);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertNotNull(string6);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "the character must not be null", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0", (CharSequence) "the character must not be null");
      assertFalse(int1 == int0);
      assertEquals(33, int1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("The character must not be null"));
      
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("The character must not be null"));
      
      String string7 = StringUtils.join(iterator0, '2');
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(string7);
      assertFalse(arrayDeque0.contains("The character must not be null"));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.removePattern("Minimum abbreviation width is 4", "Minimum abbreviation width is 4");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("Minimum abbreviation width is 4", "9.2a=P+HRf`R's^w+eE");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is 4", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '<';
      charArray0[2] = 'u';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width is 4", charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'^', '<', 'u'}, charArray0);
      
      String string2 = StringUtils.abbreviateMiddle("}uKvEH|OB1F+ML", " ", 1749);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}uKvEH|OB1F+ML", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, 'Z');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(0, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string4 = StringUtils.rightPad("Minimum abbreviation width is 4", 1749, 'P');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.center("/`!4nEk/", 64, ':');
      assertEquals(":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string1 = StringUtils.substring((String) null, 64);
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::";
      charSequenceArray0[2] = (CharSequence) "/`!4nEk/";
      charSequenceArray0[3] = (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::";
      charSequenceArray0[4] = (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::";
      charSequenceArray0[5] = (CharSequence) "/`!4nEk/";
      charSequenceArray0[6] = (CharSequence) "/`!4nEk/";
      charSequenceArray0[7] = (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::";
      charSequenceArray0[8] = (CharSequence) "/`!4nEk/";
      boolean boolean0 = StringUtils.containsIgnoreCase(":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::", charSequenceArray0[7]);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[5], 108);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::", (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      String string4 = "\\u";
      int int2 = StringUtils.indexOfAny(charSequenceArray0[0], string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(9, charSequenceArray0.length);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[1], charSequenceArray0[3], (-1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      assertEquals(9, charSequenceArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (int) ':';
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 32;
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.deleteWhitespace((String) null);
      assertNull(string5);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = ':';
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[3], charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'm';
      charArray0[2] = 'R';
      charArray0[3] = 'M';
      charArray0[4] = '=';
      charArray0[5] = '5';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'h', 'm', 'R', 'M', '=', '5'}, charArray0);
      
      String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);
      assertEquals("Z|&xc}e&+;', is neither of type Map.Entry nor an Array", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("', is neither of type Map.Entry nor an Array");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array";
      charSequenceArray0[2] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[3] = (CharSequence) "Z|&xc}e&+;";
      String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      assertNotNull(string3);
      
      charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[5] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      int int1 = StringUtils.indexOfAny((CharSequence) "', is neither of type Map.Entry nor an Array", charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", (-3245));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOfAny(charSequenceArray0[1], charArray0);
      assertEquals(20, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charSequenceArray0.length);
      assertArrayEquals(new char[] {'h', 'm', 'R', 'M', '=', '5'}, charArray0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "', is neither of type Map.Entry nor an Array";
      stringArray0[1] = "Z|&xc}e&+;";
      StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      int int3 = StringUtils.indexOf((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) " vs ");
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "nulil comparator";
      String string1 = StringUtils.remove("nulil comparator", '.');
      assertTrue(string1.equals((Object)string0));
      assertEquals("nulil comparator", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "nulil comparator", (CharSequence) null, (int) '.');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.replace("(?: s|[s&&[^ ]])s*", (String) null, (String) null, 2);
      assertEquals("(?: s|[s&&[^ ]])s*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)947;
      shortArray0[1] = (short)7;
      String string2 = StringUtils.join(shortArray0, 'j');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("947j7", string2);
      assertEquals(2, shortArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)947, (short)7}, shortArray0);
      
      String string3 = StringUtils.center("org.apache.commons.lang3.CharSequenceUtils", 4, "oK@B}4");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("", 127);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 4;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'j', (-1089), (int) (short)947);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1089
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.mid("on%35hx1", 775, 7);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "on%35hx1", 775);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.abbreviateMiddle("", "3", 2863);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "on%35hx1";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "on%35hx1";
      String string2 = StringUtils.join((Iterator<?>) null, '}');
      assertNull(string2);
      
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean1 = StringUtils.startsWithAny("on%35hx1", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.join((Iterator<?>) null, '$');
      assertNull(string3);
      
      String string4 = StringUtils.repeat("3", 12);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("333333333333", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = 'J';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      int int0 = StringUtils.indexOfAny(charSequenceArray0[6], charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'}', 'J', '}', '}', '}'}, charArray0);
      
      String string5 = StringUtils.chomp("333333333333");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("333333333333", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isNumericSpace("333333333333");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[0], charSequenceArray0[1]);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short) (-2311);
      shortArray0[3] = (short)822;
      shortArray0[4] = (short)10;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'z', (int) (short)10, (int) (short)822);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.substring((String) null, (-4035));
      assertNull(string0);
      
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = StringUtils.mid("", 256, 256);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 256;
      intArray0[1] = 256;
      intArray0[2] = 256;
      intArray0[3] = 256;
      intArray0[4] = 256;
      String string1 = StringUtils.join(intArray0, 'X');
      assertFalse(string1.equals((Object)string0));
      assertEquals("256X256X256X256X256", string1);
      assertEquals(5, intArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new int[] {256, 256, 256, 256, 256}, intArray0);
      
      String string2 = StringUtils.defaultString("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "256X256X256X256X256", (CharSequence) "", 7);
      assertEquals(7, int0);
      
      String string3 = StringUtils.join((char[]) null, 'X', 8192, 90);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "256X256X256X256X256");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "T";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "T";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat((String) null, "", (-4035));
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(8, charSequenceArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-275);
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)14;
      shortArray0[4] = (short)97;
      shortArray0[5] = (short)1101;
      String string4 = StringUtils.join(shortArray0, 'K');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("7K-275K7K14K97K1101", string4);
      assertEquals(6, shortArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new short[] {(short)7, (short) (-275), (short)7, (short)14, (short)97, (short)1101}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils");
      assertNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 'F';
      charArray0[2] = 'n';
      charArray0[3] = '2';
      charArray0[4] = '`';
      charArray0[5] = 'l';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'(', 'F', 'n', '2', '`', 'l'}, charArray0);
      
      String string1 = StringUtils.mid((String) null, (-1), (-1));
      assertNull(string1);
      
      String string2 = StringUtils.removeStart((String) null, "=j ':?J<]j");
      assertNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{");
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{");
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substring("t{", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{");
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean3 = arrayList0.add((Object) "");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains(0));
      
      arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{");
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      assertFalse(arrayList0.contains(0));
      
      String string2 = StringUtils.join(doubleArray0, '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0", string2);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String string3 = StringUtils.center("", 0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringBuffer0);
      
      boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
      
      String string4 = StringUtils.left("", 0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ");
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '}');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("*}KU}x7dwU3mi-y:", string5);
      assertEquals(3, stringArray0.length);
      assertNotNull(string5);
      
      boolean boolean6 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) "");
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6);
      
      String string6 = StringUtils.strip("0.0");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("0.0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substring("0.0", 0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertEquals("0.0", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean7 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7);
      assertEquals(3, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string8 = StringUtils.leftPad("", (int) '}');
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("                                                                                                                             ", string8);
      assertNotNull(string8);
      
      boolean boolean8 = StringUtils.isAllUpperCase("0.0");
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8);
      
      boolean boolean9 = StringUtils.equalsIgnoreCase(stringBuffer0, (CharSequence) null);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean1);
      assertFalse(boolean9 == boolean6);
      assertFalse(boolean9 == boolean4);
      assertFalse(boolean9 == boolean3);
      assertFalse(boolean9 == boolean0);
      assertFalse(boolean9);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "T";
      charSequenceArray0[1] = (CharSequence) "T";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "T";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-4043));
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(8, charSequenceArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1885L;
      longArray0[1] = (long) 0;
      String string4 = StringUtils.join(longArray0, 'S', 285, 0);
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(2, longArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new long[] {1885L, 0L}, longArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("LaKB", "{FakYXNQUOHZ", (-4043));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)36;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-4035));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isWhitespace("T");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "T", 0);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "T", "{FakYXNQUOHZ");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Iterator<CharBuffer> iterator0 = null;
      String string0 = StringUtils.join((Iterator<?>) null, 'n');
      assertNull(string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'n';
      floatArray0[1] = 4242.253F;
      char char0 = 'e';
      int int0 = 1849;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'e', 1, 1849);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd(":;6z", (String) null);
      assertEquals(":;6z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string3);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.difference(",-t8JJh/bUr{+$_DS", "WDl?;hCf*= F");
      assertEquals("WDl?;hCf*= F", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "WDl?;hCf*= F", "RWSLzV4h");
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripAccents(",-t8JJh/bUr{+$_DS");
      assertFalse(string1.equals((Object)string0));
      assertEquals(",-t8JJh/bUr{+$_DS", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("uOcUk");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("uOcUk", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("uOcUk");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "uOcUk";
      charSequenceArray0[1] = (CharSequence) ",-t8JJh/bUr{+$_DS";
      charSequenceArray0[2] = (CharSequence) ",-t8JJh/bUr{+$_DS";
      String string3 = StringUtils.center("WDl?;hCf*= F", 13);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("WDl?;hCf*= F ", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "WDl?;hCf*= F ";
      String string4 = StringUtils.appendIfMissingIgnoreCase("Ha?BYN:B?", "WDl?;hCf*= F", charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Ha?BYN:B?WDl?;hCf*= F", string4);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.join((Iterator<?>) null, 'z');
      assertNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "T";
      charSequenceArray0[1] = (CharSequence) "T";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "T";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.upperCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-4058));
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 1813);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBetween("Strings must not be null", "ihdj\"taX4!C- GO", (String) null);
      assertNull(string4);
      
      boolean boolean5 = StringUtils.isNumeric("T");
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 114);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart((String) null, "}%");
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");
      assertEquals("3::s0DFSZzQA>V_CN", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));
      assertNull(stringArray1);
      
      String string5 = StringUtils.right("", (-240));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference((String) null, "");
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string5));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("'9' - '0' egnar eht ni ton si ", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '^';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-719);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[3] = (short) (-1905);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string8 = StringUtils.join(shortArray0, ')');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertEquals("-719)2431)336)-1905)2)16)0)-2743", string8);
      assertEquals(8, shortArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new short[] {(short) (-719), (short)2431, (short)336, (short) (-1905), (short)2, (short)16, (short)0, (short) (-2743)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" vs ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = StringUtils.center(", Length: ", 13);
      assertEquals(" , Length:   ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Z96z@\"", 13, ", Length: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z96z@\", Lengt", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("YC:1z-VJ%jvP$&", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("YC:1z-VJ%jvP$&", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("(?: s|[s&&[^ ]])s*", "YC:1z-VJ%jvP$&");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      String string4 = StringUtils.join(byteArray0, '.');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("0.49.-87.0.0.0.-1", string4);
      assertEquals(7, byteArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)0, (byte)49, (byte) (-87), (byte)0, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Length: ", (CharSequence) "", 722);
      assertEquals(10, int0);
      
      int int1 = StringUtils.countMatches("YC:1z-VJ%jvP$&", "YC:1z-VJ%jvP$&");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string5 = StringUtils.leftPad("", 13, "YC:1z-VJ%jvP$&");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("YC:1z-VJ%jvP$", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "clone";
      stringArray0[0] = "clone";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("clone", string1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "clone", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "clone", 66, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", '8');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substring("kF#m1", 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("kF#m1", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "kF#m1");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      // Undeclared exception!
      try { 
        StringUtils.removePattern((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 114);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split((String) null, 'e');
      assertNull(stringArray0);
      
      String string1 = StringUtils.removeStart((String) null, "}%");
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");
      assertEquals("3::s0DFSZzQA>V_CN", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));
      assertNull(stringArray1);
      
      String string5 = StringUtils.right("", (-240));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("", (-240));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null);
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("'9' - '0' egnar eht ni ton si ", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-700);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[3] = (short) (-1905);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string8 = StringUtils.join(shortArray0, ')');
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertEquals("-700)2431)336)-1905)2)16)0)-2743", string8);
      assertEquals(8, shortArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new short[] {(short) (-700), (short)2431, (short)336, (short) (-1905), (short)2, (short)16, (short)0, (short) (-2743)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "T";
      charSequenceArray0[1] = (CharSequence) "T";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "T";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-4035));
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(8, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.left("", (-4855));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd(":;6z", (String) null);
      assertEquals(":;6z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (int) '{', 0);
      assertNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("Nt{2P6~Pso'", (CharSequence) null, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Nt{2P6~Pso'", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      String string4 = StringUtils.rightPad("Z<", (-1), '{');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Z<", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = StringUtils.chop("T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "T";
      charSequenceArray0[1] = (CharSequence) "T";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) "T";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "T";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-4035));
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(8, charSequenceArray0.length);
      
      // Undeclared exception!
      StringUtils.rightPad("Minimum abbreviation width with offset is 7", 32767, "=~%A6;?UjK");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "[dua5";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("Array element ", "[dua5", "2");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 4
         // [dua5
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.defaultString("/N");
      assertEquals("/N", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("/N");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("/N");
      assertTrue(string1.equals((Object)string0));
      assertEquals("/N", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("/N");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("/n", 2430);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "/N", (CharSequence) "/N");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "/N", (CharSequence) "/N");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.substringBetween("", "/n");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "RWSLzV4h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.leftPad(":;6z", 287, (String) null);
      assertEquals("                                                                                                                                                                                                                                                                                           :;6z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("RWSLzV4h");
      assertFalse(string2.equals((Object)string1));
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{");
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{");
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string0);
      assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substring("t{", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{");
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean3 = arrayList0.add((Object) "");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("t{"));
      
      arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{");
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      assertFalse(arrayList0.contains("t{"));
      
      String string2 = StringUtils.join(doubleArray0, 'q');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0.0", string2);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String string3 = StringUtils.replace("t{", "g?PZ{DRa[O6upHJ", "*aKUDx7dwU3mi-y:{");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("t{", string3);
      assertNotNull(string3);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringBuffer0);
      
      boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringWriter0.toString());
      
      String string4 = StringUtils.left("", 0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ");
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'q');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("*qKUqx7dwU3mi-y:", string5);
      assertEquals(3, stringArray0.length);
      assertNotNull(string5);
      
      boolean boolean6 = StringUtils.contains((CharSequence) "*qKUqx7dwU3mi-y:", (CharSequence) "t{");
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      String string6 = StringUtils.strip("0.0");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("0.0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Iterable<?>) arrayList0, 'q');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("*aKUDx7dwU3mi-y:{q", string7);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNotNull(string7);
      assertTrue(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ"));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("*qKUqx7dwU3mi-y:");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean7 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7);
      assertEquals(3, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, 'q');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ServiceLoader<Locale.LanguageRange> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$LanguageRange]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, 'V');
      assertEquals("", string0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$LanguageRange]", serviceLoader0.toString());
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("<h}`5VE>nv&O{-y*Jb", "Supplied value must be a valid byte literal between -32768 and 32767: [", 34);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(" ", '8');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase(" ", " ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNotBlank(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[1] = (short)211;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      String string0 = StringUtils.join(shortArray0, 't', (int) (short)211, 0);
      assertEquals("", string0);
      assertEquals(20, shortArray0.length);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) (short)0;
      String string1 = StringUtils.join(objectArray0, "XAK(\"OR:;", 179, 65);
      assertEquals("", string1);
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 't';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 't', 0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Minimum abbreviation width is 4");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAllLowerCase("Minimum abbreviation width is 4");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.removeStartIgnoreCase("~+]} CBK-#X&eAW", ", Length: 0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("~+]} CBK-#X&eAW", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.substringBetween(",/1VJ=r#]FVu3fr", (String) null, "oZ5Y33EocTE:J");
      assertNull(string3);
      
      int int3 = StringUtils.ordinalIndexOf((CharSequence) null, "~+]} CBK-#X&eAW", 2252);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string4 = StringUtils.deleteWhitespace(", Length: 0");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(",Length:0", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("", "zI");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2252;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ',', (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.remove("null comparator", '.');
      assertEquals("null comparator", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is 7", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replacePattern("", "", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("", (String) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("9'A");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) "...";
      charSequenceArray0[5] = (CharSequence) "...";
      charSequenceArray0[6] = (CharSequence) "...";
      String string0 = StringUtils.prependIfMissingIgnoreCase("...", "...", charSequenceArray0);
      assertEquals("...", string0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "...", 13);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("-/w1", 1408, 13);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-/w1", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[3], charSequenceArray0[4]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1408;
      intArray0[1] = 13;
      String string2 = StringUtils.join(intArray0, ')', 13, 13);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(2, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {1408, 13}, intArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"N;ix%MK";
      stringArray0[1] = "(?: s|[s&&[^ ]])s*";
      stringArray0[2] = "(?: s|[s&&[^ ]])s*";
      stringArray0[3] = "(?: s|[s&&[^ ]])s*";
      stringArray0[4] = "(?: s|[s&&[^ ]])s*";
      stringArray0[5] = "(?: s|[s&&[^ ]])s*";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\"N;ix%MK";
      stringArray1[1] = "\"N;ix%MK";
      stringArray1[2] = "(?: s|[s&&[^ ]])s*";
      stringArray1[3] = "(?: s|[s&&[^ ]])s*";
      stringArray1[4] = "\"N;ix%MK";
      stringArray1[5] = "\"N;ix%MK";
      stringArray1[6] = "(?: s|[s&&[^ ]])s*";
      stringArray1[7] = "(?: s|[s&&[^ ]])s*";
      stringArray1[8] = "(?: s|[s&&[^ ]])s*";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("(?: s|[s&&[^ ]])s*", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 6 vs 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "I+dex: ";
      stringArray0[2] = "t=$]1l^E";
      stringArray0[3] = "R";
      stringArray0[4] = "3 pZ(|hk3o";
      stringArray0[5] = "";
      String string0 = "\\u000";
      stringArray0[6] = string0;
      stringArray0[7] = "V'4=.E,,{";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3 pZ(|hk3o", (CharSequence) "");
      assertEquals(10, int0);
      
      String string1 = StringUtils.replaceOnce("VQ_N6", "", "z/#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("VQ_N6", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("", "", 2521, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWithAny("V'4=.E,,{", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitByCharacterType(stringArray0[6]);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(3, stringArray2.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.abbreviateMiddle("!*", "#JFYM}vU \"],4Y", 1448);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("!*", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("!*", 2521, 'X');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2521;
      doubleArray0[2] = (double) 'X';
      String string5 = StringUtils.join((double[]) null, 'X');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(">6[jeJ<SAKbrgG+g7`", "KtUnGkJOKdUG25", "#|J|a=;l_S1^qmM");
      assertNull(stringArray0);
      
      String string0 = StringUtils.leftPad(">D<O)oa1X?)", (-1905), "Minimum abbreviation width is 4");
      assertEquals(">D<O)oa1X?)", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "#|J|a=;l_S1^qmM", "Minimum abbreviation width is 4");
      assertEquals(4, int0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Locale.LanguageRange> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 's');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = StringUtils.repeat('\"', 10);
      assertEquals("\"\"\"\"\"\"\"\"\"\"", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[6] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], "");
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[5], charSequenceArray0[3]);
      assertEquals(10, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("tA$dgqg-e4)j", '\"');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 2976;
      intArray0[2] = (int) '\"';
      String string2 = StringUtils.join(intArray0, 'C');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("10C2976C34", string2);
      assertEquals(3, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {10, 2976, 34}, intArray0);
      
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, '3');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(0, longArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("", (String) null, "Threshold must not be negative");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "m%v5xStXNflN\"<nkY";
      stringArray0[1] = "m%v5xStXNflN\"<nkY";
      stringArray0[2] = "m%v5xStXNflN\"<nkY";
      stringArray0[3] = "m%v5xStXNflN\"<nkY";
      stringArray0[4] = "m%v5xStXNflN\"<nkY";
      stringArray0[5] = "m%v5xStXNflN\"<nkY";
      stringArray0[6] = "m%v5xStXNflN\"<nkY";
      stringArray0[7] = "m%v5xStXNflN\"<nkY";
      stringArray0[8] = "m%v5xStXNflN\"<nkY";
      String string0 = StringUtils.replaceEach("m%v5xStXNflN\"<nkY", stringArray0, stringArray0);
      assertEquals("m%v5xStXNflN\"<nkY", string0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("m%v5xStXNflN\"<nkY");
      assertTrue(string1.equals((Object)string0));
      assertEquals("m%v5xStXNflN\"<nkY", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, ')', 0, (-2433));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(9, stringArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "m%v5xStXNflN\"<nkY", (CharSequence) "m%v5xStXNflN\"<nkY", (-2433));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 114);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split("\n", 'e');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart((String) null, "}%");
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");
      assertEquals("3::s0DFSZzQA>V_CN", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));
      assertNull(stringArray1);
      
      String string5 = StringUtils.right("", (-240));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference((String) null, "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-700);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[3] = (short) (-1905);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string7 = StringUtils.join(shortArray0, ')');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("-700)2431)336)-1905)2)16)0)-2743", string7);
      assertEquals(8, shortArray0.length);
      assertNotNull(string7);
      assertArrayEquals(new short[] {(short) (-700), (short)2431, (short)336, (short) (-1905), (short)2, (short)16, (short)0, (short) (-2743)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.upperCase(".ti')kKzb5J(cbBlh");
      assertEquals(".TI')KKZB5J(CBBLH", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", (-23));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center(".TI')KKZB5J(CBBLH", 0, '3');
      assertTrue(string1.equals((Object)string0));
      assertEquals(".TI')KKZB5J(CBBLH", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ".TI')KKZB5J(CBBLH";
      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.cosmmons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(".TI')KKZB5J(CBBLH", 13);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(".TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("org.apache.cosmmons.lang3.StringUtil", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.lowerCase("s");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("s", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("{}smmons.lang3.StringUtil", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".TI')KKZB5J(CBBLH";
      stringArray0[1] = "s";
      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";
      stringArray0[3] = "s";
      stringArray0[4] = "s";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      stringArray0[7] = "";
      stringArray0[8] = ".TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertEquals(9, stringArray0.length);
      assertNotNull(string8);
      
      String string9 = StringUtils.prependIfMissingIgnoreCase("n\"~!:", ".TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH", charSequenceArray0);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertEquals(".TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLHn\"~!:", string9);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string9);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) ".TI')KKZB5J(CBBLH", (CharSequence) "{}");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.replace("(?: s|[s&&[^ ]])s*", (String) null, (String) null, 2);
      assertEquals("(?: s|[s&&[^ ]])s*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)947;
      shortArray0[1] = (short)7;
      String string2 = StringUtils.join(shortArray0, 'j');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("947j7", string2);
      assertEquals(2, shortArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)947, (short)7}, shortArray0);
      
      String string3 = StringUtils.replaceChars("", "org.apache.commons.lang3.ObjectUtils$Null", "(?: s|[s&&[^ ]])s*");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");
      assertEquals(".ti')kKzb5J(cbBlh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3');
      assertTrue(string1.equals((Object)string0));
      assertEquals(".ti')kKzb5J(cbBlh", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";
      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.cosmmons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right(".ti')kKzb5J(cbBlh", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.cosmmons.lang3.StringUtil", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.lowerCase("s");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("s", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("{}smmons.lang3.StringUtil", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".ti')kKzb5J(cbBlh";
      stringArray0[1] = "s";
      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";
      stringArray0[3] = "s";
      stringArray0[4] = "s";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      stringArray0[7] = "org.apache.commons.lang3.StringUtils";
      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertEquals(9, stringArray0.length);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "JGbjVl3X9m!&2 XD";
      String string0 = StringUtils.remove("5I<=Sp4`*rQ9Ey", '~');
      assertEquals("5I<=Sp4`*rQ9Ey", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "5I<=Sp4`*rQ9Ey";
      charSequenceArray0[2] = (CharSequence) "JGbjVl3X9m!&2 XD";
      String string1 = StringUtils.appendIfMissing("JGbjVl3X9m!&2 XD", "JGbjVl3X9m!&2 XD", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JGbjVl3X9m!&2 XD", string1);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'y', 2303, (-405));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[2], "", 2303);
      assertEquals(16, int0);
      assertEquals(3, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern((String) null, "C^~Zv[B=W<.aXJ]B2k", "org.apache.commons.lang3.StringUtils");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 127);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "SVoEL5[sC");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.removePattern("N1f14qYs/]'O,hL|", "h2Xl");
      assertEquals("N1f14qYs/]'O,hL|", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.split("!yEh&eY6kB");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      int int0 = StringUtils.lastIndexOfAny("N1f14qYs/]'O,hL|", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1244L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '^', (-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0, 'Y');
      assertEquals("YY", string0);
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'Y';
      String string1 = StringUtils.join(charArray0, 'F', 32, 32);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(2, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', 'Y'}, charArray0);
      
      String string2 = StringUtils.replaceChars("", '?', 'n');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("", "]{OqcC@C");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "]{OqcC@C";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "]{OqcC@C");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.right("Threshold must not be negative", 2139);
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>(2139, 2139);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = linkedHashSet0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      
      Spliterator<Locale.FilteringMode> spliterator0 = linkedHashSet0.spliterator();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertNotNull(spliterator0);
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "Threshold must not be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertNotNull(string1);
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      
      boolean boolean1 = StringUtils.isEmpty("Threshold must not be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Threshold must not be negative");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.repeat("-h0>", "#m(.AN4", 256);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isNumeric("Threshold must not be negative");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.stripEnd("U", "Threshold must not be negative");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("U", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-h0>";
      stringArray0[1] = "#m(.AN4";
      stringArray0[2] = "Threshold must not be negative";
      stringArray0[3] = "U";
      stringArray0[4] = string2;
      stringArray0[5] = "java.util.Locale$FilteringMode@0000000001";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      int int0 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " ");
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.remove(" ", '8');
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, " ");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.remove(" ", 'q');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'b', ',');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "...", (-5094));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("...");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("gyXR[#,#hZ;I(");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean1 = StringUtils.contains((CharSequence) "gyXR[#,#hZ;I(", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.center("gyXR[#,#hZ;I(", 0, "...");
      assertEquals("gyXR[#,#hZ;I(", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(byteArray0, '@');
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, byteArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)4, (byte)60, (byte)60, (byte)67, (byte)0, (byte)0}, byteArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "7@0@4@60@60@67@0@0", 41);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "Threshold must not be negative");
      assertEquals("~@!LXZ6YxCtw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("~@!LXZ6YxCtw", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "~@!LXZ6YxCtw";
      stringArray0[2] = "null comparator";
      stringArray0[3] = "Threshold must not be negative";
      stringArray0[4] = "";
      stringArray0[5] = "~@!LXZ6YxCtw";
      String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("~@!LXZ6YxCtw");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.mid("-", (-385), (-385));
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "|qO{l0uUU|R8lUrfn";
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-385);
      longArray0[1] = (long) (-385);
      longArray0[2] = (long) (-385);
      longArray0[3] = (long) (-385);
      longArray0[4] = 3213L;
      longArray0[5] = (long) (-385);
      longArray0[6] = (long) (-385);
      longArray0[7] = (long) (-385);
      String string1 = StringUtils.join(longArray0, 'D');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-385D-385D-385D-385D3213D-385D-385D-385D0", string1);
      assertEquals(9, longArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new long[] {(-385L), (-385L), (-385L), (-385L), 3213L, (-385L), (-385L), (-385L), 0L}, longArray0);
      
      charSequenceArray0[6] = (CharSequence) "-385D-385D-385D-385D3213D-385D-385D-385D0";
      charSequenceArray0[7] = (CharSequence) "|qO{l0uUU|R8lUrfn";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 2752);
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd("O~Lg/6aBF", "");
      assertEquals("O~Lg/6aBF", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, "_:", (-712));
      assertNull(stringArray0);
      
      String string2 = StringUtils.upperCase("Threshold must not be negative");
      assertFalse(string2.equals((Object)string1));
      assertEquals("THRESHOLD MUST NOT BE NEGATIVE", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "O~Lg/6aBF", "Index: ");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Threshold must not be negative";
      stringArray1[1] = "";
      stringArray1[2] = "_:";
      stringArray1[3] = "KRy1cy(Ak\u001B";
      stringArray1[4] = null;
      stringArray1[5] = "THRESHOLD MUST NOT BE NEGATIVE";
      stringArray1[6] = ",8#)2v.^6f";
      stringArray1[7] = null;
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(8, stringArray1.length);
      assertNotNull(string3);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2752;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-712);
      floatArray0[3] = (float) (-712);
      floatArray0[4] = (float) (-712);
      String string4 = StringUtils.join(floatArray0, ';');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("2752.0;-1.0;-712.0;-712.0;-712.0", string4);
      assertEquals(5, floatArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new float[] {2752.0F, (-1.0F), (-712.0F), (-712.0F), (-712.0F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "", (-2164), 1116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2164
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '>', 2695, (-1115));
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>'}, charArray0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "F7";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("F7", "", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("F7", string2);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.repeat('\"', 10);
      assertEquals("\"\"\"\"\"\"\"\"\"\"", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[6] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], "");
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[5], charSequenceArray0[3]);
      assertEquals(10, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\"\"\"\"\"\"\"\"\"\"");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("tA$dgqg-e4)j", '\"');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 2976;
      intArray0[2] = (int) '\"';
      String string2 = StringUtils.join(intArray0, 'C');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("10C2976C34", string2);
      assertEquals(3, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {10, 2976, 34}, intArray0);
      
      String string3 = StringUtils.substring("Cannot get the toString of a null identity", 1, 10);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("annot get", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "iLTc!P.z84";
      String string0 = StringUtils.appendIfMissing("iLTc!P.z84", "iLTc!P.z84", charSequenceArray0);
      assertEquals("iLTc!P.z84", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("iLTc!P.z84");
      assertTrue(string1.equals((Object)string0));
      assertEquals("iLTc!P.z84", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("iLTc!P.z84");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substring("iLTc!P.z84", (-757), (-757));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("org.apache.commons.lang3.ArrayUtils", "iLTc!P.z84", "YC:1z-VJ%jvP$&", (-1099));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string3);
      assertNotNull(string3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-757);
      intArray0[1] = (-2969);
      intArray0[2] = (-1099);
      intArray0[3] = (-757);
      intArray0[4] = (-1099);
      intArray0[5] = (-1099);
      intArray0[6] = (-757);
      intArray0[7] = (-1099);
      String string4 = StringUtils.join(intArray0, 'v');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("-757v-2969v-1099v-757v-1099v-1099v-757v-1099", string4);
      assertEquals(8, intArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new int[] {(-757), (-2969), (-1099), (-757), (-1099), (-1099), (-757), (-1099)}, intArray0);
      
      boolean boolean1 = StringUtils.isAlpha("iLTc!P.z84");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray1[1] = (CharSequence) "iLTc!P.z84";
      charSequenceArray1[2] = (CharSequence) "";
      charSequenceArray1[3] = (CharSequence) "YC:1z-VJ%jvP$&";
      charSequenceArray1[4] = (CharSequence) "";
      charSequenceArray1[5] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray1[6] = (CharSequence) "iLTc!P.z84";
      charSequenceArray1[7] = (CharSequence) "";
      charSequenceArray1[8] = (CharSequence) "YC:1z-VJ%jvP$&";
      String string5 = StringUtils.prependIfMissingIgnoreCase("iLTc!P.z84", "", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("iLTc!P.z84", string5);
      assertEquals(9, charSequenceArray1.length);
      assertNotNull(string5);
      assertNotSame(charSequenceArray1, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      String string0 = StringUtils.repeat('x', (int) 'x');
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "|{s@(4`4p", (CharSequence) "|{s@(4`4p", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("j0P}1RiK|rR$~WS(r", '~');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.overlay("j0P}1RiK|rR$~WS(r", "~LE8_uX,F!-Ad", '~', '~');
      assertEquals("j0P}1RiK|rR$~WS(r~LE8_uX,F!-Ad", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("j0P}1RiK|rR$~WS(r~LE8_uX,F!-Ad", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "j0P}1RiK|rR$~WS(r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.swapCase("g(J(");
      assertFalse(string1.equals((Object)string0));
      assertEquals("G(j(", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "j0P}1RiK|rR$~WS(r", (CharSequence) "j0P}1RiK|rR$~WS(r~LE8_uX,F!-Ad");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverseDelimited("I(9i?$);w:N%", '0');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("I(9i?$);w:N%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("\n");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("~LE8_uX,F!-Ad", " ", stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ~LE8_uX,F!-Ad", string4);
      assertEquals(2, stringArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("The Character must not be null", 10, (-1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)26;
      String string0 = StringUtils.join(byteArray0, '-', (int) (byte)33, (int) (byte) (-126));
      assertEquals("", string0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)32, (byte) (-100), (byte)33, (byte) (-126), (byte) (-113), (byte)1, (byte)26}, byteArray0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach(" ", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("Threshold must not be negative", " ", (-375));
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "Array and element cannot both be null", "Minimum abbreviation width with offset is 7");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("D75(_^ `&8i8(", ">D<O)oa1X?)", "Minimum abbreviation width with offset is 7");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "BTj");
      assertEquals("~@!LXZ6YxCtw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("~@!LXZ6YxCtw", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "", "cK2@iqJ0FN");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.capitalize("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", 392);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The Array must not be null", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '/';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'b';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'|', '/', ',', 'B', 'b'}, charArray0);
      
      String string1 = StringUtils.abbreviate("\r", 392, 392);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("R\"?33Lrbm5Y?s", "Minimum abbreviation width with offset is 7", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("R\"?33Llvl5Y? ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("R\"?33Llvl5Y? ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.strip((String) null, "_iVq9-<w--D+?HoA~d");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("BnJbN*", "ARM45");
      assertEquals("BnJbN*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("BnJbN*");
      assertTrue(string1.equals((Object)string0));
      assertEquals("BnJbN*", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) "ARM45");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.swapCase("BnJbN*");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("bNjBn*", string2);
      assertNotNull(string2);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("BnJbN*"));
      
      HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(priorityQueue0.contains("BnJbN*"));
      assertFalse(hashSet0.contains("BnJbN*"));
      
      boolean boolean0 = hashSet0.add("BnJbN*");
      assertTrue(boolean0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(priorityQueue0.contains("BnJbN*"));
      assertTrue(hashSet0.contains("BnJbN*"));
      assertFalse(hashSet0.contains(string2));
      
      String string3 = StringUtils.join((Iterable<?>) hashSet0, 's');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, priorityQueue0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(string3);
      assertFalse(priorityQueue0.contains("BnJbN*"));
      assertTrue(hashSet0.contains("BnJbN*"));
      assertFalse(hashSet0.contains(string2));
      
      String string4 = StringUtils.chomp("", "bNjBn*");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "java.lang.String@0000000001";
      String string5 = StringUtils.join(objectArray0, 'x', (-1), (-1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals(1, objectArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.strip("B,3", "");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("B,3", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ARM45", "ARM45", 3207);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.join((Iterator<?>) null, "A}&z47|p01e");
      assertNull(string7);
      
      String string8 = StringUtils.removeStart("jh", "jh");
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.abbreviate("", (-1), 3207);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd(":;6z", (String) null);
      assertEquals(":;6z", string1);
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.leftPad((String) null, 0, "");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, (-1520), 4452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "");
      assertEquals("~@!LXZ6YxCtw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~@!LXZ6YxCtw", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('A', 1330);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "~@!LXZ6YxCtw";
      charSequenceArray0[1] = (CharSequence) "D;ijuF},=";
      charSequenceArray0[2] = (CharSequence) "~@!LXZ6YxCtw";
      charSequenceArray0[3] = (CharSequence) "~@!LXZ6YxCtw";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "D;ijuF},=";
      String string4 = StringUtils.appendIfMissing("D;ijuF},=", string3, charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("D;ijuF},=", string4);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = StringUtils.replace("(?: s|[s&&[^ ]])s*", (String) null, (String) null, 2);
      assertEquals("(?: s|[s&&[^ ]])s*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)947;
      shortArray0[1] = (short)7;
      String string2 = StringUtils.join(shortArray0, 'j');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("947j7", string2);
      assertEquals(2, shortArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)947, (short)7}, shortArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "(?: s|[s&&[^ ]])s*";
      stringArray0[2] = "";
      stringArray0[3] = "Y&WlANKSO=(p&";
      stringArray0[4] = "";
      stringArray0[5] = "947j7";
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Y&WlANKSO=(p&";
      stringArray1[1] = "(?: s|[s&&[^ ]])s*";
      stringArray1[2] = "";
      stringArray1[3] = "947j7";
      stringArray1[4] = "(?: s|[s&&[^ ]])s*";
      stringArray1[5] = "(?: s|[s&&[^ ]])s*";
      stringArray1[6] = "947j7";
      stringArray1[7] = "(?: s|[s&&[^ ]])s*";
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, (-1599));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(":lRC9;Q#I/x!xtF:lRC9;Q#I/x!xtF", ":lRC9;Q#I/x!xtF:lRC9;Q#I/x!xtF");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "m%I&V4Mm%I&V4M");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "m%I&V4Mm%I&V4M", (CharSequence) ":lRC9;Q#I/x!xtF:lRC9;Q#I/x!xtF");
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeStart("", "_iVq9-<w--D+?HoA~d");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.chop("dc Z@(J7|7wU");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("dc Z@(J7|7w", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = 'o';
      charArray0[2] = '<';
      charArray0[3] = '&';
      charArray0[4] = ' ';
      String string4 = StringUtils.join(charArray0, '4');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("44o4<4&4 ", string4);
      assertEquals(5, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'4', 'o', '<', '&', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.chomp("a2j]Xi`@l3");
      assertEquals("a2j]Xi`@l3", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("g!8n`\u00059'AOnU9");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g!8n`\u00059'AOnU9", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '1';
      charArray0[2] = '.';
      charArray0[3] = 'E';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "g!8n`\u00059'AOnU9", charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'y', '1', '.', 'E'}, charArray0);
      
      String[] stringArray0 = StringUtils.substringsBetween("ANC_ZRi_!G%*zb*}00[", "g!8n`\u00059'AOnU9", "Ra9BG/6$[B");
      assertNull(stringArray0);
      
      String string2 = StringUtils.replace("g!8n`\u00059'AOnU9", "g!8n`\u00059'AOnU9", "a?qyUXiDPS[", 8192);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("a?qyUXiDPS[", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("-yZ4W6V9Si:Zf`b=h", "-yZ4W6V9Si:Zf`b=h");
      assertEquals("-YZ4W6V9SI:ZF`B=H", locale0.getCountry());
      assertEquals("-yz4w6v9si:zf`b=h", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("-yz4w6v9si:zf`b=h_-YZ4W6V9SI:ZF`B=H", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("", locale0);
      assertEquals("", string0);
      assertEquals("-YZ4W6V9SI:ZF`B=H", locale0.getCountry());
      assertEquals("-yz4w6v9si:zf`b=h", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("-yz4w6v9si:zf`b=h_-YZ4W6V9SI:ZF`B=H", locale0.toString());
      assertNotNull(string0);
      
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<CharBuffer> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, '~');
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("", "-yZ4W6V9Si:Zf`b=h");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'Q';
      int int0 = StringUtils.indexOfAny((CharSequence) "-yZ4W6V9Si:Zf`b=h", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'~', 'Q'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat('~', (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.chomp("cK2@iqJ0FN");
      assertEquals("cK2@iqJ0FN", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN";
      String string1 = StringUtils.removeEnd("Afh\"z$ulNc", "cK2@iqJ0FN");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Afh\"z$ulNc", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN");
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("Afh\"z$ulNc", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.ordinalIndexOf("cK2@iqJ0FN", charSequenceArray0[1], 0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.leftPad("8~?Y97L,", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("8~?Y97L,", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.lastIndexOfAny("8~?Y97L,", charSequenceArray0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      assertEquals(3, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("Afh\"z$ulNc", "*W.W@X:");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Afh\"z$ulNc", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("%f'c29(F`", ")P;=`iiS");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("&S");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("&S", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Afh\"z$ulNc", (CharSequence) "Afh\"z$ulNc");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StringUtils.substringBefore("yc", "s/eB&ED@mIB");
      assertEquals("yc", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "s/eB&ED@mIB", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("yc", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("yc", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("org.apache.commons.lang3.ArrayUtils", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayU", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1424.4987F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad(",,=9_", (-1182));
      assertFalse(string1.equals((Object)string0));
      assertEquals(",,=9_", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\r";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.substring("V[BQedlGTy?P=", 974);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("V[BQedlGTy?P=");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("V[BQEDLGTY?P=", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'j');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) ",,=9_", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.upperCase("\r");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\r", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[0], "V[BQedlGTy?P=");
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int2 = new Integer((-1182));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1182), int2);
      
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string6 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\u0000", string6);
      assertEquals(1, byteArray0.length);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)97;
      shortArray0[1] = (short) (byte)97;
      shortArray0[2] = (short) (byte)97;
      shortArray0[3] = (short) (byte)97;
      shortArray0[4] = (short) (byte)112;
      shortArray0[5] = (short) (byte)97;
      shortArray0[6] = (short) (byte)97;
      String string0 = StringUtils.join(shortArray0, 's');
      assertEquals("97s97s97s97s112s97s97", string0);
      assertEquals(7, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)97, (short)97, (short)97, (short)97, (short)112, (short)97, (short)97}, shortArray0);
      
      String string1 = StringUtils.stripStart("", "97s97s97s97s112s97s97");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharSequence[] charSequenceArray0 = null;
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
      
      int int0 = 2324;
      int int1 = StringUtils.indexOf((CharSequence) null, 2324, 2324);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2324;
      char char0 = 'M';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'M', (-1), 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.repeat("RjtembD(Znc+< G<M", "RjtembD(Znc+< G<M", 16);
      assertEquals("RjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<M", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("RjtembD(Znc+< G<M");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "RjtembD(Znc+< G<M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 16;
      longArray0[1] = (long) 16;
      longArray0[2] = (long) 16;
      boolean boolean2 = StringUtils.isWhitespace("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "RjtembD(Znc+< G<M";
      stringArray0[1] = "";
      stringArray0[3] = "RjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<M";
      stringArray0[4] = "RjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<M";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "RjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<M";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      String string2 = StringUtils.appendIfMissing((String) null, (CharSequence) null, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(9, stringArray0.length);
      assertNull(string2);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "0O5I%'`Y@3b7";
      String[] stringArray0 = new String[8];
      stringArray0[1] = "0O5I%'`Y@3b7";
      stringArray0[2] = "Z}3oacB,Bk)FR";
      stringArray0[3] = "0O5I%'`Y@3b7";
      stringArray0[4] = "0O5I%'`Y@3b7";
      stringArray0[5] = "0O5I%'`Y@3b7";
      stringArray0[6] = "0O5I%'`Y@3b7";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("0O5I%'`Y@3b7", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 10, 10);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString("</[=a%spkSb/6M");
      assertEquals("</[=a%spkSb/6M", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "</[=a%spkSb/6M");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("</[=a%spkSb/6M");
      assertEquals(14, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.right("", 10);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("</[=a%spkSb/6M");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("M6/bSkps%a=[/<", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1458.16836053);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-779.41);
      String string4 = StringUtils.join(doubleArray0, 'm', 10, 0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new double[] {(-1458.16836053), (-1.0), 10.0, 10.0, 0.0, (-779.41)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1457);
      intArray0[1] = 14;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 10;
      intArray0[5] = (int) 'm';
      intArray0[6] = 14;
      intArray0[7] = 10;
      String string5 = StringUtils.join(intArray0, 'r');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("-1457r14r-1r-1r10r109r14r10", string5);
      assertEquals(8, intArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new int[] {(-1457), 14, (-1), (-1), 10, 109, 14, 10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'Y');
      assertNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "', is neither of type Map.Entry nor an Array");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'h', (int) (byte)0, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.remove("nmSlEMHu", '=');
      assertEquals("nmSlEMHu", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("nmSlEMHu", "nmSlEMHu");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removePattern("nmSlEMHu", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("nmSlEMHu", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "nmSlEMHu", "nmSlEMHu");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.leftPad("K:~", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("K:~", string2);
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '=';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '=';
      doubleArray0[5] = (double) '=';
      doubleArray0[6] = (double) '=';
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) '=';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '|', (-597), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -597
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'o';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = '_';
      charArray0[5] = 'J';
      charArray0[6] = '+';
      charArray0[7] = '7';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'q', 'o', 'T', 'T', '_', 'J', '+', '7'}, charArray0);
      
      String string1 = StringUtils.join((byte[]) null, 'T');
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(", '", "");
      assertEquals(", '", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("fk= 2D", "fk= 2D");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fk= 2D", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2112.0F;
      floatArray0[1] = 713.954F;
      floatArray0[2] = 389.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2385.58F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      String string2 = StringUtils.join(floatArray0, '6');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("2112.06713.9546389.060.062385.5860.061.0", string2);
      assertEquals(7, floatArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new float[] {2112.0F, 713.954F, 389.0F, 0.0F, 2385.58F, 0.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      Locale locale0 = Locale.lookup(stack0, treeSet0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 4096, '4');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center(string0, 10, '4');
      assertNotNull(string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("T&7r}Cd@", string1, "", 0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("T&7r}Cd@", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("NIa|", "");
      assertEquals("NIa|", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((long[]) null, '_');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("NIa|", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.chop("");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring((String) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNull(string3);
      
      String string4 = StringUtils.chomp("Array element ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Array element ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("The Character must not be null", 4517);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string6 = StringUtils.join(shortArray0, '_', Integer.MAX_VALUE, (int) (short)0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertEquals(1, shortArray0.length);
      assertNotNull(string6);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      
      String string7 = StringUtils.join(iterator0, '_');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(string7);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      String string8 = StringUtils.join(charArray0, '_', (-1752), (-3540));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertEquals(5, charArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new char[] {'_', '_', '_', '_', '_'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "\\G9\",EX";
      String string1 = StringUtils.strip("G9\",EX");
      assertFalse(string1.equals((Object)string0));
      assertEquals("G9\",EX", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "G9\",EX", (CharSequence) "G9\",EX", (-2443));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 0;
      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 0, "org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("org.apache.commons.lang3.StringUtils");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      char char0 = 'R';
      String string2 = StringUtils.center("JL_O}", 0, 'R');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("JL_O}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center((String) null, 0, "org.apache.commons.lang3.StringUtils");
      assertNull(string3);
      
      char char1 = '}';
      String string4 = StringUtils.rightPad((String) null, 2185, '}');
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2185);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(0));
      
      // Undeclared exception!
      try { 
        stack0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char char0 = ']';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", ']');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      String string0 = StringUtils.join(longArray0, ']');
      assertEquals("-1", string0);
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      char[] charArray0 = new char[0];
      int int0 = 105;
      String string1 = StringUtils.join(charArray0, ']', 105, 105);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("\n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byte byte0 = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byte byte1 = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-80);
      try { 
        StringUtils.toString(byteArray0, "Y|`SkG*M");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(" ", '8');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, " ");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      String string4 = StringUtils.stripToEmpty(" ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove(" ", '8');
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) " ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.center((String) null, 16, (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.strip("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "?cID", "p{InCombiningDiacriticalMarks}+");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The character must not be null", "I(9i?$);w:N%");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("]r.$E_8?~5}kN,`\"j>B");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(19, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      int int0 = StringUtils.countMatches("?cID", "The character must not be null");
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToNull("p{InCombiningDiacriticalMarks}+");
      assertTrue(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastOrdinalIndexOf("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 128);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.countMatches("p{InCombiningDiacriticalMarks}+", "]r.$E_8?~5}kN,`\"j>B");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "I(9i?$);w:N%", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 128;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      String string2 = StringUtils.join(doubleArray0, '=', 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new double[] {128.0, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      int int4 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence[]) stringArray1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertEquals((-1), int4);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.replace("a -|\"3F", "cS~&0NGpcU]$,H&b", "cS~&0NGpcU]$,H&b", 64);
      assertEquals("a -|\"3F", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "a -|\"3F", (CharSequence) "cS~&0NGpcU]$,H&b", 64);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("cS~&0NGpcU]$,H&b");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'A';
      charArray0[2] = 'B';
      charArray0[3] = 'I';
      charArray0[4] = 'P';
      charArray0[5] = '^';
      charArray0[6] = 'K';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "a -|\"3F", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'h', 'A', 'B', 'I', 'P', '^', 'K'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("cS~&0NGpcU]$,H&b");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a -|\"3F", "a -|\"3F", (-1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("a -|\"3F", "cS~&0NGpcU]$,H&b");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.join(charArray0, 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("hKAKBKIKPK^KK", string1);
      assertEquals(7, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'h', 'A', 'B', 'I', 'P', '^', 'K'}, charArray0);
      
      String string2 = "\\u0";
      String string3 = StringUtils.trim(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\\u0", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(15, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.stripAccents("{cW=*");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("{cW=*", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "a -|\"3F", (CharSequence) "{cW=*");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.removeStart("", "]%A*V2rE=KE[s(W'");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("cS~&0NGpcU]$,H&b", "{cW=*");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray3 = StringUtils.substringsBetween("a -|\"3F", (String) null, "");
      assertNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.replace((String) null, "^).r{Hua2", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, 125);
      assertNull(string1);
      
      String string2 = StringUtils.substringBetween((String) null, ", '", (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat(')', 125);
      assertEquals(")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.center((String) null, 125);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = ", '";
      String string1 = StringUtils.trimToEmpty(", '");
      assertTrue(string1.equals((Object)string0));
      assertEquals(", '", string1);
      assertNotNull(string1);
      
      String string2 = "Search and Replace array lengths don't match: ";
      char char0 = '{';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", '{');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) ", '", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertFalse(set0.contains(string2));
      
      String string3 = StringUtils.upperCase("g1p(?Y6E\"bQ0_G", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("G1P(?Y6E\"BQ0_G", string3);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '{';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1);
      String string4 = StringUtils.join(longArray0, '{');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("123{-1{-1{0{-1", string4);
      assertEquals(5, longArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new long[] {123L, (-1L), (-1L), 0L, (-1L)}, longArray0);
      
      String string5 = StringUtils.replaceChars("G1P(?Y6E\"BQ0_G", "g1p(?Y6E\"bQ0_G", ", '");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" PB", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.chomp("Jl]B");
      assertEquals("Jl]B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("The character ", "The character ", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\u000";
      String string3 = StringUtils.substringBeforeLast("The character ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("The character ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Jl]B", 740, '1');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111Jl]B11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("", "k U");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("Jl]B");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Jl]", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "Jl]", (-1));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Jl]", "k U", "Jl]");
      assertNull(stringArray0);
      
      String string7 = StringUtils.remove("`O|&cPDtbOg", 'e');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("`O|&cPDtbOg", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "`O|&cPDtbOg", (-1));
      assertFalse(boolean0);
      
      String string8 = StringUtils.uncapitalize("qg x>=XyKl/i");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertEquals("qg x>=XyKl/i", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.strip("p{InCombiningDiacriticalMarks}+");
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string9);
      assertNotNull(string9);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "Jl]B");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.defaultString("\"SC8kO$zhPDHm{\"h");
      assertEquals("\"SC8kO$zhPDHm{\"h", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("-_?p69BZA*nq+^k_X_", "L+sjZj<m|\rO)&dq");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-_?p69BZA*nq+^k_X_", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("\"SC8kO$zhPDHm{\"h", (-804), 'z');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\"SC8kO$zhPDHm{\"h", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      charArray0[7] = 'z';
      charArray0[8] = 'z';
      String string3 = StringUtils.join(charArray0, 'z', (-804), (-2733));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(9, charArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z'}, charArray0);
      
      String string4 = StringUtils.substring("", 0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("", "\"SC8kO$zhPDHm{\"h");
      assertNull(string5);
      
      String string6 = StringUtils.replaceChars("L+sjZj<m|\rO)&dq", 'z', 'z');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("L+sjZj<m|\rO)&dq", string6);
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)64;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'z', (-4796), 500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4796
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = 'O';
      charArray0[2] = '}';
      charArray0[3] = 'G';
      charArray0[4] = '@';
      charArray0[5] = 'z';
      charArray0[6] = 'F';
      charArray0[7] = '';
      charArray0[8] = 'P';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'E', 'O', '}', 'G', '@', 'z', 'F', '', 'P'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceOnce("", "", "o]az=-zkOjZ*SA.49m");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("FI>R");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FI>R", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart((String) null, "");
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "FI>R", charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'E', 'O', '}', 'G', '@', 'z', 'F', '', 'P'}, charArray0);
      
      String string3 = StringUtils.reverseDelimited("", '2');
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("Index: ", 2428);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.upperCase("(?: s|[s&&[^ ]])s*");
      assertEquals("(?: S|[S&&[^ ]])S*", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "(?: s|[s&&[^ ]])s*");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.abbreviate("3IuE><k!zXW;MqbjZL", 8192);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3IuE><k!zXW;MqbjZL", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("(?: s|[s&&[^ ]])s*");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(?: s|[s&&[^ ]])s*", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("}b 4x", 90);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}b 4x", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("3IuE><k!zXW;MqbjZL", "");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("3IuE><k!zXW;MqbjZL", string4);
      assertNotNull(string4);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 90;
      floatArray0[2] = (float) 90;
      floatArray0[3] = (float) 8192;
      String string5 = StringUtils.join(floatArray0, '{');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("8192.0{90.0{90.0{8192.0", string5);
      assertEquals(4, floatArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new float[] {8192.0F, 90.0F, 90.0F, 8192.0F}, floatArray0, 0.01F);
      
      String string6 = StringUtils.replaceChars("kX#", '?', 'l');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("kX#", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "kX#", "(?: S|[S&&[^ ]])S*");
      assertFalse(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("3IuE><k!zXW;MqbjZL", "(?: S|[S&&[^ ]])S*", 8192);
      assertEquals((-1), int0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("(?: S|[S&&[^ ]])S*"));
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("(?: S|[S&&[^ ]])S*"));
      
      String string7 = StringUtils.join(iterator0, "");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(treeSet0.contains("(?: S|[S&&[^ ]])S*"));
      
      String string8 = StringUtils.normalizeSpace(" ");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "@Y.H^hXf1F[Qm";
      // Undeclared exception!
      try { 
        StringUtils.upperCase("@Y.H^hXf1F[Qm", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2666);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-5390);
      String string0 = StringUtils.join(shortArray0, 'Z');
      assertEquals("-2666Z0Z-5390", string0);
      assertEquals(3, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short) (-2666), (short)0, (short) (-5390)}, shortArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-2666Z0Z-5390";
      stringArray0[1] = "-2666Z0Z-5390";
      stringArray0[2] = "t4{@";
      stringArray0[3] = "ZzL/mxS_";
      stringArray0[4] = "-2666Z0Z-5390";
      String string1 = StringUtils.replaceEach("-2666Z0Z-5390", stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-2666Z0Z-5390", string1);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains('Z'));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains('Z'));
      
      String string2 = StringUtils.join(iterator0, "t4{@");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string2);
      assertFalse(arrayList0.contains('Z'));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "-2666Z0Z-5390", charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      String string3 = StringUtils.substringAfterLast("", "q68\"_A=sl");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(charArray0, 'Z', (int) (short) (-5390), (int) (short) (-5390));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(5, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "t4{@", (-2173), 256);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replaceChars("_b!D3>[~%coiw&'x", "", "Arguments cannot both be null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("_b!D3>[~%coiw&'x", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char char0 = 's';
      String string0 = StringUtils.join((short[]) null, 's');
      assertNull(string0);
      
      String string1 = "5ahay";
      String string2 = StringUtils.removeEnd("5ahay", "5ahay");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null, "");
      assertNull(string3);
      
      int int0 = 10;
      String[] stringArray0 = StringUtils.split((String) null, "~&.$8xxN,[_3L", 10);
      assertNull(stringArray0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(10));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(10));
      
      boolean boolean0 = arrayList0.add((Object) "~&.$8xxN,[_3L");
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(10));
      assertTrue(arrayList0.contains("~&.$8xxN,[_3L"));
      
      String string4 = "";
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'E', (-2572), (-4337));
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.isAlpha(charBuffer0);
      assertFalse(boolean0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      String[] stringArray0 = StringUtils.split("0<.ZqmcE&?");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("0<.ZqmcE&?", "", "0<.ZqmcE&?");
      assertNull(stringArray1);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(charBuffer0));
      
      boolean boolean1 = arrayDeque0.offerLast(charBuffer0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(charBuffer0));
      
      String string1 = StringUtils.join((Iterable<?>) arrayDeque0, "O;WZp0oX~i");
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(string1);
      assertTrue(arrayDeque0.contains(charBuffer0));
      
      String string2 = StringUtils.replaceChars("bUY ;88G%>7Ft", 'k', 'u');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("bUY ;88G%>7Ft", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "bUY ;88G%>7Ft", 1);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isNotBlank(charBuffer0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      String string3 = StringUtils.join(byteArray0, '5');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, byteArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string4 = StringUtils.stripEnd("", "");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1691L);
      longArray0[1] = 548L;
      longArray0[2] = 1882L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '(', 0, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 48);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-3);
      String string1 = StringUtils.join(byteArray0, 'u', 48, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(9, byteArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0, (byte)0, (byte)89, (byte) (-85), (byte) (-17), (byte)26, (byte)2, (byte) (-3)}, byteArray0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ';');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replacePattern("", "}2NKtV<0;W;H!b/jjV", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Locale locale0 = new Locale("", "Cannot store ");
      assertEquals("CANNOT STORE ", locale0.getCountry());
      assertEquals("_CANNOT STORE ", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals("CANNOT STORE ", locale0.getCountry());
      assertEquals("_CANNOT STORE ", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'c', (-441), (-441));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull("82!8rPa!1'CHof?Xqv>");
      assertEquals("82!8rPa!1'CHof?Xqv>", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.EMPTY;
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "82!8rPa!1'CHof?Xqv>";
      String string4 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.substringBefore("v#nOp!G", "");
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("v#nOp!G");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("v#nOp!", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 307);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "82!8rPa!1'CHof?Xqv>";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "v#nOp!G";
      String string7 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = "4n0aI";
      String string1 = StringUtils.rightPad("4n0aI", 127, "Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("4n0aIArray and element cannot both be nullArray and element cannot both be nullArray and element cannot both be nullArray and e", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "4n0aIArray and element cannot both be nullArray and element cannot both be nullArray and element cannot both be nullArray and e";
      String string2 = " vs ";
      String string3 = StringUtils.substring(" vs ", (-2779));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) " vs ";
      int[] intArray0 = new int[4];
      intArray0[0] = (-2779);
      intArray0[1] = 127;
      intArray0[2] = (-2779);
      intArray0[3] = 127;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '[', (-1674), (-1127));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1674
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("hZ'pC", (String) null, 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hZ'pC", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 't';
      charArray0[2] = 'u';
      charArray0[3] = 'O';
      charArray0[4] = '+';
      charArray0[5] = '*';
      charArray0[6] = 'I';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "hZ'pC", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'r', 't', 'u', 'O', '+', '*', 'I'}, charArray0);
      
      String string2 = StringUtils.stripToEmpty("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("hZ'pC", "", 1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("hZ'pC", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-67);
      String string4 = StringUtils.join(byteArray0, 't');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("1t0t-10t-127t93t52t-28t56t-67", string4);
      assertEquals(9, byteArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-10), (byte) (-127), (byte)93, (byte)52, (byte) (-28), (byte)56, (byte) (-67)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Index: ";
      stringArray0[2] = "t=$]1l^E";
      stringArray0[3] = "R";
      stringArray0[4] = "3 pZ(|hk3o";
      stringArray0[5] = "";
      String string0 = "\\u000";
      stringArray0[6] = string0;
      stringArray0[7] = "V'4=.E,,{";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3 pZ(|hk3o", (CharSequence) "");
      assertEquals(10, int0);
      
      String string1 = StringUtils.replaceOnce("VQ_N6", "", "z/c");
      assertFalse(string1.equals((Object)string0));
      assertEquals("VQ_N6", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("", "", 2521, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWithAny("V'4=.E,,{", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitByCharacterType(stringArray0[6]);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(3, stringArray2.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      
      String string3 = StringUtils.abbreviateMiddle("!*", "#JFYM}vU \"],4Y", 1448);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!*", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("!*", 2521, 'X');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2521;
      doubleArray0[2] = (double) 'X';
      String string5 = StringUtils.join(doubleArray0, 'X');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("0.0X2521.0X88.0", string5);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new double[] {0.0, 2521.0, 88.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.repeat("Array element ", 1);
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, " vs ");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(" vs ", "Array element ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase("Array element ");
      assertFalse(string2.equals((Object)string0));
      assertEquals("ARRAY ELEMENT ", string2);
      assertNotNull(string2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Locale.LanguageRange> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string3 = "GN\"\\u\\-C/";
      String string4 = StringUtils.join((Iterator<?>) listIterator0, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ARRAY ELEMENT ", (CharSequence) string3);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length(" vs ");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      String string5 = StringUtils.left("Array element ", 1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("A", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2581);
      shortArray0[1] = (short)1113;
      shortArray0[2] = (short) (-407);
      shortArray0[3] = (short) (-228);
      shortArray0[4] = (short)565;
      shortArray0[5] = (short)4127;
      shortArray0[6] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'x', (int) (short) (-2581), (-1336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2581
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.replacePattern("<#_}Yb\"", "<#_}Yb\"", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Array element ", "<#_}Yb\"");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Array element ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "Array element ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.right("", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("=k\"Us_J-Cx*Q", "Array element ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("=k\"Us_J-Cx*Q", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.remove("null comparator", '.');
      assertEquals("null comparator", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is 7", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replacePattern("", "", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.deleteWhitespace("null comparator");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("nullcomparator", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.repeat(" is not in the range '0' - '9'", 1);
      assertEquals(" is not in the range '0' - '9'", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'x');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.substringBetween(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.leftPad("RWSLzV4h", 45, "");
      assertEquals("                                    RWSLzV4h", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("                                    RWSLzV4h", "RWSLzV4h", 974);
      assertTrue(string1.equals((Object)string0));
      assertEquals("                                    RWSLzV4h", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.repeat("RjtembD(Znc+< G<M", "RjtembD(Znc+< G<M", 16);
      assertEquals("RjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<M", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("RjtembD(Znc+< G<M");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "RjtembD(Znc+< G<M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 16;
      longArray0[1] = (long) 16;
      longArray0[2] = (long) 16;
      String string2 = StringUtils.join(longArray0, '?');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("16?16?16", string2);
      assertEquals(3, longArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new long[] {16L, 16L, 16L}, longArray0);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "RjtembD(Znc+< G<M";
      stringArray0[1] = "";
      stringArray0[2] = "16?16?16";
      stringArray0[3] = "RjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<M";
      stringArray0[4] = "RjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<M";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "16?16?16";
      stringArray0[8] = "RjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<MRjtembD(Znc+< G<M";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-95);
      String string0 = StringUtils.join(byteArray0, 'j', (int) (byte)0, (int) (byte) (-128));
      assertEquals("", string0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-128), (byte)0, (byte)7, (byte) (-75), (byte)31, (byte) (-92), (byte) (-95)}, byteArray0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "U4399xSrXu??}");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("", "O9pE.sDuFlCDH");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("U4399xSrXu??}");
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte) (-75);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)31;
      String string2 = StringUtils.join(byteArray1, 'F', 2684, 0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("", string2);
      assertEquals(7, byteArray1.length);
      assertNotNull(string2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)0, (byte)0, (byte) (-95), (byte) (-75), (byte)0, (byte)31}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 256;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1840;
      intArray0[5] = 2448;
      intArray0[6] = 342;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '_', 0, 2091);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 97);
      assertEquals("                                                                                                 ", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "                                                                                                 ", (CharSequence) "                                                                                                 ");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("                                                                                                 ", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.length("                                                                                                 ");
      assertEquals(97, int0);
      
      String string1 = StringUtils.removePattern("QJ]luiw#W`4@9lmGn,", "                                                                                                 ");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("                                                                                                 "));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      arrayDeque0.push(object0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(object0));
      assertFalse(arrayDeque0.contains("                                                                                                 "));
      
      String string2 = StringUtils.join((Iterable<?>) arrayDeque0, 'A');
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(string2);
      assertTrue(arrayDeque0.contains(object0));
      assertFalse(arrayDeque0.contains("                                                                                                 "));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("p{InCombiningDiacriticalMarks}+", "QJ]luiw#W`4@9lmGn,");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.overlay("", "2^6=6", 326, 97);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("2^6=6", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, ',');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = StringUtils.isWhitespace("java.lang.Object@0000000001");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("2^6=6");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = '\'';
      charArray0[3] = 'A';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {',', ',', '\'', 'A'}, charArray0);
      
      String string5 = StringUtils.left(", Length: ", (-1506));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("2^6=6", 326);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertEquals("2^6=6", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", "(En}rfs3k]m[>Eo?Q");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // (En}rfs3k]m[>Eo?Q
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("-2+AJhSn#?.RX,#(^c=");
      assertEquals("-2+AJhSn#?.RX,#(^c=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("-2+AJhSn#?.RX,#(^c=", "-2+AJhSn#?.RX,#(^c=");
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("-2+AJhSn#?.RX,#(^c="));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains("-2+AJhSn#?.RX,#(^c="));
      
      String string1 = StringUtils.join(iterator0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string1);
      assertFalse(arrayList0.contains("-2+AJhSn#?.RX,#(^c="));
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'S';
      charArray0[2] = '1';
      charArray0[3] = 'l';
      charArray0[4] = 'E';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'|', 'S', '1', 'l', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      String string2 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.repeat('S', 0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) 'S';
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) 'S';
      String string5 = StringUtils.join(doubleArray0, 'S');
      assertFalse(string5.equals((Object)string4));
      assertEquals("83.0S83.0S0.0S83.0S83.0", string5);
      assertEquals(5, doubleArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new double[] {83.0, 83.0, 0.0, 83.0, 83.0}, doubleArray0, 0.01);
      
      String string6 = "8IT";
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("/>.W_>OH(v");
      assertEquals("/>.W_>OH(v", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("/>.W_>OH(v", "/>.W_>OH(v");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("/>.W_>OH(v");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "/>.W_>OH(v", "/>.W_>OH(v");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 448);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "/>.W_>OH(v", 16);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad("hjTX0JT.]kFcpFD?ys!", 0, '2');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("hjTX0JT.]kFcpFD?ys!", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "/>.W_>OH(v");
      assertNull(stringArray1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "/>.W_>OH(v");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.mid("Threshold must not be negative", (-1), 448);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      String string5 = "\\u0";
      Locale locale0 = new Locale("hjTX0JT.]kFcpFD?ys!");
      assertEquals("hjtx0jt.]kfcpfd?ys!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("hjtx0jt.]kfcpfd?ys!", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("hjtx0jt.]kfcpfd?ys!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("hjtx0jt.]kfcpfd?ys!", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("/>.W_>OH(v"));
      
      String string6 = locale0.getDisplayCountry();
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertEquals("hjtx0jt.]kfcpfd?ys!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("hjtx0jt.]kfcpfd?ys!", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string6);
      
      String string7 = StringUtils.lowerCase(string5, locale0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\\u0", string7);
      assertEquals("hjtx0jt.]kfcpfd?ys!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("hjtx0jt.]kfcpfd?ys!", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat(' ', 0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int int2 = StringUtils.countMatches("", (CharSequence) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string9 = StringUtils.substring((String) null, 0);
      assertNull(string9);
      
      String string10 = StringUtils.chomp("JWIPE@-hNPn{!:Qj!~M");
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertEquals("JWIPE@-hNPn{!:Qj!~M", string10);
      assertNotNull(string10);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      String string11 = StringUtils.join(byteArray0, 'i');
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertEquals("0i-128", string11);
      assertEquals(2, byteArray0.length);
      assertNotNull(string11);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-128)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.center("!#uP", (-201), string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!#uP", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, "TcBWicm1LpG#(Y%\"szP");
      assertNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'A';
      charArray0[2] = 'v';
      charArray0[3] = 'p';
      charArray0[4] = '/';
      charArray0[5] = 'S';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'W', 'A', 'v', 'p', '/', 'S'}, charArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = StringUtils.center("!#uP", 0, 'B');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("!#uP", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) null, "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "!#uP", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("\r", "\r", (CharSequence[]) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBetween("The Array must not be null", "The Array must not be null", "The Array must not be null");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripStart((String) null, "The Array must not be null");
      assertNull(string1);
      
      String string2 = StringUtils.stripStart(" in an array of ", "P`%\"P4Mt%2iJ");
      assertEquals(" in an array of ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("The Array must not be null", 18);
      assertFalse(string3.equals((Object)string2));
      assertEquals("The Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be null", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "_iVq9-<w--D+?HoA~d");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeStart("The Character must not be null", (String) null);
      assertEquals("The Character must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("l&A+FmHiJ)adt:FW", (-1848), 1129);
      assertFalse(string2.equals((Object)string1));
      assertEquals("l&A+FmHiJ)adt:FW", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isBlank("The Character must not be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "l&A+FmHiJ)adt:FW");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'J', (-1848), 1129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1848
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.center("%6.1bW(o:[_l", 2258, 'I');
      assertNotNull(string0);
      
      String string1 = StringUtils.center(string0, 1139, "x");
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("Ws$73\tw", (-1533), 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Ws$73\tw", (-1533));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.overlay((String) null, "Ws$73\tw", 0, 0);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, "p{InCombiningDiacriticalMarks}+", 1864);
      assertFalse(string0.equals((Object)string2));
      assertEquals(1864, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "\\u0";
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) string0;
      String string1 = StringUtils.normalizeSpace("^pE");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^pE", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "^pE";
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      String string2 = StringUtils.prependIfMissingIgnoreCase(string0, string0, charSequenceArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\\u0", string2);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 10);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.repeat("za*k@6|lJ", (-1293));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[2], charSequenceArray0[1]);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "", 1219);
      assertNull(stringArray0);
      
      int int2 = StringUtils.indexOf((CharSequence) "^pE", 0, 16);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.appendIfMissing("", charSequenceArray0[0], charSequenceArray0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("\\u0", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("", (-1293));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("");
      assertNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) null, 16);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "^pE", (String) null);
      assertNull(stringArray1);
      
      String string7 = StringUtils.replaceEachRepeatedly("Cannot store ", (String[]) null, (String[]) null);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("Cannot store ", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Cannot store ", (String) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string8 = StringUtils.capitalize(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string7));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertEquals("\\u0", string8);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substring("", 121, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = '}';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', '}'}, charArray0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "CReF|W$R'NGC&FC?");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.startsWith("", "CReF|W$R'NGC&FC?");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 5164);
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("", 121);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                                         ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("", "                                                                                                                         ", (CharSequence[]) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                                         ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.overlay("'U-m|b?2SLByQr<S\"J", " vs ", 2029, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("EgF@pTCq");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("EgF@pTCq", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isWhitespace("EgF@pTCq");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.trimToNull("M");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("M", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string6 = StringUtils.remove("", 'o');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat(" vs ", (-1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.rightPad(",@ZB0lHp2{", 122);
      assertEquals(",@ZB0lHp2{                                                                                                                ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "[\tu");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '{';
      charArray0[2] = '+';
      charArray0[3] = 'I';
      String string2 = StringUtils.join(charArray0, 's');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ss{s+sI", string2);
      assertEquals(4, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'s', '{', '+', 'I'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(",@ZB0lHp2{                                                                                                                ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SrIO", ",@ZB0lHp2{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.rightPad("SrIO", 122);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("SrIO                                                                                                                      ", string3);
      assertNotNull(string3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'I';
      String string4 = StringUtils.join(intArray0, 's');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("73", string4);
      assertEquals(1, intArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new int[] {73}, intArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("ss{s+sI", "ss{s+sI", 256);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("v", "SrIO                                                                                                                      ", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("v", string5);
      assertEquals(8, stringArray1.length);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.defaultString("fXNk|L<");
      assertEquals("fXNk|L<", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, "Search and Replace array lengths don't match: ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Index: ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.remove("Index: ", "Index: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("", "Index: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Index: ", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = null;
      String string2 = StringUtils.join((String[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart("", "");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Minimum abbreviation width is 4", (-3860));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase("}8*Qa~s|Xr#26@KMUh");
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(13, stringArray3.length);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      
      String string4 = "7Q|jY>Y ";
      String string5 = StringUtils.substring("7Q|jY>Y ", 256, (-3860));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.uncapitalize((String) null);
      assertNull(string6);
      
      String string7 = "\\u00";
      String[] stringArray4 = StringUtils.split("Index: ", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertEquals(1, stringArray4.length);
      assertNotNull(stringArray4);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray2);
      
      String string8 = StringUtils.left("7Q|jY>Y ", (-3860));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'j', 0, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 7);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0Nn2%azF )g$yM<;c");
      assertEquals(17, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("w", 'w', 'w');
      assertEquals("w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "w", "w");
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("wz6d7vzJ$Nu");
      assertFalse(string1.equals((Object)string0));
      assertEquals("wz6d7vzJ$Nu", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)837;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1628;
      shortArray0[3] = (short)4517;
      shortArray0[4] = (short) (-1910);
      shortArray0[5] = (short)1625;
      shortArray0[6] = (short)0;
      String string2 = StringUtils.join(shortArray0, 'b');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("837b0b1628b4517b-1910b1625b0", string2);
      assertEquals(7, shortArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)837, (short)0, (short)1628, (short)4517, (short) (-1910), (short)1625, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1910);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 'w';
      String string3 = StringUtils.join(floatArray0, 't');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-1910.0t0.0t119.0", string3);
      assertEquals(3, floatArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new float[] {(-1910.0F), 0.0F, 119.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.left("F*ih6'Wv@Hv&-.Ni:q", (-2178));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("", "F*ih6'Wv@Hv&-.Ni:q");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split((String) null, "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripStart("", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("", (String) null);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("<@rd#", (-1), '#');
      assertEquals("<@rd#", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "<@rd#";
      charSequenceArray0[2] = (CharSequence) "<@rd#";
      String string1 = StringUtils.appendIfMissing("<@rd#", "<@rd#", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("<@rd#", string1);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "<@rd#", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("<@rd#");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOf(charSequenceArray0[1], (CharSequence) "<@rd#");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.leftPad("h-@cIQrb", 2, '~');
      assertEquals("h-@cIQrb", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("h-@cIQrb");
      assertEquals(8, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "h-@cIQrb", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Chinese (Taiwan)", string1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+", locale0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p{incombiningdiacriticalmarks}+", string2);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains("p{InCombiningDiacriticalMarks}+"));
      
      boolean boolean0 = stack0.add((Object) "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[p{InCombiningDiacriticalMarks}+]", stack0.toString());
      assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+"));
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[p{InCombiningDiacriticalMarks}+]", stack0.toString());
      assertNotNull(iterator0);
      assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+"));
      
      char char0 = '>';
      String string3 = StringUtils.join(iterator0, '>');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[p{InCombiningDiacriticalMarks}+]", stack0.toString());
      assertNotNull(string3);
      assertFalse(stack0.contains('>'));
      assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+"));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '>';
      intArray0[1] = 2777;
      intArray0[2] = (int) '>';
      intArray0[3] = (-1572);
      intArray0[4] = (int) '>';
      intArray0[5] = (int) '>';
      intArray0[6] = (int) '>';
      intArray0[7] = (int) '>';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '>', (-1572), 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1572
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "ARM45";
      String string1 = StringUtils.substringBeforeLast("BnJbN*", "ARM45");
      assertFalse(string1.equals((Object)string0));
      assertEquals("BnJbN*", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.swapCase("BnJbN*");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("bNjBn*", string3);
      assertNotNull(string3);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string1));
      
      HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(priorityQueue0.contains(string1));
      assertFalse(hashSet0.contains(string1));
      
      boolean boolean0 = hashSet0.add("BnJbN*");
      assertTrue(boolean0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(hashSet0.contains(string1));
      assertFalse(hashSet0.contains(string3));
      
      String string4 = StringUtils.join((Iterable<?>) hashSet0, 's');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, priorityQueue0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(string4);
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(hashSet0.contains(string1));
      assertFalse(hashSet0.contains(string4));
      
      String string5 = StringUtils.chomp("", "bNjBn*");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "java.lang.String@0000000001";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'x', 0, 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-3426));
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-&nd]JTIu9of_kp'Hb;", "Threshold must not be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.endsWith("Threshold must not be negative", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("-&nd]JTIu9of_kp'Hb;", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'2', ''}, charArray0);
      
      boolean boolean3 = StringUtils.isNotBlank("Threshold must not be negative");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean4 = StringUtils.containsWhitespace("");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "E");
      assertNull(stringArray1);
      
      boolean boolean5 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) '2';
      doubleArray0[2] = (double) 0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-115);
      String string2 = StringUtils.join(byteArray0, 'z', 3360, 0);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(8, byteArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte) (-35), (byte)32, (byte)19, (byte)7, (byte)119, (byte) (-115)}, byteArray0);
      
      doubleArray0[3] = (double) '2';
      doubleArray0[4] = (double) '';
      String string3 = StringUtils.join(doubleArray0, 'P');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-1.0P50.0P0.0P50.0P127.0", string3);
      assertEquals(5, doubleArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new double[] {(-1.0), 50.0, 0.0, 50.0, 127.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.replaceChars("s\"", "s\"", "s\"");
      assertEquals("s\"", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = '{';
      charArray0[2] = 'A';
      charArray0[3] = 'D';
      charArray0[4] = ']';
      charArray0[5] = 'c';
      charArray0[6] = '6';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "s\"", charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'R', '{', 'A', 'D', ']', 'c', '6'}, charArray0);
      
      boolean boolean1 = StringUtils.isNotEmpty("s\"");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.normalizeSpace("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches("", "\r");
      assertEquals(0, int0);
      
      String string2 = StringUtils.join(charArray0, 'D');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("RD{DADDD]DcD6", string2);
      assertEquals(7, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'R', '{', 'A', 'D', ']', 'c', '6'}, charArray0);
      
      String string3 = StringUtils.mid("", 0, 13);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("", 'A');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "", 16);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "0O5I%'`Y@3b7";
      String[] stringArray0 = new String[8];
      String string1 = "";
      stringArray0[0] = "";
      stringArray0[1] = "0O5I%'`Y@3b7";
      stringArray0[2] = "Z}3oacB,Bk)FR";
      stringArray0[3] = "0O5I%'`Y@3b7";
      stringArray0[4] = "0O5I%'`Y@3b7";
      stringArray0[5] = "0O5I%'`Y@3b7";
      stringArray0[6] = "0O5I%'`Y@3b7";
      stringArray0[7] = "0O5I%'`Y@3b7";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("0O5I%'`Y@3b7", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.replace("8k6QxtK(M7Eg", "8k6QxtK(M7Eg", "8k6QxtK(M7Eg", (-185));
      assertEquals("8k6QxtK(M7Eg", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "8k6QxtK(M7Eg";
      charSequenceArray0[1] = (CharSequence) "8k6QxtK(M7Eg";
      charSequenceArray0[2] = (CharSequence) "8k6QxtK(M7Eg";
      charSequenceArray0[3] = (CharSequence) "8k6QxtK(M7Eg";
      charSequenceArray0[4] = (CharSequence) "8k6QxtK(M7Eg";
      charSequenceArray0[5] = (CharSequence) "8k6QxtK(M7Eg";
      charSequenceArray0[6] = (CharSequence) "8k6QxtK(M7Eg";
      charSequenceArray0[7] = (CharSequence) "8k6QxtK(M7Eg";
      charSequenceArray0[8] = (CharSequence) "8k6QxtK(M7Eg";
      int int0 = StringUtils.lastIndexOfAny("8k6QxtK(M7Eg", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[8], "8k6QxtK(M7Eg");
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast("8k6QxtK(M7Eg", "8k6QxtK(M7Eg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[6], charSequenceArray0[4]);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(9, charSequenceArray0.length);
      
      int int2 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[3], "8k6QxtK(M7Eg", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "8k6QxtK(M7Eg";
      stringArray0[2] = "";
      stringArray0[3] = "8k6QxtK(M7Eg";
      stringArray0[4] = "8k6QxtK(M7Eg";
      stringArray0[5] = "8k6QxtK(M7Eg";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("E", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'', 'E'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) charBuffer0, (CharSequence) charBuffer0, 323);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("E", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'', 'E'}, charArray0);
      
      String string0 = StringUtils.defaultString("V)Qm.M8f,8MKJ8]NQ;", "WmGUv}V]mxYbh{}<*}");
      assertEquals("V)Qm.M8f,8MKJ8]NQ;", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "WmGUv}V]mxYbh{}<*}";
      objectArray0[1] = (Object) '';
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) 'E';
      objectArray0[4] = (Object) "V)Qm.M8f,8MKJ8]NQ;";
      objectArray0[5] = (Object) "V)Qm.M8f,8MKJ8]NQ;";
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) "V)Qm.M8f,8MKJ8]NQ;";
      objectArray0[8] = (Object) "V)Qm.M8f,8MKJ8]NQ;";
      String string1 = StringUtils.join(objectArray0, "E4m<", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(9, objectArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("{}", '');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace("{}");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("{}");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("Minimum abbreviation width with offset is 7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isBlank("{}");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "Minimum abbreviation width with offset is 7");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp("Vk&zfkT%G?", "ANC_ZRi_!G%*zb*}00[");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Vk&zfkT%G?", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars(".P12KH%T)16", '', '');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(".P12KH%T)16", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("{}", "{}");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("=QaM7(XY12j6+", 0);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("Vk&zfkT%G?", (-365), "PT??=;[n7'S");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Vk&zfkT%G?", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceChars("Minimum abbreviation width with offset is 7", "\"VIh+&E9[SAJY", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Minimum abbreviation widtn witn offset is 7", string7);
      assertNotNull(string7);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Vk&zfkT%G?", "Vk&zfkT%G?", 0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "{}");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray0, ".P12KH%T)16");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "\"VIh+&E9[SAJY", (CharSequence) "Minimum abbreviation width with offset is 7", (-512));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.mid("Vk&zfkT%G?", 17, (-1543));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.stripToNull("qU");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertEquals("qU", string9);
      assertNotNull(string9);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "qU", (CharSequence) "{}");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 1337);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1337;
      intArray0[1] = 1337;
      intArray0[2] = 1337;
      intArray0[3] = 1337;
      intArray0[4] = 1337;
      String string3 = StringUtils.join(intArray0, '?');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1337?1337?1337?1337?1337", string3);
      assertEquals(5, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {1337, 1337, 1337, 1337, 1337}, intArray0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("1337?1337?1337?1337?1337");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.substring("", 1337, 1337);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("7>", 0, 4430);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("7>", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split("I`7=)^j");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      String string6 = StringUtils.join(intArray1, 'V');
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("0V0", string6);
      assertEquals(2, intArray1.length);
      assertNotNull(string6);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1424.4987F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, 'A', 0, 0);
      assertEquals("", string0);
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {1424.4987F, (-1.0F)}, floatArray0, 0.01F);
      
      String string1 = StringUtils.rightPad(",,=9_", (-1182));
      assertFalse(string1.equals((Object)string0));
      assertEquals(",,=9_", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.substring("V[BQedlGTy?P=", 974);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("V[BQedlGTy?P=");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("V[BQEDLGTY?P=", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'z');
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) ",,=9_", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.upperCase("");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[0], (-1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string6 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\u0000", string6);
      assertEquals(1, byteArray0.length);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'z';
      charArray0[2] = 'A';
      boolean boolean2 = StringUtils.containsAny((CharSequence) ",,=9_", charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'A', 'z', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "Minimum abbreviation width with offset is 7", 64);
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '[');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("", locale0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(string2);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-301));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-301), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-301));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-301), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      String string3 = StringUtils.join(integerArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-301-301", string3);
      assertEquals(2, integerArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.difference("V=]Q0$", (String) null);
      assertEquals("V=]Q0$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("V=]Q0$", "V=]Q0$", (-4552), 1023);
      assertTrue(string1.equals((Object)string0));
      assertEquals("V=]Q0$", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("V=]Q0$", "V=]Q0$");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("V=]Q0$", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "V=]Q0$", (CharSequence) "V=]Q0$");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((float[]) null, 'j');
      assertNull(string3);
      
      String string4 = StringUtils.chomp("<");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("<", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("R>>*l'IFMXO\". 9$_}p", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("V=]Q0$");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      
      String string6 = "\\u00";
      String string7 = StringUtils.replaceOnce(string6, "VGy=h)l]<@t ", "");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("\\u00", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfterLast("VGy=h)l]<@t ", "Array element ");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.center("]", 13);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertEquals("      ]      ", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.substring(";W|+SH!3", 4679);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertEquals("", string10);
      assertNotNull(string10);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string11 = StringUtils.upperCase("I,[R:`}.3AU,WO");
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertEquals("I,[R:`}.3AU,WO", string11);
      assertNotNull(string11);
      
      String string12 = StringUtils.substring("I,[R:`}.3AU,WO", 0, (-4552));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string9));
      assertEquals("", string12);
      assertNotNull(string12);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 13;
      intArray0[2] = 1023;
      intArray0[3] = (int) 'j';
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 13;
      intArray0[7] = 790;
      intArray0[8] = 13;
      String string13 = StringUtils.join(intArray0, 'j');
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertEquals("-1j13j1023j106j-1j-1j13j790j13", string13);
      assertEquals(9, intArray0.length);
      assertNotNull(string13);
      assertArrayEquals(new int[] {(-1), 13, 1023, 106, (-1), (-1), 13, 790, 13}, intArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "NSX[n_:*{a";
      charSequenceArray0[1] = (CharSequence) "NSX[n_:*{a";
      charSequenceArray0[2] = (CharSequence) "NSX[n_:*{a";
      String string0 = StringUtils.chop("NSX[n_:*{a");
      assertEquals("NSX[n_:*{", string0);
      assertNotNull(string0);
      
      charSequenceArray0[3] = (CharSequence) "NSX[n_:*{";
      charSequenceArray0[4] = (CharSequence) "NSX[n_:*{a";
      charSequenceArray0[5] = (CharSequence) "NSX[n_:*{a";
      charSequenceArray0[6] = (CharSequence) "NSX[n_:*{a";
      charSequenceArray0[7] = (CharSequence) "NSX[n_:*{a";
      charSequenceArray0[8] = (CharSequence) "NSX[n_:*{a";
      String string1 = StringUtils.appendIfMissing("NSX[n_:*{a", "NSX[n_:*{a", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NSX[n_:*{a", string1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "NSX[n_:*{a", charSequenceArray0[2]);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.removeEndIgnoreCase("(6vP,t32m<%\"Z", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(6vP,t32m<%\"Z", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("Df(X'wEFpCrhJqV*w,", "Df(X'wEFpCrhJqV*w,");
      assertNull(string3);
      
      String string4 = StringUtils.stripToEmpty("");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring(", Length: ", 0, (-3439));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.substring("|LF{gwG0AA/0)Uqh", 1488);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "|LF{gwG0AA/0)Uqh");
      assertEquals((-1), int0);
      
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, '$');
      assertEquals("", string1);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("$$$$$$$", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$', '$'}, charArray0);
      
      boolean boolean1 = priorityQueue0.add(charBuffer0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charArray0.length);
      assertEquals(1, priorityQueue0.size());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("$$$$$$$", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$', '$'}, charArray0);
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      String[] stringArray0 = StringUtils.substringsBetween("z0<DvlX4Nh[/'dsQn!", "{|v SEl 7n", "");
      assertNull(stringArray0);
      
      String string2 = StringUtils.chop("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "", (CharSequence[]) null);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right((String) null, 1488);
      assertNull(string4);
      
      String string5 = StringUtils.prependIfMissing("", "z0<DvlX4Nh[/'dsQn!", (CharSequence[]) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("z0<DvlX4Nh[/'dsQn!", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("k@0-A6V|", "\"N;ix%MK", (-1));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "");
      assertEquals("", string0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(string0);
      
      String string1 = "";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = arrayDeque0.add(charBuffer0);
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(arrayDeque0.contains(charBuffer0));
      
      String string2 = "gnJJZW&\"[wj";
      String string3 = StringUtils.replace("", "gnJJZW&\"[wj", "\"GNm5", (-2972));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = (-2532);
      String string4 = StringUtils.center("", (-2532));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToEmpty("");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("VOpJi9rzWU^:QGPk $", "VOpJi9rzWU^:QGPk $");
      assertEquals(19, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.lowerCase("VOpJi9rzWU^:QGPk $");
      assertEquals("vopji9rzwu^:qgpk $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("VOpJi9rzWU^:QGPk $", "VOpJi9rzWU^:QGPk $");
      assertTrue(boolean0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = StringUtils.ordinalIndexOf("vopji9rzwu^:qgpk $", "vopji9rzwu^:qgpk $", Integer.MAX_VALUE);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = "";
      String string2 = StringUtils.removeEndIgnoreCase("", "VOpJi9rzWU^:QGPk $");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("VOpJi9rzWU^:QGPk $", "");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "vopji9rzwu^:qgpk $", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.mid("", 64, 64);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      String string1 = StringUtils.substringAfter("r", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("r", string1);
      assertNotNull(string1);
      
      charSequenceArray0[8] = (CharSequence) "r";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equals(charSequenceArray0[1], (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 64;
      intArray0[1] = 64;
      intArray0[2] = 64;
      intArray0[3] = 64;
      intArray0[4] = 64;
      intArray0[5] = 64;
      intArray0[6] = 64;
      intArray0[7] = 1076;
      String string2 = StringUtils.join(intArray0, 'q', 0, (-385));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(8, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {64, 64, 64, 64, 64, 64, 64, 1076}, intArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.rightPad("QW=:? 4b7d", 2, 'u');
      assertEquals("QW=:? 4b7d", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)211;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)489;
      String string1 = StringUtils.join(shortArray0, 't', (int) (short)489, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(4, shortArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)64, (short)211, (short)0, (short)489}, shortArray0);
      
      String[] stringArray0 = StringUtils.split("", "QW=:? 4b7d", (int) (short)0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 't', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripEnd(":;6z", (String) null);
      assertEquals(":;6z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("RWSLzV4h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);
      assertNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = '{';
      String string4 = StringUtils.join(charArray0, 't');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("tttt{", string4);
      assertEquals(3, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'t', 't', '{'}, charArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Nt{2P6~Pso'");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      String string5 = StringUtils.substringAfter("Hdl6An@o)]mG1*(G5r", "Hdl6An@o)]mG1*(G5r");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.overlay("Array and element cannot both be null", "dP~}e^N", Integer.MAX_VALUE, 515);
      assertEquals("Array and element cannot both be nulldP~}e^N", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse("Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("llun eb htob tonnac tnemele dna yarrA", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Array and element cannot both be null", (char[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference(";iw!(t$UW(DkT43\"^", "Array and element cannot both be nulldP~}e^N");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Array and element cannot both be nulldP~}e^N", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1269), 'r');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3270);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string3 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("=(:!lN1$~&", 600, (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("=(:!lN1$~string4);
      assertNotNull(string4);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'r';
      floatArray0[1] = (float) 3270;
      floatArray0[2] = (float) 600;
      floatArray0[3] = (float) 3270;
      floatArray0[4] = (-2778.0017F);
      String string5 = StringUtils.join(floatArray0, 'I');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("114.0I3270.0I600.0I3270.0I-2778.0017", string5);
      assertEquals(5, floatArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new float[] {114.0F, 3270.0F, 600.0F, 3270.0F, (-2778.0017F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.left("", 2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = ";.ve1iBQK8kNLBo]\"";
      String string1 = StringUtils.replaceChars(";.ve1iBQK8kNLBo]\"", '5', 'S');
      assertTrue(string1.equals((Object)string0));
      assertEquals(";.ve1iBQK8kNLBo]\"", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter(";.ve1iBQK8kNLBo]\"", ";.ve1iBQK8kNLBo]\"");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty(";.ve1iBQK8kNLBo]\"");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(";.ve1iBQK8kNLBo]\"");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)32;
      String string0 = StringUtils.join(byteArray0, '[');
      assertEquals("51[127[25[14[65[-1[32", string0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)51, (byte)127, (byte)25, (byte)14, (byte)65, (byte) (-1), (byte)32}, byteArray0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "51[127[25[14[65[-1[32", (CharSequence) "51[127[25[14[65[-1[32");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string0 = StringUtils.join(shortArray0, 's', (int) (short)0, (int) (short)0);
      assertEquals("", string0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "", "org.apache.commons.lang3.ArrayUtils");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      assertNotNull(string0);
      
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int int1 = 127;
      Integer integer3 = new Integer(127);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(127, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int1));
      assertEquals(127, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertEquals(127, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer0));
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1220));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals((-1220), (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(16);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int1));
      assertEquals(16, (int)integer8);
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      String string1 = StringUtils.join(integerArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0001271271270-122016", string1);
      assertEquals(9, integerArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "0001271271270-122016");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 5);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "", 236, 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(""));
      
      String string1 = StringUtils.join(iterator0, '+');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
      assertFalse(linkedList0.contains(""));
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((float[]) null, '+');
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("iCQh");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ICQH", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '\"';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "ICQH", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'+', '\"'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("w+Pf>Zb");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      boolean boolean3 = locale1.hasExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      String string4 = StringUtils.lowerCase((String) null, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNull(string4);
      assertNotSame(locale1, locale0);
      
      boolean boolean4 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string5 = StringUtils.join(shortArray0, '\"');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("0", string5);
      assertEquals(1, shortArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      String string6 = StringUtils.substringAfter("", "*=");
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean5 = StringUtils.containsIgnoreCase("*=", (CharSequence) null);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.replaceChars("iB`Dd`m)wT", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("iB`Dd`m)wT", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "iB`Dd`m)wT", 0);
      assertFalse(boolean0);
      
      char char0 = 'D';
      String string2 = StringUtils.remove("iB`Dd`m)wT", 'D');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("iB`d`m)wT", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("...", ", Length: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vH#$4G");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.chomp("on,/B?M*0;2fA");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("on,/B?M*0;2fA", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((float[]) null, 'D');
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.removeEnd((String) null, "%");
      assertNull(string1);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.substring("4q57|=FQji9Xaa?i", 0, 591);
      assertEquals("4q57|=FQji9Xaa?i", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "4q57|=FQji9Xaa?i", (CharSequence) "4q57|=FQji9Xaa?i");
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.upperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.difference("4q57|=FQji9Xaa?i", "4q57|=FQji9Xaa?i");
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
      
      boolean boolean4 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "4q57|=FQji9Xaa?i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray1.length);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "X69]M!8$l}E@BGv1jB";
      stringArray0[5] = "";
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("jS6+ObwFdd@<v/K", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("jS6+ObwFdd@<v/K", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, 0, 'V');
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("X69]M!8$l}E@BGv1jB", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.chomp((String) null, "-!*N;DIA");
      assertNull(string4);
      
      String string5 = StringUtils.trim((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1514);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(6, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string6 = StringUtils.substring((String) null, 1514);
      assertNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string7 = StringUtils.difference("-!*N;DIA", (String) null);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("-!*N;DIA", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isNumericSpace("-!*N;DIA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.join((int[]) null, '\'');
      assertNull(string8);
      
      String string9 = StringUtils.defaultIfBlank("J(k87R7s&`_@", (String) null);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertEquals("J(k87R7s&`_@", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'scT", ',');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissing("'scT", "'scT", stringArray0);
      assertEquals("'scT", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "'scT", (CharSequence) "'scT", 90);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "'scT", 90);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace((String) null, (String) null, "4b-XW*d)p:lJ", (-2705));
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "4b-XW*d)p:lJ");
      assertEquals(12, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(12, charBuffer0.capacity());
      assertEquals("4b-XW*d)p:lJ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(12, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(12, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, charBuffer0, 1531);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(12, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(12, charBuffer0.capacity());
      assertEquals("4b-XW*d)p:lJ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(12, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(12, charBuffer0.remaining());
      
      String string3 = StringUtils.rightPad((String) null, 421);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'l');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOf((CharSequence) null, 0, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "&,1fs'G.F7", 0);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '8';
      charArray0[2] = '9';
      charArray0[3] = '(';
      charArray0[4] = ';';
      charArray0[5] = 'B';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'!', '8', '9', '(', ';', 'B'}, charArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("&,1fs'G.F7");
      assertEquals("&,1fs'G.F7", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "&,1fs'G.F7");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substring("", 0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("&,1fs'G.F7", 2138);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("&,1fs'G.F7", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.trim("");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = "";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = 'A';
      charArray0[2] = '-';
      charArray0[3] = '!';
      charArray0[4] = '*';
      charArray0[5] = 'q';
      String string0 = StringUtils.join(charArray0, 'p', 1, 0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'}', 'A', '-', '!', '*', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.stripStart(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) " ");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "", 2670, 2670);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("m", "", " ", 2670);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("m", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("m");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("1Y'", "1Y'");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.repeat('J', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "1Y'");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid("Minimum abbreviation width is 4", 0, 1842);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is 4", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is 4", 0, 1842);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceEach("DlPqoL7l,k(m`J%", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("DlPqoL7l,k(m`J%", string2);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("0P+K9Y#wbXaib-mOd", "\r");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0P+K9Y#wbXaib-mOd", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.chomp("cK2@iqJ0FN");
      assertEquals("cK2@iqJ0FN", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN";
      String string1 = StringUtils.replaceChars("Afh\"z$ulNc", "&S", "cK2@iqJ0FN");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Afh\"z$ulNc", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN");
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("Afh\"z$ulNc", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Afh\"z$ulNc", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.ordinalIndexOf("cK2@iqJ0FN", charSequenceArray0[1], 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.leftPad("8~?Y97L,", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("8~?Y97L,", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.lastIndexOfAny("8~?Y97L,", charSequenceArray0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      assertEquals(3, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("Afh\"z$ulNc", "*W.W@X:");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      assertEquals("Afh\"z$ulNc", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("%f'c29(F`", ")P;=`iiS");
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.upperCase("!PqCj;?gGQ>vN/F{[r");
      assertEquals("!PQCJ;?GGQ>VN/F{[R", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '|';
      charArray0[2] = 'x';
      charArray0[3] = 'R';
      charArray0[4] = 'u';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "!PQCJ;?GGQ>VN/F{[R", charArray0);
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'2', '|', 'x', 'R', 'u'}, charArray0);
      
      String string1 = StringUtils.center(":{", 0, ":{");
      assertFalse(string1.equals((Object)string0));
      assertEquals(":{", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      long[] longArray0 = new long[0];
      char char0 = 'g';
      int int0 = (-1987);
      int int1 = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'g', (-1987), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1987
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = ";7+{,\"0c";
      String string3 = StringUtils.abbreviate(";7+{,\"0c", 4096);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(";7+{,\"0c", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf(";7+{,\"0c", "", 4096);
      assertEquals(0, int0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Integer> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "The character must not be null");
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "The character must not be null", (CharSequence) "The character must not be null");
      assertEquals(0, int0);
      
      Integer integer0 = linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      assertNull(integer0);
      assertFalse(linkedList0.contains(int0));
      
      String string1 = StringUtils.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "The character must not be null", "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string3 = StringUtils.join(stringArray0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(5, stringArray0.length);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.substringBefore("kytsDAH*4", "kytsDAH*4");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.appendIfMissing("", "", stringArray0);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string6);
      assertEquals(5, stringArray0.length);
      assertNotNull(string6);
      assertNotSame(stringArray0, stringArray1);
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals((-1), int3);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string7 = StringUtils.removeEndIgnoreCase("", "");
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.substringBefore("(?: s|[s&&[^ ]])s*", "(?: s|[s&&[^ ]])s*");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'K'}, charArray0);
      
      String string1 = StringUtils.lowerCase("4QSejn\"zyIHEF~:m|C");
      assertFalse(string1.equals((Object)string0));
      assertEquals("4qsejn\"zyihef~:m|c", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.mid((String) null, 0, 1805);
      assertNull(string1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1805;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1805;
      intArray0[4] = 1805;
      intArray0[5] = 1805;
      intArray0[6] = 1805;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '.', (-502), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -502
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = ";7+{,\"0c";
      int int0 = StringUtils.ordinalIndexOf("", "", 4096);
      assertEquals(0, int0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.stripStart("XF", "5i;(d$6_s%^;sG2`");
      assertEquals("XF", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("5i;(d$6_s%^;sG2`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("5i;(d$6_s%^;sG2`", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1790L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 996L;
      longArray0[4] = (-3436L);
      longArray0[5] = (-955L);
      longArray0[6] = (-1154L);
      String string2 = StringUtils.join(longArray0, 'y', Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(7, longArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new long[] {1790L, 0L, 0L, 996L, (-3436L), (-955L), (-1154L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "S<qCAY&M5NZ`00 vqM";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "S<qCAY&M5NZ`00 vqM";
      stringArray0[1] = "S<qCAY&M5NZ`00 vqM";
      stringArray0[2] = "S<qCAY&M5NZ`00 vqM";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("S<qCAY&M5NZ`00 vqM", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = '9';
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'', 'X', 'X', '9'}, charArray0);
      
      String string1 = StringUtils.defaultString("", "H)PFuo;Qc-CROf|");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("R~F2pS(6", 0, 'e');
      assertFalse(string2.equals((Object)string1));
      assertEquals("R~F2pS(6", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("H)PFuo;Qc-CROf|", 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("H)PFuo;Qc-CROf|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(charArray0, 'X', 0, 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(4, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'', 'X', 'X', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\u";
      String string3 = StringUtils.chop(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\\", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.substringAfterLast("", (String) null);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'F', 591, 0);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string5);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string6 = StringUtils.join((Iterable<?>) serviceLoader0, 'F');
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string6);
      
      String string7 = StringUtils.removeEndIgnoreCase("", (String) null);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.center(" is not in the range '0' - '9'", 0, 'F');
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertEquals(" is not in the range '0' - '9'", string8);
      assertNotNull(string8);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 591);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.remove("Q`c14Ks-S", '#');
      assertEquals("Q`c14Ks-S", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Q`c14Ks-S", " is not in the range '0' - '9'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.trimToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWith("", "Q`c14Ks-S");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceOnce("Q`c14Ks-S", "Q`c14Ks-S", "");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.replaceChars("", 'K', '#');
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      String string0 = StringUtils.join(doubleArray0, '', 4295, 4295);
      assertEquals("", string0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-1.0), 1.0}, doubleArray0, 0.01);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 4295);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("6n(.8{1r7", ", Length: 0");
      assertEquals("6n(.8{1r7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("6n(.8{1r7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "6n(.8{1r7", (CharSequence) "6n(.8{1r7");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: 0", "U4v=EwB5e'.{:hed");
      assertEquals(3, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, ";fN3eIB!Y<[m");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.strip("xlj[0BAT3@1");
      assertEquals("xlj[0BAT3@1", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "xlj[0BAT3@1";
      String string1 = StringUtils.removeStart("xlj[0BAT3@1", "&r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("xlj[0BAT3@1", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "xlj[0BAT3@1";
      String string2 = StringUtils.leftPad("xlj[0BAT3@1", 8192, "}^M");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) string2;
      String string3 = StringUtils.replaceChars("xlj[0BAT3@1", (String) null, "xlj[0BAT3@1");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("xlj[0BAT3@1", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "xlj[0BAT3@1";
      String string4 = StringUtils.stripToNull("Minimum abbreviation width is 4");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Minimum abbreviation width is 4", string4);
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is 4";
      String string5 = StringUtils.EMPTY;
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.difference("", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string7 = StringUtils.substringBefore("", "Index: ");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("h2Xl", ", Length: 0");
      assertEquals("h2Xl", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "h2Xl", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 604);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.trim("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "h2Xl", (CharSequence) "...", (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("h2Xl");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("...");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.repeat(", Length: 0", 604);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlpha("h2Xl");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.strip("h2Xl");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("h2Xl", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      String string4 = StringUtils.join(charArray0, '3');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(";", string4);
      assertEquals(1, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {';'}, charArray0);
      
      boolean boolean2 = StringUtils.endsWithAny(";", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      String string5 = StringUtils.removeStart(", Length: 0", "h2Xl");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(", Length: 0", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'e');
      assertEquals("10e-104e61e-92e1e-66e-65e0e0", string0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-104), (byte)61, (byte) (-92), (byte)1, (byte) (-66), (byte) (-65), (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = StringUtils.isNumeric("10e-104e61e-92e1e-66e-65e0e0");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("10e-104e61e-92e1e-66e-65e0e0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isEmpty("10e-104e61e-92e1e-66e-65e0e0");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotBlank("10e-104e61e-92e1e-66e-65e0e0");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeStart(":lRC9;Q#I/x!xtF", ":lRC9;Q#I/x!xtF");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("2", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "2");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "2";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "2";
      charSequenceArray0[5] = (CharSequence) "2";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[2]);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.removeEnd("2", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("2", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "2", "4H*M`VvBKe5Oj^M&g;");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "s/eB&ED@mIB");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "s/eB&ED@mIB", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{");
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ"));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ"));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{");
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string0);
      assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ"));
      
      boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substring("t{", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{");
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean3 = arrayList0.add((Object) "");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ"));
      assertTrue(arrayList0.contains(""));
      
      int int1 = 0;
      arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{");
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ"));
      assertTrue(arrayList0.contains("*aKUDx7dwU3mi-y:{"));
      
      char char0 = '}';
      String string2 = StringUtils.join(doubleArray0, '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0", string2);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String string3 = StringUtils.center("", 0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string4 = StringUtils.left("", 0);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ");
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '}');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("*}KU}x7dwU3mi-y:", string5);
      assertEquals(3, stringArray0.length);
      assertNotNull(string5);
      
      boolean boolean6 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) "");
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6);
      
      String string6 = StringUtils.strip("0.0");
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("0.0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Iterable<?>) arrayList0, '}');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("*aKUDx7dwU3mi-y:{}", string7);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNotNull(string7);
      assertFalse(arrayList0.contains("t{"));
      assertTrue(arrayList0.contains(""));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean7 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      assertEquals(3, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, '}');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("0?H#M#5-x2HzIU=Zy\u0002", "0?H#M#5-x2HzIU=Zy\u0002", (-327));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replace(" ", "0?H#M#5-x2HzIU=Zy\u0002", "0?H#M#5-x2HzIU=Zy\u0002", (-327));
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("j(!(srj", (-327));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("j(!(srj", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("0?H#M#5-x2HzIU=Zy\u0002");
      assertFalse(boolean0);
      
      String string4 = StringUtils.chomp("");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "fRD(uQ'Re+?M|94=dx");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.center("<;|b-uzA,ALQ7H#", (-1064), "95ey(pjq#5@rs\"{");
      assertEquals("<;|b-uzA,ALQ7H#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("qu,^jB)0h+tI", "95ey(pjq#5@rs\"{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("95ey(pjq#5@rs\"{", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "95ey(pjq#5@rs\"{", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "95ey(pjq#5@rs\"{", (CharSequence) "<;|b-uzA,ALQ7H#");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 114);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split("\n", 'e');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart((String) null, "}%");
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");
      assertEquals("3::s0DFSZzQA>V_CN", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));
      assertNull(stringArray1);
      
      String string5 = StringUtils.right("", (-240));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference((String) null, "");
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("'9' - '0' egnar eht ni ton si ", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-700);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[3] = (short) (-1905);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string8 = StringUtils.join(shortArray0, ')');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertEquals("-700)2431)336)-1905)2)16)0)-2743", string8);
      assertEquals(8, shortArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new short[] {(short) (-700), (short)2431, (short)336, (short) (-1905), (short)2, (short)16, (short)0, (short) (-2743)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.replace("'/sj", (String) null, (String) null, 16);
      assertEquals("'/sj", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("'/sj", (String) null, 16, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("Ga\"k:iU:");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Ga\"k:iU:", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.repeat(" vs ", 16);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnce(":z4/I#", "'/sj", "+e.9:pV6W");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(":z4/I#", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad((String) null, 0);
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string7 = StringUtils.substringBetween("Strings must not be null", "I3=", "The Array must not be null");
      assertNull(string7);
      
      String string8 = StringUtils.join((Object[]) null, "I3=");
      assertNull(string8);
      
      int int0 = StringUtils.countMatches("Strings must not be null", "\r");
      assertEquals(0, int0);
      
      String string9 = StringUtils.lowerCase("B-|$%k)sj");
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertEquals("b-|$%k)sj", string9);
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.containsWhitespace("'/sj");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2292);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-713);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)2;
      shortArray0[8] = (short)0;
      String string10 = StringUtils.join(shortArray0, 'e');
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertEquals("-2292e0e0e16e4e-713e0e2e0", string10);
      assertEquals(9, shortArray0.length);
      assertNotNull(string10);
      assertArrayEquals(new short[] {(short) (-2292), (short)0, (short)0, (short)16, (short)4, (short) (-713), (short)0, (short)2, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.substring("(?: s|[s&&[^ ]])s*", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "(?: s|[s&&[^ ]])s*";
      charSequenceArray0[1] = (CharSequence) "(?: s|[s&&[^ ]])s*";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase((String) null, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(string1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4416;
      shortArray0[1] = (short)0;
      String string2 = StringUtils.join(shortArray0, 'J');
      assertFalse(string2.equals((Object)string0));
      assertEquals("4416J0", string2);
      assertEquals(2, shortArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)4416, (short)0}, shortArray0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate((short)0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.remaining());
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.limit());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.position());
      assertEquals(0, charBuffer2.capacity());
      assertEquals(0, charBuffer2.length());
      assertTrue(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.remaining());
      assertNotNull(charBuffer2);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer2, charBuffer1);
      assertSame(charBuffer2, charBuffer0);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '9');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("(?: s|[s&&[^ ]])s*9(?: s|[s&&[^ ]])s*", string4);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("(?: s|[s&&[^ ]])s*", "4416J0");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("4416J0", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("4416J0", 13, (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("   4416J0    ", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.startsWithAny("(?: s|[s&&[^ ]])s*", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string7 = StringUtils.uncapitalize("A%");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("a%", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.repeat("^d%8'te3y", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      int int0 = StringUtils.indexOfAny((CharSequence) "^d%8'te3y", charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'b'}, charArray0);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", 0, "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.replace("", "38=.b3p;aJ(sIMg", "", 1969);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "zBg";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zBg");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char char0 = '~';
      String string1 = StringUtils.leftPad("zBg", (-2770), '~');
      assertTrue(string1.equals((Object)string0));
      assertEquals("zBg", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("zBg");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("zBg", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'g');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("zBg", string3);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = "', is neither of type Map.Entry nor an Array";
      String string5 = StringUtils.right("', is neither of type Map.Entry nor an Array", (-4112));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, (-1141));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.join((Object[]) null, " ", 688, 1110);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", 1110);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1489.06F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2378.922F;
      floatArray0[4] = 590.9499F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1420.4613F);
      String string0 = StringUtils.join(floatArray0, '@', 48, 48);
      assertEquals("", string0);
      assertEquals(7, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, (-1489.06F), 0.0F, 2378.922F, 590.9499F, 0.0F, (-1420.4613F)}, floatArray0, 0.01F);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals("", string0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[2], charArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'4'}, charArray0);
      
      String string1 = StringUtils.swapCase("YZ,E4uACQ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("yz,e4Uacq", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "YZ,E4uACQ", charSequenceArray0[5], 3973);
      assertEquals(9, int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.stripEnd(string0, "+<n1KR;-yK3xoj");
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) string1, (CharSequence) "+<n1KR;-yK3xoj");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1004.6256F);
      floatArray0[1] = 3761.1F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1830.3237F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      String string2 = StringUtils.join(floatArray0, 'N');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-1004.6256N3761.1N-1.0N-1.0N-1.0N-1830.3237N0.0N0.0", string2);
      assertEquals(8, floatArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new float[] {(-1004.6256F), 3761.1F, (-1.0F), (-1.0F), (-1.0F), (-1830.3237F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'u';
      charArray0[6] = 'N';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '0', (-1350), (-309));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1350
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      int int0 = 16;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '1', (-627), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -627
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.upperCase("qByd06^0e+");
      assertEquals("QBYD06^0E+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "QBYD06^0E+", (CharSequence) "qByd06^0e+", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("qByd06^0e+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("QByd06^0e+", string1);
      assertNotNull(string1);
      
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, "QBYD06^0E+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("QBYD06^0E+", "qByd06^0e+", 16);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("", ')');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removePattern("", "ojL3i82");
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 226.07797F;
      floatArray0[1] = 1348.4321F;
      floatArray0[2] = (-1534.7029F);
      String string0 = StringUtils.join(floatArray0, 'c');
      assertEquals("226.07797c1348.4321c-1534.7029", string0);
      assertEquals(3, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {226.07797F, 1348.4321F, (-1534.7029F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("", 'a');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", (-497), "");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("", "The Character must not be null", "", 7);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("#KLQLBF9u{", 32, '[');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[#KLQLBF9u{", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "#KLQLBF9u{");
      assertFalse(boolean0);
      
      String string7 = StringUtils.leftPad("x+-3y=5*", 7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("x+-3y=5*", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("8N0V_]MYorW@{d", "8N0V_]MYorW@{d", 57);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.remove("8N0V_]MYorW@{d", 'X');
      assertEquals("8N0V_]MYorW@{d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("8N0V_]MYorW@{d", "Search and Replace array lengths don't match: ", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("8N0V_]MYorW@{d", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("6Q1c{m~hu", (-1328));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("\r", 48, '.');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...............................................\r", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (-1826));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string1);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Class<CharBuffer> class1 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Spliterator<Integer> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      String string2 = "\\u";
      String string3 = StringUtils.join((Iterable<?>) serviceLoader0, string2);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 2958);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, ' ', 0, 0);
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = 'K';
      charArray0[6] = ' ';
      charArray0[7] = ' ';
      charArray0[8] = ' ';
      String string1 = StringUtils.join(charArray0, ' ');
      assertEquals("          K      ", string1);
      assertEquals(9, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {' ', ' ', ' ', ' ', ' ', 'K', ' ', ' ', ' '}, charArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("          K      ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)95;
      byte byte0 = (byte) (-42);
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte) (-66);
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000", string0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\u0000", (CharSequence) "\u0000");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip(" ", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad(" ", 0, "BS3*65IG7>$ID)k%G");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "U%Hs7' ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("U%Hs7' ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("U%Hs7' ");
      assertEquals("U%Hs7'", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "U%Hs7'", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverse("U%Hs7'");
      assertFalse(string2.equals((Object)string1));
      assertEquals("'7sH%U", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", 'P');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.lowerCase("The character ", locale0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("the character ", string3);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'F');
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, 'E', 13, 0);
      assertNull(string2);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(13));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(13));
      assertTrue(arrayDeque0.contains(integer0));
      
      Integer integer1 = new Integer(122);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(122, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean1 = arrayDeque0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(13));
      assertTrue(arrayDeque0.contains(0));
      
      String string3 = StringUtils.join((Iterable<?>) arrayDeque0, '<');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0<122", string3);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertNotNull(string3);
      assertFalse(arrayDeque0.contains(13));
      assertTrue(arrayDeque0.contains(0));
      
      String[] stringArray0 = StringUtils.split("`F fL", (String) null, 2067);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("0<122");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string4 = StringUtils.join(floatArray0, 'f');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("0.0", string4);
      assertEquals(1, floatArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "0<122", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "0<122");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("Strings must not be null", "`F fL");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(5, stringArray3.length);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) '<';
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 'E';
      doubleArray0[7] = (double) 0;
      String string5 = StringUtils.join(doubleArray0, 'L', 0, 0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertEquals(8, doubleArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new double[] {13.0, 0.0, 0.0, 60.0, 0.0, 13.0, 69.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.defaultString("U{");
      assertEquals("U{", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '{';
      charArray0[2] = '^';
      charArray0[3] = 'n';
      charArray0[4] = ':';
      charArray0[5] = '%';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "U{", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'%', '{', '^', 'n', ':', '%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'K');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2982);
      shortArray0[1] = (short) (-3731);
      shortArray0[2] = (short) (-2045);
      shortArray0[3] = (short)32;
      String string0 = StringUtils.join(shortArray0, 'n');
      assertEquals("-2982n-3731n-2045n32", string0);
      assertEquals(4, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short) (-2982), (short) (-3731), (short) (-2045), (short)32}, shortArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "-2982n-3731n-2045n32", (CharSequence) "-2982n-3731n-2045n32");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "-2982n-3731n-2045n32", 0, (-755));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "-2982n-3731n-2045n32", (CharSequence) "-2982n-3731n-2045n32", 0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.overlay("|{s@(4`4p", "|{s@(4`4p", 0, 0);
      assertEquals("|{s@(4`4p|{s@(4`4p", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "|{s@(4`4p|{s@(4`4p", (CharSequence) "|{s@(4`4p|{s@(4`4p");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      String string0 = StringUtils.join(byteArray0, '?');
      assertEquals("-93", string0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-93";
      stringArray0[1] = "-93";
      stringArray0[2] = "-93";
      stringArray0[3] = "-93";
      stringArray0[4] = "-93";
      stringArray0[5] = "-93";
      stringArray0[6] = "-93";
      stringArray0[7] = "-93";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-93", string1);
      assertEquals(8, stringArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "-93", (CharSequence) "-93", (int) (byte) (-93));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "The Character must not be null", "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "The Character must not be null", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.removePattern("m%I&V4M", "org.apache.commons.lang3.CharUtils");
      assertEquals("m%I&V4M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("m%I&V4M", "m%I&V4M");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "fOXsK42LD`NC@(D>vyX");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((short[]) null, 'I');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "m%I&V4M");
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-3190));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripEnd("", "");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "");
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), (-3190));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=.");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("g");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y-#fu$T?im", string1);
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.split("Y-#fu$T?im");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      String string2 = StringUtils.substring("", 0, 32);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, 'L');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(0, floatArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.replaceChars("up", 'O', 'O');
      assertEquals("up", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "up", "up");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("_iVq9-<w--D+?HoA~d", "_iVq9-<w--D+?HoA~d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      String string2 = StringUtils.join(byteArray0, 'O');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1", string2);
      assertEquals(1, byteArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "_iVq9-<w--D+?HoA~d");
      assertEquals(0, int0);
      
      String string3 = StringUtils.chomp("1", "_iVq9-<w--D+?HoA~d");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "up", (CharSequence) "_iVq9-<w--D+?HoA~d", (int) (byte)1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "up", (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.substringAfter("", " vs ");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("1", "org.apache.commons.lang3.StringUtils");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("1", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removePattern("1", "=P5R+AZe1");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("1", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.uncapitalize("_iVq9-<w--D+?HoA~d");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("_iVq9-<w--D+?HoA~d", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.StringUtils", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("?M%I", "?M%I");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("?M%I", "?M%I");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "C#a0VQ>;6gU>XB", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("\"1}*rsaeIJHr>>");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\"1}*rsaeIJHr>>", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\"1}*rsaeIJHr>>", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBeforeLast("", "");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("", "Array and element cannot both be null", 385);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "1---/PxPsjc4HD");
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.split((String) null, "]Z6a%DQwE:20Ui/~V", (-1));
      assertNull(stringArray2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-1));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 385;
      intArray0[1] = (-1);
      intArray0[2] = 385;
      intArray0[3] = 1193;
      intArray0[4] = 385;
      intArray0[5] = 385;
      intArray0[6] = 385;
      intArray0[7] = (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '|', 5, 1426);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, ')');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 432);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = StringUtils.join(objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@5159cd68java.lang.Object@73a643e2java.lang.Object@57fdd0eejava.lang.Object@56e985a8";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@5159cd68java.lang.Object@73a643e2java.lang.Object@57fdd0eejava.lang.Object@56e985a8";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "java.lang.Object@5159cd68java.lang.Object@73a643e2java.lang.Object@57fdd0eejava.lang.Object@56e985a8";
      String string1 = StringUtils.prependIfMissing("", "java.lang.Object@5159cd68java.lang.Object@73a643e2java.lang.Object@57fdd0eejava.lang.Object@56e985a8", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.strip("m9#rmmLe[*wS:N");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("m9#rmmLe[*wS:N", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[6], (CharSequence) "");
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.replace("", "3!/ue=j=JHh1[", "0Y", 0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Sn", "");
      assertEquals("Sn", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Sn";
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '';
      charArray0[2] = '-';
      charArray0[3] = 'v';
      charArray0[4] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Z', '', '-', 'v', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1850;
      String string0 = StringUtils.join(intArray0, '.');
      assertEquals("1850", string0);
      assertEquals(1, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1850}, intArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1850", "1850");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "1850", 3, 3);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("1850", (-696), 97);
      assertTrue(string1.equals((Object)string0));
      assertEquals("1850", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.replace("hJlLj#Xz/WwdKOkCq\"4", "hJlLj#Xz/WwdKOkCq\"4", "Hw");
      assertEquals("Hw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-366), (-366));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2R=*#eE\"`";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ", '");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray1, '$');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("2R=*#eE\"`$", string0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '$';
      longArray0[1] = (long) '$';
      longArray0[2] = (long) '$';
      longArray0[3] = (long) '$';
      String string1 = StringUtils.join(longArray0, '$');
      assertFalse(string1.equals((Object)string0));
      assertEquals("36$36$36$36", string1);
      assertEquals(4, longArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new long[] {36L, 36L, 36L, 36L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" in an array of ");
      assertEquals(" in an array of ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) " in an array of ", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.replace("p{InCombiningDiacriticalMarks}+", "\"(k$", "", 64);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, (-913));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("Minimum abbreviation width with offset is 7", "<");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[2] = (CharSequence) "<";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\"(k$";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\"(k$";
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 105);
      assertEquals("                                                                                                         ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("                                                                                                         ", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "");
      assertEquals("~@!LXZ6YxCtw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("~@!LXZ6YxCtw", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.defaultString("Vsr!q&]Z0x}ObR(|8eD");
      assertEquals("Vsr!q&]Z0x}ObR(|8eD", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Vsr!q&]Z0x}ObR(|8eD");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("Vsr!q&]Z0x}ObR(|8eD");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.center("", 1497, "#(0@F");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("Vsr!q&]Z0x}ObR(|8eD");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("vSR!Q&]z0X}oBr(|8Ed", string2);
      assertNotNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = StringUtils.join((Object[]) null, '_');
      assertNull(string3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      String string4 = StringUtils.join(doubleArray0, 'Y', 1497, (-1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      
      String string5 = StringUtils.center("Vsr!q&]Z0x}ObR(|8eD", 1881, "Vsr!q&]Z0x}ObR(|8eD");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 90);
      assertEquals("??????????????????????????????????????????????????????????????????????????????????????????", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("??????????????????????????????????????????????????????????????????????????????????????????");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("uMPC");
      assertFalse(string1.equals((Object)string0));
      assertEquals("uMPC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("N\"o2#` PTHD!p1Id1i");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i1dI1p!DHTP `#2o\"N", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "N\"o2#` PTHD!p1Id1i", (CharSequence) "uMPC", 1991);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("N\"o2#` PTHD!p1Id1i");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "??????????????????????????????????????????????????????????????????????????????????????????", (CharSequence) "i1dI1p!DHTP `#2o\"N");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.stripEnd("N\"o2#` PTHD!p1Id1i", "i1dI1p!DHTP `#2o\"N");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("hgNZ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("hgNZ", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "uMPC";
      stringArray0[1] = "i1dI1p!DHTP `#2o\"N";
      stringArray0[2] = "??????????????????????????????????????????????????????????????????????????????????????????";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("??????????????????????????????????????????????????????????????????????????????????????????", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'i', 200, 200);
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad(" vs ", 200, "rB>JiTQb");
      assertFalse(string1.equals((Object)string0));
      assertEquals("rB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>JiTQbrB>Ji vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(">?!|]3L_5b8J<y|Pd=", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(">?!|]3L_5b8J<y|Pd=", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("", "", 200, 200);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "rB>JiTQb", 200);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The character ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeEnd("!3GXd ", "");
      assertEquals("!3GXd ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", (-920), 'v');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 97);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", "Array and element cannot both be null", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '?');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.remove("(?: s|[s&&[^ ]])s*", "{U1XEB(EJl");
      assertFalse(string1.equals((Object)string0));
      assertEquals("(?: s|[s&&[^ ]])s*", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "(?: s|[s&&[^ ]])s*", (String) null);
      assertFalse(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string1));
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(string1));
      
      String string2 = StringUtils.join(iterator0, "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertNotNull(string2);
      assertFalse(linkedList0.contains(string1));
      
      String string3 = StringUtils.remove("XXt!*Tj,", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("XXt!*Tj,", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '?';
      doubleArray0[1] = (double) '?';
      doubleArray0[2] = (double) '?';
      String string4 = StringUtils.join(doubleArray0, '0', (-1), (-1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new double[] {63.0, 63.0, 63.0}, doubleArray0, 0.01);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      assertNotNull(string5);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[1] = "XXt!*Tj,";
      stringArray1[2] = "XXt!*Tj,";
      stringArray1[3] = "";
      String string6 = StringUtils.replaceEachRepeatedly("XXt!*Tj,", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("XXt!*Tj,", string6);
      assertEquals(0, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(string6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) '?';
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) '?';
      floatArray0[6] = (float) (-1);
      String string7 = StringUtils.join(floatArray0, 'Q', (-1), (-1));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertEquals(7, floatArray0.length);
      assertNotNull(string7);
      assertArrayEquals(new float[] {63.0F, (-1.0F), 48.0F, 63.0F, (-1.0F), 63.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 3214, '\'');
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, 4);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", "3U", 1366);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.overlay("", " in an array of ", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of ", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isBlank(" in an array of ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("j0P}1RiK|rR$~WS(r", '~');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.overlay("j0P}1RiK|rR$~WS(r", "~LE8_uX,F!-Ad", (-2477), (-2477));
      assertEquals("~LE8_uX,F!-Adj0P}1RiK|rR$~WS(r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("~LE8_uX,F!-Adj0P}1RiK|rR$~WS(r", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOf((CharSequence) "j0P}1RiK|rR$~WS(r", (CharSequence) "~LE8_uX,F!-Adj0P}1RiK|rR$~WS(r");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.normalizeSpace("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("~LE8_uX,F!-Ad", " ", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ~LE8_uX,F!-Ad", string2);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("~LE8_uX,F!-Adj0P}1RiK|rR$~WS(r");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~LE8_uX,F!-Adj0P}1RiK|rR$~WS(r", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("The Character must not be null", 10, (-1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", 'e');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, "");
      assertEquals("", string0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray1, "vaf0N@H/E9XUtm");
      assertEquals("", string1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(string1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceChars("vaf0N@H/E9XUtm", "", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vaf0N@H/E9XUtm", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      String string3 = StringUtils.replace("", "", "vaf0N@H/E9XUtm");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring((String) null, 10, 0);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "GJ";
      stringArray0[1] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "RW&8ss+a7)7";
      stringArray0[5] = "(?: s|[s&&[^ ]])s*";
      stringArray0[6] = "NO0jp]H";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.substringBetween("b#7v\"Z6i?umpQU", "b#7v\"Z6i?umpQU");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = "The character must not be null";
      int int0 = 229;
      String string2 = StringUtils.abbreviate("The character must not be null", 229);
      assertTrue(string2.equals((Object)string1));
      assertEquals("The character must not be null", string2);
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "The character must not be null";
      charSequenceArray0[2] = (CharSequence) null;
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("The character must not be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 229, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.remove("Idu^rF", (String) null);
      assertEquals("Idu^rF", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("Idu^rF", "Idu^rF", 2761);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.replacePattern(", '", ", '", "T=[4");
      assertEquals("T=[4", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("T=[4", ", '", 2419);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zoJQZA&TlZ<", "zoJQZA&TlZ<", (-1));
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("T=[4", "Tc");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.length(", '");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string1 = StringUtils.join((Object[]) stringArray1, "T=[4");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("T=[4", string1);
      assertEquals(1, stringArray1.length);
      assertNotNull(string1);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = ';';
      charArray0[2] = 'M';
      charArray0[3] = 'x';
      charArray0[4] = '{';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      charArray0[7] = '\"';
      String string2 = StringUtils.join(charArray0, '\\');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4\\;\\M\\x\\{\\\\\\\\\\\"", string2);
      assertEquals(8, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'4', ';', 'M', 'x', '{', '\\', '\\', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.remove("'/O", 'S');
      assertEquals("'/O", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("'/O", "'/O", 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-2586));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.center("6~L @37EEQ$", (-2586), "The character must not be null");
      assertEquals("6~L @37EEQ$", string0);
      assertNotNull(string0);
      
      int int2 = StringUtils.length("6~L @37EEQ$");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(11, int2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "6~L @37EEQ$";
      String string1 = StringUtils.appendIfMissingIgnoreCase("6~L @37EEQ$", "6~L @37EEQ$", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("6~L @37EEQ$", string1);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      String string0 = StringUtils.join(charArray0, '4');
      assertEquals("4", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.prependIfMissing("FV;|*qvF',P,2@", "4", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4FV;|*qvF',P,2@", string1);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "rtU";
      charSequenceArray0[1] = (CharSequence) "rtU";
      charSequenceArray0[2] = (CharSequence) "rtU";
      charSequenceArray0[3] = (CharSequence) "rtU";
      String string0 = StringUtils.remove("rtU", "ne8");
      assertEquals("rtU", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "rtU";
      charSequenceArray0[5] = (CharSequence) "rtU";
      charSequenceArray0[6] = (CharSequence) "rtU";
      charSequenceArray0[7] = (CharSequence) "rtU";
      charSequenceArray0[8] = (CharSequence) "rtU";
      String string1 = StringUtils.prependIfMissingIgnoreCase("rtU", "rtU", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("rtU", string1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.repeat('e', 2132);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("Threshold must not be negative", "v23$tb3VrRSS-kFn0", 928);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      String string2 = StringUtils.reverse((String) null);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.prependIfMissingIgnoreCase(string1, string0, charSequenceArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, string1, 928, 928);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.abbreviate("|Y$B-O?Px11WLnrt", 0, 16);
      assertEquals("|Y$B-O?Px11WLnrt", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("|Y$B-O?Px11WLnrt", "|Y$B-O?Px11WLnrt", "", 396);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "|Y$B-O?Px11WLnrt";
      String string2 = StringUtils.replaceEach("", (String[]) null, stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceChars("]NX&9lFX~PS+8v6H", '9', '9');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("]NX&9lFX~PS+8v6H", string3);
      assertNotNull(string3);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(0));
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(arrayList0.contains(0));
      assertFalse(linkedHashSet0.contains(0));
      
      String string4 = StringUtils.join((Iterable<?>) linkedHashSet0, '9');
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(string4);
      assertFalse(arrayList0.contains(0));
      assertFalse(linkedHashSet0.contains(0));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("The Array must not be null", 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Arr...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('', 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = "\\u00";
      String string4 = StringUtils.lowerCase(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\\u00", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("dyfY", "t", (-437), (-452));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("tdyfY", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", (-234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("'U TLe$1Bk", "");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Vector<String> vector1 = new Vector<String>();
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      assertFalse(vector1.contains("'U TLe$1Bk"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) vector1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(vector1.contains("'U TLe$1Bk"));
      assertFalse(list0.contains("'U TLe$1Bk"));
      
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(string0);
      
      Vector<Object> vector2 = new Vector<Object>(10, 10);
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertEquals(0, vector2.size());
      assertNotNull(vector2);
      assertFalse(vector2.contains(""));
      
      String string1 = StringUtils.join((Iterable<?>) vector2, 'o');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertEquals(0, vector2.size());
      assertNotNull(string1);
      assertFalse(vector2.contains(""));
      
      String[] stringArray1 = StringUtils.split("'U TLe$1Bk", "", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.lowerCase("ghZ]CWmR;Q]$V");
      assertEquals("ghz]cwmr;q]$v", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "Search and Replace array lengths don't match: ");
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissing("Strings must not be null", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.reverse(", Length: 0");
      assertEquals("0 :htgneL ,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("N!c%7%Qc399PR");
      assertFalse(string1.equals((Object)string0));
      assertEquals("N!c%7%Qc399PR", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "N!c%7%Qc399PR", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "0 :htgneL ,";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "0 :htgneL ,";
      charSequenceArray0[3] = (CharSequence) "N!c%7%Qc399PR";
      charSequenceArray0[4] = (CharSequence) "N!c%7%Qc399PR";
      charSequenceArray0[5] = (CharSequence) "0 :htgneL ,";
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("0 :htgneL ,", ">D<O)oa1X?)", (-924));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(string0));
      
      String string2 = StringUtils.join(iterator0, "N!c%7%Qc399PR");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertNotNull(string2);
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(""));
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      boolean boolean2 = treeSet0.addAll(set0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(treeSet0.contains(""));
      assertFalse(set0.contains(""));
      
      String string1 = StringUtils.join(iterator0, "y)eN");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(treeSet0.contains("y)eN"));
      
      String string2 = StringUtils.leftPad("", 16, 'c');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("cccccccccccccccc", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(")x~)i 5lx{4O2z~");
      assertEquals(")x~)i 5lx{4O2z~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("-v~SsRM");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-v~SsRM", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.trim("fe|kO~[=");
      assertEquals("fe|kO~[=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "fe|kO~[=", (CharSequence) "fe|kO~[=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("(?: s|[s&&[^ ]])s*", "fg/");
      assertEquals("(?: s|[s&&[^ ]])s*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "o&$W$9Myt(-BI6CNQZ";
      String string0 = " v](>;:r<Bi6i@@h-";
      stringArray0[1] = " v](>;:r<Bi6i@@h-";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank(" v](>;:r<Bi6i@@h-");
      assertFalse(boolean0);
      
      String string2 = StringUtils.left("P{", Integer.MAX_VALUE);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P{", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("P{", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("P{", Integer.MAX_VALUE, (-3384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'z', 0, (-2270));
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.leftPad("", 0, 'z');
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.right("", 1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.left("", (-2435));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string3);
      
      int int0 = StringUtils.countMatches("", "org.apache.commons.lang3.StringUtils");
      assertEquals(0, int0);
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)4;
      String string5 = StringUtils.join(shortArray0, 'T');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("0T0T4", string5);
      assertEquals(3, shortArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)4}, shortArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "org.apache.commons.lang3.StringUtils");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.repeat(string0, "Arguments cannot both be null", 32);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\u", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\uArguments cannot both be null\\u", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.upperCase(string0, locale0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\\U", string3);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(string3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      String string4 = StringUtils.join(intArray0, '7', 32, (-1106));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(1, intArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new int[] {32}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)0;
      String string5 = StringUtils.join(byteArray0, '7', 32, (-1451));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertEquals(4, byteArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte)13, (byte)28, (byte)59, (byte)0}, byteArray0);
      
      String string6 = StringUtils.repeat((String) null, (int) (byte)28);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)76;
      String string0 = StringUtils.join(byteArray0, '_');
      assertEquals("1_-21_-121_76", string0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-21), (byte) (-121), (byte)76}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.chomp(" ", " ");
      assertEquals("", string0);
      
      StringUtils.equalsIgnoreCase("", " ");
      String string1 = StringUtils.center(" ", 2340, 'd');
      StringUtils.stripEnd("", "e");
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "");
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.contains((CharSequence) " ", 2340);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, "", (-1));
      StringUtils.join((Object[]) stringArray0, "", 1663, (-1));
      String string2 = StringUtils.SPACE;
      String string3 = StringUtils.stripToEmpty("e");
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("e", "\n");
      assertEquals("e", string4);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "e", (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string3));
      
      StringUtils.getLevenshteinDistance((CharSequence) "e", (CharSequence) "e");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(2, stringArray1.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 1663, (-1));
      assertFalse(int1 == int0);
      
      StringUtils.difference("", "");
      String string5 = StringUtils.reverse(" ");
      assertFalse(string5.equals((Object)string1));
      
      StringUtils.startsWith("\n", "");
      StringUtils.endsWith(" ", "");
      StringUtils.isNumericSpace("");
      StringUtils.substringAfterLast("e", " ");
      StringUtils.swapCase((String) null);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'd';
      floatArray0[2] = (float) 2340;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-982.0F);
      floatArray0[6] = (float) 1663;
      String string6 = StringUtils.join(floatArray0, 'd', 4516, 0);
      assertTrue(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      StringUtils.stripStart("_fQY_af8", "_fQY_af8");
      StringUtils.splitByWholeSeparator("jutEZ?8yc+", "");
      StringUtils.countMatches("jutEZ?8yc+", "jutEZ?8yc+");
      StringUtils.removeStart("9.2a=P+HRf`R's^w+eE", "org.apache.commons.lang3.CharSequenceUtils");
      StringUtils.uncapitalize("_fQY_af8");
      String string0 = "1_iVq9-<w--D+?HoA~d";
      StringUtils.substringsBetween("", "1_iVq9-<w--D+?HoA~d", "\r");
      String string1 = "1_iVq9-<w--D+?HoA~d";
      StringUtils.chomp("1_iVq9-<w--D+?HoA~d");
      char char0 = 'B';
      StringUtils.center(" p_b2*\"Od&p8%", 1, 'B');
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("1_iVq9-<w--D+?HoA~d", 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.repeat("Cannot clone Cloneable type ", "ptgNwtnxatzWXwA", (-32768));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      StringUtils.remove("x", ')');
      String string1 = StringUtils.overlay("", "Cannot clone Cloneable type ", (-32768), (-32768));
      assertEquals("Cannot clone Cloneable type ", string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Cannot clone Cloneable type ");
      String string2 = StringUtils.stripToNull("ptgNwtnxatzWXwA");
      assertEquals("ptgNwtnxatzWXwA", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ptgNwtnxatzWXwA", "ptgNwtnxatzWXwA");
      assertEquals(1, stringArray0.length);
      
      StringUtils.removeEnd((String) null, "aEK60VM*X");
      boolean boolean2 = StringUtils.isNumeric("Cannot clone Cloneable type ");
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("Cannot clone Cloneable type ");
      assertFalse(boolean3 == boolean1);
      
      StringUtils.substringBeforeLast((String) null, "");
      StringUtils.rightPad("aEK60VM*X", 25, 'D');
      StringUtils.abbreviateMiddle("Cannot clone Cloneable type ", "cnC6A#Qa.Kd}", (-32768));
      StringUtils.indexOf((CharSequence) "Cannot clone Cloneable type ", 7, 19);
      String string3 = StringUtils.rightPad("x", 174, 'D');
      assertEquals("xDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string3);
      
      String string4 = StringUtils.substringBetween("ptgNwtnxatzWXwA", "");
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "null$E=H15Rj\"k";
      charSequenceArray0[1] = (CharSequence) "null$E=H15Rj\"k";
      charSequenceArray0[2] = (CharSequence) "null$E=H15Rj\"k";
      charSequenceArray0[3] = (CharSequence) "null$E=H15Rj\"k";
      StringUtils.prependIfMissingIgnoreCase("null$E=H15Rj\"k", "null$E=H15Rj\"k", charSequenceArray0);
      StringUtils.isAlpha("null$E=H15Rj\"k");
      StringUtils.isAlphanumeric(charSequenceArray0[1]);
      StringUtils.rightPad("null$E=H15Rj\"k", 32, "a -|\"3F");
      StringUtils.ordinalIndexOf("null$E=H15Rj\"k", "null$E=H15Rj\"ka -|\"3Fa -|\"3Fa -", 32);
      char[] charArray0 = new char[0];
      StringUtils.join(charArray0, 't');
      StringUtils.isAllLowerCase(charSequenceArray0[3]);
      StringUtils.stripStart("RjtembD(Znc+< G<MRjtembD(Znc+< G<M", "null$E=H15Rj\"ka -|\"3Fa -|\"3Fa -");
      StringUtils.repeat('t', 32);
      StringUtils.defaultIfEmpty((String) null, "RjtembD(Znc+< G<MRjtembD(Znc+< G<M");
      StringUtils.rightPad("Minimum abbreviation width is 4", 109, "\r");
      StringUtils.substringBefore("null$E=H15Rj\"k", "null$E=H15Rj\"k");
      StringUtils.lastIndexOf((CharSequence) "null$E=H15Rj\"k", 32, 109);
      StringUtils.leftPad("", 109, "e");
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 't';
      floatArray0[2] = (float) 109;
      floatArray0[3] = (float) 32;
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 109;
      floatArray0[6] = (float) 109;
      floatArray0[7] = (float) 32;
      floatArray0[8] = (float) 32;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '{', 109, 1628);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(955);
      StringUtils.join((Iterable<?>) arrayList0, '5');
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.mid("", 955, 3);
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.upperCase("");
      charSequenceArray0[2] = (CharSequence) "";
      String string0 = StringUtils.removeStartIgnoreCase("\r", "");
      assertEquals("\r", string0);
      
      charSequenceArray0[3] = (CharSequence) "\r";
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]);
      charSequenceArray0[4] = (CharSequence) charBuffer0;
      StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[0]);
      charSequenceArray0[5] = (CharSequence) "";
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3;
      longArray0[1] = 2587L;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 955;
      longArray0[4] = (long) 955;
      longArray0[5] = (long) 3;
      longArray0[6] = (-1L);
      String string1 = StringUtils.join(longArray0, '5', 8192, (-1515));
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.chomp("\"N;ix%MK");
      assertEquals("\"N;ix%MK", string2);
      
      charSequenceArray0[4] = (CharSequence) "\"N;ix%MK";
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 3L;
      String string3 = StringUtils.join(floatArray0, 'L', 69, 16);
      assertNotNull(string3);
      
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      StringUtils.center(", Length: ", 13);
      StringUtils.rightPad(", Length: ", 13, ", Length: ");
      StringUtils.substring("YC:1z-VJ%jvP$&", 0);
      StringUtils.deleteWhitespace("");
      StringUtils.splitByWholeSeparatorPreserveAllTokens("(?: s|[s&&[^ ]])s*", "YC:1z-VJ%jvP$&");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-1);
      StringUtils.join(byteArray0, '.');
      StringUtils.indexOf((CharSequence) ", Length: ", (CharSequence) "", 722);
      StringUtils.lastIndexOf((CharSequence) ", Length: , L", (int) (byte) (-1));
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1130.8F;
      floatArray0[1] = (float) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '*', 974, 2397);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 974
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      StringUtils.remove("null comparator", '.');
      StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64);
      StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809));
      char[] charArray0 = new char[0];
      StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0);
      StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A");
      StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator");
      StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7");
      StringUtils.replacePattern("", "", "");
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7");
      StringUtils.deleteWhitespace("null comparator");
      boolean boolean1 = StringUtils.contains((CharSequence) "null comparator", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      StringUtils.chop("u?7yJe4Zo*z");
      StringUtils.indexOfAnyBut((CharSequence) "u?7yJe4Zo*", (CharSequence) "u?7yJe4Zo*z");
      StringUtils.substringAfterLast("u?7yJe4Zo*z", "u?7yJe4Zo*");
      char char0 = '?';
      StringUtils.reverseDelimited("u?7yJe4Zo*", '?');
      StringUtils.endsWith("7yJe4Zo*?u", "z");
      StringUtils.isAlphanumericSpace("7yJe4Zo*?u");
      StringUtils.isBlank("u?7yJe4Zo*");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "7yJe4Zo*?u";
      objectArray0[1] = (Object) "7yJe4Zo*?u";
      objectArray0[2] = (Object) "7yJe4Zo*?u";
      StringUtils.join(objectArray0, 'Y');
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'F', 32, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0);
      StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{");
      StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{");
      StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{");
      StringUtils.substring("t{", 0, 0);
      StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      arrayList0.add((Object) "");
      arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{");
      StringUtils.join(doubleArray0, '}');
      StringUtils.center("", 0);
      arrayList0.add((Object) "null comparator");
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringUtils.isNumericSpace(stringBuffer0);
      StringUtils.left("", 0);
      StringUtils.startsWith("", "g?PZ{DRa[O6upHJ");
      StringUtils.join((Object[]) stringArray0, '}');
      StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) "");
      StringUtils.strip("0.0");
      StringUtils.join((Iterable<?>) arrayList0, '}');
      StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:");
      StringUtils.startsWithAny("", stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, '}');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.lowerCase("|qO{l0uUU|R8lUrfn");
      assertNotNull(string0);
      assertEquals("|qo{l0uuu|r8lurfn", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "|qo{l0uuu|r8lurfn", (CharSequence) "|qo{l0uuu|r8lurfn");
      StringUtils.isEmpty("|qo{l0uuu|r8lurfn");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "|qo{l0uuu|r8lurfn";
      charSequenceArray0[1] = (CharSequence) "|qo{l0uuu|r8lurfn";
      StringUtils.mid("-", (-385), (-385));
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "|qo{l0uuu|r8lurfn";
      charSequenceArray0[4] = (CharSequence) "|qo{l0uuu|r8lurfn";
      charSequenceArray0[5] = (CharSequence) "|qO{l0uUU|R8lUrfn";
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-385);
      longArray0[1] = (long) (-385);
      longArray0[2] = (long) (-385);
      longArray0[3] = (long) (-385);
      longArray0[4] = 3213L;
      longArray0[5] = (long) (-385);
      longArray0[6] = (long) (-385);
      longArray0[7] = (long) (-385);
      longArray0[8] = (long) (-385);
      String string1 = StringUtils.join(longArray0, 'D');
      assertEquals("-385D-385D-385D-385D3213D-385D-385D-385D-385", string1);
      
      charSequenceArray0[6] = (CharSequence) "-385D-385D-385D-385D3213D-385D-385D-385D-385";
      charSequenceArray0[7] = (CharSequence) "|qO{l0uUU|R8lUrfn";
      StringUtils.indexOfDifference(charSequenceArray0);
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[4], (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StringUtils.leftPad((String) null, 114);
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);
      assertEquals((-1), int0);
      
      StringUtils.lastIndexOf((CharSequence) null, (-1));
      StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);
      String[] stringArray0 = StringUtils.split("\n", 'e');
      String string0 = StringUtils.removeStart((String) null, "}%");
      assertNull(string0);
      
      StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");
      StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");
      StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string1);
      String[] stringArray1 = StringUtils.splitByWholeSeparator(string1, (String) null, (-1));
      assertEquals(8, stringArray1.length);
      
      StringUtils.right("", (-240));
      StringUtils.difference((String) null, "");
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string1, (CharSequence) null);
      StringUtils.reverse(" is not in the range '0' - '9'");
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-700);
      shortArray0[1] = (short)2431;
      shortArray0[2] = (short)336;
      shortArray0[0] = (short) (-1905);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2743);
      String string2 = StringUtils.join(shortArray0, ')');
      assertEquals("-1905)2431)336)0)2)16)0)-2743", string2);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " ");
      String string1 = StringUtils.capitalize(" ");
      StringUtils.remove(" ", '8');
      String string2 = StringUtils.join((Object[]) charSequenceArray0, " ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]);
      assertTrue(int2 == int0);
      
      int int3 = StringUtils.lastIndexOfAny(" ", charSequenceArray0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");
      assertEquals(".ti')kKzb5J(cbBlh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");
      assertFalse(boolean0);
      
      StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);
      StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3');
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";
      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);
      StringUtils.right("", 0);
      String string1 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);
      assertEquals(".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", string1);
      
      String string2 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");
      assertEquals("org.apache.cosmmons.lang3.StringUtil", string2);
      
      StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      StringUtils.lowerCase("s");
      String string3 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);
      assertEquals("{}smmons.lang3.StringUtil", string3);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".ti')kKzb5J(cbBlh";
      stringArray0[1] = "s";
      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";
      stringArray0[3] = "s";
      stringArray0[4] = "s";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      stringArray0[7] = "";
      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string4);
      
      String string5 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "Kby.&&D(~k)>=");
      assertEquals("Kby.&&D(~k)>=", string5);
      
      StringUtils.join((Object[]) stringArray0, 'p', 1114, (-1));
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.cosmmons.lang3.StringUtils", (CharSequence) "", (-3630));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913, 1913);
      StringUtils.normalizeSpace("The character must not be null");
      String string1 = StringUtils.deleteWhitespace("The character must not be null");
      assertEquals("Thecharactermustnotbenull", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Thecharactermustnotbenull", (CharSequence) "The character must not be null");
      assertEquals(5, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1913;
      doubleArray0[3] = (double) 1913;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 5;
      String string2 = StringUtils.join(doubleArray0, 'X');
      assertEquals("5.0X5.0X1913.0X1913.0X5.0X5.0X5.0", string2);
      
      StringUtils.left("Thecharactermustnotbenull", (-2027));
      StringUtils.startsWith("Thecharactermustnotbenull", "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0");
      boolean boolean0 = StringUtils.isNumeric("The character must not be null");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("V", 5);
      assertEquals("V", string4);
  }
}
