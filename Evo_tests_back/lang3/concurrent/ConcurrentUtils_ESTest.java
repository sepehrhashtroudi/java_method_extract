/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:07:42 GMT 2021
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Comparator;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.function.IntBinaryOperator;
import java.util.function.ToIntFunction;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentException;
import org.apache.commons.lang3.concurrent.ConcurrentInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentRuntimeException;
import org.apache.commons.lang3.concurrent.ConcurrentUtils;
import org.apache.commons.lang3.concurrent.ConstantInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentUtils_ESTest extends ConcurrentUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getSuppressed();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      MockError mockError1 = new MockError();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ExecutionException executionException0 = new ExecutionException(".Aux0`?&|!{Ttq", mockError1);
      ExecutionException executionException1 = new ExecutionException("org.apache.commons.lang3.concurrent.LazyInitializer", executionException0);
      ConcurrentUtils.extractCauseUnchecked(executionException1);
      MockError mockError2 = new MockError("org.apache.commons.lang3.concurrent.LazyInitializer");
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError2);
      ConcurrentHashMap<Integer, String> concurrentHashMap0 = new ConcurrentHashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      String string0 = ConcurrentUtils.createIfAbsent((ConcurrentMap<Integer, String>) concurrentHashMap0, integer0, (ConcurrentInitializer<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentSkipListMap<RuntimeException, Callable<Object>> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Callable<Object>>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      concurrentSkipListMap0.descendingKeySet();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = mockRuntimeException0.getStackTrace();
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      concurrentSkipListMap0.put(mockRuntimeException0, callable0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ConcurrentUtils.putIfAbsent((ConcurrentMap<RuntimeException, Callable<Object>>) concurrentSkipListMap0, (RuntimeException) mockRuntimeException0, callable1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockRuntimeException cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      delayQueue0.poll(553L, timeUnit0);
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Delayed, Object>) null, (Delayed) null, (Object) null);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-187), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Object, Object>) concurrentHashMap0, (Object) concurrentHashMap0, (ConcurrentInitializer<Object>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentHashMap<Error, String> concurrentHashMap0 = new ConcurrentHashMap<Error, String>(0);
      MockError mockError0 = new MockError();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      mockError0.getMessage();
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValuesToInt(1020L, toIntFunction0, 0, intBinaryOperator0);
      concurrentHashMap0.put(mockError0, "");
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentHashMap0, (Error) mockError0, "0v_lVkT>etARD[");
      ExecutionException executionException0 = new ExecutionException("", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(495, threadFactory0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledFuture<Integer> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 495, timeUnit0);
      ConcurrentUtils.ConstantFuture<Delayed> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Delayed>(scheduledFuture0);
      concurrentUtils_ConstantFuture0.cancel(false);
      Integer integer0 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      String string0 = "UhI8:Gi/Qm[`!yx83u";
      MockError mockError0 = new MockError("UhI8:Gi/Qm[`!yx83u");
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException("", (Throwable) null);
      ConcurrentUtils.extractCause(executionException0);
      MockError mockError0 = new MockError("=7u;k<r4L 4@OvX}", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      ExecutionException executionException1 = new ExecutionException(mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: =7u;k<r4L 4@OvX}
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ConcurrentUtils.ConstantFuture<Callable<Object>> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Callable<Object>>(callable0);
      concurrentUtils_ConstantFuture0.isDone();
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>(concurrentUtils_ConstantFuture0);
      constantInitializer0.toString();
      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Object>) constantInitializer0);
      ConcurrentSkipListMap<Integer, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, String>();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Integer, String>) concurrentSkipListMap0, integer0, "ConstantInitializer@2 [ object = org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture@1 ]");
      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Object>) constantInitializer0);
      ConcurrentHashMap<String, RuntimeException> concurrentHashMap0 = new ConcurrentHashMap<String, RuntimeException>();
      concurrentHashMap0.contains(constantInitializer0);
      Callable<RuntimeException> callable1 = (Callable<RuntimeException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<RuntimeException> callableBackgroundInitializer0 = new CallableBackgroundInitializer<RuntimeException>(callable1);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<String, RuntimeException>) concurrentHashMap0, "ConstantInitializer@2 [ object = org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture@1 ]", (ConcurrentInitializer<RuntimeException>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      ExecutionException executionException0 = new ExecutionException("", mockRuntimeException0);
      executionException0.getSuppressed();
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      ConcurrentException concurrentException0 = ConcurrentUtils.extractCause(executionException0);
      ExecutionException executionException1 = new ExecutionException("", concurrentException0);
      ConcurrentRuntimeException concurrentRuntimeException0 = ConcurrentUtils.extractCauseUnchecked(executionException1);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(concurrentRuntimeException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<RuntimeException> callable0 = (Callable<RuntimeException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      ForkJoinTask<RuntimeException> forkJoinTask0 = forkJoinPool0.submit(callable0);
      forkJoinTask0.getRawResult();
      ForkJoinTask<RuntimeException> forkJoinTask1 = forkJoinPool0.submit(forkJoinTask0);
      ConcurrentUtils.ConstantFuture<ForkJoinTask<RuntimeException>> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<ForkJoinTask<RuntimeException>>(forkJoinTask1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      concurrentUtils_ConstantFuture0.get(2444L, timeUnit0);
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>((Callable<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.CallableBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(callable0).toString();
      ConstantInitializer<Callable<Object>> constantInitializer0 = new ConstantInitializer<Callable<Object>>(callable0);
      int int0 = 2;
      Integer integer0 = new Integer(2);
      constantInitializer0.equals(integer0);
      ConcurrentUtils.initialize((ConcurrentInitializer<Callable<Object>>) constantInitializer0);
      ConcurrentUtils.handleCauseUnchecked((ExecutionException) null);
      ConcurrentUtils.extractCauseUnchecked((ExecutionException) null);
      ConcurrentUtils.extractCause((ExecutionException) null);
      ConcurrentSkipListMap<Delayed, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<Delayed, String>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      Callable<Error> callable1 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledFuture<Error> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable1, (long) 2, timeUnit0);
      scheduledThreadPoolExecutor0.isTerminated();
      ConstantInitializer<String> constantInitializer1 = new ConstantInitializer<String>("}");
      constantInitializer1.equals(integer0);
      ConcurrentUtils.createIfAbsent((ConcurrentMap<Delayed, String>) concurrentSkipListMap0, (Delayed) scheduledFuture0, (ConcurrentInitializer<String>) constantInitializer1);
      ConcurrentSkipListMap<Error, ForkJoinTask<Integer>> concurrentSkipListMap1 = new ConcurrentSkipListMap<Error, ForkJoinTask<Integer>>();
      MockError mockError0 = new MockError((Throwable) null);
      int int1 = 0;
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("OAaI}aKpDE");
      MockError mockError0 = new MockError(mockThrowable0);
      ExecutionException executionException0 = new ExecutionException("", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initialize((ConcurrentInitializer<Delayed>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Callable<String> callable1 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable1);
      callableBackgroundInitializer0.getExternalExecutor();
      CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Callable<Object>>(callable0, (ExecutorService) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initialize((ConcurrentInitializer<Callable<Object>>) callableBackgroundInitializer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RuntimeException runtimeException0 = null;
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>((RuntimeException) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentHashMap<Integer, String> concurrentHashMap0 = new ConcurrentHashMap<Integer, String>();
      Integer integer0 = new Integer(2667);
      ConstantInitializer<String> constantInitializer0 = new ConstantInitializer<String>("org.apache.commons.lang3.concurrent.ConcurrentUtils");
      constantInitializer0.toString();
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Integer, String>) concurrentHashMap0, integer0, (ConcurrentInitializer<String>) constantInitializer0);
      ConcurrentUtils.constantFuture("`fYI.&^(*3W7nv+]");
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("ConstantInitializer@1 [ object = org.apache.commons.lang3.concurrent.ConcurrentUtils ]", mockThrowable0);
      ExecutionException executionException0 = new ExecutionException(mockThrowable1);
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: ConstantInitializer@1 [ object = org.apache.commons.lang3.concurrent.ConcurrentUtils ]
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException("!,$JWG-N8&Aj", mockThrowable0);
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // !,$JWG-N8&Aj
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      delayQueue0.poll(0L, timeUnit0);
      ConcurrentUtils.ConstantFuture<Delayed> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Delayed>((Delayed) null);
      concurrentUtils_ConstantFuture0.get(0L, timeUnit0);
      ConcurrentSkipListMap<String, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Integer>();
      Integer integer0 = new Integer((-157));
      ConstantInitializer<Integer> constantInitializer0 = new ConstantInitializer<Integer>(integer0);
      Integer integer1 = new Integer((-157));
      ConcurrentSkipListMap<Error, String> concurrentSkipListMap1 = new ConcurrentSkipListMap<Error, String>();
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentSkipListMap1, (Error) mockError0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockError cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      executionException0.getSuppressed();
      executionException0.getLocalizedMessage();
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecutionException executionException0 = mock(ExecutionException.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(executionException0).getCause();
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      ExecutionException executionException1 = new ExecutionException("#0K`4yx[{#", (Throwable) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", "org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", "org.apache.commons.lang3.concurrent.ConcurrentUtils", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("!yvqM)9R9B+@s*FdB", "!yvqM)9R9B+@s*FdB", "org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", (-1072));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("XjP`4mI|d1]R6", "org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture", "!yvqM)9R9B+@s*FdB", 2);
      stackTraceElementArray0[3] = stackTraceElement3;
      executionException1.setStackTrace(stackTraceElementArray0);
      ConcurrentUtils.extractCause(executionException1);
      ExecutionException executionException2 = new ExecutionException((Throwable) null);
      executionException2.fillInStackTrace();
      executionException2.fillInStackTrace();
      ConcurrentUtils.handleCauseUnchecked(executionException2);
      assertNotSame(executionException2, executionException1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(object0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Future<Callable<Object>> future0 = ConcurrentUtils.constantFuture(callable0);
      Thread thread0 = MockThread.currentThread();
      ForkJoinTask<String> forkJoinTask0 = ForkJoinTask.adapt((Runnable) thread0, "I");
      forkJoinTask0.isCancelled();
      ConcurrentUtils.ConstantFuture<ForkJoinTask<String>> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<ForkJoinTask<String>>(forkJoinTask0);
      concurrentUtils_ConstantFuture1.isCancelled();
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      ConcurrentUtils.handleCause(executionException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConcurrentSkipListMap<Object, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Integer>(comparator0);
      ConstantInitializer<Integer> constantInitializer0 = new ConstantInitializer<Integer>((Integer) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Object, Integer>) concurrentSkipListMap0, (Object) future0, (ConcurrentInitializer<Integer>) constantInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcurrentHashMap<Integer, Error> concurrentHashMap0 = new ConcurrentHashMap<Integer, Error>();
      MockError mockError0 = new MockError();
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError0);
      constantInitializer0.toString();
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Integer, Error>) concurrentHashMap0, (Integer) null, (ConcurrentInitializer<Error>) constantInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConcurrentHashMap<Callable<String>, RuntimeException> concurrentHashMap0 = new ConcurrentHashMap<Callable<String>, RuntimeException>();
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      MockThrowable mockThrowable0 = new MockThrowable("c1YdmUB(O*rGNU9RE`");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.search(0L, (BiFunction<? super Callable<String>, ? super RuntimeException, ? extends String>) biFunction0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("{V;{j_{eW<3;p3/RF#r", mockThrowable0);
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Callable<String>, RuntimeException>) concurrentHashMap0, callable0, (RuntimeException) mockRuntimeException0);
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.isCancelled();
      Integer integer0 = new Integer((-2048));
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      concurrentUtils_ConstantFuture1.isCancelled();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      mockRuntimeException0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>((RuntimeException) null);
      concurrentUtils_ConstantFuture0.get();
      String string0 = "l~*w18@mB.Gl^";
      ExecutionException executionException1 = new ExecutionException("l~*w18@mB.Gl^", executionException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // l~*w18@mB.Gl^
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      concurrentUtils_ConstantFuture0.get((long) 0, timeUnit0);
      ConcurrentHashMap<Error, String> concurrentHashMap0 = new ConcurrentHashMap<Error, String>(0);
      MockError mockError0 = new MockError(":IC?TWffvYqDnT");
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentHashMap0, (Error) mockError0, "Kh*+5b4@&oFsn");
      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null);
      ConcurrentUtils.initialize((ConcurrentInitializer<Error>) null);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null);
      concurrentUtils_ConstantFuture1.get();
      ConcurrentSkipListMap<RuntimeException, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Delayed>();
      ExecutionException executionException0 = new ExecutionException("Naming pattern must not be null!", (Throwable) null);
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      Delayed delayed0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Delayed>) concurrentSkipListMap0, (RuntimeException) null, (ConcurrentInitializer<Delayed>) null);
      assertNull(delayed0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "?K4)-1J,Jz", "{z[ZncKm^!P`QY,T", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "1 ez8", "1 ez8", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "{z[ZncKm^!P`QY,T", "{z[ZncKm^!P`QY,T", (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("?K4)-1J,Jz", "", "?K4)-1J,Jz", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "", "{z[ZncKm^!P`QY,T", 1);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "0Y-v4;", "JGarw", (-1));
      stackTraceElementArray0[5] = stackTraceElement5;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      MockError mockError0 = new MockError("", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConcurrentUtils.handleCauseUnchecked((ExecutionException) null);
      ConcurrentSkipListMap<Delayed, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<Delayed, Object>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>((Callable<Object>) null, scheduledThreadPoolExecutor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.CallableBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConcurrentUtils.handleCause((ExecutionException) null);
      ConcurrentSkipListMap<Delayed, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<Delayed, Delayed>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      MockThread mockThread0 = new MockThread((Runnable) null, "");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread0, 0L, 2, timeUnit0);
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Delayed, Delayed>) concurrentSkipListMap0, (Delayed) scheduledFuture0, (ConcurrentInitializer<Delayed>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>("");
      concurrentUtils_ConstantFuture0.get();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException0);
      concurrentUtils_ConstantFuture1.isCancelled();
      ExecutionException executionException0 = new ExecutionException("b_`Ek&?!5", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockError mockError0 = new MockError("I09RDL5");
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.cancel(false);
      Integer integer0 = new Integer(0);
      ConcurrentUtils.constantFuture(integer0);
      Integer integer1 = new Integer((-3998));
      ConcurrentUtils.constantFuture(integer1);
      ConstantInitializer<String> constantInitializer0 = new ConstantInitializer<String>("4>ZLeeq");
      ConcurrentUtils.initialize((ConcurrentInitializer<String>) constantInitializer0);
      Future<String> future0 = ConcurrentUtils.constantFuture("4>ZLeeq");
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      ConcurrentUtils.ConstantFuture<Delayed> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Delayed>((Delayed) null);
      ConcurrentSkipListMap<String, RuntimeException> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, RuntimeException>();
      ConcurrentSkipListMap<Object, RuntimeException> concurrentSkipListMap1 = new ConcurrentSkipListMap<Object, RuntimeException>((Map<?, ? extends RuntimeException>) concurrentSkipListMap0);
      MockError mockError0 = new MockError("");
      MockThrowable mockThrowable0 = new MockThrowable("", mockError0);
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      ConcurrentRuntimeException concurrentRuntimeException0 = ConcurrentUtils.extractCauseUnchecked(executionException0);
      ConstantInitializer<RuntimeException> constantInitializer0 = new ConstantInitializer<RuntimeException>(concurrentRuntimeException0);
      RuntimeException runtimeException0 = ConcurrentUtils.createIfAbsent((ConcurrentMap<Object, RuntimeException>) concurrentSkipListMap1, (Object) mockError0, (ConcurrentInitializer<RuntimeException>) constantInitializer0);
      assertSame(concurrentRuntimeException0, runtimeException0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>("");
      concurrentUtils_ConstantFuture0.isCancelled();
      ConcurrentSkipListMap<Object, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Integer>();
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Object, Integer>) concurrentSkipListMap0, (Object) concurrentUtils_ConstantFuture0, (ConcurrentInitializer<Integer>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConcurrentUtils.constantFuture("");
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>((Integer) null);
      concurrentUtils_ConstantFuture0.isDone();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null);
      concurrentUtils_ConstantFuture1.get();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentUtils.putIfAbsent((ConcurrentMap<String, String>) concurrentHashMap0, "+qP~uk)|Cf!j", "+qP~uk)|Cf!j");
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0);
      Error error0 = ConcurrentUtils.createIfAbsent((ConcurrentMap<Object, Error>) null, (Object) "+qP~uk)|Cf!j", (ConcurrentInitializer<Error>) callableBackgroundInitializer0);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>("R8^");
      concurrentUtils_ConstantFuture0.isCancelled();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>("R8^");
      concurrentUtils_ConstantFuture1.cancel(true);
      MockThrowable mockThrowable0 = new MockThrowable("pw,2");
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: pw,2
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      executionException0.getSuppressed();
      executionException0.getLocalizedMessage();
      executionException0.getLocalizedMessage();
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException("F*e#u^=aqWbGI{fiz", (Throwable) null);
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      ExecutionException executionException1 = new ExecutionException((Throwable) null);
      ConcurrentException concurrentException0 = ConcurrentUtils.extractCause(executionException1);
      assertNull(concurrentException0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("addInitializer() must not be called after start()!");
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException0);
      concurrentUtils_ConstantFuture0.isDone();
      concurrentUtils_ConstantFuture0.isCancelled();
      ConcurrentHashMap<Object, Integer> concurrentHashMap0 = new ConcurrentHashMap<Object, Integer>();
      int int0 = (-176);
      Integer integer0 = new Integer((-176));
      // Undeclared exception!
      try { 
        ConcurrentUtils.putIfAbsent((ConcurrentMap<Object, Integer>) concurrentHashMap0, (Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockError mockError0 = new MockError("F/]?");
      mockError0.getCause();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.isCancelled();
      ExecutionException executionException0 = new ExecutionException("F/]?", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder");
      executionException0.printStackTrace((PrintStream) mockPrintStream0);
      ConcurrentUtils.handleCauseUnchecked(executionException0);
      assertNull(executionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>((Integer) null);
      MockError mockError0 = new MockError();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(388);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      concurrentUtils_ConstantFuture0.get();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>(integer0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentUtils.putIfAbsent((ConcurrentMap<String, String>) concurrentHashMap0, "+UZp", "");
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", mockThrowable0);
      ConstantInitializer<RuntimeException> constantInitializer0 = new ConstantInitializer<RuntimeException>(mockRuntimeException0);
      MockRuntimeException mockRuntimeException1 = (MockRuntimeException)ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<RuntimeException>) constantInitializer0);
      ConcurrentSkipListMap<RuntimeException, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Integer>();
      MockRuntimeException mockRuntimeException2 = new MockRuntimeException("", mockRuntimeException1);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<RuntimeException, Integer>) concurrentSkipListMap0, (RuntimeException) mockRuntimeException2, (ConcurrentInitializer<Integer>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Object>) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError(mockRuntimeException0);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      assertTrue(concurrentUtils_ConstantFuture0.isDone());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConstantInitializer<Integer> constantInitializer0 = new ConstantInitializer<Integer>(integer0);
      Integer integer1 = ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Integer>) constantInitializer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>("");
      boolean boolean0 = concurrentUtils_ConstantFuture0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(integer0);
      boolean boolean0 = concurrentUtils_ConstantFuture0.isCancelled();
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Integer>(integer1);
      concurrentUtils_ConstantFuture1.get();
      assertFalse(concurrentUtils_ConstantFuture1.isCancelled());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      Future<Delayed> future0 = ConcurrentUtils.constantFuture((Delayed) null);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockRuntimeException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("!;!suu|7?L1X");
      Throwable throwable0 = ConcurrentUtils.checkedException(mockThrowable0);
      assertSame(throwable0, mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer((-1175));
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<String>("~V69Smoq]8pLD&HUlNc");
      concurrentUtils_ConstantFuture1.cancel(true);
      MockError mockError0 = new MockError((String) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture2 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException0);
      mockError0.printStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.lang3.concurrent.ConcurrentUtils");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) concurrentUtils_ConstantFuture0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "Ror['^_ yPimXQx8";
      objectArray0[3] = (Object) concurrentUtils_ConstantFuture2;
      RuntimeException runtimeException0 = concurrentUtils_ConstantFuture2.get();
      objectArray0[4] = (Object) runtimeException0;
      objectArray0[5] = (Object) mockError0;
      objectArray0[6] = (Object) "~V69Smoq]8pLD&HUlNc";
      PrintStream printStream0 = mockPrintStream0.format("Ror['^_ yPimXQx8", objectArray0);
      mockError0.printStackTrace(printStream0);
      concurrentUtils_ConstantFuture2.get();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(integer0);
      concurrentUtils_ConstantFuture0.cancel(true);
      ConcurrentHashMap<Integer, Object> concurrentHashMap0 = new ConcurrentHashMap<Integer, Object>();
      Integer integer1 = new Integer(0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Integer, Object>) concurrentHashMap0, integer1, (ConcurrentInitializer<Object>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockError mockError0 = new MockError("JX7");
      ExecutionException executionException0 = new ExecutionException("ww.W", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConcurrentSkipListMap<RuntimeException, RuntimeException> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, RuntimeException>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Callable<RuntimeException> callable0 = (Callable<RuntimeException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<RuntimeException> callableBackgroundInitializer0 = new CallableBackgroundInitializer<RuntimeException>(callable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("AYJNG3AI}/(S_+Uk");
      PrintWriter printWriter0 = mockPrintWriter0.format("Uncaught exception handler must not be null!", (Object[]) null);
      mockRuntimeException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, RuntimeException>) concurrentSkipListMap0, (RuntimeException) mockRuntimeException0, (ConcurrentInitializer<RuntimeException>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(object0);
      concurrentUtils_ConstantFuture0.get();
      ConcurrentSkipListMap<Integer, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, String>();
      Integer integer0 = new Integer(0);
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Integer, String>) concurrentSkipListMap0, integer0, "Uncaught exception handler must not be null!");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Uncaught exception handler must not be null!");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockRuntimeException0);
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException1);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getMessage();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConcurrentHashMap<String, Integer> concurrentHashMap0 = new ConcurrentHashMap<String, Integer>();
      ConcurrentInitializer<Integer> concurrentInitializer0 = null;
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<String, Integer>) concurrentHashMap0, ".Aux0`?&|!{Ttq", (ConcurrentInitializer<Integer>) null);
      String string0 = "org.apache.commons.lang3.concurrent.LazyInitializer";
      MockError mockError0 = new MockError();
      mockError0.getSuppressed();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockRuntimeException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }
}
