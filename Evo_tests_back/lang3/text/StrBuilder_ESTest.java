/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 04:18:25 GMT 2021
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.Buffer;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.stream.IntStream;
import org.apache.commons.lang3.text.StrBuilder;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = 2016;
      stringBuffer0.setLength(2016);
      assertEquals(2016, stringBuffer0.length());
      
      int int1 = 2;
      int int2 = (-17);
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0, 2, (-17));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(27, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(29, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(29, strBuilder2.length());
      assertEquals(29, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(160, strBuilder0.capacity());
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(160, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(81, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(160, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(81, strBuilder3.length());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.size());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.size());
      assertEquals(2822, strBuilder4.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[2] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2954, strBuilder0.size());
      assertEquals(2954, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals(2954, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2954, strBuilder4.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(2954, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(2954, strBuilder5.length());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5777, strBuilder0.size());
      assertEquals(5777, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder6.size());
      assertEquals(5777, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertEquals((-1), int0);
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5777, strBuilder0.size());
      assertEquals(5777, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder6.size());
      assertEquals(5777, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertEquals(11552, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(5782, strBuilder7.length());
      assertEquals(5782, strBuilder7.size());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5782, strBuilder0.size());
      assertEquals(5782, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5800, strBuilder0.length());
      assertEquals(5800, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(11552, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(5800, strBuilder8.length());
      assertEquals(5800, strBuilder8.size());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5800, strBuilder1.length());
      assertEquals(5800, strBuilder1.size());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder8);
      assertEquals(8622, strBuilder0.size());
      assertEquals(8622, strBuilder0.length());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder9.getNullText());
      assertEquals(11552, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(8622, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(8622, strBuilder9.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(8622, strBuilder1.size());
      assertEquals(8622, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8622, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8622, strBuilder2.length());
      assertEquals(11552, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8622, strBuilder3.length());
      assertEquals(8622, strBuilder3.size());
      assertEquals(11552, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(8622, strBuilder6.size());
      assertEquals(8622, strBuilder6.length());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      CharSequence charSequence0 = strBuilder1.subSequence(2796, 2822);
      assertNotNull(charSequence0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charSequence0);
      assertEquals(8622, strBuilder0.size());
      assertEquals(8622, strBuilder0.length());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(8622, strBuilder1.size());
      assertEquals(8622, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder10 = strBuilder1.appendFixedWidthPadLeft(2802, 2802, '\\');
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(11424, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11424, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(11424, strBuilder1.length());
      assertEquals(11424, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11552, strBuilder10.capacity());
      assertNull(strBuilder10.getNullText());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(11424, strBuilder10.size());
      assertEquals(11424, strBuilder10.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[1];
      char char0 = 'Q';
      Integer integer0 = new Integer((-3878));
      assertNotNull(integer0);
      assertEquals((-3878), (int)integer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, (-3878), 'H');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      
      charArray0[0] = 'Q';
      int int0 = 5;
      // Undeclared exception!
      try { 
        strBuilder0.insert((-3878), charArray0, (-3878), 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3878
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(706);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertNotNull(intStream0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.midString(0, 34);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", strBuilder1.getNewLineText());
      assertEquals(706, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      
      int int0 = 102;
      StrBuilder strBuilder2 = new StrBuilder(102);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(102, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder2.append("", (Object[]) null);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(102, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertEquals(102, strBuilder4.capacity());
      
      char char0 = 'q';
      StrBuilder strBuilder5 = strBuilder0.deleteAll('q');
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder5.getNullText());
      assertEquals("", strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(706, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("");
      assertNotNull(strMatcher0);
      
      // Undeclared exception!
      try { 
        strBuilder5.append("", 1364, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@uY");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("@uY"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      boolean boolean0 = arrayDeque0.add("2qZ^>Qrw9g\"x/].J");
      assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J"));
      assertFalse(arrayDeque0.contains("@uY"));
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'E';
      charArray0[2] = '8';
      charArray0[3] = '&';
      charArray0[4] = 'D';
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'E', '8', '&', 'D'}, charArray0);
      
      arrayDeque0.addFirst("@uY");
      assertTrue(arrayDeque0.contains("@uY"));
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      assertTrue(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque1.contains("@uY"));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "@uY");
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder1);
      assertTrue(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque1.contains("@uY"));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(84, strBuilder0.length());
      assertEquals(84, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(114, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(84, strBuilder1.size());
      assertEquals(84, strBuilder1.length());
      
      boolean boolean1 = arrayDeque0.removeFirstOccurrence(strBuilder0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains("@uY"));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(boolean1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(84, strBuilder0.length());
      assertEquals(84, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append(0.0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(114, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(87, strBuilder2.length());
      assertEquals(87, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.length());
      assertEquals(87, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      
      int int1 = strBuilder0.indexOf('c');
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.length());
      assertEquals(87, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      
      int int2 = strBuilder0.lastIndexOf('c');
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.length());
      assertEquals(87, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      
      int int3 = strBuilder1.size();
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque1.contains("@uY"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(87, int3);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.length());
      assertEquals(87, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(87, strBuilder1.size());
      assertEquals(114, strBuilder1.capacity());
      assertEquals(87, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("2qZ^>Qrw9g\"x/].J");
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder3);
      assertTrue(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque1.contains("@uY"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(103, strBuilder0.length());
      assertEquals(103, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(103, strBuilder3.size());
      assertEquals(103, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(114, strBuilder3.capacity());
      assertEquals(2, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(103, strBuilder1.size());
      assertEquals(114, strBuilder1.capacity());
      assertEquals(103, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      arrayDeque0.addFirst("2qZ^>Qrw9g\"x/].J");
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(arrayDeque0.contains("@uY"));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder1.append(2998);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder4);
      assertTrue(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque1.contains("@uY"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.length());
      assertEquals(107, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(114, strBuilder4.capacity());
      assertEquals(107, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(107, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(107, strBuilder1.size());
      assertEquals(107, strBuilder1.length());
      assertEquals(114, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder1.deleteAll(strMatcher0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder5);
      assertTrue(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque1.contains("@uY"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.length());
      assertEquals(107, strBuilder0.size());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(107, strBuilder5.size());
      assertEquals(114, strBuilder5.capacity());
      assertEquals(107, strBuilder5.length());
      assertEquals(2, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(107, strBuilder1.size());
      assertEquals(107, strBuilder1.length());
      assertEquals(114, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 79;
      StrBuilder strBuilder0 = new StrBuilder(79);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.append((double) 79);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      int int1 = (-2267);
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(56, strBuilder0.size());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder2.size());
      assertEquals(79, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(56, strBuilder2.length());
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll('o');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(53, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(53, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(53, strBuilder2.length());
      assertEquals(53, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(53, strBuilder3.length());
      assertEquals(53, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(79, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      
      strBuilder3.buffer = null;
      assertEquals(53, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(53, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(53, strBuilder2.length());
      assertEquals(53, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(53, strBuilder3.length());
      assertEquals(53, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      
      String string0 = "nCIF=^XRVL:\\t%AH&";
      // Undeclared exception!
      try { 
        strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      stringBuffer0.setLength(2016);
      assertEquals(2016, stringBuffer0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2016, stringBuffer0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(2);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(8, strBuilder2.length());
      assertEquals(8, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2024, strBuilder0.size());
      assertEquals(2024, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2016, stringBuffer0.length());
      assertEquals(4048, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2024, strBuilder2.size());
      assertEquals(2024, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4048, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2024, strBuilder3.size());
      assertEquals(2024, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      StringBuilder stringBuilder0 = strBuilder2.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2024, strBuilder0.size());
      assertEquals(2024, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4048, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2024, strBuilder2.size());
      assertEquals(2024, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder0.append((-523.88385F));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(2034, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2034, strBuilder0.size());
      assertEquals(2034, strBuilder4.length());
      assertEquals(2034, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4048, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      StrBuilder strBuilder5 = strBuilder0.append(5);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2035, strBuilder0.length());
      assertEquals(2035, strBuilder0.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(4048, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2035, strBuilder5.size());
      assertEquals(2035, strBuilder5.length());
      
      StrBuilder strBuilder6 = strBuilder5.setNullText("/RDU5z0P,\u0001Ay");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2035, strBuilder0.length());
      assertEquals(2035, strBuilder0.size());
      assertEquals(4048, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder5.getNullText());
      assertEquals(2035, strBuilder5.size());
      assertEquals(2035, strBuilder5.length());
      assertEquals(2035, strBuilder6.size());
      assertEquals(2035, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder6.getNullText());
      assertEquals(4048, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      
      String string0 = strBuilder2.build();
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2035, strBuilder0.length());
      assertEquals(2035, strBuilder0.size());
      assertEquals(2035, strBuilder2.size());
      assertEquals(4048, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2035, strBuilder2.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText());
      
      StrBuilder strBuilder7 = strBuilder3.append((Object) strBuilder5);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2086, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2086, strBuilder0.length());
      assertEquals(2016, stringBuffer0.length());
      assertEquals(4048, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2086, strBuilder2.size());
      assertEquals(2086, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText());
      assertEquals(4048, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2086, strBuilder3.size());
      assertEquals(2086, strBuilder3.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder3.getNullText());
      assertEquals(4048, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder5.getNullText());
      assertEquals(2086, strBuilder5.length());
      assertEquals(2086, strBuilder5.size());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(4048, strBuilder7.capacity());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder7.getNullText());
      assertEquals(2086, strBuilder7.length());
      assertEquals(2086, strBuilder7.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder8 = strBuilder0.append(object0);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertEquals(2113, strBuilder0.length());
      assertEquals(2113, strBuilder0.size());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder8.getNullText());
      assertEquals(2113, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(2113, strBuilder8.size());
      assertEquals(4048, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      
      StrBuilder strBuilder9 = strBuilder2.appendNewLine();
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder5);
      assertEquals(2114, strBuilder0.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2114, strBuilder0.size());
      assertEquals(2114, strBuilder2.size());
      assertEquals(4048, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText());
      assertEquals(2114, strBuilder2.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder9.getNullText());
      assertEquals(2114, strBuilder9.length());
      assertEquals(4048, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(2114, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      
      StringBuffer stringBuffer1 = strBuilder9.toStringBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder5);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertEquals(2114, strBuilder0.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4048, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2114, strBuilder0.size());
      assertEquals(2114, strBuilder2.size());
      assertEquals(4048, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText());
      assertEquals(2114, strBuilder2.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder9.getNullText());
      assertEquals(2114, strBuilder9.length());
      assertEquals(4048, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(2114, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(2114, stringBuffer1.length());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      strBuilder8.buffer = charArray0;
      assertEquals(2114, strBuilder0.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2114, strBuilder0.size());
      assertEquals(1, strBuilder8.capacity());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder8.getNullText());
      assertEquals(2114, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(2114, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      
      StrBuilder strBuilder10 = strBuilder5.setNullText("");
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder10);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder9);
      assertEquals(2114, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2114, strBuilder0.size());
      assertEquals(1, strBuilder10.capacity());
      assertEquals(2114, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(2114, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2114, strBuilder5.length());
      assertEquals(1, strBuilder5.capacity());
      assertEquals(2114, strBuilder5.size());
      
      int int0 = strBuilder8.length();
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertEquals(2114, int0);
      assertEquals(2114, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2114, strBuilder0.size());
      assertEquals(1, strBuilder8.capacity());
      assertEquals(2114, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(2114, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      
      int int1 = strBuilder0.indexOf((String) null, (-677));
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder10);
      assertEquals((-1), int1);
      assertEquals(2114, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2114, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder3.appendln((float) 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, 0, 'K');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = '#';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      charArray0[7] = 'K';
      StrBuilder strBuilder2 = strBuilder0.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertEquals(9, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'R', 'K', 'K', 'K', '#', 'K', 'K', 'K'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln('B');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(11, strBuilder3.size());
      assertEquals(11, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "SzpQ!4 ;U";
      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      
      char char0 = '`';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(106, strBuilder0.size());
      assertEquals(106, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(106, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(106, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(212, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(110, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(110, strBuilder0.size());
      assertEquals(212, strBuilder2.capacity());
      assertEquals(110, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(110, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(114, strBuilder0.length());
      assertEquals(114, strBuilder0.size());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(114, strBuilder2.size());
      assertEquals(114, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(212, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(114, strBuilder3.length());
      assertEquals(114, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(109, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(109, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(212, strBuilder1.capacity());
      assertEquals(109, strBuilder1.length());
      assertEquals(109, strBuilder1.size());
      assertEquals(109, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(109, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(212, strBuilder4.capacity());
      
      String string1 = strBuilder0.getNullText();
      assertNull(string1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(109, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(109, strBuilder0.length());
      
      String string2 = strBuilder1.leftString((-2254));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertEquals("", string2);
      assertEquals(109, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(109, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(212, strBuilder1.capacity());
      assertEquals(109, strBuilder1.length());
      assertEquals(109, strBuilder1.size());
      
      boolean boolean0 = strBuilder3.contains('`');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertTrue(boolean0);
      assertEquals(109, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(109, strBuilder0.length());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(109, strBuilder2.length());
      assertEquals(109, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(109, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(212, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(109, strBuilder3.length());
      
      StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji");
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(109, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(109, strBuilder0.length());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(109, strBuilder2.length());
      assertEquals(109, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(109, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(212, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(109, strBuilder5.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(2817, (-1.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2817
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-890));
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.append("$Ps-)|ysy>r47^");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder1;
      objectArray0[1] = (Object) "$Ps-)|ysy>r47^";
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder0;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      
      objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[5] = (Object) "$Ps-)|ysy>r47^";
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(objectArray0, "$Ps-)|ysy>r47^");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(604, strBuilder0.capacity());
      assertEquals(427, strBuilder0.length());
      assertEquals(427, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(604, strBuilder1.capacity());
      assertEquals(427, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(427, strBuilder1.length());
      assertEquals(604, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(427, strBuilder2.size());
      assertEquals(427, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder2.insert(4, (float) 4);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(430, strBuilder0.length());
      assertEquals(430, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(604, strBuilder0.capacity());
      assertEquals(430, strBuilder1.size());
      assertEquals(430, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(604, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(604, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(430, strBuilder2.length());
      assertEquals(430, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(430, strBuilder3.length());
      assertEquals(430, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(604, strBuilder3.capacity());
      assertEquals(6, objectArray0.length);
      
      String string0 = strBuilder1.midString((-3719), 97);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertEquals(430, strBuilder0.length());
      assertEquals(430, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(604, strBuilder0.capacity());
      assertEquals(430, strBuilder1.size());
      assertEquals(430, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(604, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      objectArray0[4] = (Object) strBuilder1;
      objectArray0[5] = (Object) strBuilder1;
      objectArray0[6] = (Object) strBuilder1;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) strBuilder1;
      // Undeclared exception!
      try { 
        strBuilder0.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(29, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(29, strBuilder2.size());
      assertEquals(29, strBuilder2.length());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(160, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(160, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(81, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(81, strBuilder2.size());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(81, strBuilder3.size());
      assertEquals(81, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder4.size());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals(2822, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[2] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2954, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2954, strBuilder0.length());
      assertEquals(5644, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2954, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2954, strBuilder4.length());
      assertEquals(5644, strBuilder5.capacity());
      assertEquals(2954, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(2954, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5777, strBuilder0.length());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5777, strBuilder6.length());
      assertEquals(5777, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5777, strBuilder0.length());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5777, strBuilder6.length());
      assertEquals(5777, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(11552, strBuilder7.capacity());
      assertEquals(5782, strBuilder7.length());
      assertEquals(5782, strBuilder7.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5782, strBuilder0.size());
      assertEquals(5782, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5800, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5800, strBuilder0.size());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(5800, strBuilder8.size());
      assertEquals(5800, strBuilder8.length());
      assertEquals(11552, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5800, strBuilder1.size());
      assertEquals(5800, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(8622, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(8622, strBuilder9.length());
      assertEquals(11552, strBuilder9.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8622, strBuilder1.length());
      assertEquals(8622, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(11552, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8622, strBuilder2.length());
      assertEquals(8622, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8622, strBuilder3.size());
      assertEquals(11552, strBuilder3.capacity());
      assertEquals(8622, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(8622, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(11552, strBuilder6.capacity());
      assertEquals(8622, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder8.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(11552, strBuilder8.capacity());
      assertEquals(8622, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(8622, strBuilder8.length());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8622, strBuilder1.length());
      assertEquals(8622, strBuilder1.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertNotNull(strMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(11552, strBuilder8.capacity());
      assertEquals(8622, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(8622, strBuilder8.length());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8622, strBuilder1.length());
      assertEquals(8622, strBuilder1.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder strBuilder10 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder0);
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(11552, strBuilder8.capacity());
      assertEquals(8622, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(8622, strBuilder8.length());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8622, strBuilder1.length());
      assertEquals(8622, strBuilder1.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(8622, strBuilder10.size());
      assertEquals(8622, strBuilder10.length());
      assertNull(strBuilder10.getNullText());
      assertEquals(11552, strBuilder10.capacity());
      
      StrBuilder strBuilder11 = strBuilder6.deleteFirst('\\');
      assertNotNull(strBuilder11);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder6, strBuilder10);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder11);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(8621, strBuilder0.size());
      assertEquals(8621, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(8621, strBuilder1.length());
      assertEquals(11552, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8621, strBuilder1.size());
      assertNull(strBuilder11.getNullText());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(8621, strBuilder11.size());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(8621, strBuilder11.length());
      assertEquals(11552, strBuilder11.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(11552, strBuilder6.capacity());
      assertEquals(8621, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(8621, strBuilder6.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(27, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertEquals(27, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      
      charArray0[0] = '\\';
      StrBuilder strBuilder3 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(29, strBuilder1.length());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(29, strBuilder3.length());
      assertEquals(29, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder3.appendln((Object) strBuilder0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(160, strBuilder0.capacity());
      assertEquals(81, strBuilder0.length());
      assertEquals(81, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(160, strBuilder1.capacity());
      assertEquals(81, strBuilder1.size());
      assertEquals(81, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(160, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(81, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(81, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(160, strBuilder4.capacity());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder5 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2822, strBuilder0.length());
      assertEquals(2822, strBuilder5.length());
      assertEquals(2822, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(11290, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5645, strBuilder0.size());
      assertEquals(5645, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5645, strBuilder1.size());
      assertEquals(11290, strBuilder1.capacity());
      assertEquals(5645, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(5645, strBuilder6.size());
      assertEquals(5645, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11290, strBuilder6.capacity());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertEquals((-1), int0);
      assertEquals(11290, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5645, strBuilder0.size());
      assertEquals(5645, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5645, strBuilder1.size());
      assertEquals(11290, strBuilder1.capacity());
      assertEquals(5645, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(5645, strBuilder6.size());
      assertEquals(5645, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11290, strBuilder6.capacity());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertEquals(11290, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5650, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5650, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(11290, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(5650, strBuilder7.size());
      assertEquals(5650, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertEquals(11290, strBuilder0.capacity());
      assertEquals(5668, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5668, strBuilder0.size());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11290, strBuilder1.capacity());
      assertEquals(5668, strBuilder1.length());
      assertEquals(5668, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5668, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(11290, strBuilder8.capacity());
      assertEquals(5668, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder4, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder6);
      assertEquals(11290, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8490, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8490, strBuilder0.length());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(8490, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8490, strBuilder1.size());
      assertEquals(11290, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(11290, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8490, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8490, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(11290, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(8490, strBuilder4.length());
      assertEquals(8490, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(8490, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(8490, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11290, strBuilder6.capacity());
      assertEquals(8490, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(8490, strBuilder9.length());
      assertEquals(11290, strBuilder9.capacity());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder10 = strBuilder8.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder7);
      assertEquals(11290, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8490, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8490, strBuilder0.length());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(8490, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8490, strBuilder1.size());
      assertEquals(11290, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(11290, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(8490, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertEquals(8490, strBuilder8.length());
      assertEquals(8490, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(8490, strBuilder10.length());
      assertEquals(11290, strBuilder10.capacity());
      assertFalse(strBuilder10.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('w');
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("^3U^;XUW^MhqPybj");
      assertNotNull(strMatcher2);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('w', 107);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = strBuilder0.indexOf(strMatcher0, (-2284));
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(289);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher1);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder3.length());
      assertEquals(4, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder strBuilder4 = strBuilder3.insert(0, charArray0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder3.length());
      assertEquals(4, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(4, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(4, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrTokenizer strTokenizer0 = strBuilder3.asTokenizer();
      assertNotNull(strTokenizer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder3.length());
      assertEquals(4, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      // Undeclared exception!
      try { 
        strBuilder2.deleteCharAt(1027);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1027
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(29, strBuilder1.length());
      assertEquals(29, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(29, strBuilder2.size());
      assertEquals(29, strBuilder2.length());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.length());
      assertEquals(160, strBuilder0.capacity());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(160, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(81, strBuilder2.size());
      assertEquals(81, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2822, strBuilder4.size());
      assertEquals(5644, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[2] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2954, strBuilder0.size());
      assertEquals(2954, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2954, strBuilder4.size());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals(2954, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(2954, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(2954, strBuilder5.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(5777, strBuilder0.size());
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5777, strBuilder0.length());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder1.length());
      assertEquals(5777, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5777, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(11552, strBuilder6.capacity());
      assertEquals(5777, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertEquals((-1), int0);
      assertEquals(5777, strBuilder0.size());
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5777, strBuilder0.length());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder1.length());
      assertEquals(5777, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5777, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(11552, strBuilder6.capacity());
      assertEquals(5777, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertEquals(5782, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(5782, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(11552, strBuilder7.capacity());
      assertEquals(5782, strBuilder0.size());
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5782, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5800, strBuilder0.size());
      assertEquals(5800, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5800, strBuilder8.size());
      assertEquals(5800, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertEquals(11552, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(5800, strBuilder1.size());
      assertEquals(5800, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(11552, strBuilder9.capacity());
      assertEquals(8622, strBuilder9.length());
      assertEquals(8622, strBuilder9.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8622, strBuilder1.size());
      assertEquals(8622, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(8622, strBuilder2.size());
      assertEquals(8622, strBuilder2.length());
      assertEquals(11552, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8622, strBuilder3.size());
      assertEquals(8622, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(11552, strBuilder3.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(8622, strBuilder6.length());
      assertEquals(8622, strBuilder6.size());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      boolean boolean0 = strBuilder4.endsWith("Strings must not be null");
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertFalse(boolean0);
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
      assertEquals(11552, strBuilder4.capacity());
      assertEquals(8622, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(8622, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 102;
      StrBuilder strBuilder1 = strBuilder0.append(102);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      char char0 = 'q';
      StrBuilder strBuilder2 = strBuilder1.append((double) 117);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(8, strBuilder2.size());
      
      String string0 = strBuilder2.leftString(102);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals("102117.0", string0);
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(8, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator('q', 117);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(9, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder strBuilder4 = strBuilder1.append(stringBuilder0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", stringBuilder0.toString());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(9, strBuilder4.length());
      assertEquals(9, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder1.appendln(strBuilder3, 117, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 517;
      StrBuilder strBuilder0 = new StrBuilder(517);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(517, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder1 = strBuilder0.append('S');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(517, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertEquals(517, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(object0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(517, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(517, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(29, strBuilder2.length());
      assertEquals(29, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder2.append((long) 517);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.size());
      assertEquals(517, strBuilder0.capacity());
      assertEquals(32, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.size());
      assertEquals(517, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(517, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(84, strBuilder0.size());
      assertEquals(84, strBuilder0.length());
      assertEquals(517, strBuilder0.capacity());
      assertEquals(84, strBuilder2.length());
      assertEquals(84, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(517, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(517, strBuilder4.capacity());
      assertEquals(84, strBuilder4.size());
      assertEquals(84, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      
      StrBuilder strBuilder5 = strBuilder0.replaceFirst("G1", "G1");
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(84, strBuilder0.size());
      assertEquals(84, strBuilder0.length());
      assertEquals(517, strBuilder0.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(517, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(84, strBuilder5.length());
      assertEquals(84, strBuilder5.size());
      
      StrBuilder strBuilder6 = strBuilder5.append((long) 517);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(87, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(87, strBuilder0.size());
      assertEquals(517, strBuilder0.capacity());
      assertEquals(87, strBuilder5.length());
      assertEquals(87, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(517, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(87, strBuilder6.size());
      assertEquals(87, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(517, strBuilder6.capacity());
      
      StrBuilder strBuilder7 = strBuilder0.appendSeparator("v5a", 517);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(91, strBuilder0.length());
      assertEquals(91, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(517, strBuilder0.capacity());
      assertEquals(517, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(91, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(91, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('S');
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder8 = strBuilder7.replaceFirst(strMatcher0, "");
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(90, strBuilder0.size());
      assertEquals(90, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(517, strBuilder0.capacity());
      assertEquals(517, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(90, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(90, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(90, strBuilder8.size());
      assertEquals(517, strBuilder8.capacity());
      assertEquals(90, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      
      StrBuilder strBuilder9 = strBuilder1.appendln("v5a");
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder6);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(517, strBuilder0.capacity());
      assertEquals(95, strBuilder0.length());
      assertEquals(95, strBuilder0.size());
      assertEquals(517, strBuilder1.capacity());
      assertEquals(95, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(95, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(95, strBuilder9.length());
      assertEquals(517, strBuilder9.capacity());
      assertEquals(95, strBuilder9.size());
      
      StrBuilder strBuilder10 = strBuilder1.appendFixedWidthPadRight(517, 517, 'o');
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder6);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(612, strBuilder0.size());
      assertEquals(1224, strBuilder0.capacity());
      assertEquals(612, strBuilder0.length());
      assertEquals(1224, strBuilder1.capacity());
      assertEquals(612, strBuilder1.length());
      assertEquals(612, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(612, strBuilder10.size());
      assertEquals(612, strBuilder10.length());
      assertEquals(1224, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNullText());
      
      int int1 = 2001;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        strBuilder9.append((CharSequence) strBuilder1, 517, 1738);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(1, int0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      charArray0[0] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("n", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertTrue(boolean0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(50, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(36, strBuilder2.size());
      assertEquals(36, strBuilder2.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      
      StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(54, strBuilder0.size());
      assertEquals(54, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(54, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(54, strBuilder3.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(54, strBuilder2.size());
      assertEquals(54, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(81, strBuilder4.length());
      assertEquals(81, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      String string0 = strBuilder4.leftString(1);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals("D", string0);
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(81, strBuilder4.length());
      assertEquals(81, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      int int2 = strBuilder3.size();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(81, int2);
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(81, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(81, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(81, strBuilder2.size());
      assertEquals(81, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder5 = strBuilder3.appendln(true);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(86, strBuilder0.size());
      assertEquals(86, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(86, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(86, strBuilder3.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(108, strBuilder5.capacity());
      assertEquals(86, strBuilder5.size());
      assertEquals(86, strBuilder5.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(86, strBuilder2.size());
      assertEquals(86, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(93, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(93, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(93, strBuilder3.size());
      assertEquals(93, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(108, strBuilder6.capacity());
      assertEquals(93, strBuilder6.length());
      assertEquals(93, strBuilder6.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(93, strBuilder2.size());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(93, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, objectArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      String string1 = locale0.getDisplayVariant();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);
      assertNotNull(strBuilder7);
      assertFalse(set0.contains(string0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(93, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(93, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(93, strBuilder4.length());
      assertEquals(93, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(93, strBuilder7.size());
      assertEquals(108, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(93, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder5.insert(1, charArray0, 31, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 31
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(27, strBuilder0.length());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(29, strBuilder1.length());
      assertEquals(29, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(29, strBuilder2.length());
      assertEquals(29, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(81, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.size());
      assertEquals(160, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(160, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(81, strBuilder3.size());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(81, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.length());
      assertEquals(2822, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.length());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      
      Object[] objectArray0 = new Object[4];
      String string0 = strBuilder4.rightString(2822);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.length());
      assertEquals(2822, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.length());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder4;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2954, strBuilder0.length());
      assertEquals(2954, strBuilder0.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals(2954, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2954, strBuilder4.length());
      assertEquals(2954, strBuilder5.length());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(2954, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5777, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder6.size());
      assertEquals(5777, strBuilder6.length());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertEquals((-1), int0);
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5777, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder6.size());
      assertEquals(5777, strBuilder6.length());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5782, strBuilder0.size());
      assertEquals(5782, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(11552, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(5782, strBuilder7.size());
      assertEquals(5782, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5800, strBuilder0.size());
      assertEquals(5800, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(11552, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(5800, strBuilder8.length());
      assertEquals(5800, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5800, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5800, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8622, strBuilder0.size());
      assertEquals(8622, strBuilder0.length());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(8622, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8622, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8622, strBuilder9.size());
      assertEquals(8622, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(11552, strBuilder9.capacity());
      assertNull(strBuilder9.getNullText());
      assertEquals(11552, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(8622, strBuilder2.length());
      assertEquals(8622, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8622, strBuilder3.size());
      assertEquals(8622, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(11552, strBuilder3.capacity());
      assertEquals(8622, strBuilder6.size());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(8622, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(1, int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("D", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.length());
      assertEquals(36, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(50, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(36, strBuilder2.size());
      assertEquals(36, strBuilder2.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      
      StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertEquals(108, strBuilder3.capacity());
      assertEquals(54, strBuilder3.size());
      assertEquals(54, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(54, strBuilder0.length());
      assertEquals(54, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(54, strBuilder2.size());
      assertEquals(54, strBuilder2.length());
      assertEquals(108, strBuilder2.capacity());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(81, strBuilder4.size());
      assertEquals(81, strBuilder4.length());
      
      String string0 = strBuilder4.leftString(1);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals("D", string0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(81, strBuilder4.size());
      assertEquals(81, strBuilder4.length());
      
      int int2 = strBuilder3.size();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertEquals(81, int2);
      assertEquals(108, strBuilder3.capacity());
      assertEquals(81, strBuilder3.size());
      assertEquals(81, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(81, strBuilder2.size());
      assertEquals(81, strBuilder2.length());
      assertEquals(108, strBuilder2.capacity());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder5 = strBuilder3.appendln(true);
      assertNotNull(strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertEquals(108, strBuilder3.capacity());
      assertEquals(86, strBuilder3.size());
      assertEquals(86, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(86, strBuilder0.length());
      assertEquals(86, strBuilder0.size());
      assertEquals(108, strBuilder5.capacity());
      assertEquals(86, strBuilder5.length());
      assertEquals(86, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(86, strBuilder2.size());
      assertEquals(86, strBuilder2.length());
      assertEquals(108, strBuilder2.capacity());
      assertEquals(4, objectArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      StrBuilder strBuilder6 = strBuilder4.appendAll((Iterable<?>) set0);
      assertNotNull(strBuilder6);
      assertFalse(set0.contains(string0));
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(86, strBuilder0.length());
      assertEquals(86, strBuilder0.size());
      assertEquals(86, strBuilder4.length());
      assertEquals(86, strBuilder4.size());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(108, strBuilder6.capacity());
      assertEquals(86, strBuilder6.size());
      assertEquals(86, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      
      StrBuilder strBuilder7 = strBuilder0.replace(strMatcher0, "D", 1, 1662, 1);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(86, strBuilder0.length());
      assertEquals(86, strBuilder0.size());
      assertEquals(86, strBuilder7.size());
      assertEquals(86, strBuilder7.length());
      assertEquals(108, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(29, strBuilder1.length());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(29, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(29, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.length());
      assertEquals(160, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(160, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(160, strBuilder2.capacity());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(81, strBuilder3.length());
      assertEquals(160, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(81, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.length());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals(2822, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[2] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2954, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2954, strBuilder0.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2954, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(2954, strBuilder4.length());
      assertEquals(2954, strBuilder5.length());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(2954, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(5777, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5777, strBuilder0.size());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(5777, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(5777, strBuilder6.size());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertEquals((-1), int0);
      assertEquals(5777, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5777, strBuilder0.size());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(5777, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(5777, strBuilder6.size());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(11552, strBuilder7.capacity());
      assertEquals(5782, strBuilder7.size());
      assertEquals(5782, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5782, strBuilder0.length());
      assertEquals(5782, strBuilder0.size());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5800, strBuilder0.length());
      assertEquals(5800, strBuilder0.size());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(11552, strBuilder8.capacity());
      assertEquals(5800, strBuilder8.size());
      assertEquals(5800, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(11552, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5800, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5800, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      strBuilder8.buffer = charArray0;
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5800, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertEquals(5800, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(1, strBuilder8.capacity());
      assertEquals(5800, strBuilder8.size());
      assertEquals(5800, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5800, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5800, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder6.append(strBuilder3, 0, 2822);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('Y');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("L,!4&lfs}", "L,!4&lfs}");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.length());
      assertEquals(9, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      
      int int0 = strBuilder0.length();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(9, int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      String string0 = strBuilder0.getNewLineText();
      assertNull(string0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      long long0 = strBuilder_StrBuilderReader0.skip((-1073L));
      assertEquals(0L, long0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      strBuilder_StrBuilderReader0.reset();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      strBuilder_StrBuilderWriter0.write("");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      strBuilder_StrBuilderWriter0.flush();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNotNull(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0);
      assertNotNull(strBuilder2);
      assertFalse(linkedList0.contains(0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray0);
      
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertTrue(boolean0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "0rn@[CM";
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.setLength(2822);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2822, strBuilder0.size());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.length());
      assertEquals(2822, strBuilder2.size());
      assertEquals(2822, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5644, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder2;
      objectArray0[1] = (Object) strBuilder2;
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder3 = strBuilder2.appendAll(objectArray0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2975, strBuilder0.size());
      assertEquals(2975, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2975, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2975, strBuilder2.length());
      assertEquals(5644, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(5644, strBuilder3.capacity());
      assertEquals(2975, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2975, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, 0, 2822);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "SzpQ!4 ;U";
      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      
      char char0 = '`';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(106, strBuilder0.length());
      assertEquals(212, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(106, strBuilder0.size());
      assertEquals(106, strBuilder1.length());
      assertEquals(106, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(212, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(110, strBuilder0.size());
      assertEquals(212, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(110, strBuilder0.length());
      assertEquals(110, strBuilder2.length());
      assertEquals(110, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator('`');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(212, strBuilder0.capacity());
      assertEquals(111, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(111, strBuilder0.length());
      assertEquals(111, strBuilder2.size());
      assertEquals(111, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(111, strBuilder3.size());
      assertEquals(212, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(111, strBuilder3.length());
      
      StrBuilder strBuilder4 = strBuilder2.insert(97, (long) 2817);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(212, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(115, strBuilder0.size());
      assertEquals(115, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(115, strBuilder2.size());
      assertEquals(115, strBuilder2.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(115, strBuilder4.length());
      assertEquals(115, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(212, strBuilder4.capacity());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StrBuilder strBuilder5 = strBuilder4.appendln(stringBuilder0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(212, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(116, strBuilder0.length());
      assertEquals(116, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(116, strBuilder2.length());
      assertEquals(116, strBuilder2.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(116, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(116, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(212, strBuilder4.capacity());
      assertEquals("", stringBuilder0.toString());
      assertEquals(116, strBuilder5.length());
      assertEquals(116, strBuilder5.size());
      assertEquals(212, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      
      StrBuilder strBuilder6 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(212, strBuilder0.capacity());
      assertEquals(111, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(111, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(212, strBuilder1.capacity());
      assertEquals(111, strBuilder1.size());
      assertEquals(111, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(212, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(111, strBuilder6.size());
      assertEquals(111, strBuilder6.length());
      
      StrBuilder strBuilder7 = strBuilder2.replaceAll("ekji", "ekji");
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(212, strBuilder0.capacity());
      assertEquals(111, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(111, strBuilder0.length());
      assertEquals(111, strBuilder2.size());
      assertEquals(111, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(111, strBuilder7.length());
      assertEquals(212, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(111, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(2817, (float) '`');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2817
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      stringBuffer0.setLength(2016);
      assertEquals(2016, stringBuffer0.length());
      
      int int0 = 5;
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2016, stringBuffer0.length());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(2);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2024, strBuilder0.size());
      assertEquals(2024, strBuilder0.length());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2016, stringBuffer0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(4048, strBuilder2.capacity());
      assertEquals(2024, strBuilder2.size());
      assertEquals(2024, strBuilder2.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(4048, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2024, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(2024, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder1.appendSeparator("", 32);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2024, strBuilder0.size());
      assertEquals(2024, strBuilder0.length());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2016, stringBuffer0.length());
      assertEquals(4048, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2024, strBuilder1.size());
      assertEquals(2024, strBuilder1.length());
      assertEquals(2024, strBuilder4.length());
      assertEquals(2024, strBuilder4.size());
      assertEquals(4048, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      
      StringBuilder stringBuilder0 = strBuilder4.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2024, strBuilder0.size());
      assertEquals(2024, strBuilder0.length());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2016, stringBuffer0.length());
      assertEquals(4048, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2024, strBuilder1.size());
      assertEquals(2024, strBuilder1.length());
      assertEquals(2024, strBuilder4.length());
      assertEquals(2024, strBuilder4.size());
      assertEquals(4048, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder4.append((-523.88385F));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2034, strBuilder0.size());
      assertEquals(2034, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2016, stringBuffer0.length());
      assertEquals(2034, strBuilder1.size());
      assertEquals(2034, strBuilder1.length());
      assertEquals(4048, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4048, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2034, strBuilder4.length());
      assertEquals(2034, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(2034, strBuilder5.size());
      assertEquals(2034, strBuilder5.length());
      assertEquals(4048, strBuilder5.capacity());
      
      StrBuilder strBuilder6 = strBuilder0.append(5);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2035, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2035, strBuilder0.size());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(4048, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(2035, strBuilder6.size());
      assertEquals(2035, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder6.setNullText("/RDU5z0P,\u0001Ay");
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertEquals(2035, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2035, strBuilder0.size());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(4048, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(2035, strBuilder6.size());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder6.getNullText());
      assertEquals(2035, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(2035, strBuilder7.size());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder7.getNullText());
      assertEquals(2035, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(4048, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      
      String string1 = strBuilder2.build();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertEquals(2035, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2035, strBuilder0.size());
      assertEquals(4048, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4048, strBuilder2.capacity());
      assertEquals(2035, strBuilder2.length());
      assertEquals(2035, strBuilder2.size());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText());
      
      StrBuilder strBuilder8 = strBuilder3.append((Object) strBuilder6);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2086, strBuilder0.size());
      assertEquals(2086, strBuilder0.length());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2016, stringBuffer0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4048, strBuilder2.capacity());
      assertEquals(2086, strBuilder2.size());
      assertEquals(2086, strBuilder2.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder3.getNullText());
      assertEquals(4048, strBuilder3.capacity());
      assertEquals(2086, strBuilder3.length());
      assertEquals(2086, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2086, strBuilder6.length());
      assertEquals(2086, strBuilder6.size());
      assertEquals(4048, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(4048, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder8.getNullText());
      assertEquals(2086, strBuilder8.size());
      assertEquals(2086, strBuilder8.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder9 = strBuilder0.append(object0);
      assertNotNull(strBuilder9);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder9.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder9.getNullText());
      assertEquals(2113, strBuilder9.size());
      assertEquals(2113, strBuilder9.length());
      assertEquals(4048, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2113, strBuilder0.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertEquals(2113, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4048, strBuilder0.capacity());
      
      StrBuilder strBuilder10 = strBuilder2.appendNewLine();
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertEquals(2114, strBuilder0.size());
      assertEquals(2114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2114, strBuilder10.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder10.getNullText());
      assertEquals(2114, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(4048, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4048, strBuilder2.capacity());
      assertEquals(2114, strBuilder2.size());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText());
      assertEquals(2114, strBuilder2.length());
      
      StringBuffer stringBuffer1 = strBuilder10.toStringBuffer();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder3);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertEquals(2114, strBuilder0.size());
      assertEquals(2114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4048, strBuilder0.capacity());
      assertEquals(2114, strBuilder10.length());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder10.getNullText());
      assertEquals(2114, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(4048, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(2114, stringBuffer1.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4048, strBuilder2.capacity());
      assertEquals(2114, strBuilder2.size());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText());
      assertEquals(2114, strBuilder2.length());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      strBuilder9.buffer = charArray0;
      assertEquals(1, strBuilder9.capacity());
      assertEquals(2114, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder9.getNullText());
      assertEquals(2114, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText());
      assertEquals(2114, strBuilder0.size());
      assertEquals(2114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder5.appendln(strBuilder4, 2, 2016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(29, strBuilder0.size());
      assertEquals(29, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.length());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(29, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(29, strBuilder2.length());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(160, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(81, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(160, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(81, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(81, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(81, strBuilder3.length());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.size());
      assertEquals(2822, strBuilder4.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[1] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3005, strBuilder0.size());
      assertEquals(3005, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(3005, strBuilder4.length());
      assertEquals(3005, strBuilder4.size());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(3005, strBuilder5.size());
      assertEquals(3005, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(5644, strBuilder5.capacity());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = new StrBuilder("0rn@[CM");
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      assertEquals(7, strBuilder6.length());
      assertEquals(7, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(39, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      
      int int0 = strBuilder6.lastIndexOf("0rn@[CM");
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertEquals(0, int0);
      assertEquals(7, strBuilder6.length());
      assertEquals(7, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(39, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertEquals(5644, strBuilder7.capacity());
      assertEquals(3010, strBuilder7.size());
      assertEquals(3010, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3010, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3010, strBuilder0.size());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder6);
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3028, strBuilder0.size());
      assertEquals(3028, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3028, strBuilder8.size());
      assertEquals(3028, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(5644, strBuilder8.capacity());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(3028, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5644, strBuilder1.capacity());
      assertEquals(3028, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder9);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder8);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3028, strBuilder0.size());
      assertEquals(3028, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(2829, strBuilder9.length());
      assertEquals(2829, strBuilder9.size());
      assertEquals(5658, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(3028, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5644, strBuilder1.capacity());
      assertEquals(3028, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3028, strBuilder2.size());
      assertEquals(3028, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5644, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(5644, strBuilder3.capacity());
      assertEquals(3028, strBuilder3.size());
      assertEquals(3028, strBuilder3.length());
      assertEquals(5658, strBuilder6.capacity());
      assertEquals(2829, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(2829, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1920);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(1920, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 1920);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.length());
      assertEquals(9, strBuilder2.size());
      assertEquals(1920, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder0.appendln(1920);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1920, strBuilder3.capacity());
      assertEquals(14, strBuilder3.size());
      assertEquals(14, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(66, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(66, strBuilder0.size());
      assertEquals(1920, strBuilder1.capacity());
      assertEquals(66, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1920, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(66, strBuilder3.size());
      assertEquals(66, strBuilder3.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1920, strBuilder4.capacity());
      assertEquals(66, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(66, strBuilder4.size());
      
      StrBuilder strBuilder5 = strBuilder4.deleteAll('#');
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(66, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(66, strBuilder0.size());
      assertEquals(1920, strBuilder1.capacity());
      assertEquals(66, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1920, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(66, strBuilder3.size());
      assertEquals(66, strBuilder3.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1920, strBuilder4.capacity());
      assertEquals(66, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(66, strBuilder4.size());
      assertEquals(1920, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(66, strBuilder5.size());
      assertEquals(66, strBuilder5.length());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(66, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(66, strBuilder0.size());
      assertEquals(1920, strBuilder1.capacity());
      assertEquals(66, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(132, strBuilder0.size());
      assertEquals(132, strBuilder0.length());
      assertEquals(132, strBuilder1.length());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(132, strBuilder1.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1920, strBuilder6.capacity());
      assertEquals(132, strBuilder6.size());
      assertEquals(132, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      
      StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "nCIF=^XRVL:\t%AH&");
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(132, strBuilder0.size());
      assertEquals(132, strBuilder0.length());
      assertEquals(132, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(1920, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(132, strBuilder7.length());
      
      StrBuilder strBuilder8 = strBuilder2.append((CharSequence) stringBuilder0, 2, 2);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertEquals(134, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(134, strBuilder0.length());
      assertEquals(134, strBuilder1.length());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(134, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(134, strBuilder2.length());
      assertEquals(134, strBuilder2.size());
      assertEquals(1920, strBuilder2.capacity());
      assertNull(strBuilder8.getNullText());
      assertEquals(134, strBuilder8.size());
      assertEquals(134, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(1920, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      
      int int0 = strBuilder1.lastIndexOf('^');
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int0);
      assertEquals(134, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(134, strBuilder0.length());
      assertEquals(134, strBuilder1.length());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(134, strBuilder1.size());
      
      StrBuilder strBuilder9 = strBuilder4.insert((int) '#', false);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(139, strBuilder0.size());
      assertEquals(139, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1920, strBuilder1.capacity());
      assertEquals(139, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(139, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(139, strBuilder3.length());
      assertEquals(1920, strBuilder3.capacity());
      assertEquals(139, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(139, strBuilder4.length());
      assertEquals(1920, strBuilder4.capacity());
      assertEquals(139, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(1920, strBuilder9.capacity());
      assertEquals(139, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(139, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '$';
      StrBuilder strBuilder10 = strBuilder7.append('^');
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder10);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(140, strBuilder0.size());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(140, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(140, strBuilder7.length());
      assertEquals(1920, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(140, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1920, strBuilder10.capacity());
      assertEquals(140, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(140, strBuilder10.size());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNullText());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', '$'}, charArray0);
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher(']');
      assertNotNull(strMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(140, strBuilder0.size());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(140, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', '$'}, charArray0);
      
      StrBuilder strBuilder11 = strBuilder3.deleteCharAt(2);
      assertNotNull(strBuilder11);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(139, strBuilder0.size());
      assertEquals(139, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(139, strBuilder11.length());
      assertEquals(1920, strBuilder11.capacity());
      assertEquals(139, strBuilder11.size());
      assertNull(strBuilder11.getNullText());
      assertFalse(strBuilder11.isEmpty());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(139, strBuilder3.length());
      assertEquals(1920, strBuilder3.capacity());
      assertEquals(139, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder strBuilder12 = strBuilder11.replaceFirst((StrMatcher) strMatcher_CharSetMatcher0, "j");
      assertNotNull(strBuilder12);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder12);
      assertSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder12);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder12, strBuilder0);
      assertSame(strBuilder12, strBuilder2);
      assertSame(strBuilder12, strBuilder1);
      assertSame(strBuilder12, strBuilder11);
      assertSame(strBuilder12, strBuilder9);
      assertSame(strBuilder12, strBuilder10);
      assertSame(strBuilder12, strBuilder8);
      assertSame(strBuilder12, strBuilder4);
      assertSame(strBuilder12, strBuilder3);
      assertSame(strBuilder12, strBuilder5);
      assertSame(strBuilder12, strBuilder6);
      assertSame(strBuilder12, strBuilder7);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(139, strBuilder0.size());
      assertEquals(139, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(139, strBuilder11.length());
      assertEquals(1920, strBuilder11.capacity());
      assertEquals(139, strBuilder11.size());
      assertNull(strBuilder11.getNullText());
      assertFalse(strBuilder11.isEmpty());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(139, strBuilder3.length());
      assertEquals(1920, strBuilder3.capacity());
      assertEquals(139, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(139, strBuilder12.length());
      assertEquals(1920, strBuilder12.capacity());
      assertEquals(139, strBuilder12.size());
      assertNull(strBuilder12.getNullText());
      assertFalse(strBuilder12.isEmpty());
      assertNull(strBuilder12.getNewLineText());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', '$'}, charArray0);
      
      char[] charArray1 = strBuilder7.toCharArray();
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder10);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder12);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder11);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1920, strBuilder0.capacity());
      assertEquals(139, strBuilder0.size());
      assertEquals(139, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(1920, strBuilder7.capacity());
      assertEquals(139, strBuilder7.size());
      assertEquals(139, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(139, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(16, strBuilder2.size());
      assertEquals(16, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(16, strBuilder2.size());
      assertEquals(16, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(16, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      
      Writer writer0 = strBuilder3.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(16, strBuilder2.size());
      assertEquals(16, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(16, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(16, strBuilder4.size());
      assertEquals(16, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder5 = new StrBuilder(0);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      
      int int1 = 6;
      StrBuilder strBuilder6 = new StrBuilder((-1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertNotNull(strBuilder6);
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      
      int int2 = StrBuilder.CAPACITY;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(32, int2);
      
      StrBuilder strBuilder7 = strBuilder6.appendln((String) null, 0, 2255);
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder5);
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(1, strBuilder6.size());
      assertEquals(1, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(1, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      
      StrBuilder strBuilder8 = strBuilder7.appendPadding(6, '2');
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder8);
      assertSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder5);
      assertEquals(7, strBuilder8.size());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(7, strBuilder8.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(7, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(7, strBuilder6.size());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(7, strBuilder7.size());
      assertEquals(7, strBuilder7.length());
      
      // Undeclared exception!
      try { 
        strBuilder6.insert(137, (Object) strBuilder5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 137
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.size());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.size());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.size());
      assertEquals(29, strBuilder0.length());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(29, strBuilder1.size());
      assertEquals(29, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(29, strBuilder2.length());
      assertEquals(29, strBuilder2.size());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(81, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(160, strBuilder0.capacity());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(81, strBuilder1.size());
      assertEquals(81, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(160, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(160, strBuilder2.capacity());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(81, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(81, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.size());
      assertEquals(2822, strBuilder4.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[2] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2954, strBuilder0.size());
      assertEquals(2954, strBuilder0.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals(2954, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2954, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5644, strBuilder5.capacity());
      assertEquals(2954, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(2954, strBuilder5.length());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(5777, strBuilder0.length());
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(5777, strBuilder6.size());
      assertEquals(5777, strBuilder6.length());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertEquals((-1), int0);
      assertEquals(5777, strBuilder0.length());
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(5777, strBuilder6.size());
      assertEquals(5777, strBuilder6.length());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNull(strBuilder7.getNewLineText());
      assertEquals(5782, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(5782, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(11552, strBuilder7.capacity());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5782, strBuilder0.length());
      assertEquals(5782, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5800, strBuilder0.length());
      assertEquals(5800, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5800, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(11552, strBuilder8.capacity());
      assertEquals(5800, strBuilder8.size());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5800, strBuilder1.size());
      assertEquals(5800, strBuilder1.length());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(8622, strBuilder0.size());
      assertEquals(8622, strBuilder0.length());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(8622, strBuilder9.length());
      assertEquals(8622, strBuilder9.size());
      assertEquals(11552, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(8622, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(8622, strBuilder1.length());
      assertEquals(11552, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(8622, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8622, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8622, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(11552, strBuilder3.capacity());
      assertEquals(8622, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(8622, strBuilder6.length());
      assertEquals(8622, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charArray0, 0, 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 116
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) strBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      StrBuilder strBuilder1 = strBuilder0.replaceAll("end < start", "pfF EZ;^2\"6oMC");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      
      objectArray0[3] = (Object) strBuilder0;
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) strBuilder0;
      objectArray0[6] = (Object) strBuilder0;
      objectArray0[7] = (Object) strBuilder0;
      objectArray0[8] = (Object) strBuilder0;
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, "q)_:r>uGfR^Dt^>K");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(651, strBuilder0.length());
      assertEquals(651, strBuilder0.size());
      assertEquals(1146, strBuilder0.capacity());
      assertEquals(651, strBuilder2.size());
      assertEquals(651, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1146, strBuilder2.capacity());
      assertEquals(9, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder0.insert(3, (char[]) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(651, strBuilder0.length());
      assertEquals(651, strBuilder0.size());
      assertEquals(1146, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(651, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(651, strBuilder3.size());
      assertEquals(1146, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder strBuilder4 = strBuilder3.replaceFirst((String) null, "q)_:r>uGfR^Dt^>K");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(651, strBuilder0.length());
      assertEquals(651, strBuilder0.size());
      assertEquals(1146, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(651, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(651, strBuilder3.size());
      assertEquals(1146, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(651, strBuilder4.length());
      assertEquals(651, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1146, strBuilder4.capacity());
      
      StrBuilder strBuilder5 = strBuilder2.appendSeparator("pfF EZ;^2\"6oMC", 3);
      assertNotNull(strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(1146, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(665, strBuilder5.length());
      assertEquals(665, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(665, strBuilder0.length());
      assertEquals(665, strBuilder0.size());
      assertEquals(1146, strBuilder0.capacity());
      assertEquals(665, strBuilder2.size());
      assertEquals(665, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1146, strBuilder2.capacity());
      assertEquals(9, objectArray0.length);
      
      int int0 = strBuilder0.size();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(665, int0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(665, strBuilder0.length());
      assertEquals(665, strBuilder0.size());
      assertEquals(1146, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@uY");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean0 = arrayDeque0.add("2qZ^>Qrw9g\"x/].J");
      assertFalse(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J"));
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'E';
      charArray0[2] = '8';
      charArray0[3] = '&';
      charArray0[4] = 'D';
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'E', '8', '&', 'D'}, charArray0);
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J"));
      assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J"));
      assertFalse(arrayDeque1.contains("@uY"));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "@uY");
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder1);
      assertFalse(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J"));
      assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J"));
      assertFalse(arrayDeque1.contains("@uY"));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertEquals(30, strBuilder1.size());
      assertEquals(35, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.append(0.0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder2.size());
      assertEquals(35, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.length());
      
      int int1 = strBuilder0.indexOf('c');
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int2 = strBuilder0.lastIndexOf('c');
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int3 = strBuilder1.size();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J"));
      assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J"));
      assertFalse(arrayDeque1.contains("@uY"));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(33, int3);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder1.length());
      
      arrayDeque0.addFirst("2qZ^>Qrw9g\"x/].J");
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J"));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      StrBuilder strBuilder3 = strBuilder1.append(2998);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(strBuilder3);
      assertFalse(arrayDeque0.contains("@uY"));
      assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J"));
      assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J"));
      assertFalse(arrayDeque1.contains("@uY"));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.size());
      assertEquals(74, strBuilder0.capacity());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(74, strBuilder3.capacity());
      assertEquals(37, strBuilder3.length());
      assertEquals(37, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertEquals(74, strBuilder1.capacity());
      assertEquals(37, strBuilder1.size());
      assertEquals(37, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(89, strBuilder0.capacity());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(89, strBuilder0.capacity());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      String string1 = strBuilder_StrBuilderTokenizer0.nextToken();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", string1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(89, strBuilder0.capacity());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(89, strBuilder0.capacity());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((Object) strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(256, strBuilder0.capacity());
      assertEquals(129, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(129, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(256, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(129, strBuilder1.length());
      assertEquals(129, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      int int0 = 7;
      StrBuilder strBuilder2 = strBuilder1.append((char[]) null, 7, 7);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(256, strBuilder0.capacity());
      assertEquals(129, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(129, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(256, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(129, strBuilder1.length());
      assertEquals(129, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(129, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(256, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(129, strBuilder2.length());
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(256, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(186, strBuilder0.size());
      assertEquals(186, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(256, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(186, strBuilder1.length());
      assertEquals(186, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(186, strBuilder3.size());
      assertEquals(256, strBuilder3.capacity());
      assertEquals(186, strBuilder3.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-2599), (float) (-2599));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2599
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(27, strBuilder0.length());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.size());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(29, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(29, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(29, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(160, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.length());
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(160, strBuilder1.capacity());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder2.size());
      assertEquals(81, strBuilder2.length());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(81, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(81, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2822, strBuilder4.size());
      assertEquals(2822, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[2] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(2954, strBuilder0.size());
      assertEquals(2954, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2954, strBuilder4.length());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(2954, strBuilder4.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(5644, strBuilder5.capacity());
      assertEquals(2954, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(2954, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5777, strBuilder0.length());
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertEquals(5777, strBuilder6.length());
      assertEquals(5777, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5777, strBuilder0.length());
      assertEquals(11552, strBuilder0.capacity());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5777, strBuilder1.size());
      assertEquals(5777, strBuilder1.length());
      assertEquals(5777, strBuilder6.length());
      assertEquals(5777, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertEquals(11552, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(5782, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(5782, strBuilder7.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5782, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5782, strBuilder0.length());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertEquals(5800, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5800, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder8.getNullText());
      assertEquals(11552, strBuilder8.capacity());
      assertEquals(5800, strBuilder8.size());
      assertEquals(5800, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5800, strBuilder1.length());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(5800, strBuilder1.size());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(8622, strBuilder9.size());
      assertEquals(8622, strBuilder9.length());
      assertEquals(11552, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8622, strBuilder1.length());
      assertEquals(11552, strBuilder1.capacity());
      assertEquals(8622, strBuilder1.size());
      assertEquals(8622, strBuilder2.size());
      assertEquals(8622, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(11552, strBuilder2.capacity());
      assertEquals(11552, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(8622, strBuilder3.size());
      assertEquals(8622, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(8622, strBuilder6.length());
      assertEquals(8622, strBuilder6.size());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder10 = strBuilder0.appendFixedWidthPadRight(2808, 0, '\\');
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder9);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(11552, strBuilder10.capacity());
      assertNull(strBuilder10.getNullText());
      assertEquals(8622, strBuilder10.size());
      assertEquals(8622, strBuilder10.length());
      
      boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11552, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8622, strBuilder0.length());
      assertEquals(8622, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "SzpQ!4 ;U";
      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");
      assertNotNull(strBuilder0);
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      
      char char0 = '`';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(106, strBuilder0.length());
      assertEquals(106, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(212, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(106, strBuilder1.length());
      assertEquals(106, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(115, strBuilder0.length());
      assertEquals(115, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(115, strBuilder2.length());
      assertEquals(115, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(119, strBuilder0.length());
      assertEquals(119, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(119, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(119, strBuilder2.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(212, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(119, strBuilder3.size());
      assertEquals(119, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder3.append('`');
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertEquals(120, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(120, strBuilder2.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(212, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(120, strBuilder3.length());
      assertEquals(120, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(120, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(120, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(212, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U");
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder1.length());
      assertEquals(120, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(212, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(120, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(120, strBuilder5.size());
      assertEquals(212, strBuilder5.capacity());
      
      String string1 = strBuilder0.getNullText();
      assertNull(string1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertEquals(120, strBuilder0.length());
      assertEquals(120, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(212, strBuilder2.capacity());
      assertEquals(120, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(120, strBuilder2.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(212, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(120, strBuilder6.length());
      assertEquals(120, strBuilder6.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(2817, (-1.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2817
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(29, strBuilder0.size());
      assertEquals(29, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(29, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(29, strBuilder2.length());
      assertEquals(29, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(160, strBuilder0.capacity());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(160, strBuilder1.capacity());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(81, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(160, strBuilder2.capacity());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(160, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(81, strBuilder3.size());
      assertEquals(81, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(2822, strBuilder0.length());
      assertEquals(2822, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.size());
      assertEquals(2822, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[2] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2954, strBuilder0.length());
      assertEquals(2954, strBuilder0.size());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2954, strBuilder4.size());
      assertEquals(2954, strBuilder4.length());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5644, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(2954, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(2954, strBuilder5.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertEquals(5777, strBuilder0.length());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder1.length());
      assertEquals(5777, strBuilder1.size());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5777, strBuilder6.size());
      assertEquals(5777, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      
      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(5777, strBuilder0.length());
      assertEquals(5777, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5777, strBuilder1.length());
      assertEquals(5777, strBuilder1.size());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5777, strBuilder6.size());
      assertEquals(5777, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(11552, strBuilder7.capacity());
      assertEquals(5782, strBuilder7.size());
      assertEquals(5782, strBuilder7.length());
      assertEquals(5782, strBuilder0.size());
      assertEquals(5782, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      
      int int1 = strBuilder6.validateRange(0, 1320);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertEquals(1320, int1);
      assertEquals(5782, strBuilder0.size());
      assertEquals(5782, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(5782, strBuilder1.size());
      assertEquals(5782, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(5782, strBuilder6.length());
      assertEquals(5782, strBuilder6.size());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5800, strBuilder0.size());
      assertEquals(5800, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(5800, strBuilder8.size());
      assertEquals(11552, strBuilder8.capacity());
      assertEquals(5800, strBuilder8.length());
      assertEquals(5800, strBuilder1.size());
      assertEquals(5800, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8622, strBuilder0.size());
      assertEquals(8622, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8622, strBuilder1.size());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(8622, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8622, strBuilder9.size());
      assertEquals(8622, strBuilder9.length());
      assertEquals(11552, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8622, strBuilder2.size());
      assertEquals(11552, strBuilder2.capacity());
      assertEquals(8622, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8622, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(11552, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8622, strBuilder3.size());
      assertEquals(8622, strBuilder6.size());
      assertEquals(8622, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11552, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      String string0 = strBuilder8.getNullText();
      assertNull(string0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder8);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8622, strBuilder0.size());
      assertEquals(8622, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11552, strBuilder0.capacity());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(8622, strBuilder8.length());
      assertEquals(8622, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(11552, strBuilder8.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8622, strBuilder1.size());
      assertEquals(11552, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(8622, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("FiHbfxLjq4Y/Lm\"");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      int int0 = 988;
      String string0 = strBuilder0.midString(2, 988);
      assertNotNull(string0);
      assertEquals("HbfxLjq4Y/Lm\"", string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StringWriter stringWriter0 = new StringWriter(1855);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StrBuilder strBuilder1 = strBuilder0.delete(2, 88);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StrBuilder strBuilder2 = strBuilder0.clear();
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(47, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      
      char char0 = '\'';
      StringWriter stringWriter1 = stringWriter0.append('\'');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("'", stringWriter0.toString());
      assertEquals("'", stringWriter1.toString());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0, 109, (-1319));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      charArray0[0] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("n", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("n", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertFalse(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", (-1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      
      StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertEquals(18, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(18, strBuilder2.size());
      assertEquals(18, strBuilder2.length());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.append((Object) "");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.length());
      assertEquals(90, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(90, strBuilder4.capacity());
      assertEquals(45, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(45, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      String string0 = strBuilder4.leftString((-1));
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.length());
      assertEquals(90, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(90, strBuilder4.capacity());
      assertEquals(45, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(45, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      int int2 = strBuilder3.size();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(45, int2);
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.length());
      assertEquals(90, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(45, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(90, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(45, strBuilder3.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(90, strBuilder2.capacity());
      assertEquals(45, strBuilder2.length());
      assertEquals(45, strBuilder2.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder5 = strBuilder3.appendln(false);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.length());
      assertEquals(51, strBuilder0.size());
      assertEquals(90, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(51, strBuilder3.size());
      assertEquals(51, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(90, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(90, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(51, strBuilder5.size());
      assertEquals(51, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(90, strBuilder2.capacity());
      assertEquals(51, strBuilder2.length());
      assertEquals(51, strBuilder2.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.length());
      assertEquals(51, strBuilder0.size());
      assertEquals(90, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(51, strBuilder3.size());
      assertEquals(51, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(90, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(51, strBuilder6.length());
      assertEquals(51, strBuilder6.size());
      assertEquals(90, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(90, strBuilder2.capacity());
      assertEquals(51, strBuilder2.length());
      assertEquals(51, strBuilder2.size());
      assertEquals(4, objectArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("~G;2|T "));
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);
      assertNotNull(strBuilder7);
      assertFalse(set0.contains("~G;2|T "));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.length());
      assertEquals(51, strBuilder0.size());
      assertEquals(90, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(51, strBuilder4.size());
      assertEquals(90, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(51, strBuilder4.length());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(90, strBuilder7.capacity());
      assertEquals(51, strBuilder7.size());
      assertEquals(51, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "hZ3CNnc|]e";
      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(104, int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(228, strBuilder0.capacity());
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(228, strBuilder2.capacity());
      assertEquals(114, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(114, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll(strMatcher0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(228, strBuilder0.capacity());
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(228, strBuilder2.capacity());
      assertEquals(114, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(114, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(228, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(114, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(114, strBuilder3.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("//", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2, int1);
      assertEquals(228, strBuilder0.capacity());
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Z', '3'}, charArray0);
      
      strBuilder_StrBuilderReader0.close();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(228, strBuilder0.capacity());
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrBuilder strBuilder4 = strBuilder2.append((long) 104);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(228, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.length());
      assertEquals(117, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(117, strBuilder4.length());
      assertEquals(117, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(228, strBuilder4.capacity());
      
      StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(228, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(117, strBuilder2.length());
      assertEquals(117, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(117, strBuilder4.length());
      assertEquals(117, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(228, strBuilder4.capacity());
      assertEquals(117, strBuilder5.size());
      assertEquals(117, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(228, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      List<String> list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertNotNull(list0);
      assertFalse(list0.contains("hZ3CNnc|]e"));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      List<String> list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains("hZ3CNnc|]e"));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(list1, list0);
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Z', '3'}, charArray0);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '/';
      charArray1[1] = '/';
      StrBuilder strBuilder7 = strBuilder0.appendln(charArray1);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertEquals(120, strBuilder0.size());
      assertEquals(120, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder7.getNullText());
      assertEquals(120, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(120, strBuilder7.length());
      assertEquals(228, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray1);
      
      int int2 = 101;
      // Undeclared exception!
      try { 
        strBuilder2.append("/t@?VM", (-775), (-3316));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(79);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 79);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(79, strBuilder2.capacity());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder0.appendln((-2267));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(79, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(13, strBuilder3.length());
      assertEquals(79, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(79, strBuilder0.capacity());
      assertEquals(65, strBuilder0.size());
      assertEquals(65, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(65, strBuilder1.size());
      assertEquals(65, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(79, strBuilder3.capacity());
      assertEquals(65, strBuilder3.size());
      assertEquals(65, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(79, strBuilder4.capacity());
      assertEquals(65, strBuilder4.length());
      assertEquals(65, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder2.clear();
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(79, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(79, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      
      StrBuilder strBuilder6 = strBuilder4.deleteAll('#');
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(79, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(79, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(79, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 2;
      StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(79, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      
      StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(79, strBuilder8.capacity());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      
      // Undeclared exception!
      try { 
        strBuilder2.append((CharSequence) stringBuilder0, 2, (-211));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("SzpQ!4 ;U");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals("SzpQ!4 ;U", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("SzpQ!4 ;U", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-2068), 'W');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2068
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      String string1 = "1.4";
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("1.4", "");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder1.appendln(strBuilder0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) serviceLoader0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator('1');
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      
      char[] charArray0 = null;
      StrBuilder strBuilder5 = strBuilder4.append((char[]) null);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(2, strBuilder5.size());
      assertEquals(2, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(string1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>(arrayDeque0);
      assertNotNull(treeSet0);
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(treeSet0.contains(""));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      StrBuilder strBuilder6 = strBuilder5.appendAll((Iterable<?>) treeSet0);
      assertNotNull(strBuilder6);
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(treeSet0.contains(""));
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(2, strBuilder5.size());
      assertEquals(2, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(2, strBuilder6.length());
      assertEquals(2, strBuilder6.size());
      
      StringBuffer stringBuffer0 = strBuilder5.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(2, strBuilder5.size());
      assertEquals(2, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(2, stringBuffer0.length());
      assertEquals("\n1", stringBuffer0.toString());
      
      StrBuilder strBuilder7 = strBuilder1.appendln(1831L);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder7.size());
      assertEquals(7, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      
      StrBuilder strBuilder8 = strBuilder7.trim();
      assertNotNull(strBuilder8);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertEquals(5, strBuilder8.size());
      assertEquals(5, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder7.length());
      assertEquals(5, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      
      strBuilder8.size = (-1455);
      assertEquals((-1455), strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals((-1455), strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1455), strBuilder0.length());
      assertEquals((-1455), strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1455), strBuilder1.size());
      assertEquals((-1455), strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals((-1455), strBuilder7.size());
      assertEquals((-1455), strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      
      int int0 = 3;
      // Undeclared exception!
      try { 
        strBuilder0.setLength(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.length());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(29, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.size());
      assertEquals(29, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(29, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(29, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertEquals(160, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(81, strBuilder1.size());
      assertEquals(81, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(160, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(81, strBuilder2.size());
      assertEquals(81, strBuilder2.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.length());
      assertEquals(5644, strBuilder4.capacity());
      
      Object[] objectArray0 = new Object[4];
      String string0 = strBuilder4.leftString(2822);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.length());
      assertEquals(5644, strBuilder4.capacity());
      
      objectArray0[0] = (Object) strBuilder4;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2822, strBuilder1.length());
      assertEquals(5644, strBuilder1.capacity());
      assertEquals(2822, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5644, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2822, strBuilder2.size());
      assertEquals(2822, strBuilder2.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(strMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2822, strBuilder1.length());
      assertEquals(5644, strBuilder1.capacity());
      assertEquals(2822, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5644, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2822, strBuilder2.size());
      assertEquals(2822, strBuilder2.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      int int0 = strBuilder4.indexOf(strMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2822, strBuilder1.length());
      assertEquals(5644, strBuilder1.capacity());
      assertEquals(2822, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5644, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(2822, strBuilder2.size());
      assertEquals(2822, strBuilder2.length());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2822, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.length());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      objectArray0[1] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(3005, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3005, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(3005, strBuilder5.length());
      assertEquals(3005, strBuilder5.size());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(3005, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals(3005, strBuilder4.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 10, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5828, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(5828, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(5828, strBuilder6.size());
      assertEquals(5828, strBuilder6.length());
      assertEquals(11654, strBuilder6.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5828, strBuilder1.length());
      assertEquals(5828, strBuilder1.size());
      assertEquals(11654, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      int int1 = strBuilder6.lastIndexOf("0rn@[CM");
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5828, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(5828, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(5828, strBuilder6.size());
      assertEquals(5828, strBuilder6.length());
      assertEquals(11654, strBuilder6.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5828, strBuilder1.length());
      assertEquals(5828, strBuilder1.size());
      assertEquals(11654, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertNull(strBuilder0.getNullText());
      assertEquals(5833, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(5833, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11654, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(5833, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(5833, strBuilder7.length());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(5851, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5851, strBuilder0.size());
      assertEquals(11654, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5851, strBuilder1.length());
      assertEquals(11654, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5851, strBuilder1.size());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(11654, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertEquals(5851, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(5851, strBuilder8.size());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 10, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8673, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(8673, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(8673, strBuilder6.size());
      assertEquals(11654, strBuilder6.capacity());
      assertEquals(8673, strBuilder6.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8673, strBuilder1.size());
      assertEquals(8673, strBuilder1.length());
      assertEquals(11654, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(11654, strBuilder2.capacity());
      assertEquals(8673, strBuilder2.size());
      assertEquals(8673, strBuilder2.length());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(8673, strBuilder9.length());
      assertEquals(8673, strBuilder9.size());
      assertEquals(11654, strBuilder9.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8673, strBuilder3.length());
      assertEquals(8673, strBuilder3.size());
      assertEquals(11654, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      float float0 = (-3134.9556F);
      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      
      String string0 = null;
      StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertEquals(16, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(16, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      
      Writer writer0 = strBuilder3.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertEquals(16, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(16, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(16, strBuilder4.size());
      assertEquals(16, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf("", (int) ':');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(15, int0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder5 = strBuilder4.trim();
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(15, strBuilder4.size());
      assertEquals(15, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(15, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(15, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      
      int int1 = 6;
      StrBuilder strBuilder6 = new StrBuilder(15);
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      assertEquals(15, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.size());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.length());
      
      // Undeclared exception!
      try { 
        strMatcher0.isMatch(charArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertEquals(29, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(29, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(29, strBuilder2.length());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.length());
      assertEquals(160, strBuilder0.capacity());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(81, strBuilder1.length());
      assertEquals(160, strBuilder1.capacity());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(81, strBuilder2.length());
      assertEquals(160, strBuilder2.capacity());
      assertEquals(81, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder3.appendNewLine();
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(82, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(82, strBuilder0.size());
      assertEquals(160, strBuilder0.capacity());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(160, strBuilder1.capacity());
      assertEquals(82, strBuilder1.size());
      assertEquals(82, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(160, strBuilder2.capacity());
      assertEquals(82, strBuilder2.length());
      assertEquals(82, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(160, strBuilder3.capacity());
      assertEquals(82, strBuilder3.size());
      assertEquals(82, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(160, strBuilder4.capacity());
      assertEquals(82, strBuilder4.length());
      assertEquals(82, strBuilder4.size());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder5 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertEquals(2822, strBuilder5.length());
      assertEquals(2822, strBuilder5.size());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder5;
      objectArray0[1] = (Object) strBuilder5;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder6 = strBuilder5.appendAll(objectArray0);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNull(strBuilder0.getNullText());
      assertEquals(3005, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(3005, strBuilder0.size());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(3005, strBuilder5.size());
      assertEquals(3005, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(5644, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(3005, strBuilder6.length());
      assertEquals(3005, strBuilder6.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder7 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5828, strBuilder0.size());
      assertEquals(5828, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5828, strBuilder1.size());
      assertEquals(5828, strBuilder1.length());
      assertEquals(11654, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5828, strBuilder7.size());
      assertEquals(11654, strBuilder7.capacity());
      assertEquals(5828, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      
      int int0 = strBuilder7.lastIndexOf("0rn@[CM");
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5828, strBuilder0.size());
      assertEquals(5828, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5828, strBuilder1.size());
      assertEquals(5828, strBuilder1.length());
      assertEquals(11654, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5828, strBuilder7.size());
      assertEquals(11654, strBuilder7.capacity());
      assertEquals(5828, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      
      StrBuilder strBuilder8 = strBuilder0.append(true);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5832, strBuilder0.size());
      assertEquals(5832, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(11654, strBuilder8.capacity());
      assertEquals(5832, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(5832, strBuilder8.size());
      
      StrBuilder strBuilder9 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertNull(strBuilder0.getNullText());
      assertEquals(5850, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5850, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(5850, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(5850, strBuilder9.length());
      assertEquals(11654, strBuilder9.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5850, strBuilder1.size());
      assertEquals(5850, strBuilder1.length());
      assertEquals(11654, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder10 = strBuilder7.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder10);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8672, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(8672, strBuilder0.size());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8672, strBuilder1.size());
      assertEquals(8672, strBuilder1.length());
      assertEquals(11654, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(11654, strBuilder10.capacity());
      assertEquals(8672, strBuilder10.size());
      assertEquals(8672, strBuilder10.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8672, strBuilder2.length());
      assertEquals(11654, strBuilder2.capacity());
      assertEquals(8672, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8672, strBuilder3.size());
      assertEquals(8672, strBuilder3.length());
      assertEquals(11654, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(8672, strBuilder7.size());
      assertEquals(8672, strBuilder7.length());
      assertEquals(11654, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      boolean boolean0 = strBuilder8.equalsIgnoreCase(strBuilder1);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8672, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(8672, strBuilder0.size());
      assertEquals(8672, strBuilder8.length());
      assertEquals(8672, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(11654, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8672, strBuilder1.size());
      assertEquals(8672, strBuilder1.length());
      assertEquals(11654, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[18];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(18, int0);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(18, charArray0.length);
      
      charArray0[0] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.capacity());
      assertEquals("n:qv{0F`Yb3&H^f*N2", charBuffer0.toString());
      assertEquals(18, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(18, charArray0.length);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertFalse(charBuffer0.isDirect());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.capacity());
      assertEquals("n:qv{0F`Yb3&H^f*N2", charBuffer0.toString());
      assertEquals(18, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(18, charArray0.length);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertFalse(boolean0);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) strBuilder0;
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      
      StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0);
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertEquals(18, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(18, strBuilder2.length());
      assertEquals(18, strBuilder2.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.append((Object) "");
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(45, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.length());
      assertEquals(50, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(45, strBuilder4.size());
      assertEquals(45, strBuilder4.length());
      
      String string0 = strBuilder4.leftString((-1));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(string0);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertEquals("", string0);
      assertEquals(45, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.length());
      assertEquals(50, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(45, strBuilder4.size());
      assertEquals(45, strBuilder4.length());
      
      int int2 = strBuilder3.size();
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertEquals(18, int2);
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertEquals(18, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(18, strBuilder2.length());
      assertEquals(18, strBuilder2.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder5 = strBuilder3.appendln(false);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(24, strBuilder3.size());
      assertEquals(24, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(24, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(24, strBuilder5.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(24, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(24, strBuilder2.length());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertNotNull(strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(24, strBuilder3.size());
      assertEquals(24, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(24, strBuilder6.size());
      assertEquals(24, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(24, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(24, strBuilder2.length());
      assertEquals(4, objectArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertNotNull(strBuilder7);
      assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2"));
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertEquals(45, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.length());
      assertEquals(50, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(45, strBuilder4.size());
      assertEquals(45, strBuilder4.length());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(45, strBuilder7.size());
      assertEquals(45, strBuilder7.length());
      assertEquals(50, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");
      assertNotNull(strBuilder0);
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(104, int0);
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(114, strBuilder1.size());
      assertEquals(114, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(114, strBuilder1.size());
      assertEquals(114, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(114, strBuilder2.length());
      assertEquals(114, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(228, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("//", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.limit());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(2, buffer0.capacity());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.position());
      assertFalse(buffer0.isDirect());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.remaining());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int1);
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      strBuilder_StrBuilderReader0.close();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder3 = strBuilder1.append((long) 104);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(228, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(228, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(117, strBuilder3.size());
      assertEquals(117, strBuilder3.length());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains('/'));
      
      StrBuilder strBuilder4 = strBuilder3.appendWithSeparators((Iterable<?>) treeSet0, "hZ3CNnc|]e");
      assertNotNull(strBuilder4);
      assertFalse(treeSet0.contains('/'));
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(228, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(117, strBuilder4.length());
      assertEquals(117, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(228, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(228, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(117, strBuilder3.size());
      assertEquals(117, strBuilder3.length());
      
      StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(228, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(117, strBuilder5.size());
      assertEquals(117, strBuilder5.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(228, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(228, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(117, strBuilder3.size());
      assertEquals(117, strBuilder3.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));
      assertNotNull(list0);
      assertFalse(list0.contains("hZ3CNnc|]e"));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(228, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(228, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(117, strBuilder6.size());
      assertEquals(117, strBuilder6.length());
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '/';
      charArray1[1] = '/';
      StrBuilder strBuilder7 = strBuilder0.appendln(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(120, strBuilder0.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(120, strBuilder7.size());
      assertEquals(120, strBuilder7.length());
      assertEquals(228, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray1);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("hZ3CNnc|]e", 121, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(27, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(29, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(29, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(29, strBuilder2.size());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertEquals(81, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(160, strBuilder0.capacity());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(160, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(81, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(81, strBuilder2.length());
      assertEquals(160, strBuilder2.capacity());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(160, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      int int0 = 0;
      int int1 = 2822;
      StrBuilder strBuilder4 = strBuilder3.append("0rn@[CM");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.size());
      assertEquals(88, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(160, strBuilder0.capacity());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(160, strBuilder1.capacity());
      assertEquals(88, strBuilder1.size());
      assertEquals(88, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(88, strBuilder2.size());
      assertEquals(88, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(160, strBuilder2.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(160, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(88, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(88, strBuilder3.size());
      assertEquals(88, strBuilder4.length());
      assertEquals(88, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(160, strBuilder4.capacity());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder5 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder5.length());
      assertEquals(2822, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(5644, strBuilder5.capacity());
      
      Object[] objectArray0 = new Object[4];
      StrBuilder strBuilder6 = strBuilder5.deleteCharAt(0);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(2821, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2821, strBuilder0.size());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2821, strBuilder5.size());
      assertEquals(2821, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(2821, strBuilder6.size());
      assertEquals(5644, strBuilder6.capacity());
      assertEquals(2821, strBuilder6.length());
      
      objectArray0[0] = (Object) strBuilder5;
      objectArray0[1] = (Object) strBuilder5;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder7 = strBuilder5.appendAll(objectArray0);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3004, strBuilder0.size());
      assertEquals(3004, strBuilder0.length());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(5644, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(3004, strBuilder7.size());
      assertEquals(3004, strBuilder7.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(3004, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(3004, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(5644, strBuilder5.capacity());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder8 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertEquals(5827, strBuilder0.length());
      assertEquals(5827, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11652, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(11652, strBuilder8.capacity());
      assertEquals(5827, strBuilder8.length());
      assertEquals(5827, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(11652, strBuilder1.capacity());
      assertEquals(5827, strBuilder1.length());
      assertEquals(5827, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      int int2 = strBuilder8.lastIndexOf("0rn@[CM");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertEquals(3084, int2);
      assertNull(strBuilder0.getNullText());
      assertEquals(5827, strBuilder0.length());
      assertEquals(5827, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11652, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(11652, strBuilder8.capacity());
      assertEquals(5827, strBuilder8.length());
      assertEquals(5827, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(11652, strBuilder1.capacity());
      assertEquals(5827, strBuilder1.length());
      assertEquals(5827, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder9 = strBuilder0.append(false);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder8);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5832, strBuilder0.length());
      assertEquals(5832, strBuilder0.size());
      assertEquals(11652, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5832, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(5832, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      assertEquals(11652, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      
      StrBuilder strBuilder10 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11652, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5850, strBuilder0.length());
      assertEquals(5850, strBuilder0.size());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5850, strBuilder1.size());
      assertEquals(5850, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(11652, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(5850, strBuilder10.length());
      assertNull(strBuilder10.getNullText());
      assertEquals(5850, strBuilder10.size());
      assertEquals(11652, strBuilder10.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder10.insert((-1378), (float) 2822);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1378
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(1, int0);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      charArray0[0] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals("n", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertTrue(boolean0);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertEquals(50, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(36, strBuilder2.size());
      assertEquals(36, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("", charBuffer1.toString());
      
      StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(54, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.length());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(54, strBuilder3.length());
      assertEquals(54, strBuilder3.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(54, strBuilder2.length());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(54, strBuilder2.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.append((Object) "");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertEquals(81, strBuilder0.size());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(81, strBuilder4.size());
      assertEquals(81, strBuilder4.length());
      
      String string0 = strBuilder4.leftString(1);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertEquals("D", string0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertEquals(81, strBuilder0.size());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(81, strBuilder4.size());
      assertEquals(81, strBuilder4.length());
      
      int int2 = strBuilder3.size();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertEquals(81, int2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertEquals(81, strBuilder0.size());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder5 = strBuilder3.appendln(true);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertEquals(86, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(86, strBuilder0.length());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(86, strBuilder3.length());
      assertEquals(86, strBuilder3.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(86, strBuilder5.size());
      assertEquals(86, strBuilder5.length());
      assertEquals(108, strBuilder5.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(86, strBuilder2.length());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(86, strBuilder2.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(93, strBuilder0.length());
      assertEquals(93, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder3.capacity());
      assertEquals(93, strBuilder3.length());
      assertEquals(93, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(93, strBuilder6.size());
      assertEquals(93, strBuilder6.length());
      assertEquals(108, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(93, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(93, strBuilder2.size());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder7 = strBuilder6.trim();
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(92, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(92, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder3.capacity());
      assertEquals(92, strBuilder3.length());
      assertEquals(92, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(92, strBuilder6.size());
      assertEquals(92, strBuilder6.length());
      assertEquals(108, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(108, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(92, strBuilder7.length());
      assertEquals(92, strBuilder7.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(92, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(92, strBuilder2.length());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, objectArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2"));
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) set0);
      assertNotNull(strBuilder8);
      assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2"));
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(92, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(92, strBuilder0.length());
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(108, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(92, strBuilder4.size());
      assertEquals(92, strBuilder4.length());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(92, strBuilder8.length());
      assertEquals(92, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(108, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(79);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 79);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(79, strBuilder2.capacity());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder0.appendln((-2267));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(13, strBuilder3.length());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(65, strBuilder0.length());
      assertEquals(65, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(65, strBuilder1.length());
      assertEquals(65, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(65, strBuilder3.size());
      assertEquals(65, strBuilder3.length());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(65, strBuilder4.length());
      assertEquals(65, strBuilder4.size());
      assertEquals(79, strBuilder4.capacity());
      
      StrBuilder strBuilder5 = strBuilder4.deleteAll('#');
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(65, strBuilder0.length());
      assertEquals(65, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(65, strBuilder1.length());
      assertEquals(65, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(65, strBuilder3.size());
      assertEquals(65, strBuilder3.length());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(65, strBuilder4.length());
      assertEquals(65, strBuilder4.size());
      assertEquals(79, strBuilder4.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(65, strBuilder5.length());
      assertEquals(65, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(79, strBuilder5.capacity());
      
      StrBuilder strBuilder6 = strBuilder5.append((StringBuilder) null, 79, 44);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertEquals(65, strBuilder0.length());
      assertEquals(65, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(65, strBuilder1.length());
      assertEquals(65, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(65, strBuilder3.size());
      assertEquals(65, strBuilder3.length());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(65, strBuilder4.length());
      assertEquals(65, strBuilder4.size());
      assertEquals(79, strBuilder4.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(65, strBuilder5.length());
      assertEquals(65, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(79, strBuilder5.capacity());
      assertEquals(79, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(65, strBuilder6.length());
      assertEquals(65, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertEquals(65, strBuilder0.length());
      assertEquals(65, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(65, strBuilder1.length());
      assertEquals(65, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      int int0 = 2;
      StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertEquals(130, strBuilder0.size());
      assertEquals(130, strBuilder0.length());
      assertEquals(260, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(260, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(130, strBuilder1.size());
      assertEquals(130, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(260, strBuilder7.capacity());
      assertEquals(130, strBuilder7.size());
      assertEquals(130, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      
      StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertEquals(130, strBuilder0.size());
      assertEquals(130, strBuilder0.length());
      assertEquals(260, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(130, strBuilder8.size());
      assertEquals(130, strBuilder8.length());
      assertEquals(260, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder2.append((CharSequence) stringBuilder0, 2, (-211));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");
      assertNotNull(strBuilder0);
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("SzpQ!4 ;U");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("OMp</~5SIb#[E");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      int int0 = 540;
      StrBuilder strBuilder1 = new StrBuilder(540);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(540, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(540, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(13, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.size());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "OMp</~5SIb#[E";
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder0;
      StrBuilder strBuilder3 = strBuilder1.appendWithSeparators(objectArray0, "OMp</~5SIb#[E");
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(261, strBuilder1.size());
      assertEquals(261, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(540, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(261, strBuilder3.length());
      assertEquals(540, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(261, strBuilder3.size());
      assertEquals(4, objectArray0.length);
      
      String string0 = "";
      StrBuilder strBuilder4 = strBuilder2.deleteFirst("");
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(261, strBuilder1.size());
      assertEquals(261, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(540, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(13, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.size());
      assertEquals(13, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(13, strBuilder4.length());
      assertEquals(45, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      int int1 = (-2905);
      StrBuilder strBuilder5 = strBuilder1.deleteAll("OMp</~5SIb#[E");
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotNull(strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(261, strBuilder1.size());
      assertEquals(261, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(540, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(261, strBuilder5.size());
      assertEquals(261, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(540, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      
      int int2 = (-867);
      StrBuilder strBuilder6 = strBuilder1.appendFixedWidthPadRight((-2905), (-867), 'i');
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertNotNull(strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertEquals(261, strBuilder1.size());
      assertEquals(261, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(540, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(261, strBuilder6.length());
      assertEquals(540, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(261, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      
      boolean boolean0 = strBuilder0.startsWith("OMp</~5SIb#[E");
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      String string1 = strBuilder6.getNewLineText();
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertNull(string1);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertEquals(261, strBuilder1.size());
      assertEquals(261, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(540, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(261, strBuilder6.length());
      assertEquals(540, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(261, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      
      String string2 = null;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 107;
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int1 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(0, true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      char char0 = 'w';
      StrMatcher strMatcher0 = StrMatcher.charMatcher('w');
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = strBuilder0.indexOf((StrMatcher) strMatcher_TrimMatcher0, 107);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(289);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(8, strBuilder2.length());
      assertEquals(8, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      
      // Undeclared exception!
      try { 
        strBuilder2.deleteCharAt(10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 10
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(29, strBuilder1.length());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(29, strBuilder2.length());
      assertEquals(29, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(81, strBuilder0.length());
      assertEquals(81, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(160, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(160, strBuilder1.capacity());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(81, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(160, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(81, strBuilder3.length());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.size());
      assertEquals(2822, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.length());
      assertEquals(2822, strBuilder4.size());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[1] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(3005, strBuilder0.size());
      assertEquals(3005, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5644, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(5644, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(3005, strBuilder4.length());
      assertEquals(3005, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5644, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(3005, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(3005, strBuilder5.size());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5828, strBuilder0.size());
      assertEquals(11654, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5828, strBuilder0.length());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(11654, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5828, strBuilder1.size());
      assertEquals(5828, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(5828, strBuilder6.size());
      assertEquals(5828, strBuilder6.length());
      assertEquals(11654, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      
      int int0 = strBuilder6.lastIndexOf("0rn@[CM");
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5828, strBuilder0.size());
      assertEquals(11654, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5828, strBuilder0.length());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(11654, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5828, strBuilder1.size());
      assertEquals(5828, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(5828, strBuilder6.size());
      assertEquals(5828, strBuilder6.length());
      assertEquals(11654, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      
      StrBuilder strBuilder7 = strBuilder0.append(false);
      assertNotNull(strBuilder7);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals(11654, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(5833, strBuilder7.size());
      assertEquals(5833, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5833, strBuilder0.size());
      assertEquals(5833, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(11654, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5851, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5851, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(5851, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(11654, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertEquals(5851, strBuilder8.size());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(11654, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5851, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5851, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder8);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8673, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(8673, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(8673, strBuilder9.size());
      assertEquals(11654, strBuilder9.capacity());
      assertEquals(8673, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(8673, strBuilder1.length());
      assertEquals(11654, strBuilder1.capacity());
      assertEquals(8673, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8673, strBuilder2.length());
      assertEquals(11654, strBuilder2.capacity());
      assertEquals(8673, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(8673, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(11654, strBuilder3.capacity());
      assertEquals(8673, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(11654, strBuilder6.capacity());
      assertEquals(8673, strBuilder6.size());
      assertEquals(8673, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder5.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8673, strBuilder0.length());
      assertEquals(11654, strBuilder0.capacity());
      assertEquals(8673, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(8673, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(11654, strBuilder4.capacity());
      assertEquals(8673, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(8673, strBuilder5.size());
      assertEquals(11654, strBuilder5.capacity());
      assertEquals(8673, strBuilder5.length());
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-2133), (-915));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '2';
      charArray0[2] = '>';
      charArray0[3] = 'C';
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString("");
      assertNotNull(strTokenizer0);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      charArray0[4] = 'h';
      charArray0[5] = 'g';
      charArray0[6] = 'T';
      charArray0[7] = 'R';
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'9', '2', '>', 'C', 'h', 'g', 'T', 'R'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("w0cT", "w'+#G1I[");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder1.appendln(strBuilder0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst('9', 'R');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      
      int int0 = strBuilder3.lastIndexOf('>', 228);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-1498);
      StrBuilder strBuilder0 = new StrBuilder((-1498));
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      char char0 = 'Y';
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('Y');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("I%EqwV7sG3W", "I%EqwV7sG3W");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      
      int int1 = strBuilder0.lastIndexOf(strMatcher0, 116);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strMatcher0, strMatcher1);
      assertEquals((-1), int1);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      int int2 = 7;
      // Undeclared exception!
      try { 
        strBuilder0.validateRange((-738), (-1498));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -738
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.build();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertNotNull(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('h');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher0);
      
      int int1 = strBuilder2.lastIndexOf('b', 0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals((-1), int1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      Reader reader0 = strBuilder0.asReader();
      assertNotNull(reader0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(reader0.ready());
      assertTrue(reader0.markSupported());
      
      StrBuilder strBuilder3 = strBuilder2.append((char[]) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder3.append(strBuilder2, 0, 1103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('h');
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(", Length: 0", ", Length: 0");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      
      Object[] objectArray0 = new Object[6];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer2, 773, '5');
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(1546, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(773, strBuilder0.size());
      assertEquals(773, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertEquals(773, strBuilder2.size());
      assertEquals(1546, strBuilder2.capacity());
      assertEquals(773, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      
      objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[3] = (Object) strMatcher0;
      objectArray0[4] = (Object) ", Length: 0";
      objectArray0[5] = (Object) strMatcher0;
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(1546, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(773, strBuilder0.size());
      assertEquals(773, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(773, strBuilder1.size());
      assertEquals(1546, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(773, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1546, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(773, strBuilder3.size());
      assertEquals(773, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(710, int0);
      assertEquals(1546, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(773, strBuilder0.size());
      assertEquals(773, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" \t\n\r\f");
      assertNotNull(strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.toString();
      assertNotNull(string0);
      assertEquals(" \t\n\r\f", string0);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      int int0 = strBuilder0.indexOf("Ug.a6S}1F1Nr", (-1114));
      assertEquals((-1), int0);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText(" \t\n\r\f");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(" \t\n\r\f", strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(" \t\n\r\f", strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(" \t\n\r\f", strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(" \t\n\r\f", strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(" \t\n\r\f", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder1.replace((-1), (-167), "Ug.a6S}1F1Nr");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.build();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertNotNull(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln('h');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      
      int int0 = strBuilder2.capacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, int0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher0);
      
      int int1 = strBuilder2.lastIndexOf('b', 0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals((-1), int1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder2.append((char[]) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      String string0 = null;
      StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(16, strBuilder3.length());
      
      Writer writer0 = strBuilder3.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(16, strBuilder3.length());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(16, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(16, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((String) null, 3954);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder5 = strBuilder4.trim();
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(15, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(15, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(15, strBuilder5.size());
      assertEquals(15, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      
      int int1 = 6;
      StrBuilder strBuilder6 = strBuilder4.append(6);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(16, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(16, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(16, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(16, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      
      // Undeclared exception!
      try { 
        strMatcher0.isMatch(charArray0, 3954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(17, strBuilder3.length());
      assertEquals(17, strBuilder3.size());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((String) null, 3954);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder4 = strBuilder3.trim();
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(16, strBuilder3.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(16, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(16, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      
      int int1 = 6;
      StrBuilder strBuilder5 = strBuilder2.appendln((String) null, 0, 2255);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(17, strBuilder5.size());
      assertEquals(17, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      
      StrBuilder strBuilder6 = strBuilder5.appendPadding(6, '2');
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder2.length());
      assertEquals(23, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(23, strBuilder5.size());
      assertEquals(23, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(23, strBuilder6.size());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(23, strBuilder6.length());
      
      // Undeclared exception!
      try { 
        strBuilder2.insert(137, (Object) strBuilder4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 137
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("LINUX");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      
      strBuilder_StrBuilderWriter0.flush();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      
      IntStream intStream0 = strBuilder0.chars();
      assertNotNull(intStream0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      
      strBuilder_StrBuilderWriter0.write((String) null, 1, 1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(79);
      assertNotNull(strBuilder0);
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 79);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(79, strBuilder2.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder0.appendln((-2267));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(13, strBuilder3.length());
      assertEquals(13, strBuilder3.size());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(65, strBuilder0.size());
      assertEquals(65, strBuilder0.length());
      assertEquals(65, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(65, strBuilder1.length());
      assertEquals(65, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(65, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(65, strBuilder4.size());
      assertEquals(65, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(79, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder4.deleteAll('o');
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(62, strBuilder0.length());
      assertEquals(62, strBuilder0.size());
      assertEquals(62, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(62, strBuilder1.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(62, strBuilder3.size());
      assertEquals(62, strBuilder3.length());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(79, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(62, strBuilder4.length());
      assertEquals(62, strBuilder4.size());
      assertEquals(79, strBuilder5.capacity());
      assertEquals(62, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(62, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(62, strBuilder0.length());
      assertEquals(62, strBuilder0.size());
      assertEquals(62, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(79, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(62, strBuilder1.size());
      
      int int0 = 2;
      StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(124, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(248, strBuilder0.capacity());
      assertEquals(124, strBuilder0.size());
      assertEquals(248, strBuilder1.capacity());
      assertEquals(124, strBuilder1.size());
      assertEquals(124, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(248, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(124, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(124, strBuilder6.length());
      
      StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertEquals(124, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(248, strBuilder0.capacity());
      assertEquals(124, strBuilder0.size());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(124, strBuilder7.size());
      assertEquals(124, strBuilder7.length());
      assertEquals(248, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder2.append((CharSequence) stringBuilder0, 2, (-211));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 10;
      StrBuilder strBuilder0 = new StrBuilder(10);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'a';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "-Dm]G'4He", 10, 'a');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      
      int int1 = 321;
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '%';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 10, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 10
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), (-1), '/');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000/", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000/", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray0);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher("q=e;yKvV#~sM4D<2");
      assertNotNull(strMatcher1);
      
      strBuilder_StrBuilderReader0.close();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder3 = strBuilder1.append((long) (-1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = strBuilder3.ensureCapacity((-1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));
      assertNotNull(list0);
      assertFalse(list0.contains("q=e;yKvV#~sM4D<2"));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray0);
      
      StrBuilder strBuilder5 = strBuilder1.replaceFirst(strMatcher0, "Windows NT");
      assertNotNull(strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(2, strBuilder5.length());
      assertEquals(2, strBuilder5.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '/';
      charArray1[1] = '/';
      StrBuilder strBuilder6 = strBuilder0.appendln(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder6.length());
      assertEquals(5, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray1);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("hZ3CNnc|]e", 101, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '?';
      charArray0[2] = 'U';
      charArray0[3] = '4';
      StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(9, strBuilder2.length());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'^', '?', 'U', '4'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln((-3134.9556F));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(20, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(20, strBuilder3.size());
      assertEquals(20, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      
      String string0 = null;
      StrBuilder strBuilder4 = strBuilder3.insert(0, (String) null);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(20, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(20, strBuilder3.size());
      assertEquals(20, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(20, strBuilder4.length());
      assertEquals(20, strBuilder4.size());
      
      Writer writer0 = strBuilder4.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(20, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(20, strBuilder3.size());
      assertEquals(20, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(20, strBuilder4.length());
      assertEquals(20, strBuilder4.size());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(20, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(20, strBuilder5.length());
      assertEquals(20, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(20, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(strMatcher2);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      
      StrBuilder strBuilder6 = strBuilder5.trim();
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder6.length());
      assertEquals(19, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(19, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(19, strBuilder5.length());
      
      int int1 = 6;
      StrBuilder strBuilder7 = strBuilder5.append(6);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(20, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder7.size());
      assertEquals(20, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(20, strBuilder5.length());
      assertEquals(20, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      
      // Undeclared exception!
      try { 
        strMatcher0.isMatch(charArray1, 3954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      
      String string0 = null;
      StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(17, strBuilder2.length());
      assertEquals(17, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(17, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(17, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder2.appendln((-1270.0144F));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(28, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(28, strBuilder2.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(28, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(28, strBuilder4.length());
      
      String string1 = strBuilder3.leftString(0);
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals("", string1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(28, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(28, strBuilder2.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(28, strBuilder3.size());
      assertEquals(28, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      
      Writer writer0 = strBuilder3.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(28, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(28, strBuilder2.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(28, strBuilder3.size());
      assertEquals(28, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(28, strBuilder5.size());
      assertEquals(28, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder6 = strBuilder5.trim();
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(27, strBuilder5.length());
      assertEquals(27, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(27, strBuilder6.size());
      assertEquals(27, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder7);
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.size());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      
      StrBuilder strBuilder8 = strBuilder4.appendln((Object) strBuilder7);
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotNull(strBuilder8);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder5);
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(156, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertEquals(79, strBuilder8.size());
      assertEquals(79, strBuilder8.length());
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(79, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(79, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(156, strBuilder2.capacity());
      assertEquals(156, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(79, strBuilder4.size());
      assertEquals(79, strBuilder4.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.size());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      
      int int1 = 6;
      StrBuilder strBuilder9 = strBuilder5.append(6);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder5);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder9);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(156, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.size());
      assertEquals(80, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertEquals(80, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(80, strBuilder9.size());
      assertEquals(156, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(156, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(80, strBuilder5.size());
      assertEquals(80, strBuilder5.length());
      
      // Undeclared exception!
      try { 
        strMatcher0.isMatch(charArray0, 3954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 107;
      StrBuilder strBuilder0 = new StrBuilder(107);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(107, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      int int1 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(107, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      assertNotNull(strMatcher0);
      
      char char0 = 'w';
      StrMatcher strMatcher1 = StrMatcher.charMatcher('w');
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("");
      assertNotNull(strMatcher2);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(107, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(107, strBuilder2.capacity());
      assertEquals(6, strBuilder2.length());
      assertEquals(6, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      
      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher3);
      assertSame(strMatcher3, strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = strBuilder0.indexOf(strMatcher0, (-2284));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      
      StrBuilder strBuilder3 = strBuilder0.appendln(289);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(107, strBuilder3.capacity());
      assertEquals(10, strBuilder3.length());
      assertEquals(10, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(107, strBuilder4.capacity());
      assertEquals(9, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(9, strBuilder4.size());
      
      // Undeclared exception!
      try { 
        strBuilder3.deleteCharAt(1027);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1027
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 66, '\"');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(150, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(75, strBuilder0.length());
      assertEquals(75, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(150, strBuilder1.capacity());
      assertEquals(75, strBuilder1.length());
      assertEquals(75, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll("SzpQ!4 ;U");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(66, strBuilder0.size());
      assertEquals(150, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(66, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(150, strBuilder2.capacity());
      assertEquals(66, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(66, strBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("79TBCR ^cC%");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StrBuilder) null, 51, 256);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(43, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(12, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.append('-');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertEquals(43, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(13, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4387));
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(strBuilder0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add(strBuilder0);
      assertTrue(linkedHashSet0.contains(strBuilder0));
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0);
      assertNotNull(strBuilder1);
      assertFalse(linkedHashSet0.contains(strBuilder1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(51, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(51, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertEquals(51, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder0.ensureCapacity((-4387));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(51, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(51, strBuilder2.length());
      assertEquals(102, strBuilder2.capacity());
      assertEquals(51, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder1.appendPadding((-764), 'x');
      assertNotNull(strBuilder3);
      assertFalse(linkedHashSet0.contains(strBuilder1));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(51, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(51, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertEquals(51, strBuilder1.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(51, strBuilder3.length());
      assertEquals(51, strBuilder3.size());
      assertEquals(102, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");
      assertNotNull(strBuilder0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(104, int0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(114, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(114, strBuilder1.size());
      assertEquals(114, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(114, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(114, strBuilder1.size());
      assertEquals(114, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(228, strBuilder2.capacity());
      assertEquals(114, strBuilder2.size());
      assertEquals(114, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("//", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2, int1);
      assertEquals(114, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(2, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Z', '3'}, charArray0);
      
      strBuilder_StrBuilderReader0.close();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(114, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrBuilder strBuilder3 = strBuilder1.append((long) 104);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(117, strBuilder3.size());
      assertEquals(117, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(228, strBuilder3.capacity());
      
      StrBuilder strBuilder4 = strBuilder3.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", (String) null);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(174, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(174, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(174, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(174, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(174, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(174, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(228, strBuilder3.capacity());
      assertEquals(174, strBuilder4.length());
      assertEquals(228, strBuilder4.capacity());
      assertEquals(174, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(174, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(174, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(174, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(174, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(174, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(174, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(228, strBuilder3.capacity());
      assertEquals(174, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(228, strBuilder5.capacity());
      assertEquals(174, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(174, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(174, strBuilder0.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));
      assertNotNull(list0);
      assertFalse(list0.contains("hZ3CNnc|]e"));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(174, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(174, strBuilder0.size());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Z', '3'}, charArray0);
      
      StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(174, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(174, strBuilder0.size());
      assertEquals(228, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(174, strBuilder6.size());
      assertEquals(174, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(174, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(174, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '/';
      charArray1[1] = '/';
      StrBuilder strBuilder7 = strBuilder0.appendln(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(177, strBuilder0.size());
      assertEquals(177, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(177, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(228, strBuilder7.capacity());
      assertEquals(177, strBuilder7.length());
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray1);
      
      int int2 = strBuilder4.lastIndexOf('/');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertEquals(175, int2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(177, strBuilder0.size());
      assertEquals(177, strBuilder0.length());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(177, strBuilder1.length());
      assertEquals(177, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(177, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(228, strBuilder3.capacity());
      assertEquals(177, strBuilder3.length());
      assertEquals(228, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(177, strBuilder4.length());
      assertEquals(177, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("hZ3CNnc|]e", 101, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder0);
      assertNotNull(stringBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("", stringBuilder0.toString());
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) integer0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("10", stringBuilder0.toString());
      assertEquals("10", stringBuilder1.toString());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'C';
      charArray0[2] = 'r';
      charArray0[3] = 'g';
      charArray0[4] = 'h';
      charArray0[5] = 'p';
      charArray0[6] = '(';
      charArray0[7] = 'P';
      charArray0[8] = '@';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("10UCrghp(P@", stringBuilder0.toString());
      assertEquals("10UCrghp(P@", stringBuilder1.toString());
      assertEquals("10UCrghp(P@", stringBuilder2.toString());
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'U', 'C', 'r', 'g', 'h', 'p', '(', 'P', '@'}, charArray0);
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(10, (float) 10);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("10UCrghp(P10.0@", stringBuilder0.toString());
      assertEquals("10UCrghp(P10.0@", stringBuilder1.toString());
      assertEquals("10UCrghp(P10.0@", stringBuilder2.toString());
      assertEquals("10UCrghp(P10.0@", stringBuilder3.toString());
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'U', 'C', 'r', 'g', 'h', 'p', '(', 'P', '@'}, charArray0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder3, 10, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '2';
      charArray0[2] = '>';
      charArray0[3] = 'C';
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString("");
      assertNotNull(strTokenizer0);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      charArray0[4] = 'h';
      charArray0[5] = 'g';
      charArray0[6] = 'T';
      charArray0[7] = 'R';
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'9', '2', '>', 'C', 'h', 'g', 'T', 'R'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("w0cT", "w'+#G1I[");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst('9', 'R');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      
      StringBuilder stringBuilder0 = new StringBuilder("file.separator");
      assertNotNull(stringBuilder0);
      assertEquals("file.separator", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("file.separator0.0", stringBuilder1.toString());
      assertEquals("file.separator0.0", stringBuilder0.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertEquals("file.separator0.0false", stringBuilder1.toString());
      assertEquals("file.separator0.0false", stringBuilder2.toString());
      assertEquals("file.separator0.0false", stringBuilder0.toString());
      
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(1932);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertEquals("file.separator0.0false\u078C", stringBuilder1.toString());
      assertEquals("file.separator0.0false\u078C", stringBuilder2.toString());
      assertEquals("file.separator0.0false\u078C", stringBuilder3.toString());
      assertEquals("file.separator0.0false\u078C", stringBuilder0.toString());
      
      StringBuilder stringBuilder4 = stringBuilder3.reverse();
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder1.toString());
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder2.toString());
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder3.toString());
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder4.toString());
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder0.toString());
      
      StrBuilder strBuilder3 = strBuilder0.appendln(stringBuilder4);
      assertNotNull(strBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder1.toString());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.length());
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder2.toString());
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder3.toString());
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder4.toString());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(24, strBuilder3.size());
      assertEquals(24, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(8);
      assertNotNull(strBuilder0);
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder0);
      assertNotNull(stringBuilder0);
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", stringBuilder0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 3482.0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("3482.0", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("3482.0", stringBuilder1.toString());
      assertEquals("3482.0", stringBuilder2.toString());
      
      StringBuilder stringBuilder3 = stringBuilder2.append(5L);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("3482.05", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("3482.05", stringBuilder1.toString());
      assertEquals("3482.05", stringBuilder2.toString());
      assertEquals("3482.05", stringBuilder3.toString());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder3);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(8, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("3482.05", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("3482.05", stringBuilder1.toString());
      assertEquals("3482.05", stringBuilder2.toString());
      assertEquals("3482.05", stringBuilder3.toString());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      int int0 = strBuilder0.size();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(8, int0);
      assertEquals(8, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        strBuilder0.setLength(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(8);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strBuilder_StrBuilderTokenizer0, "ADF>Q");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.appendln(8);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(8, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(8, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll(' ');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(8, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(8, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(8, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertEquals(8, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset((char[]) null);
      assertNotNull(strTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(8, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      char[] charArray0 = new char[4];
      int int0 = (-1223);
      String string1 = strBuilder0.midString((-1223), 2034);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("8\n", string1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(8, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      charArray0[0] = 'B';
      charArray0[1] = '<';
      StrBuilder strBuilder4 = strBuilder0.deleteAll('B');
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(8, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2, strBuilder4.size());
      assertEquals(8, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      
      charArray0[2] = 'p';
      charArray0[3] = 'T';
      // Undeclared exception!
      try { 
        strBuilder0.getChars(2034, 8, charArray0, 2034);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.append('L');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      int int0 = 4284;
      String string0 = strBuilder1.rightString(4284);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("L", string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      int int1 = 32;
      StringBuilder stringBuilder0 = new StringBuilder("os.name");
      assertNotNull(stringBuilder0);
      assertEquals("os.name", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(4284, (float) 4284);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4284
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'b';
      charArray0[2] = '`';
      charArray0[3] = '\"';
      charArray0[4] = '!';
      charArray0[5] = '6';
      charArray0[6] = ']';
      charArray0[7] = '5';
      charArray0[8] = '6';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 2924, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "0rn@[CM";
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrBuilder strBuilder1 = new StrBuilder("0rn@[CM");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.capacity());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(11, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(11, strBuilder2.length());
      assertEquals(39, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(124, strBuilder1.capacity());
      assertEquals(63, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(63, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(63, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(124, strBuilder2.capacity());
      assertEquals(63, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(63, strBuilder3.size());
      assertEquals(63, strBuilder3.length());
      assertEquals(124, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 0;
      int int1 = 2822;
      StrBuilder strBuilder4 = strBuilder0.setLength(2822);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertEquals(5644, strBuilder0.capacity());
      assertEquals(2822, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2822, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2822, strBuilder4.size());
      assertEquals(5644, strBuilder4.capacity());
      assertEquals(2822, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder4;
      objectArray0[1] = (Object) strBuilder4;
      objectArray0[2] = (Object) '\\';
      objectArray0[3] = (Object) strBuilder1;
      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertEquals(3005, strBuilder5.size());
      assertEquals(3005, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(5644, strBuilder5.capacity());
      assertEquals(5644, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3005, strBuilder0.size());
      assertEquals(3005, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3005, strBuilder4.length());
      assertEquals(3005, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(5644, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, 0, 2822);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      String string0 = strBuilder0.getNewLineText();
      assertNull(string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      long long0 = strBuilder_StrBuilderReader0.skip((-1073L));
      assertEquals(0L, long0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      strBuilder_StrBuilderWriter0.write("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll("");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNotNull(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-376));
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.appendln(2302L);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder1.ensureCapacity(114);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(228, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(228, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "+[AQj^o1MB";
      StrBuilder strBuilder0 = new StrBuilder("+[AQj^o1MB");
      assertNotNull(strBuilder0);
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      
      int int0 = 2860;
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(2860);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5720, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5720, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll('+', '6');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(5720, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5720, strBuilder1.capacity());
      assertEquals(5720, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(10, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(10, strBuilder2.capacity());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(10, strBuilder3.size());
      assertEquals(10, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(10, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder1.validateRange(2860, (-32768));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1728);
      assertNotNull(strBuilder0);
      assertEquals(1728, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "(?: \\s|[\\s&&[^ ]])\\s*";
      StrBuilder strBuilder1 = new StrBuilder(1728);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1728, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(1728, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1728, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(1728, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      
      int int0 = strBuilder0.indexOf("(?: s|[s&&[^ ]])s*", 7);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      assertEquals(1728, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(charArray0);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(1728, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln('');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(1728, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertEquals(1728, strBuilder3.capacity());
      
      StrBuilder strBuilder4 = strBuilder2.append('');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertEquals(1728, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1728, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1728, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1728, strBuilder4.capacity());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      
      StrBuilder strBuilder5 = strBuilder1.appendSeparator((String) null, "(?: s|[s&&[^ ]])s*");
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1728, strBuilder1.capacity());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(1728, strBuilder5.capacity());
      assertEquals(18, strBuilder5.size());
      assertEquals(18, strBuilder5.length());
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(1728, '');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1728
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V");
      assertNotNull(stringBuffer0);
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0);
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(19, stringBuffer1.length());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer1.toString());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(20, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      
      int int0 = strBuilder0.indexOf("x,OEdUuh6_<", 0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(20, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<");
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(strBuilder2);
      assertTrue(enumSet0.contains(locale_Category1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(119, strBuilder0.length());
      assertEquals(119, strBuilder0.size());
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(238, strBuilder1.capacity());
      assertEquals(119, strBuilder1.size());
      assertEquals(119, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, enumSet0.size());
      assertEquals(238, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(119, strBuilder2.length());
      assertEquals(119, strBuilder2.size());
      
      String string0 = "";
      StrBuilder strBuilder3 = new StrBuilder();
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      
      StringBuilder stringBuilder0 = strBuilder3.toStringBuilder();
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(stringBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals("", stringBuilder0.toString());
      
      StrBuilder strBuilder4 = strBuilder0.appendln(0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(238, strBuilder0.capacity());
      assertEquals(121, strBuilder0.length());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(238, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(121, strBuilder4.length());
      assertEquals(121, strBuilder4.size());
      
      StrBuilder strBuilder5 = strBuilder1.appendln((Object) strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(173, strBuilder0.length());
      assertEquals(173, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(238, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(173, strBuilder1.size());
      assertEquals(173, strBuilder1.length());
      assertEquals(238, strBuilder5.capacity());
      assertEquals(173, strBuilder5.length());
      assertEquals(173, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      
      String string1 = strBuilder0.rightString(5);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertEquals("0001\n", string1);
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(173, strBuilder0.length());
      assertEquals(173, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StringBuilder stringBuilder1 = strBuilder0.toStringBuilder();
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertNotNull(stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(173, strBuilder0.length());
      assertEquals(173, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuilder1;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(173, strBuilder0.length());
      assertEquals(173, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(238, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(173, strBuilder1.size());
      assertEquals(173, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(173, strBuilder0.length());
      assertEquals(173, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(238, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(173, strBuilder1.size());
      assertEquals(173, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      
      objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[3] = (Object) strBuilder1;
      objectArray0[4] = (Object) stringBuffer1;
      objectArray0[5] = (Object) stringBuilder0;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertEquals(238, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(173, strBuilder0.length());
      assertEquals(173, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(238, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(173, strBuilder1.size());
      assertEquals(173, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      
      objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer2;
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1), 1L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      
      String string0 = null;
      StrBuilder strBuilder2 = strBuilder0.insert(0, (String) null);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, strBuilder2.length());
      assertEquals(6, strBuilder2.size());
      
      Writer writer0 = strBuilder2.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, strBuilder2.length());
      assertEquals(6, strBuilder2.size());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(6, strBuilder3.size());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder3.trim();
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(5, strBuilder4.size());
      
      int int1 = 6;
      StrBuilder strBuilder5 = strBuilder3.append(6);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(6, strBuilder3.size());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      
      // Undeclared exception!
      try { 
        strMatcher0.isMatch(charArray0, 3954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[5];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 8);
      assertEquals((-1), int0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[0] = '+';
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[1] = 'd';
      charArray0[2] = '8';
      charArray0[3] = '=';
      charArray0[4] = 'H';
      StrBuilder strBuilder2 = strBuilder0.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder2.size());
      assertEquals(11, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'+', 'd', '8', '=', 'H'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(63, strBuilder0.size());
      assertEquals(63, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(63, strBuilder2.size());
      assertEquals(63, strBuilder2.length());
      assertEquals(124, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(124, strBuilder3.capacity());
      assertEquals(63, strBuilder3.size());
      assertEquals(63, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'+', 'd', '8', '=', 'H'}, charArray0);
      
      Writer writer0 = strBuilder2.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(63, strBuilder0.size());
      assertEquals(63, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(63, strBuilder2.size());
      assertEquals(63, strBuilder2.length());
      assertEquals(124, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'+', 'd', '8', '=', 'H'}, charArray0);
      
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(boolean0);
      assertEquals(124, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(63, strBuilder0.size());
      assertEquals(63, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder2.append(strBuilder3, 2438, 2438);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('2');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.length());
      assertEquals(72, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.length());
      assertEquals(41, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.length());
      assertEquals(72, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.length());
      assertEquals(41, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("org.apache.commons.lang3.text.StrBuilder2", stringBuilder0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.length());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(72, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(41, strBuilder2.length());
      
      strBuilder0.hashCode();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.length());
      
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.length());
      
      int int1 = strBuilder0.lastIndexOf('', 0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(72, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 7;
      StrBuilder strBuilder0 = new StrBuilder(7);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      
      int int1 = 0;
      int int2 = 32;
      StrBuilder strBuilder2 = strBuilder0.insert(0, 32);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(7, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(7, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder1.append('r');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.capacity());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(7, strBuilder4.capacity());
      assertEquals(3, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3, strBuilder4.size());
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      StrBuilder strBuilder5 = strBuilder1.insert(0, (Object) integer0);
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(31, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(62, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(62, strBuilder1.capacity());
      assertEquals(31, strBuilder1.size());
      assertEquals(31, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(31, strBuilder5.size());
      assertEquals(31, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(62, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      
      StrBuilder strBuilder6 = strBuilder0.clear();
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(62, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(62, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      String string0 = "";
      boolean boolean0 = false;
      StrBuilder strBuilder7 = strBuilder5.appendln(false);
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(62, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(62, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(62, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(62, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(6, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(6, strBuilder7.length());
      
      StrBuilder strBuilder8 = strBuilder6.replaceAll(strMatcher0, "");
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(62, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(62, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(6, strBuilder6.size());
      assertEquals(6, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(6, strBuilder8.size());
      assertEquals(6, strBuilder8.length());
      assertEquals(62, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      
      char char0 = 'a';
      int int3 = strBuilder0.lastIndexOf('a', 7);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertEquals(1, int3);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(62, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter();
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(62, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(62, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(62, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder[] strBuilderArray0 = new StrBuilder[0];
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, "");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.getNewLineText();
      assertNull(string0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      long long0 = strBuilder_StrBuilderReader0.skip((-1073L));
      assertEquals(0L, long0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      strBuilder_StrBuilderReader0.reset();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      strBuilder_StrBuilderWriter0.write("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      strBuilder_StrBuilderWriter0.flush();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNotNull(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray0);
      
      StrBuilder strBuilder2 = strBuilder0.append(".F_8~jr2_t 5y.4", 0, 0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = new StrBuilder(880);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(880, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(880));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) arrayDeque0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertFalse(arrayDeque0.contains(880));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      
      int int0 = strBuilder0.size();
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(0, int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '%';
      charArray0[2] = 'n';
      charArray0[3] = 'm';
      charArray0[4] = 'K';
      charArray0[5] = '0';
      charArray0[6] = 't';
      charArray0[7] = '%';
      charArray0[8] = 'J';
      StrBuilder strBuilder3 = strBuilder0.appendln(charArray0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder3.length());
      assertEquals(10, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'~', '%', 'n', 'm', 'K', '0', 't', '%', 'J'}, charArray0);
      
      int int1 = strBuilder2.indexOf('$', 0);
      assertFalse(int1 == int0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(arrayDeque0.contains(int0));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      Integer[] integerArray0 = new Integer[1];
      StrBuilder strBuilder1 = strBuilder0.appendAll(integerArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, integerArray0.length);
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'O';
      charArray0[2] = 'Y';
      charArray0[3] = 'k';
      strBuilder0.buffer = charArray0;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(4, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.append("");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(4, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(4, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      Reader reader0 = strBuilder0.asReader();
      assertNotNull(reader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(reader0.ready());
      assertTrue(reader0.markSupported());
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(115);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(230, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(230, strBuilder1.capacity());
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(230, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(57, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 117
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");
      assertNotNull(strBuilder0);
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(104, int0);
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(114, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(114, strBuilder1.length());
      assertEquals(114, strBuilder1.size());
      assertEquals(228, strBuilder1.capacity());
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.append((long) (-963));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(118, strBuilder1.length());
      assertEquals(118, strBuilder1.size());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(228, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(118, strBuilder2.size());
      assertEquals(118, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder1.deleteAll(strMatcher0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(118, strBuilder1.length());
      assertEquals(118, strBuilder1.size());
      assertEquals(228, strBuilder1.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(228, strBuilder3.capacity());
      assertEquals(118, strBuilder3.size());
      assertEquals(118, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals("//", charBuffer0.toString());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(2, int1);
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.position());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Z', '3'}, charArray0);
      
      strBuilder_StrBuilderReader0.close();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(118, strBuilder0.length());
      assertEquals(118, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder4 = strBuilder1.append((long) 104);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(121, strBuilder0.length());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(121, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.length());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(121, strBuilder4.size());
      assertEquals(121, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(228, strBuilder4.capacity());
      
      StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(121, strBuilder0.length());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(121, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.length());
      assertEquals(228, strBuilder1.capacity());
      assertEquals(121, strBuilder4.size());
      assertEquals(121, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(228, strBuilder4.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(228, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(121, strBuilder5.size());
      assertEquals(121, strBuilder5.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(121, strBuilder0.length());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));
      assertNotNull(list0);
      assertFalse(list0.contains("hZ3CNnc|]e"));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(121, strBuilder0.length());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Z', '3'}, charArray0);
      
      StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertEquals(121, strBuilder0.length());
      assertEquals(121, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(228, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(121, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(121, strBuilder6.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(121, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(121, strBuilder1.length());
      assertEquals(228, strBuilder1.capacity());
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '/';
      charArray1[1] = '/';
      StrBuilder strBuilder7 = strBuilder0.appendln(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.size());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(228, strBuilder7.capacity());
      assertEquals(124, strBuilder7.length());
      assertEquals(124, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray1);
      
      StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) list0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(strBuilder8);
      assertFalse(list0.contains("hZ3CNnc|]e"));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(124, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(124, strBuilder0.size());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(124, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(124, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(228, strBuilder1.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(228, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(124, strBuilder8.size());
      assertEquals(124, strBuilder8.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(124, strBuilder4.size());
      assertEquals(124, strBuilder4.length());
      assertEquals(228, strBuilder4.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Z', '3'}, charArray0);
      
      StrBuilder strBuilder9 = strBuilder3.appendAll((Iterator<?>) strBuilder_StrBuilderTokenizer0);
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder8);
      assertEquals(151, strBuilder0.length());
      assertEquals(151, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(228, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(151, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(151, strBuilder1.length());
      assertEquals(228, strBuilder1.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(228, strBuilder3.capacity());
      assertEquals(151, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(151, strBuilder3.size());
      assertEquals(151, strBuilder9.size());
      assertEquals(151, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(228, strBuilder9.capacity());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("hZ3CNnc|]e", 101, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-730));
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst((StrMatcher) strMatcher_StringMatcher0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll("pD;m\"Wg[Mj");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder2.deleteFirst((StrMatcher) strMatcher_StringMatcher0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      
      String string0 = strBuilder0.getNullText();
      assertNull(string0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = strBuilder0.capacity();
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(32, int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      String string1 = strBuilder3.leftString(32);
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals("", string1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      
      String string2 = "J%?^k/q>-%";
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("J%?^k/q>-%");
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder5 = strBuilder3.deleteAll(strMatcher0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '\'';
      int int1 = 31;
      // Undeclared exception!
      try { 
        strBuilder5.insert(9, charArray0, 31, (-730));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 9
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '>';
      charArray0[2] = '';
      charArray0[3] = '(';
      charArray0[4] = '^';
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "d(!`<o?9g`N");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      charArray0[5] = 'g';
      charArray0[6] = 'R';
      charArray0[7] = ']';
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) locale_Category0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(37, strBuilder0.length());
      assertEquals(37, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(72, strBuilder2.capacity());
      assertEquals(37, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(37, strBuilder2.size());
      
      int int0 = (-3745);
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, (-3745), (-3745));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -3745
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "K6f";
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      
      String string1 = "]*qbQ%";
      StrBuilder strBuilder2 = strBuilder1.setNewLineText("]*qbQ%");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("]*qbQ%", strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals("]*qbQ%", strBuilder1.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals("]*qbQ%", strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("]*qbQ%", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals("]*qbQ%", strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(6, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(6, strBuilder2.size());
      assertEquals("]*qbQ%", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("]*qbQ%", strBuilder3.getNewLineText());
      assertEquals(6, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0);
      assertNotNull(strBuilder4);
      assertFalse(linkedList0.contains(0));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("]*qbQ%", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals("]*qbQ%", strBuilder1.getNewLineText());
      assertEquals(0, linkedList0.size());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals("]*qbQ%", strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder4.appendSeparator("]*qbQ%", (-1079));
      assertNotNull(strBuilder5);
      assertFalse(linkedList0.contains(0));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("]*qbQ%", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals("]*qbQ%", strBuilder1.getNewLineText());
      assertEquals(0, linkedList0.size());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals("]*qbQ%", strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertEquals("]*qbQ%", strBuilder5.getNewLineText());
      assertEquals(6, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      
      StrBuilder strBuilder6 = strBuilder3.appendln('\'');
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("]*qbQ%", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals("]*qbQ%", strBuilder1.getNewLineText());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.length());
      assertEquals(13, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(13, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("]*qbQ%", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(13, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("]*qbQ%", strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(13, strBuilder3.length());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals("]*qbQ%", strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(13, strBuilder6.size());
      assertEquals(13, strBuilder6.length());
      
      StrBuilder strBuilder7 = strBuilder6.append(0);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("]*qbQ%", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertEquals("]*qbQ%", strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder2.length());
      assertEquals(14, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("]*qbQ%", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(14, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("]*qbQ%", strBuilder3.getNewLineText());
      assertEquals(14, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals("]*qbQ%", strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(14, strBuilder6.size());
      assertEquals(14, strBuilder6.length());
      assertEquals(14, strBuilder7.length());
      assertEquals(14, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals("]*qbQ%", strBuilder7.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, (-286), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      Object[] objectArray0 = new Object[1];
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder1.append((long) 0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder2.appendln('H');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertEquals(1, objectArray0.length);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      StrBuilder strBuilder4 = strBuilder1.appendAll(objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      StrBuilder strBuilder5 = strBuilder4.deleteCharAt(0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(2, strBuilder5.size());
      assertEquals(2, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      StrBuilder strBuilder6 = strBuilder1.setLength(0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(objectArray0, objectArray1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(1, objectArray0.length);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, (double) 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2');
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder0.deleteFirst('2');
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      
      StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      String string0 = strBuilder0.toString();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertEquals("\n", string0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(1210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(605, strBuilder0.size());
      assertEquals(605, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(605, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(1210, strBuilder5.capacity());
      assertEquals(605, strBuilder5.size());
      
      StrBuilder strBuilder6 = strBuilder0.append(0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(1210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(606, strBuilder0.length());
      assertEquals(606, strBuilder0.size());
      assertEquals(606, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(1210, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(606, strBuilder6.length());
      
      StrBuilder strBuilder7 = strBuilder6.appendAll((Iterable<?>) null);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertEquals(1210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(606, strBuilder0.length());
      assertEquals(606, strBuilder0.size());
      assertEquals(606, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(1210, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(606, strBuilder6.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(606, strBuilder7.size());
      assertEquals(1210, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(606, strBuilder7.length());
      
      String string1 = strBuilder4.rightString(0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertEquals("", string1);
      assertEquals(1210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(606, strBuilder0.length());
      assertEquals(606, strBuilder0.size());
      assertEquals(606, strBuilder4.size());
      assertEquals(606, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1210, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-1994);
      StrBuilder strBuilder0 = new StrBuilder((-1994));
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendln("");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      
      int int1 = (-2242);
      int int2 = 5;
      strBuilder1.size = 5;
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      
      strBuilder1.size = (-2242);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-2242), strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-2242), strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-2242), strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals((-2242), strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-2242), strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-2242), strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-2242), strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-2242), strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int3 = 20;
      // Undeclared exception!
      try { 
        strBuilder1.replace((-2242), 20, "java.compiler");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2242
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5}%CW)%");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      
      int int0 = 537;
      StrBuilder strBuilder3 = new StrBuilder("Invalid startIndex: ");
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertEquals(20, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(20, strBuilder3.length());
      assertEquals(52, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      
      int int1 = 9;
      StrBuilder strBuilder4 = strBuilder2.appendFixedWidthPadRight((Object) strBuilder1, 9, '*');
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder2.length());
      assertEquals("Invalid startIndex: ", strBuilder2.getNullText());
      assertEquals(9, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder4.size());
      assertEquals("Invalid startIndex: ", strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(9, strBuilder4.length());
      
      // Undeclared exception!
      try { 
        strBuilder4.insert(117, (long) 537);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 117
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      int int0 = strBuilder0.indexOf("2X:=4rf^>1T./&0xdS");
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.append(false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      int int0 = 32;
      int int1 = 8;
      char[] charArray0 = new char[4];
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder1.appendln('}');
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      
      int int2 = 0;
      String string0 = strBuilder3.substring(0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(string0);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertEquals("false}\n", string0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      
      int int3 = strBuilder2.indexOf((StrMatcher) null, 8);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertEquals((-1), int3);
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      
      charArray0[0] = '\"';
      charArray0[1] = 'b';
      char char0 = 'S';
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex(8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      char[] charArray0 = new char[1];
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      
      charArray0[0] = '3';
      StrBuilder strBuilder2 = strBuilder0.append(3986.49F);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(7, strBuilder3.length());
      
      boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(7, strBuilder3.length());
      
      StrBuilder strBuilder4 = strBuilder0.append("");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder4.length());
      assertEquals(7, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      
      IntStream intStream0 = strBuilder2.codePoints();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      
      StrBuilder strBuilder5 = strBuilder2.appendln(stringBuffer0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(8, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder5.size());
      assertEquals(8, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      
      StrBuilder strBuilder6 = strBuilder0.append(5305);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertEquals(12, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(12, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      
      StrBuilder strBuilder7 = strBuilder0.appendln('3');
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(14, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, (-2104));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder8 = strBuilder7.appendln("");
      assertNotNull(strBuilder8);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertEquals(32, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(15, strBuilder8.length());
      assertEquals(15, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder7.size());
      assertEquals(15, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1890));
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(strMatcher0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, (-1890));
      assertEquals((-1), int0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = (-334);
      StrBuilder strBuilder0 = new StrBuilder((-334));
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertEquals(234, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(234, strBuilder1.capacity());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      int int1 = strBuilder0.indexOf('P');
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int1);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertEquals(234, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertEquals(234, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      strBuilder_StrBuilderReader0.close();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertEquals(234, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StringBuilder stringBuilder0 = new StringBuilder(117);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-334), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -334
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "C#5,rw4FJ>B.4K$lilj";
      StrBuilder strBuilder0 = new StrBuilder("C#5,rw4FJ>B.4K$lilj");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(".0", stringBuilder0.toString());
      assertEquals(".0", stringBuilder1.toString());
      assertEquals(".0", stringBuilder2.toString());
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) strBuilder0, 0, 0);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(".0", stringBuilder0.toString());
      assertEquals(".0", stringBuilder1.toString());
      assertEquals(".0", stringBuilder2.toString());
      assertEquals(".0", stringBuilder3.toString());
      
      StringBuilder stringBuilder4 = stringBuilder3.append('7');
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(".07", stringBuilder0.toString());
      assertEquals(".07", stringBuilder1.toString());
      assertEquals(".07", stringBuilder2.toString());
      assertEquals(".07", stringBuilder3.toString());
      assertEquals(".07", stringBuilder4.toString());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuilder4, Integer.MAX_VALUE, (-1758));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "K6f";
      StrBuilder strBuilder0 = new StrBuilder("K6f");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      
      String string1 = "";
      StrBuilder strBuilder2 = strBuilder1.setNewLineText("");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(35, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("", strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      
      StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(6, strBuilder2.length());
      assertEquals(6, strBuilder2.size());
      assertEquals(35, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("", strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(35, strBuilder3.capacity());
      assertEquals("", strBuilder3.getNewLineText());
      assertEquals(6, strBuilder3.size());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      
      StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0);
      assertNotNull(strBuilder4);
      assertFalse(linkedList0.contains(int0));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(0, linkedList0.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(35, strBuilder4.capacity());
      assertEquals("", strBuilder4.getNewLineText());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      
      StrBuilder strBuilder5 = strBuilder4.appendSeparator("", (-1079));
      assertNotNull(strBuilder5);
      assertFalse(linkedList0.contains(int0));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(0, linkedList0.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(35, strBuilder4.capacity());
      assertEquals("", strBuilder4.getNewLineText());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertEquals("", strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(35, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      
      StrBuilder strBuilder6 = strBuilder3.appendln('\'');
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertEquals(35, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("", strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(35, strBuilder3.capacity());
      assertEquals("", strBuilder3.getNewLineText());
      assertEquals(7, strBuilder3.size());
      assertEquals(7, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder6.size());
      assertEquals(35, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals("", strBuilder6.getNewLineText());
      assertEquals(7, strBuilder6.length());
      
      StrBuilder strBuilder7 = strBuilder6.append(0);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(8, strBuilder2.length());
      assertEquals(8, strBuilder2.size());
      assertEquals(35, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("", strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(35, strBuilder3.capacity());
      assertEquals("", strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(8, strBuilder6.size());
      assertEquals(8, strBuilder6.length());
      assertEquals(35, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals("", strBuilder6.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(8, strBuilder7.length());
      assertEquals("", strBuilder7.getNewLineText());
      assertEquals(8, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(35, strBuilder7.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, (-286), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(256);
      assertNotNull(strBuilder0);
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, "");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(256, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(256, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendln("HDK1o:4z@EGXArn*_");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(256, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder2.size());
      assertEquals(18, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(256, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder3, (-2074), (-2074));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      String string0 = strBuilder0.midString(0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) listIterator0);
      assertNotNull(strBuilder1);
      assertFalse(linkedList0.contains(0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      int int1 = 2;
      boolean boolean0 = linkedList0.add((Object) strBuilder0);
      assertFalse(linkedList0.contains(0));
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        strBuilder1.setCharAt(2, 'l');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("-fdW. ");
      assertNotNull(strBuilder0);
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '~';
      charArray0[2] = '5';
      charArray0[3] = 'T';
      strBuilder0.buffer = charArray0;
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.capacity());
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('Q');
      assertNotNull(strMatcher0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteAll(strMatcher0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(89, strBuilder0.capacity());
      assertEquals(57, strBuilder0.size());
      assertEquals(57, strBuilder0.length());
      
      char char0 = '\"';
      strBuilder0.size = (-914);
      assertNull(strBuilder0.getNullText());
      assertEquals((-914), strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(89, strBuilder0.capacity());
      assertEquals((-914), strBuilder0.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendSeparator('\"', 'p');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.append((-1580.7));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.append(0L);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      
      String string0 = strBuilder0.midString(0, 0);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        strBuilder0.delete(1458, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.text.StrBuilder";
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      
      StrBuilder[] strBuilderArray0 = new StrBuilder[0];
      StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(40, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(72, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, strBuilderArray0.length);
      
      char char0 = '2';
      StrBuilder strBuilder2 = strBuilder0.appendSeparator('2');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(72, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(41, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.size());
      
      StringBuilder stringBuilder0 = strBuilder2.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(72, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(41, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.size());
      assertEquals("org.apache.commons.lang3.text.StrBuilder2", stringBuilder0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StrBuilder strBuilder3 = strBuilder0.append(stringBuffer0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(41, strBuilder3.size());
      assertEquals(72, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(41, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      
      strBuilder0.hashCode();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder0.length());
      assertEquals(72, strBuilder0.capacity());
      
      StrBuilder strBuilder4 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder", (Object[]) strBuilderArray0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(162, strBuilder0.capacity());
      assertEquals(82, strBuilder0.length());
      assertEquals(82, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(162, strBuilder1.capacity());
      assertEquals(82, strBuilder1.size());
      assertEquals(82, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(162, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(82, strBuilder4.size());
      assertEquals(82, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(0, strBuilderArray0.length);
      
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(41, int0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(162, strBuilder0.capacity());
      assertEquals(82, strBuilder0.length());
      assertEquals(82, strBuilder0.size());
      
      char char1 = '';
      int int1 = 0;
      int int2 = strBuilder1.lastIndexOf('', 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertEquals((-1), int2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(162, strBuilder0.capacity());
      assertEquals(82, strBuilder0.length());
      assertEquals(82, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(162, strBuilder1.capacity());
      assertEquals(82, strBuilder1.size());
      assertEquals(82, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, strBuilderArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder4.insert(108, (long) 41);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(""));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "java.class.version");
      assertNotNull(strBuilder1);
      assertFalse(arrayDeque0.contains("java.class.version"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.append('Y');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(1, int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      charArray0[0] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("n", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertTrue(boolean0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(50, strBuilder2.capacity());
      assertEquals(36, strBuilder2.size());
      assertEquals(36, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      
      StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(54, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(54, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(54, strBuilder3.length());
      assertEquals(54, strBuilder3.size());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(54, strBuilder2.size());
      assertEquals(54, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder0.append((Object) "");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(81, strBuilder4.length());
      assertEquals(81, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      
      String string0 = strBuilder4.leftString(1);
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertEquals("D", string0);
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(81, strBuilder4.length());
      assertEquals(81, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      
      int int2 = strBuilder3.size();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(81, int2);
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(81, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder5 = strBuilder3.appendln(true);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(86, strBuilder0.size());
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(86, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(86, strBuilder3.length());
      assertEquals(86, strBuilder3.size());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(86, strBuilder5.length());
      assertEquals(86, strBuilder5.size());
      assertEquals(108, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(86, strBuilder2.size());
      assertEquals(86, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, objectArray0.length);
      
      StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(93, strBuilder0.size());
      assertEquals(93, strBuilder0.length());
      assertEquals(108, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(93, strBuilder3.size());
      assertEquals(93, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(93, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(93, strBuilder6.size());
      assertEquals(108, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(93, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(93, strBuilder2.length());
      assertEquals(108, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, objectArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2"));
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);
      assertNotNull(strBuilder7);
      assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2"));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertEquals(108, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(93, strBuilder0.size());
      assertEquals(93, strBuilder0.length());
      assertEquals(108, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(93, strBuilder4.length());
      assertEquals(93, strBuilder4.size());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(93, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(108, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(93, strBuilder7.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(79);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 79);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertEquals(79, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder0.appendln((-2267));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(13, strBuilder3.size());
      assertEquals(13, strBuilder3.length());
      assertEquals(79, strBuilder3.capacity());
      
      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(65, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(65, strBuilder0.length());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(65, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(65, strBuilder1.size());
      assertEquals(65, strBuilder3.size());
      assertEquals(65, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(79, strBuilder3.capacity());
      assertEquals(79, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(65, strBuilder4.length());
      assertEquals(65, strBuilder4.size());
      
      StrBuilder strBuilder5 = strBuilder4.deleteAll('#');
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(65, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(65, strBuilder0.length());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(65, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(65, strBuilder1.size());
      assertEquals(65, strBuilder3.size());
      assertEquals(65, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(79, strBuilder3.capacity());
      assertEquals(79, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(65, strBuilder4.length());
      assertEquals(65, strBuilder4.size());
      assertEquals(79, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(65, strBuilder5.length());
      assertEquals(65, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(65, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(65, strBuilder0.length());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(65, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(65, strBuilder1.size());
      
      int int0 = 2;
      StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(130, strBuilder0.size());
      assertEquals(130, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(260, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(130, strBuilder1.size());
      assertEquals(260, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(130, strBuilder1.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(260, strBuilder6.capacity());
      assertEquals(130, strBuilder6.length());
      assertEquals(130, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      
      StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(130, strBuilder0.size());
      assertEquals(130, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(260, strBuilder0.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(260, strBuilder7.capacity());
      assertEquals(130, strBuilder7.size());
      assertEquals(130, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder2.append((CharSequence) stringBuilder0, 2, (-211));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(79);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(79, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 79);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(79, strBuilder2.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder0.appendln((-2267));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(79, strBuilder0.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(13, strBuilder3.length());
      assertEquals(13, strBuilder3.size());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(65, strBuilder0.length());
      assertEquals(65, strBuilder0.size());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(65, strBuilder1.length());
      assertEquals(65, strBuilder1.size());
      assertEquals(65, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(65, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(79, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(65, strBuilder4.size());
      assertEquals(65, strBuilder4.length());
      
      StrBuilder strBuilder5 = strBuilder4.deleteAll('#');
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(65, strBuilder0.length());
      assertEquals(65, strBuilder0.size());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(79, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(65, strBuilder1.length());
      assertEquals(65, strBuilder1.size());
      assertEquals(65, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(65, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(79, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(65, strBuilder4.size());
      assertEquals(65, strBuilder4.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(79, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(65, strBuilder5.length());
      assertEquals(65, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      
      StrBuilder strBuilder6 = strBuilder5.appendFixedWidthPadLeft((-2267), 604, 'n');
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertEquals(669, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1338, strBuilder0.capacity());
      assertEquals(669, strBuilder0.length());
      assertEquals(1338, strBuilder1.capacity());
      assertEquals(669, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(669, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(669, strBuilder3.length());
      assertEquals(669, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1338, strBuilder3.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(669, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(1338, strBuilder4.capacity());
      assertEquals(669, strBuilder4.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(669, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(669, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(1338, strBuilder5.capacity());
      assertEquals(669, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(669, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(1338, strBuilder6.capacity());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertNull(strBuilder0.getNullText());
      assertEquals(669, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1338, strBuilder0.capacity());
      assertEquals(669, strBuilder0.length());
      assertEquals(1338, strBuilder1.capacity());
      assertEquals(669, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(669, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1);
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1338, strBuilder0.capacity());
      assertEquals(1338, strBuilder0.size());
      assertEquals(1338, strBuilder0.length());
      assertEquals(1338, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1338, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1338, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1338, strBuilder7.capacity());
      assertEquals(1338, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1338, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      
      StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "nCIF=^XRVL:\t%AH&");
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1338, strBuilder0.capacity());
      assertEquals(1338, strBuilder0.size());
      assertEquals(1338, strBuilder0.length());
      assertEquals(1338, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(1338, strBuilder8.length());
      assertEquals(1338, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder2.append((CharSequence) stringBuilder0, 2, (-211));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 7;
      StrBuilder strBuilder0 = new StrBuilder(7);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      
      int int1 = 0;
      int int2 = 32;
      StrBuilder strBuilder2 = strBuilder0.insert(0, 32);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertEquals(7, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder1.append('r');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(7, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder3.size());
      assertEquals(3, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(7, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(7, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(7, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      StrBuilder strBuilder5 = strBuilder1.insert(0, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(62, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.size());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(62, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.length());
      assertEquals(31, strBuilder1.size());
      assertEquals(62, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(31, strBuilder5.size());
      assertEquals(31, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      
      StrBuilder strBuilder6 = strBuilder0.clear();
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertEquals(62, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(62, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      String string0 = "";
      StrBuilder strBuilder7 = strBuilder5.appendln(false);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertEquals(62, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(62, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(62, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(62, strBuilder7.capacity());
      assertEquals(6, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(6, strBuilder7.length());
      
      StrBuilder strBuilder8 = strBuilder6.replaceAll(strMatcher0, "");
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertEquals(62, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(62, strBuilder6.capacity());
      assertEquals(6, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(6, strBuilder8.length());
      assertEquals(62, strBuilder8.capacity());
      assertEquals(6, strBuilder8.size());
      
      char char0 = 'W';
      int int3 = strBuilder0.lastIndexOf('W', 7);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertEquals((-1), int3);
      assertEquals(62, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter();
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(62, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(62, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(62, strBuilder5.capacity());
      assertEquals(6, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "/\\$,n%)TR@t?7e+ZHk'";
      StrBuilder strBuilder1 = new StrBuilder("/$,n%)TR@t?7e+ZHk'");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      
      int int0 = 0;
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer1, 0, '@');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(stringBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StrBuilder strBuilder3 = strBuilder0.append(stringBuffer0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      
      String string1 = strBuilder1.getNewLineText();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertNull(string1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder0.appendln(stringBuffer0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      
      int int1 = strBuilder0.capacity();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertEquals(32, int1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      
      int int2 = strBuilder4.lastIndexOf('`');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals((-1), int2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      
      StrBuilder strBuilder5 = strBuilder4.appendln((float) (-1));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      
      StrBuilder strBuilder6 = strBuilder0.append(false);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(11, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(11, strBuilder6.size());
      
      StrBuilder strBuilder7 = strBuilder6.appendln(false);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(17, strBuilder6.size());
      assertEquals(17, strBuilder6.length());
      assertEquals(17, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(17, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder6.insert((-3047), (long) 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3047
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      
      String string0 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer";
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) null, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.delete((-849), (-849));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -849
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = new StrBuilder(0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.appendln(1.0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder0.appendln(strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      
      boolean boolean0 = strBuilder3.equalsIgnoreCase(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertFalse(boolean0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = 'Q';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder2;
      objectArray0[1] = (Object) '?';
      objectArray0[2] = (Object) strBuilder1;
      objectArray0[3] = (Object) " ^rGa";
      objectArray0[4] = (Object) " ^rGa";
      objectArray0[5] = (Object) strBuilder3;
      StrBuilder strBuilder4 = strBuilder2.appendln(" ^rGa", objectArray0);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(10, strBuilder4.size());
      assertEquals(10, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(10, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(6, objectArray0.length);
      
      charArray0[2] = 'I';
      charArray0[3] = '*';
      charArray0[4] = '+';
      charArray0[5] = 'o';
      charArray0[6] = '*';
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(list0);
      assertFalse(list0.contains(" ^rGa"));
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(10, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'?', 'Q', 'I', '*', '+', 'o', '*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrTokenizer strTokenizer0 = strBuilder0.asTokenizer();
      assertNotNull(strTokenizer0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      char char0 = 'w';
      int int0 = strBuilder0.indexOf('w');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) integer0, (-1), 'w');
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      
      int int1 = strBuilder0.indexOf("java.specification.vendor", 1579);
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder2 = new StrBuilder("java.specification.vendor");
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.isEmpty());
      assertEquals(25, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(25, strBuilder2.length());
      assertEquals(57, strBuilder2.capacity());
      
      boolean boolean0 = strBuilder0.equals(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(25, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(25, strBuilder2.length());
      assertEquals(57, strBuilder2.capacity());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      // Undeclared exception!
      try { 
        strBuilder1.append(charArray0, 1579, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = 'I';
      charArray0[3] = 'n';
      charArray0[4] = '3';
      charArray0[5] = 'E';
      charArray0[6] = '@';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'6', '6', 'I', 'n', '3', 'E', '@'}, charArray0);
      assertArrayEquals(new char[] {'6', '6', 'I', 'n', '3', 'E', '@'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.append('U');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(2, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotNull(strMatcher_NoMatcher0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.setTrimmerMatcher(strMatcher_NoMatcher0);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      
      String string0 = strBuilder0.leftString(2026);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertEquals("U", string0);
      assertEquals(1, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      
      StrBuilder strBuilder4 = strBuilder1.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer1, 2026, '(');
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(4054, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2027, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2027, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2027, strBuilder1.size());
      assertEquals(2027, strBuilder1.length());
      assertEquals(4054, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(4054, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2027, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2027, strBuilder4.length());
      
      StrBuilder strBuilder5 = strBuilder4.insert(2026, 0.0F);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(4054, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2030, strBuilder0.length());
      assertEquals(2030, strBuilder0.size());
      assertEquals(2030, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(2030, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4054, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(4054, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2030, strBuilder4.size());
      assertEquals(2030, strBuilder4.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(2030, strBuilder5.length());
      assertEquals(4054, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(2030, strBuilder5.size());
      
      StrBuilder strBuilder6 = strBuilder4.append(0L);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertEquals(4054, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2031, strBuilder0.size());
      assertEquals(2031, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(2031, strBuilder1.size());
      assertEquals(2031, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4054, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(4054, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2031, strBuilder4.size());
      assertEquals(2031, strBuilder4.length());
      assertEquals(2031, strBuilder6.size());
      assertEquals(2031, strBuilder6.length());
      assertEquals(4054, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      
      String string1 = strBuilder_StrBuilderTokenizer0.previousToken();
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNull(string1);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder7 = strBuilder6.setCharAt(97, '+');
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer2);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertEquals(4054, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2031, strBuilder0.size());
      assertEquals(2031, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(2031, strBuilder1.size());
      assertEquals(2031, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4054, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(4054, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2031, strBuilder4.size());
      assertEquals(2031, strBuilder4.length());
      assertEquals(2031, strBuilder6.size());
      assertEquals(2031, strBuilder6.length());
      assertEquals(4054, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(4054, strBuilder7.capacity());
      assertEquals(2031, strBuilder7.length());
      assertEquals(2031, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(4054, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2031, strBuilder0.size());
      assertEquals(2031, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      strBuilder_StrBuilderReader0.close();
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertEquals(4054, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2031, strBuilder0.size());
      assertEquals(2031, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertFalse(boolean0);
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "java.vendor.url";
      objectArray0[1] = (Object) "U";
      objectArray0[2] = (Object) strBuilder2;
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[4] = (Object) "U";
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer3 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer3.equals((Object)strBuilder_StrBuilderTokenizer2));
      assertFalse(strBuilder_StrBuilderTokenizer3.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer3.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer3);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer3);
      assertNotSame(strBuilder_StrBuilderTokenizer3, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer3, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer3, strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer3.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer3.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer3.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer3.previousIndex());
      
      objectArray0[5] = (Object) strBuilder_StrBuilderTokenizer3;
      objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer0;
      StrBuilder strBuilder8 = strBuilder2.appendln("java.vendor.url", objectArray0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder7);
      assertEquals(4054, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2047, strBuilder0.size());
      assertEquals(2047, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(2047, strBuilder1.size());
      assertEquals(2047, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4054, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4054, strBuilder2.capacity());
      assertEquals(2047, strBuilder2.size());
      assertEquals(2047, strBuilder2.length());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(4054, strBuilder8.capacity());
      assertEquals(2047, strBuilder8.length());
      assertEquals(2047, strBuilder8.size());
      assertEquals(7, objectArray0.length);
      
      StringBuffer stringBuffer0 = new StringBuffer(" -~*ui'");
      assertNotNull(stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals(" -~*ui'", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder8.appendln(stringBuffer0, (-1229), 2026);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      strBuilder_StrBuilderWriter0.flush();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 0;
      StrBuilder strBuilder1 = new StrBuilder(0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, 'Y');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((long) 0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      
      Reader reader0 = strBuilder1.asReader();
      assertNotNull(reader0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(reader0.markSupported());
      assertTrue(reader0.ready());
      
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertNotNull(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("0\n", stringBuilder0.toString());
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList0.contains("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList0.contains("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterator<?>) listIterator0, "");
      assertNotNull(strBuilder3);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(29, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNull(strBuilder3.getNullText());
      assertEquals(29, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(29, strBuilder3.length());
      
      StrBuilder strBuilder4 = strBuilder0.minimizeCapacity();
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(29, strBuilder4.size());
      assertEquals(29, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(29, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(29, strBuilder4.size());
      assertEquals(29, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(29, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(29, strBuilder4.size());
      assertEquals(29, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(29, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1;
      StrBuilder strBuilder5 = strBuilder0.appendWithSeparators(objectArray0, "\u0005~t3<ZfA9n`W0/IY");
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(286, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(572, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(286, strBuilder0.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(572, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(286, strBuilder5.size());
      assertEquals(286, strBuilder5.length());
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      
      int int1 = 924;
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft(0, 924, 'y');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(925, strBuilder0.size());
      assertEquals(925, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1850, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1850, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(925, strBuilder1.length());
      assertEquals(925, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1850, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(925, strBuilder2.size());
      assertEquals(925, strBuilder2.length());
      
      boolean boolean0 = strBuilder0.contains((String) null);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(925, strBuilder0.size());
      assertEquals(925, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1850, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      char char0 = '8';
      int int2 = strBuilder0.indexOf('8');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(925, strBuilder0.size());
      assertEquals(925, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1850, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder3 = new StrBuilder((String) null);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(0L);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '^';
      charArray0[2] = '[';
      charArray0[3] = 'B';
      charArray0[4] = 'a';
      charArray0[5] = 'E';
      charArray0[6] = 'x';
      charArray0[7] = 'f';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0, 4, 4);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("aExf", stringBuilder0.toString());
      assertEquals("aExf", stringBuilder1.toString());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'5', '^', '[', 'B', 'a', 'E', 'x', 'f'}, charArray0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((Object) strBuilder0);
      assertNotNull(stringBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("aExf0\n", stringBuilder0.toString());
      assertEquals("aExf0\n", stringBuilder2.toString());
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuilder2);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals("aExf0\n", stringBuilder0.toString());
      assertEquals("aExf0\n", stringBuilder2.toString());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(8, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(8, strBuilder2.length());
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      // Undeclared exception!
      try { 
        strBuilder1.replace((StrMatcher) strMatcher_TrimMatcher0, ">sKz5kRWT,j2qId$ ", 114, 0, (-1345));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(391);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(391, strBuilder0.capacity());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'T';
      charArray0[2] = 'k';
      charArray0[3] = 'g';
      charArray0[4] = 'A';
      charArray0[5] = 'j';
      charArray0[6] = 'o';
      charArray0[7] = '@';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'g', 'T', 'k', 'g', 'A', 'j', 'o', '@'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_NoMatcher0, "Y^Jmd^oJ=C+");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(391, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(391, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst("");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(391, strBuilder0.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(391, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) strMatcher_NoMatcher0;
      objectArray0[1] = (Object) 'T';
      objectArray0[2] = (Object) strMatcher_NoMatcher0;
      objectArray0[3] = (Object) 'o';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "Y^Jmd^oJ=C+";
      objectArray0[6] = (Object) strBuilder1;
      objectArray0[7] = (Object) 'A';
      objectArray0[8] = (Object) 'k';
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators(objectArray0, "org.apache.commons.lang3.text.StrBuilder");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(796, strBuilder0.capacity());
      assertEquals(563, strBuilder0.length());
      assertEquals(563, strBuilder0.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(563, strBuilder3.length());
      assertEquals(796, strBuilder3.capacity());
      assertEquals(563, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(563, strBuilder2.size());
      assertEquals(563, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(796, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, objectArray0.length);
      
      int int0 = strBuilder0.lastIndexOf('E');
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(796, strBuilder0.capacity());
      assertEquals(563, strBuilder0.length());
      assertEquals(563, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 1565;
      StrBuilder strBuilder0 = new StrBuilder(1565);
      assertNotNull(strBuilder0);
      assertEquals(1565, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(1565, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1565, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      String string0 = "avG.Lhe+%\\Z)gQ[;,";
      StrBuilder strBuilder2 = strBuilder0.setNullText("avG.Lhe+%Z)gQ[;,");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(1565, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder0.getNullText());
      assertEquals(1565, strBuilder2.capacity());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      
      IntStream intStream0 = strBuilder2.chars();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(1565, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder0.getNullText());
      assertEquals(1565, strBuilder2.capacity());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder1.append('~');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(1565, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1565, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1565, strBuilder3.capacity());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder3.getNullText());
      assertEquals(6, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(6, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      
      int int1 = (-592);
      StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadLeft((Object) null, (-592), '9');
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(1565, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1565, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1565, strBuilder3.capacity());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder3.getNullText());
      assertEquals(6, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(6, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals("avG.Lhe+%Z)gQ[;,", strBuilder4.getNullText());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertEquals(1565, strBuilder4.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder3.substring(1565);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterable<?>) null, (String) null);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null);
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('L');
      assertNotNull(strMatcher1);
      
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Iterable<?>) null, "");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      
      StrMatcher strMatcher2 = StrMatcher.stringMatcher("r8T0ER3M!z7l6zL5!");
      assertNotNull(strMatcher2);
      
      StrBuilder strBuilder4 = strBuilder0.append((double) 0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      
      String string0 = strBuilder4.build();
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals("0.0", string0);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder0.deleteFirst((String) null);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder5.length());
      assertEquals(3, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      
      StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "os.arch");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder6.length());
      assertEquals(3, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertFalse(boolean0);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      
      boolean boolean1 = strBuilder2.equals(strBuilder4);
      assertFalse(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertTrue(boolean1);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      
      String string1 = strBuilder1.getNullText();
      assertNull(string1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder7 = strBuilder0.appendSeparator(", Length: ");
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(13, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(13, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      
      StrBuilder strBuilder8 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(18, strBuilder8.length());
      assertEquals(18, strBuilder8.size());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      // Undeclared exception!
      try { 
        strBuilder5.append(charArray0, 1898, 1898);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1898
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*ShW|.PlM@");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.leftString(Integer.MAX_VALUE);
      assertNotNull(string0);
      assertEquals("*ShW|.PlM@", string0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "*ShW|.PlM@";
      StrBuilder strBuilder1 = strBuilder0.append("*ShW|.PlM@", objectArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder1.length());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(20, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) null);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(21, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(42, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(17, strBuilder2.size());
      assertEquals(17, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      String string0 = null;
      StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(17, strBuilder2.size());
      assertEquals(17, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(17, strBuilder3.size());
      assertEquals(17, strBuilder3.length());
      
      Writer writer0 = strBuilder3.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(17, strBuilder2.size());
      assertEquals(17, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(17, strBuilder3.size());
      assertEquals(17, strBuilder3.length());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(17, strBuilder4.length());
      assertEquals(17, strBuilder4.size());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder5 = strBuilder4.trim();
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(16, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(16, strBuilder4.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(16, strBuilder5.size());
      assertEquals(16, strBuilder5.length());
      
      int int1 = 6;
      StrBuilder strBuilder6 = strBuilder4.append(6);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(17, strBuilder4.length());
      assertEquals(17, strBuilder4.size());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(17, strBuilder6.length());
      assertEquals(17, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      
      // Undeclared exception!
      try { 
        strMatcher0.isMatch(charArray0, 3954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendln("rn$e:");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("rn$e:"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(vector0);
      assertNotNull(linkedHashSet0);
      assertFalse(vector0.contains("rn$e:"));
      assertFalse(linkedHashSet0.contains("rn$e:"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedHashSet0);
      assertNotNull(treeSet0);
      assertFalse(vector0.contains("rn$e:"));
      assertFalse(linkedHashSet0.contains("rn$e:"));
      assertFalse(treeSet0.contains("rn$e:"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) treeSet0);
      assertNotNull(strBuilder2);
      assertFalse(vector0.contains("rn$e:"));
      assertFalse(linkedHashSet0.contains("rn$e:"));
      assertFalse(treeSet0.contains("rn$e:"));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("rn$e:", 1);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(11, strBuilder3.size());
      assertEquals(11, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, stringBuffer0.length());
      assertEquals("rn$e:\nrn$e:", stringBuffer0.toString());
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(862);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(862, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(862);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(862, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      StrBuilder strBuilder4 = strBuilder3.appendAll(integerArray0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(151, strBuilder0.length());
      assertEquals(151, strBuilder0.size());
      assertEquals(190, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(151, strBuilder1.size());
      assertEquals(190, strBuilder1.capacity());
      assertEquals(151, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(190, strBuilder4.capacity());
      assertEquals(151, strBuilder4.size());
      assertEquals(151, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(190, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(151, strBuilder3.size());
      assertEquals(151, strBuilder3.length());
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = (-4768);
      StrBuilder strBuilder0 = new StrBuilder((-4768));
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      HashSet<StrBuilder> hashSet0 = new HashSet<StrBuilder>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(strBuilder0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) hashSet0);
      assertNotNull(strBuilder1);
      assertFalse(hashSet0.contains(strBuilder0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      StrTokenizer strTokenizer0 = strBuilder1.asTokenizer();
      assertNotNull(strTokenizer0);
      assertFalse(hashSet0.contains(strBuilder0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft(0, 0, '0');
      assertNotNull(strBuilder2);
      assertFalse(hashSet0.contains(strBuilder0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      
      strBuilder0.size = (-2104);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals((-2104), strBuilder0.size());
      assertEquals((-2104), strBuilder0.length());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1506, (-4768), charArray0, 1506);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4768
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.stringMatcher("M?]bESD_=n");
      assertNotNull(strMatcher2);
      
      int int0 = strBuilder0.indexOf(strMatcher0, 0);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      int int1 = strBuilder0.indexOf(strMatcher0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      int int2 = (-65);
      String string0 = strBuilder0.midString(62, (-65));
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-2266.992F));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder1.insert((-1), 62);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v");
      assertNotNull(strBuilder0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      
      int int0 = 169;
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("v", 169);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      char char0 = '+';
      // Undeclared exception!
      try { 
        strBuilder0.getChars(554, (-1433), charArray0, 554);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1433
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2');
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder0.deleteFirst('2');
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(1, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      
      String string0 = strBuilder0.toString();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertEquals("\n", string0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '2');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(1210, strBuilder0.capacity());
      assertEquals(605, strBuilder0.size());
      assertEquals(605, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(605, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(605, strBuilder5.length());
      assertEquals(1210, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      
      StrBuilder strBuilder6 = strBuilder0.append((-176));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertEquals(1210, strBuilder0.capacity());
      assertEquals(609, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(609, strBuilder0.length());
      assertEquals(609, strBuilder6.length());
      assertEquals(609, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(1210, strBuilder6.capacity());
      
      String string1 = strBuilder4.rightString((-700));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertEquals("", string1);
      assertEquals(1210, strBuilder0.capacity());
      assertEquals(609, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(609, strBuilder0.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1210, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(609, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(609, strBuilder4.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1198, 1198);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1198
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(117);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(117, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(117, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder1.reverse();
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(117, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(117, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(117, strBuilder2.capacity());
      
      strBuilder_StrBuilderWriter0.write((char[]) null, 117, (-3048));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(117, strBuilder2.capacity());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) strBuilder3;
      objectArray0[1] = (Object) strBuilder3;
      objectArray0[2] = (Object) "Invalid startIndex: ";
      objectArray0[3] = (Object) strMatcher0;
      StrBuilder strBuilder4 = new StrBuilder(117);
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(117, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(117, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(117, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      
      objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "Invalid startIndex: ";
      objectArray0[7] = (Object) strBuilder_StrBuilderWriter0;
      objectArray0[8] = (Object) strMatcher0;
      StrBuilder strBuilder5 = strBuilder2.appendln("Invalid startIndex: ", objectArray0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(21, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(117, strBuilder2.capacity());
      assertEquals(21, strBuilder2.size());
      assertEquals(21, strBuilder2.length());
      assertEquals(117, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(21, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(21, strBuilder5.size());
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      strBuilder0.size = 6;
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('#', '#');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      
      String string0 = strBuilder1.toString();
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.append(6);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      
      boolean boolean0 = strBuilder2.equals((Object) strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertTrue(boolean0);
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder0.append((String) null, 6, 1077);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      boolean boolean1 = strBuilder2.equals(strBuilder3);
      assertTrue(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertTrue(boolean1);
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      StrBuilder strBuilder4 = strBuilder1.appendln(0L);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(9, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(9, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      
      StrBuilder strBuilder5 = strBuilder1.replaceAll("", "\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(9, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(9, strBuilder5.length());
      
      charArray0[4] = '#';
      StrBuilder strBuilder6 = strBuilder2.appendln(charArray0, 0, 0);
      assertNotNull(strBuilder6);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder3);
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(10, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(10, strBuilder6.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'#', '#', '#', '#', '#'}, charArray0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder6.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(10, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(10, strBuilder6.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'#', '#', '#', '#', '#'}, charArray0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1724, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, 1784L);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '~';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      charArray0[7] = 'i';
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'i', '~', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'i', '~', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 0, 'i');
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      
      StrBuilder strBuilder4 = strBuilder1.appendln((double) 0);
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      
      int int0 = strBuilder4.lastIndexOf('l', 103);
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertEquals((-1), int0);
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      
      StrBuilder strBuilder5 = strBuilder0.appendAll((Iterable<?>) null);
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder6 = strBuilder0.appendSeparator((String) null);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotNull(strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StringBuffer) null);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      
      String string0 = strBuilder0.toString();
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals("\n", string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(605, strBuilder0.size());
      assertEquals(605, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1210, strBuilder2.capacity());
      assertEquals(605, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(605, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder0.append(0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(606, strBuilder0.size());
      assertEquals(606, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1210, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(606, strBuilder3.length());
      assertEquals(606, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = strBuilder3.appendAll((Iterable<?>) null);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(606, strBuilder0.size());
      assertEquals(606, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1210, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(606, strBuilder3.length());
      assertEquals(606, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1210, strBuilder4.capacity());
      assertEquals(606, strBuilder4.size());
      assertEquals(606, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      String string1 = strBuilder1.rightString(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertEquals("", string1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1210, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(606, strBuilder0.size());
      assertEquals(606, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(606, strBuilder1.size());
      assertEquals(606, strBuilder1.length());
      assertEquals(1210, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%XX");
      assertNotNull(strBuilder0);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = ';';
      charArray0[3] = '`';
      charArray0[4] = 'm';
      charArray0[5] = 'X';
      charArray0[6] = 'n';
      charArray0[7] = 'G';
      charArray0[8] = '+';
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 2731, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(641);
      assertNotNull(strBuilder0);
      assertEquals(641, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(641, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[0];
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, (-1032));
      assertNotNull(list0);
      assertEquals(641, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = 0;
      int int1 = strBuilder0.validateRange(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(641, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 107;
      StrBuilder strBuilder0 = new StrBuilder(107);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(107, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      int int1 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(107, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      assertNotNull(strMatcher0);
      
      char char0 = 'w';
      StrMatcher strMatcher1 = StrMatcher.charMatcher('w');
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("");
      assertNotNull(strMatcher2);
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher3);
      assertSame(strMatcher3, strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = strBuilder0.indexOf(strMatcher0, (-2284));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(107, strBuilder0.capacity());
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(107, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(289);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.length());
      assertEquals(107, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher1);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(107, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertEquals(107, strBuilder3.capacity());
      assertEquals(9, strBuilder3.size());
      assertEquals(9, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder2.deleteCharAt(1027);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1027
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.size());
      assertEquals(89, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'P');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.size());
      assertEquals(89, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(57, strBuilder1.size());
      assertEquals(57, strBuilder1.length());
      assertEquals(89, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      char[] charArray1 = strBuilder1.getChars(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.size());
      assertEquals(89, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(57, strBuilder1.size());
      assertEquals(57, strBuilder1.length());
      assertEquals(89, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, charArray0.length);
      assertEquals(57, charArray1.length);
      assertArrayEquals(new char[] {'P', 'P', 'P'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder1.appendln(stringBuffer0, 619, 619);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(65);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(65, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("0H+6+X");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("0H+6+X", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(65, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("0H+6+X", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(65, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertNotNull(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals("0H+6+X", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(65, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "`a\"Y90+=f ;";
      StrBuilder strBuilder0 = new StrBuilder("`a\"Y90+=f ;");
      assertNotNull(strBuilder0);
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      
      int int0 = 1509;
      char char0 = '^';
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder1, 1509, '^');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(1520, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1520, strBuilder0.length());
      assertEquals(3040, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(1520, strBuilder2.size());
      assertEquals(3040, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1520, strBuilder2.length());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        strBuilder2.append("`a\"Y90+=f ;", 0, 1509);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 3;
      StrBuilder strBuilder0 = new StrBuilder(3);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertNotNull(strMatcher0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      int int1 = strBuilder0.indexOf(strMatcher0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.append((-1739.0));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.capacity());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'W';
      charArray0[4] = 'b';
      charArray0[5] = 'W';
      charArray0[6] = 'S';
      // Undeclared exception!
      try { 
        strBuilder1.appendln(charArray0, 3, (-1415));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1415
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(0, '_');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(52, strBuilder1.capacity());
      assertEquals(21, strBuilder1.size());
      assertEquals(21, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = new StrBuilder(".[");
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(34, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder0.append(strBuilder2, 0, 0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(34, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(52, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(21, strBuilder3.size());
      assertEquals(21, strBuilder3.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      // Undeclared exception!
      try { 
        strBuilder0.substring(915, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder0.appendNewLine();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      
      boolean boolean0 = strBuilder3.equals((Object) strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      strBuilder_StrBuilderReader0.reset();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[2];
      strBuilder_StrBuilderReader0.reset();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(0, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      charArray0[0] = ':';
      String string0 = strBuilder0.substring(0, 0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertEquals("", string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      charArray0[1] = ')';
      int int1 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(0, int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {':', ')'}, charArray0);
      
      int int2 = strBuilder2.indexOf("=.j", 1810);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals((-1), int2);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      String string1 = strBuilder0.getNullText();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNull(string1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {':', ')'}, charArray0);
      
      StrBuilder strBuilder4 = strBuilder2.appendNull();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(1, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-867));
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("2YZaq+Yp");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals("", stringBuilder0.toString());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'E';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'U', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V");
      assertNotNull(stringBuffer0);
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0);
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(19, stringBuffer1.length());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer1.toString());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      int int1 = strBuilder0.indexOf("x,OEdUuh6_<", 0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<");
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(strBuilder2);
      assertTrue(enumSet0.contains(locale_Category1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(119, strBuilder0.size());
      assertEquals(119, strBuilder0.length());
      assertEquals(238, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("':EFAEb.O7[9#R/\"[V", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertEquals(238, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(119, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(119, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, enumSet0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(238, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(119, strBuilder2.size());
      assertEquals(119, strBuilder2.length());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        strBuilder1.insert((-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'j';
      Iterable<Object> iterable0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "b0}RRkoCl[.=");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      
      int int0 = strBuilder0.indexOf('j', 815);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char char1 = '8';
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('j', '8');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      
      int int1 = 516;
      // Undeclared exception!
      try { 
        strBuilder2.insert(516, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 516
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(718);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(718, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((long) 718);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertEquals(718, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(718, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter";
      StrBuilder strBuilder2 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", objectArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(62, strBuilder0.size());
      assertEquals(62, strBuilder0.length());
      assertEquals(718, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(62, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(62, strBuilder1.length());
      assertEquals(718, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(62, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(718, strBuilder2.capacity());
      assertEquals(62, strBuilder2.length());
      assertEquals(1, objectArray0.length);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(62, strBuilder0.size());
      assertEquals(62, strBuilder0.length());
      assertEquals(718, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(62, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(62, strBuilder1.length());
      assertEquals(718, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(55, int0);
      assertEquals(62, strBuilder0.size());
      assertEquals(62, strBuilder0.length());
      assertEquals(718, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(62, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(62, strBuilder1.length());
      assertEquals(718, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator('d', 'Z');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(63, strBuilder0.size());
      assertEquals(63, strBuilder0.length());
      assertEquals(718, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(63, strBuilder1.length());
      assertEquals(63, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(718, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(63, strBuilder2.size());
      assertEquals(718, strBuilder2.capacity());
      assertEquals(63, strBuilder2.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(718, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(63, strBuilder3.size());
      assertEquals(63, strBuilder3.length());
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      strBuilder4.size = 55;
      assertEquals(32, strBuilder4.capacity());
      assertEquals(55, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(55, strBuilder4.size());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder4.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      char[] charArray0 = new char[1];
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      char char0 = '3';
      charArray0[0] = '3';
      strBuilder0.buffer = charArray0;
      assertEquals(1, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.append(3986.49F);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(14, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(14, strBuilder2.capacity());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(14, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(14, strBuilder2.capacity());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(14, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.size());
      
      boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(boolean0);
      assertEquals(14, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(14, strBuilder2.capacity());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(7, strBuilder3.length());
      assertEquals(14, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder0.append("Y~");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(9, strBuilder0.size());
      assertEquals(14, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder4.length());
      assertEquals(14, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(9, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      
      IntStream intStream0 = strBuilder2.codePoints();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(9, strBuilder0.size());
      assertEquals(14, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder2.size());
      assertEquals(14, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(724, 724);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst("");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder2, 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("&uiM4\"5g,@ppG");
      assertNotNull(strBuilder0);
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = new StrBuilder("line.separator");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "oIj {5P}vL!>";
      objectArray0[1] = (Object) "oIj {5P}vL!>";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "&uiM4\"5g,@ppG";
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) strBuilder1;
      StrBuilder strBuilder3 = strBuilder1.appendln("oIj {5P}vL!>", objectArray0);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder3.length());
      assertEquals(27, strBuilder3.size());
      assertEquals(46, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(6, objectArray0.length);
      
      StrBuilder strBuilder4 = strBuilder2.replaceFirst("'l+&r7", "line.separator");
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(27, strBuilder4.length());
      assertEquals(27, strBuilder4.size());
      assertEquals(45, strBuilder4.capacity());
      
      int int0 = (-3301);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-3301));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      boolean boolean0 = strBuilder0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals("0.0", stringBuilder0.toString());
      
      int int0 = strBuilder1.capacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      
      int int1 = 0;
      StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0, 0, 0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = strBuilder2.append(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      char char0 = '|';
      StrBuilder strBuilder5 = strBuilder1.replaceAll('A', '|');
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder5.size());
      assertEquals(3, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder5.validateRange(32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = 'B';
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'$', 'B'}, charArray0);
      
      StrMatcher strMatcher2 = StrMatcher.stringMatcher("Invalid startIndex: ");
      assertNotNull(strMatcher2);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals((-1), int0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder1.deleteCharAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}Ip)EDx!E");
      assertNotNull(strBuilder0);
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((char[]) null);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(10, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.clear();
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(41, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder0.appendNull();
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(41, strBuilder3.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder3.insert((-1874), (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1874
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F47@g0~|IH&t");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      char[] charArray0 = new char[2];
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      charArray0[0] = 'n';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'n';
      charArray1[1] = 'n';
      charArray1[2] = 'S';
      charArray1[3] = 'n';
      charArray1[4] = 'S';
      charArray1[5] = 'S';
      charArray1[6] = 'S';
      charArray1[7] = 'S';
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(strMatcher2.equals((Object)strMatcher1));
      assertNotNull(strMatcher2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(strMatcher2, strMatcher1);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'n', 'n', 'S', 'n', 'S', 'S', 'S', 'S'}, charArray1);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-1), 207, 'S');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(219, strBuilder0.size());
      assertEquals(438, strBuilder0.capacity());
      assertEquals(219, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(438, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(219, strBuilder1.size());
      assertEquals(219, strBuilder1.length());
      
      charArray0[1] = 'S';
      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);
      assertFalse(strMatcher3.equals((Object)strMatcher2));
      assertFalse(strMatcher3.equals((Object)strMatcher1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(strMatcher3);
      assertNotSame(strMatcher3, strMatcher2);
      assertNotSame(strMatcher3, strMatcher1);
      assertNotSame(charArray0, charArray1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'n', 'S'}, charArray0);
      
      StrMatcher strMatcher4 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher4);
      
      int int0 = strBuilder0.indexOf(strMatcher0, 0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(219, strBuilder0.size());
      assertEquals(438, strBuilder0.capacity());
      assertEquals(219, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.equals((Object) null);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(219, strBuilder0.size());
      assertEquals(438, strBuilder0.capacity());
      assertEquals(219, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'e';
      charArray0[2] = 'M';
      charArray0[3] = 'I';
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'I', 'e', 'M', 'I'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharSetMatcher0, (String) null);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'I', 'e', 'M', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("FXDeiw%p~");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      char char0 = '\"';
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      IntStream intStream0 = strBuilder0.codePoints();
      assertNotNull(intStream0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '\"'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(41, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '\"'}, charArray0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(41, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '\"'}, charArray0);
      
      objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[2] = (Object) "FXDeiw%p~";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        strBuilder1.append("FXDeiw%p~", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'p'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(116);
      assertNotNull(integer0);
      assertEquals(116, (int)integer0);
      
      integerArray0[0] = integer0;
      StrBuilder strBuilder1 = strBuilder0.appendAll(integerArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(28, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(28, strBuilder1.size());
      assertEquals(1, integerArray0.length);
      
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst(strMatcher0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(28, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(28, strBuilder2.size());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(28, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(28, strBuilder2.size());
      
      strBuilder_StrBuilderWriter0.write(116);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(29, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(29, strBuilder2.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'O';
      charArray0[2] = 'Y';
      charArray0[3] = 'k';
      strBuilder0.buffer = charArray0;
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder1.append("");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(29, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.capacity());
      assertEquals(29, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(29, strBuilder1.length());
      assertEquals(4, strBuilder3.capacity());
      assertEquals(29, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(29, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = "A";
      String string1 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer";
      int int0 = 34;
      boolean boolean0 = false;
      StrBuilder strBuilder1 = new StrBuilder("A");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder2.append(0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(3, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(3, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      
      char char0 = strBuilder3.charAt(0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals('A', char0);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(3, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(3, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder3.append((CharSequence) strBuilder2, 34, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = strBuilder0.length();
      assertEquals(0, int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      int int0 = (-2195);
      StrBuilder strBuilder1 = strBuilder0.append((-2195));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      long long0 = strBuilder_StrBuilderReader0.skip((-2195));
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0L, long0);
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-2195));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2195
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "Invalid length: ";
      StrBuilder strBuilder1 = new StrBuilder("Invalid length: ");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight((-3837), (-3837), 'G');
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder2.length());
      assertEquals(16, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(48, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      
      StrBuilder strBuilder3 = strBuilder1.append(446.287598279);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(29, strBuilder1.size());
      assertEquals(29, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(29, strBuilder3.size());
      assertEquals(29, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(48, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder1.clear();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(48, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strMatcher0);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      
      StrBuilder strBuilder5 = strBuilder0.replaceFirst(strMatcher0, "WkQ~#i}[72*VY?A$2SN");
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertNotNull(strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      
      int int0 = 8;
      // Undeclared exception!
      try { 
        strBuilder4.append(strBuilder5, 8, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = strBuilder0.midString(34, (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(">R<{");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.ensureCapacity(34);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(68, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(68, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(68, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'S';
      charArray0[2] = 'L';
      charArray0[3] = 'x';
      charArray0[4] = '`';
      charArray0[5] = '^';
      charArray0[6] = 'V';
      // Undeclared exception!
      try { 
        strBuilder2.getChars(3889, 0, charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e9EwrN.v3yrb0");
      assertNotNull(strBuilder0);
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.append(645);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 645);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertEquals(45, strBuilder2.capacity());
      assertEquals(21, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(21, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder0.deleteFirst(strMatcher0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(21, strBuilder3.length());
      assertEquals(21, strBuilder3.size());
      assertEquals(45, strBuilder3.capacity());
      
      StrBuilder strBuilder4 = strBuilder0.appendNull();
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder4.size());
      assertEquals(21, strBuilder4.length());
      assertEquals(45, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      
      int int0 = (-3235);
      StrBuilder strBuilder5 = strBuilder1.appendSeparator('7', (-3235));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertEquals(45, strBuilder1.capacity());
      assertEquals(21, strBuilder1.size());
      assertEquals(21, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(21, strBuilder5.size());
      assertEquals(21, strBuilder5.length());
      assertEquals(45, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      
      int int1 = 3;
      strBuilder0.validateIndex(3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      
      StrBuilder strBuilder6 = strBuilder1.appendln('y');
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertEquals(45, strBuilder1.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(45, strBuilder6.capacity());
      assertEquals(23, strBuilder6.size());
      assertEquals(23, strBuilder6.length());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        strBuilder5.insert((-407), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -407
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('M');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("M", stringWriter0.toString());
      assertEquals("M", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) strBuilder0, 0, 0);
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("M", stringWriter0.toString());
      assertEquals("M", stringWriter1.toString());
      assertEquals("M", stringWriter2.toString());
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("M", stringWriter0.toString());
      assertEquals("M", stringWriter1.toString());
      assertEquals("M", stringWriter2.toString());
      assertEquals("M", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      stringBuffer0.ensureCapacity(0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("M", stringWriter0.toString());
      assertEquals("M", stringWriter1.toString());
      assertEquals("M", stringWriter2.toString());
      assertEquals("M", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals("M", stringWriter0.toString());
      assertEquals("M", stringWriter1.toString());
      assertEquals("M", stringWriter2.toString());
      assertEquals("M", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.appendNewLine();
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(51, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(102, strBuilder3.capacity());
      assertEquals(51, strBuilder3.length());
      assertEquals(51, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = new StrBuilder((String) null);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strMatcher0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder strBuilder5 = strBuilder3.deleteFirst(strMatcher0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertEquals(51, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(102, strBuilder3.capacity());
      assertEquals(51, strBuilder3.length());
      assertEquals(51, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(51, strBuilder5.size());
      assertEquals(102, strBuilder5.capacity());
      assertEquals(51, strBuilder5.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, (String) null);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.appendln(0.0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      
      int int0 = 556;
      // Undeclared exception!
      try { 
        strBuilder1.substring(821, 556);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = (-1351);
      StrBuilder strBuilder0 = new StrBuilder((-1351));
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder0.substring(1949);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StringBuilder stringBuilder0 = new StringBuilder(4);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((-771.0));
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("0-771.0", stringBuilder0.toString());
      assertEquals("0-771.0", stringBuilder1.toString());
      assertEquals("0-771.0", stringBuilder2.toString());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '$';
      charArray0[2] = '?';
      charArray0[3] = 'N';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals("0-771.0k$?N", stringBuilder0.toString());
      assertEquals("0-771.0k$?N", stringBuilder1.toString());
      assertEquals("0-771.0k$?N", stringBuilder2.toString());
      assertEquals("0-771.0k$?N", stringBuilder3.toString());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'k', '$', '?', 'N'}, charArray0);
      
      StringBuilder stringBuilder4 = stringBuilder3.insert(2, charArray0);
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertEquals("0-k$?N771.0k$?N", stringBuilder0.toString());
      assertEquals("0-k$?N771.0k$?N", stringBuilder1.toString());
      assertEquals("0-k$?N771.0k$?N", stringBuilder2.toString());
      assertEquals("0-k$?N771.0k$?N", stringBuilder3.toString());
      assertEquals("0-k$?N771.0k$?N", stringBuilder4.toString());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'k', '$', '?', 'N'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuilder4);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("0-k$?N771.0k$?N", stringBuilder0.toString());
      assertEquals("0-k$?N771.0k$?N", stringBuilder1.toString());
      assertEquals("0-k$?N771.0k$?N", stringBuilder2.toString());
      assertEquals("0-k$?N771.0k$?N", stringBuilder3.toString());
      assertEquals("0-k$?N771.0k$?N", stringBuilder4.toString());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'k', '$', '?', 'N'}, charArray0);
      
      strBuilder_StrBuilderWriter0.write("'fe:RqN$");
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      
      strBuilder_StrBuilderWriter0.write("");
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      
      StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null, (-1729), (-1729));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder0.setNewLineText("'fe:RqN$");
      assertNotNull(strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNull(strBuilder3.getNullText());
      assertEquals(23, strBuilder3.size());
      assertEquals("'fe:RqN$", strBuilder3.getNewLineText());
      assertEquals(23, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("'fe:RqN$", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder3.subSequence((-1729), (-3524));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1729
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F9LF\"oZa]");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      
      int int0 = (-1877);
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity((-1877));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
      assertEquals(9, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("F9LF\"oZa]", "F9LF\"oZa]");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder2.size());
      assertEquals(18, strBuilder2.length());
      assertEquals(41, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      String string0 = strBuilder0.build();
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals("F9LF\"oZa]F9LF\"oZa]", string0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder1);
      assertNotNull(stringBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertEquals("F9LF\"oZa]F9LF\"oZa]", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) (-1877));
      assertNotNull(stringBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0", stringBuilder0.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0", stringBuilder1.toString());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) locale_Category0);
      assertNotNull(stringBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAY", stringBuilder0.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAY", stringBuilder1.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAY", stringBuilder2.toString());
      
      StringBuilder stringBuilder3 = stringBuilder2.append("F9LF\"oZa]");
      assertNotNull(stringBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]", stringBuilder0.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]", stringBuilder1.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]", stringBuilder2.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]", stringBuilder3.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer("jmw&Au,!");
      assertNotNull(stringBuffer0);
      assertEquals("jmw&Au,!", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      
      StringBuilder stringBuilder4 = stringBuilder3.append(stringBuffer0);
      assertNotNull(stringBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(41, strBuilder1.capacity());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder0.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder1.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder2.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder3.toString());
      assertEquals("jmw&Au,!", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder4.toString());
      
      StrBuilder strBuilder3 = strBuilder2.append((CharSequence) stringBuilder4);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(136, strBuilder0.capacity());
      assertEquals(68, strBuilder0.size());
      assertEquals(68, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(136, strBuilder1.capacity());
      assertEquals(68, strBuilder1.size());
      assertEquals(68, strBuilder1.length());
      assertEquals(136, strBuilder2.capacity());
      assertEquals(68, strBuilder2.size());
      assertEquals(68, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder0.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder1.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder2.toString());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder3.toString());
      assertEquals("jmw&Au,!", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      assertEquals("F9LF\"oZa]F9LF\"oZa]-1877.0DISPLAYF9LF\"oZa]jmw&Au,!", stringBuilder4.toString());
      assertEquals(68, strBuilder3.length());
      assertEquals(136, strBuilder3.capacity());
      assertEquals(68, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      
      StrBuilder strBuilder4 = strBuilder2.append((StringBuffer) null);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(136, strBuilder0.capacity());
      assertEquals(68, strBuilder0.size());
      assertEquals(68, strBuilder0.length());
      assertEquals(136, strBuilder2.capacity());
      assertEquals(68, strBuilder2.size());
      assertEquals(68, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(68, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(136, strBuilder4.capacity());
      assertEquals(68, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1596));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1596
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(919);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(919, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      int int0 = strBuilder0.lastIndexOf("+7zRuHp;`0", 919);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(919, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = " in an array of ";
      StrBuilder strBuilder0 = new StrBuilder(" in an array of ");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendln(" in an array of ", 0, 0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      String string1 = strBuilder1.substring(0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(" in an array of \n", string1);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      
      int int1 = (-860);
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(" in an array of \n", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder1.insert((-860), (Object) " in an array of ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -860
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      int int0 = (-1775);
      // Undeclared exception!
      try { 
        strBuilder0.substring((-1775));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1775
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "htoXU5/8-3A+";
      StrBuilder strBuilder0 = new StrBuilder("htoXU5/8-3A+");
      assertNotNull(strBuilder0);
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(12, strBuilder1.size());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNotNull(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(12, charArray0.length);
      
      char char0 = 'X';
      StrBuilder strBuilder2 = strBuilder1.appendln('X');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(44, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(14, strBuilder2.length());
      assertEquals(14, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      
      int int0 = 8;
      StrBuilder strBuilder3 = strBuilder1.setLength(8);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(8, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(44, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(44, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(8, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(44, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      assertNotNull(charBuffer0);
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(8, int1);
      assertEquals(8, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(44, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      
      strBuilder_StrBuilderReader0.reset();
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(8, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(8, strBuilder1.length());
      assertEquals(44, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 0, 3125);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 3125
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) locale_Category0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(72, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertEquals(36, strBuilder1.size());
      assertEquals(36, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(72, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      char char0 = '\"';
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, '\"');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(72, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.size());
      assertEquals(36, strBuilder0.length());
      assertEquals(36, strBuilder2.size());
      assertEquals(36, strBuilder2.length());
      assertEquals(72, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-2049), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      char char0 = 's';
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('s');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher1);
      
      int int0 = 0;
      StrBuilder strBuilder2 = strBuilder0.replace(strMatcher0, "", 0, 0, 116);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      
      StrMatcher strMatcher2 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher2);
      assertSame(strMatcher2, strMatcher1);
      
      // Undeclared exception!
      try { 
        strBuilder2.insert(2545, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2545
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "length must be valid";
      StrBuilder strBuilder1 = new StrBuilder("length must be valid");
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertEquals(52, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder1.append((CharSequence) strBuilder0, 187, 187);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("T0]6[>UOMVX");
      assertNotNull(strBuilder0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals("Invalid startIndex: ", strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertEquals(43, strBuilder1.capacity());
      assertEquals("Invalid startIndex: ", strBuilder1.getNewLineText());
      
      int int0 = 554;
      int int1 = (-1164);
      // Undeclared exception!
      try { 
        strBuilder1.append("T0]6[>UOMVX", 554, (-1164));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(706);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertNotNull(intStream0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.midString(0, 34);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("", strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(706, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(706, strBuilder1.capacity());
      assertEquals("", strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      
      int int0 = 102;
      // Undeclared exception!
      try { 
        strBuilder1.insert(102, (float) 706);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 102
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = '$';
      charArray0[2] = 'R';
      charArray0[3] = ';';
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, (-758), (-758));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -758
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-620));
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.getNewLineText();
      assertNull(string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1L);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertSame(strBuilder0, strBuilder1);
      assertTrue(boolean0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains((-620)));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains((-620)));
      
      StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0);
      assertNotNull(strBuilder2);
      assertFalse(treeSet0.contains((-620)));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0);
      assertNotNull(strBuilder3);
      assertFalse(treeSet0.contains((-620)));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      
      boolean boolean1 = strBuilder2.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(treeSet0.contains((-620)));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(boolean1);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder4 = strBuilder2.deleteAll('J');
      assertNotNull(strBuilder4);
      assertFalse(treeSet0.contains('J'));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(5, strBuilder4.size());
      assertEquals(5, strBuilder4.length());
      
      StrBuilder strBuilder5 = strBuilder1.append(1L);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(6, strBuilder5.size());
      assertEquals(6, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5);
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertSame(writer0, strBuilder_StrBuilderWriter0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(12, strBuilder5.size());
      assertEquals(12, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      
      strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v");
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(26, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      
      boolean boolean2 = strBuilder5.isEmpty();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(boolean2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(26, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(26, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(26, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(26, strBuilder5.size());
      assertEquals(26, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      
      StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\');
      assertNotNull(strBuilder6);
      assertFalse(treeSet0.contains('J'));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(26, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(26, strBuilder6.size());
      assertEquals(26, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(26, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(26, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(26, strBuilder4.length());
      assertEquals(26, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      
      StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u");
      assertNotNull(strBuilder7);
      assertFalse(treeSet0.contains('J'));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(26, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(26, strBuilder6.size());
      assertEquals(26, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(26, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(26, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(26, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(26, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(26, strBuilder4.length());
      assertEquals(26, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder2);
      assertNotNull(stringBuffer0);
      assertFalse(treeSet0.contains('J'));
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(26, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertEquals("1\n1\n\n11\n1\n\n1?NYmW7afS>c]@v", stringBuffer0.toString());
      assertEquals(26, stringBuffer0.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(26, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(26, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      StringBuffer stringBuffer1 = stringBuffer0.append(1.0F);
      assertNotNull(stringBuffer1);
      assertFalse(treeSet0.contains('J'));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(26, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertEquals("1\n1\n\n11\n1\n\n1?NYmW7afS>c]@v1.0", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertEquals(29, stringBuffer1.length());
      assertEquals("1\n1\n\n11\n1\n\n1?NYmW7afS>c]@v1.0", stringBuffer1.toString());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(26, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(26, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0);
      assertNotNull(strBuilder8);
      assertFalse(treeSet0.contains('J'));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(110, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(110, strBuilder1.capacity());
      assertEquals(55, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(55, strBuilder1.size());
      assertEquals("1\n1\n\n11\n1\n\n1?NYmW7afS>c]@v1.0", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(110, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertEquals(55, strBuilder8.size());
      assertEquals(55, strBuilder8.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(55, strBuilder2.length());
      assertEquals(55, strBuilder2.size());
      assertEquals(110, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder4.subSequence((-900), (-620));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -900
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5d}%CW)%");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Invalid startIndex: ", strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      
      int int0 = 537;
      // Undeclared exception!
      try { 
        strBuilder1.replace(537, 166, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst("5p&H0$B\".@l3|+@o", "");
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      
      StringBuffer stringBuffer0 = new StringBuffer(4);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StrBuilder strBuilder3 = strBuilder1.appendln(stringBuffer0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "OS/2";
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("OS/2");
      assertNotNull(strMatcher_StringMatcher0);
      
      String string1 = "java.awt.printerjob";
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.awt.printerjob");
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_StringMatcher0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(5, (Object) "OS/2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(416, 'n');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(416, strBuilder0.size());
      assertEquals(416, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(832, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(416, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(832, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(416, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("/UzT$c0PraLRBN}");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '%';
      charArray0[2] = ':';
      charArray0[3] = 'y';
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 458, 458);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 458
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1580);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1580, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1580, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 31;
      strBuilder_StrBuilderWriter0.write(31);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      // Undeclared exception!
      try { 
        strBuilder0.subSequence((-1997), (-1997));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1997
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(97);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(97, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(0L);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(97, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 102;
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertNotNull(strBuilder0);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      IntStream intStream0 = strBuilder0.chars();
      assertNotNull(intStream0);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      Writer writer0 = strBuilder_StrBuilderWriter0.append('H');
      assertNotNull(writer0);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertSame(writer0, strBuilder_StrBuilderWriter0);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.append((float) 102);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder0, 102, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -103
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'R', 'L', 'L'}, charArray0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'L';
      charArray1[1] = 'L';
      charArray1[2] = 'L';
      charArray1[3] = '6';
      StrBuilder strBuilder1 = strBuilder0.append(charArray1, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'L', 'L', 'L', '6'}, charArray1);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(352, charArray1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 352
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3235);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(3235, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'4'}, charArray0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 656);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(3235, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'4'}, charArray0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateRange((-495), (-495));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -495
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2g");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      
      int int0 = (-1287);
      char[] charArray0 = new char[7];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      assertFalse(strMatcher0.equals((Object)strMatcher_CharSetMatcher0));
      assertNotNull(strMatcher0);
      assertNotSame(strMatcher0, strMatcher_CharSetMatcher0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrMatcher strMatcher1 = StrMatcher.charSetMatcher("2g");
      assertFalse(strMatcher1.equals((Object)strMatcher_CharSetMatcher0));
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher_CharSetMatcher0);
      assertNotSame(strMatcher1, strMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertFalse(strMatcher_CharSetMatcher0.equals((Object)strMatcher0));
      assertFalse(strMatcher_CharSetMatcher0.equals((Object)strMatcher1));
      assertNotSame(strMatcher_CharSetMatcher0, strMatcher0);
      assertNotSame(strMatcher_CharSetMatcher0, strMatcher1);
      assertFalse(boolean0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[0] = 'n';
      charArray0[1] = '=';
      charArray0[2] = '$';
      charArray0[3] = 'W';
      charArray0[4] = 'X';
      charArray0[5] = 'j';
      charArray0[6] = 'Q';
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-1287), (-1287), charArray0, (-1287));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1287
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = 'L';
      charArray0[2] = 'v';
      charArray0[3] = 't';
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'7', 'L', 'v', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 9, '>');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(9, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll('F');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder2.append('F');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(10, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(10, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(10, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(">>>>>>>>>F", string0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder4 = strBuilder0.replaceFirst((String) null, (String) null);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(10, strBuilder4.size());
      assertEquals(10, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      
      strBuilder_StrBuilderWriter0.write(9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      
      StrBuilder strBuilder5 = strBuilder1.appendPadding((-414), '=');
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(11, strBuilder5.length());
      assertEquals(11, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      
      StrBuilder strBuilder6 = strBuilder1.append(">>>>>>>>>F");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(21, strBuilder1.size());
      assertEquals(21, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(21, strBuilder6.size());
      assertEquals(21, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(' ', (-2561));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.text.StrTokenizer";
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrTokenizer");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(74, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.length());
      
      int int0 = 31;
      char char0 = '{';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "org.apache.commons.lang3.text.StrTokenizer", 31, '{');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(74, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(73, strBuilder0.length());
      assertEquals(73, strBuilder0.size());
      assertEquals(73, strBuilder1.length());
      assertEquals(74, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(73, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append(1613.02F);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(80, strBuilder0.length());
      assertEquals(80, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(160, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(160, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(80, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(80, strBuilder2.size());
      
      StrBuilder strBuilder3 = strBuilder0.append(102);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(83, strBuilder0.length());
      assertEquals(83, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(160, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(83, strBuilder3.size());
      assertEquals(83, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(160, strBuilder3.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder3.validateIndex(102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 102
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = (-1890);
      StrBuilder strBuilder0 = new StrBuilder((-1890));
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1890), 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1890
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1073, (long) 1073);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1073
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F");
      assertNotNull(strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('e');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.insert(0, "F");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll('#');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(33, strBuilder3.capacity());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder strBuilder4 = strBuilder0.append(598L);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertEquals(5, strBuilder4.size());
      
      String string0 = strBuilder0.toString();
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("FF598", string0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder4.reverse();
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(33, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertEquals(5, strBuilder4.size());
      assertEquals(5, strBuilder5.length());
      assertEquals(5, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(33, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'K';
      charArray0[3] = 'e';
      int int0 = strBuilder2.indexOf((StrMatcher) null);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(5, int1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'8', '9', '5', 'F', 'F', 'e', 'e', 'e'}, charArray0);
      
      int int2 = 1354;
      strBuilder_StrBuilderReader0.mark(1354);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(33, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.build();
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(strMatcher0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertNotNull(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln('h');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      
      int int0 = 0;
      StrBuilder strBuilder3 = strBuilder0.deleteCharAt(0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      
      int int1 = strBuilder3.capacity();
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(32, int1);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      
      boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertFalse(boolean0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrMatcher strMatcher1 = StrMatcher.stringMatcher("");
      assertNotNull(strMatcher1);
      assertSame(strMatcher1, strMatcher0);
      
      // Undeclared exception!
      try { 
        strBuilder1.subSequence(44, 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 6
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3163);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(3163, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln("");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3163, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3163, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-3417.2957F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3163, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(12, strBuilder2.length());
      assertEquals(3163, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      
      int int0 = strBuilder2.indexOf("3+r3jcbdAXt1x", 3163);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3163, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(12, strBuilder2.length());
      assertEquals(3163, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator('s');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3163, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3163, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(13, strBuilder3.length());
      assertEquals(13, strBuilder3.size());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 'H';
      ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(strBuilder1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>(arrayList0);
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains(strBuilder1));
      assertFalse(arrayList1.contains(3163));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      ListIterator<Object> listIterator0 = arrayList1.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(strBuilder1));
      assertFalse(arrayList1.contains(3163));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      StrBuilder strBuilder4 = strBuilder0.appendAll((Iterator<?>) listIterator0);
      assertNotNull(strBuilder4);
      assertFalse(arrayList0.contains(strBuilder1));
      assertFalse(arrayList1.contains(3163));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3163, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3163, strBuilder4.capacity());
      assertEquals(13, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(13, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 's';
      StrBuilder strBuilder5 = strBuilder1.append(charArray0);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(3163, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(3163, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(20, strBuilder5.size());
      assertEquals(20, strBuilder5.length());
      assertEquals(20, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(20, strBuilder1.size());
      assertEquals(3163, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'s', 'H', 's', 's', 's', 's', 's'}, charArray0);
      
      StrBuilder strBuilder6 = strBuilder0.appendln("aHPcrO", 5, 0);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder0.length());
      assertEquals(3163, strBuilder0.capacity());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder6.size());
      assertEquals(3163, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(21, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder5, 0, 's');
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder0.length());
      assertEquals(3163, strBuilder0.capacity());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(3163, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(21, strBuilder5.size());
      assertEquals(21, strBuilder5.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertEquals(3163, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(21, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(3163, strBuilder7.capacity());
      assertEquals(21, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'s', 'H', 's', 's', 's', 's', 's'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder3.append(stringBuffer0, 3062, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('a');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator('a');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      
      char char0 = '0';
      StrBuilder strBuilder4 = strBuilder1.replaceAll('0', '0');
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      
      int int1 = (-604);
      int int2 = (-611);
      // Undeclared exception!
      try { 
        strBuilder4.substring((-604), (-611));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -604
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(102);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, '?');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(102));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(102));
      
      StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0);
      assertNotNull(strBuilder2);
      assertFalse(treeSet0.contains(102));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[2];
      ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(strBuilder2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = treeSet0.retainAll(arrayList0);
      assertFalse(treeSet0.contains(102));
      assertFalse(arrayList0.contains(strBuilder2));
      assertFalse(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      charArray0[0] = '?';
      charArray0[1] = '?';
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      
      int int0 = strBuilder1.indexOf((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, int0);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher((char[]) null);
      assertNotNull(strMatcher0);
      
      boolean boolean1 = strBuilder2.contains(strMatcher0);
      assertTrue(boolean1 == boolean0);
      assertFalse(treeSet0.contains('?'));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(boolean1);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(102, strBuilder2.size());
      assertEquals(102, strBuilder2.length());
      
      int int1 = strBuilder_StrBuilderReader0.read();
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(63, int1);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      boolean boolean2 = strBuilder_StrBuilderReader0.markSupported();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(boolean2);
      assertEquals(102, strBuilder0.capacity());
      assertEquals(102, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(102, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(102, strBuilder1.size());
      assertEquals(102, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight((Object) iterator0, 102, '?');
      assertNotNull(strBuilder3);
      assertFalse(treeSet0.contains('?'));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(408, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(204, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(204, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(204, strBuilder1.size());
      assertEquals(408, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(408, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(204, strBuilder3.size());
      assertEquals(204, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(204, strBuilder2.size());
      assertEquals(204, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(408, strBuilder2.capacity());
      
      strBuilder_StrBuilderReader0.mark(63);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(408, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(204, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(204, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(204, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(204, strBuilder1.size());
      assertEquals(408, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator("{8UA", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertNotNull(strBuilder4);
      assertFalse(treeSet0.contains('?'));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertEquals(408, strBuilder0.capacity());
      assertEquals(208, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(208, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(208, strBuilder1.length());
      assertEquals(408, strBuilder1.capacity());
      assertEquals(208, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(208, strBuilder4.size());
      assertEquals(208, strBuilder4.length());
      assertEquals(408, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(208, strBuilder2.size());
      assertEquals(208, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(408, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2134);
      assertNotNull(strBuilder0);
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) null, "");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(2134, strBuilder1.capacity());
      
      int int0 = strBuilder0.indexOf("");
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(2134, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder2.appendAll((Iterator<?>) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(2134, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(2134, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      CharSequence charSequence0 = strBuilder2.subSequence(0, 0);
      assertNotNull(charSequence0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals("", charSequence0);
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(2134, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      String string0 = strBuilder0.getNullText();
      assertNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2134, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      Stack<StrBuilder> stack0 = new Stack<StrBuilder>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(strBuilder0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>(stack0);
      assertNotNull(linkedHashSet0);
      assertFalse(stack0.contains(strBuilder0));
      assertFalse(linkedHashSet0.contains(strBuilder0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0);
      assertNotNull(strBuilder1);
      assertFalse(stack0.contains(strBuilder1));
      assertFalse(linkedHashSet0.contains(strBuilder1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      
      int int0 = (-1);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.append(4240);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder1.insert(0, 1278.456F);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(14, strBuilder3.size());
      assertEquals(14, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('\'');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst("Rz4WmT&");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(52, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(20, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(238);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(238, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('s');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(238, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(238, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 847, '{');
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotNull(strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertEquals(1696, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(848, strBuilder0.size());
      assertEquals(848, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1696, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(848, strBuilder3.size());
      assertEquals(848, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder strBuilder4 = strBuilder0.appendln((Object) null);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotNull(strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(1696, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(849, strBuilder0.size());
      assertEquals(849, strBuilder0.length());
      assertEquals(849, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(1696, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(849, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      ArrayDeque<StrBuilder> arrayDeque0 = new ArrayDeque<StrBuilder>(847);
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(strBuilder1));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      StrBuilder strBuilder5 = strBuilder3.appendWithSeparators((Iterable<?>) arrayDeque0, "");
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotNull(strBuilder5);
      assertFalse(arrayDeque0.contains(strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertEquals(1696, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(849, strBuilder0.size());
      assertEquals(849, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1696, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(849, strBuilder3.length());
      assertEquals(849, strBuilder3.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(1696, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(849, strBuilder5.length());
      assertEquals(849, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      assertNotNull(strMatcher_StringMatcher0);
      
      int int0 = strBuilder4.lastIndexOf((StrMatcher) strMatcher_StringMatcher0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertEquals((-1), int0);
      assertEquals(1696, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(849, strBuilder0.size());
      assertEquals(849, strBuilder0.length());
      assertEquals(849, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(1696, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(849, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder5.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1so6^[^z!mYS2");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(45, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      
      String string0 = strBuilder0.getNullText();
      assertNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = new StrBuilder("1so6^[^z!mYS2");
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertEquals(13, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StrBuilder strBuilder3 = strBuilder0.appendln(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(32, strBuilder0.length());
      assertEquals(13, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(45, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.length());
      assertEquals(32, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadRight((-364), (-364), ';');
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(32, strBuilder0.length());
      assertEquals(13, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(45, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.length());
      assertEquals(32, strBuilder3.size());
      assertEquals(45, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.length());
      assertEquals(32, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      
      StrBuilder strBuilder5 = strBuilder3.appendln(true);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.size());
      assertEquals(37, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(45, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(37, strBuilder3.size());
      assertEquals(37, strBuilder3.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(37, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(45, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(37, strBuilder5.size());
      
      StrBuilder strBuilder6 = strBuilder3.appendln(strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertEquals(75, strBuilder0.size());
      assertEquals(75, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(148, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(75, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(75, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(148, strBuilder3.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(148, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(75, strBuilder6.size());
      assertEquals(75, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = (-4136);
      StrBuilder strBuilder0 = new StrBuilder((-4136));
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-4136));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) "_D]5>#kw<b6p@SuO");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      Writer writer0 = strBuilder1.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll("", "");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(27, strBuilder2.length());
      assertEquals(27, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      
      String string0 = strBuilder2.midString((-4136), (-4136));
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals("", string0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(27, strBuilder2.length());
      assertEquals(27, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      
      StrBuilder strBuilder3 = strBuilder2.append(true);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(31, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(31, strBuilder2.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(31, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(31, strBuilder3.size());
      
      // Undeclared exception!
      try { 
        strBuilder3.substring((-730), 938);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -730
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) strBuilder0;
      // Undeclared exception!
      try { 
        strBuilder0.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      String string0 = "iVO";
      StrMatcher strMatcher1 = StrMatcher.stringMatcher("iVO");
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("x~DPyO[EG\"4:");
      assertNotNull(strMatcher2);
      
      StrMatcher strMatcher3 = StrMatcher.charSetMatcher("iVO");
      assertFalse(strMatcher3.equals((Object)strMatcher2));
      assertNotNull(strMatcher3);
      assertNotSame(strMatcher3, strMatcher2);
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = new StrBuilder(0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrMatcher strMatcher4 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher4);
      assertSame(strMatcher4, strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst(strMatcher4, (String) null);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotNull(strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strMatcher4, strMatcher0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int1 = strBuilder_StrBuilderReader0.read();
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(int1 == int0);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertEquals((-1), int1);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1), "%;$c19wXmzsg6Q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append((-1230L));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      
      int int0 = 108;
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = '<';
      charArray0[2] = '%';
      charArray0[3] = 'A';
      charArray0[4] = '>';
      charArray0[5] = '<';
      charArray0[6] = ']';
      charArray0[7] = '%';
      charArray0[8] = 'b';
      // Undeclared exception!
      try { 
        strBuilder1.insert(108, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.midString(34, (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(">R<{");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[2] = 'L';
      charArray0[3] = 'x';
      charArray0[4] = '`';
      charArray0[5] = '^';
      charArray0[6] = 'V';
      // Undeclared exception!
      try { 
        strBuilder1.getChars(3889, 0, charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6H96d8Y[BQHa,");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("e2CwGXskc[ISvOj.7");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("e2CwGXskc[ISvOj.7", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder1.length());
      assertEquals(13, strBuilder1.size());
      assertEquals("e2CwGXskc[ISvOj.7", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(45, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "e2CwGXskc[ISvOj.7";
      StrBuilder strBuilder2 = strBuilder1.appendln("6H96d8Y[BQHa,", objectArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("e2CwGXskc[ISvOj.7", strBuilder0.getNullText());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals("e2CwGXskc[ISvOj.7", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(45, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("e2CwGXskc[ISvOj.7", strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, objectArray0.length);
      
      int int0 = strBuilder2.indexOf("", (-1613));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(0, int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("e2CwGXskc[ISvOj.7", strBuilder0.getNullText());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals("e2CwGXskc[ISvOj.7", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(45, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertEquals(45, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("e2CwGXskc[ISvOj.7", strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-466));
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";
      objectArray0[1] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";
      StrBuilder strBuilder1 = strBuilder0.append("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", objectArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(114, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(57, strBuilder1.size());
      assertEquals(57, strBuilder1.length());
      assertEquals(114, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      boolean boolean0 = strBuilder0.contains('5');
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(114);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(114, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = new StrBuilder(4);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '5';
      charArray0[2] = '\"';
      charArray0[3] = 'i';
      charArray0[4] = 'K';
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, 5017, charArray0, 5017);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5017
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2137));
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 115;
      // Undeclared exception!
      try { 
        strBuilder0.charAt(115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 115
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '\\';
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'$', '\\'}, charArray0);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('#', 0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'$', '\\'}, charArray0);
      
      boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: ");
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator("Invalid startIndex: ", "Invalid startIndex: ");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder3.length());
      assertEquals(23, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("}G8MML|D5VDG@T^7j", "Invalid length: ");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.getNullText();
      assertNull(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      int int0 = 802;
      String string1 = strBuilder0.midString(802, 802);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      int int1 = strBuilder0.indexOf('&', 4814);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      int int2 = strBuilder0.lastIndexOf('&', (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      String string2 = "p*";
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("p*");
      assertNotNull(strMatcher_StringMatcher0);
      
      int int3 = (-933);
      // Undeclared exception!
      try { 
        strBuilder0.replace((StrMatcher) strMatcher_StringMatcher0, (String) null, (-1), (-933), 4814);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      strBuilder_StrBuilderWriter0.write((-1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";
      StrBuilder strBuilder2 = strBuilder0.appendAll(stringArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(28, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(28, strBuilder2.size());
      assertEquals(1, stringArray0.length);
      
      int int0 = strBuilder1.lastIndexOf('A');
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(28, strBuilder1.size());
      assertEquals(28, strBuilder1.length());
      
      StrBuilder strBuilder3 = strBuilder0.replaceAll((StrMatcher) null, "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(28, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(28, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(4, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      
      int int0 = strBuilder0.indexOf('2');
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(4, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-565));
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = strBuilder0.midString((-565), 5224);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = ']';
      charArray0[2] = 'p';
      charArray0[3] = 'x';
      charArray0[4] = 'f';
      charArray0[5] = 'r';
      // Undeclared exception!
      try { 
        strBuilder0.insert(5224, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5224
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%.uP-XC6m9");
      assertNotNull(strBuilder0);
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNotNull(stringBuffer0);
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals("%.uP-XC6m9", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(21, strBuilder0.size());
      assertEquals(21, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("%.uP-XC6m9", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(42, strBuilder1.capacity());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '_';
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, 546, charArray0, 546);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 546
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(6);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(6);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(6, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(6, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      int int0 = strBuilder2.indexOf((StrMatcher) strMatcher_TrimMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals((-1), int0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(6, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-1));
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(int0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) arrayDeque0);
      assertNotNull(strBuilder3);
      assertFalse(arrayDeque0.contains(int0));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(6, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(6, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      StringBuilder stringBuilder0 = new StringBuilder("v@1?:{");
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1), (CharSequence) strBuilder2, (-1), 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      StringBuffer stringBuffer0 = strBuilder1.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string0 = strBuilder0.toString();
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals("", string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder1.isEmpty();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      int int0 = (-302);
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-302));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -302
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5T]_m");
      assertNotNull(strBuilder0);
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder1 = strBuilder0.append((-689.841F));
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      
      long long0 = strBuilder_StrBuilderReader0.skip(0L);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0L, long0);
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      long long1 = strBuilder_StrBuilderReader0.skip(310L);
      assertFalse(long1 == long0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(13L, long1);
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder2 = strBuilder0.append(1.0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(37, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder2.size());
      assertEquals(37, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(16, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        strBuilder2.append(stringBuffer0, (-611), (-713));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(575);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.appendln((-1956.771F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(14, strBuilder2.length());
      assertEquals(14, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((-634), Integer.MAX_VALUE, 'P');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.build();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder1.append(stringBuffer0, 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      long long0 = strBuilder_StrBuilderReader0.skip(351L);
      assertEquals(0L, long0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      long long0 = strBuilder_StrBuilderReader0.skip(0L);
      assertEquals(0L, long0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertFalse(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(51, strBuilder0.size());
      assertEquals(51, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertEquals(51, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder2 = strBuilder1.append((long) 0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(52, strBuilder0.size());
      assertEquals(52, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(52, strBuilder1.length());
      assertEquals(52, strBuilder1.size());
      assertEquals(102, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(52, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(102, strBuilder2.capacity());
      assertEquals(52, strBuilder2.size());
      assertEquals(1, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder2.appendln('H');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(54, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(54, strBuilder1.length());
      assertEquals(54, strBuilder1.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(102, strBuilder2.capacity());
      assertEquals(54, strBuilder2.size());
      assertEquals(54, strBuilder2.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(54, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(54, strBuilder3.length());
      assertEquals(102, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, objectArray0.length);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      StrBuilder strBuilder4 = strBuilder1.appendAll(objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(objectArray0, objectArray1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(54, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(54, strBuilder1.length());
      assertEquals(54, strBuilder1.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(102, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(54, strBuilder4.length());
      assertEquals(54, strBuilder4.size());
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      StrBuilder strBuilder5 = strBuilder4.deleteCharAt(0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(objectArray0, objectArray1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(objectArray1, objectArray0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertEquals(53, strBuilder0.size());
      assertEquals(53, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(53, strBuilder1.length());
      assertEquals(102, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(53, strBuilder1.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(102, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(53, strBuilder4.length());
      assertEquals(53, strBuilder4.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(102, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(53, strBuilder5.length());
      assertEquals(53, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      // Undeclared exception!
      try { 
        strBuilder1.setLength((-3464));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3464
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1774), charArray0, 2269, 2269);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1774
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(101, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder[] strBuilderArray0 = new StrBuilder[7];
      strBuilderArray0[0] = strBuilder0;
      strBuilderArray0[1] = strBuilder0;
      strBuilderArray0[2] = strBuilder0;
      strBuilderArray0[3] = strBuilder0;
      strBuilderArray0[4] = strBuilder0;
      strBuilderArray0[5] = strBuilder0;
      strBuilderArray0[6] = strBuilder0;
      StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(357, strBuilder0.size());
      assertEquals(510, strBuilder0.capacity());
      assertEquals(357, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(510, strBuilder1.capacity());
      assertEquals(357, strBuilder1.size());
      assertEquals(357, strBuilder1.length());
      assertEquals(7, strBuilderArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.setNewLineText("");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(357, strBuilder0.size());
      assertEquals(510, strBuilder0.capacity());
      assertEquals(357, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(357, strBuilder2.size());
      assertEquals("", strBuilder2.getNewLineText());
      assertEquals(510, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(357, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      int int0 = strBuilder0.capacity();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(510, int0);
      assertEquals(357, strBuilder0.size());
      assertEquals(510, strBuilder0.capacity());
      assertEquals(357, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(357, strBuilder0.size());
      assertEquals(510, strBuilder0.capacity());
      assertEquals(357, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      strBuilder_StrBuilderWriter0.close();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(357, strBuilder0.size());
      assertEquals(510, strBuilder0.capacity());
      assertEquals(357, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(357, strBuilder0.size());
      assertEquals(510, strBuilder0.capacity());
      assertEquals(357, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(357, stringBuffer0.length());
      
      StrBuilder strBuilder3 = strBuilder0.appendln(true);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(510, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(361, strBuilder0.size());
      assertEquals("", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(361, strBuilder0.length());
      assertEquals("", strBuilder3.getNewLineText());
      assertEquals(361, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(510, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(361, strBuilder3.length());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(767);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(767, strBuilder0.capacity());
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      Class<StrBuilder> class1 = StrBuilder.class;
      ServiceLoader<StrBuilder> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[org.apache.commons.lang3.text.StrBuilder]", serviceLoader1.toString());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) serviceLoader0, "d");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(767, strBuilder0.capacity());
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(767, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      int int0 = strBuilder1.capacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(767, int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(767, strBuilder0.capacity());
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(767, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      strBuilder0.size = 0;
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("h)s;1V;.*L`~Xja^");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("h)s;1V;.*L`~Xja^", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals("h)s;1V;.*L`~Xja^", strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StrBuilder) null);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-1193));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      
      strBuilder_StrBuilderWriter0.write((-1573));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(8, strBuilder2.size());
      assertEquals(8, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      strBuilder_StrBuilderWriter0.write((-5438));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'i', '7', '7', '7', '7', '7', '7'}, charArray0);
      
      int int0 = strBuilder0.indexOf(strMatcher0, 0);
      assertEquals(5, int0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'i', '7', '7', '7', '7', '7', '7'}, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('7', 0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      
      int int1 = strBuilder0.size();
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(16, int1);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int2 = strBuilder1.indexOf(strMatcher0, 5);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, int2);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'i', '7', '7', '7', '7', '7', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("*");
      assertNotNull(strMatcher_StringMatcher0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_StringMatcher0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) strMatcher_StringMatcher0, "*");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.setNullText("s<RCun|E");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("s<RCun|E", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals("s<RCun|E", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("s<RCun|E", strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      
      StrTokenizer strTokenizer0 = strBuilder1.asTokenizer();
      assertNotNull(strTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("s<RCun|E", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals("s<RCun|E", strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("s<RCun|E", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      strBuilder_StrBuilderWriter0.write((String) null);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals("s<RCun|E", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder_StrBuilderWriter0.write("*");
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("s<RCun|E", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) strBuilder0;
      objectArray0[6] = (Object) null;
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "length must be valid");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(360, strBuilder0.capacity());
      assertEquals(180, strBuilder0.size());
      assertEquals(180, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(180, strBuilder2.length());
      assertEquals(360, strBuilder2.capacity());
      assertEquals(180, strBuilder2.size());
      assertEquals(7, objectArray0.length);
      
      StrBuilder strBuilder3 = strBuilder2.append((CharSequence) strBuilder0, 31, 31);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(360, strBuilder0.capacity());
      assertEquals(211, strBuilder0.size());
      assertEquals(211, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(211, strBuilder2.size());
      assertEquals(211, strBuilder2.length());
      assertEquals(360, strBuilder2.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(360, strBuilder3.capacity());
      assertEquals(211, strBuilder3.size());
      assertEquals(211, strBuilder3.length());
      assertEquals(7, objectArray0.length);
      
      Reader reader0 = strBuilder0.asReader();
      assertNotNull(reader0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(360, strBuilder0.capacity());
      assertEquals(211, strBuilder0.size());
      assertEquals(211, strBuilder0.length());
      assertTrue(reader0.ready());
      assertTrue(reader0.markSupported());
      
      StrBuilder strBuilder4 = strBuilder0.append(1L);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(360, strBuilder0.capacity());
      assertEquals(212, strBuilder0.size());
      assertEquals(212, strBuilder0.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(360, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(212, strBuilder4.size());
      assertEquals(212, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      String string0 = strBuilder0.build();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln('N');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("", (String) null);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      
      String string1 = strBuilder0.rightString((-2383));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals("", string1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      String string0 = strBuilder0.getNullText();
      assertNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln("Op@VD%uv8O6;z[\"gC");
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator('a', 6);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("Op@VD%uv8O6;z[\"gC"));
      
      TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      assertFalse(treeSet0.contains("Op@VD%uv8O6;z[\"gC"));
      assertFalse(treeSet1.contains("Op@VD%uv8O6;z[\"gC"));
      
      StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterable<?>) treeSet1, "Op@VD%uv8O6;z[\"gC");
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(strBuilder3);
      assertFalse(treeSet0.contains("Op@VD%uv8O6;z[\"gC"));
      assertFalse(treeSet1.contains("Op@VD%uv8O6;z[\"gC"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(19, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(19, strBuilder3.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      strBuilder_StrBuilderReader0.mark(115);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      strBuilder_StrBuilderReader0.reset();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = (-1726);
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1726), 'b');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1726
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1354);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1354, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1354, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1354, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1354, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      assertNotNull(strMatcher0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1354, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0);
      assertNotNull(strTokenizer0);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1354, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1354, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1354, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.append('E');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1354, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1354, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(1354, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder2.charAt(2193);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2193
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.size());
      assertEquals(52, strBuilder0.length());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(52, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(102, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(52, strBuilder2.size());
      
      Writer writer0 = strBuilder0.asWriter();
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.size());
      assertEquals(52, strBuilder0.length());
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, 3005, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(337);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(337, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = new StrBuilder(337);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(337, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      IntStream intStream0 = strBuilder1.chars();
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotNull(intStream0);
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(337, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, 34, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("~dYL7CZ`YIZ7");
      assertNotNull(strBuilder0);
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder_StrBuilderWriter0.close();
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, false);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("alse", stringBuilder0.toString());
      assertEquals("alse", stringBuilder1.toString());
      assertEquals("alse", stringBuilder2.toString());
      
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '.';
      charArray0[2] = 'f';
      charArray0[3] = '#';
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, charArray0);
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertEquals(":.f#alse", stringBuilder0.toString());
      assertEquals(":.f#alse", stringBuilder1.toString());
      assertEquals(":.f#alse", stringBuilder2.toString());
      assertEquals(":.f#alse", stringBuilder3.toString());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {':', '.', 'f', '#'}, charArray0);
      
      StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(0);
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertEquals(":.f#alse\u0000", stringBuilder0.toString());
      assertEquals(":.f#alse\u0000", stringBuilder1.toString());
      assertEquals(":.f#alse\u0000", stringBuilder2.toString());
      assertEquals(":.f#alse\u0000", stringBuilder3.toString());
      assertEquals(":.f#alse\u0000", stringBuilder4.toString());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {':', '.', 'f', '#'}, charArray0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuilder4, 0, 326);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (double) 0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.library.path");
      assertNotNull(strBuilder0);
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('h');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(5, 'd');
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(49, strBuilder2.capacity());
      
      int int0 = strBuilder0.indexOf('d');
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(18, int0);
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder1);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.length());
      assertEquals(46, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.size());
      assertEquals(46, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(49, strBuilder3.capacity());
      assertEquals(46, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      
      StrBuilder strBuilder4 = strBuilder1.appendln('h');
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.size());
      assertEquals(48, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(48, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(48, strBuilder4.length());
      assertEquals(49, strBuilder4.capacity());
      
      StrBuilder strBuilder5 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder2, (-1089), 'd');
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.size());
      assertEquals(48, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(48, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(49, strBuilder2.capacity());
      assertEquals(48, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(49, strBuilder3.capacity());
      assertEquals(48, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(48, strBuilder5.size());
      assertEquals(49, strBuilder5.capacity());
      assertEquals(48, strBuilder5.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = '%';
      IntStream intStream0 = strBuilder2.chars();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(48, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(49, strBuilder2.capacity());
      
      Reader reader0 = strBuilder0.asReader();
      assertNotNull(reader0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(reader0.markSupported());
      assertTrue(reader0.ready());
      
      charArray0[2] = 'd';
      charArray0[3] = 'h';
      charArray0[4] = 'd';
      char[] charArray1 = strBuilder3.getChars(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.size());
      assertEquals(48, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(48, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(49, strBuilder3.capacity());
      assertEquals(48, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, charArray0.length);
      assertEquals(48, charArray1.length);
      assertArrayEquals(new char[] {'d', '%', 'd', 'h', 'd'}, charArray0);
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder6 = strBuilder2.replace(strMatcher0, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", 5, 5, 5);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(49, strBuilder6.capacity());
      assertEquals(48, strBuilder6.length());
      assertEquals(48, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(48, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(49, strBuilder2.capacity());
      
      IntStream intStream1 = strBuilder6.chars();
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotNull(intStream1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(intStream1, intStream0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.size());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(49, strBuilder6.capacity());
      assertEquals(48, strBuilder6.length());
      assertEquals(48, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(48, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(49, strBuilder2.capacity());
      
      StrBuilder strBuilder7 = strBuilder0.insert(18, (-1835.44));
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertEquals(56, strBuilder0.length());
      assertEquals(56, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(112, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(112, strBuilder7.capacity());
      assertEquals(56, strBuilder7.size());
      assertEquals(56, strBuilder7.length());
      
      StrBuilder strBuilder8 = strBuilder2.setLength(18);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(112, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(18, strBuilder2.size());
      assertEquals(18, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(112, strBuilder2.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(112, strBuilder8.capacity());
      assertEquals(18, strBuilder8.length());
      assertEquals(18, strBuilder8.size());
      
      StrBuilder strBuilder9 = strBuilder7.appendWithSeparators((Iterator<?>) null, "java.library.path");
      assertNotNull(strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder8);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(112, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(112, strBuilder7.capacity());
      assertEquals(18, strBuilder7.length());
      assertEquals(18, strBuilder7.size());
      assertEquals(112, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(18, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(18, strBuilder9.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "#Vd[(";
      StrBuilder strBuilder0 = new StrBuilder("#Vd[(");
      assertNotNull(strBuilder0);
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      
      int int0 = 7;
      // Undeclared exception!
      try { 
        strBuilder0.delete(7, 1542);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b-K~^");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(37, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.append((StringBuilder) null);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(37, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(37, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertTrue(boolean0);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(37, strBuilder1.capacity());
      
      int int0 = strBuilder0.capacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(37, int0);
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      int int1 = 96;
      // Undeclared exception!
      try { 
        strBuilder0.insert(31, charArray0, 96, (-886));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 31
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = 7;
      StrBuilder strBuilder0 = new StrBuilder(7);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      
      int int1 = 0;
      int int2 = 32;
      StrBuilder strBuilder2 = strBuilder0.insert(0, 32);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder1.append('r');
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(7, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3, strBuilder3.length());
      assertEquals(7, strBuilder3.capacity());
      assertEquals(3, strBuilder3.size());
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      StrBuilder strBuilder4 = strBuilder0.clear();
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertEquals(7, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      String string0 = ")[C$#_(U9,]+>eub7]}";
      StrBuilder strBuilder5 = strBuilder0.appendln(false);
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(7, strBuilder0.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(6, strBuilder5.size());
      assertEquals(7, strBuilder5.capacity());
      assertEquals(6, strBuilder5.length());
      
      StrBuilder strBuilder6 = strBuilder4.replaceAll(strMatcher0, ")[C$#_(U9,]+>eub7]}");
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(7, strBuilder0.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertEquals(7, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(6, strBuilder6.size());
      assertEquals(6, strBuilder6.length());
      assertEquals(7, strBuilder6.capacity());
      
      char char0 = 'c';
      int int3 = strBuilder0.lastIndexOf('c', 7);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertEquals((-1), int3);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(7, strBuilder0.capacity());
      
      StrBuilder strBuilder7 = strBuilder2.appendSeparator("Solaris");
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder3);
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertEquals(26, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.length());
      assertEquals(13, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(26, strBuilder2.capacity());
      assertEquals(26, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(13, strBuilder7.size());
      assertEquals(13, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertEquals(26, strBuilder0.capacity());
      assertEquals(13, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.capacity());
      
      StrBuilder strBuilder8 = strBuilder4.appendFixedWidthPadRight((Object) "java.vm.specification.version", 81, '0');
      assertNotNull(strBuilder8);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertNull(strBuilder8.getNewLineText());
      assertEquals(188, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertEquals(94, strBuilder8.size());
      assertEquals(94, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(94, strBuilder0.size());
      assertEquals(94, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(188, strBuilder0.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(94, strBuilder4.size());
      assertEquals(94, strBuilder4.length());
      assertEquals(188, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "SzpQ!4 ;U";
      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      
      char char0 = '`';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`');
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertEquals(106, strBuilder0.size());
      assertEquals(106, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(212, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(106, strBuilder1.size());
      assertEquals(106, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji");
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(110, strBuilder0.size());
      assertEquals(110, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(110, strBuilder2.size());
      assertEquals(110, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(212, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertEquals(114, strBuilder0.size());
      assertEquals(114, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(212, strBuilder2.capacity());
      assertEquals(114, strBuilder2.size());
      assertEquals(114, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(114, strBuilder3.size());
      assertEquals(114, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(212, strBuilder3.capacity());
      
      StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji");
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertEquals(109, strBuilder0.size());
      assertEquals(109, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(109, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(212, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(109, strBuilder1.length());
      assertEquals(109, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(109, strBuilder4.length());
      assertEquals(212, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      
      String string1 = strBuilder0.getNullText();
      assertNull(string1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(109, strBuilder0.size());
      assertEquals(109, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji");
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertEquals(109, strBuilder0.size());
      assertEquals(109, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(212, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(109, strBuilder2.length());
      assertEquals(109, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(212, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(109, strBuilder5.size());
      assertEquals(109, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(212, strBuilder5.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(2817, (-1.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2817
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher('w');
      assertNotNull(strMatcher1);
      
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("^3U^;XUW^MhqPybj");
      assertNotNull(strMatcher2);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      
      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = strBuilder0.indexOf(strMatcher0, (-2284));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder0.appendln(289);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(10, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(9, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(9, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder3.deleteCharAt(1027);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1027
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = 79;
      StrBuilder strBuilder0 = new StrBuilder(79);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(79, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 79);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(79, strBuilder2.capacity());
      
      int int1 = (-2267);
      StrBuilder strBuilder3 = strBuilder1.appendln((Object) strBuilder1);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(79, strBuilder0.capacity());
      assertEquals(59, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder1.capacity());
      assertEquals(59, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(59, strBuilder1.length());
      assertEquals(79, strBuilder3.capacity());
      assertEquals(59, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(59, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder3.deleteAll('o');
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.size());
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder1.capacity());
      assertEquals(56, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.size());
      assertEquals(79, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(56, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(56, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(79, strBuilder4.capacity());
      assertEquals(56, strBuilder4.size());
      assertEquals(56, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.size());
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(79, strBuilder1.capacity());
      assertEquals(56, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.size());
      
      StrBuilder strBuilder5 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.size());
      assertEquals(79, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(56, strBuilder5.size());
      assertEquals(56, strBuilder5.length());
      assertEquals(79, strBuilder5.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder2.append((CharSequence) stringBuilder0, 79, (-211));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1920);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      
      StrBuilder strBuilder2 = strBuilder0.append((double) 1920);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(9, strBuilder0.length());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1920, strBuilder2.capacity());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder0.appendln(1920);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1920, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(14, strBuilder3.length());
      assertEquals(14, strBuilder3.size());
      
      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(66, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(66, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.size());
      assertEquals(66, strBuilder3.length());
      assertEquals(66, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(1920, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(66, strBuilder4.length());
      assertEquals(66, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1920, strBuilder4.capacity());
      
      StrBuilder strBuilder5 = strBuilder4.deleteAll('#');
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(66, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(66, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.size());
      assertEquals(66, strBuilder3.length());
      assertEquals(66, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(1920, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(66, strBuilder4.length());
      assertEquals(66, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1920, strBuilder4.capacity());
      assertEquals(66, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(1920, strBuilder5.capacity());
      assertEquals(66, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      
      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(66, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(66, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.size());
      
      int int0 = 2;
      StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1);
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(132, strBuilder0.length());
      assertEquals(132, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(132, strBuilder1.length());
      assertEquals(132, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(1920, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(132, strBuilder6.size());
      assertEquals(132, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      
      StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(132, strBuilder0.length());
      assertEquals(132, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1920, strBuilder7.capacity());
      assertEquals(132, strBuilder7.length());
      assertEquals(132, strBuilder7.size());
      
      StrBuilder strBuilder8 = strBuilder2.append((CharSequence) stringBuilder0, 2, 2);
      assertNotNull(strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertEquals(134, strBuilder0.length());
      assertEquals(134, strBuilder0.size());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(134, strBuilder1.length());
      assertEquals(134, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1920, strBuilder2.capacity());
      assertEquals(134, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(134, strBuilder2.length());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(1920, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(134, strBuilder8.size());
      assertEquals(134, strBuilder8.length());
      
      char char0 = '^';
      int int1 = strBuilder1.lastIndexOf('^');
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int1);
      assertEquals(134, strBuilder0.length());
      assertEquals(134, strBuilder0.size());
      assertEquals(1920, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(134, strBuilder1.length());
      assertEquals(134, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1920, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder4.insert(1575, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1575
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder2.size());
      assertEquals(16, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      String string0 = null;
      StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder2.size());
      assertEquals(16, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.length());
      assertEquals(16, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      
      Writer writer0 = strBuilder3.asWriter();
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder2.size());
      assertEquals(16, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(16, strBuilder3.length());
      assertEquals(16, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0);
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(16, strBuilder4.size());
      assertEquals(16, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      
      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');
      assertFalse(strMatcher1.equals((Object)strMatcher0));
      assertNotNull(strMatcher1);
      assertNotSame(strMatcher1, strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      char[] charArray0 = new char[0];
      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      StrBuilder strBuilder5 = strBuilder4.trim();
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(15, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(15, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(15, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(15, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      
      int int1 = 6;
      StrBuilder strBuilder6 = strBuilder4.append(6);
      assertFalse(strMatcher0.equals((Object)strMatcher1));
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strMatcher0, strMatcher1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(16, strBuilder4.size());
      assertEquals(16, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(16, strBuilder6.size());
      assertEquals(16, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      
      // Undeclared exception!
      try { 
        strMatcher0.isMatch(charArray0, 3954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "LINUX";
      StrBuilder strBuilder0 = new StrBuilder("LINUX");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((Object) strBuilder_StrBuilderWriter0);
      int int0 = 1283;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1283, (CharSequence) "LINUX");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1283
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      strBuilder_StrBuilderReader0.read(charArray0);
      charArray0[0] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      strBuilder_StrBuilderReader0.read(charBuffer0);
      strBuilder_StrBuilderReader0.ready();
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2");
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      CharBuffer.allocate(0);
      StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0);
      StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ");
      strBuilder4.leftString(1);
      strBuilder3.size();
      strBuilder3.appendln(true);
      strBuilder3.appendSeparator("~G;2|T ", 1);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      strBuilder4.appendAll((Iterable<?>) set0);
      strBuilder1.reverse();
      strBuilder4.append((long) 81);
      assertEquals(95, strBuilder0.size());
      assertEquals(95, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.read();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      strBuilder1.deleteAll(strMatcher0);
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      strBuilder_StrBuilderReader0.read(charBuffer0);
      strBuilder_StrBuilderReader0.close();
      StrBuilder strBuilder2 = strBuilder1.append((long) 104);
      strBuilder2.ensureCapacity(104);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));
      strBuilder1.replaceFirst(strMatcher0, "Windows NT");
      char[] charArray1 = new char[2];
      charArray1[0] = '/';
      charArray1[1] = '/';
      strBuilder0.appendln(charArray1);
      // Undeclared exception!
      try { 
        strBuilder0.appendln("hZ3CNnc|]e", 101, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNewLineText();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      strBuilder_StrBuilderReader0.skip((-1073L));
      strBuilder_StrBuilderReader0.reset();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("");
      strBuilder_StrBuilderWriter0.flush();
      StrBuilder strBuilder1 = strBuilder0.insert(0, true);
      strBuilder0.toCharArray();
      // Undeclared exception!
      try { 
        strBuilder1.subSequence(3888, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 64
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }
}
