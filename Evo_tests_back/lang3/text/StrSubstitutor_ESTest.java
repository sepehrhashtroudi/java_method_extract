/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 04:10:34 GMT 2021
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.function.BiFunction;
import org.apache.commons.lang3.text.StrBuilder;
import org.apache.commons.lang3.text.StrLookup;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0);
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, strMatcher0, strMatcher0, '|');
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strSubstitutor0.substitute(strBuilder0, 22, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder1);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "0f/r)", "0f/r)");
      StrBuilder strBuilder0 = new StrBuilder("...");
      String string0 = strSubstitutor0.replace(strBuilder0, 1, 0);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J');
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0, 0, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 36
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "}", "", 'y');
      StrBuilder strBuilder0 = new StrBuilder("G=eNxa?.$-wkxp0M)");
      boolean boolean0 = strSubstitutor0.substitute(strBuilder0, 0, (-1006));
      assertEquals('y', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffixMatcher(strSubstitutor0.DEFAULT_PREFIX);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix(":]GB6Un80r?+");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Locale.Category> hashMap0 = new HashMap<String, Locale.Category>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Locale.Category>) hashMap0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix('X');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", '\"');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      strSubstitutor0.setVariablePrefixMatcher(strMatcher0);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "ZFU$pUC", "ZFU$pUC");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix("ZFU$pUC");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      hashMap0.put("a7hg[?.#=P8Y4{0", strSubstitutor0);
      StrBuilder strBuilder0 = new StrBuilder(2375);
      strSubstitutor0.resolveVariable("a7hg[?.#=P8Y4{0", strBuilder0, 548, 548);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[7];
      String string0 = strSubstitutor0.replace(charArray0, 1, 1);
      assertEquals("\u0000", string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "~X:f5le.[2O/%", "~X:f5le.[2O/%");
      StrBuilder strBuilder0 = new StrBuilder("java.vendor");
      String string0 = strSubstitutor0.replace(strBuilder0, 1, 1);
      assertEquals("a", string0);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) null, "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", '>');
      StrBuilder strBuilder0 = new StrBuilder("Search and Replace array lengths don't match: ");
      strSubstitutor0.replace(strBuilder0);
      assertEquals('>', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrLookup.MapStrLookup<Integer> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Integer>(hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "yYvX9p$MV>[0O", "yYvX9p$MV>[0O", 'n');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yYvX9p$MV>[0O");
      String string0 = strSubstitutor0.replace(stringBuffer0, 0, 0);
      assertEquals('n', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J');
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append(0);
      strSubstitutor0.replace(stringBuffer1);
      assertEquals('J', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace("$", 0, 1);
      assertEquals("$", string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, Integer>) hashMap0, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, StrLookup.MapStrLookup<String>> hashMap0 = new HashMap<String, StrLookup.MapStrLookup<String>>();
      String string0 = StrSubstitutor.replace(object0, (Map<String, StrLookup.MapStrLookup<String>>) hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) "has", 1, 1);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "0f/r)", "0f/r)");
      String string0 = strSubstitutor0.replace((CharSequence) "...", 0, 0);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) "");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Locale.Category> hashMap0 = new HashMap<String, Locale.Category>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Locale.Category>) hashMap0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = strSubstitutor0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.getVariableResolver();
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrLookup.MapStrLookup<Integer> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Integer>(hashMap0);
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(",M&\"vSQe>$/B!jO");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, strMatcher_StringMatcher0, strMatcher_StringMatcher0, '4');
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "}", "", 'y');
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('y', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      // Undeclared exception!
      try { 
        strSubstitutor0.substitute((StrBuilder) null, 548, 523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      StrBuilder strBuilder0 = new StrBuilder((-1639));
      // Undeclared exception!
      try { 
        strSubstitutor0.substitute(strBuilder0, 36, 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0);
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'u');
      StrBuilder strBuilder0 = new StrBuilder(256);
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(strBuilder0, 64, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrLookup<String> strLookup0 = StrLookup.systemPropertiesLookup();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", ' ');
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0, 0, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("", (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      Integer integer0 = new Integer((-2091));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.merge(object0, integer0, biFunction0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace(object0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) null);
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (StrMatcher) null, (StrMatcher) null, 'u');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrLookup.MapStrLookup<String> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<String>((Map<String, String>) null);
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "XN,?#M}jY}2as*", (String) null, 's');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, (String) null, "^J<%ATo;5U.)x@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrLookup.MapStrLookup<Integer> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Integer>(hashMap0);
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(",M&\"vSQe>$/B!jO");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, strMatcher_StringMatcher0, strMatcher_StringMatcher0, '4');
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffixMatcher(strMatcher_NoMatcher0);
      assertEquals('$', strSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "~X:f5le.[2O/%", "~X:f5le.[2O/%");
      StringBuilder stringBuilder0 = new StringBuilder("~X:f5le.[2O/%");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder0, 1, 1);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StringBuilder stringBuilder0 = new StringBuilder("...");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, (-1995), (-1995));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup.MapStrLookup<String> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<String>(hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "6", "6", '<');
      StringBuffer stringBuffer0 = new StringBuffer("6");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0, 1, 0);
      assertEquals('<', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "ZFU$pUC", "ZFU$pUC");
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, 3213, 3213);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "yf/r)", "yf/r)");
      String string0 = strSubstitutor0.replace((Object) "");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "Dy~{jBj&qu!T}=0k", "remove() is unsupported");
      String string0 = strSubstitutor0.replace((Object) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrLookup<Integer> strLookup0 = StrLookup.mapLookup((Map<String, Integer>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "7SN($vHwB=x}1W.", "", 'R');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "7SN($vHwB=x}1W.", 2107, 2107);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrLookup<Integer> strLookup0 = StrLookup.mapLookup((Map<String, Integer>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "7SN($vHwB=x}1W.", "", 'R');
      strSubstitutor0.setEscapeChar('R');
      assertEquals('R', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      strSubstitutor0.getVariableSuffixMatcher();
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "3brcv0rwbm5~9 <#", "3brcv0rwbm5~9 <#", '/');
      strSubstitutor0.getVariablePrefixMatcher();
      assertEquals('/', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, Object>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, StrLookup<Integer>> hashMap0 = new HashMap<String, StrLookup<Integer>>();
      // Undeclared exception!
      try { 
        StrSubstitutor.replace(object0, (Map<String, StrLookup<Integer>>) hashMap0, "", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "${", 'y');
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffixMatcher((StrMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder((-1047));
      strSubstitutor0.resolveVariable("", strBuilder0, (-1047), (-1047));
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StrLookup<String> strLookup0 = StrLookup.systemPropertiesLookup();
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'A');
      StrBuilder strBuilder0 = new StrBuilder(" has no clone method");
      boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0);
      assertFalse(boolean0);
      assertEquals('A', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefixMatcher(strMatcher0);
      strSubstitutor1.setEnableSubstitutionInVariables(true);
      strSubstitutor0.replace("Variable prefix matcher must not be null!");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StrBuilder) null, 32, (-1));
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StrBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0);
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null, 0, 2825);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0);
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, 0, (int) '$');
      assertEquals('k', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<String, StrLookup<Object>> hashMap0 = new HashMap<String, StrLookup<Object>>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, StrLookup<Object>>) hashMap0, "Search and Replace array lengths don't match: ", "");
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", '\"');
      StringBuffer stringBuffer0 = new StringBuffer("-f\"%B/3<J;VD2m];");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(boolean0);
      assertEquals('\"', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((StrBuilder) null, 548, 548);
      assertNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder(2374);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(strBuilder0, (-2462), 548);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      strSubstitutor0.replace((StrBuilder) null);
      assertEquals('k', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0);
      StrBuilder strBuilder0 = new StrBuilder(0);
      String string0 = strSubstitutor0.replace(strBuilder0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) null, (-3535), (-3535));
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      strSubstitutor0.replace((CharSequence) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      String string0 = strSubstitutor0.replace((CharSequence) "r/Vf}D#\"");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("r/Vf}D#\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      String string0 = strSubstitutor0.replace((StringBuffer) null, 0, (int) 'k');
      assertEquals('k', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", '\"');
      StringBuffer stringBuffer0 = new StringBuffer("-f\"%B/3<J;VD2m];");
      String string0 = strSubstitutor0.replace(stringBuffer0, 0, 16);
      assertNotNull(string0);
      assertEquals('\"', strSubstitutor0.getEscapeChar());
      assertEquals("-f\"%B/3<J;VD2m];", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashMap<String, StrLookup.MapStrLookup<String>> hashMap0 = new HashMap<String, StrLookup.MapStrLookup<String>>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, StrLookup.MapStrLookup<String>>) hashMap0, "", "", 'A');
      strSubstitutor0.replace((StringBuffer) null);
      assertEquals('A', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "0f/r)", "0f/r)");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", '\"');
      String string0 = strSubstitutor0.replace((char[]) null, 0, 0);
      assertNull(string0);
      assertEquals('\"', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      char[] charArray0 = new char[5];
      String string0 = strSubstitutor0.replace(charArray0, 0, 0);
      assertEquals('k', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((char[]) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      char[] charArray0 = new char[5];
      String string0 = strSubstitutor0.replace(charArray0);
      assertNotNull(string0);
      assertEquals('k', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "0f/r)", "0f/r)");
      String string0 = strSubstitutor0.replace(";!Ql", 0, 0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StrLookup<String> strLookup0 = StrLookup.systemPropertiesLookup();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "clon", "clon", 'h');
      strSubstitutor0.replace((String) null);
      assertEquals('h', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StrLookup<String> strLookup0 = StrLookup.systemPropertiesLookup();
      Properties properties0 = new Properties();
      properties0.put("", strLookup0);
      String string0 = StrSubstitutor.replace((Object) "mp", properties0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('#');
      assertEquals('J', strSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J');
      strSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('J', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J');
      StrLookup<?> strLookup0 = strSubstitutor0.getVariableResolver();
      strSubstitutor0.setVariableResolver(strLookup0);
      assertEquals('J', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null, (-3535), (int) '+');
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix('$');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0, "", "org.apache.commons.lang3.text.StrMatcher$NoMatcher");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "y:OJ\"(By)(B^TX+?", "y:OJ\"(By)(B^TX+?", '\\');
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariablePrefixMatcher((StrMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) null, properties0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrLookup.MapStrLookup<Integer> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Integer>(hashMap0);
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(",M&\"vSQe>$/B!jO");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, strMatcher_StringMatcher0, strMatcher_StringMatcher0, '4');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('4');
      assertEquals('4', strSubstitutor1.getEscapeChar());
  }
}
