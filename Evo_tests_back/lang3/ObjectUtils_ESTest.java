/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:31:08 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.reflect.Array;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.ToIntFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.apache.commons.lang3.text.StrBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3175));
      String string0 = ObjectUtils.toString((Object) strBuilder0);
      Object object0 = ObjectUtils.cloneIfPossible((Object) string0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BreakIterator[] breakIteratorArray0 = new BreakIterator[9];
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      breakIteratorArray0[0] = breakIterator0;
      breakIteratorArray0[1] = breakIteratorArray0[0];
      breakIteratorArray0[2] = breakIteratorArray0[1];
      breakIteratorArray0[3] = breakIteratorArray0[2];
      breakIteratorArray0[4] = breakIteratorArray0[1];
      BreakIterator breakIterator1 = ObjectUtils.mode(breakIteratorArray0);
      assertSame(breakIterator1, breakIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = ObjectUtils.median(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-4333), (-4333), (-4333), (-275), (-4333)).when(toIntFunction0).applyAsInt(any());
      Comparator<RenderingHints> comparator0 = Comparator.comparingInt((ToIntFunction<? super RenderingHints>) toIntFunction0);
      RenderingHints[] renderingHintsArray0 = new RenderingHints[8];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      renderingHintsArray0[0] = renderingHints0;
      renderingHintsArray0[1] = renderingHints0;
      renderingHintsArray0[2] = renderingHintsArray0[1];
      renderingHintsArray0[3] = renderingHints0;
      renderingHintsArray0[4] = renderingHintsArray0[0];
      renderingHintsArray0[5] = renderingHintsArray0[0];
      renderingHintsArray0[6] = renderingHintsArray0[0];
      renderingHintsArray0[7] = renderingHintsArray0[5];
      RenderingHints renderingHints1 = ObjectUtils.median(comparator0, renderingHintsArray0);
      assertEquals(1, renderingHints1.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals((-1807454463), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<MockSimpleDateFormat> linkedList0 = ObjectUtils.defaultIfNull((LinkedList<MockSimpleDateFormat>) null, (LinkedList<MockSimpleDateFormat>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      int int0 = ObjectUtils.compare(integer0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      RoundingMode roundingMode1 = RoundingMode.UP;
      int int0 = ObjectUtils.compare(roundingMode0, roundingMode1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-1480));
      assertEquals((short) (-1480), short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = ObjectUtils.CONST(dimension0);
      assertEquals(0, dimension1.height);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = ObjectUtils.CONST(1610L);
      assertEquals(1610L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = ObjectUtils.CONST(1960);
      assertEquals(1960, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = ObjectUtils.CONST(1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = ObjectUtils.CONST(1774.173976);
      assertEquals(1774.173976, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = ObjectUtils.CONST((double) (-380));
      assertEquals((-380.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char char0 = ObjectUtils.CONST(']');
      assertEquals(']', char0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char char0 = ObjectUtils.CONST('2');
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AbstractMap.SimpleEntry<GridBagConstraints, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<GridBagConstraints, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Insets insets0 = new Insets(589, 1579, (-1486), (-2139));
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(0, 0, 589, 0, 0, 0.0, 0, 0, insets0, (-3015), (-1486));
      AbstractMap.SimpleEntry<GridBagConstraints, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<GridBagConstraints, String>(gridBagConstraints0, "7K{P{,GJ5qMM_;:g35");
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntryArray0[0];
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntryArray0[0];
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<AbstractMap.SimpleEntry<GridBagConstraints, String>>) null, abstractMap_SimpleEntryArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null comparator
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Comparator<Insets> comparator0 = Comparator.nullsFirst((Comparator<? super Insets>) collator0);
      Insets[] insetsArray0 = new Insets[6];
      Insets insets0 = new Insets(8, (-1303), (-1548), 256);
      insetsArray0[0] = insets0;
      insetsArray0[1] = insetsArray0[0];
      insetsArray0[2] = insetsArray0[1];
      insetsArray0[3] = insets0;
      insetsArray0[4] = insetsArray0[0];
      insetsArray0[5] = insets0;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, insetsArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Insets cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StrBuilder) null, (Object) decimalFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) dimension0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Insets insets0 = new Insets((short)1, 7, 7, 1609);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) insets0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.cloneIfPossible(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      // Undeclared exception!
      try { 
        ObjectUtils.clone(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IdentityHashMap<HashMap, ChoiceFormat> identityHashMap0 = ObjectUtils.clone((IdentityHashMap<HashMap, ChoiceFormat>) null);
      assertNull(identityHashMap0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Date date0 = new Date(1405L);
      int int0 = ObjectUtils.compare(date0, (Date) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-792), 127, 1059);
      MockDate mockDate1 = new MockDate();
      int int0 = ObjectUtils.compare(mockDate0, mockDate1, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Time time0 = new Time((-61L));
      int int0 = ObjectUtils.compare((Time) null, time0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Time time0 = new Time((-35L));
      int int0 = ObjectUtils.compare((Time) null, time0, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Date date0 = new Date(1405L);
      int int0 = ObjectUtils.compare(date0, (Date) null, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Time time0 = new Time(0L);
      int int0 = ObjectUtils.compare(time0, time0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("0$o{\"/co}dy9@;o");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ObjectUtils.identityToString(stringBuilder0, (Object) gridBagConstraints0);
      assertEquals((-1), gridBagConstraints0.gridy);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Date date0 = new Date(1405L);
      ObjectUtils.hashCode((Object) date0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-824), 32, 44, 44, (-1));
      boolean boolean0 = ObjectUtils.equals((Object) mockDate0, (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        ObjectUtils.CONST_SHORT(1680043104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [1680043104]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        ObjectUtils.CONST_BYTE(2549);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [2549]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        ObjectUtils.CONST_BYTE((-1537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-1537]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      DateFormatSymbols dateFormatSymbols1 = ObjectUtils.cloneIfPossible(dateFormatSymbols0);
      assertNotSame(dateFormatSymbols1, dateFormatSymbols0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TreeSet<DecimalFormatSymbols> treeSet0 = new TreeSet<DecimalFormatSymbols>();
      TreeSet<DecimalFormatSymbols> treeSet1 = ObjectUtils.clone(treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = ObjectUtils.cloneIfPossible((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "org.apache.commons.lang3.ObjectUtils";
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BreakIterator[] breakIteratorArray0 = new BreakIterator[9];
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      breakIteratorArray0[0] = breakIterator0;
      BreakIterator breakIterator1 = BreakIterator.getLineInstance();
      breakIteratorArray0[1] = breakIterator1;
      breakIteratorArray0[2] = breakIterator1;
      breakIteratorArray0[3] = breakIterator0;
      breakIteratorArray0[4] = breakIteratorArray0[1];
      breakIteratorArray0[5] = breakIterator0;
      BreakIterator breakIterator2 = ObjectUtils.mode(breakIteratorArray0);
      assertNull(breakIterator2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Rectangle rectangle0 = ObjectUtils.mode((Rectangle[]) null);
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      Float float0 = new Float(0.0F);
      MutableInt mutableInt0 = new MutableInt(float0);
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = ObjectUtils.max(mutableIntArray0);
      assertEquals("0", mutableInt1.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      MutableInt mutableInt0 = new MutableInt(1356);
      mutableIntArray0[1] = mutableInt0;
      MutableInt mutableInt1 = ObjectUtils.min(mutableIntArray0);
      assertSame(mutableInt1, mutableInt0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Timestamp timestamp0 = ObjectUtils.min((Timestamp[]) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "org.apache.commons.lang3.ArrayUtils");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Time time0 = new Time(0L);
      String string0 = ObjectUtils.toString((Object) time0, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      StringBuilder stringBuilder0 = new StringBuilder("java.lang.String@1");
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString(stringBuilder0, objectArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null identity
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("omzdB-0;EZ}u;Zy1|)");
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString(stringBuffer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null identity
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Date date0 = new Date((-18L));
      ObjectUtils.identityToString(stringBuffer0, (Object) date0);
      assertEquals(15, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StrBuilder) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null identity
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-935));
      Locale locale0 = Locale.ITALIAN;
      ObjectUtils.identityToString(strBuilder0, (Object) locale0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null identity
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-935));
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ObjectUtils.identityToString((Appendable) strBuilder0, (Object) set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "org.apache.commons.lang3.ObjectUtils";
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals(1771439486, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpCookie httpCookie0 = new HttpCookie("org.apache.commons.lang3.text.StrTokenizer", "org.apache.commons.lang3.text.StrTokenizer");
      boolean boolean0 = ObjectUtils.notEqual("org.apache.commons.lang3.text.StrTokenizer", httpCookie0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(167.82865430967);
      MutableInt mutableInt0 = new MutableInt(float0);
      boolean boolean0 = ObjectUtils.equals((Object) mutableInt0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      boolean boolean0 = ObjectUtils.notEqual(imageCapabilities0, imageCapabilities0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) "^\"[ICa5fuOV1Ec%NNrW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "org.apache.commons.lang3.ObjectUtils";
      Object object0 = ObjectUtils.firstNonNull(objectArray0);
      assertEquals("org.apache.commons.lang3.ObjectUtils", object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Insets insets0 = ObjectUtils.firstNonNull((Insets[]) null);
      assertNull(insets0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = (DecimalFormat)ObjectUtils.defaultIfNull((Object) decimalFormat0, objectArray0[1]);
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ObjectUtils.firstNonNull(objectArray0);
      Object object1 = ObjectUtils.defaultIfNull(object0, (Object) "org.apache.commons.lang3.ObjectUtils");
      assertEquals("org.apache.commons.lang3.ObjectUtils", object1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Locale locale0 = new Locale("@%R@~Z\"cn^\t");
      Collator collator0 = Collator.getInstance(locale0);
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-560.4F));
      assertEquals((-560.4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PageAttributes pageAttributes0 = ObjectUtils.CONST((PageAttributes) null);
      assertNull(pageAttributes0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char char0 = ObjectUtils.CONST('k');
      assertEquals('k', char0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-7));
      assertEquals((byte) (-7), byte0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-1556L));
      assertEquals((-1556L), long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-2394));
      assertEquals((-2394), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = ObjectUtils.compare("", "0$o{\"/co}dy9@;o");
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }
}
