/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 03:55:10 GMT 2021
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EqualsBuilder_ESTest extends EqualsBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1759), (short) (-1759));
      Boolean boolean0 = Boolean.FALSE;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[2] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      equalsBuilder0.append((short) (-1759), (short)2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6d-<P!RUY!'y2?*6wrj";
      stringArray0[2] = "C^F>gFJs/3KDD";
      stringArray0[3] = ";J2t!!|]*=k9}";
      stringArray0[4] = "7]~L5MTH7v9z+a3";
      EqualsBuilder.reflectionEquals((Object) boolean0, object0, false, (Class<?>) class0, stringArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(booleanArray0, booleanArray0);
      assertFalse(equalsBuilder0.isEquals());
      
      equalsBuilder2.append(booleanArray0, (boolean[]) null);
      EqualsBuilder equalsBuilder3 = new EqualsBuilder();
      EqualsBuilder.reflectionEquals((Object) equalsBuilder2, (Object) equalsBuilder3, true);
      EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean0, false);
      equalsBuilder1.build();
      Object object1 = new Object();
      boolean boolean1 = EqualsBuilder.isRegistered(object1, equalsBuilder1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EqualsBuilder.getRegistry();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1403.409647050873;
      doubleArray0[2] = 1464.23545;
      doubleArray0[3] = 482.8;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((double[]) null, doubleArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((-3174), (-3174));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((Object[]) null, (Object[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)9;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte) (-91);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(byteArray0, byteArray1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(booleanArray0, booleanArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = 'v';
      charArray0[2] = 'o';
      charArray0[3] = '8';
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(charArray0, charArray0);
      assertSame(equalsBuilder0, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Set<Pair<IDKey, IDKey>> set0 = EqualsBuilder.getRegistry();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1274, (-3205));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-3205);
      longArray0[1] = (long) (-3205);
      longArray0[2] = (long) 1274;
      longArray0[3] = (long) (-3205);
      equalsBuilder0.append((Object) set0, (Object) set0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((long[]) null, longArray0);
      equalsBuilder2.append((byte)96, (byte)43);
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A^~AVSb)S";
      stringArray0[1] = "org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle";
      stringArray0[2] = "BVuI?48";
      EqualsBuilder.reflectionEquals(object0, (Object) set0, stringArray0);
      equalsBuilder2.append((double) 1274, 2037.269826675559);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      equalsBuilder1.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-1222.086F), (float) 1274L);
      assertSame(equalsBuilder2, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30));
      assertTrue(equalsBuilder2.isEquals());
      
      Object object0 = new Object();
      Object object1 = new Object();
      EqualsBuilder.reflectionEquals(object0, object1, (String[]) null);
      float float0 = (-941.3923F);
      equalsBuilder1.append(false, true);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F));
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      char char0 = '?';
      charArray0[1] = '?';
      charArray0[2] = 'S';
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null);
      Object object2 = new Object();
      EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null);
      Boolean boolean0 = equalsBuilder1.build();
      IDKey iDKey0 = new IDKey(boolean0);
      EqualsBuilder.isRegistered(equalsBuilder4, iDKey0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) '<';
      EqualsBuilder equalsBuilder6 = new EqualsBuilder();
      EqualsBuilder equalsBuilder7 = equalsBuilder3.append(object2, (Object) equalsBuilder6);
      EqualsBuilder equalsBuilder8 = new EqualsBuilder();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EqualsBuilder.reflectionEquals((Object) equalsBuilder6, (Object) equalsBuilder8, (Collection<String>) linkedHashSet0);
      double[] doubleArray0 = new double[3];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) float0;
      equalsBuilder7.append(doubleArray0, doubleArray0);
      assertTrue(equalsBuilder6.isEquals());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30));
      Object object0 = new Object();
      Object object1 = new Object();
      EqualsBuilder.reflectionEquals(object0, object1, (String[]) null);
      float float0 = (-941.3923F);
      equalsBuilder0.appendSuper(false);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F));
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '?';
      char char0 = 'S';
      charArray0[2] = 'S';
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null);
      Object object2 = new Object();
      EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null);
      Boolean boolean0 = equalsBuilder1.build();
      IDKey iDKey0 = new IDKey(boolean0);
      EqualsBuilder.isRegistered(equalsBuilder4, iDKey0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) '<';
      equalsBuilder3.append(floatArray0, floatArray0);
      equalsBuilder1.append((byte) (-30), (byte) (-30));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EqualsBuilder.reflectionEquals((Object) 'S', (Object) 'S', (String[]) null);
      double[] doubleArray0 = new double[3];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) float0;
      EqualsBuilder equalsBuilder6 = equalsBuilder2.append(doubleArray0, doubleArray0);
      assertSame(equalsBuilder6, equalsBuilder5);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = '[';
      charArray0[2] = 's';
      charArray0[3] = '-';
      charArray0[4] = '[';
      charArray0[5] = 'r';
      charArray0[6] = '!';
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((char[]) null, charArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte) (-1), (byte) (-1));
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('l', 'l');
      double[] doubleArray0 = new double[0];
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0);
      Boolean boolean0 = equalsBuilder5.build();
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte) (-54), (byte) (-54));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) equalsBuilder1;
      objectArray0[1] = (Object) equalsBuilder1;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'v';
      charArray0[2] = ';';
      charArray0[3] = 'O';
      charArray0[4] = '5';
      charArray0[5] = 'i';
      char[] charArray1 = new char[6];
      charArray1[0] = ';';
      charArray1[1] = 'i';
      charArray1[2] = 'O';
      charArray1[3] = ';';
      charArray1[4] = 'i';
      charArray1[5] = 'v';
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray1);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append('S', 'C');
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((int) (byte) (-54), (-1995));
      assertSame(equalsBuilder6, equalsBuilder2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[2];
      intArray1[1] = 0;
      equalsBuilder0.append(intArray0, intArray1);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(false, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = (double) (byte)1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      equalsBuilder2.append(doubleArray0, doubleArray1);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)36;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(byteArray1, byteArray0);
      assertSame(equalsBuilder0, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder.unregister(object0, object0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) equalsBuilder0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) equalsBuilder0;
      objectArray1[1] = (Object) equalsBuilder0;
      objectArray1[2] = object1;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0.0F, 1.0F);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, false);
      Object object2 = new Object();
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(objectArray0[0], object2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0);
      equalsBuilder5.append((byte) (-72), (byte) (-72));
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder4.build());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      EqualsBuilder equalsBuilder1 = new EqualsBuilder();
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Zjr?BzN";
      stringArray0[1] = "zP;SekJ@";
      EqualsBuilder.reflectionEquals(object1, object0, stringArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((byte) (-26), (byte) (-26));
      ImmutablePair<String, String> immutablePair0 = new ImmutablePair<String, String>("Zjr?BzN", "Zjr?BzN");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EqualsBuilder.reflectionEquals((Object) "Zjr?BzN", (Object) immutablePair0, (Collection<String>) linkedHashSet0);
      EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder2, false);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Unexpected IllegalAccessException";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "<r@0{o";
      stringArray1[4] = "";
      stringArray1[5] = "";
      String string0 = "KC?%YI}sH3,3PC";
      stringArray1[6] = "KC?%YI}sH3,3PC";
      stringArray1[7] = "eI9+2OG0.v";
      boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder1, stringArray1);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      Class<Integer> class0 = Integer.class;
      boolean boolean2 = EqualsBuilder.reflectionEquals((Object) stringArray1[2], (Object) string0, boolean1, (Class<?>) class0, stringArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EqualsBuilder.isRegistered("Unexpected IllegalAccessException", "Unexpected IllegalAccessException");
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) "Unexpected IllegalAccessException", (Object) "Unexpected IllegalAccessException");
      assertTrue(equalsBuilder1.isEquals());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((boolean[]) null, booleanArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.appendSuper(false);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(443.779, 443.779);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-756);
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short) (-756);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(shortArray0, shortArray1);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(false, false);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(equalsBuilder6.isEquals());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3863.3088F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1268.2902F);
      floatArray0[4] = (-3025.2256F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 885.884F;
      float[] floatArray1 = new float[7];
      floatArray1[0] = 885.884F;
      floatArray1[1] = 3863.3088F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-3025.2256F);
      floatArray1[5] = (-3025.2256F);
      floatArray1[6] = 3863.3088F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      char[] charArray0 = new char[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, false);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-4493);
      shortArray0[1] = (short)1200;
      shortArray0[2] = (short)430;
      shortArray0[3] = (short)543;
      shortArray0[4] = (short)4401;
      shortArray0[5] = (short)3602;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((float) (short)543, 3024.4634F);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)4401;
      longArray0[1] = (long) (short) (-1);
      equalsBuilder5.append(longArray0, longArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4352);
      shortArray0[1] = (short)84;
      shortArray0[2] = (short) (-1377);
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short) (-4352);
      shortArray1[1] = (short)84;
      shortArray1[2] = (short) (-4352);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append('~', '1');
      double[] doubleArray0 = new double[9];
      equalsBuilder0.setEquals(false);
      doubleArray0[0] = (double) (short) (-4352);
      doubleArray0[1] = (double) (short) (-4352);
      doubleArray0[2] = (double) (short) (-1377);
      doubleArray0[3] = (double) (short)84;
      doubleArray0[4] = (double) (short) (-4352);
      doubleArray0[5] = (double) (short)84;
      doubleArray0[6] = (double) (short) (-4352);
      doubleArray0[7] = (double) (short)84;
      doubleArray0[8] = (double) (short) (-4352);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((short) (-1), (short)1020);
      equalsBuilder5.append(0.0, (-1.0));
      EqualsBuilder.getRegistry();
      EqualsBuilder equalsBuilder6 = equalsBuilder0.append((Object) equalsBuilder2, (Object) "B;/TM[NVM");
      assertSame(equalsBuilder6, equalsBuilder4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(3595.0, 3595.0);
      long[] longArray0 = new long[6];
      longArray0[0] = (-501L);
      longArray0[1] = (-1500L);
      longArray0[2] = 1L;
      longArray0[3] = 4647091106607819706L;
      longArray0[4] = 4634837335261839360L;
      longArray0[5] = 4573L;
      long[] longArray1 = new long[6];
      longArray1[0] = 4573L;
      longArray1[1] = 4634837335261839360L;
      longArray1[2] = (-501L);
      longArray1[3] = 1L;
      longArray1[4] = (-501L);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0.0F, (float) (-501L));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-772.5231F);
      floatArray0[1] = (float) 4634837335261839360L;
      floatArray0[2] = (float) (-1500L);
      floatArray0[3] = (float) 1L;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 4634837335261839360L;
      floatArray0[6] = (float) 4647091106607819706L;
      floatArray0[7] = 0.0F;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0);
      assertSame(equalsBuilder2, equalsBuilder4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);
      assertTrue(equalsBuilder1.build());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-690.4802009552836);
      doubleArray0[2] = 765.3743487472304;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-690.4802009552836);
      doubleArray1[3] = 1.0;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-690.4802009552836), (-1445.7440248));
      Integer integer0 = new Integer((-4784));
      EqualsBuilder.isRegistered(integer0, "]lEx>?>");
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1.1F, 1.1F);
      equalsBuilder4.append(406, 406);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder4.isEquals());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-34);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-34);
      floatArray0[1] = (float) (byte) (-34);
      floatArray0[2] = (float) (byte) (-34);
      floatArray0[3] = (float) (byte) (-34);
      floatArray0[4] = (float) (byte) (-34);
      floatArray0[5] = (float) (byte) (-34);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, floatArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((float) (byte) (-34), (-1.0F));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) (-34.0F), (double) (byte) (-34));
      char[] charArray0 = new char[0];
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(charArray0, charArray0);
      assertSame(equalsBuilder6, equalsBuilder5);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)45;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte[]) null, byteArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(false, false);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-38);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)36, (byte) (-38));
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-38);
      shortArray0[1] = (short) (byte)36;
      shortArray0[2] = (short) (byte)45;
      shortArray0[3] = (short) (byte)45;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((long) (byte) (-52), 1226L);
      int[] intArray0 = new int[0];
      EqualsBuilder equalsBuilder7 = equalsBuilder5.append(intArray0, intArray0);
      IDKey iDKey0 = new IDKey(equalsBuilder2);
      IDKey iDKey1 = new IDKey(iDKey0);
      EqualsBuilder equalsBuilder8 = equalsBuilder7.append((Object) iDKey1, (Object) equalsBuilder6);
      equalsBuilder8.append('a', 'u');
      EqualsBuilder equalsBuilder9 = equalsBuilder3.appendSuper(false);
      assertSame(equalsBuilder9, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder2 = new EqualsBuilder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      equalsBuilder2.append((byte[]) null, byteArray0);
      Object[] objectArray0 = new Object[8];
      EqualsBuilder equalsBuilder3 = equalsBuilder0.append((Object[]) null, (Object[]) null);
      assertTrue(equalsBuilder3.build());
      
      equalsBuilder3.append((float) (byte) (-91), 2195.166F);
      equalsBuilder3.append((short) (-1759), (short) (-1759));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-1759);
      floatArray0[1] = (float) (-599);
      floatArray0[2] = (float) 'F';
      floatArray0[3] = (float) (byte) (-91);
      floatArray0[4] = (float) (-599);
      floatArray0[5] = (float) '&';
      floatArray0[6] = (float) (-599);
      floatArray0[7] = (float) (-599);
      EqualsBuilder equalsBuilder4 = equalsBuilder0.append(floatArray0, floatArray0);
      EqualsBuilder.getRegisterPair(equalsBuilder4, equalsBuilder1);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(3595.0, 3595.0);
      long[] longArray0 = new long[6];
      longArray0[0] = (-501L);
      longArray0[1] = (-1500L);
      longArray0[2] = 1L;
      longArray0[3] = 4647091106607819706L;
      longArray0[4] = 4634837335261839360L;
      longArray0[5] = 4573L;
      long[] longArray1 = new long[5];
      longArray1[0] = 4573L;
      longArray1[1] = 4634837335261839360L;
      longArray1[2] = 4389L;
      longArray1[3] = 1L;
      longArray1[4] = (-501L);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0.0F, (float) (-501L));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-772.5231F);
      floatArray0[1] = (float) 4634837335261839360L;
      floatArray0[2] = 1230.0F;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 4634837335261839360L;
      floatArray0[6] = (float) 4647091106607819706L;
      floatArray0[7] = 0.0F;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1500L);
      doubleArray0[1] = (double) (-1500L);
      doubleArray0[2] = 2258.6732;
      doubleArray0[3] = (double) 0.0F;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(longArray0, longArray0);
      assertSame(equalsBuilder6, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-4569442781688233984L), (-4569442781688233984L));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-72);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0);
      long[] longArray0 = new long[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);
      assertTrue(equalsBuilder3.build());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)107;
      intArray0[1] = (int) (byte) (-38);
      intArray0[2] = (int) (byte) (-72);
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)107;
      intArray0[5] = (int) (byte) (-38);
      intArray0[6] = (int) (byte) (-38);
      intArray0[7] = (int) (byte)125;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(intArray0, (int[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 107;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0);
      equalsBuilder5.append(objectArray0, objectArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1233;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((float[]) null, (float[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'l';
      charArray0[2] = '4';
      charArray0[3] = 'm';
      charArray0[4] = 'e';
      charArray0[5] = '/';
      charArray0[6] = '_';
      charArray0[7] = 'y';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray0);
      assertTrue(equalsBuilder3.build());
      
      Boolean boolean0 = Boolean.FALSE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      equalsBuilder1.append(byteArray0, byteArray1);
      assertFalse(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      assertTrue(equalsBuilder1.build());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'l';
      charArray0[2] = '4';
      charArray0[3] = 'm';
      charArray0[5] = '/';
      charArray0[6] = '_';
      charArray0[7] = 'F';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-23);
      byteArray1[2] = (byte) (-23);
      byteArray1[3] = (byte) (-23);
      equalsBuilder1.append(byteArray0, byteArray1);
      assertFalse(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1123.413941);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6273.6721243;
      doubleArray0[3] = 0.0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, (double[]) null);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((int[]) null, (int[]) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      char[] charArray1 = new char[4];
      charArray1[0] = '0';
      charArray1[1] = '0';
      charArray1[2] = '0';
      charArray1[3] = '0';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(false, true);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((Object) "Cannot get the toString of a null identity", (Object) equalsBuilder2);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte)31, (byte)101);
      assertSame(equalsBuilder0, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append(0.0F, 1.7F);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-122), (short)143);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (short)143, (-1.0F));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)143;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);
      Object object0 = new Object();
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(object0, (Object) "WQtm~X&IKh=");
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-113), (byte) (-69));
      Object object1 = new Object();
      Integer integer0 = new Integer(7);
      EqualsBuilder.unregister(object1, integer0);
      equalsBuilder5.appendSuper(true);
      ImmutablePair<String, EqualsBuilder> immutablePair0 = ImmutablePair.of("org.apache.commons.lang3.builder.IDKey", equalsBuilder1);
      ImmutablePair<Object, String> immutablePair1 = new ImmutablePair<Object, String>("org.apache.commons.lang3.builder.IDKey", "4I1O{{U4N:-.");
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4I1O{{U4N:-.";
      stringArray0[1] = "4I1O{{U4N:-.";
      stringArray0[2] = "4I1O{{U4N:-.";
      stringArray0[3] = "4I1O{{U4N:-.";
      stringArray0[4] = " DB)<kCgd%F=";
      stringArray0[5] = "WQtm~X&IKh=";
      stringArray0[6] = "WQtm~X&IKh=";
      stringArray0[7] = "WQtm~X&IKh=";
      stringArray0[8] = "4I1O{{U4N:-.";
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) immutablePair0, (Object) immutablePair1, true, (Class<?>) class0, stringArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[2];
      intArray0[0] = (-5682);
      int[] intArray1 = new int[2];
      intArray1[0] = (-330);
      intArray1[1] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-330);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(false, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)36;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(byteArray1, byteArray0);
      assertSame(equalsBuilder5, equalsBuilder2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) equalsBuilder0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(false, false);
      double[] doubleArray0 = new double[5];
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      equalsBuilder3.append(booleanArray0, booleanArray1);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1354.780493543815);
      doubleArray0[4] = 0.0;
      EqualsBuilder equalsBuilder4 = equalsBuilder2.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(object0, object0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.appendSuper(true);
      EqualsBuilder equalsBuilder7 = equalsBuilder6.append(false, true);
      assertFalse(equalsBuilder7.build());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[5] = (Object) equalsBuilder0;
      objectArray0[6] = (Object) equalsBuilder0;
      objectArray0[7] = (Object) equalsBuilder0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, (Object[]) null);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (byte) (-17);
      floatArray0[2] = (float) (byte) (-17);
      floatArray0[3] = (float) (byte) (-17);
      floatArray0[4] = (float) (byte) (-17);
      floatArray0[5] = (float) (byte) (-17);
      floatArray0[6] = (float) (byte) (-17);
      floatArray0[7] = (float) (byte) (-17);
      equalsBuilder1.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte) (-17), (byte) (-74));
      equalsBuilder2.append((long) (byte) (-74), (long) (byte) (-74));
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) equalsBuilder1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[5] = (Object) equalsBuilder1;
      objectArray0[6] = (Object) equalsBuilder1;
      objectArray0[7] = (Object) equalsBuilder1;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1537.7445625036;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray0);
      assertTrue(equalsBuilder2.isEquals());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)36;
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short)36;
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short)2;
      shortArray1[3] = (short)36;
      equalsBuilder3.append(shortArray0, shortArray1);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte)0, (byte)0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EqualsBuilder.reflectionEquals((Object) equalsBuilder1, (Object) null, (Collection<String>) linkedHashSet0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(true, true);
      assertTrue(equalsBuilder2.build());
      
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      equalsBuilder0.append((byte) (-1), (byte)2);
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "Q@a+w^PT*i";
      EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, true, (Class<?>) class0, stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      EqualsBuilder.getRegisterPair(boolean0, class0);
      Boolean boolean1 = equalsBuilder2.build();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-1);
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append(floatArray0, floatArray0);
      EqualsBuilder.getRegisterPair("", equalsBuilder3);
      EqualsBuilder.reflectionEquals((Object) "Unexpected IllegalAccessException", (Object) boolean1, stringArray0);
      equalsBuilder1.appendSuper(true);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      Object object0 = new Object();
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((byte) (-26), (byte) (-26));
      boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder2, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unexpected IllegalAccessException";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "<r@0{o";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "KC?%YI}sH3,3PC";
      stringArray0[7] = "eI9+2OG0.v";
      boolean boolean1 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder1, stringArray0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(equalsBuilder1.isEquals());
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((double[]) null, (double[]) null);
      assertTrue(equalsBuilder1.isEquals());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-3536L);
      longArray0[1] = 1L;
      longArray0[2] = 913L;
      longArray0[3] = 2563L;
      longArray0[4] = 1L;
      longArray0[5] = (-2850L);
      longArray0[6] = (-3794L);
      longArray0[7] = 0L;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((long[]) null, longArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short)673, (short)0);
      IDKey iDKey0 = new IDKey(equalsBuilder1);
      EqualsBuilder equalsBuilder4 = new EqualsBuilder();
      EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object) iDKey0, (Object) equalsBuilder4);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)673;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-2112);
      intArray0[5] = (int) (short)673;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(intArray0, intArray0);
      equalsBuilder6.append((-789.2F), (-702.148F));
      assertTrue(equalsBuilder4.build());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EqualsBuilder.getRegistry();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-938.27F);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray0);
      long[] longArray0 = new long[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, (long[]) null);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0.0F, (-938.27F));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-938.27F);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0);
      equalsBuilder5.append((short) (-1), (short)996);
      float[] floatArray1 = new float[0];
      EqualsBuilder equalsBuilder6 = equalsBuilder4.append(floatArray0, floatArray1);
      assertSame(equalsBuilder6, equalsBuilder4);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey("xNm2VMx&()xcv t@{");
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) null, (Object) iDKey0);
      IDKey iDKey1 = new IDKey((Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EqualsBuilder.reflectionEquals((Object) "I", (Object) iDKey1, (Collection<String>) linkedList0);
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (-128L);
      longArray0[3] = 0L;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0);
      double[] doubleArray0 = new double[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[0];
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) (-128L), (-2440.566416299249));
      EqualsBuilder equalsBuilder6 = equalsBuilder2.append(longArray0, longArray0);
      equalsBuilder1.reset();
      EqualsBuilder equalsBuilder7 = equalsBuilder6.append('2', ',');
      equalsBuilder5.reset();
      Object object0 = new Object();
      EqualsBuilder.register(equalsBuilder7, object0);
      equalsBuilder0.append(561.19965F, (float) (-1L));
      EqualsBuilder equalsBuilder8 = equalsBuilder1.append((byte) (-88), (byte) (-125));
      assertSame(equalsBuilder8, equalsBuilder5);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 876L;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 876L;
      doubleArray1[1] = (double) 876L;
      doubleArray1[2] = (double) 876L;
      doubleArray1[3] = (double) 876L;
      doubleArray1[4] = (double) 876L;
      doubleArray1[5] = (double) 876L;
      doubleArray1[6] = (double) 876L;
      Class<EqualsBuilder> class0 = EqualsBuilder.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      EqualsBuilder.reflectionEquals((Object) null, (Object) equalsBuilder0, false, (Class<?>) class0, stringArray0);
      doubleArray1[7] = (double) 876L;
      doubleArray1[8] = (double) 876L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(876L, 0L);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((byte)0, (byte)0);
      equalsBuilder1.reset();
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)47);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(false);
      assertFalse(equalsBuilder5.build());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, (boolean[]) null);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      EqualsBuilder.reflectionEquals((Object) equalsBuilder1, (Object) equalsBuilder1, true, (Class<?>) class0, stringArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0L, 0L);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('E', 'E');
      Object[] objectArray0 = new Object[3];
      equalsBuilder2.append((float[]) null, (float[]) null);
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) equalsBuilder4;
      EqualsBuilder.reflectionEquals((Object) null, (Object) null, false);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0);
      equalsBuilder5.appendSuper(true);
      assertFalse(equalsBuilder0.isEquals());
      
      EqualsBuilder.getRegistry();
      equalsBuilder1.reset();
      IDKey iDKey0 = new IDKey((Object) null);
      Object object0 = new Object();
      EqualsBuilder.isRegistered(iDKey0, object0);
      equalsBuilder2.append((byte)73, (byte)73);
      assertTrue(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-703L);
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      assertTrue(equalsBuilder1.isEquals());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)0;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'w';
      charArray0[2] = ':';
      charArray0[3] = '_';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-37);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(byteArray0, byteArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(byteArray0, byteArray0);
      assertFalse(equalsBuilder1.build());
      assertFalse(equalsBuilder5.isEquals());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-21);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-21);
      byteArray1[3] = (byte)0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append((short)947, (short)0);
      EqualsBuilder equalsBuilder4 = equalsBuilder0.append((byte) (-1), (byte)105);
      EqualsBuilder equalsBuilder5 = equalsBuilder2.append((Object) equalsBuilder3, (Object) equalsBuilder4);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte) (-21), (byte)41);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte) (-21);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte) (-21);
      EqualsBuilder equalsBuilder7 = equalsBuilder6.append(doubleArray0, doubleArray0);
      equalsBuilder7.reset();
      assertTrue(equalsBuilder1.isEquals());
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-124);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)88;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)88;
      byteArray1[5] = (byte)88;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[0];
      equalsBuilder1.append((byte) (-76), (byte)0);
      equalsBuilder1.append(objectArray0, objectArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((char[]) null, (char[]) null);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(booleanArray0, booleanArray0);
      assertFalse(equalsBuilder3.build());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder.isRegistered((Object) null, object0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append('0', '0');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(booleanArray0, booleanArray0);
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) equalsBuilder2;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (long) '0';
      longArray0[2] = (long) '0';
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(longArray0, longArray0);
      assertTrue(equalsBuilder3.isEquals());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '0';
      intArray0[1] = (int) '0';
      intArray0[2] = (int) '0';
      intArray0[3] = (int) '0';
      intArray0[4] = (int) '0';
      intArray0[5] = (int) '0';
      intArray0[6] = (int) '0';
      intArray0[7] = (int) '0';
      intArray0[8] = (int) '0';
      int[] intArray1 = new int[7];
      intArray1[0] = (int) '0';
      intArray1[1] = 0;
      intArray1[2] = (int) '0';
      intArray1[3] = (int) '0';
      intArray1[4] = (int) '0';
      intArray1[5] = (int) '0';
      intArray1[6] = (int) '0';
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray1);
      equalsBuilder5.append(longArray0, longArray0);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      Pair<IDKey, IDKey> pair0 = EqualsBuilder.getRegisterPair(object0, object0);
      Object object1 = new Object();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", '";
      EqualsBuilder.reflectionEquals((Object) pair0, object1, true, (Class<?>) class0, stringArray0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-435);
      intArray0[1] = (-2470);
      intArray0[2] = 4955;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-2974L), (long) (-2470));
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(true);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(0, (-1871));
      assertSame(equalsBuilder6, equalsBuilder4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[5] = (Object) equalsBuilder0;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) equalsBuilder0;
      objectArray1[1] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-121), (byte) (-121));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0);
      equalsBuilder5.append((byte[]) null, (byte[]) null);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 975;
      intArray0[1] = 545;
      intArray0[2] = 41;
      intArray0[3] = 3257;
      intArray0[4] = 36;
      int[] intArray1 = new int[6];
      intArray1[0] = 545;
      intArray1[1] = 41;
      intArray1[2] = 3257;
      intArray1[3] = 3257;
      intArray1[4] = 545;
      intArray1[5] = 975;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object[]) null, (Object[]) null);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((Object) equalsBuilder1, (Object) equalsBuilder0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0, 0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((float) 3257, (float) 3257);
      equalsBuilder5.append((float) 41, (float) 41);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder3.build());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte[]) null, (byte[]) null);
      float[] floatArray0 = new float[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, (float[]) null);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(1L, 0L);
      Boolean boolean0 = equalsBuilder3.build();
      int[] intArray0 = new int[8];
      intArray0[0] = 772;
      intArray0[1] = (-1227);
      intArray0[2] = 40;
      intArray0[3] = 0;
      intArray0[4] = 41;
      intArray0[5] = (-2884);
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 41;
      intArray1[4] = (-1227);
      EqualsBuilder equalsBuilder4 = equalsBuilder2.append(intArray0, intArray1);
      Pair<IDKey, IDKey> pair0 = EqualsBuilder.getRegisterPair(boolean0, equalsBuilder4);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      Class<Boolean> class0 = Boolean.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i<i:=V uyp";
      stringArray0[1] = "";
      stringArray0[2] = "iBxK,L";
      boolean boolean0 = EqualsBuilder.reflectionEquals(object0, object0, false, class0, stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(40, 40);
      boolean boolean0 = equalsBuilder2.isEquals();
      assertTrue(boolean0);
      
      equalsBuilder0.append(0L, 0L);
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 40;
      intArray0[2] = 40;
      intArray0[3] = 40;
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append((int[]) null, intArray0);
      IDKey iDKey0 = new IDKey(equalsBuilder3);
      IDKey iDKey1 = new IDKey((Object) null);
      EqualsBuilder.getRegisterPair(iDKey0, iDKey1);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2503.13);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 714.872934;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.5;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2424.3);
      doubleArray1[2] = 714.872934;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-1432.076F), (-1432.076F));
      boolean[] booleanArray0 = new boolean[0];
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append('T', 'c');
      equalsBuilder5.append(false, false);
      assertFalse(equalsBuilder3.isEquals());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((long[]) null, (long[]) null);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1094;
      shortArray0[2] = (short)36;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, (short[]) null);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short) (-2026), (short) (-1));
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-50), (byte)74);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)1094;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short)36;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (byte) (-50);
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (double) (byte) (-50);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0);
      equalsBuilder5.append((short) (-3277), (short) (byte) (-50));
      equalsBuilder5.setEquals(true);
      equalsBuilder5.append((Object) equalsBuilder3, (Object) equalsBuilder0);
      equalsBuilder1.append((float) (short) (-1), 1751.04F);
      assertFalse(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append('9', 'B');
      Boolean boolean0 = Boolean.FALSE;
      EqualsBuilder equalsBuilder2 = new EqualsBuilder();
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '9';
      longArray0[1] = (long) 'B';
      longArray0[2] = (long) '9';
      longArray0[3] = (long) 'B';
      longArray0[4] = (long) '9';
      longArray0[5] = (long) 'B';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);
      EqualsBuilder.unregister(boolean0, equalsBuilder2);
      equalsBuilder1.append((byte) (-86), (byte)0);
      equalsBuilder0.append(longArray0, longArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '9';
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) '9';
      equalsBuilder3.append(intArray0, intArray0);
      assertTrue(equalsBuilder2.isEquals());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append('w', 'w');
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'w';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((Object) equalsBuilder0, (Object) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = '@';
      charArray0[5] = 'w';
      charArray0[6] = 'w';
      charArray0[7] = '7';
      charArray0[8] = 'w';
      char[] charArray1 = new char[8];
      charArray1[0] = '7';
      charArray1[1] = '@';
      charArray1[2] = '@';
      charArray1[3] = '7';
      charArray1[4] = 'w';
      charArray1[5] = '7';
      charArray1[6] = '7';
      charArray1[7] = 'w';
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray1);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-85), (byte) (-85));
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((double) 119.0F, (double) (byte) (-85));
      assertSame(equalsBuilder6, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1), (short) (-1831));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((long) (short) (-1), (long) (short) (-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short)0, (short) (-438));
      Boolean boolean0 = equalsBuilder0.build();
      IDKey iDKey0 = new IDKey(equalsBuilder4);
      IDKey iDKey1 = new IDKey(iDKey0);
      EqualsBuilder.getRegisterPair(boolean0, iDKey1);
      equalsBuilder4.appendSuper(false);
      equalsBuilder0.append((-2306.2883F), 3129.99F);
      equalsBuilder3.appendSuper(false);
      Object object0 = new Object();
      EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder3, false);
      Object object1 = new Object();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-438);
      floatArray0[1] = (float) (short) (-438);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short) (-1);
      float[] floatArray1 = new float[0];
      EqualsBuilder equalsBuilder5 = equalsBuilder2.append(floatArray0, floatArray1);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6";
      stringArray0[1] = "X0d5sI`kw?!1";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.lang3.tuple.MutablePair";
      boolean boolean1 = EqualsBuilder.reflectionEquals(object1, (Object) equalsBuilder5, false, (Class<?>) class0, stringArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[1];
      longArray0[0] = (-2776L);
      long[] longArray1 = new long[8];
      longArray1[0] = (-2776L);
      longArray1[1] = (-2776L);
      longArray1[2] = (-2776L);
      longArray1[3] = (-2776L);
      longArray1[4] = 0L;
      longArray1[5] = (-2776L);
      longArray1[6] = (-2776L);
      longArray1[7] = (-2776L);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((Object) equalsBuilder1, (Object) iDKey0);
      equalsBuilder0.append((Object) equalsBuilder1, (Object) equalsBuilder2);
      equalsBuilder0.setEquals(false);
      equalsBuilder0.reset();
      assertTrue(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IDKey iDKey0 = new IDKey("j<w?_Kh");
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "j<w?_Kh";
      stringArray0[1] = "j<w?_Kh";
      stringArray0[2] = "j<w?_Kh";
      stringArray0[3] = "j<w?_Kh";
      stringArray0[4] = "j<w?_Kh";
      EqualsBuilder.reflectionEquals((Object) iDKey0, object0, stringArray0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[2];
      intArray0[0] = (-504);
      intArray0[1] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-504);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (-504);
      floatArray1[1] = (float) (-504);
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((byte)0, (byte)1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(' ', '8');
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(959, 0);
      equalsBuilder5.reset();
      assertTrue(equalsBuilder1.build());
      assertTrue(equalsBuilder2.isEquals());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Class<Integer> class0 = Integer.class;
      EqualsBuilder.reflectionEquals(object0, object1, true, class0, (String[]) null);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'j';
      charArray0[2] = '/';
      charArray0[3] = 'Y';
      charArray0[4] = 'I';
      charArray0[5] = 'L';
      charArray0[6] = 'f';
      charArray0[7] = 'g';
      char[] charArray1 = new char[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray1);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'I';
      intArray0[3] = (int) 'Y';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'L';
      intArray0[6] = (int) 'Y';
      intArray0[7] = (int) 'Y';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(intArray0, intArray0);
      Object object2 = new Object();
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(object2, (Object) equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((char[]) null, (char[]) null);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0L, 0L);
      assertTrue(equalsBuilder2.isEquals());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1.0F;
      floatArray1[1] = (float) 0L;
      floatArray1[2] = (float) 0L;
      floatArray1[3] = 0.0F;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1492.6886F, 0.0F);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-15), (byte) (-102));
      equalsBuilder5.append(true, true);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pair<IDKey, IDKey> pair0 = EqualsBuilder.getRegisterPair("", "Q}YzBBmJk|YS,");
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EqualsBuilder.reflectionEquals((Object) "`bo", (Object) "Q}YzBBmJk|YS,", (Collection<String>) linkedHashSet0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)118;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pair0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) equalsBuilder0;
      equalsBuilder0.append(objectArray0, objectArray0);
      floatArray0[1] = (float) (byte)118;
      floatArray0[2] = (float) (byte)118;
      floatArray0[3] = (float) (byte)118;
      floatArray0[4] = (float) (byte)118;
      floatArray0[5] = (float) (byte)118;
      floatArray0[6] = (float) (byte)118;
      floatArray0[7] = (float) (byte)118;
      equalsBuilder0.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte)118, (byte)118);
      assertTrue(equalsBuilder1.isEquals());
      
      equalsBuilder1.append((-845), (int) (byte)118);
      equalsBuilder1.append((int) (byte)118, (-916));
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1.5, 1.5);
      assertTrue(equalsBuilder1.isEquals());
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte) (-7), (byte) (-25));
      long[] longArray0 = new long[6];
      longArray0[0] = (-3078L);
      longArray0[1] = (long) (byte) (-7);
      longArray0[2] = (long) (byte) (-25);
      longArray0[3] = (long) (byte) (-7);
      longArray0[4] = (long) (byte) (-7);
      longArray0[5] = (long) (byte) (-7);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);
      boolean[] booleanArray0 = new boolean[0];
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(true, true);
      equalsBuilder5.append(true, false);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) equalsBuilder0;
      objectArray1[1] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(false, false);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short)0, (short) (-406));
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((double) (short) (-406), (-1.0));
      equalsBuilder3.append((byte)68, (byte) (-56));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(0.0F, 0.0F);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append('-', '>');
      equalsBuilder6.append((int) (short)0, (int) (short)0);
      Boolean boolean0 = Boolean.TRUE;
      equalsBuilder0.append((Object) boolean0, (Object) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)68;
      intArray0[1] = (int) (byte) (-56);
      intArray0[2] = (int) (byte) (-56);
      intArray0[3] = (int) (byte)68;
      EqualsBuilder equalsBuilder7 = equalsBuilder6.append(intArray0, intArray0);
      assertSame(equalsBuilder7, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1759), (short) (-1759));
      Boolean boolean0 = Boolean.FALSE;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      equalsBuilder0.append(booleanArray0, booleanArray0);
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean0, false);
      Boolean boolean2 = equalsBuilder1.build();
      assertTrue(boolean2.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1233;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((float[]) null, (float[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'l';
      charArray0[2] = '4';
      charArray0[3] = 'm';
      charArray0[4] = 'e';
      charArray0[5] = '/';
      charArray0[6] = '_';
      charArray0[7] = 'y';
      equalsBuilder2.append(charArray0, charArray0);
      Boolean boolean0 = equalsBuilder0.build();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      equalsBuilder1.append(byteArray0, byteArray1);
      assertFalse(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-105);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, (byte[]) null);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 4134);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short) (byte) (-105), (short) (-1));
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) 0;
      floatArray0[2] = 0.0F;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0);
      assertFalse(equalsBuilder0.isEquals());
      
      short[] shortArray0 = new short[1];
      equalsBuilder4.reset();
      shortArray0[0] = (short) (byte)0;
      equalsBuilder0.append(shortArray0, shortArray0);
      equalsBuilder5.append((Object) "", (Object) "");
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1387.0501147;
      doubleArray0[1] = (-1869.72802182435);
      doubleArray0[2] = 2339.7;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1190.4367577);
      doubleArray0[6] = (-2674.9975652346816);
      doubleArray0[7] = 1429.89134236;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(true, true);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append('!', '!');
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-1023), (-1023));
      Object object0 = new Object();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder4, object0, true);
      assertFalse(boolean0);
      assertTrue(equalsBuilder4.isEquals());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(true);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((int[]) null, (int[]) null);
      Class<Boolean> class0 = Boolean.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder2, (Object) "", true, (Class<?>) class0, stringArray0);
      assertFalse(boolean0);
      assertTrue(equalsBuilder2.isEquals());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IDKey iDKey0 = new IDKey(linkedList0);
      EqualsBuilder.unregister(equalsBuilder0, iDKey0);
      ImmutablePair<Object, IDKey>[] immutablePairArray0 = (ImmutablePair<Object, IDKey>[]) Array.newInstance(ImmutablePair.class, 1);
      IDKey iDKey1 = new IDKey("");
      ImmutablePair<Object, IDKey> immutablePair0 = new ImmutablePair<Object, IDKey>(iDKey0, iDKey1);
      immutablePairArray0[0] = immutablePair0;
      linkedList0.toArray(immutablePairArray0);
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) equalsBuilder0, (Collection<String>) linkedList0);
      assertTrue(boolean0);
      
      equalsBuilder0.append('}', '}');
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(true);
      assertTrue(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      EqualsBuilder.unregister(object0, object1);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'u';
      charArray0[2] = 'G';
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short)0, (short)0);
      equalsBuilder0.build();
      equalsBuilder1.append((short) (-2033), (short) (-957));
      equalsBuilder0.reset();
      equalsBuilder1.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append((long) (short)0, (long) (short) (-2033));
      equalsBuilder3.reset();
      EqualsBuilder equalsBuilder4 = equalsBuilder2.append((int) (short) (-2033), (int) (short) (-957));
      assertFalse(equalsBuilder1.build());
      assertFalse(equalsBuilder4.build());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      char[] charArray1 = new char[1];
      charArray1[0] = ']';
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray1);
      assertTrue(equalsBuilder1.isEquals());
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short)4, (short) (-422));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(2251.7812F, 2251.7812F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)4;
      doubleArray0[1] = (double) 2251.7812F;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-422);
      intArray0[1] = (int) ']';
      intArray0[2] = (int) (short)4;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray0);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder5.isEquals());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder.unregister(object0, object0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(object0, object0);
      assertTrue(equalsBuilder1.isEquals());
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('z', 'I');
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      equalsBuilder2.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(230.227624869, 230.227624869);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-391);
      shortArray0[1] = (short) (-3232);
      equalsBuilder3.append(shortArray0, shortArray0);
      assertFalse(equalsBuilder1.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(false);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((-1569L), (-1569L));
      int[] intArray0 = new int[4];
      intArray0[0] = 2328;
      intArray0[1] = (-30);
      intArray0[2] = 166;
      intArray0[3] = (-1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, (int[]) null);
      assertSame(equalsBuilder3, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[3];
      intArray0[0] = (-3537);
      intArray0[1] = (-2681);
      intArray0[2] = 40;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((long) (-2681), 1L);
      IDKey iDKey0 = new IDKey(equalsBuilder2);
      IDKey iDKey1 = new IDKey(equalsBuilder1);
      EqualsBuilder.register(iDKey0, iDKey1);
      equalsBuilder0.append(2014L, 0L);
      assertFalse(equalsBuilder0.build());
      
      equalsBuilder2.setEquals(true);
      equalsBuilder0.append(intArray0, intArray0);
      assertTrue(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((int[]) null, (int[]) null);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short)0, (short)0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(booleanArray0, booleanArray0);
      assertTrue(equalsBuilder3.isEquals());
      
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(true, false);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(longArray0, longArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      equalsBuilder5.append(objectArray0, objectArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.reset();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder1, (Object) "", (Collection<String>) linkedHashSet0);
      assertFalse(boolean0);
      assertTrue(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      Object object0 = new Object();
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) equalsBuilder0, object0);
      float[] floatArray0 = new float[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-1), (byte) (-81));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0);
      assertSame(equalsBuilder5, equalsBuilder0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3804.5);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3729.19670944;
      doubleArray0[4] = 0.0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short) (-984), (short) (-984));
      assertTrue(equalsBuilder3.isEquals());
      
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((float) (short) (-984), 0.0F);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((long) (short) (-984), (long) (short) (-984));
      Object[] objectArray0 = new Object[0];
      equalsBuilder5.append(objectArray0, objectArray0);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(40, 40);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4495;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(shortArray0, shortArray0);
      assertTrue(equalsBuilder4.build());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      equalsBuilder0.append(objectArray0, objectArray0);
      EqualsBuilder.getRegisterPair(equalsBuilder0, equalsBuilder0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-2782), (short) (-2782));
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder.getRegisterPair(object0, object0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = new short[0];
      equalsBuilder0.append(shortArray0, shortArray1);
      equalsBuilder0.append(3696.4642587638, 3696.4642587638);
      equalsBuilder0.append(true, true);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, true);
      float[] floatArray0 = new float[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(')', 't');
      assertSame(equalsBuilder3, equalsBuilder2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 960.0F;
      floatArray0[2] = 0.0F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0.0F, 0.0F);
      boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder2, false);
      assertFalse(boolean0);
      assertTrue(equalsBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EqualsBuilder.getRegistry();
      Boolean boolean0 = Boolean.TRUE;
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{Hasrw~";
      stringArray0[1] = "";
      stringArray0[2] = "1t`64-S+ft/K";
      stringArray0[3] = "";
      stringArray0[4] = "f?QK%OXRYCva{~wH|u";
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) null, (Object) boolean0, false, (Class<?>) class0, stringArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IDKey iDKey0 = new IDKey(" in an array of ");
      EqualsBuilder.getRegisterPair(iDKey0, (Object) null);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)40;
      shortArray0[1] = (short) (-316);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(false, false);
      assertTrue(equalsBuilder2.isEquals());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(booleanArray0, booleanArray1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)40;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(doubleArray0, doubleArray0);
      boolean boolean0 = EqualsBuilder.isRegistered(equalsBuilder4, equalsBuilder4);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-74), (-74));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (-74), (float) (-74));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short)406, (short)406);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short[]) null, (short[]) null);
      Object object0 = new Object();
      boolean boolean0 = EqualsBuilder.isRegistered(equalsBuilder4, object0);
      assertFalse(boolean0);
      assertTrue(equalsBuilder4.build());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1516.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1316.84359244;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short)0, (short)0);
      Object object0 = new Object();
      Object object1 = new Object();
      EqualsBuilder.register(object0, object1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((long) (short)0, (long) (short)0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'q';
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      equalsBuilder2.append(intArray0, intArray0);
      assertTrue(equalsBuilder2.build());
      
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte)2, (byte)15);
      boolean boolean0 = equalsBuilder5.isEquals();
      assertFalse(equalsBuilder2.build());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(421L, 421L);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((byte) (-26), (byte) (-26));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0);
      assertTrue(equalsBuilder4.isEquals());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-84);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray0);
      assertTrue(equalsBuilder1.isEquals());
      
      equalsBuilder0.appendSuper(false);
      Object object0 = new Object();
      EqualsBuilder.getRegisterPair(equalsBuilder1, object0);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) equalsBuilder1;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.appendSuper(false);
      byte[] byteArray0 = new byte[0];
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(byteArray0, byteArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte)11, (byte)1);
      assertSame(equalsBuilder2, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(2078, (-2143));
      equalsBuilder1.append((short)40, (short)0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(0L, 0L);
      equalsBuilder0.append((short) (-430), (short) (-430));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(2878, (-3118));
      assertFalse(equalsBuilder3.isEquals());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1), (short) (-1));
      assertTrue(equalsBuilder1.isEquals());
      
      equalsBuilder1.append(0.0, (-2440.69764));
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Set<Pair<IDKey, IDKey>> set0 = EqualsBuilder.getRegistry();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-3205);
      longArray0[1] = (long) (-3205);
      longArray0[3] = (long) (-3205);
      equalsBuilder0.append((Object) set0, (Object) set0);
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A^~AVSb)S";
      stringArray0[1] = "org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle";
      stringArray0[2] = "BVuI?48";
      EqualsBuilder.reflectionEquals(object0, (Object) set0, stringArray0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte)78, (byte)78);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((-1848), (-1848));
      Boolean boolean0 = Boolean.valueOf("E-$?-%");
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1848);
      floatArray0[1] = (float) (-1848);
      floatArray0[2] = (float) (-1848);
      floatArray0[3] = (float) (byte)78;
      floatArray0[4] = (float) (-1848);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-1848);
      floatArray0[7] = (-1.0F);
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) (-1848);
      floatArray1[2] = (float) (byte)78;
      floatArray1[3] = (float) (-1848);
      floatArray1[4] = (float) (byte)78;
      floatArray1[5] = (float) (byte)78;
      floatArray1[6] = (float) (byte)78;
      floatArray1[7] = 0.0F;
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append(floatArray0, floatArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder2.append((Object) boolean0, (Object) equalsBuilder3);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)78;
      intArray0[1] = (-1848);
      intArray0[2] = (int) (byte)78;
      intArray0[3] = (int) (byte)78;
      intArray0[4] = 1;
      intArray0[5] = (int) (byte)78;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short) (byte)78, (short)2);
      EqualsBuilder equalsBuilder7 = equalsBuilder6.append((float) 78, 0.0F);
      assertSame(equalsBuilder7, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      equalsBuilder0.append(true, true);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "Q@a+w^PT*i";
      EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, true, (Class<?>) class0, stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      MutablePair<IDKey, IDKey> mutablePair0 = new MutablePair<IDKey, IDKey>();
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (byte)2;
      EqualsBuilder.reflectionEquals((Object) stringArray0[0], (Object) boolean0, stringArray0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-3995L), (-3995L));
      assertTrue(equalsBuilder1.isEquals());
      
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) (byte)2;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray1);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, true);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1865, 1865);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) 1865, (double) 1865);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((long) 1865, (long) 1865);
      assertFalse(equalsBuilder6.isEquals());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1067), (short) (-1067));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('S', 'S');
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, (float[]) null);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.appendSuper(true);
      assertTrue(equalsBuilder4.build());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) equalsBuilder1;
      objectArray0[1] = (Object) equalsBuilder4;
      objectArray0[2] = (Object) equalsBuilder0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'S';
      longArray0[1] = (long) (short) (-1067);
      longArray0[2] = (long) 'S';
      longArray0[3] = (-1L);
      longArray0[4] = (long) (short) (-1067);
      longArray0[5] = (long) (short) (-1067);
      longArray0[6] = (long) (short) (-1067);
      equalsBuilder2.append((long[]) null, longArray0);
      objectArray0[3] = (Object) equalsBuilder1;
      EqualsBuilder.getRegistry();
      objectArray0[4] = (Object) equalsBuilder3;
      objectArray0[5] = (Object) equalsBuilder3;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)73;
      equalsBuilder5.append(byteArray0, byteArray0);
      equalsBuilder3.append(1.0F, 1.0F);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder.unregister(object0, object0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) equalsBuilder0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray1[2] = object1;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0.0F, 1.0F);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(true, true);
      Object object2 = new Object();
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(objectArray0[0], object2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0);
      equalsBuilder5.append((byte) (-72), (byte) (-72));
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder4.isEquals());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) equalsBuilder0;
      objectArray1[1] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder1 = new EqualsBuilder();
      equalsBuilder1.append((double) (short) (-406), (-1.0));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte)68, (byte) (-56));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append('-', '9');
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((int) (short)0, (int) (short)0);
      equalsBuilder4.append(false, true);
      Boolean boolean0 = Boolean.TRUE;
      equalsBuilder0.append((Object) null, objectArray1[1]);
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (byte)68;
      intArray0[1] = (int) (byte)68;
      intArray0[2] = (int) (byte) (-56);
      intArray0[3] = (int) (byte)68;
      EqualsBuilder equalsBuilder5 = equalsBuilder3.append(intArray0, intArray0);
      assertSame(equalsBuilder5, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1233;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((float[]) null, (float[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'l';
      charArray0[2] = '4';
      charArray0[3] = 'm';
      charArray0[4] = 'e';
      charArray0[5] = '/';
      charArray0[6] = '_';
      charArray0[7] = 'y';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray0);
      assertTrue(equalsBuilder3.isEquals());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = true;
      equalsBuilder3.append(booleanArray0, booleanArray1);
      equalsBuilder0.build();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      equalsBuilder1.append(byteArray0, byteArray0);
      assertFalse(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1233;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((float[]) null, (float[]) null);
      char[] charArray0 = new char[10];
      charArray0[0] = '6';
      charArray0[1] = 'l';
      charArray0[2] = '4';
      charArray0[3] = 'm';
      charArray0[4] = 'e';
      charArray0[5] = '/';
      charArray0[6] = '_';
      charArray0[7] = 'y';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray0);
      assertTrue(equalsBuilder3.isEquals());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = true;
      equalsBuilder3.append(booleanArray0, booleanArray1);
      equalsBuilder0.build();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      equalsBuilder1.append(byteArray0, byteArray0);
      assertFalse(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[2];
      intArray0[0] = (-5682);
      int[] intArray1 = new int[2];
      intArray1[0] = (-330);
      intArray1[1] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)1;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-330);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(false, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-330);
      doubleArray0[3] = (double) (byte)0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = (double) (byte)1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      equalsBuilder4.append(doubleArray0, doubleArray1);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)36;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(byteArray1, byteArray0);
      assertSame(equalsBuilder0, equalsBuilder5);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[0];
      EqualsBuilder equalsBuilder1 = new EqualsBuilder();
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float) (-1L), (float) (-1L));
      assertTrue(equalsBuilder3.build());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder1;
      objectArray0[2] = (Object) equalsBuilder2;
      objectArray0[3] = (Object) equalsBuilder0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      equalsBuilder0.append((double[]) null, doubleArray0);
      objectArray0[4] = (Object) equalsBuilder2;
      objectArray0[5] = (Object) equalsBuilder0;
      objectArray0[6] = (Object) equalsBuilder2;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) equalsBuilder3;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) equalsBuilder3;
      equalsBuilder3.append(objectArray0, objectArray1);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) (-1L);
      floatArray0[7] = (float) (-1L);
      floatArray0[8] = (float) (-1L);
      equalsBuilder2.append(floatArray0, floatArray0);
      boolean[] booleanArray0 = new boolean[0];
      equalsBuilder3.append(booleanArray0, booleanArray0);
      assertFalse(equalsBuilder2.isEquals());
      assertFalse(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1233;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      equalsBuilder0.append((float[]) null, (float[]) null);
      Boolean boolean0 = equalsBuilder0.build();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      equalsBuilder1.append(byteArray0, byteArray1);
      assertFalse(equalsBuilder1.isEquals());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 3006.4526F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, (float[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = 'Q';
      charArray0[2] = '{';
      charArray0[2] = '`';
      charArray0[4] = '{';
      charArray0[5] = 'n';
      charArray0[6] = 's';
      charArray0[7] = '8';
      equalsBuilder0.reset();
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(1.0F, 0.0F);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((Object) equalsBuilder1, (Object) equalsBuilder0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(0.0, (double) 1.0F);
      assertSame(equalsBuilder2, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);
      assertTrue(equalsBuilder1.isEquals());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-690.4802009552836);
      doubleArray0[2] = (-690.4802009552836);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-690.4802009552836);
      doubleArray1[3] = 1.0;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-690.4802009552836), (-1445.7440248));
      Integer integer0 = new Integer((-4784));
      EqualsBuilder.isRegistered(integer0, "]lEx>?>");
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-18.816923F), (-18.816923F));
      equalsBuilder4.append(406, 406);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder4.isEquals());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      assertTrue(equalsBuilder1.isEquals());
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('F', '&');
      Object[] objectArray0 = new Object[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short) (-1759), (short) (-1759));
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'F';
      intArray0[1] = (int) 'F';
      intArray0[2] = (-599);
      intArray0[3] = (int) 'F';
      intArray0[4] = (int) 'F';
      intArray0[5] = (int) (short) (-1759);
      intArray0[6] = (int) '&';
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(shortArray0, shortArray0);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(equalsBuilder6.build());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) iDKey0, (Object) iDKey0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(281L, 281L);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, (float[]) null);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)85, (byte)85);
      short[] shortArray0 = new short[6];
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      char[] charArray1 = new char[1];
      charArray1[0] = '/';
      equalsBuilder4.append(charArray0, charArray1);
      shortArray0[0] = (short) (byte)85;
      shortArray0[1] = (short) (byte)85;
      shortArray0[2] = (short) (byte)85;
      shortArray0[3] = (short) (byte)85;
      shortArray0[4] = (short) (byte)85;
      shortArray0[5] = (short) (byte)85;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(shortArray0, shortArray0);
      equalsBuilder5.append((short)0, (short)85);
      EqualsBuilder.reflectionEquals((Object) equalsBuilder2, (Object) equalsBuilder5, false);
      equalsBuilder4.append(charArray1, charArray1);
      equalsBuilder5.append((Object[]) null, (Object[]) null);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-501L);
      longArray0[1] = (-1500L);
      longArray0[2] = 1L;
      longArray0[3] = 4647091106607819706L;
      longArray0[4] = 4634837335261839360L;
      longArray0[5] = 4573L;
      long[] longArray1 = new long[6];
      longArray1[0] = 4573L;
      longArray1[1] = 4634837335261839360L;
      longArray1[2] = (-501L);
      longArray1[3] = 1L;
      longArray1[4] = (-501L);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (-501L), (float) (-501L));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-772.5231F);
      floatArray0[1] = (float) 4634837335261839360L;
      floatArray0[2] = (float) (-1500L);
      floatArray0[3] = (float) 1L;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 4634837335261839360L;
      floatArray0[6] = (float) 4647091106607819706L;
      floatArray0[7] = (float) (-501L);
      equalsBuilder2.append(floatArray0, floatArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(3595.0, 3595.0);
      long[] longArray0 = new long[6];
      longArray0[1] = (-1500L);
      longArray0[2] = 1L;
      longArray0[3] = 4647091106607819706L;
      longArray0[4] = 4634837335261839360L;
      longArray0[5] = 4573L;
      long[] longArray1 = new long[5];
      longArray1[0] = 4573L;
      longArray1[1] = 4634837335261839360L;
      longArray1[2] = 4104L;
      longArray1[3] = 1L;
      longArray1[4] = (-501L);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-10.620417F), (float) (-501L));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-772.5231F);
      floatArray0[2] = 1230.0F;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) (-1500L);
      floatArray0[5] = (float) 4634837335261839360L;
      floatArray0[6] = (float) 4647091106607819706L;
      floatArray0[7] = (-10.620417F);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1500L);
      doubleArray0[1] = (double) (-1500L);
      doubleArray0[2] = 2258.6732;
      doubleArray0[3] = (double) (-1500.0F);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(longArray0, longArray0);
      assertSame(equalsBuilder6, equalsBuilder5);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      equalsBuilder0.append((byte) (-1), (byte)2);
      Object object0 = new Object();
      EqualsBuilder.reflectionEquals((Object) class0, object0, true);
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "Q@a+w^PT*i";
      EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, true, (Class<?>) class0, stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      MutablePair<IDKey, IDKey> mutablePair0 = new MutablePair<IDKey, IDKey>();
      Boolean boolean1 = equalsBuilder1.build();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-1);
      boolean boolean2 = EqualsBuilder.reflectionEquals((Object) "", (Object) boolean1, stringArray0);
      assertFalse(equalsBuilder0.build());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Boolean boolean0 = Boolean.valueOf(false);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) boolean0, (Object) boolean0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)0;
      equalsBuilder1.append(byteArray0, byteArray0);
      Boolean.compare(true, false);
      Boolean.logicalXor(true, false);
      equalsBuilder1.append('W', 'E');
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 'E';
      EqualsBuilder.unregister(boolean0, (Object) null);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((long) 1, 110L);
      assertFalse(equalsBuilder2.isEquals());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IDKey iDKey0 = new IDKey("j<w?_Kh");
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "j<w?_Kh";
      stringArray0[1] = "j<w?_Kh";
      stringArray0[2] = "j<w?_Kh";
      stringArray0[3] = "j<w?_Kh";
      stringArray0[4] = "j<w?_Kh";
      EqualsBuilder.reflectionEquals((Object) iDKey0, object0, stringArray0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[7];
      intArray0[0] = (-504);
      intArray0[1] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-504);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (-504);
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray1);
      equalsBuilder2.append((byte)0, (byte)1);
      Integer integer0 = new Integer(231);
      EqualsBuilder.unregister(integer0, "j<w?_Kh");
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(959, 0);
      equalsBuilder3.reset();
      LinkedHashSet<Pair<IDKey, IDKey>> linkedHashSet0 = new LinkedHashSet<Pair<IDKey, IDKey>>();
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) equalsBuilder1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[6] = (Object) equalsBuilder1;
      objectArray0[7] = (Object) equalsBuilder1;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0);
      double[] doubleArray0 = new double[4];
      equalsBuilder2.append((char[]) null, (char[]) null);
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1537.7445625036;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray0);
      assertTrue(equalsBuilder2.build());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)36;
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = new short[19];
      shortArray1[0] = (short)36;
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short)2;
      shortArray1[3] = (short)36;
      equalsBuilder3.append(shortArray0, shortArray1);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) equalsBuilder1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[6] = (Object) equalsBuilder1;
      objectArray0[7] = (Object) equalsBuilder1;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0);
      double[] doubleArray0 = new double[4];
      equalsBuilder2.append((char[]) null, (char[]) null);
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1537.7445625036;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray0);
      assertTrue(equalsBuilder2.isEquals());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)36;
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short)36;
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short)2;
      shortArray1[3] = (short)36;
      equalsBuilder3.append(shortArray0, shortArray1);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Zjr?BzN";
      stringArray0[1] = "zP;SekJ@";
      EqualsBuilder.reflectionEquals(object1, object0, stringArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((byte) (-26), (byte) (-26));
      ImmutablePair<String, String> immutablePair0 = new ImmutablePair<String, String>("Zjr?BzN", "Zjr?BzN");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "Zjr?BzN", (Object) immutablePair0, (Collection<String>) linkedHashSet0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder2, false);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Unexpected IllegalAccessException";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "<r@0{o";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "KC?%YI}sH3,3PC";
      stringArray1[7] = "eI9+2OG0.v";
      boolean boolean2 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder1, stringArray1);
      //  // Unstable assertion: assertTrue(equalsBuilder1.isEquals());
      
      Class<Integer> class0 = Integer.class;
      boolean boolean3 = EqualsBuilder.reflectionEquals((Object) "", (Object) "KC?%YI}sH3,3PC", true, (Class<?>) class0, stringArray0);
      //  // Unstable assertion: assertTrue(boolean3 == boolean1);
      //  // Unstable assertion: assertFalse(boolean3 == boolean2);
      //  // Unstable assertion: assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) equalsBuilder1;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0);
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-2658);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(shortArray0, shortArray0);
      assertTrue(equalsBuilder1.isEquals());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (short) (-2658);
      doubleArray1[1] = (double) (short)0;
      doubleArray1[2] = (double) (short) (-2658);
      doubleArray1[3] = (double) (short)0;
      doubleArray1[5] = (double) (short) (-2658);
      doubleArray1[6] = (double) (short)0;
      doubleArray1[7] = 0.0;
      equalsBuilder3.append(doubleArray0, doubleArray1);
      assertFalse(equalsBuilder1.build());
      assertFalse(equalsBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-5682);
      int[] intArray1 = new int[2];
      intArray1[0] = (-330);
      intArray1[1] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      byte[] byteArray0 = new byte[7];
      equalsBuilder1.append(byteArray0, byteArray0);
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-16);
      equalsBuilder1.append(byteArray0, byteArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-330);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte)0, (byte)0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(true, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)0;
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)36;
      byteArray1[5] = (byte)0;
      equalsBuilder3.append(byteArray1, byteArray0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30));
      Object object0 = new Object();
      Object object1 = new Object();
      EqualsBuilder.reflectionEquals(object0, object1, (String[]) null);
      equalsBuilder0.appendSuper(false);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F));
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '?';
      charArray0[2] = 'S';
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null);
      Object object2 = new Object();
      EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null);
      Boolean boolean0 = equalsBuilder1.build();
      IDKey iDKey0 = new IDKey(boolean0);
      EqualsBuilder.isRegistered(equalsBuilder4, iDKey0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) '<';
      EqualsBuilder equalsBuilder6 = equalsBuilder3.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder7 = equalsBuilder3.append(object2, (Object) equalsBuilder6);
      EqualsBuilder equalsBuilder8 = equalsBuilder1.append((byte) (-30), (byte) (-30));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EqualsBuilder.reflectionEquals((Object) equalsBuilder6, (Object) equalsBuilder8, (Collection<String>) linkedHashSet0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) '?';
      doubleArray0[2] = (double) (-941.3923F);
      equalsBuilder7.append(doubleArray0, doubleArray0);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append(4401, 4401);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(4401, 4401);
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)36;
      shortArray0[4] = (short) (-1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      assertTrue(equalsBuilder2.build());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = '+';
      charArray0[2] = '|';
      charArray0[3] = '&';
      charArray0[4] = '';
      charArray0[5] = '|';
      charArray0[6] = '.';
      charArray0[7] = '%';
      char[] charArray1 = new char[7];
      charArray1[0] = '';
      charArray1[1] = '|';
      charArray1[2] = '+';
      charArray1[3] = 'b';
      charArray1[4] = '+';
      charArray1[5] = '#';
      charArray1[6] = '|';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((long) (short) (-1), (long) (short)36);
      equalsBuilder4.appendSuper(true);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1759), (short) (-1759));
      Boolean boolean0 = Boolean.FALSE;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[2] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[5];
      stringArray0[2] = "C^F>gFJs/3KDD";
      stringArray0[3] = ";J2t!!|]*=k9}";
      stringArray0[4] = "7]~L5MTH7v9z+a3";
      EqualsBuilder.reflectionEquals((Object) boolean0, object0, false, (Class<?>) class0, stringArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(booleanArray0, booleanArray0);
      equalsBuilder2.append(booleanArray0, (boolean[]) null);
      EqualsBuilder equalsBuilder3 = new EqualsBuilder();
      EqualsBuilder.reflectionEquals((Object) equalsBuilder2, (Object) equalsBuilder3, true);
      assertTrue(equalsBuilder3.isEquals());
      
      EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean0, false);
      Boolean boolean1 = equalsBuilder1.build();
      assertFalse(boolean1);
  }
}
