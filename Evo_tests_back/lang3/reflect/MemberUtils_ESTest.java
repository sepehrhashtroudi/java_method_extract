/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 04:37:46 GMT 2021
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import org.apache.commons.lang3.reflect.MemberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemberUtils_ESTest extends MemberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        MemberUtils.compareParameterTypes((Class<?>[]) null, (Class<?>[]) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MemberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 7);
      Class<Field> class0 = Field.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = classArray0[1];
      classArray0[3] = classArray0[1];
      classArray0[4] = classArray0[2];
      classArray0[5] = classArray0[3];
      classArray0[6] = classArray0[1];
      Class<Method>[] classArray1 = (Class<Method>[]) Array.newInstance(Class.class, 8);
      // Undeclared exception!
      try { 
        MemberUtils.compareParameterTypes(classArray0, classArray0, classArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.reflect.MemberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      int int0 = MemberUtils.compareParameterTypes(classArray0, classArray0, classArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 2);
      Class<Method> class0 = Method.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer>[] classArray1 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class1 = Integer.class;
      classArray1[0] = class1;
      classArray1[1] = class1;
      int int0 = MemberUtils.compareParameterTypes(classArray0, classArray1, classArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      Class<Field>[] classArray1 = (Class<Field>[]) Array.newInstance(Class.class, 5);
      Class<Field> class1 = Field.class;
      classArray1[0] = class1;
      classArray1[1] = class1;
      classArray1[2] = class1;
      classArray1[3] = class1;
      classArray1[4] = class1;
      int int0 = MemberUtils.compareParameterTypes(classArray1, classArray0, classArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Member member0 = mock(Member.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(member0).getModifiers();
      doReturn(false).when(member0).isSynthetic();
      boolean boolean0 = MemberUtils.isAccessible(member0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Member member0 = mock(Member.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(member0).getModifiers();
      boolean boolean0 = MemberUtils.isAccessible(member0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Member member0 = mock(Member.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(member0).getModifiers();
      doReturn(true).when(member0).isSynthetic();
      boolean boolean0 = MemberUtils.isAccessible(member0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = MemberUtils.isAccessible((Member) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = MemberUtils.isPackageAccess(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = MemberUtils.isPackageAccess(46);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccessibleObject accessibleObject0 = mock(AccessibleObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(accessibleObject0).isAccessible();
      // Undeclared exception!
      try { 
        MemberUtils.setAccessibleWorkaround(accessibleObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.lang.reflect.AccessibleObject$MockitoMock$1683193429 cannot be cast to java.lang.reflect.Member
         //
         verifyException("org.apache.commons.lang3.reflect.MemberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessibleObject accessibleObject0 = mock(AccessibleObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(accessibleObject0).isAccessible();
      MemberUtils.setAccessibleWorkaround(accessibleObject0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemberUtils.setAccessibleWorkaround((AccessibleObject) null);
  }
}
