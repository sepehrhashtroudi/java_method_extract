/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 04:42:09 GMT 2021
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableDouble;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableDouble_ESTest extends MutableDouble_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Byte byte0 = new Byte((byte)89);
      MutableDouble mutableDouble0 = new MutableDouble((Number) byte0);
      mutableDouble0.add((double) 108L);
      assertEquals(197.0, mutableDouble0.toDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      MutableDouble mutableDouble1 = new MutableDouble((-1640.0216));
      Double double0 = mutableDouble1.toDouble();
      mutableDouble1.setValue((Number) mutableDouble0);
      mutableDouble1.subtract((Number) double0);
      mutableDouble1.toDouble();
      assertEquals("1192.842683", mutableDouble1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(0.0);
      Double double0 = mutableDouble0.toDouble();
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.decrement();
      mutableDouble0.subtract((-447.178917));
      mutableDouble0.toDouble();
      assertEquals((byte) (-1), mutableDouble0.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.decrement();
      mutableDouble0.increment();
      mutableDouble0.subtract((-447.178917));
      long long0 = mutableDouble0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble(254.9);
      long long0 = mutableDouble0.longValue();
      assertEquals(254L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.decrement();
      mutableDouble0.increment();
      mutableDouble0.subtract((-447.178917));
      int int0 = mutableDouble0.intValue();
      assertEquals(0L, mutableDouble0.longValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      mutableDouble0.increment();
      int int0 = mutableDouble0.intValue();
      assertEquals(1.0F, mutableDouble0.floatValue(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.setValue(1.0);
      mutableDouble0.getValue();
      assertEquals((byte)1, mutableDouble0.byteValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.decrement();
      mutableDouble0.increment();
      mutableDouble0.subtract((-447.178917));
      Double double0 = mutableDouble0.getValue();
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.decrement();
      mutableDouble0.subtract((-447.178917));
      mutableDouble0.getValue();
      assertEquals((-1), mutableDouble0.intValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float(0.0);
      MutableDouble mutableDouble0 = new MutableDouble((Number) float0);
      float float1 = mutableDouble0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Byte byte0 = new Byte((byte)89);
      MutableDouble mutableDouble0 = new MutableDouble((Number) byte0);
      mutableDouble0.subtract(1574.5204259);
      float float0 = mutableDouble0.floatValue();
      assertEquals((-1485.5204F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = new Float(0.0);
      MutableDouble mutableDouble0 = new MutableDouble((Number) float0);
      mutableDouble0.setValue(1.0);
      double double0 = mutableDouble0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MutableDouble mutableDouble0 = new MutableDouble((Number) integer0);
      int int0 = mutableDouble0.compareTo(mutableDouble0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      MutableDouble mutableDouble1 = new MutableDouble((-1640.0216));
      int int0 = mutableDouble0.compareTo(mutableDouble1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      MutableDouble mutableDouble1 = new MutableDouble((-1640.0216));
      int int0 = mutableDouble1.compareTo(mutableDouble0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = new Long(916L);
      MutableDouble mutableDouble0 = new MutableDouble((Number) long0);
      // Undeclared exception!
      try { 
        mutableDouble0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      // Undeclared exception!
      try { 
        mutableDouble0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      // Undeclared exception!
      try { 
        mutableDouble0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableDouble mutableDouble0 = null;
      try {
        mutableDouble0 = new MutableDouble("Io@h<.F#>\"eB17+j=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableDouble mutableDouble0 = null;
      try {
        mutableDouble0 = new MutableDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableDouble mutableDouble0 = null;
      try {
        mutableDouble0 = new MutableDouble((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      double double0 = mutableDouble0.doubleValue();
      assertEquals((-447.178917), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      boolean boolean0 = mutableDouble0.equals(mutableDouble0);
      assertTrue(boolean0);
      assertEquals((byte)65, mutableDouble0.byteValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.add((Number) mutableDouble0);
      assertEquals((-894), mutableDouble0.intValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.subtract((-447.178917));
      MutableDouble mutableDouble1 = new MutableDouble((-1640.0216));
      boolean boolean0 = mutableDouble1.equals(mutableDouble0);
      assertEquals(0L, mutableDouble0.longValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble();
      MutableDouble mutableDouble1 = new MutableDouble(mutableDouble0);
      mutableDouble0.increment();
      boolean boolean0 = mutableDouble0.equals(mutableDouble1);
      assertEquals((byte)1, mutableDouble0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.decrement();
      mutableDouble0.increment();
      mutableDouble0.subtract((-447.178917));
      double double0 = mutableDouble0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Byte byte0 = new Byte((byte)89);
      MutableDouble mutableDouble0 = new MutableDouble((Number) byte0);
      String string0 = mutableDouble0.toString();
      assertEquals("89.0", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      Double double0 = mutableDouble0.toDouble();
      assertEquals((-447.178917), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.hashCode();
      assertEquals((-447.178917), mutableDouble0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      long long0 = mutableDouble0.longValue();
      assertEquals((-447L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Byte byte0 = new Byte((byte)89);
      MutableDouble mutableDouble0 = new MutableDouble((Number) byte0);
      boolean boolean0 = mutableDouble0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      int int0 = mutableDouble0.intValue();
      assertEquals((-447), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      Double double0 = mutableDouble0.getValue();
      assertEquals((-447.178917), (double)double0, 0.01);
      
      boolean boolean0 = mutableDouble0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Byte byte0 = new Byte((byte)89);
      MutableDouble mutableDouble0 = new MutableDouble((Number) byte0);
      // Undeclared exception!
      try { 
        mutableDouble0.compareTo((MutableDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble("0");
      assertFalse(mutableDouble0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Byte byte0 = new Byte((byte)89);
      MutableDouble mutableDouble0 = new MutableDouble((Number) byte0);
      float float0 = mutableDouble0.floatValue();
      assertEquals(89.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));
      mutableDouble0.isInfinite();
      assertEquals((-447), mutableDouble0.intValue());
  }
}
