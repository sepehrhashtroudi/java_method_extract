/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 14:10:41 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableInt_ESTest extends MutableInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.subtract((-1163));
      MutableInt mutableInt1 = new MutableInt(1);
      boolean boolean0 = mutableInt0.equals(mutableInt1);
      assertEquals(1163L, mutableInt0.longValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt("-134");
      assertEquals((-134.0F), mutableInt0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.setValue(1);
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-564));
      mutableInt0.increment();
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      mutableInt1.subtract((-564));
      mutableInt1.subtract((Number) mutableInt0);
      mutableInt0.add((Number) mutableInt1);
      long long0 = mutableInt0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.subtract(446);
      long long0 = mutableInt0.longValue();
      assertEquals((-446L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(740);
      int int0 = mutableInt0.intValue();
      assertEquals(740, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.subtract(446);
      int int0 = mutableInt0.intValue();
      assertEquals((-446), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Short short0 = new Short((short) (-558));
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      mutableInt0.add(3181);
      Integer integer0 = mutableInt0.getValue();
      assertEquals(2623, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Byte byte0 = new Byte((byte) (-104));
      mutableInt0.subtract((Number) byte0);
      mutableInt0.subtract((Number) byte0);
      mutableInt0.add((Number) byte0);
      mutableInt0.subtract(446);
      Integer integer0 = mutableInt0.getValue();
      assertEquals((-342), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(740);
      float float0 = mutableInt0.floatValue();
      assertEquals(740.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.subtract(446);
      float float0 = mutableInt0.floatValue();
      assertEquals((-446), (int)mutableInt0.getValue());
      assertEquals((-446.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.subtract(446);
      double double0 = mutableInt0.doubleValue();
      assertEquals((-446), (int)mutableInt0.getValue());
      assertEquals((-446.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      // Undeclared exception!
      try { 
        mutableInt0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      // Undeclared exception!
      try { 
        mutableInt0.compareTo((MutableInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(0);
      // Undeclared exception!
      try { 
        mutableInt0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      int int0 = mutableInt0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      MutableInt mutableInt1 = new MutableInt((-3));
      mutableInt0.decrement();
      mutableInt1.subtract((-3));
      int int0 = mutableInt1.compareTo(mutableInt0);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      MutableInt mutableInt1 = new MutableInt((-3));
      mutableInt0.decrement();
      mutableInt1.subtract((-3));
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      int int0 = mutableInt0.compareTo(mutableInt0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      boolean boolean0 = mutableInt0.equals(mutableInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      boolean boolean0 = mutableInt0.equals("-1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      String string0 = mutableInt0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      mutableInt1.setValue(4441);
      boolean boolean0 = mutableInt0.equals(mutableInt1);
      assertEquals(4441L, mutableInt1.longValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.decrement();
      Integer integer0 = mutableInt0.toInteger();
      mutableInt0.setValue(0);
      mutableInt0.subtract((Number) integer0);
      double double0 = mutableInt0.doubleValue();
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      float float0 = mutableInt0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt("S@>5\"9.%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"S@>5\"9.%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Integer integer0 = mutableInt0.getValue();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      double double0 = mutableInt0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      long long0 = mutableInt0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.setValue((Number) mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-27));
      // Undeclared exception!
      try { 
        mutableInt0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }
}
