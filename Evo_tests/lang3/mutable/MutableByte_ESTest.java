/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 14:06:07 GMT 2022
 */

package org.apache.commons.lang3.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.mutable.MutableByte;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableByte_ESTest extends MutableByte_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.decrement();
      MutableByte mutableByte1 = new MutableByte();
      boolean boolean0 = mutableByte0.equals(mutableByte1);
      assertEquals((byte) (-1), mutableByte0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte("-56");
      assertEquals((-56), mutableByte0.intValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Byte byte0 = mutableByte0.toByte();
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-73));
      Byte byte0 = mutableByte0.toByte();
      assertEquals((byte) (-73), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-946));
      MutableByte mutableByte0 = new MutableByte(integer0);
      long long0 = mutableByte0.longValue();
      assertEquals(78L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.increment();
      int int0 = mutableByte0.intValue();
      assertEquals((byte)1, mutableByte0.byteValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Float float0 = new Float((-1.0));
      mutableByte0.setValue((Number) float0);
      int int0 = mutableByte0.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double((-3395.764710421));
      MutableByte mutableByte0 = new MutableByte(double0);
      mutableByte0.add((Number) double0);
      Byte byte0 = mutableByte0.getValue();
      assertEquals((byte)122, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-946));
      MutableByte mutableByte0 = new MutableByte(integer0);
      float float0 = mutableByte0.floatValue();
      assertEquals(78.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Float float0 = new Float((-1.0));
      mutableByte0.setValue((Number) float0);
      float float1 = mutableByte0.floatValue();
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)92);
      double double0 = mutableByte0.doubleValue();
      assertEquals(92.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte)95);
      mutableByte0.add((byte)97);
      double double0 = mutableByte0.doubleValue();
      assertEquals((-64.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Float float0 = new Float((-3098.5990772767));
      MutableByte mutableByte0 = new MutableByte(float0);
      mutableByte0.subtract((Number) float0);
      byte byte0 = mutableByte0.byteValue();
      assertEquals((byte)0, (byte)mutableByte0.getValue());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-946));
      MutableByte mutableByte0 = new MutableByte(integer0);
      byte byte0 = mutableByte0.byteValue();
      assertEquals((byte)78, byte0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-62));
      // Undeclared exception!
      try { 
        mutableByte0.subtract((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Float float0 = new Float((-1364.6F));
      MutableByte mutableByte0 = new MutableByte(float0);
      // Undeclared exception!
      try { 
        mutableByte0.setValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-30));
      // Undeclared exception!
      try { 
        mutableByte0.compareTo((MutableByte) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      // Undeclared exception!
      try { 
        mutableByte0.add((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableByte mutableByte0 = null;
      try {
        mutableByte0 = new MutableByte((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-30));
      byte byte0 = mutableByte0.byteValue();
      assertEquals((byte) (-30), byte0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      MutableByte mutableByte1 = new MutableByte();
      mutableByte1.increment();
      int int0 = mutableByte1.compareTo(mutableByte0);
      assertEquals(1.0F, mutableByte1.floatValue(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      MutableByte mutableByte1 = new MutableByte();
      mutableByte1.increment();
      int int0 = mutableByte0.compareTo(mutableByte1);
      assertEquals((byte)1, (byte)mutableByte1.getValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      int int0 = mutableByte0.compareTo(mutableByte0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      MutableByte mutableByte1 = new MutableByte();
      mutableByte1.increment();
      boolean boolean0 = mutableByte1.equals(mutableByte0);
      assertEquals(1, mutableByte1.intValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      boolean boolean0 = mutableByte0.equals(mutableByte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Long long0 = Long.valueOf((long) 0);
      boolean boolean0 = mutableByte0.equals(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      float float0 = mutableByte0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      mutableByte0.setValue((byte)27);
      assertEquals("27", mutableByte0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      Byte byte0 = mutableByte0.getValue();
      mutableByte0.add((Number) byte0);
      assertEquals((byte)0, mutableByte0.byteValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-30));
      Byte byte0 = mutableByte0.getValue();
      mutableByte0.subtract((Number) byte0);
      long long0 = mutableByte0.longValue();
      assertEquals((byte)0, (byte)mutableByte0.toByte());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      int int0 = mutableByte0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-30));
      long long0 = mutableByte0.longValue();
      assertEquals((-30L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Long long0 = new Long(33L);
      MutableByte mutableByte0 = new MutableByte(long0);
      Byte byte0 = mutableByte0.toByte();
      assertEquals((byte)33, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-30));
      String string0 = mutableByte0.toString();
      assertEquals("-30", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte();
      double double0 = mutableByte0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableByte mutableByte0 = null;
      try {
        mutableByte0 = new MutableByte("iUzj|K)o]{f*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"iUzj|K)o]{f*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableByte mutableByte0 = new MutableByte((byte) (-62));
      Byte byte0 = new Byte((byte) (-87));
      mutableByte0.subtract((Number) byte0);
      assertEquals((byte)25, mutableByte0.byteValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Float float0 = new Float((-1364.6F));
      MutableByte mutableByte0 = new MutableByte(float0);
      mutableByte0.subtract((byte)5);
      assertEquals((short) (-89), mutableByte0.shortValue());
  }
}
