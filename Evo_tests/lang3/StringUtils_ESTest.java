/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 13:00:39 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.regex.PatternSyntaxException;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("\"+CvN#fut1>(TNA", "\"+CvN#fut1>(TNA", "\"+CvN#fut1>(TNA");
      assertNull(stringArray0);
      
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, "8=\"6dUya?8Xa");
      assertNull(string1);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '`', 32, 85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "Z~wnX|_`$tx}Tk");
      assertNull(string0);
      
      String string1 = ",]`*Dhn}>}E,]`*Dhn>}E\\u";
      String string2 = StringUtils.removeEnd(string1, "oV");
      assertNotNull(string2);
      assertEquals(",]`*Dhn}>}E,]`*Dhn>}E\\u", string2);
      
      String string3 = StringUtils.trimToEmpty("oV");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("oV", string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (-3355L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      String string4 = StringUtils.join(longArray0, 's');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("1s-3355s0s0s0", string4);
      assertArrayEquals(new long[] {1L, (-3355L), 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.abbreviateMiddle("1s-3355s0s0s0", "(?: s|[s&&[^ ]])s*", 30);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("1s-3355s0s0s0", string6);
      
      int int0 = StringUtils.countMatches("1s-3355s0s0s0", "1s-3355s0s0s0");
      assertEquals(1, int0);
      
      String string7 = ";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t";
      String string8 = StringUtils.substringAfter("(?: s|[s&&[^ ]])s*", ";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.abbreviateMiddle(string1, "", 64);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertNotNull(string9);
      assertEquals(",]`*Dhn}>}E,]`*Dhn>}E\\u", string9);
      
      String string10 = StringUtils.abbreviate(string9, (-91), 64);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertNotNull(string10);
      assertEquals(",]`*Dhn}>}E,]`*Dhn>}E\\u", string10);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "1s-3355s0s0s0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("'h!;/IKKK=^R", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.lowerCase("'h!;/IKKK=^R");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'h!;/ikkk=^r", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'P';
      charArray0[2] = 'N';
      charArray0[3] = 'b';
      charArray0[4] = 'v';
      charArray0[5] = 'G';
      charArray0[6] = '@';
      int int0 = StringUtils.indexOfAny((CharSequence) "'h!;/ikkk=^r", charArray0);
      assertEquals(11, int0);
      assertArrayEquals(new char[] {'r', 'P', 'N', 'b', 'v', 'G', '@'}, charArray0);
      assertEquals(7, charArray0.length);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("'h!;/IKKK=^R", string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWith("'h!;/IKKK=^R", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "'h!;/IKKK=^R");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.rightPad("", (-1), ",_1'4R9]tt]");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.uncapitalize("Gf^.Un");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("gf^.Un", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ",_1'4R9]tt]";
      int int3 = StringUtils.indexOfAny((CharSequence) "gf^.Un", charSequenceArray0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.ArrayUtils", '<');
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      charSequenceArray0[2] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[3] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[4] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[5] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[6] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[7] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      String string1 = StringUtils.prependIfMissing("FK_9&Ikf2KWZw'(o)", "FK_9&Ikf2KWZw'(o)", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FK_9&Ikf2KWZw'(o)", string1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("FK_9&Ikf2KWZw'(o)", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[4], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[3] = (-504.29617F);
      floatArray0[4] = (float) '<';
      floatArray0[5] = (float) 0;
      String string2 = StringUtils.join(floatArray0, '<');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0.0<0.0<0.0<-504.29617<60.0<0.0", string2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-504.29617F), 60.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string3 = StringUtils.left("FK_9&Ikf2KWZw'(o)", (-3490));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.isNumericSpace("0.0<0.0<0.0<-504.29617<60.0<0.0");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.remove("G", 'D');
      assertNotNull(string0);
      assertEquals("G", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G", "44");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.leftPad("44", 256, "44");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string1);
      
      boolean boolean0 = StringUtils.isEmpty("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "G";
      stringArray1[1] = "G";
      stringArray1[2] = "44";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray2.length);
      
      String string2 = StringUtils.chop("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string2);
      
      String string3 = StringUtils.repeat("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", 256);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)84;
      String string5 = StringUtils.mid("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", '=', (byte)0);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "44", 4301);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.left("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", 32);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("44444444444444444444444444444444", string6);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.remove("G", 'D');
      assertNotNull(string0);
      assertEquals("G", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G", "44");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.leftPad("", 256, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                ", string1);
      
      boolean boolean0 = StringUtils.isEmpty("                                                                                                                                                                                                                                                                ");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "G";
      stringArray1[1] = "G";
      stringArray1[2] = "44";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray2.length);
      
      String string2 = StringUtils.chop("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("", 256);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trim("");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)84;
      String string5 = StringUtils.join(byteArray0, '=');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("0=0=7=0=84", string5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)7, (byte)0, (byte)84}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "0=0=7=0=84", (CharSequence) "44", 4301);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.left("                                                                                                                                                                                                                                                                ", 32);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("                                ", string6);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "G", (CharSequence) "0=0=7=0=84");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isNumeric("44");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.substring("*SE8h@D", 0, (-4));
      assertNotNull(string0);
      assertEquals("*SE", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*SE8h@D", (CharSequence) "*SE8h@D");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "*SE";
      stringArray0[2] = "*SE8h@D";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.lang3.StringUtils";
      stringArray0[6] = "*SE8h@D";
      stringArray0[7] = "*SE8h@D";
      String string2 = StringUtils.replaceEach("*SE8h@D", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("*SE8h@D", string2);
      assertEquals(8, stringArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-4);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-4);
      longArray0[4] = (long) (-4);
      longArray0[5] = 2476L;
      String string3 = StringUtils.left((String) null, '5');
      assertNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.repeat("FTzE7|#o=<", 256);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '%';
      charArray0[2] = 'q';
      charArray0[3] = ';';
      charArray0[4] = 'Y';
      charArray0[5] = '_';
      charArray0[6] = '#';
      charArray0[7] = ']';
      String string2 = StringUtils.join(charArray0, '_', 256, 16);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'G', '%', 'q', ';', 'Y', '_', '#', ']'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                    ", string0);
      
      String string1 = StringUtils.substring((String) null, 2969, (-900));
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 2969;
      floatArray0[3] = (float) (-900);
      floatArray0[4] = (float) 470;
      floatArray0[5] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, '5', 90, (-1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new float[] {13.0F, 13.0F, 2969.0F, (-900.0F), 470.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = StringUtils.startsWith("", "ZC6Axe1?SmzqL8x");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                   ", "i+PQL`~wAN9Vf0");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null, "org.apache.commons.lang3.ObjectUtils");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.ArrayUtils", '<');
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[2] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[3] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[4] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[5] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[6] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[7] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      String string1 = StringUtils.prependIfMissing("FK_9&Ikf2KWZw'(o)", "FK_9&Ikf2KWZw'(o)", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FK_9&Ikf2KWZw'(o)", string1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("FK_9&Ikf2KWZw'(o)", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[4], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '<';
      floatArray0[2] = (-504.29617F);
      floatArray0[3] = 497.75266F;
      floatArray0[4] = (float) '<';
      floatArray0[5] = (float) 0;
      String string2 = StringUtils.join(floatArray0, '<');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0.0<60.0<-504.29617<497.75266<60.0<0.0", string2);
      assertArrayEquals(new float[] {0.0F, 60.0F, (-504.29617F), 497.75266F, 60.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string3 = StringUtils.left("FK_9&Ikf2KWZw'(o)", (-3490));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.startsWithAny(charSequenceArray0[5], charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)14;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'g', 0, (int) (byte)14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.rightPad(", '", 7, ", '");
      assertNotNull(string0);
      assertEquals(", ', ',", string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1541.0F;
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) 7;
      floatArray0[4] = (float) 7;
      floatArray0[5] = (float) 7;
      String string1 = StringUtils.join(floatArray0, 'f', 7, 7);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new float[] {1541.0F, 7.0F, 7.0F, 7.0F, 7.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string2 = StringUtils.swapCase(", '");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(", '", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace(", '");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", ', ',", (CharSequence) ", ', ',");
      assertEquals(0, int0);
      
      String string3 = StringUtils.difference("Naa./KW8?O/y3WGCL)", ", '");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(", '", string3);
      
      String[] stringArray0 = StringUtils.split(", '");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(string2));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      assertFalse(stack0.contains(string2));
      
      String string4 = StringUtils.join(iterator0, "Naa./KW8?O/y3WGCL)");
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(stack0.contains(string4));
      
      String string5 = StringUtils.difference(", ', ',", ", '");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ", '", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.center("dEi#@+HAi*tkA$", 0, "$ug'LnL0;\"NGNVp'Z4");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("dEi#@+HAi*tkA$", string6);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ", '", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("dEi#@+HAi*tkA$", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.indexOf((CharSequence) ", '", (CharSequence) ", '", 2147483645);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "$ug'LnL0;\"NGNVp'Z4");
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.rightPad(", '", 7, ", '");
      assertNotNull(string0);
      assertEquals(", ', ',", string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1541.0F;
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) 7;
      floatArray0[4] = (float) 7;
      floatArray0[5] = (float) 7;
      String string1 = StringUtils.join(floatArray0, 'f', 7, 7);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new float[] {1541.0F, 7.0F, 7.0F, 7.0F, 7.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string2 = StringUtils.swapCase(", '");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(", '", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace(", '");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", ', ',", (CharSequence) ", ', ',");
      assertEquals(0, int0);
      
      String string3 = StringUtils.difference("Naa./KW8?O/y3WGCL)", ", '");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(", '", string3);
      
      String[] stringArray0 = StringUtils.split(", '");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(", '"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(iterator0);
      assertFalse(stack0.contains(", '"));
      
      String string4 = StringUtils.join(iterator0, "Naa./KW8?O/y3WGCL)");
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(stack0.contains(", '"));
      
      String string5 = StringUtils.difference(", ', ',", ", '");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ", '", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.center("dEi#@+HAi*tkA$", 0, "$ug'LnL0;\"NGNVp'Z4");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("dEi#@+HAi*tkA$", string6);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ", '", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("dEi#@+HAi*tkA$", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.indexOf((CharSequence) ", '", (CharSequence) ", '", 2147483645);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOf((CharSequence) "dEi#@+HAi*tkA$", 7, Integer.MAX_VALUE);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals((-1), int4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "dEi#@+HAi*tkA$";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) ", '";
      charSequenceArray0[4] = (CharSequence) "dEi#@+HAi*tkA$";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) ", '";
      charSequenceArray0[7] = (CharSequence) "";
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-1);
      intArray0[2] = 7;
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'f', 10, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.chop("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches("", "\n");
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripEnd("\r", "\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("=4", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'=', '4'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = arrayList0.add(charBuffer0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("=4", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(charBuffer0));
      assertArrayEquals(new char[] {'=', '4'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = arrayList0.add(charBuffer0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("=4", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(charBuffer0));
      assertArrayEquals(new char[] {'=', '4'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(iterator0);
      assertTrue(arrayList0.contains(charBuffer0));
      
      String string2 = StringUtils.join(iterator0, '8');
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("=48=4", string2);
      assertTrue(arrayList0.contains(charBuffer0));
      
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "\r";
      objectArray0[1] = (Object) "\r";
      objectArray0[2] = (Object) "=48=4";
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) '4';
      objectArray0[5] = (Object) "\r";
      boolean boolean3 = arrayList0.add(charBuffer0);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("=4", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertTrue(arrayList0.contains(charBuffer0));
      assertArrayEquals(new char[] {'=', '4'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String string3 = StringUtils.join(objectArray0, "\r", 14, 14);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(6, objectArray0.length);
      
      String string4 = StringUtils.replaceChars("\"QRien*Gh6+:y", "=48=4", "\n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("\"QRien*Gh6+:y", string4);
      
      String string5 = StringUtils.capitalize("{}");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("{}", string5);
      
      String string6 = StringUtils.abbreviateMiddle("?JH", "{>Wm;>H", (-1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("?JH", string6);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.chomp("Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      
      int int0 = StringUtils.countMatches("Arguments cannot both be null", "Arguments cannot both be null");
      assertEquals(1, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null", 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Arguments cannot both be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Arguments cannot both be null", "Arguments cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.right("y`i@+9R6[6UP", (-1219));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int2 = StringUtils.indexOf((CharSequence) "Arguments cannot both be null", 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.trimToNull("%gj}z");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("%gj}z", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.upperCase("Hn'Owi<+(|%_t");
      assertNotNull(string0);
      assertEquals("HN'OWI<+(|%_T", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "HN'OWI<+(|%_T", (CharSequence) "HN'OWI<+(|%_T", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ugEK,Xtz;Y", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (-128));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-117);
      String string1 = StringUtils.join(byteArray0, '\'', 693, 3);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-117)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String string2 = StringUtils.chomp("L}zKev1&JH&8W");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L}zKev1&JH&8W", string2);
      
      String string3 = StringUtils.removeStart("ugEK,Xtz;Y", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ugEK,Xtz;Y", string3);
      
      String string4 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string4);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains((-128)));
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains((-128)));
      
      String string5 = StringUtils.join(iterator0, '\'');
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(arrayDeque0.contains((-128)));
      
      String string6 = StringUtils.overlay((String) null, "&MLJF-jO<uNY@Ob", 693, (-6886));
      assertNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 57, (-1892));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayDeque<Integer> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque0.contains((-1892)));
      assertFalse(arrayDeque1.contains((-1892)));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("L}zKev1&JH&8W", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.join(iterator0, "L}zKev1&JH&8W");
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(arrayDeque0.contains((-1892)));
      assertNotSame(arrayDeque0, arrayDeque1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[0];
      char char0 = '0';
      String string0 = StringUtils.join(intArray0, '0');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd("", "Hn'Owi<+(|%_t");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = (-1196);
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "", (-1196));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = "e9qabQ[rBf";
      int int3 = 580;
      String string4 = StringUtils.leftPad("e9qabQ[rBf", 580, "\n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne9qabQ[rBf", string4);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '0', (-1196), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1196
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("'h!;/IKKK=^R", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.lowerCase("'h!;/IKKK=^R");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'h!;/ikkk=^r", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'P';
      charArray0[2] = 'N';
      charArray0[3] = 'b';
      charArray0[4] = 'v';
      charArray0[5] = 'G';
      charArray0[6] = '@';
      int int0 = StringUtils.indexOfAny((CharSequence) "'h!;/ikkk=^r", charArray0);
      assertEquals(11, int0);
      assertArrayEquals(new char[] {'r', 'P', 'N', 'b', 'v', 'G', '@'}, charArray0);
      assertEquals(7, charArray0.length);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("'h!;/IKKK=^R", string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWith("'h!;/IKKK=^R", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("", 11, ",_1'4R9]tt]");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(",_1'4R9]tt]", string3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.repeat("\r", "\r", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.appendIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 1384);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.substring("J(>`'wiim", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("J(>`'wiim", string2);
      
      String string3 = StringUtils.center("J(>`'wiim", 256, 'Q');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQJ(>`'wiimQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Z';
      charArray0[5] = 'Q';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', 'Q', 'Z', 'Q'}, charArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      
      String string4 = StringUtils.stripToNull("+{1q_ECL8pn");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("+{1q_ECL8pn", string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+{1q_ECL8pn", (CharSequence) "\r", 1384);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int2 = StringUtils.length("+{1q_ECL8pn");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(12, int2);
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], charSequenceArray0[1], 0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.endsWithAny("+{1q_ECL8pn", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null, 2);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "\"3^<)`_,8|wn=_N;u/?D[";
      String string1 = StringUtils.repeat("\"3^<)`_,8|wn=_N;u/?D[", 18);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[", string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'K';
      charArray0[2] = '0';
      charArray0[3] = '@';
      charArray0[4] = 'S';
      charArray0[5] = 'N';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[\"3^<)`_,8|wn=_N;u/?D[", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'9', 'K', '0', '@', 'S', 'N'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string2 = "%`<{?A[m+ C]%aCg^zu";
      String string3 = "%Etn";
      String[] stringArray0 = StringUtils.substringsBetween("0`bSO0`bSO", "%`<{?A[m+ C]%aCg^zu", "%Etn");
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-595.2);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '9', (-666), (-315));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -666
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "GfiT/2]5/iB";
      String string1 = StringUtils.substring("GfiT/2]5/iB", 10, 10);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("GfiT/2]5/iB", "GfiT/2]5/iB", 10);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring("p{InCombiningDiacriticalMarks}+", (-1), 10);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      char char0 = 'U';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'U');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "GfiT/2]5/iB");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, "Je1r5aLj!v8l6");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = (int) 'U';
      intArray0[2] = 10;
      String string4 = StringUtils.join(intArray0, 'U');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("10U85U10", string4);
      assertArrayEquals(new int[] {10, 85, 10}, intArray0);
      assertEquals(3, intArray0.length);
      
      String string5 = "\\p{InCombiningDiacriticalMarks}+";
      String string6 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", (-1), ";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "", 10);
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("Je1r5aLj!v8l6", "p{InCombiningDiacriticalMarks}+", 85);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("GfiT/2]5/iB"));
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("GfiT/2]5/iB"));
      
      String string7 = StringUtils.join(iterator0, ";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t");
      assertEquals(0, linkedList0.size());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(linkedList0.contains("GfiT/2]5/iB"));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.substring("3|B4#:ve7*0'", 0, (-823));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substring("", (-823), (-1));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEnd("\r", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      String string4 = StringUtils.repeat('C', 31);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("'h!;/IKKK=^R", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.lowerCase("'h!;/IKKK=^R");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'h!;/ikkk=^r", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'P';
      charArray0[2] = 'N';
      charArray0[3] = 'b';
      charArray0[4] = 'v';
      charArray0[5] = 'G';
      charArray0[6] = '@';
      int int0 = StringUtils.indexOfAny((CharSequence) "'h!;/ikkk=^r", charArray0);
      assertEquals(11, int0);
      assertArrayEquals(new char[] {'r', 'P', 'N', 'b', 'v', 'G', '@'}, charArray0);
      assertEquals(7, charArray0.length);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("'h!;/IKKK=^R", string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWith("'h!;/IKKK=^R", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "'h!;/IKKK=^R");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.rightPad("", (-1), ",_1'4R9]tt]");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 11);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.remove("G", 'D');
      assertNotNull(string0);
      assertEquals("G", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G", "44");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.repeat("44", (int) 'D');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string1);
      
      boolean boolean0 = StringUtils.isEmpty("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "G";
      stringArray1[1] = "G";
      stringArray1[2] = "44";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray2.length);
      
      String string2 = StringUtils.chop("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("", 256);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trim("");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)84;
      String string5 = StringUtils.join(byteArray0, '=');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("0=0=7=0=84", string5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)7, (byte)0, (byte)84}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "0=0=7=0=84", (CharSequence) "44", 4301);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.left("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", 32);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("44444444444444444444444444444444", string6);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "44", (char[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.replace(";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t", ";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t", "o4f==Fs\"G", 523);
      assertNotNull(string0);
      assertEquals("o4f==Fs\"G", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "o4f==Fs\"G", (CharSequence) "o4f==Fs\"G", 523);
      assertEquals(0, int0);
      
      String string1 = StringUtils.swapCase("iL!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Il!", string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.replace(";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t", ";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t", "o4f==Fs\"G", 523);
      assertNotNull(string0);
      assertEquals("o4f==Fs\"G", string0);
      
      String string1 = StringUtils.swapCase("iL!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Il!", string1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 267);
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("", (String) null, "");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replace("C47+}uBC", (String) null, "bPuF");
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("C47+}uBC", string4);
      
      String string5 = StringUtils.defaultString((String) null);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "C47+}uBC", (CharSequence) "", 267);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, int2);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("E_G!9hv+", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("E_G!9hv+", string6);
      
      String string7 = StringUtils.chomp(" in an array of ");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(" in an array of ", string7);
      
      String string8 = StringUtils.trimToEmpty("");
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.substringBetween("", (String) null, "");
      assertNull(string9);
      
      int int3 = StringUtils.indexOf((CharSequence) "E_G!9hv+", (CharSequence) null, (-132));
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      String string10 = StringUtils.join(charArray0, '#');
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertNotNull(string10);
      assertEquals("P###P", string10);
      assertArrayEquals(new char[] {'P', '#', 'P'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int4 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\n", "\n");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "\n");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, '\'');
      assertNotNull(string0);
      assertEquals("0", string0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, 9);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isBlank("0");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "0", 18);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.overlay("\n", "\n", 132, (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 18);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.stripEnd("UIqR[DW/!COQ}x\"^B`", "\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("UIqR[DW/!COQ}x\"^B`", string2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "0");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.substring("UIqR[DW/!COQ}x\"^B`", 18, (-1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join((int[]) null, '=');
      assertNull(string4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2352);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3;
      String string5 = StringUtils.join(shortArray0, '=', 882, (int) (short)3);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertArrayEquals(new short[] {(short) (-2352), (short)3, (short)3}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "UIqR[DW/!COQ}x\"^B`";
      stringArray1[1] = "0";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "UIqR[DW/!COQ}x\"^B`";
      stringArray1[5] = null;
      stringArray1[6] = "UIqR[DW/!COQ}x\"^B`";
      stringArray1[7] = "\n";
      stringArray1[8] = "";
      String[] stringArray2 = StringUtils.stripAll(stringArray1, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace("l:Zt{d#Qtgh", (String) null, "");
      assertNotNull(string2);
      assertEquals("l:Zt{d#Qtgh", string2);
      
      String string3 = StringUtils.replace("C47+}uBC", (String) null, "bPuF");
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("C47+}uBC", string3);
      
      String string4 = StringUtils.defaultString((String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "C47+}uBC", (CharSequence) "", 267);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, int2);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("E_G!9hv+", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("E_G!9hv+", string5);
      
      String string6 = StringUtils.chomp(" in an array of ");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals(" in an array of ", string6);
      
      String string7 = StringUtils.trimToEmpty("");
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.stripToEmpty("");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("", string8);
      
      int int3 = StringUtils.indexOf((CharSequence) "E_G!9hv+", (CharSequence) "", (-132));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '#';
      charArray0[2] = 'f';
      String string9 = StringUtils.join(charArray0, '#');
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("F###f", string9);
      assertArrayEquals(new char[] {'F', '#', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "C47+}uBC", (CharSequence) "", 3520);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(8, int4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-1665), '/');
      assertNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string1 = StringUtils.join(objectArray0, "Minimum abbreviation width with offset is 7", 10, 10);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(3, objectArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width with offset is 7", (CharSequence) "Minimum abbreviation width with offset is 7");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is 7", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is 7";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.mid((String) null, 12, 30);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "@7zy[");
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 3421, 3421);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 4);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, 'H', 3421, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new float[] {4.0F, 4.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(4));
      
      boolean boolean0 = arrayDeque0.addAll(priorityQueue0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, priorityQueue0.size());
      assertFalse(boolean0);
      assertFalse(arrayDeque0.contains(4));
      assertFalse(priorityQueue0.contains(4));
      
      String string2 = StringUtils.left("4}", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      ArrayDeque<Integer> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque0.contains(4));
      assertFalse(arrayDeque1.contains(4));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      
      String string3 = StringUtils.replaceChars("@7zy[", "", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("@7zy[", string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("@7zy[");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = "\\u";
      String string5 = StringUtils.substringBefore(string4, "The Array must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("\\u", string5);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      int int3 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String string6 = StringUtils.removeEnd("@7zy[", string5);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("@7zy[", string6);
      
      String string7 = StringUtils.substringAfter("m\"S\u0005gHH>Qf*]3|!(", ";v,)#3v,-2T+");
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.removeStart((String) null, "{}");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                    ", string0);
      
      String string1 = StringUtils.substring((String) null, 2969, (-900));
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 13;
      floatArray0[2] = (float) 2969;
      floatArray0[3] = (float) (-900);
      floatArray0[4] = (float) 470;
      floatArray0[5] = (float) (-1);
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "ZC6Axe1?SmzqL8x");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultIfEmpty(":|]GYnc8L66 m!v", "                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                   ");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(":|]GYnc8L66 m!v", string2);
      
      int int2 = StringUtils.length((CharSequence) null);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 81;
      intArray0[2] = (-1074);
      intArray0[3] = 1;
      intArray0[4] = 105;
      intArray0[5] = 28;
      String string0 = StringUtils.join(intArray0, 'E');
      assertNotNull(string0);
      assertEquals("5E81E-1074E1E105E28", string0);
      assertArrayEquals(new int[] {5, 81, (-1074), 1, 105, 28}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("5E81E-1074E1E105E28");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("5E81E-1074E1E105E28", "5E81E-1074E1E105E28", (String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = StringUtils.join(intArray0, 'x', 122, 35);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new int[] {5, 81, (-1074), 1, 105, 28}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("5E81E-1074E1E105E28");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.trimToNull(",]`*Dhn}>}E,]`*Dhn}>}E");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(",]`*Dhn}>}E,]`*Dhn}>}E", string3);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean boolean3 = StringUtils.isBlank("");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "AC{)M+8", 1676);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.chop("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "{}");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.chomp("{}", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("{}", string2);
      
      String string3 = StringUtils.substringBetween("", "(/rB[*", "");
      assertNull(string3);
      
      String string4 = StringUtils.repeat("", "{}", 1676);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string4, (CharSequence) "(/rB[*");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.leftPad("Array and element cannot both be null", (-1), 'a');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("Array and element cannot both be null", string6);
      
      String string7 = StringUtils.rightPad("AFP|T", 1676, 'a');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.center(string7, (-1));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string9 = StringUtils.join(byteArray0, 'P', 97, (int) (byte)0);
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("", string9);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string10 = StringUtils.left("%,D)K.6*P!\"&U", 1042);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
      assertEquals("%,D)K.6*P!\"&U", string10);
      
      String string11 = StringUtils.left("", 1985);
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertNotNull(string11);
      assertEquals("", string11);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string5, "^c}e!xVF=(0#(14OT");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string11));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 16);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.deleteWhitespace("The character ");
      assertNotNull(string0);
      assertEquals("Thecharacter", string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "The character ";
      charSequenceArray0[1] = (CharSequence) "The character ";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[0], "Minimum abbreviation width with offset is 7");
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.mid("\"3^<)`_,8|wn=_N;u/?D[", 16, 19);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u/?D[", string1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("}E", "=']<&PDwB+2zz[c6HQ");
      assertNotNull(string0);
      assertEquals("}E", string0);
      
      boolean boolean0 = StringUtils.isNumeric("}E");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "}E";
      charSequenceArray0[1] = (CharSequence) "=']<&PDwB+2zz[c6HQ";
      charSequenceArray0[2] = (CharSequence) "}E";
      String string1 = StringUtils.replaceChars("{}The Character must not be null", "}E", "{}The Character must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{{The Character must not be null", string1);
      
      charSequenceArray0[3] = (CharSequence) "{{The Character must not be null";
      charSequenceArray0[4] = (CharSequence) "=']<&PDwB+2zz[c6HQ";
      charSequenceArray0[5] = (CharSequence) "}E";
      charSequenceArray0[6] = (CharSequence) "=']<&PDwB+2zz[c6HQ";
      charSequenceArray0[7] = (CharSequence) "}E";
      charSequenceArray0[8] = (CharSequence) "=']<&PDwB+2zz[c6HQ";
      boolean boolean1 = StringUtils.endsWithAny("=']<&PDwB+2zz[c6HQ", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "{}The Character must not be null", 22);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.substringAfter("d8EXiv7X{C5", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.endsWithAny(charSequenceArray0[6], charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "d8EXiv7X{C5", (CharSequence) "{}The Character must not be null", (-128));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.replaceChars("}E", "Strings must not be null", "");
      assertNotNull(string0);
      assertEquals("}E", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("}E");
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase("LuNE.(Wv8QXI");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("lUne.(wV8qxi", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "b,p", "mH N");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      String string2 = StringUtils.join(charArray0, 'l', 64, 64);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'u';
      intArray0[1] = (int) 'u';
      intArray0[2] = 64;
      intArray0[3] = (int) 'u';
      intArray0[4] = (int) 'l';
      intArray0[5] = (int) 'u';
      intArray0[6] = (int) 'u';
      String string3 = StringUtils.join(intArray0, 'u', 64, 64);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new int[] {117, 117, 64, 117, 108, 117, 117}, intArray0);
      assertEquals(7, intArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "b,p";
      objectArray0[1] = (Object) 117;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string4 = StringUtils.join(objectArray0, 'u', 1098, 0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(4, objectArray0.length);
      
      String string5 = StringUtils.stripEnd((String) null, "|ICQ6");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "The Character must not be null";
      String string1 = StringUtils.uncapitalize("The Character must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("the Character must not be null", string1);
      
      String string2 = "";
      String string3 = StringUtils.chop("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = "";
      String string5 = "{}";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "{}");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string6 = StringUtils.chomp("{}", "The Character must not be null");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("{}", string6);
      
      String string7 = StringUtils.substringBetween("", "(/rB[*", "");
      assertNull(string7);
      
      String string8 = StringUtils.repeat("the Character must not be null", "{}", 1676);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String string9 = StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      // Undeclared exception!
      StringUtils.lastIndexOfIgnoreCase((CharSequence) string8, (CharSequence) "(/rB[*");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                    ", string0);
      
      String string1 = StringUtils.substring((String) null, 2969, (-900));
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 2969;
      floatArray0[3] = (float) (-900);
      floatArray0[5] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, '5', 90, (-1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new float[] {13.0F, 13.0F, 2969.0F, (-900.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = StringUtils.startsWith("", "ZC6Axe1?SmzqL8x");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("i+PQL`~wAN9Vf0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join(floatArray0, '5', 90, 90);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new float[] {13.0F, 13.0F, 2969.0F, (-900.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string4 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("6Q]Qf.L");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("6Q]Qf.L"));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.contains("6Q]Qf.L"));
      
      String string0 = StringUtils.join((Iterator<?>) null, (String) null);
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = linkedHashSet0.add(object0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(linkedHashSet0.contains("6Q]Qf.L"));
      assertTrue(linkedHashSet0.contains(object0));
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertNotNull(string1);
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.contains(object0));
      
      String string2 = StringUtils.removeEndIgnoreCase("p{InCombiningDiacriticalMarks}+", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, 'M', 256, (-2414));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "f!m 0,^Lk1QHk'=Z#N";
      String string1 = StringUtils.substringAfterLast("f!m 0,^Lk1QHk'=Z#N", "f!m 0,^Lk1QHk'=Z#N");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("f!m 0,^Lk1QHk'=Z#N");
      assertNotNull(stringArray0);
      assertEquals(16, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-3455), (-3455));
      assertEquals((-1), int0);
      
      String string2 = ";v,)#3v,-2T+";
      int int1 = 64;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, ";v,)#3v,-2T+", 64, 1159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.substring("3|B4#:ve7*0'", 0, (-823));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substring("", (-823), (-1));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEnd("\r", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      String string4 = StringUtils.repeat('C', 31);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) " ");
      assertEquals(0, int0);
      
      String string5 = StringUtils.substringBeforeLast("'-C", "F4]rh^S[,");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("'-C", string5);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      stringArray0[1] = "t*4Sq/^>f";
      stringArray0[2] = "\r";
      stringArray0[3] = "U\"}%";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(12, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("x6.Kwu*w3rqLnTt;?|");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray1.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "U\"}%");
      assertEquals(4, int0);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.abbreviate("", 4);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.reverse("*<D~>r4j!ChJ-Ee='M=");
      assertNotNull(string0);
      assertEquals("=M'=eE-JhC!j4r>~D<*", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("=M'=eE-JhC!j4r>~D<*");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "=M'=eE-JhC!j4r>~D<*", "*<D~>r4j!ChJ-Ee='M=");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.startsWith("=M'=eE-JhC!j4r>~D<*", "=M'=eE-JhC!j4r>~D<*");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1520);
      intArray0[1] = 2;
      intArray0[2] = 1848;
      String string1 = StringUtils.join(intArray0, '4', 2, (-1520));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new int[] {(-1520), 2, 1848}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1848;
      floatArray0[1] = (float) (-1520);
      floatArray0[2] = (float) 1848;
      floatArray0[3] = 2105.967F;
      String string2 = StringUtils.join(floatArray0, '4', 2, 0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new float[] {1848.0F, (-1520.0F), 1848.0F, 2105.967F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "iL!", 0);
      assertNull(stringArray0);
      
      String string3 = StringUtils.trimToNull("fokW%");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("fokW%", string3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "AC{)M+8", 1676);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.chop("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Z", "{}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.chomp("{}", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("{}", string2);
      
      String string3 = StringUtils.substringBetween("", "(/rB[*", "");
      assertNull(string3);
      
      String string4 = StringUtils.repeat("", "{}", 1676);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string4, (CharSequence) "(/rB[*");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.leftPad("Array and element cannot both be null", (-1), 'a');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("Array and element cannot both be null", string6);
      
      String string7 = StringUtils.rightPad("AFP|T", 1676, 'a');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.center(string7, (-1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string9 = StringUtils.join(byteArray0, 'P', 97, (int) (byte)0);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("", string9);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string10 = StringUtils.left("%,D)K.6*P!\"&U", 1042);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      assertEquals("%,D)K.6*P!\"&U", string10);
      
      String string11 = StringUtils.left("", 1985);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string1));
      assertTrue(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertNotNull(string11);
      assertEquals("", string11);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Array and element cannot both be null", "%,D)K.6*P!\"&U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)97;
      String string0 = StringUtils.join(byteArray0, '*');
      assertNotNull(string0);
      assertEquals("35*127*0*0*0*0*97", string0);
      assertArrayEquals(new byte[] {(byte)35, (byte)127, (byte)0, (byte)0, (byte)0, (byte)0, (byte)97}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int int0 = StringUtils.length("35*127*0*0*0*0*97");
      assertEquals(17, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("35*127*0*0*0*0*97", "35*127*0*0*0*0*97", (byte)0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("35*127*0*0*0*0*97", "35*127*0*0*0*0*97");
      assertTrue(boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "35*127*0*0*0*0*97", (CharSequence) "35*127*0*0*0*0*97", (int) (byte)0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("35*127*0*0*0*0*97", "35*127*0*0*0*0*97");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.indexOf((CharSequence) "35*127*0*0*0*0*97", 0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string1 = StringUtils.defaultIfBlank("Threshold must not be negative", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.substringBefore((String) null, "35*127*0*0*0*0*97");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "35*127*0*0*0*0*97";
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[4] = (CharSequence) "Threshold must not be negative";
      String string3 = StringUtils.appendIfMissing("Threshold must not be negative", "Threshold must not be negative", charSequenceArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Threshold must not be negative", string3);
      assertEquals(5, charSequenceArray0.length);
      
      int int4 = StringUtils.lastOrdinalIndexOf("Threshold must not be negative", "Threshold must not be negative", (byte)0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Threshold must not be negative", (int) (byte)0, (int) (byte)0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(30, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(30, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.hasArray());
      assertEquals(30, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)122;
      shortArray0[3] = (short) (-1182);
      shortArray0[4] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'o', 13, (int) (short) (-1182));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)0, (short)122, (short)0, (short) (-1182), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'o');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Abrting t prtect against StackOverflwErrr - utput f ne lp is the input f anther", string1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      SortedSet<String> sortedSet0 = treeSet0.headSet("D1CDQwpG");
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertNotNull(sortedSet0);
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(sortedSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      String string2 = StringUtils.join((Iterable<?>) sortedSet0, 'o');
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(sortedSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Abrting t prtect against StackOverflwErrr - utput f ne lp is the input f anther");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.ObjectUtils$Null", "org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 8;
      intArray0[2] = 17;
      intArray0[3] = 3152;
      intArray0[4] = 20;
      intArray0[5] = 62;
      intArray0[6] = 35;
      String string0 = StringUtils.join(intArray0, 'u');
      assertNotNull(string0);
      assertEquals("13u8u17u3152u20u62u35", string0);
      assertArrayEquals(new int[] {13, 8, 17, 3152, 20, 62, 35}, intArray0);
      assertEquals(7, intArray0.length);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(8));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.contains(8));
      
      String string1 = StringUtils.join(iterator0, 'u');
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedHashSet0.contains(8));
      
      String string2 = StringUtils.join((long[]) null, 'u', 7, (-1322));
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "13u8u17u3152u20u62u35", (-1), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                    ", string0);
      
      String string1 = StringUtils.substring((String) null, 2969, (-900));
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 2969;
      floatArray0[3] = (float) (-900);
      floatArray0[4] = (float) 470;
      floatArray0[5] = (float) 470;
      String string2 = StringUtils.strip("i+PQL`~wAN9Vf0");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("i+PQL`~wAN9Vf0", string2);
      
      boolean boolean0 = StringUtils.startsWith("i+PQL`~wAN9Vf0", "ZC6Axe1?SmzqL8x");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 81;
      intArray0[2] = (-1074);
      intArray0[3] = 1;
      intArray0[4] = 105;
      intArray0[5] = 28;
      String string0 = StringUtils.join(intArray0, 'E');
      assertNotNull(string0);
      assertEquals("5E81E-1074E1E105E28", string0);
      assertArrayEquals(new int[] {5, 81, (-1074), 1, 105, 28}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("5E81E-1074E1E105E28");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("5E81E-1074E1E105E28", "5E81E-1074E1E105E28", (String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "5E81E-1074E1E105E28";
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "5E81E-1074E1E105E28");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = StringUtils.join(intArray0, 'x', 122, 35);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new int[] {5, 81, (-1074), 1, 105, 28}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("5E81E-1074E1E105E28");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.trimToNull(",]`*Dhn}>}E,]`*Dhn}>}E");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(",]`*Dhn}>}E,]`*Dhn}>}E", string3);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.ObjectUtils";
      int int0 = 32767;
      // Undeclared exception!
      StringUtils.repeat("org.apache.commons.lang3.ObjectUtils", 32767);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "";
      stringArray0[1] = "t*4Sq/^>f";
      stringArray0[2] = "\r";
      stringArray0[3] = "U\"}%";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("x6.Kwu*w3rqLnTt;?|");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray1.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "U\"}%");
      assertEquals(4, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '3';
      charArray0[2] = '\\';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "t*4Sq/^>f", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {' ', '3', '\\'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      
      String string1 = StringUtils.join(iterator0, "nEBwg|^I]nqJ)o[>MKD");
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("DISPLAYnEBwg|^I]nqJ)o[>MKDFORMAT", string1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[25];
      charSequenceArray0[0] = (CharSequence) "FK_9&Ikf2KWZwC'(o)";
      String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.ArrayUtils", '<');
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[2] = (CharSequence) "FK_9&Ikf2KWZwC'(o)";
      charSequenceArray0[3] = (CharSequence) "FK_9&Ikf2KWZwC'(o)";
      charSequenceArray0[4] = (CharSequence) "FK_9&Ikf2KWZwC'(o)";
      charSequenceArray0[5] = (CharSequence) "FK_9&Ikf2KWZwC'(o)";
      charSequenceArray0[6] = (CharSequence) "FK_9&Ikf2KWZwC'(o)";
      charSequenceArray0[7] = (CharSequence) "FK_9&Ikf2KWZwC'(o)";
      String string1 = StringUtils.prependIfMissing("FK_9&Ikf2KWZwC'(o)", "FK_9&Ikf2KWZwC'(o)", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FK_9&Ikf2KWZwC'(o)", string1);
      assertEquals(25, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("FK_9&Ikf2KWZwC'(o)", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(25, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[4], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(25, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(25, charSequenceArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '<';
      floatArray0[2] = (-504.29617F);
      floatArray0[2] = 497.75266F;
      floatArray0[4] = (float) '<';
      floatArray0[5] = (float) 0;
      String string2 = StringUtils.join(floatArray0, '<');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0.0<60.0<497.75266<0.0<60.0<0.0", string2);
      assertArrayEquals(new float[] {0.0F, 60.0F, 497.75266F, 0.0F, 60.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string3 = StringUtils.join((long[]) null, '<', 0, 14);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.remove("...", '\u0087');
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int0 = StringUtils.countMatches("...", "...");
      assertEquals(1, int0);
      
      String string1 = StringUtils.defaultString("Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array and element cannot both be null", string1);
      
      String string2 = StringUtils.upperCase("...");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.lowerCase("Threshold must not be negative");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("threshold must not be negative", string3);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '\u0087';
      floatArray0[1] = (float) 1;
      String string4 = StringUtils.join(floatArray0, '\u0087');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("135.0\u00871.0", string4);
      assertArrayEquals(new float[] {135.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("135.0\u00871.0");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "...", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripEnd("Threshold must not be negative", (String) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Threshold must not be negative", string5);
      
      String string6 = StringUtils.substringAfterLast(" ", "Threshold must not be negative");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceChars(" ", "The String must not be empty", "threshold must not be negative");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("e", string7);
      
      String string8 = StringUtils.overlay("", "Threshold must not be negative", 0, 10);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("Threshold must not be negative", string8);
      
      String string9 = "\\u";
      String string10 = StringUtils.substringBetween(" ", string9, "e");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertNull(string10);
      
      String[] stringArray0 = StringUtils.split("d$:;<v*+^}bqn|_", " ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string11 = StringUtils.removePattern("d$:;<v*+^}bqn|_", "e");
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertNotNull(string11);
      assertEquals("d$:;<v*+^}bqn|_", string11);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "d$:;<v*+^}bqn|_", (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string12 = StringUtils.strip("7[E{g*V1CTDxItCu&IN");
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string1));
      assertNotNull(string12);
      assertEquals("7[E{g*V1CTDxItCu&IN", string12);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) "7[E{g*V1CTDxItCu&IN", 31);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" in an array of ", " in an array of ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("\"+CvN#fut1>(TNA", "\"+CvN#fut1>(TNA", "\"+CvN#fut1>(TNA");
      assertNull(stringArray1);
      
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp(" in an array of ", (String) null);
      assertNotNull(string1);
      assertEquals(" in an array of ", string1);
      
      String string2 = StringUtils.substringBefore(" in an array of ", " in an array of ");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat('h', 5);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("hhhhh", string3);
      
      String string4 = StringUtils.defaultIfEmpty((String) null, "-%0'8&SdBy-69b,p, '");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("-%0'8&SdBy-69b,p, '", string4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.substring("", 993, 256);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'c');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.strip("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'c');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("cccccccc", string2);
      assertEquals(9, objectArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "cccccccc", 1986);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(993));
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(993));
      
      String string3 = StringUtils.join(iterator0, "");
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(arrayDeque0.contains(993));
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split("", 'c');
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.abbreviate("null/empty items", 7, 37);
      assertNotNull(string0);
      assertEquals("null/empty items", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "null/empty items", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.remove("3/d$6 .+nE6`d)qj", '@');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3/d$6 .+nE6`d)qj", string1);
      
      String string2 = StringUtils.leftPad("D]p};:PD715", 32, '@');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("@@@@@@@@@@@@@@@@@@@@@D]p};:PD715", string2);
      
      String string3 = StringUtils.center("| !5q1/", (-1), 'f');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("| !5q1/", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "| !5q1/", "-%0'8&SdBy-69b,p, '");
      assertFalse(boolean0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(37));
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(37));
      
      String string4 = StringUtils.join(iterator0, '/');
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(arrayDeque0.contains(37));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.substringBefore("#[;p.bGm", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2508.97279585623);
      doubleArray0[4] = 1159.438045567;
      String string1 = StringUtils.join(doubleArray0, ':');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1.0:1.0:1.0:-2508.97279585623:1159.438045567", string1);
      assertArrayEquals(new double[] {(-1.0), 1.0, 1.0, (-2508.97279585623), 1159.438045567}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "#[;p.bGm", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripToNull("-1.0:1.0:1.0:-2508.97279585623:1159.438045567");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("-1.0:1.0:1.0:-2508.97279585623:1159.438045567", string3);
      
      String string4 = StringUtils.leftPad((String) null, 671);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "", 661);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1646), 0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceEachRepeatedly("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.stripAccents("0_pySh4w?B|Il>uv");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0_pySh4w?B|Il>uv", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "0_pySh4w?B|Il>uv");
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      
      String string2 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "0_pySh4w?B|Il>uv");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0_pySh4w?y?yl>?v??vv", string2);
      
      String string3 = StringUtils.replace("", "", "0_pySh4w?B|Il>uv");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substringBetween("", "+hv?f @", "");
      assertNull(string4);
      
      int int2 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 661);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.leftPad("0_pySh4w?B|Il>uv", 3, '^');
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("0_pySh4w?B|Il>uv", string5);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "+hv?f @", (-1846), (-1646));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat('=', 2024);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) string1);
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad((String) null, 0, '=');
      assertNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "g,>Z&", 0, 0);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.leftPad(string1, 0, "");
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty("g,>Z&");
      assertFalse(boolean0);
      
      String string5 = StringUtils.repeat(string4, 2042);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.length(string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(int1 == int0);
      assertEquals(2024, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1466));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.replace((String) null, "g,>Z&", "%74EI");
      assertNull(string6);
      
      String string7 = StringUtils.trimToEmpty("cWbnmu&<>@+h27`^tBN");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("cWbnmu&<>@+h27`^tBN", string7);
      
      boolean boolean2 = StringUtils.isAlpha("cWbnmu&<>@+h27`^tBN");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string8 = StringUtils.center("", 2024);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("=", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) charBuffer0, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("=", charBuffer0.toString());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string9 = StringUtils.rightPad((String) null, 2042, "l:Zt{d#Qtgh");
      assertNull(string9);
      
      boolean boolean4 = StringUtils.containsWhitespace("cWbnmu&<>@+h27`^tBN");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringUtils.defaultString("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      String string1 = StringUtils.lowerCase("Threshold must not be negative");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("threshold must not be negative", string1);
      
      String string2 = StringUtils.stripEnd("Threshold must not be negative", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Threshold must not be negative", string2);
      
      String string3 = StringUtils.substringAfterLast(" ", "Threshold must not be negative");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceChars(" ", "The String must not be empty", "threshold must not be negative");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("e", string4);
      
      String string5 = StringUtils.overlay("", "Threshold must not be negative", 0, 10);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("Threshold must not be negative", string5);
      
      String string6 = "\\u";
      String string7 = StringUtils.substringBetween(" ", string6, "e");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.split("d$:;<v*+^}bqn|_", " ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string8 = StringUtils.removePattern("d$:;<v*+^}bqn|_", "e");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("d$:;<v*+^}bqn|_", string8);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat('=', 2024);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) string1);
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad((String) null, (int) '=', (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "g,>Z&", 0, 0);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.center("g,>Z&", 2024);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty("g,>Z&");
      assertFalse(boolean0);
      
      String string5 = StringUtils.repeat(string4, 2042);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.length(string1);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int1 == int0);
      assertEquals(2024, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1466));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.replace((String) null, "g,>Z&", "%74EI");
      assertNull(string6);
      
      String string7 = StringUtils.trimToEmpty("cWbnmu&<>@+h27`^tBN");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("cWbnmu&<>@+h27`^tBN", string7);
      
      boolean boolean2 = StringUtils.isAlpha("cWbnmu&<>@+h27`^tBN");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string8 = StringUtils.center("", 2024);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      int int4 = StringUtils.lastOrdinalIndexOf("cWbnmu&<>@+h27`^tBN", string1, 26);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertEquals((-1), int4);
      
      int int5 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 4096);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertEquals((-1), int5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.remove("G", 'D');
      assertNotNull(string0);
      assertEquals("G", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G", "44");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.leftPad("", 256, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                ", string1);
      
      boolean boolean0 = StringUtils.isEmpty("                                                                                                                                                                                                                                                                ");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "G";
      stringArray1[1] = "G";
      stringArray1[2] = "44";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray2.length);
      
      String string2 = StringUtils.chop("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("", 256);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trim("");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)84;
      String string5 = StringUtils.join(byteArray0, '=');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("0=0=7=0=84", string5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)7, (byte)0, (byte)84}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "0=0=7=0=84", (CharSequence) "44", 4301);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.rightPad("44", 4096, "");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("]8t6!j-57L]8t6!j-57L");
      assertNotNull(string0);
      assertEquals("]8t6!j-57L]8t6!j-57L", string0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'T');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, (-1572));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.deleteWhitespace("]8t6!j-57L]8t6!j-57L");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("]8t6!j-57L]8t6!j-57L", string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = 'T';
      charArray0[8] = 'R';
      String string3 = StringUtils.join(charArray0, 'T');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("TTTTTTTTTTTTTTTTR", string3);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'R'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "TTTTTTTTTTTTTTTTR", (CharSequence) "]8t6!j-57L]8t6!j-57L");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.substring("", 2, 48);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = '7';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'j', '7'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, '7');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.defaultIfBlank("", "1Fc$<;6o{OHl_g.#");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("1Fc$<;6o{OHl_g.#", string4);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 32;
      Integer integer0 = new Integer(32);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(32, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(32);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(32, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(32);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(32, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(32);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(32, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(32, (int)integer5);
      
      integerArray0[5] = integer5;
      String string0 = StringUtils.join(integerArray0);
      assertNotNull(string0);
      assertEquals("323232323232", string0);
      assertEquals(6, integerArray0.length);
      
      boolean boolean0 = StringUtils.containsWhitespace("323232323232");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((int[]) null, '>');
      assertNull(string1);
      
      String string2 = StringUtils.EMPTY;
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.replace("323232323232", (String) null, "S'l_MdW;rH]t!%%C7", int0);
      assertFalse(int0 == int1);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("323232323232", string3);
      
      String string4 = StringUtils.replaceChars("", "C?T0~aR>2p[V^MDQ", "\r");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int2 = StringUtils.countMatches("", "323232323232");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "323232323232";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "323232323232";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "S'l_MdW;rH]t!%%C7";
      charSequenceArray0[5] = (CharSequence) "323232323232";
      charSequenceArray0[6] = (CharSequence) "";
      int int3 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      assertEquals(7, charSequenceArray0.length);
      
      int int4 = StringUtils.indexOf((CharSequence) "\r", charSequenceArray0[3]);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.ArrayUtils", '<');
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[2] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[3] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[4] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[5] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[6] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      charSequenceArray0[7] = (CharSequence) "FK_9&Ikf2KWZw'(o)";
      String string1 = StringUtils.prependIfMissing("FK_9&Ikf2KWZw'(o)", "FK_9&Ikf2KWZw'(o)", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FK_9&Ikf2KWZw'(o)", string1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("FK_9&Ikf2KWZw'(o)", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[4], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '<';
      floatArray0[2] = (-528.95856F);
      floatArray0[3] = 497.75266F;
      floatArray0[4] = (float) '<';
      floatArray0[5] = (float) 0;
      String string2 = StringUtils.join(floatArray0, '<');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0.0<60.0<-528.95856<497.75266<60.0<0.0", string2);
      assertArrayEquals(new float[] {0.0F, 60.0F, (-528.95856F), 497.75266F, 60.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String string3 = StringUtils.left("FK_9&Ikf2KWZw'(o)", (-3490));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 267);
      assertNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("", (String) null, "");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replace("C47+}uBC", (String) null, "bPuF");
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("C47+}uBC", string4);
      
      String string5 = StringUtils.defaultString((String) null);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "C47+}uBC", (CharSequence) "", 267);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, int2);
      
      String string6 = StringUtils.chomp(" in an array of ");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(" in an array of ", string6);
      
      String string7 = StringUtils.trimToEmpty("");
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.stripToEmpty("");
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("", string8);
      
      int int3 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-132));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '#';
      charArray0[2] = 'f';
      String string9 = StringUtils.join(charArray0, 'F');
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("FF#Ff", string9);
      assertArrayEquals(new char[] {'F', '#', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = StringUtils.replace("u$", "u$", "A-FUQq;XXk#jKx?x[))");
      assertNotNull(string0);
      assertEquals("A-FUQq;XXk#jKx?x[))", string0);
      
      String string1 = StringUtils.CR;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("A-FUQq;XXk#jKx?x[))", "\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.abbreviateMiddle(", '", "\r", 1142);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(", '", string2);
      
      String string3 = StringUtils.replaceOnce("A-FUQq;XXk#jKx?x[))", "u$", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("A-FUQq;XXk#jKx?x[))", string3);
      
      String string4 = StringUtils.replaceChars((String) null, 'h', 'h');
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.split("K)[}L", "A-FUQq;XXk#jKx?x[))", (-469));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.substringBetween("zw.xpl05aC9HV'_s", "", "zw.xpl05aC9HV'_s");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "zw.xpl05aC9HV'_s", (CharSequence) "zw.xpl05aC9HV'_s");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.upperCase("zw.xpl05aC9HV'_s");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ZW.XPL05AC9HV'_S", string2);
      
      String string3 = StringUtils.substring("ZW.XPL05AC9HV'_S", 0, (-861));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 0L;
      String string4 = StringUtils.join(objectArray0, "", 0, (-861));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(3, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("zw.xpl05aC9HV'_s");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 128);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 128);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.join(stringArray0);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "\n", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string6 = StringUtils.difference("\n", "__#LH!SuXv");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("__#LH!SuXv", string6);
      
      String string7 = StringUtils.join((char[]) null, ',', 7, 16);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = StringUtils.repeat("]", 1435);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "]";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) string0, (CharSequence) "]");
      assertNotNull(charSequence0);
      
      charSequenceArray0[1] = charSequence0;
      charSequenceArray0[2] = (CharSequence) "]";
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) "]";
      charSequenceArray0[5] = (CharSequence) string0;
      charSequenceArray0[6] = (CharSequence) string0;
      charSequenceArray0[7] = (CharSequence) string0;
      boolean boolean0 = StringUtils.endsWithAny(string0, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = StringUtils.rightPad("The character must not be null", 3, "The character must not be null");
      assertNotNull(string0);
      assertEquals("The character must not be null", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("The character must not be null");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (-1), (-1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "The character must not be null";
      charSequenceArray0[1] = (CharSequence) "The character must not be null";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string1 = StringUtils.remove("3|76I^", 'v');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3|76I^", string1);
      
      String string2 = StringUtils.leftPad("\n", 0, "5h?<cgq1PGdcg2");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) " ";
      charSequenceArray0[8] = (CharSequence) " ";
      String string3 = StringUtils.prependIfMissingIgnoreCase("", "The character must not be null", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(9, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)69;
      String string4 = StringUtils.join(byteArray0, '@');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)31, (byte)69}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "YDVY\\;";
      int int0 = 3;
      String string1 = StringUtils.right("YDVY;", 3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("VY;", string1);
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, 'N');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String string3 = "%P?lpW?B% >%]}WWE&";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("%P?lpW?B% >%]}WWE&", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.difference("Supplied value must be a valid byte literal between -32768 and 32767: [", "(?: s|[s&&[^ ]])s*");
      assertNotNull(string0);
      assertEquals("(?: s|[s&&[^ ]])s*", string0);
      
      boolean boolean0 = StringUtils.isBlank("(?: s|[s&&[^ ]])s*");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "(?: s|[s&&[^ ]])s*", (-809));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "(?: s|[s&&[^ ]])s*", (-809));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 13;
      int int3 = StringUtils.indexOf((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "(?: s|[s&&[^ ]])s*", 13);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Supplied value must be a valid byte literal between -32768 and 32767: [", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "(?: s|[s&&[^ ]])s*");
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
      
      String string1 = StringUtils.chop("(?: s|[s&&[^ ]])s*");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(?: s|[s&&[^ ]])s", string1);
      
      String string2 = StringUtils.abbreviateMiddle("(?: s|[s&&[^ ]])s", "Supplied value must be a valid byte literal between -32768 and 32767: [", (-1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("(?: s|[s&&[^ ]])s", string2);
      
      int int5 = StringUtils.countMatches("(?: s|[s&&[^ ]])s", "(?: s|[s&&[^ ]])s*");
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      
      char char0 = 'N';
      String string3 = StringUtils.replaceChars("(?: s|[s&&[^ ]])s", 'N', 'l');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("(?: s|[s&&[^ ]])s", string3);
      
      String string4 = StringUtils.rightPad((String) null, (-809));
      assertNull(string4);
      
      String string5 = StringUtils.swapCase((String) null);
      assertNull(string5);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)114;
      String string6 = "Minimum abbreviation width with offset is 7";
      try { 
        StringUtils.toString(byteArray0, "Minimum abbreviation width with offset is 7");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.center("Strings must not be null", 639, '~');
      assertNotNull(string0);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Strings must not be null~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string0);
      
      String string1 = StringUtils.repeat("Strings must not be null", (-17));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Strings must not be null", "Strings must not be null");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("", (-17));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string3 = StringUtils.right("", 639);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Strings must not be null", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.abbreviate("", 769, 769);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat('=', 2024);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) string1);
      assertEquals(0, int0);
      
      String string2 = StringUtils.upperCase(string1);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "g,>Z&", 0, 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.leftPad(string1, 0, "");
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty("g,>Z&");
      assertFalse(boolean0);
      
      String string5 = StringUtils.repeat(string4, 2042);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.length(string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(int1 == int0);
      assertEquals(2024, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) "");
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1466));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.replace((String) null, "g,>Z&", "%74EI");
      assertNull(string6);
      
      String string7 = StringUtils.trimToEmpty("cWbnmu&<>@+h27`^tBN");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("cWbnmu&<>@+h27`^tBN", string7);
      
      boolean boolean2 = StringUtils.isAlpha("cWbnmu&<>@+h27`^tBN");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string8 = StringUtils.center("", 2024);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      String string9 = StringUtils.join((char[]) null, '=', 1141, 0);
      assertNull(string9);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("cWbnmu&<>@+h27`^tBN"));
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains("cWbnmu&<>@+h27`^tBN"));
      
      String string10 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(string10);
      assertEquals("", string10);
      assertFalse(linkedList0.contains("cWbnmu&<>@+h27`^tBN"));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2434;
      shortArray0[3] = (short)2315;
      shortArray0[4] = (short)117;
      shortArray0[5] = (short)58;
      String string11 = StringUtils.join(shortArray0, 'i', 2, (int) (short)5);
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
      assertNotNull(string11);
      assertEquals("2434i2315i117", string11);
      assertArrayEquals(new short[] {(short)5, (short)0, (short)2434, (short)2315, (short)117, (short)58}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "9Df8~-}";
      int int0 = (-2232);
      String string1 = StringUtils.repeat("9Df8~-}", "9Df8~-}", (-2232));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "9Df8~-}";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "9Df8~-}";
      charSequenceArray0[4] = (CharSequence) "9Df8~-}";
      charSequenceArray0[5] = (CharSequence) "9Df8~-}";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[5], (-287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.substringBetween("!$S/@mWf>ST>G", "!$S/@mWf>ST>G");
      assertNull(string0);
      
      String string1 = StringUtils.mid("!$S/@mWf>ST>G", (-341), 5);
      assertNotNull(string1);
      assertEquals("!$S/@", string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("!$S/@mWf>ST>G");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-5861);
      shortArray0[1] = (short)1991;
      shortArray0[2] = (short) (-411);
      shortArray0[3] = (short) (-2815);
      shortArray0[4] = (short)1402;
      shortArray0[5] = (short) (-598);
      String string2 = StringUtils.join(shortArray0, 'r', (-187), (int) (short) (-598));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new short[] {(short) (-5861), (short)1991, (short) (-411), (short) (-2815), (short)1402, (short) (-598)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.removeStartIgnoreCase("!$S/@mWf>ST>G", "!$S/@");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("mWf>ST>G", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "mWf>ST>G", (-187));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("!$S/@", ", Length: 0");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.difference("!$S/@mWf>ST>G", "nTTpl");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("nTTpl", string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "!$S/@mWf>ST>G", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "!$S/@");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(Z>m^s,;*Eo", 'h');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.substringAfter("(Z>m^s,;*Eo", "@zNB1");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "(Z>m^s,;*Eo", (CharSequence) "", (-1421));
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 's', 0, (-1670));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.substringBetween("lR0z)Xd0", "q*'ZIh", "q*'ZIh");
      assertNull(string0);
      
      String string1 = StringUtils.replace("", "lR0z)Xd0", "M$bZ2n9lc1koK,", 3238);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter("M$bZ2n9lc1koK,", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.prependIfMissing("lR0z)Xd0", "lR0z)Xd0", (CharSequence[]) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("lR0z)Xd0", string4);
      
      String string5 = StringUtils.defaultString("");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1278);
      shortArray0[1] = (short)0;
      String string6 = StringUtils.join(shortArray0, '7', (int) (short)0, (-865));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      assertArrayEquals(new short[] {(short) (-1278), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("q*'ZIh");
      assertFalse(boolean0);
      
      String string7 = StringUtils.chop("");
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 206);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("lR0z)Xd0");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", ")eJ/b$9gAI-(");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string8 = StringUtils.abbreviateMiddle("", "M$bZ2n9lc1koK,", (short) (-1278));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean4 = StringUtils.isWhitespace("");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$~gz", ">6!A.");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string9 = StringUtils.leftPad("", 3238, "");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
      
      boolean boolean5 = StringUtils.isBlank("q*'ZIh");
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.swapCase("NUE*#I$X#Q#O");
      assertNotNull(string0);
      assertEquals("nue*#i$x#q#o", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "NUE*#I$X#Q#O", (CharSequence) "nue*#i$x#q#o", 122);
      assertEquals(7, int0);
      
      String string1 = StringUtils.uncapitalize("nue*#i$x#q#o");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nue*#i$x#q#o", string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("nue*#i$x#q#o");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, '>', 122, (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("nue*#i$x#q#o");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)2535;
      shortArray0[2] = (short)1772;
      shortArray0[3] = (short)115;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short)13;
      shortArray0[6] = (short)3130;
      String string3 = StringUtils.join(shortArray0, '>');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("15>2535>1772>115>5>13>3130", string3);
      assertArrayEquals(new short[] {(short)15, (short)2535, (short)1772, (short)115, (short)5, (short)13, (short)3130}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.swapCase("/2d[25qahD@=/2d[25qahD@=");
      assertNotNull(string0);
      assertEquals("/2D[25QAHd@=/2D[25QAHd@=", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Arguments cannot both be null", "", 34);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 34;
      String string0 = StringUtils.join(floatArray0, ']', 34, 34);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {34.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      String string1 = StringUtils.join(byteArray0, ']', 3386, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)107, (byte)10, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\"`*]{1?I\",E{o0<|", "", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.StringUtils");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string0 = StringUtils.stripStart("i-n2_l4~\u0003UlPxXxo7+", "");
      assertNotNull(string0);
      assertEquals("i-n2_l4~\u0003UlPxXxo7+", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("i-n2_l4~\u0003UlPxXxo7+", "SaEHDLL,f=4LgTA*zA", "i-n2_l4~\u0003UlPxXxo7+");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("i-n2_ll~\u0003UlPxXxo7+", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = StringUtils.removeStart("N", "N");
      assertNotNull(string0);
      assertEquals("", string0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Spliterator<Integer> spliterator0 = arrayDeque0.spliterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(spliterator0);
      
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      arrayDeque0.clear();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string1 = StringUtils.join(iterator0, ",{Np;&");
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("`-$]/.Rl$", (-2090));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`-$]/.Rl$", string2);
      
      String string3 = StringUtils.join((byte[]) null, '/');
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "N");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.uncapitalize("SBb$`\"3*}VeFPPMZ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("sBb$`\"3*}VeFPPMZ", string4);
      
      int int1 = StringUtils.countMatches("", "`-$]/.Rl$");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.leftPad("S.tGoe|8O;,zMc", (-2090), "sBb$`\"3*}VeFPPMZ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("S.tGoe|8O;,zMc", string5);
      
      String[] stringArray0 = StringUtils.split("8$iW]\"|eV;0?", "(?: s|[s&&[^ ]])s*", (-1));
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "(?: s|[s&&[^ ]])s*", (-1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = "\\u";
      String string7 = StringUtils.replaceChars("R,&CK;v,)#3v,-2T+", ",{Np;&", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("R\\CKv\\)#3v\\-2T+", string7);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "N", (CharSequence) "RCKv)#3v-2T+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", " ", "&9M29u!)M&\"");
      assertNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[6] = '[';
      charArray0[5] = '(';
      charArray0[6] = '$';
      String string1 = StringUtils.join(charArray0, '#');
      assertNotNull(string1);
      assertEquals("*#I#I#3#\u0000#(#$", string1);
      assertArrayEquals(new char[] {'*', 'I', 'I', '3', '\u0000', '(', '$'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("*#I#I#3#\u0000#(#$");
      assertFalse(boolean0);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "*#I#I#3#\u0000#(#$";
      String string3 = StringUtils.trimToEmpty((String) null);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) '*';
      intArray0[3] = (int) '*';
      intArray0[4] = (int) '(';
      intArray0[5] = (int) '3';
      intArray0[6] = (int) 'I';
      String string4 = StringUtils.join(intArray0, '0');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("36073042042040051073", string4);
      assertArrayEquals(new int[] {36, 73, 42, 42, 40, 51, 73}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "36073042042040051073");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("2UAHRJOhlI8)[^", ", Length: 0");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^";
      charSequenceArray0[1] = (CharSequence) ", Length: 0";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(", Length: 0"));
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      assertFalse(stack0.contains(", Length: 0"));
      
      String string1 = StringUtils.join(iterator0, '=');
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(stack0.contains(", Length: 0"));
      
      boolean boolean1 = StringUtils.startsWith(", Length: 0", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.replaceChars("", "QK+s@$p", "2UAHRJOhlI8)[^");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '=';
      doubleArray0[1] = (double) '=';
      doubleArray0[2] = (double) '=';
      String string3 = StringUtils.join(doubleArray0, '=');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("61.0=61.0=61.0", string3);
      assertArrayEquals(new double[] {61.0, 61.0, 61.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string4 = StringUtils.join(iterator0, "\" l4[N/1GDr");
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(stack0.contains(""));
      
      String string5 = "\\u00";
      String string6 = StringUtils.center(string5, 0, '/');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("\\u00", string6);
      
      String string7 = StringUtils.removeEnd("", "");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.overlay("", ", Length: 0", 544, 1836);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals(", Length: 0", string8);
      
      String string9 = StringUtils.abbreviate(", '", 0, 4);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals(", '", string9);
      
      String string10 = StringUtils.mid(", Length: 0", 1836, 28);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertNotNull(string10);
      assertEquals("", string10);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'E', (-685), (-528));
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-685));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.split("b_5^Evyf1$", (String) null, 39);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (CharSequence) "b_5^Evyf1$", (-685));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.leftPad("EGjpCY/f#E`-G", 537, 'E');
      assertNotNull(string1);
      assertEqualsjpCY/f#E`-G", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.rightPad("Px", 64, "Px");
      assertNotNull(string0);
      assertEquals("PxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPx", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "PxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPx", (CharSequence) "Px", (-2526));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Px");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "PxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPx", (CharSequence) "PxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPxPx", 551);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.replaceChars("Px", 't', ']');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Px", string1);
      
      String string2 = StringUtils.left((String) null, 13);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.removeStart("R,&CK", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("R,&CK", string3);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Px", (CharSequence) "R,&CK", 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) ']';
      floatArray0[3] = (float) ']';
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) ']';
      floatArray0[6] = (float) 't';
      floatArray0[7] = (float) 64;
      floatArray0[8] = (float) 0;
      String string4 = StringUtils.join(floatArray0, ']', 2892, 2557);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new float[] {(-1.0F), 13.0F, 93.0F, 93.0F, 0.0F, 93.0F, 116.0F, 64.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-2456);
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (-2456));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, 'G');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(int1));
      
      Integer integer0 = new Integer((-2456));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2456), (int)integer0);
      
      boolean boolean0 = vector0.add(integer0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-2456]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertTrue(vector0.contains((-2456)));
      assertFalse(vector0.contains(int1));
      
      String string1 = StringUtils.join((Iterable<?>) vector0, "&|w#KCqFbZ(Sp1F");
      assertFalse(vector0.isEmpty());
      assertEquals("[-2456]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(vector0.contains((-2456)));
      assertFalse(vector0.contains(int1));
      
      boolean boolean1 = StringUtils.isNumeric("&|w#KCqFbZ(Sp1F");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "org.apache.commons.lang3.StringUtils");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "org.apache.commons.lang3.StringUtils", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substringAfterLast("pL@V", "");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray1, 'g');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string4 = StringUtils.center("", (-1), 'G');
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      HashSet<Object> hashSet0 = null;
      try {
        hashSet0 = new HashSet<Object>(0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("^i1M#y\no#.Pj", "^i1M#y\no#.Pj", "^i1M#y\no#.Pj");
      assertNotNull(string0);
      assertEquals("^i1M#y\no#.Pj", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("^i1M#y\no#.Pj", "^i1M#y\no#.Pj");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "^i1M#y\no#.Pj");
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 4, 0);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 0);
      assertNull(stringArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "^i1M#y\no#.Pj";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string4 = StringUtils.join(objectArray0, "~^V/Om6;)");
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("^i1M#y\no#.Pj~^V/Om6;)~^V/Om6;)~^V/Om6;)~^V/Om6;)~^V/Om6;)~^V/Om6;)", string4);
      assertEquals(7, objectArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("^i1M#y\no#.Pj", (String) null);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      boolean boolean1 = StringUtils.isBlank("^i1M#y\no#.Pj");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripAccents((String) null);
      assertNull(string5);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '\'';
      charArray0[3] = 'k';
      charArray0[4] = ')';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'?', '?', '\'', 'k', ')'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "^i1M#y\no#.Pj", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "";
      stringArray0[1] = "t*4Sq/^>f";
      stringArray0[2] = "\r";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("x6.Kwu*w3rqLnTt;?|");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray1.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) stringArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = StringUtils.strip("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.removeEnd(",]`*Dhn}>}E,]`*Dhn}>}E", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(",]`*Dhn}>}E,]`*Dhn}>}E", string2);
      
      int int0 = StringUtils.length(",]`*Dhn}>}E,]`*Dhn}>}E");
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.remove("%Me2EGPl0k<046Gfjv!", ':');
      assertNotNull(string0);
      assertEquals("%Me2EGPl0k<046Gfjv!", string0);
      
      String string1 = StringUtils.remove((String) null, ':');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "%Me2EGPl0k<046Gfjv!";
      objectArray0[1] = (Object) "%Me2EGPl0k<046Gfjv!";
      String string2 = StringUtils.join(objectArray0, ':', 0, 0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(2, objectArray0.length);
      
      String string3 = StringUtils.rightPad((String) null, (-2334), "%Me2EGPl0k<046Gfjv!");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("%Me2EGPl0k<046Gfjv!", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = '%';
      charArray0[5] = ':';
      charArray0[6] = ':';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'^', ':', ':', ':', '%', ':', ':'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.replaceChars(">PSfJ(cf8(aTc<u", 'B', 'B');
      assertNotNull(string0);
      assertEquals(">PSfJ(cf8(aTc<u", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ">PSfJ(cf8(aTc<u", (CharSequence) ">PSfJ(cf8(aTc<u");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      boolean boolean1 = StringUtils.containsAny((CharSequence) ">PSfJ(cf8(aTc<u", charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', 'B'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string1 = StringUtils.chop("Arguments cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Arguments cannot both be nul", string1);
      
      String string2 = StringUtils.repeat(" vs ", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.chomp("Arguments cannot both be nul", "");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Arguments cannot both be nul", string3);
      
      String string4 = "\\u000";
      String[] stringArray1 = StringUtils.substringsBetween(" vs ", string4, "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNull(stringArray1);
      
      String string5 = StringUtils.repeat(';', 0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("Arguments cannot both be null");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      String string6 = StringUtils.join(locale_CategoryArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("DISPLAYDISPLAYFORMAT", string6);
      assertEquals(3, locale_CategoryArray0.length);
      
      String string7 = StringUtils.stripStart("", ">PSfJ(cf8(aTc<u");
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ">PSfJ(cf8(aTc<u", (CharSequence) "");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", " ", "&9M29u!)M&\"");
      assertNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = 'I';
      charArray0[2] = '5';
      charArray0[3] = '3';
      charArray0[4] = '[';
      charArray0[5] = '(';
      charArray0[6] = '$';
      String string1 = StringUtils.join(charArray0, '$');
      assertNotNull(string1);
      assertEquals("*$I$5$3$[$($$", string1);
      assertArrayEquals(new char[] {'*', 'I', '5', '3', '[', '(', '$'}, charArray0);
      assertEquals(7, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = StringUtils.chop(" ");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'I';
      intArray0[1] = 992;
      intArray0[2] = (int) '3';
      intArray0[3] = 1150;
      String string3 = StringUtils.join(intArray0, '[');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("73[992[51[1150", string3);
      assertArrayEquals(new int[] {73, 992, 51, 1150}, intArray0);
      assertEquals(4, intArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "73[992[51[1150";
      charSequenceArray0[3] = (CharSequence) "*$I$5$3$[$($$";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) "&9M29u!)M&\"";
      String string4 = StringUtils.join(intArray0, '$');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("73$992$51$1150", string4);
      assertArrayEquals(new int[] {73, 992, 51, 1150}, intArray0);
      assertEquals(4, intArray0.length);
      
      charSequenceArray0[6] = (CharSequence) "73$992$51$1150";
      String string5 = StringUtils.substringAfter("*$I$5$3$[$($$", "clone");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'V');
      assertNotNull(string0);
      assertEquals("0V-78V0V0V0", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0V-78V0V0V0");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[1] = (CharSequence) "0V-78V0V0V0";
      String string1 = StringUtils.chop("L<}tOz");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L<}tO", string1);
      
      charSequenceArray0[2] = (CharSequence) "L<}tO";
      charSequenceArray0[3] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[5] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[7] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[8] = (CharSequence) "0V-78V0V0V0";
      int int0 = StringUtils.indexOfAny((CharSequence) "0V-78V0V0V0", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[1], charSequenceArray0[1]);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", 'V');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripEnd("0V-78V0V0V0", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0V-78V0V0V0", string2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1));
      assertNull(string0);
      
      String string1 = StringUtils.difference("))35r:FlaI:", "qf(s1!YrzK7W/ ");
      assertNotNull(string1);
      assertEquals("qf(s1!YrzK7W/ ", string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = StringUtils.repeat('E', 2256);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp("/9!yB");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("/9!yB", string2);
      
      String string3 = StringUtils.leftPad("/9!yB", (int) 'E');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("                                                               /9!yB", string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("                                                               /9!yB");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("/9!yB", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.rightPad((String) null, 5, 'A');
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "                                                               /9!yB");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.countMatches("                                                               /9!yB", "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string5 = StringUtils.repeat((String) null, "", 0);
      assertNull(string5);
      
      String string6 = StringUtils.removeEnd("c-L", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("c-L", string6);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'E';
      charArray0[2] = 'A';
      charArray0[3] = 'E';
      charArray0[4] = 'A';
      charArray0[5] = 'H';
      charArray0[6] = 'A';
      charArray0[7] = 'E';
      charArray0[8] = 'A';
      String string7 = StringUtils.join(charArray0, '}');
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("A}E}A}E}A}H}A}E}A", string7);
      assertArrayEquals(new char[] {'A', 'E', 'A', 'E', 'A', 'H', 'A', 'E', 'A'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("\n", "Cannot clone Cloneable type ");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isAlpha("Cannot clone Cloneable type ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) "Cannot clone Cloneable type ");
      assertEquals(0, int0);
      
      String string1 = "7'rFf\"+<n";
      int int1 = StringUtils.indexOfAny((CharSequence) "\n", "7'rFf\"+<n");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.ordinalIndexOf("7'rFf\"+<n", "\n", (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'P';
      charArray0[2] = ':';
      charArray0[3] = '9';
      charArray0[4] = 'p';
      charArray0[5] = 'K';
      charArray0[6] = 'P';
      charArray0[7] = 'K';
      charArray0[8] = 'X';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '~', (-1454), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1454
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "Cv>5>=W6}<f6#";
      String string1 = "Supplied value must be a valid byte literal between -128 and 127: [";
      String string2 = "RLmN3C^~*";
      String string3 = StringUtils.replace("Cv>5>=W6}<f6#", "Supplied value must be a valid byte literal between -128 and 127: [", "RLmN3C^~*", 628);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Cv>5>=W6}<f6#", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cv>5>=W6}<f6#", (CharSequence) "RLmN3C^~*");
      assertEquals(13, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("Supplied value must be a valid byte literal between -128 and 127: [");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substringBetween("wdG{ULC:!YBH/=\"", "0`bSO0`bSO", "0`bSO0`bSO");
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "RLmN3C^~*", (CharSequence) null, 628);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.length("0`bSO0`bSO");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(10, int2);
      
      String string5 = StringUtils.stripStart("Supplied value must be a valid byte literal between -128 and 127: [", "Cv>5>=W6}<f6#");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string5);
      
      String string6 = StringUtils.join((double[]) null, 'q');
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (-681L);
      longArray0[2] = 0L;
      longArray0[3] = (-655L);
      longArray0[4] = 1L;
      longArray0[5] = (-1884L);
      longArray0[6] = 1683L;
      longArray0[7] = 1604L;
      longArray0[8] = (-1763L);
      String string0 = StringUtils.join(longArray0, 'Z', 4096, 4096);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new long[] {(-1L), (-681L), 0L, (-655L), 1L, (-1884L), 1683L, 1604L, (-1763L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      String string1 = StringUtils.rightPad("", 4148);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("NJWpIy", "", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("NJWpIy", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "NJWpIy";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("NJWpIy", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.capitalize("G3");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("G3", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) "G3", 31);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = StringUtils.removePattern("SOE", "");
      assertNotNull(string0);
      assertEquals("SOE", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.overlay("SOE", "SOE", (-1293), (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("SOESOE", string1);
      
      String string2 = StringUtils.prependIfMissing("SOE", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("SOE", string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.replaceEach("SOE", stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("SOE", string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.substringAfterLast("", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.leftPad("", (-1293), '^');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.rightPad("]ecS3", 0, "SOE");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("]ecS3", string6);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      int int0 = StringUtils.indexOfAny((CharSequence) "]ecS3", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'^', '^', '^', '^', '^'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string7 = StringUtils.strip("]ecS3");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("]ecS3", string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "SOE", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("SOE", "SOE");
      assertTrue(boolean0);
      
      String string8 = StringUtils.substringAfterLast("lkbE6;xh:", "");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.replace("The String must not be empty", "The String must not be empty", "The String must not be empty", 64);
      assertNotNull(string0);
      assertEquals("The String must not be empty", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Class<String> class2 = String.class;
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      ServiceLoader<String> serviceLoader2 = ServiceLoader.load(class2);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertNotNull(serviceLoader2);
      assertSame(class2, class1);
      assertNotSame(serviceLoader2, serviceLoader1);
      
      Class<String> class3 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<String> serviceLoader3 = ServiceLoader.load(class3, classLoader1);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader3.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader3.equals((Object)serviceLoader1));
      assertFalse(serviceLoader3.equals((Object)serviceLoader2));
      assertNotNull(serviceLoader3);
      assertSame(class3, class2);
      assertSame(class3, class1);
      assertNotSame(serviceLoader3, serviceLoader1);
      assertNotSame(serviceLoader3, serviceLoader2);
      
      ServiceLoader<String> serviceLoader4 = ServiceLoader.load(class2);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader4.toString());
      assertFalse(serviceLoader4.equals((Object)serviceLoader1));
      assertFalse(serviceLoader4.equals((Object)serviceLoader3));
      assertFalse(serviceLoader4.equals((Object)serviceLoader2));
      assertNotNull(serviceLoader4);
      assertSame(class2, class1);
      assertSame(class2, class3);
      assertNotSame(serviceLoader4, serviceLoader1);
      assertNotSame(serviceLoader4, serviceLoader3);
      assertNotSame(serviceLoader4, serviceLoader2);
      
      Iterator<Object> iterator1 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertNotSame(iterator1, iterator0);
      
      String string1 = StringUtils.join(iterator1, '0');
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(iterator1, iterator0);
      
      String string2 = StringUtils.stripEnd((String) null, "The String must not be empty");
      assertNull(string2);
      
      String string3 = StringUtils.join((Iterable<?>) serviceLoader0, "Y5Zm'5:I");
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("The String must not be empty");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.chomp((String) null, "a87Cags0fr*t");
      assertNull(string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(11, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.center("", (-1), "]8t6!j-57L]8t6!j-57L");
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "The String must not be empty", 64);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Y5Zm'5:I");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string7 = StringUtils.substringAfterLast("<K<K", "^'L6=R|&5EFJmu0M");
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence) "The String must not be empty");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("{}", "{}", "bIUqWt)gbqj\"@");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = " u2$K*+(}VBnq5[k";
      String string1 = StringUtils.trimToEmpty(" u2$K*+(}VBnq5[k");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u2$K*+(}VBnq5[k", string1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)3304;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1653;
      short short0 = (short)2757;
      shortArray0[4] = (short)2757;
      shortArray0[5] = (short) (-1899);
      shortArray0[6] = (short) (-556);
      shortArray0[7] = (short)0;
      char char0 = '';
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '', 0, (int) (short)1653);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 0);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      String string1 = StringUtils.join(objectArray0, '|', 0, (-625));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(5, objectArray0.length);
      
      String string2 = StringUtils.join(objectArray0, '+', 112, (-1052));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(5, objectArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string3 = StringUtils.upperCase("", locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object3));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      String string0 = StringUtils.join(objectArray0, '-', 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, objectArray0.length);
      
      String string1 = "\\u0";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, "{uI!7g>vc\u0002CU2", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isBlank(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "{uI!7g>vc\u0002CU2", (CharSequence) "{uI!7g>vc\u0002CU2");
      assertEquals(0, int0);
      
      String string2 = StringUtils.trimToNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\\u0", string2);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\\u0", string3);
      assertEquals(2, stringArray0.length);
      
      String string4 = "\\u";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(string4, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.upperCase("[`.Lb.");
      assertNotNull(string0);
      assertEquals("[`.LB.", string0);
      
      String string1 = StringUtils.trimToNull("[`.LB.");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[`.LB.", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "[`.LB.", 16);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "[`.LB.", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceEachRepeatedly("[`.LB.", (String[]) null, (String[]) null);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[`.LB.", string2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'R');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "2qY<k 8[{rvB";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "2qY<k 8[{rvB";
      String string1 = StringUtils.repeat("pa<yhD-&$$*H/W#'", "2qY<k 8[{rvB", 256);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) string1;
      charSequenceArray0[5] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("2qY<k 8[{rvB", "", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("2qY<k 8[{rvB", string2);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[5], 0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "2qY<k 8[{rvB");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-10);
      String string3 = StringUtils.join(byteArray0, ')', 256, 256);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)127, (byte)0, (byte)0, (byte)107, (byte) (-10)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 221L;
      String string0 = StringUtils.join(longArray0, '@');
      assertNotNull(string0);
      assertArrayEquals(new long[] {0L, 0L, 221L}, longArray0);
      assertEquals(3, longArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.prependIfMissing("0@0@221", "0@0@221", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.center("0@0@221", (-3651), "0@0@221");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "0@0@221", (CharSequence) "0@0@221", (-3651));
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("0@0@221");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("0@0@221");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.leftPad("0@0@221", (-3651));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty("0@0@221");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2317);
      intArray0[2] = (int) '@';
      intArray0[3] = (int) '@';
      intArray0[4] = (int) '@';
      intArray0[5] = (-3651);
      intArray0[6] = 0;
      intArray0[7] = (-3651);
      String string5 = StringUtils.join(intArray0, '@');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertArrayEquals(new int[] {0, (-2317), 64, 64, 64, (-3651), 0, (-3651)}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean boolean2 = StringUtils.isWhitespace("0@-2317@64@64@64@-3651@0@-3651");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.right("\r", 351);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "\r";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "\r";
      String string2 = StringUtils.join(objectArray0, "24/");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r24/java.lang.Object@20b6e6ac24/java.lang.Object@7ce5ecb624/\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      int int0 = StringUtils.lastIndexOfAny("\r24/java.lang.Object@20b6e6ac24/java.lang.Object@7ce5ecb624/\r", charSequenceArray0);
      assertEquals(60, int0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "\r24/java.lang.Object@20b6e6ac24/java.lang.Object@7ce5ecb624/\r", (CharSequence) "\r", 351);
      assertTrue(int1 == int0);
      assertEquals(60, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("J*^HJL'O=", "", 60);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("J*^HJL'O=", string3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.substringBefore(", '", "The Array must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(", '", string4);
      
      String string5 = StringUtils.upperCase("J*^HJL'O=");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("J*^HJL'O=", string5);
      
      String string6 = StringUtils.trimToEmpty("p{InCombiningDiacriticalMarks}+");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains(""));
      
      String string7 = StringUtils.join(iterator0, 'Y');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(arrayList0.contains(""));
      
      String string8 = StringUtils.chop("', is neither of type Map.Entry nor an Array");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("', is neither of type Map.Entry nor an Arra", string8);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) " ";
      String string1 = StringUtils.leftPad(">20vl%B]Z&", 0, " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(">20vl%B]Z&", string1);
      
      charSequenceArray0[1] = (CharSequence) ">20vl%B]Z&";
      String string2 = StringUtils.substringBefore("SEPMfbF1", "The Array must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("SEPMfbF1", string2);
      
      charSequenceArray0[2] = (CharSequence) "SEPMfbF1";
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "The Array must not be null";
      charSequenceArray1[2] = (CharSequence) "The Array must not be null";
      charSequenceArray1[3] = (CharSequence) "SEPMfbF1";
      charSequenceArray1[4] = (CharSequence) "";
      charSequenceArray1[5] = (CharSequence) " ";
      charSequenceArray1[6] = (CharSequence) "SEPMfbF1";
      String string3 = StringUtils.prependIfMissing("SEPMfbF1", "SEPMfbF1", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("SEPMfbF1", string3);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(7, charSequenceArray1.length);
      
      charSequenceArray0[3] = (CharSequence) "SEPMfbF1";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      String string4 = StringUtils.appendIfMissingIgnoreCase("", " ", charSequenceArray0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(boolean0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '2');
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(hashSet0.contains('2'));
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '2';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'2', '2'}, charArray0);
      assertEquals(2, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "", 661);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1646), 0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceEachRepeatedly("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.stripAccents("\"k<3Uv#n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"k<3Uv#n", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "\"k<3Uv#n");
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      
      String string2 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "\"k<3Uv#n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\"k<3Uv#nnnnn", string2);
      
      String string3 = StringUtils.replace("", "", "\"k<3Uv#n");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substringBetween("", "+hv?f @", "");
      assertNull(string4);
      
      int int2 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 661);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.leftPad("\"k<3Uv#n", 3, '^');
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("\"k<3Uv#n", string5);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "+hv?f @", (-1846), (-1646));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "zw.xpl05aC9HV'_s";
      String string1 = StringUtils.substringBetween("zw.xpl05aC9HV'_s", "", "zw.xpl05aC9HV'_s");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = 0;
      int int1 = StringUtils.lastOrdinalIndexOf("", "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "zw.xpl05aC9HV'_s", (CharSequence) "zw.xpl05aC9HV'_s");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'B', 7, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = '7';
      charArray0[2] = '{';
      charArray0[3] = '`';
      charArray0[4] = 'v';
      charArray0[5] = '\\';
      charArray0[6] = '?';
      String string0 = StringUtils.join(charArray0, 'Q');
      assertNotNull(string0);
      assertEquals(" Q7Q{Q`QvQ\\Q?", string0);
      assertArrayEquals(new char[] {' ', '7', '{', '`', 'v', '\\', '?'}, charArray0);
      assertEquals(7, charArray0.length);
      
      String string1 = StringUtils.center(" Q7Q{Q`QvQQ?", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith(" Q7Q{Q`QvQQ?", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern(string1, string1, " Q7Q{Q`QvQQ?");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4093
{Q`Qv
         //                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Minimum abbreviation width with offset is 7");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is 7", string0);
      
      String string1 = StringUtils.difference("QZaH@z\"*t*:3~,Zn", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("Ig,H", "", (-666), (-666));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Ig,H", string2);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replace("", "Minimum abbreviation width with offset is 7", "", (-666));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Minimum abbreviation width with offset is 7";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "5,H?");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 1705;
      CharBuffer charBuffer0 = CharBuffer.allocate(1705);
      assertEquals(1705, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1705, charBuffer0.remaining());
      assertEquals(1705, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1705, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      String string0 = StringUtils.replaceChars("M`!#uipgXXI N", "M`!#uipgXXI N", "M`!#uipgXXI N");
      assertNotNull(string0);
      assertEquals("M`!#uipgXXI N", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charBuffer0, "M`!#uipgXXI N");
      assertEquals(1705, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1705, charBuffer0.remaining());
      assertEquals(1705, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1705, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(boolean0);
      
      char char0 = 'O';
      String string1 = StringUtils.join((Iterable<?>) null, 'O');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "M`!#uipgXXI N", (CharSequence) charBuffer0, 1705);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)69;
      String string0 = StringUtils.join(byteArray0, 'D', (int) (byte)97, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)16, (byte)112, (byte)0, (byte)97, (byte)69}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      String string1 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, locale_CategoryArray0.length);
      
      String string2 = StringUtils.replaceOnce((String) null, "", "");
      assertNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, Integer.MAX_VALUE);
      assertNull(stringArray0);
      
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((Object[]) null, '?');
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull("~Ma9 vn-1R$$G");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("~Ma9 vn-1R$$G", string2);
      
      boolean boolean0 = StringUtils.isAlpha("~Ma9 vn-1R$$G");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("w", (String) null, 862);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.removeEnd("", "~Ma9 vn-1R$$G");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "~Ma9 vn-1R$$G";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "w";
      String string4 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string4);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("~Ma9 vn-1R$$G");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.upperCase("");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.replace("r)s4\"Q%$E", " vs ", "*R!", (-1461));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("r)s4\"Q%$E", string6);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.strip("zVj~~!|");
      assertNotNull(string0);
      assertEquals("zVj~~!|", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "zVj~~!|";
      objectArray0[1] = (Object) "zVj~~!|";
      objectArray0[2] = (Object) "zVj~~!|";
      objectArray0[3] = (Object) "zVj~~!|";
      objectArray0[4] = (Object) "zVj~~!|";
      objectArray0[5] = (Object) "zVj~~!|";
      objectArray0[6] = (Object) "zVj~~!|";
      objectArray0[7] = (Object) "zVj~~!|";
      objectArray0[8] = (Object) "zVj~~!|";
      String string1 = StringUtils.join(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|", string1);
      assertEquals(9, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "zVj~~!|", (-978));
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "zVj~~!|");
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.split("zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|", "zVj~~!|");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = "\\u000";
      String string4 = StringUtils.replaceChars(string3, "Minimum abbreviation width is 4", string3);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("\\000", string4);
      
      String string5 = StringUtils.removePattern("Xm}", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Xm}", string5);
      
      String string6 = StringUtils.substring("Xm}", (-978), (-1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("Xm", string6);
      
      String string7 = StringUtils.stripToNull("\u0000");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("\u0000", string7);
      
      String string8 = StringUtils.prependIfMissingIgnoreCase(string3, "Xm}", stringArray1);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("Xm}\\u000", string8);
      assertEquals(0, stringArray1.length);
      
      String string9 = StringUtils.appendIfMissingIgnoreCase("", "\u0000", (CharSequence[]) null);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("\u0000", string9);
      
      String string10 = StringUtils.chop("\u0000");
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
      assertEquals("", string10);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "IwP";
      int int0 = 1639;
      String string3 = StringUtils.leftPad("IwP", 1639, "Y");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[1] = 'E';
      charArray0[2] = '@';
      charArray0[3] = '`';
      charArray0[4] = 'l';
      charArray0[5] = 'd';
      charArray0[6] = 't';
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string3, charArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("h0d/Ok!(bR~Gv;n[", "h0d/Ok!(bR~Gv;n[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1086.4066);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2780.8);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1944.954688771;
      String string1 = StringUtils.join(doubleArray0, '4');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0.04-1086.406640.04-2780.840.041.041944.954688771", string1);
      assertArrayEquals(new double[] {0.0, (-1086.4066), 0.0, (-2780.8), 0.0, 1.0, 1944.954688771}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "0.04-1086.406640.04-2780.840.041.041944.954688771", 852);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "h0d/Ok!(bR~Gv;n[", "J|I5MT%");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("&<i_m-iT$l<f-pnLrK", 1, 1);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.ordinalIndexOf("h0d/Ok!(bR~Gv;n[", "", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ", Length: ", 1350);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("&pMIARCF#|", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("&pMIARCF#|", string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("&pMIARCF#|");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&pMIARCF#|", string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = 'Z';
      charArray0[2] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals("HZY", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'H', 'Z', 'Y'}, charArray0);
      assertEquals(3, charArray0.length);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals("HZY", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(3, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("HZY", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'H', 'Z', 'Y'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string2 = StringUtils.join(shortArray0, 'Y', 1350, (int) (short)0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, (ClassLoader) null);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, 'p');
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) 'Y';
      String string4 = StringUtils.join(intArray0, 'H', 89, (int) (short)0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new int[] {0, 89}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnce("", "t;4e.", "`^'X0#|");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("`^'X0#|");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "`^'X0#|";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      String string2 = StringUtils.join(objectArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "`^'X0#|";
      charSequenceArray0[5] = (CharSequence) "t;4e.";
      charSequenceArray0[6] = (CharSequence) "t;4e.";
      charSequenceArray0[7] = (CharSequence) "`^'X0#|";
      String string4 = StringUtils.appendIfMissing("`^'X0#|", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("`^'X0#|", string4);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.stripStart("`^'X0#|", "`^'X0#|");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(8, charSequenceArray0.length);
      
      String string7 = StringUtils.substringBeforeLast("`^'X0#|java.lang.Object@35ef01ab", "");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("`^'X0#|java.lang.Object@35ef01ab", charSequenceArray0[7]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String string8 = StringUtils.remove((String) null, 'q');
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2161.3564F;
      floatArray0[1] = 3035.394F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1035.41F;
      String string0 = StringUtils.join(floatArray0, '1', 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {2161.3564F, 3035.394F, 0.0F, 0.0F, 0.0F, 1035.41F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string1 = StringUtils.join(charArray0, '1');
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string2 = StringUtils.stripEnd("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-1346);
      shortArray0[3] = (short)1354;
      shortArray0[4] = (short)4096;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)10;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)3355;
      String string4 = StringUtils.join(shortArray0, 'U', (int) (short)0, 0);
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new short[] {(short) (-1), (short)4, (short) (-1346), (short)1354, (short)4096, (short)0, (short)10, (short)0, (short)3355}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "AMoE;>>lEXY(u", (-2614), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2614
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.removeStart("l:Zt{d#Qtgh", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("l:Zt{d#Qtgh", string0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("l:Zt{d#Qtgh", "l:Zt{d#Qtgh");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("", 2118);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "l:Zt{d#Qtgh";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Strings must not be null";
      stringArray0[5] = "Strings must not be null";
      stringArray0[6] = "l:Zt{d#Qtgh";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      
      String string4 = StringUtils.stripToNull("l:Zt{d#Qtgh");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("l:Zt{d#Qtgh", string4);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.split("Cannot store ", "");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      
      String string5 = StringUtils.join((Iterable<?>) null, '^');
      assertNull(string5);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string6 = StringUtils.upperCase("l:Zt{d#Qtgh", locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("L:ZT{D#QTGH", string6);
      
      String string7 = StringUtils.defaultString("", "\r");
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.trimToEmpty("");
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "l:Zt{d#Qtgh");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllLowerCase("\r");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.stripEnd("w!'DJYWCKl<gbgS>nt.", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("w!'DJYWCKl<gbgS>nt.", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.upperCase("J8jGuS4t}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("J8JGUS4T}", string1);
      
      charSequenceArray0[0] = (CharSequence) "J8JGUS4T}";
      charSequenceArray0[1] = (CharSequence) "Strings must not be null";
      charSequenceArray0[2] = (CharSequence) "w!'DJYWCKl<gbgS>nt.";
      charSequenceArray0[3] = (CharSequence) "w!'DJYWCKl<gbgS>nt.";
      int int0 = StringUtils.lastIndexOfAny("w!'DJYWCKl<gbgS>nt.", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string2 = StringUtils.join(intArray0, 'm', 1471, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[0]);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, charSequenceArray0.length);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "w!'DJYWCKl<gbgS>nt.");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(19, charBuffer0.limit());
      assertEquals(19, charBuffer0.length());
      assertEquals(19, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("w!'DJYWCKl<gbgS>nt.", charBuffer0.toString());
      assertEquals(19, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      Buffer buffer0 = charBuffer0.position(1);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.length());
      assertEquals("!'DJYWCKl<gbgS>nt.", charBuffer0.toString());
      assertEquals(19, charBuffer0.limit());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(19, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertTrue(buffer0.hasRemaining());
      assertEquals(1, buffer0.position());
      assertEquals(19, buffer0.limit());
      assertFalse(buffer0.hasArray());
      assertEquals(18, buffer0.remaining());
      assertEquals(19, buffer0.capacity());
      assertTrue(buffer0.isReadOnly());
      assertNotNull(buffer0);
      
      boolean boolean1 = arrayDeque0.add(charBuffer0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.length());
      assertEquals("!'DJYWCKl<gbgS>nt.", charBuffer0.toString());
      assertEquals(19, charBuffer0.limit());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(19, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains(charBuffer0));
      
      String string3 = StringUtils.join((Iterable<?>) arrayDeque0, '1');
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertTrue(arrayDeque0.contains(charBuffer0));
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '-', 122, 2327);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4834;
      String string0 = StringUtils.join(shortArray0, 'j', 0, (-271));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)4834}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)4834;
      shortArray1[1] = (short)4834;
      shortArray1[2] = (short)4834;
      shortArray1[3] = (short)4834;
      String string1 = StringUtils.join(shortArray1, 'j');
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("4834j4834j4834j4834", string1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)4834, (short)4834, (short)4834, (short)4834}, shortArray1);
      assertEquals(4, shortArray1.length);
      
      String string2 = StringUtils.leftPad("org.apache.commons.lang3.ArrayUtils", 1405, 'b');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.left("3t9d0>=' eLNKW'Co", 0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isNotBlank("4834j4834j4834j4834");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "4834j4834j4834j4834", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.remove("3t9d0>=' eLNKW'Co", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("3t9d0>=' eLNKW'Co", string4);
      
      String string5 = StringUtils.upperCase("");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.reverseDelimited("", 'C');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.join(shortArray1, 'F');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(string7);
      assertEquals("4834F4834F4834F4834", string7);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)4834, (short)4834, (short)4834, (short)4834}, shortArray1);
      assertEquals(4, shortArray1.length);
      
      String string8 = StringUtils.mid("", (short)4834, (short)4834);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.substringAfter("", "");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("", string9);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string10 = StringUtils.mid("", 0, (short)4834);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(string10);
      assertEquals("", string10);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("SphI|F<'Z^{|7c)*", '$');
      assertNotNull(string0);
      assertEquals("SphI|F<'Z^{|7c)*", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "SphI|F<'Z^{|7c)*", (CharSequence) "SphI|F<'Z^{|7c)*");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("i[ q", "i[ q", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("i[ q", string1);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-80);
      String string0 = StringUtils.join(byteArray0, '{');
      assertNotNull(string0);
      assertEquals("49{-80", string0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-80)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "49{-80", (CharSequence) "49{-80");
      assertTrue(boolean0);
      
      String string1 = StringUtils.lowerCase("49{-80");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("49{-80", string1);
      
      String string2 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "49{-80");
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToEmpty("49{-80");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("49{-80", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "49{-80");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string5 = StringUtils.overlay("49{-80", ":G,e", (byte) (-80), 64);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(":G,e", string5);
      
      charSequenceArray0[0] = (CharSequence) ":G,e";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "49{-80";
      charSequenceArray0[3] = (CharSequence) "49{-80";
      charSequenceArray0[4] = (CharSequence) "49{-80";
      String string6 = StringUtils.appendIfMissing("49{-80", "49{-80", charSequenceArray0);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("49{-80", string6);
      assertEquals(5, charSequenceArray0.length);
      
      String string7 = StringUtils.removeEnd("&>:M=P8n", "org.apache.commons.lang3.CharUtils");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("&>:M=P8n", string7);
      
      String string8 = StringUtils.lowerCase("d=]`&5fvyds");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("d=]`&5fvyds", string8);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("d=]`&5fvyds", charSequenceArray0[1]);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      
      String string9 = StringUtils.repeat("", 0);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
      assertEquals("", string9);
      
      String string10 = StringUtils.trimToEmpty("The character ");
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertNotNull(string10);
      assertEquals("The character", string10);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char char0 = '/';
      String string0 = StringUtils.join((Object[]) null, '/', 2089, 2089);
      assertNull(string0);
      
      String string1 = "7gz<l`vEP<";
      String string2 = StringUtils.deleteWhitespace("7gz<l`vEP<");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("7gz<l`vEP<", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "7gz<l`vEP<", 2089);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeEnd("7gz<l`vEP<", "");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("7gz<l`vEP<", string3);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(string3));
      
      // Undeclared exception!
      try { 
        stack0.listIterator(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 480);
      assertNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("\r", (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, "\r", (CharSequence[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.center((String) null, 0);
      assertNull(string3);
      
      String string4 = StringUtils.removeEnd("k/sePP", (String) null);
      assertNotNull(string4);
      assertEquals("k/sePP", string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "k/sePP");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 's';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'&', 's'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String string5 = StringUtils.left("jw", (-1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "?fQ#EcdLHFLx<N%{", "");
      assertNull(stringArray0);
      
      String string6 = StringUtils.strip("|q~b@R");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("|q~b@R", string6);
      
      String string7 = StringUtils.rightPad("#C p6a6kmOM{?)Op", 0, "k/sePP");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("#C p6a6kmOM{?)Op", string7);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "#C p6a6kmOM{?)Op");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 's';
      floatArray0[1] = (float) 's';
      String string8 = StringUtils.join(floatArray0, '\"', 853, 480);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("", string8);
      assertArrayEquals(new float[] {115.0F, 115.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.reverseDelimited("", '9');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripToEmpty("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToEmpty("");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string5 = StringUtils.substringAfter("", "e,$wZnk.\"AD");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', '9'}, charArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      try { 
        StringUtils.toString(byteArray0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "75t&NSw>k5~G0";
      int int0 = (-696);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("75t&NSw>k5~G0", (-696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("YfD");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNotBlank("YfD");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("YfD");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("YfD");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAlpha("YfD");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string0 = StringUtils.defaultIfBlank("", "YfD");
      assertNotNull(string0);
      assertEquals("YfD", string0);
      
      String string1 = StringUtils.remove("YfD", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("YfD", string1);
      
      String string2 = StringUtils.difference("YfD", "!p6uv>0kS 6~j?wry9M");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("!p6uv>0kS 6~j?wry9M", string2);
      
      int int0 = StringUtils.countMatches("YfD", "!p6uv>0kS 6~j?wry9M");
      assertEquals(0, int0);
      
      String string3 = StringUtils.center("YfD", 0, 'j');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("YfD", string3);
      
      String string4 = StringUtils.trim("Threshold must not be negative");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "!p6uv>0kS 6~j?wry9M", 81, 535);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.repeat("", 535);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int2 = StringUtils.lastIndexOfAny("YfD", stringArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.reverse("({Vl&");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("&lV{(", string6);
      
      String string7 = StringUtils.defaultIfBlank((String) null, ", Length: 0");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(", Length: 0", string7);
      
      boolean boolean4 = StringUtils.endsWithIgnoreCase("Threshold must not be negative", ", Length: 0");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is 4", 'j');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      
      String string8 = StringUtils.substringBefore("\n", "");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean5 = StringUtils.isNotBlank("");
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      String string9 = StringUtils.deleteWhitespace("L");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("L", string9);
      
      boolean boolean6 = StringUtils.startsWithAny("L", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.remove("", 'R');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 1391, 'n');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("9Vwv{JXsaj", "", 128);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9Vwv{JXsaj", string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("9Vwv{JXsaj");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '#');
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "9Vwv{JXsaj", (CharSequence) "");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)90;
      String string4 = StringUtils.join(byteArray0, '');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("-7490", string4);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)90}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("9Vwv{JXsaj", "-7490", "9Vwv{JXsaj");
      assertNull(stringArray0);
      
      String string5 = StringUtils.join((Iterable<?>) serviceLoader0, "");
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean4 = StringUtils.endsWith("-7490", "");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.left("", 1954);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Q7b\"Oy");
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 510L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 1954;
      String string1 = StringUtils.join(longArray0, 'T', 1954, 1954);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new long[] {510L, (-1L), 1954L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.removeEndIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      String string2 = "%";
      try { 
        StringUtils.toString(byteArray0, "%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 267);
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("", (String) null, "");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replace("C47+}uBC", (String) null, "bPuF");
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("C47+}uBC", string4);
      
      String string5 = StringUtils.remove((String) null, (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.defaultString((String) null);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int2 = StringUtils.indexOf((CharSequence) "C47+}uBC", (CharSequence) "", 267);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, int2);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "C47+}uBC", (CharSequence[]) null);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("E_G!9hv+", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("E_G!9hv+", string7);
      
      String string8 = StringUtils.chomp(" in an array of ");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals(" in an array of ", string8);
      
      String string9 = StringUtils.trimToEmpty("");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("", string9);
      
      String string10 = StringUtils.stripToEmpty("");
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
      assertEquals("", string10);
      
      int int4 = StringUtils.indexOf((CharSequence) "E_G!9hv+", (CharSequence) "", (-132));
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '#';
      charArray0[2] = 'f';
      String string11 = StringUtils.join(charArray0, '#');
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertNotNull(string11);
      assertEquals("F###f", string11);
      assertArrayEquals(new char[] {'F', '#', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'V');
      assertNotNull(string0);
      assertEquals("0V-78V0V0V0", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0V-78V0V0V0");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[1] = (CharSequence) "0V-78V0V0V0";
      String string1 = StringUtils.chop("L<}tOz");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L<}tO", string1);
      
      charSequenceArray0[2] = (CharSequence) "L<}tO";
      charSequenceArray0[3] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[4] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[5] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[6] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[7] = (CharSequence) "0V-78V0V0V0";
      charSequenceArray0[8] = (CharSequence) "0V-78V0V0V0";
      int int0 = StringUtils.indexOfAny((CharSequence) "0V-78V0V0V0", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[1], charSequenceArray0[1]);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", 'V');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripEnd("0V-78V0V0V0", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0V-78V0V0V0", string2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = (-224);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-224), (-3704));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "Minimum abbreviation width with offset is 7", 4096);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.defaultString("D*X]q0a:");
      assertNotNull(string0);
      assertEquals("D*X]q0a:", string0);
      
      String string1 = StringUtils.chomp("org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      String string2 = StringUtils.abbreviate("Array and element cannot both be null", 0, 1379);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Array and element cannot both be null", string2);
      
      boolean boolean0 = StringUtils.isEmpty("Array and element cannot both be null");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '\"', 1379, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.trim("Minimum abbreviation width with offset is 7");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width with offset is 7", string4);
      
      String string5 = StringUtils.replaceOnce("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "Minimum abbreviation width is 4");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Minimum abbreviation width is 4", string5);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("D*X]q0a:", "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.trimToEmpty("Minimum abbreviation width is 4");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("Minimum abbreviation width is 4", string6);
      
      String string7 = StringUtils.reverse("Minimum abbreviation width with offset is 7");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("7 si tesffo htiw htdiw noitaiverbba muminiM", string7);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2431);
      shortArray0[1] = (short)163;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Y', (int) (short) (-2431), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2431
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\r", "\r");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", "\r");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 2833L;
      longArray0[1] = 0L;
      longArray0[2] = (-2488L);
      longArray0[3] = 1L;
      longArray0[4] = 3731L;
      longArray0[5] = 0L;
      String string1 = StringUtils.join(longArray0, '*');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2833*0*-2488*1*3731*0", string1);
      assertArrayEquals(new long[] {2833L, 0L, (-2488L), 1L, 3731L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean2 = StringUtils.isWhitespace("2833*0*-2488*1*3731*0");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.join((float[]) null, '*', (-370), (-370));
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "2833*0*-2488*1*3731*0", 0, 565);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.difference("\r", "{}");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("{}", string3);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, "2833*0*-2488*1*3731*0", 0);
      assertNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("\r"));
      
      ArrayList arrayList1 = (ArrayList)arrayList0.clone();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains("\r"));
      
      String string5 = StringUtils.join((Iterable<?>) arrayList0, 'T');
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(arrayList0.contains("\r"));
      
      String string6 = StringUtils.replace("", (String) null, "9HV4i@", 0);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.strip((String) null, "\r");
      assertNull(string7);
      
      int int1 = StringUtils.ordinalIndexOf("{}", "", 8192);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string8 = StringUtils.leftPad("{}", (-632), "{}");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("{}", string8);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "7>KQ%CRVlI2^g&n-c");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 407;
      String string0 = StringUtils.overlay("The character ", (String) null, (-1256), 407);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'E';
      charArray0[2] = '*';
      charArray0[3] = 't';
      char char0 = '^';
      charArray0[4] = '^';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 407, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substringBetween("lR0z)Xd0", "q*'ZIh", "q*'ZIh");
      assertNull(string0);
      
      String string1 = StringUtils.replace("", "lR0z)Xd0", "M$bZ2n9lc1koK,", 3238);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter("", "Threshold must not be negative");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.prependIfMissing("lR0z)Xd0", "lR0z)Xd0", (CharSequence[]) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("lR0z)Xd0", string4);
      
      String string5 = StringUtils.stripToEmpty("M$bZ2n9lc1koK,");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("M$bZ2n9lc1koK,", string5);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1278);
      shortArray0[1] = (short)0;
      String string6 = StringUtils.join(shortArray0, '7', (int) (short)0, (-865));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      assertArrayEquals(new short[] {(short) (-1278), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("q*'ZIh");
      assertFalse(boolean0);
      
      String string7 = StringUtils.chop("");
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 206);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("lR0z)Xd0");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", ")eJ/b$9gAI-(");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string8 = StringUtils.abbreviateMiddle("", "M$bZ2n9lc1koK,", (short) (-1278));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean4 = StringUtils.isWhitespace("");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$~gz", ">6!A.");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string9 = StringUtils.leftPad("", 3238, "M$bZ2n9lc1koK,");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      
      boolean boolean5 = StringUtils.isBlank("q*'ZIh");
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.abbreviateMiddle("5", "", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("5", string1);
      
      int int0 = (-1165);
      int int1 = StringUtils.lastIndexOf((CharSequence) "5", (-1165), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Q";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Q", string2);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "5", (CharSequence) "");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.chop("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'N', (-650), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -650
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.rightPad("The character must not be null", 3, "The character must not be null");
      assertNotNull(string0);
      assertEquals("The character must not be null", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("The character must not be null");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (-1), (-1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "The character must not be null";
      charSequenceArray0[1] = (CharSequence) "The character must not be null";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string1 = StringUtils.remove("3|76I^", 'v');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3|76I^", string1);
      
      String string2 = StringUtils.leftPad("\n", 0, "5h?<cgq1PGdcg2");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "The character must not be null";
      charSequenceArray0[7] = (CharSequence) " ";
      charSequenceArray0[8] = (CharSequence) " ";
      String string3 = StringUtils.prependIfMissingIgnoreCase("", "The character must not be null", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("The character must not be null", string3);
      assertEquals(9, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)69;
      String string4 = StringUtils.join(byteArray0, '@');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)31, (byte)69}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      String string5 = StringUtils.strip("^,`JpbAk{!6?3o,l");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("^,`JpbAk{!6?3o,l", string5);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "u$";
      String string1 = "";
      String string2 = StringUtils.replace("u$", "u$", "");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(", '", "<jQn%zSJ>~");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.difference("", "");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviateMiddle(", '", "\r", 1142);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(", '", string5);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-52);
      try { 
        StringUtils.toString(byteArray0, "\r");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)97;
      String string0 = StringUtils.join(byteArray0, '*');
      assertNotNull(string0);
      assertEquals("35*127*0*0*0*0*97", string0);
      assertArrayEquals(new byte[] {(byte)35, (byte)127, (byte)0, (byte)0, (byte)0, (byte)0, (byte)97}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int int0 = StringUtils.length("35*127*0*0*0*0*97");
      assertEquals(17, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("35*127*0*0*0*0*97", "35*127*0*0*0*0*97", (byte)0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("35*127*0*0*0*0*97", "35*127*0*0*0*0*97");
      assertTrue(boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "35*127*0*0*0*0*97", (CharSequence) "35*127*0*0*0*0*97", (int) (byte)0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("35*127*0*0*0*0*97", "35*127*0*0*0*0*97");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.indexOf((CharSequence) "35*127*0*0*0*0*97", 0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string1 = StringUtils.defaultIfBlank("Threshold must not be negative", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.substringBefore((String) null, "35*127*0*0*0*0*97");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "35*127*0*0*0*0*97";
      charSequenceArray0[2] = (CharSequence) "35*127*0*0*0*0*97";
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[4] = (CharSequence) null;
      String string3 = StringUtils.appendIfMissing((String) null, "Threshold must not be negative", charSequenceArray0);
      assertNull(string3);
      assertEquals(5, charSequenceArray0.length);
      
      int int4 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "Threshold must not be negative", (byte)0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "l&x+>@D!zOI^t";
      String[] stringArray0 = StringUtils.split("l&x+>@D!zOI^t", "l&x+>@D!zOI^t");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "l&x+>@D!zOI^t", (CharSequence) "l&x+>@D!zOI^t", 64);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spliterator<Locale.LanguageRange> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      int int1 = 3589;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("l&x+>@D!zOI^t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=l&x+>@d!zoi^t
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "~(1-S+/c{dLW7v%";
      String string1 = StringUtils.removeStart("~(1-S+/c{dLW7v%", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("~(1-S+/c{dLW7v%", string1);
      
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("#r2XslhkT{r{%a+ZcjI", false);
      classLoader0.setPackageAssertionStatus("~(1-S+/c{dLW7v%", true);
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      String string2 = StringUtils.join(iterator0, 'G');
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(classLoader0, classLoader1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "~(1-S+/c{dLW7v%", (CharSequence) "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~(1-S+/c{dLW7v%", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.prependIfMissing((String) null, "~(1-S+/c{dLW7v%", stringArray0);
      assertNull(string3);
      assertEquals(1, stringArray0.length);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      String string4 = StringUtils.join(locale_CategoryArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, locale_CategoryArray0.length);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("dgs_@$V7a", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" in an array of ");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split(" in an array of ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      
      String string0 = StringUtils.join(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string0);
      assertEquals("inanarrayof", string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("inanarrayof", "\"+CvN#fut1>(TNA");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 16
         // \"+CvN#fut1>(TNA
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.right("", (-279));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultString("&B})");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&B})", string1);
      
      String string2 = StringUtils.rightPad("R]FIpkHUa^", (-279), '^');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("R]FIpkHUa^", string2);
      
      String string3 = StringUtils.strip("YCWyn", "]}#!OV\b,F^O");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("YCWyn", string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("YCWyn", "YCWyn", stringArray0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("YCWyn", string4);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "YCWyn";
      stringArray1[1] = "R]FIpkHUa^";
      stringArray1[2] = "";
      stringArray1[3] = "YCWyn";
      stringArray1[4] = "";
      stringArray1[5] = "R]FIpkHUa^";
      stringArray1[6] = "R]FIpkHUa^";
      stringArray1[7] = "YCWyn";
      String string5 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string5);
      assertEquals("", string5);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      
      String string6 = StringUtils.removeEnd("R]FIpkHUa^", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("R]FIpkHUa^", string6);
      
      String[] stringArray2 = StringUtils.split("p&ad:B=7/nPq|I*YMyG", "Minimum abbreviation width is 4");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(4, stringArray2.length);
      
      String string7 = StringUtils.trimToEmpty((String) null);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.defaultIfBlank("R]FIpkHUa^", "R]FIpkHUa^");
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("R]FIpkHUa^", string8);
      
      String string9 = StringUtils.substringBetween("R]FIpkHUa^", "R]FIpkHUa^", (String) null);
      assertNull(string9);
      
      String string10 = StringUtils.join((Object[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      assertEquals("", string10);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(0, stringArray0.length);
      
      String string11 = StringUtils.replaceEach((String) null, stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string11);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat('x', 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.rightPad("", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("Search and Replace array lengths don't match: ", (-133), (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringBetween("|Or4J'", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'c';
      charArray0[2] = '&';
      charArray0[3] = '|';
      charArray0[4] = '#';
      charArray0[5] = 't';
      charArray0[6] = '\\';
      charArray0[7] = 'D';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'%', 'c', '&', '|', '#', 't', '\\', 'D'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.stripAccents("k7");
      assertNotNull(string0);
      assertEquals("k7", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("|,Cm|,BB\b{M-H");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "k7", (-2936), (-1002));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.uncapitalize("k7");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("k7", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "k7", (CharSequence) "|,Cm|,BB\b{M-H");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeEnd("-%0'8&SdBy-69b,p", ", '");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("-%0'8&SdBy-69b,p", string3);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "-%0'8&SdBy-69b,p";
      objectArray0[1] = (Object) "k7";
      objectArray0[2] = (Object) "";
      String string4 = StringUtils.join(objectArray0, (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("-%0'8&SdBy-69b,pk7", string4);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Index: ";
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.repeat("Index: ", (-2787));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains("Index: "));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(iterator0);
      assertFalse(stack0.contains("Index: "));
      
      String string2 = StringUtils.join(iterator0, "");
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(stack0.contains(string2));
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(boolean0);
      
      String string3 = StringUtils.lowerCase("E+~9zT(!M4GYK$\"r", locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("e+~9zt(!m4gyk$\"r", string3);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Index: ", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "E+~9zT(!M4GYK$\"r", 16, 16);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "p{InCombiningDiacriticalMarks}+");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.trim("The String must not be empty");
      assertNotNull(string0);
      assertEquals("The String must not be empty", string0);
      
      String string1 = StringUtils.substringAfter((String) null, "");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "The String must not be empty", (-435));
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) null;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&Yh+PmMP[k0t?t";
      stringArray0[1] = "";
      stringArray0[2] = "The String must not be empty";
      stringArray0[3] = "";
      stringArray0[4] = "The String must not be empty";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "The String must not be empty";
      stringArray0[8] = "The String must not be empty";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(9, stringArray0.length);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.lowerCase("]aRAR");
      assertNotNull(string1);
      assertEquals("]arar", string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, '\\');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      String string3 = StringUtils.abbreviate((String) null, (-2289), (-2289));
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("]arar", charSequenceArray0);
      assertEquals(5, int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3617.656F);
      floatArray0[1] = (-293.3F);
      floatArray0[2] = 1555.02F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-828.1F);
      floatArray0[5] = (-348.0603F);
      String string0 = StringUtils.join(floatArray0, '6', 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new float[] {(-3617.656F), (-293.3F), 1555.02F, (-1.0F), (-828.1F), (-348.0603F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string1 = StringUtils.removePattern("[-<u]Fxe\"}Q-Ia)k<F", "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[-<u]Fxe\"}Q-Ia)k<F", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains(""));
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(linkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("pO{hIf5d", "pO{hIf5d", 0);
      assertNotNull(string0);
      assertEquals("pO{hIf5d", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "pO{hIf5d", (CharSequence) "pO{hIf5d");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("pO{hIf5d", "pO{hIf5d");
      assertTrue(boolean0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("pO{hIf5d"));
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("pO{hIf5d"));
      
      boolean boolean1 = arrayDeque0.offerFirst("pO{hIf5d");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains("pO{hIf5d"));
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("pO{hIf5d"));
      
      boolean boolean2 = arrayDeque0.containsAll(treeSet0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(arrayDeque0.contains("pO{hIf5d"));
      assertFalse(treeSet0.contains("pO{hIf5d"));
      
      boolean boolean3 = arrayDeque0.add("pO{hIf5d");
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertTrue(arrayDeque0.contains(string0));
      
      String string1 = StringUtils.join(iterator0, 'U');
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(arrayDeque0.contains(string0));
      assertFalse(arrayDeque0.contains(string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "pO{hIf5d", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      Stream<String> stream0 = arrayDeque0.stream();
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(stream0);
      assertTrue(arrayDeque0.contains(string0));
      assertFalse(arrayDeque0.contains(string1));
      
      String string2 = StringUtils.overlay("pO{hIf5d", "%", 8, (-3762));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("%", string2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("^i1M#y\no#.Pj", "^i1M#y\no#.Pj", "^i1M#y\no#.Pj");
      assertNotNull(string0);
      assertEquals("^i1M#y\no#.Pj", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("^i1M#y\no#.Pj", "^i1M#y\no#.Pj");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "^i1M#y\no#.Pj");
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 4, 0);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 0);
      assertNull(stringArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "^i1M#y\no#.Pj";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string4 = StringUtils.join(objectArray0, "~^V/Om6;)");
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("^i1M#y\no#.Pj~^V/Om6;)~^V/Om6;)~^V/Om6;)~^V/Om6;)~^V/Om6;)~^V/Om6;)", string4);
      assertEquals(7, objectArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("^i1M#y\no#.Pj", (String) null);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      boolean boolean1 = StringUtils.isBlank("^i1M#y\no#.Pj");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripAccents((String) null);
      assertNull(string5);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '_';
      charArray0[2] = '\'';
      charArray0[3] = 'k';
      charArray0[4] = ')';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'?', '_', '\'', 'k', ')'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.difference("-O", "-O");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "-O");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "-O", "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "-O");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.lowerCase("'0j9x8kVqV");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'0j9x8kvqv", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "'0j9x8kVqV", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("-O", locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-o", string2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.removeEnd("<K", "<K");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.stripEnd("<K", "<K");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = (-1049);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.replace("%w;l", "", "");
      assertNotNull(string0);
      assertEquals("%w;l", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "%w;l";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "%w;l";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%w;l%w;l", string1);
      assertEquals(5, objectArray0.length);
      
      String string2 = StringUtils.reverseDelimited("%w;l", 'y');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("%w;l", string2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'y';
      floatArray0[1] = (float) 'y';
      floatArray0[2] = (float) 'y';
      floatArray0[3] = (float) 'y';
      floatArray0[4] = (float) 'y';
      floatArray0[5] = (float) 'y';
      floatArray0[6] = (float) 'y';
      floatArray0[7] = (float) 'y';
      String string3 = StringUtils.join(floatArray0, 'l');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("121.0l121.0l121.0l121.0l121.0l121.0l121.0l121.0", string3);
      assertArrayEquals(new float[] {121.0F, 121.0F, 121.0F, 121.0F, 121.0F, 121.0F, 121.0F, 121.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      String string4 = StringUtils.substringAfter("%w;l%w;l", "");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("%w;l%w;l", string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "121.0l121.0l121.0l121.0l121.0l121.0l121.0l121.0", (CharSequence) "%w;l%w;l", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Iterator<String> iterator0 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "`*r<:s{9?6!A");
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "`*r<:s{9?6!A", "`*r<:s{9?6!A");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("`*r<:s{9?6!A", "", 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.mid("", 1, (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string2 = StringUtils.replaceEach(" in an array of ", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" in an array of ", string2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(">\"C52L\".^&i?JS.]Y_", ">\"C52L\".^&i?JS.]Y_");
      assertNotNull(stringArray0);
      assertEquals(19, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ">\"C52L\".^&i?JS.]Y_", ">\"C52L\".^&i?JS.]Y_");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase(">\"C52L\".^&i?JS.]Y_", ">\"C52L\".^&i?JS.]Y_");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 571.2558F;
      floatArray0[1] = 3791.1F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1011.8F);
      floatArray0[5] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'n');
      assertNotNull(string0);
      assertEquals("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0", string0);
      assertArrayEquals(new float[] {571.2558F, 3791.1F, (-1.0F), (-1.0F), (-1011.8F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0", '-');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray2.length);
      
      String string1 = StringUtils.mid("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0", 517, 604);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1795);
      String string2 = StringUtils.join(shortArray0, '-');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-1795", string2);
      assertArrayEquals(new short[] {(short) (-1795)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      String string3 = StringUtils.substring("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0", 3, 64);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(".2558n3791.1n-1.0n-1.0n-1011.8n0.0", string3);
      
      String string4 = StringUtils.join(floatArray0, '-', 517, (int) (short) (-1795));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertArrayEquals(new float[] {571.2558F, 3791.1F, (-1.0F), (-1.0F), (-1011.8F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny(".2558n3791.1n-1.0n-1.0n-1011.8n0.0", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1225);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1225, charBuffer0.remaining());
      assertEquals(1225, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1225, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1225, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) charBuffer0, (CharSequence) "");
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1225, charBuffer0.remaining());
      assertEquals(1225, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1225, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1225, charBuffer0.length());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (-218));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'T';
      charArray0[2] = 'c';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'C', 'T', 'c'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      String string0 = StringUtils.join(charArray0, '\u0000', (-1143), (-1143));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '\u0000';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) "";
      String string2 = StringUtils.join(objectArray0, "", 0, (-1143));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(4, objectArray0.length);
      
      String string3 = StringUtils.leftPad("LEf2/", 479, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          LEf2/", string3);
      
      String string4 = StringUtils.center("L$Q=C70&<c5T':*Hz", 0, "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("L$Q=C70&<c5T':*Hz", string4);
      
      boolean boolean0 = StringUtils.isAlphanumeric("L$Q=C70&<c5T':*Hz");
      assertFalse(boolean0);
      
      String string5 = StringUtils.rightPad("", (-1143), 'O');
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.center("", (-804), "");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-804);
      intArray0[1] = (-804);
      intArray0[2] = 1776;
      String string7 = StringUtils.join(intArray0, '\u0000');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("-804\u0000-804\u00001776", string7);
      assertArrayEquals(new int[] {(-804), (-804), 1776}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = "\\u0";
      String string2 = StringUtils.replaceOnce(string1, string1, "\n");
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.difference(", Length: ", "\n");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\n", string3);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2431);
      intArray0[4] = 0;
      intArray0[5] = 185;
      intArray0[6] = Integer.MAX_VALUE;
      String string4 = StringUtils.join(intArray0, '+');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("0+0+0+-2431+0+185+2147483647", string4);
      assertArrayEquals(new int[] {0, 0, 0, (-2431), 0, 185, Integer.MAX_VALUE}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.reverse("`6}zNF4(8cF`%%{JI");
      assertNotNull(string0);
      assertEquals("IJ{%%`Fc8(4FNz}6`", string0);
      
      String string1 = StringUtils.join((char[]) null, 'u', 0, 0);
      assertNull(string1);
      
      String string2 = StringUtils.join((char[]) null, 'u', 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.substringBefore((String) null, "`6}zNF4(8cF`%%{JI");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substring("", 48, 48);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty(", Length: 0");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", Length: 0", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ", Length: 0", (CharSequence) "", 48);
      assertEquals(11, int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 714;
      longArray0[1] = (long) 11;
      longArray0[2] = (long) (-27);
      longArray0[3] = (long) (-27);
      String string2 = StringUtils.join(longArray0, '9', 941, 941);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new long[] {714L, 11L, (-27L), (-27L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      String[] stringArray0 = StringUtils.split("W", "Index: ", 11);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.deleteWhitespace(", Length: 0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(",Length:0", string3);
      
      boolean boolean1 = StringUtils.startsWithAny(", Length: 0", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.stripEnd("", "ce?HhV6A/");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.stripToNull(", Length: 0");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(", Length: 0", string5);
      
      String string6 = "\\u0";
      String string7 = StringUtils.substring(string6, 0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("\\u0", string7);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) string7, (CharSequence) "");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "Array and element cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = "...";
      String string2 = StringUtils.remove("...", 'w');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      int int0 = StringUtils.countMatches("...", "...");
      assertEquals(1, int0);
      
      String string3 = StringUtils.defaultString("Array and element cannot both be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Array and element cannot both be null", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("~wD9+\"+;j", 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.repeat("q%r?qa}(bY+X,C", (-801));
      assertNotNull(string0);
      assertEquals("", string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short) (-204);
      shortArray0[2] = (short) (-2864);
      shortArray0[3] = (short)1411;
      shortArray0[4] = (short)256;
      shortArray0[5] = (short) (-782);
      shortArray0[6] = (short)0;
      String string1 = StringUtils.join(shortArray0, '\\');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("8192\\-204\\-2864\\1411\\256\\-782\\0", string1);
      assertArrayEquals(new short[] {(short)8192, (short) (-204), (short) (-2864), (short)1411, (short)256, (short) (-782), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int int0 = StringUtils.length("8192-204-2864a1\u00AE-782\u0000");
      assertEquals(21, int0);
      
      int int1 = StringUtils.length("q%r?qa}(bY+X,C");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String string2 = StringUtils.remove("q%r?qa}(bY+X,C", '4');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("q%r?qa}(bY+X,C", string2);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category1;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertSame(locale_Category0, locale_Category1);
      assertEquals(6, locale_CategoryArray0.length);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertSame(locale_Category0, locale_Category1);
      assertEquals(6, locale_CategoryArray0.length);
      
      String string3 = StringUtils.join(iterator0, "q%r?qa}(bY+X,C");
      assertEquals(1, enumSet0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category1));
      assertSame(locale_Category0, locale_Category1);
      assertEquals(6, locale_CategoryArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-252.543F);
      floatArray0[2] = 4430.369F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 771.9F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-344.2251F);
      floatArray0[8] = (-128.979F);
      char char0 = 'W';
      String string0 = StringUtils.join(floatArray0, 'W');
      assertNotNull(string0);
      assertEquals("1.0W-252.543W4430.369W0.0W771.9W0.0W0.0W-344.2251W-128.979", string0);
      assertArrayEquals(new float[] {1.0F, (-252.543F), 4430.369F, 0.0F, 771.9F, 0.0F, 0.0F, (-344.2251F), (-128.979F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "1.0W-252.543W4430.369W0.0W771.9W0.0W0.0W-344.2251W-128.979", (CharSequence) "1.0W-252.543W4430.369W0.0W771.9W0.0W0.0W-344.2251W-128.979");
      assertEquals(0, int0);
      
      char char1 = 'N';
      String string1 = StringUtils.rightPad("1.0W-252.543W4430.369W0.0W771.9W0.0W0.0W-344.2251W-128.979", 0, 'N');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1.0W-252.543W4430.369W0.0W771.9W0.0W0.0W-344.2251W-128.979", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-1729), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.center("", (-1387));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("", 4);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.add(object0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      assertFalse(hashSet0.contains(""));
      assertTrue(hashSet0.contains(object0));
      
      String string2 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(hashSet0.contains(""));
      assertTrue(hashSet0.contains(object0));
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, 't', (-1), (-1387));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String string4 = StringUtils.join((float[]) null, 't');
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.stripStart("y h<sJ6}CP", "5;^*V=tF/QQxaz(<.");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("y h<sJ6}CP", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "y h<sJ6}CP";
      charSequenceArray0[1] = (CharSequence) "5;^*V=tF/QQxaz(<.";
      charSequenceArray0[2] = (CharSequence) "5;^*V=tF/QQxaz(<.";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "y h<sJ6}CP";
      charSequenceArray0[6] = (CharSequence) "";
      String string6 = StringUtils.appendIfMissing("", (CharSequence) null, charSequenceArray0);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[6], charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      int int3 = StringUtils.lastIndexOf(charSequenceArray0[0], (-1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNotBlank("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(""));
      
      String string7 = StringUtils.join(iterator0, "(?: s|[s&&[^ ]])s*");
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(arrayDeque0.contains(""));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.center("3r|Ld<o", 90, "-^@eL[xD");
      assertNotNull(string0);
      assertEquals("-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-3r|Ld<o-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^", string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 90;
      longArray0[1] = (long) 90;
      longArray0[2] = (long) 90;
      longArray0[3] = (long) 90;
      longArray0[4] = (long) 90;
      longArray0[5] = (long) 90;
      longArray0[6] = (long) 90;
      longArray0[7] = (-1L);
      String string1 = StringUtils.join(longArray0, 'S');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("90S90S90S90S90S90S90S-1", string1);
      assertArrayEquals(new long[] {90L, 90L, 90L, 90L, 90L, 90L, 90L, (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      String string2 = StringUtils.defaultString("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("", 90, 'S');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", string3);
      
      String string4 = StringUtils.rightPad("", 90, "-^@eL[xD");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^", string4);
      
      String string5 = StringUtils.abbreviate("-^@eL[xD", 90);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("-^@eL[xD", string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf("-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-3r|Ld<o-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^", "90S90S90S90S90S90S90S-1", 90);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWith("90S90S90S90S90S90S90S-1", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.normalizeSpace("");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      String string7 = StringUtils.join(byteArray0, ']', 90, (int) (byte)1);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      assertArrayEquals(new byte[] {(byte)66, (byte)35, (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@]X?*zS+'", '{');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@]X?*zS+'", (CharSequence) "@]X?*zS+'", 10);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("@]X?*zS+'", "", 4096);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@]X?*zS+'", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      charArray0[7] = '{';
      charArray0[8] = '{';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "@]X?*zS+'", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'{', '{', '{', '{', '{', '{', '{', '{', '{'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("0`bSO", 'B');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0`bSO");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEnd("0`bSO", "0`bSO");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "0`bSO", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0`bSO", string2);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.upperCase("");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = 723L;
      longArray0[7] = (long) 0;
      String string5 = StringUtils.join(longArray0, 'Q', 0, (-850));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertArrayEquals(new long[] {0L, 0L, 66L, 0L, 0L, 0L, 723L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.stripToNull("");
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      String string7 = StringUtils.join(doubleArray0, 'Q', 75, 0);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substring("", 993, 256);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'c');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.strip("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'c');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("cccccccc", string2);
      assertEquals(9, objectArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "cccccccc", 1986);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(256));
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(256));
      
      String string3 = StringUtils.join(iterator0, "");
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(arrayDeque0.contains(256));
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split("", 'c');
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.normalizeSpace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("Threshold must not be negative", 256);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Threshold must not be negative", string2);
      
      String string3 = "\\u00";
      String string4 = StringUtils.strip(string3, "Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("\\u00", string4);
      
      String string5 = StringUtils.removeEnd("", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.center("Threshold must not be negative", 1689, string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.center("", 256, 'K');
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string7);
      
      String string8 = StringUtils.reverse("Strings must not be null");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("llun eb ton tsum sgnirtS", string8);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "l `=al#9usA>N=`+");
      assertNull(stringArray0);
      
      String string9 = StringUtils.substringBetween("", "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK");
      assertNull(string9);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string4, (CharSequence) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat('-', (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("Arguments cannot both be null");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBetween("Arguments cannot both be null", (String) null, "Strings must not be null");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Arguments cannot both be null", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.stripEnd(",]`*Dhn}>}E,]`*Dhn}>}E", ",]`*Dhn}>}E,]`*Dhn}>}E");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("Ks'S(7&9J ", 'j');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("D~J", "j|");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ",]`*Dhn}>}E,]`*Dhn}>}E", (CharSequence) "j|");
      assertFalse(int1 == int0);
      assertEquals(22, int1);
      
      String string3 = StringUtils.substringBetween("j|", "Search and Replace array lengths don't match: ");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.substringBetween("D~J", "", (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.replaceChars("@-(PUb_U+F9m", "@-(PUb_U+F9m", "@-(PUb_U+F9m");
      assertNotNull(string0);
      assertEquals("@-(PUb_U+F9m", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      char char0 = '}';
      int int0 = 0;
      String string1 = StringUtils.join(byteArray0, '}', (int) (byte)0, 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("@-(PUb_U+F9m", "", "");
      assertNull(stringArray0);
      
      String string2 = "\\u0";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("@-(PUb_U+F9m", string2);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal Unicode escape sequence near index 3
         // \\u0
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.substring("", 2, 48);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = '#';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'j', '#'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.leftPad("(O-S!4T8|]igu", 867);
      assertNotNull(string0);
      assertEquals|]igu", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence|]igu", (CharSequence) "(O-S!4T8|]igu");
      assertEquals(854, int0);
      
      String[] stringArray0 = StringUtils.split|]igu");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeEndIgnoreCase("The Array must not be null", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "(O-S!4T8|]igu", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.join((Iterator<?>) null, 'U');
      assertNull(string2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "The Array must not be null", (CharSequence) "The Array must not be null");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string3 = StringUtils.defaultString("(O-S!4T8|]igu", "&xj");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("(O-S!4T8|]igu", string3);
      
      String string4 = StringUtils.substringBeforeLast("", "W)c8YBz&&W6e\"K");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.removePattern("The Array must not be null", "93c\"m/OA!i4}4kTv");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("The Array must not be null", string5);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      int int3 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.StringUtils", charArray0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(31, int3);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, ')');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      String string1 = StringUtils.join(byteArray0, '');
      assertNotNull(string1);
      assertEquals("14900", string1);
      assertArrayEquals(new byte[] {(byte)14, (byte)90, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\u000EZ\u0000", string2);
      assertArrayEquals(new byte[] {(byte)14, (byte)90, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.join(byteArray0, '', 84, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new byte[] {(byte)14, (byte)90, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string4 = StringUtils.substringBeforeLast("', has a length less than 2", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("', has a length less than 2", string4);
      
      String string5 = StringUtils.rightPad("", 2516);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, "lw5:nu{;e[YaM9+");
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "", (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.reverseDelimited(" ", 'a');
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.join((int[]) null, '~');
      assertNull(string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(" ", (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-1);
      String string3 = StringUtils.join(byteArray0, 'u', (int) (byte)107, (int) (byte) (-1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)7, (byte) (-20), (byte)107, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.stripEnd("ZmT}b{%`JGL", "");
      assertNotNull(string0);
      assertEquals("ZmT}b{%`JGL", string0);
      
      String string1 = StringUtils.chomp("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("ZmT}b{%`JGL");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "ZmT}b{%`JGL";
      charSequenceArray0[3] = (CharSequence) "ZmT}b{%`JGL";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissing("ZmT}b{%`JGL", "ZmT}b{%`JGL", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ZmT}b{%`JGL", string2);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.removeEnd("/2d[25qahD@=", "/2d[25qahD@=");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string4 = locale0.getScript();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.upperCase("", locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.trim("");
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string7 = StringUtils.trim("");
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.replaceChars("H=\"I,t4vU", "\r", ")%KRP.");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("H=\"I,t4vU", string8);
      
      String string9 = StringUtils.remove("", "Minimum abbreviation width with offset is 7");
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("", string9);
      
      String string10 = StringUtils.substringBeforeLast("", "H=\"I,t4vU");
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string3));
      assertNotNull(string10);
      assertEquals("", string10);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")%KRP.";
      stringArray0[1] = "";
      stringArray0[2] = "\r";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "\n");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("sQ\"j", "");
      assertNotNull(string0);
      assertEquals("sQ\"j", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "sQ\"j", (CharSequence) "sQ\"j");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sQ\"j";
      stringArray0[1] = "sQ\"j";
      stringArray0[2] = "sQ\"j";
      stringArray0[3] = "Jhva8-SQ'yM";
      stringArray0[4] = "sQ\"j";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.center("", 32, '/');
      assertNotNull(string0);
      assertEquals("////////////////////////////////", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "////////////////////////////////", (-1546));
      assertEquals((-1), int0);
      
      String string1 = " diz";
      String string2 = StringUtils.stripToEmpty(" diz");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("diz", string2);
      
      String string3 = StringUtils.chomp("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("diz");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      charArray0[7] = '/';
      charArray0[8] = '/';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '/', (-1), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.mid("", 3205, 16);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 1841);
      assertEquals(0, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int1 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) "\r", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.deleteWhitespace("E7U `yoq");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("E7U`yoq", string1);
      
      String string2 = StringUtils.center("", (-1), '9');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd("", "Kkd8xg{V..;rE!_");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.removeEndIgnoreCase("", (String) null);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.rightPad("d0Ret/M2*/ydSx9?}'", (-2622));
      assertNotNull(string0);
      assertEquals("d0Ret/M2*/ydSx9?}'", string0);
      
      String[] stringArray0 = StringUtils.split("ED4J:_O_H");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ED4J:_O_H", (CharSequence) "ED4J:_O_H");
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("d0Ret/M2*/ydSx9?}'");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'}?9xSdy/*2M/teR0d", string1);
      
      String string2 = StringUtils.strip("7%y\"**>X^$:y4$C", "ED4J:_O_H");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("7%y\"**>X^$:y4$C", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7%y\"**>X^$:y4$C", (CharSequence) "7%y\"**>X^$:y4$C", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.repeat('p', 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.capitalize("");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "ED4J:_O_H", (CharSequence) "");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replacePattern("d0Ret/M2*/ydSx9?}'", "J", "'}?9xSdy/*2M/teR0d");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("d0Ret/M2*/ydSx9?}'", string5);
      
      String string6 = StringUtils.repeat('b', 0);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("d0Ret/M2*/ydSx9?}'", "");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("d0Ret/M2*/ydSx9?}'", string7);
      
      String string8 = StringUtils.rightPad("-}", 1402);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      
      String string9 = StringUtils.reverse("1&@;gkr");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      assertEquals("rkg;@&1", string9);
      
      boolean boolean2 = StringUtils.isNumericSpace(string8);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(boolean2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "rkg;@&1", (CharSequence) "1&@;gkr");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string10 = StringUtils.rightPad("^#[dgHNdC1", 0);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertNotNull(string10);
      assertEquals("^#[dgHNdC1", string10);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      char char0 = 'b';
      int int1 = (-602);
      int int2 = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'b', (-602), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -602
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.center("SAW", (-2326), "SAW");
      assertNotNull(string0);
      assertEquals("SAW", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("SAW");
      assertTrue(boolean0);
      
      String string1 = null;
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.center("...", 256, "SAW");
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("SAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAW...SAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWSAWS", string3);
      
      String string4 = StringUtils.abbreviate("...", 256);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("...", string4);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(locale0));
      
      // Undeclared exception!
      try { 
        Locale.lookup((List<Locale.LanguageRange>) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.difference("%/hqC>J!>DO^]~t", "%/hqC>J!>DO^]~t");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("%/hqC>J!>DO^]~t", 122, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                     %/hqC>J!>DO^]~t                                                     ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "%/hqC>J!>DO^]~t";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "                                                     %/hqC>J!>DO^]~t                                                     ";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "%/hqC>J!>DO^]~t";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[1], charSequenceArray0[5]);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("%/hqC>J!>DO^]~t", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      
      charSequenceArray0[6] = (CharSequence) "%/hqC>J!>DO^]~t";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "                                                     %/hqC>J!>DO^]~t                                                     ";
      boolean boolean0 = StringUtils.endsWithAny("%/hqC>J!>DO^]~t", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.substringBetween(")Z6Hc[k9v?#CnyI$nd^", ")Z6Hc[k9v?#CnyI$nd^");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.stripStart("62)*3", "R+P");
      assertNotNull(string0);
      assertEquals("62)*3", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "R+P", (-383));
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnce("62)*3", "", "62)*3");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("62)*3", string1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", (-410));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "", (-1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-198));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("", (-198));
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '\'';
      charArray0[2] = '6';
      charArray0[3] = ',';
      charArray0[4] = '^';
      charArray0[5] = '?';
      String string1 = StringUtils.join(charArray0, '3', (-198), (-565));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'R', '\'', '6', ',', '^', '?'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string2 = StringUtils.uncapitalize("#,IAu-|& {");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#,IAu-|& {", string2);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Locale locale0 = Locale.lookup(vector0, list0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(locale0);
      
      String string3 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = "";
      String string3 = "The String must not be empty";
      String[] stringArray0 = StringUtils.split("", "The String must not be empty", (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '9';
      charArray0[2] = '>';
      charArray0[3] = ']';
      charArray0[4] = 'G';
      charArray0[5] = 'n';
      charArray0[6] = '/';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "The String must not be empty", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'', '9', '>', ']', 'G', 'n', '/'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '9';
      intArray0[1] = (int) '9';
      int int1 = (-502);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ':', (-502), 2746);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -502
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                    ", string0);
      
      String string1 = StringUtils.substring((String) null, 2969, (-900));
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 2969;
      floatArray0[3] = (float) (-900);
      floatArray0[4] = (float) 470;
      floatArray0[5] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, '5', 90, (-1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new float[] {13.0F, 13.0F, 2969.0F, (-900.0F), 470.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = StringUtils.startsWith("", "ZC6Axe1?SmzqL8x");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = "\\u";
      String string4 = StringUtils.center("=})5n8", 2155, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("'cDVw:b", "'cDVw:b", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("'cDVw:b", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("'cDVw:b");
      assertTrue(boolean0);
      
      int int0 = StringUtils.length("'cDVw:b");
      assertEquals(7, int0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("'cDVw:b", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'CDVW:B", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'CDVW:B", '7');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.normalizeSpace("'cDVw:b");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("'cDVw:b", string2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = (-1);
      intArray0[2] = 7;
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      String string3 = StringUtils.join(intArray0, '$', 0, 4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("7$-1$7$55", string3);
      assertArrayEquals(new int[] {7, (-1), 7, 55, 55}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'E', (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'l', (-1), 816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 4, 0);
      assertNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 0);
      assertNull(stringArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '_';
      charArray0[2] = '\'';
      charArray0[3] = 'k';
      charArray0[4] = ')';
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char char0 = '}';
      int int0 = 1150;
      String string0 = StringUtils.repeat('}', 1150);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) string0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) string0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '}', 0, 1150);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)122;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1182);
      shortArray0[4] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'o', 13, (int) (short) (-1182));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)0, (short)122, (short) (-1), (short) (-1182), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.rightPad("", 2977);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", 'o');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      SortedSet<String> sortedSet0 = treeSet0.headSet("D1CDQwpG");
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertNotNull(sortedSet0);
      assertFalse(treeSet0.contains(""));
      assertFalse(sortedSet0.contains(""));
      
      String string3 = StringUtils.join((Iterable<?>) sortedSet0, '\'');
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(treeSet0.contains(""));
      assertFalse(sortedSet0.contains(""));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1657.863F;
      floatArray0[1] = (-1157.2072F);
      floatArray0[2] = 2779.68F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-5115.4F);
      floatArray0[5] = (-2349.8F);
      floatArray0[6] = 0.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 's', 0, 3948);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)122;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1182);
      shortArray0[4] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'o', 13, (int) (short) (-1182));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)0, (short)122, (short) (-1), (short) (-1182), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.remove("", 'o');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      SortedSet<String> sortedSet0 = treeSet0.headSet("D1CDQwpG");
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertNotNull(sortedSet0);
      assertFalse(treeSet0.contains(""));
      assertFalse(sortedSet0.contains(""));
      
      String string2 = StringUtils.join((Iterable<?>) sortedSet0, '\'');
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(treeSet0.contains(string2));
      assertFalse(sortedSet0.contains(string2));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.stripToNull("B %F0Jc");
      assertNotNull(string0);
      assertEquals("B %F0Jc", string0);
      
      String string1 = StringUtils.reverseDelimited("H", '~');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("H", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "H", (-3043));
      assertEquals((-1), int0);
      
      String string2 = "\\u00";
      String string3 = StringUtils.defaultString("H", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("H", string3);
      
      String string4 = StringUtils.right("", (-3043));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('~'));
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains('~'));
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(linkedList0.contains('~'));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "H");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.leftPad("iNP4pG~T57L#~U", 64);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("                                                  iNP4pG~T57L#~U", string6);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.replaceChars("C*Z $F1|)6 !%2", "Array and element cannot both be null", "C*Z $F1|)6 !%2");
      assertNotNull(string0);
      assertEquals("C*ZF$F1|)6F!%2", string0);
      
      String string1 = StringUtils.stripToNull("Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array and element cannot both be null", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "C*Z $F1|)6 !%2");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.lowerCase("a.:OK>J{0#uZk*=j");
      assertNotNull(string0);
      assertEquals("a.:ok>j{0#uzk*=j", string0);
      
      String string1 = StringUtils.deleteWhitespace("a.:ok>j{0#uzk*=j");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("a.:ok>j{0#uzk*=j", string1);
      
      String string2 = StringUtils.substring("a.:ok>j{0#uzk*=j", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("a.:ok>j{0#uzk*=j", string2);
      
      String string3 = StringUtils.center((String) null, 10, "Mg");
      assertNull(string3);
      
      String string4 = StringUtils.trimToEmpty("a.:ok>j{0#uzk*=j");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("a.:ok>j{0#uzk*=j", string4);
      
      String string5 = StringUtils.capitalize("\"t}J#Z$y*v_");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("\"t}J#Z$y*v_", string5);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "a.:ok>j{0#uzk*=j";
      String string6 = StringUtils.join(objectArray0, "\"t}J#Z$y*v_");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3045);
      shortArray0[1] = (short) (-1954);
      String string7 = StringUtils.join(shortArray0, 'g');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("-3045g-1954", string7);
      assertArrayEquals(new short[] {(short) (-3045), (short) (-1954)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-3045);
      doubleArray0[1] = (double) (short) (-3045);
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) (short) (-3045);
      doubleArray0[4] = (double) (short) (-1954);
      doubleArray0[5] = (double) (short) (-1954);
      String string8 = StringUtils.join(doubleArray0, 'E');
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("-3045.0E-3045.0E10.0E-3045.0E-1954.0E-1954.0", string8);
      assertArrayEquals(new double[] {(-3045.0), (-3045.0), 10.0, (-3045.0), (-1954.0), (-1954.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.repeat('E', 2256);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp("/9!yB");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("/9!yB", string2);
      
      String string3 = StringUtils.leftPad("/9!yB", 0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("/9!yB", string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("/9!yB");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("/9!yB", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.rightPad((String) null, 5, 'A');
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "/9!yB");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.countMatches("/9!yB", "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string5 = StringUtils.repeat((String) null, "", 0);
      assertNull(string5);
      
      String string6 = StringUtils.removeEnd("c-L", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("c-L", string6);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'E';
      charArray0[2] = 'A';
      charArray0[3] = 'E';
      charArray0[4] = 'A';
      charArray0[5] = 'H';
      charArray0[6] = 'A';
      charArray0[8] = 'A';
      String string7 = StringUtils.join(charArray0, '}');
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("A}E}A}E}A}H}A}\u0000}A", string7);
      assertArrayEquals(new char[] {'A', 'E', 'A', 'E', 'A', 'H', 'A', '\u0000', 'A'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'z';
      charArray0[2] = 'O';
      charArray0[3] = '{';
      charArray0[4] = '.';
      charArray0[5] = 'O';
      String string0 = StringUtils.join(charArray0, 'z');
      assertNotNull(string0);
      assertEquals("HzzzOz{z.zO", string0);
      assertArrayEquals(new char[] {'H', 'z', 'O', '{', '.', 'O'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '\\');
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 0, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern(", Length: ", "p{InCombiningDiacriticalMarks}+", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "org.apache.commons.lang3.ArrayUtils", 13);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsWhitespace("org.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.leftPad("", 13, 'g');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ggggggggggggg", string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ggggggggggggg", (CharSequence) "ggggggggggggg", 13);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.leftPad("", (-2043), "V");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.difference("", "");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ggggggggggggg", 0, 10);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.capacity());
      assertEquals("gggggggggg", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.capacity());
      assertEquals("gggggggggg", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals("gggggggggg", charBuffer1.toString());
      assertEquals(13, charBuffer1.capacity());
      assertEquals(10, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(10, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(10, charBuffer1.length());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, charBuffer0.capacity());
      assertEquals("gggggggggg", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals("gggggggggg", charBuffer2.toString());
      assertEquals(10, charBuffer2.remaining());
      assertTrue(charBuffer2.isReadOnly());
      assertEquals(10, charBuffer2.length());
      assertEquals(13, charBuffer2.capacity());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.hasArray());
      assertEquals(10, charBuffer2.limit());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotNull(charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "V", ", '");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 85.2372;
      doubleArray0[1] = 46.768897442253;
      doubleArray0[2] = 3729.832009;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1958.72);
      String string0 = StringUtils.join(doubleArray0, '#', 0, 5);
      assertNotNull(string0);
      assertEquals("85.2372#46.768897442253#3729.832009#0.0#-1958.72", string0);
      assertArrayEquals(new double[] {85.2372, 46.768897442253, 3729.832009, 0.0, (-1958.72)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "85.2372#46.768897442253#3729.832009#0.0#-1958.72", 1412);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("z3bLtBN", "85.2372#46.768897442253#3729.832009#0.0#-1958.72", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripEnd("85.2372#46.768897442253#3729.832009#0.0#-1958.72", "z3bLtBN");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("85.2372#46.768897442253#3729.832009#0.0#-1958.72", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "85.2372#46.768897442253#3729.832009#0.0#-1958.72", (CharSequence) "85.2372#46.768897442253#3729.832009#0.0#-1958.72");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = (-4570L);
      longArray0[3] = 976L;
      longArray0[4] = 1L;
      longArray0[5] = 840L;
      longArray0[6] = 4335L;
      longArray0[7] = (-1542L);
      longArray0[8] = 0L;
      String string0 = StringUtils.join(longArray0, 'j');
      assertNotNull(string0);
      assertEquals("0j1j-4570j976j1j840j4335j-1542j0", string0);
      assertArrayEquals(new long[] {0L, 1L, (-4570L), 976L, 1L, 840L, 4335L, (-1542L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "0j1j-4570j976j1j840j4335j-1542j0", (-1593));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.remove("0j1j-4570j976j1j840j4335j-1542j0", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0j1j-4570j976j1j840j4335j-1542j0", string1);
      
      String string2 = StringUtils.removePattern("0j1j-4570j976j1j840j4335j-1542j0", "0j1j-4570j976j1j840j4335j-1542j0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("", "", "Qzd3(z");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.substring("*SE8h@D", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*SE8h@D", (CharSequence) "*SE8h@D");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "*SE8h@D";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.lang3.StringUtils";
      stringArray0[6] = "*SE8h@D";
      stringArray0[7] = "*SE8h@D";
      String string2 = StringUtils.replaceEach("*SE8h@D", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("*SE8h@D", string2);
      assertEquals(8, stringArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 2476L;
      String string3 = StringUtils.join(longArray0, '5');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("05050505052476", string3);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 2476L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("00]y-}8@", "00]y-}8@");
      assertNotNull(string0);
      assertEquals("00]y-}8@", string0);
      
      String string1 = StringUtils.rightPad("Cannot store ", 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Cannot store    ", string1);
      
      String[] stringArray0 = StringUtils.split("00]y-}8@", 'I');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.remove("Cannot store    ", "C=FHF&y|8fD@~Od~/");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Cannot store    ", string2);
      
      String string3 = StringUtils.uncapitalize("NtbpoT?}`_X.z 93zh");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("ntbpoT?}`_X.z 93zh", string3);
      
      String string4 = StringUtils.trim("Cannot store ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Cannot store", string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Cannot store", "Cannot store ");
      assertFalse(boolean0);
      
      String string5 = StringUtils.chomp("ntbpoT?}`_X.z 93zh");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("ntbpoT?}`_X.z 93zh", string5);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 'I';
      String string6 = StringUtils.join(floatArray0, 'I');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("16.0I16.0I73.0", string6);
      assertArrayEquals(new float[] {16.0F, 16.0F, 73.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Cannot store    ", (CharSequence) "Cannot store ");
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      assertEquals("Cannot store    ", charSequence0);
      
      int int0 = StringUtils.countMatches("ntbpoT?}`_X.z 93zh", "Cannot store    ");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Cannot store ", "C=FHF&y|8fD@~Od~/");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.appendIfMissing("", "00]y-}8@", stringArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)charSequence0));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("00]y-}8@", string7);
      assertEquals(1, stringArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 16;
      longArray0[3] = (long) 16;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 16;
      longArray0[7] = (long) 16;
      longArray0[8] = (long) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '4', 16, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '2', 404, 404);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string1 = StringUtils.join((Iterable<?>) serviceLoader0, "");
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) " ";
      String string2 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(8, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'V', (-931), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -931
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat('u', 10);
      assertNotNull(string0);
      assertEquals("uuuuuuuuuu", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Cannot store ");
      assertNotNull(string0);
      assertEquals("Cannot store", string0);
      
      String string1 = StringUtils.rightPad(".a", 0, "Minimum abbreviation width is 4");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".a", string1);
      
      int int0 = StringUtils.countMatches(".a", "Minimum abbreviation width is 4");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substring("anviMwY@MG{3],,+q#0", 4096, (-714));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = 'P';
      charArray0[2] = 'f';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is 4", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {';', 'P', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is 4", (CharSequence) ".a", 2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.uncapitalize(string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\\u00", string1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      String string2 = StringUtils.join(longArray0, 'k');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("1", string2);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      String string3 = StringUtils.repeat("", 1246);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1L;
      objectArray0[1] = (Object) string0;
      String string4 = StringUtils.join(objectArray0, '#', 1246, 5);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(2, objectArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(string1));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(stack0.contains(string1));
      
      String string5 = StringUtils.join(iterator0, 'k');
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(stack0.contains(string1));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(Z>m^s,;*Eo", 'h');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.chomp("Q");
      assertNotNull(string0);
      assertEquals("Q", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.replace("2Ka`xH',;_=0S", "2Ka`xH',;_=0S", "2Ka`xH',;_=0S", 0);
      assertNotNull(string0);
      assertEquals("2Ka`xH',;_=0S", string0);
      
      String string1 = StringUtils.difference("2Ka`xH',;_=0S", "2Ka`xH',;_=0S");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "2Ka`xH',;_=0S", "@36as)37P;~L");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'm';
      charArray0[2] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("vmD", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'v', 'm', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("vmD", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'v', 'm', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", 'Y');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeStart("C?T0~aR>2p[V^MDQk", " in an array of ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C?T0~aR>2p[V^MDQk", string1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2469.83F;
      floatArray0[1] = (float) 'Y';
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 'Y';
      floatArray0[5] = (float) 'Y';
      floatArray0[6] = (float) 'Y';
      floatArray0[7] = (float) 'Y';
      floatArray0[8] = (float) 'Y';
      String string2 = StringUtils.join(floatArray0, 'd', 2600, (-2602));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new float[] {2469.83F, 89.0F, 89.0F, 89.0F, 89.0F, 89.0F, 89.0F, 89.0F, 89.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-2602), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("lkbE6;xh:", "lkbE6;xh:", 13);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1657);
      String string0 = StringUtils.join(shortArray0, '-');
      assertNotNull(string0);
      assertEquals("-1657", string0);
      assertArrayEquals(new short[] {(short) (-1657)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      String string1 = StringUtils.abbreviate("WLzRIU>7k)7yYo", (int) (short) (-1657), 13);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("WLzRIU>7k)...", string1);
      
      String string2 = StringUtils.rightPad("WLzRIU>7k)7yYo", 943, "Minimum abbreviation width is 4");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("WLzRIU>7k)7yYoMinimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is ", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("-1657");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripAccents("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.appendIfMissing("\n", "", stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.substring("qs+w5^/Hhk3>.-7", 2);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("+w5^/Hhk3>.-7", string5);
      
      String string6 = StringUtils.replaceOnce("WLzRIU>7k)7yYo", "", "");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("WLzRIU>7k)7yYo", string6);
      
      String string7 = StringUtils.center("The Array must not be null", 13);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("The Array must not be null", string7);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("The Array must not be null", "+w5^/Hhk3>.-7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "qt>0y5^N+U ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string1 = "org.apache.commons.lang3.ArrayUtils";
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", "", (-1158));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      String string2 = StringUtils.join((short[]) null, 'A');
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substring("", (-3736));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string3 = StringUtils.join(objectArray0, 'k');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("k", string3);
      assertEquals(2, objectArray0.length);
      
      char char0 = 'c';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("k", 'c');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      // Undeclared exception!
      try { 
        stack0.listIterator((-3736));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3736
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.substring("Arguments cannot both be null", 564);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 4096);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.trim("The character must not be null");
      assertNotNull(string0);
      assertEquals("The character must not be null", string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      String string1 = StringUtils.join(doubleArray0, 'U', (-818), (-818));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("The character must not be null", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "Vkpo&BG3.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '%';
      charArray0[2] = '';
      charArray0[3] = ' ';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'|', '%', '', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2274);
      shortArray0[1] = (short) (-5328);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)8192;
      shortArray0[5] = (short)1160;
      shortArray0[6] = (short) (-84);
      shortArray0[7] = (short)13;
      shortArray0[8] = (short)10;
      String string2 = StringUtils.join(shortArray0, 'n', (int) (short)8192, (int) (short)10);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new short[] {(short) (-2274), (short) (-5328), (short)0, (short)0, (short)8192, (short)1160, (short) (-84), (short)13, (short)10}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", " is not in the range '0' - '9'");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      String string0 = StringUtils.join((Iterable<?>) list0, "");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'n';
      charArray0[2] = 'T';
      charArray0[3] = 'n';
      charArray0[4] = 'V';
      charArray0[5] = 'K';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'>', 'n', 'T', 'n', 'V', 'K'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace("", "", "", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.stripAccents("org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      String string1 = StringUtils.trimToNull("]8t6!j-57L");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]8t6!j-57L", string1);
      
      String string2 = StringUtils.defaultString("]8t6!j-57L", "org.apache.commons.lang3.CharUtils");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("]8t6!j-57L", string2);
      
      String string3 = StringUtils.removeStart("]8t6!j-57L", "]8t6!j-57L");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.upperCase("]8t6!j-57L");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("]8T6!J-57L", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "]8T6!J-57L", (CharSequence) "]8t6!j-57L");
      assertEquals(2, int0);
      
      String string5 = StringUtils.repeat("org.apache.commons.lang3.CharUtils", "MZy 7tBzRRD-`", 4);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtils", string5);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtils");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtilsMZy 7tBzRRD-`org.apache.commons.lang3.CharUtils");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.trim("T>Ce^M==+0/21x");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("T>Ce^M==+0/21x", string6);
      
      String string7 = StringUtils.trim("]8t6!j-57L");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("]8t6!j-57L", string7);
      
      String string8 = StringUtils.substring((String) null, 0, 0);
      assertNull(string8);
      
      String string9 = "\\u00";
      String string10 = StringUtils.removeStartIgnoreCase("MZy 7tBzRRD-`", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      assertEquals("MZy 7tBzRRD-`", string10);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.center(" in an array of ", 65);
      assertNotNull(string0);
      assertEquals("                         in an array of                          ", string0);
      
      String string1 = StringUtils.replaceChars("                         in an array of                          ", (String) null, " in an array of ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                         in an array of                          ", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "                         in an array of                          ", 65);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) " in an array of ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.trim("                         in an array of                          ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("in an array of", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, "in an array of");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceChars("{f1x|}%l{)h*0q(", "{f1x|}%l{)h*0q(", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("org.apacoe.comm", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("{f1x|}%l{)h*0q(", "*`dqZ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{f1x|}%l{)h*0q(", string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.trim("W6TVN6=>CjoqovK}W{o");
      assertNotNull(string0);
      assertEquals("W6TVN6=>CjoqovK}W{o", string0);
      
      String string1 = StringUtils.center("W6TVN6=>CjoqovK}W{o", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("W6TVN6=>CjoqovK}W{o", string1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = ",]`*Dhn}>}E";
      String string1 = StringUtils.chomp(",]`*Dhn}>}E", ",]`*Dhn}>}E");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "Ty9I'";
      String[] stringArray0 = StringUtils.splitByCharacterType("Ty9I'");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string3 = null;
      String string4 = "):,e}$'B>@H";
      String string5 = StringUtils.replaceOnce((String) null, "):,e}$'B>@H", "");
      assertNull(string5);
      
      String string6 = StringUtils.leftPad("", 2);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("  ", string6);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(""));
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterator0);
      assertFalse(hashSet0.contains(""));
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      assertFalse(hashSet0.contains(""));
      
      char char0 = 'E';
      String string7 = StringUtils.join(iterator0, 'E');
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(hashSet0.contains(""));
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 122, ",MGC2gJs%C|iL]?lu");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split(",MGC2gJs%C|iL]?lu");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.leftPad("", 122);
      assertNotNull(string2);
      assertEquals("                                                                                                                          ", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("The String must not be empty", "");
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("The String must not be empty", string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "The String must not be empty", 122);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "The String must not be empty", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) "The String must not be empty");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "Minimum abbreviation width with offset is 7", (-1), (-1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean4 = StringUtils.isAlphanumeric("Minimum abbreviation width with offset is 7");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string5 = StringUtils.defaultIfBlank("LOD?2l9w", "");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("LOD?2l9w", string5);
      
      String string6 = StringUtils.mid("", (-1), (-3502));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("ZleAj8\"-=QY/J", (String) null, (-3502));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      String string0 = StringUtils.join(longArray0, 'i');
      assertNotNull(string0);
      assertEquals("-1", string0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-1";
      stringArray0[1] = "-1";
      stringArray0[2] = "-1";
      stringArray0[3] = "-1";
      stringArray0[4] = "-1";
      stringArray0[5] = "-1";
      stringArray0[6] = "-1";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1", string1);
      assertEquals(7, stringArray0.length);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("-1"));
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("-1"));
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(linkedList0.contains("-1"));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "-1", (CharSequence) "");
      assertFalse(boolean0);
      
      int int0 = (-1114);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "-1", (CharSequence) null, (-1114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.swapCase(", '");
      assertNotNull(string0);
      assertEquals(", '", string0);
      
      String string1 = StringUtils.defaultIfBlank("$4@.c0'ff0\"vR", "$4@.c0'ff0\"vR");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$4@.c0'ff0\"vR", string1);
      
      String string2 = StringUtils.replace(", '", ", '", "$4@.c0'ff0\"vR");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("$4@.c0'ff0\"vR", string2);
      
      String string3 = StringUtils.leftPad(", '", 0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(", '", string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'r';
      charArray0[2] = '@';
      charArray0[3] = '8';
      charArray0[4] = '%';
      charArray0[5] = 'e';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", '", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'K', 'r', '@', '8', '%', 'e'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      IntStream intStream0 = charBuffer0.chars();
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertNotNull(intStream0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      String string0 = StringUtils.deleteWhitespace("x-e71I/");
      assertNotNull(string0);
      assertEquals("x-e71I/", string0);
      
      HashSet<Object> hashSet0 = null;
      try {
        hashSet0 = new HashSet<Object>((-228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -228
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", 'X');
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t#AR&f)S-*:k'ED~H.";
      charSequenceArray0[1] = (CharSequence) "t#AR&f)S-*:k'ED~H.";
      String string1 = StringUtils.appendIfMissingIgnoreCase("t#AR&f)S-*:k'ED~H.", ", Length: ", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("t#AR&f)S-*:k'ED~H.", string1);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("t#AR&f)S-*:k'ED~H.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.reverseDelimited("=N6|IvT|u/r,GK%", '+');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("=N6|IvT|u/r,GK%", string2);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, 'X', 648, (-3070));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      String string4 = StringUtils.leftPad("", (-600));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      String string0 = StringUtils.removePattern("[-<u]Fxe\"}Q-Ia)k<F", "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("[-<u]Fxe\"}Q-Ia)k<F", string0);
      
      String string1 = StringUtils.replaceChars("", 'w', 'w');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("R,&CK;v,)#3v,-2T+", "[-<u]Fxe\"}Q-Ia)k<F");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.rightPad("\r", (-1121));
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\r", "\r", 1065);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", "\r", 1065);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string1, (-1121));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.center("7njFKOy!0oeAHd", 3086);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Threshold must not be negative", "O=#yl", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.difference("Threshold must not be negative", "The character must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("e character must not be null", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("1dS@*;h");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Threshold must not be negative");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chop("Threshold must not be negative");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Threshold must not be negativ", string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "e character must not be null", "Threshold must not be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviateMiddle("$mn<`_$Ajg'Wy%T", "O=#yl", 1355);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("$mn<`_$Ajg'Wy%T", string3);
      
      boolean boolean2 = StringUtils.isEmpty("\n");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.replace("O=#yl", "The character must not be null", "1dS@*;h", (-1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("O=#yl", string4);
      
      String string5 = "\\u";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string6 = StringUtils.upperCase(string5, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("\\U", string6);
      
      boolean boolean3 = StringUtils.isWhitespace("$mn<`_$Ajg'Wy%T");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.endsWithAny("O=#yl", stringArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("}hR", "YKj,:?", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "}hR", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      String string1 = StringUtils.join(doubleArray0, 'H');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0.0", string1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      String string2 = StringUtils.appendIfMissing("WWc.ec,Or)(,|RTQ", "YKj,:?", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("WWc.ec,Or)(,|RTQYKj,:?", string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.removeEndIgnoreCase("}hR", "\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("}hR", string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string4 = StringUtils.center("}hR", (-2907));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("}hR", string4);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.lowerCase("M(eu_");
      assertNotNull(string0);
      assertEquals("m(eu_", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = '(';
      charArray0[2] = '$';
      charArray0[3] = 'l';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "m(eu_", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'C', '(', '$', 'l'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tn";
      String string0 = StringUtils.replaceEach("tn", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("tn", string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWith("tn", "tn");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace("tn", "P5Nf2R.^", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("tn", string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2656.2554F);
      String string2 = StringUtils.join(floatArray0, '\'', 0, 2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0.0'-1.0", string2);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-2656.2554F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replace("...", "...", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      String[] stringArray0 = StringUtils.split("...", 'T');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "...", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("\r", "...", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\r", "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = "\\u0";
      Locale locale0 = new Locale("\r", "", string2);
      assertEquals("", locale0.getCountry());
      assertEquals("\r__\\u0", locale0.toString());
      assertEquals("\\u0", locale0.getVariant());
      assertEquals("\r", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(locale0);
      
      String string3 = StringUtils.upperCase("%ex;J$", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("\r__\\u0", locale0.toString());
      assertEquals("\\u0", locale0.getVariant());
      assertEquals("\r", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("%EX;J$", string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("...", string4);
      assertEquals(1, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string2));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayList0.contains(string2));
      assertFalse(arrayDeque0.contains(string2));
      
      String string5 = StringUtils.join((Iterable<?>) arrayDeque0, 'T');
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(arrayList0.contains(string2));
      assertFalse(arrayDeque0.contains(string2));
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat(".'W}_-Q.", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric(".'W}_-Q.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = ".'W}_-Q.";
      String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string3);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.substringBefore((String) null, "7BYkiqRWOH%");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " ";
      boolean boolean0 = StringUtils.endsWithAny("\r", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string0 = StringUtils.capitalize("AbHQ,\"yg#Ilo'23.8");
      assertNotNull(string0);
      assertEquals("AbHQ,\"yg#Ilo'23.8", string0);
      
      String string1 = StringUtils.stripAccents("f|kwyib#~");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("f|kwyib#~", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "f|kwyib#~", 90);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.stripEnd("", "\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.strip("<;S2`aF&");
      assertNotNull(string0);
      assertEquals("<;S2`aF&", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "<;S2`aF&", (-2724));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string0 = StringUtils.appendIfMissing("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils", 23);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], "");
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.chop("org.apache.commons.lang3.StringUtils");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtil", string3);
      
      String string4 = StringUtils.overlay(";6i|Z5'76", "", 297, 297);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(";6i|Z5'76", string4);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-300), 10);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.chop(", '");
      assertNotNull(string1);
      assertEquals(", ", string1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.overlay("Hn'Owi<+(|%", "_t", 911, 911);
      assertNotNull(string0);
      assertEquals("Hn'Owi<+(|%_t", string0);
      
      String string1 = StringUtils.remove("Hn'Owi<+(|%", ")gnwYXSZBb.6m");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Hn'Owi<+(|%", string1);
      
      int int0 = StringUtils.ordinalIndexOf(")gnwYXSZBb.6m", "Hn'Owi<+(|%_t", (-1077));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeEnd(";GdEi#@+HAi*tkA$", "Hn'Owi<+(|%_t");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(";GdEi#@+HAi*tkA$", string2);
      
      String string3 = StringUtils.substring("<4vqh^tj^sV", (-1), 911);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("V", string3);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "ZS";
      String string1 = StringUtils.leftPad("ZS", 0, "ZS");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ZS", string1);
      
      String string2 = "8";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("8", "ZS");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "ZS", 0, 0);
      assertEquals((-1), int0);
      
      PriorityQueue<String> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<String>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "\\u000";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\\u000", string1);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.substringAfter(stringArray0[1], stringArray0[2]);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(5, stringArray0.length);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add(stringArray0[0]);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      // Undeclared exception!
      try { 
        priorityQueue0.add(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[1] = "org.apache.commons.lang3.ArrayUtils";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.ArrayUtils", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'A');
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("ogiO'", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ogio'", string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 3498, '^');
      assertNull(string0);
      
      String string1 = StringUtils.replace("ww", "The String must not be empty", "Index: ", 3498);
      assertNotNull(string1);
      assertEquals("ww", string1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, 'N', 1126, 1126);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = "sbb+|#1F.bmgU";
      String string1 = StringUtils.join(objectArray0, "sbb+|#1F.bmgU");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)3030;
      char char0 = '{';
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '{', (int) (short)3030, 3757);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3030
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '`');
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "1%6", 2551, 2551);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object2));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-753);
      shortArray0[1] = (short) (-585);
      shortArray0[2] = (short) (-222);
      shortArray0[3] = (short) (-392);
      char char0 = '?';
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '?', (-1028), 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1028
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1615;
      shortArray0[2] = (short) (-4137);
      shortArray0[3] = (short) (-2272);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)2633;
      String string0 = StringUtils.join(shortArray0, 'm', 21, (int) (short) (-2272));
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)0, (short)1615, (short) (-4137), (short) (-2272), (short) (-1), (short)2633}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("1m>O}?M(e\"WH");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWith("1m>O}?M(e\"WH", "1m>O}?M(e\"WH");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayName();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(string0);
      assertEquals("French", string0);
      
      String string1 = StringUtils.lowerCase("1m>O}?M(e\"WH", locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1m>o}?m(e\"wh", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.join((short[]) null, 'u', 1857, 1354);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWithAny("\r", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      boolean boolean0 = StringUtils.containsAny((CharSequence) ">PSfJ(cf8(aTc<u", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'B', '\u0000', 'B', 'B', 'B'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string0 = StringUtils.chop("Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals("Arguments cannot both be nul", string0);
      
      String string1 = StringUtils.repeat(" vs ", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string2 = StringUtils.chomp("Arguments cannot both be nul", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Arguments cannot both be nul", string2);
      
      String string3 = "\\u000";
      String[] stringArray1 = StringUtils.substringsBetween(" vs ", string3, "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNull(stringArray1);
      
      String string4 = StringUtils.repeat(';', 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Arguments cannot both be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      String string5 = StringUtils.join(locale_CategoryArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("DISPLAYDISPLAYFORMAT", string5);
      assertEquals(3, locale_CategoryArray0.length);
      
      String string6 = StringUtils.overlay("Arguments cannot both be nul", "dEi#@+HAi*tkA$", 32767, 0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("dEi#@+HAi*tkA$", string6);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1193);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)31;
      String string0 = StringUtils.join(shortArray0, 'X');
      assertNotNull(string0);
      assertEquals("-1X-1193X-1X31", string0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1193), (short) (-1), (short)31}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("-1X-1193X-1X31");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty("-1X-1193X-1X31", "-1X-1193X-1X31");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1X-1193X-1X31", string1);
      
      String string2 = StringUtils.mid("-1X-1193X-1X31", 13, 20);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("1", string2);
      
      boolean boolean1 = StringUtils.isWhitespace("-1X-1193X-1X31");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("-1X-1193X-1X31");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.swapCase("-1X-1193X-1X31");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("-1x-1193x-1x31", string3);
      
      String string4 = StringUtils.rightPad("", (-1098), 'X');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.stripEnd("Array element ", "Y50U?J}oJN");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Array element ", string5);
      
      boolean boolean3 = StringUtils.containsWhitespace("-1X-1193X-1X31");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string6 = StringUtils.mid("", (-4183), 1321);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int0 = StringUtils.ordinalIndexOf("", "Array element ", 37);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.defaultIfBlank("Y50U?J}oJN", "clone");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("Y50U?J}oJN", string7);
      
      int int1 = StringUtils.indexOf((CharSequence) "-1x-1193x-1x31", 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.repeat('o', (int) (short)31);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("ooooooooooooooooooooooooooooooo", string8);
      
      String string9 = StringUtils.center("-1X-1193X-1X31", (-478), '3');
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("-1X-1193X-1X31", string9);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*SE8h@D", (CharSequence) "*SE8h@D");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*SE8h@D";
      stringArray0[2] = "*SE8h@D";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.lang3.StringUtils";
      stringArray0[6] = "*SE8h@D";
      stringArray0[7] = "*SE8h@D";
      String string1 = StringUtils.replaceEach("*SE8h@D", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("*SE8h@D", string1);
      assertEquals(8, stringArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      String string2 = StringUtils.removePattern("*SE8h@D", "kR");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("*SE8h@D", string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeStart("*SE8h@D", "org.apache.commons.lang3.StringUtils");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("*SE8h@D", string3);
      
      String string4 = StringUtils.strip(">1zFG%4U30\" UK1", "org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(">1zFG%4U30\" UK1", string4);
      
      boolean boolean1 = StringUtils.isAlpha(">1zFG%4U30\" UK1");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 267);
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("", (String) null, "");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replace("C47+}uBC", (String) null, "bPuF");
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("C47+}uBC", string4);
      
      String string5 = StringUtils.defaultString((String) null);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "C47+}uBC", (CharSequence) "", 267);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, int2);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("E_G!9hv+", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("E_G!9hv+", string6);
      
      String string7 = StringUtils.chomp(" in an array of ");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(" in an array of ", string7);
      
      String string8 = StringUtils.trimToEmpty("");
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.stripToEmpty("");
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("", string9);
      
      int int3 = StringUtils.indexOf((CharSequence) "E_G!9hv+", (CharSequence) "", (-132));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '#';
      charArray0[2] = 'f';
      String string10 = StringUtils.join(charArray0, '#');
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      assertEquals("F###f", string10);
      assertArrayEquals(new char[] {'F', '#', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string11 = StringUtils.stripToNull(" in an array of ");
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertNotNull(string11);
      assertEquals("in an array of", string11);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      String[] stringArray1 = StringUtils.substringsBetween("\"+CvN#fut1>(TNA", "\"+CvN#fut1>(TNA", "\"+CvN#fut1>(TNA");
      assertNull(stringArray1);
      
      StringUtils.join((String[]) null);
      String string0 = StringUtils.replace("\"+CvN#fut1>(TNA", "Iin an areay of ", "Iin an areay of ");
      assertEquals("\"+CvN#fut1>(TNA", string0);
      
      StringUtils.stripAll(stringArray0, "uwi7f(");
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String[] stringArray2 = StringUtils.split("+[%Id", "^(qnFf @");
      assertEquals(1, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null);
      assertEquals("                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                    ", string0);
      assertNotNull(string0);
      
      StringUtils.substring((String) null, 2969, (-900));
      int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13);
      int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0");
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 2969;
      floatArray0[3] = (float) (-900);
      floatArray0[4] = (float) 470;
      floatArray0[5] = (float) (-1);
      StringUtils.join(floatArray0, '5', 13, (-1));
      boolean boolean0 = StringUtils.startsWith("", "ZC6Axe1?SmzqL8x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2161.3564F;
      floatArray0[1] = 2161.3564F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '1', 0, 0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join(charArray0, '1');
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "");
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      short[] shortArray0 = new short[9];
      floatArray0[3] = (float) (short) (-1);
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-1346);
      shortArray0[3] = (short)1354;
      shortArray0[4] = (short)4096;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)10;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)3355;
      String string4 = StringUtils.join(shortArray0, 'U', (int) (short)0, 0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StringUtils.uncapitalize("");
      StringUtils.splitByWholeSeparator("", "A{M+8", 1676);
      String string0 = StringUtils.LF;
      StringUtils.splitByWholeSeparator("", "{}");
      StringUtils.chomp("{}", "");
      StringUtils.substringBetween("", "(/rB[*", "");
      String string1 = StringUtils.repeat("", "{}", 1676);
      StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "(/rB[*");
      StringUtils.leftPad("Array and element cannot both be null", (-1), 'a');
      String string2 = StringUtils.rightPad("AFP|T", 1676, 'a');
      StringUtils.center(string2, (-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      StringUtils.join(byteArray0, 'P', 97, (int) (byte)0);
      StringUtils.left("%,D)K.6*P!\"&U", 1042);
      StringUtils.left("", 1985);
      String string3 = StringUtils.join((short[]) null, 'q', 97, 1895);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.removeEndIgnoreCase((String) null, "");
      StringUtils.substring("3|B4#:ve7*0'", 0, (-823));
      StringUtils.substring("", (-823), (-1));
      StringUtils.removeEnd("\r", "");
      StringUtils.repeat('C', 31);
      StringUtils.indexOfDifference((CharSequence) null, (CharSequence) " ");
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-823);
      longArray0[1] = (long) 31;
      longArray0[2] = (long) (-823);
      longArray0[3] = (long) (-823);
      StringUtils.join(longArray0, '5', 25, (-1));
      StringUtils.substring(" ", 2029, 0);
      StringUtils.split("", "");
      StringUtils.isAlphanumericSpace("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-823L);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '5', (-2978), (-823));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2978
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }
}
