/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 12:34:44 GMT 2022
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodUtils_ESTest extends MethodUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "8J/N)", "toString", (Object[]) null);
      assertEquals("8J/N)", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getCanonicalName", (Object[]) null);
      assertEquals("java.lang.Object", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "-V[bdlzu L3l#'P", (Class<?>[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getAccessibleMethod(class0, "notify", classArray0);
      assertFalse(method0.isBridge());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) "wait", "wait", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[19];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "java.class.version", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(class0, (String) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "notify", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toLowerCase", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertFalse(method1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[2];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      try { 
        MethodUtils.invokeStaticMethod(class0, "java.vm.specification.vendor", objectArray0, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: java.vm.specification.vendor() on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      classArray0[1] = class0;
      try { 
        MethodUtils.invokeExactMethod((Object) classArray0[1], "", (Object[]) null, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(objectArray0[1], "'9DA", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      try { 
        MethodUtils.invokeMethod((Object) "h,hBj`F)", "fK3\u0004", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: fK3\u0004() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 13);
      Class<Integer> class0 = Integer.class;
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "4j;&wrC(aJa@", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 4j;&wrC(aJa@() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "lasIndexOf", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: lasIndexOf() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "wait", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      try { 
        MethodUtils.invokeStaticMethod(class0, "No such accessible method: ", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: No such accessible method: () on class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "notify", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "n$u", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: n$u() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "getAnnotations", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getAnnotations() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getAnnotations", (Object[]) null, (Class<?>[]) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeExactMethod((Object) "notify", "notify", (Object[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      try { 
        MethodUtils.invokeMethod((Object) "toLowerCase", "toLowerCase", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: toLowerCase() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "lastImexOf", "getBytes", (Object[]) null, (Class<?>[]) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      try { 
        MethodUtils.invokeExactMethod((Object) methodUtils0, "", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: org.apache.commons.lang3.reflect.MethodUtils
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
