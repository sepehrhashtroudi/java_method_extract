/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 14:00:37 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableTriple_ESTest extends MutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MutableTriple<Object, Integer, Object> mutableTriple0 = MutableTriple.of((Object) "9CLKUQ\"9@S", integer0, (Object) integer1);
      Integer integer2 = mutableTriple0.getMiddle();
      assertTrue(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableTriple<String, Object, String> mutableTriple0 = MutableTriple.of("Y)7S", (Object) "U{;hA6%BzRC-z", "");
      String string0 = mutableTriple0.getLeft();
      assertEquals("Y)7S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableTriple<Object, String, String> mutableTriple0 = new MutableTriple<Object, String, String>();
      String string0 = mutableTriple0.getRight();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutableTriple<Object, Object, Object> mutableTriple0 = MutableTriple.of((Object) null, (Object) null, (Object) null);
      Object object0 = mutableTriple0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(40);
      MutableTriple<Object, String, Object> mutableTriple0 = MutableTriple.of((Object) null, (String) null, (Object) integer0);
      Object object0 = mutableTriple0.getRight();
      assertEquals(40, object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(1417);
      MutableTriple<Integer, Object, String> mutableTriple0 = new MutableTriple<Integer, Object, String>(integer0, integer0, "36Ad~W_`VCbSKBOH?");
      Integer integer1 = mutableTriple0.getLeft();
      assertEquals(1417, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      Object object0 = mutableTriple0.getMiddle();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableTriple<Integer, String, String> mutableTriple0 = new MutableTriple<Integer, String, String>();
      mutableTriple0.setRight("ori.apache.commons.lang3.tuple.Triple");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableTriple<Object, String, String> mutableTriple0 = new MutableTriple<Object, String, String>();
      MutableTriple<Object, Object, Integer> mutableTriple1 = new MutableTriple<Object, Object, Integer>();
      mutableTriple1.setLeft(mutableTriple0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutableTriple<Integer, String, String> mutableTriple0 = new MutableTriple<Integer, String, String>();
      mutableTriple0.setMiddle("ori.apache.commons.lang3.tuple.Triple");
  }
}
