/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:35:21 GMT 2021
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableTriple_ESTest extends MutableTriple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3825);
      MutableTriple<Object, Integer, Integer> mutableTriple0 = new MutableTriple<Object, Integer, Integer>((Object) null, integer0, integer0);
      Integer integer1 = new Integer(3825);
      mutableTriple0.setMiddle(integer1);
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(41);
      MutableTriple<Integer, Object, String> mutableTriple0 = MutableTriple.of(integer0, (Object) integer0, "org.apache.commons.lang3.tuple.ImmutableTriple");
      mutableTriple0.setLeft(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MutableTriple<Object, Object, Integer> mutableTriple0 = MutableTriple.of((Object) integer0, (Object) integer0, integer1);
      mutableTriple0.setLeft(integer1);
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableTriple<Integer, String, String> mutableTriple0 = MutableTriple.of((Integer) null, "org.apache.commons.lang3.tuple.Triple", ",DUN");
      String string0 = mutableTriple0.getRight();
      assertNotNull(string0);
      assertEquals(",DUN", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MutableTriple<Integer, Object, Object> mutableTriple0 = MutableTriple.of(integer0, (Object) integer0, (Object) integer0);
      Object object0 = mutableTriple0.getMiddle();
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableTriple<String, Integer, Object> mutableTriple0 = new MutableTriple<String, Integer, Object>();
      String string0 = mutableTriple0.getLeft();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableTriple<Integer, String, Integer> mutableTriple0 = MutableTriple.of(integer0, "(Z`wGbDj=fZ0H", integer0);
      Integer integer1 = mutableTriple0.getLeft();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableTriple<Integer, Object, String> mutableTriple0 = new MutableTriple<Integer, Object, String>();
      Object object0 = mutableTriple0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MutableTriple<Object, String, Object> mutableTriple0 = new MutableTriple<Object, String, Object>(integer0, "6@w7}8Hh/tF{\"6_z4:", (Object) null);
      String string0 = mutableTriple0.getMiddle();
      assertEquals("6@w7}8Hh/tF{\"6_z4:", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableTriple<Object, Object, Object> mutableTriple0 = new MutableTriple<Object, Object, Object>();
      Object object0 = mutableTriple0.getMiddle();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MutableTriple<String, Integer, Object> mutableTriple0 = new MutableTriple<String, Integer, Object>();
      mutableTriple0.setRight(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MutableTriple<Object, String, Integer> mutableTriple0 = MutableTriple.of((Object) null, (String) null, integer0);
      int int0 = mutableTriple0.compareTo((Triple<Object, String, Integer>) mutableTriple0);
      assertEquals(0, int0);
  }
}
