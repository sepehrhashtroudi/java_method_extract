/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 14:02:50 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePair<Integer, MutablePair<Object, Integer>> mutablePair0 = new MutablePair<Integer, MutablePair<Object, Integer>>();
      Integer integer0 = new Integer((-1105));
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("`%", "~^14PxmtTs6zq+");
      MutablePair<Integer, AbstractMap.SimpleEntry<Object, String>> mutablePair1 = new MutablePair<Integer, AbstractMap.SimpleEntry<Object, String>>(integer0, abstractMap_SimpleEntry0);
      Object object0 = mutablePair1.getRight();
      ImmutablePair<Object, Integer> immutablePair0 = new ImmutablePair<Object, Integer>("~^14PxmtTs6zq+", integer0);
      MutablePair<Object, ImmutablePair<Object, Integer>> mutablePair2 = MutablePair.of((Object) object0, immutablePair0);
      mutablePair2.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-102));
      ImmutablePair<Integer, String> immutablePair0 = ImmutablePair.of(integer0, "-lXga&mw}csmS,");
      Pair<Object, ImmutablePair<Integer, String>> pair0 = Pair.of((Object) null, immutablePair0);
      String string0 = pair0.toString("iJS6P");
      assertEquals("iJS6P", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePair<Integer, MutablePair<String, Integer>> mutablePair0 = new MutablePair<Integer, MutablePair<String, Integer>>();
      String string0 = mutablePair0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImmutablePair<Object, Object> immutablePair0 = new ImmutablePair<Object, Object>((Object) null, (Object) null);
      Object object0 = immutablePair0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>((Object) null, "org.apache.commons.lang3.tuple.ImmutablePair");
      String string0 = immutablePair0.getValue();
      assertEquals("org.apache.commons.lang3.tuple.ImmutablePair", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePair<Integer, AbstractMap.SimpleEntry<String, Integer>> mutablePair0 = new MutablePair<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = mutablePair0.getRight();
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("=I", integer0);
      MutablePair<AbstractMap.SimpleEntry<String, Integer>, Object> mutablePair0 = new MutablePair<AbstractMap.SimpleEntry<String, Integer>, Object>(abstractMap_SimpleEntry0, "=I");
      Object object0 = mutablePair0.getRight();
      assertEquals("=I", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePair<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> mutablePair0 = new MutablePair<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Object object0 = mutablePair0.getLeft();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1691);
      MutablePair<String, Integer> mutablePair0 = new MutablePair<String, Integer>("dm5^&x3DJL-.|s?M~m", integer0);
      ImmutablePair<Pair<String, Integer>, Object> immutablePair0 = new ImmutablePair<Pair<String, Integer>, Object>(mutablePair0, integer0);
      Pair<String, Integer> pair0 = immutablePair0.getLeft();
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePair<ImmutablePair<Object, Integer>, String> mutablePair0 = new MutablePair<ImmutablePair<Object, Integer>, String>();
      ImmutablePair<Object, Integer> immutablePair0 = mutablePair0.getKey();
      assertNull(immutablePair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(70);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, "(6");
      ImmutablePair<AbstractMap.SimpleEntry<Object, Object>, String> immutablePair0 = new ImmutablePair<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "@*og4BG>VtO{M4]L@");
      ImmutablePair<AbstractMap.SimpleEntry<Object, Object>, String> immutablePair1 = new ImmutablePair<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "");
      int int0 = immutablePair0.compareTo((Pair<AbstractMap.SimpleEntry<Object, Object>, String>) immutablePair1);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>((Integer) null, "A");
      Integer integer0 = new Integer((-2155));
      MutablePair<Integer, String> mutablePair0 = MutablePair.of(integer0, "");
      int int0 = immutablePair0.compareTo((Pair<Integer, String>) mutablePair0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutablePair<Object, String> mutablePair0 = MutablePair.of((Object) integer0, "");
      MutablePair<MutablePair<Object, String>, Integer> mutablePair1 = new MutablePair<MutablePair<Object, String>, Integer>(mutablePair0, integer0);
      // Undeclared exception!
      try { 
        mutablePair1.toString("jzD%=fUGCnz");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '='
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>((Integer) null, "C]1q@IFpQZA%Gv'f");
      Integer integer0 = new Integer(2);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, (Object) null);
      ImmutablePair<ImmutablePair<Integer, String>, AbstractMap.SimpleEntry<Object, Object>> immutablePair1 = ImmutablePair.of(immutablePair0, abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        immutablePair1.toString("C]1q@IFpQZA%Gv'f");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != org.apache.commons.lang3.tuple.ImmutablePair
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePair<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> mutablePair0 = new MutablePair<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>();
      // Undeclared exception!
      try { 
        mutablePair0.compareTo((Pair<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePair<String, String> mutablePair0 = new MutablePair<String, String>("org.apache.commons.lang3.tuple.Pair", "org.apache.commons.lang3.tuple.MutablePair");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(mutablePair0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>("qD", "");
      Pair<Object, AbstractMap.SimpleEntry<Object, String>> pair0 = Pair.of(object0, abstractMap_SimpleEntry1);
      ImmutablePair<Object, AbstractMap.SimpleEntry<Object, String>> immutablePair0 = ImmutablePair.of((Object) abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        pair0.compareTo((Pair<Object, AbstractMap.SimpleEntry<Object, String>>) immutablePair0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePair<Integer, MutablePair<Object, Integer>> mutablePair0 = new MutablePair<Integer, MutablePair<Object, Integer>>();
      mutablePair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-1806));
      Pair<String, Integer> pair0 = Pair.of("org.apache.commons.lang3.tuple.MutablePair", integer0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("org.apache.commons.lang3.tuple.MutablePair", integer0);
      ImmutablePair<Object, Integer> immutablePair0 = new ImmutablePair<Object, Integer>(integer0, integer0);
      MutablePair<AbstractMap.SimpleEntry<String, Object>, Pair<Object, Integer>> mutablePair0 = new MutablePair<AbstractMap.SimpleEntry<String, Object>, Pair<Object, Integer>>(abstractMap_SimpleEntry0, immutablePair0);
      Object object0 = mutablePair0.getLeft();
      boolean boolean0 = pair0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutablePair<Object, String> mutablePair0 = new MutablePair<Object, String>("*zms", "*zms");
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(mutablePair0);
      MutablePair<MutablePair<Object, String>, AbstractMap.SimpleEntry<Object, Object>> mutablePair1 = new MutablePair<MutablePair<Object, String>, AbstractMap.SimpleEntry<Object, Object>>(mutablePair0, abstractMap_SimpleEntry0);
      boolean boolean0 = mutablePair1.equals(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutablePair<Object, AbstractMap.SimpleEntry<String, String>> mutablePair0 = new MutablePair<Object, AbstractMap.SimpleEntry<String, String>>();
      boolean boolean0 = mutablePair0.equals("%a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutablePair<Object, String> mutablePair0 = new MutablePair<Object, String>("*zms", "*zms");
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(mutablePair0);
      MutablePair<MutablePair<Object, String>, AbstractMap.SimpleEntry<Object, Object>> mutablePair1 = new MutablePair<MutablePair<Object, String>, AbstractMap.SimpleEntry<Object, Object>>(mutablePair0, abstractMap_SimpleEntry0);
      Object object0 = mutablePair1.getKey();
      boolean boolean0 = mutablePair0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImmutablePair<String, String> immutablePair0 = ImmutablePair.of("f</N", "f</N");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(immutablePair0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>("eUvjU$g'+=G6__LM-", abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      Pair<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, String>> pair0 = Pair.of(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2);
      // Undeclared exception!
      try { 
        pair0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePair<Object, AbstractMap.SimpleEntry<String, String>> mutablePair0 = new MutablePair<Object, AbstractMap.SimpleEntry<String, String>>();
      int int0 = mutablePair0.compareTo((Pair<Object, AbstractMap.SimpleEntry<String, String>>) mutablePair0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-10));
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>(integer0, "");
      ImmutablePair<AbstractMap.SimpleEntry<Integer, Integer>, ImmutablePair<Object, String>> immutablePair1 = ImmutablePair.of(abstractMap_SimpleEntry0, immutablePair0);
      String string0 = immutablePair1.toString();
      assertEquals("(-10=-10,(-10,))", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>((Object) null, "org.apache.commons.lang3.tuple.ImmutablePair");
      ImmutablePair<Object, Object> immutablePair1 = new ImmutablePair<Object, Object>((Object) null, "Alo9q?");
      Integer integer0 = new Integer((-32768));
      ImmutablePair<ImmutablePair<Object, Object>, Integer> immutablePair2 = ImmutablePair.of(immutablePair1, integer0);
      Object object0 = immutablePair2.getLeft();
      boolean boolean0 = immutablePair0.equals(object0);
      assertFalse(boolean0);
  }
}
