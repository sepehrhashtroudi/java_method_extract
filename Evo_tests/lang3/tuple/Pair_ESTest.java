/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:37:31 GMT 2021
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", integer0);
      Pair<String, AbstractMap.SimpleImmutableEntry<String, Integer>> pair0 = Pair.of("", abstractMap_SimpleImmutableEntry0);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePair<Object, Pair<String, Object>> mutablePair0 = new MutablePair<Object, Pair<String, Object>>();
      String string0 = mutablePair0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePair<ImmutablePair<String, Object>, String> mutablePair0 = new MutablePair<ImmutablePair<String, Object>, String>();
      Object object0 = mutablePair0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePair<ImmutablePair<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> mutablePair0 = new MutablePair<ImmutablePair<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = mutablePair0.getRight();
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0);
      Object object0 = pair0.getRight();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePair<MutablePair<Object, String>, Pair<Object, String>> mutablePair0 = new MutablePair<MutablePair<Object, String>, Pair<Object, String>>();
      MutablePair<Object, String> mutablePair1 = mutablePair0.getLeft();
      assertNull(mutablePair1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Pair<Object, Object> pair0 = Pair.of((Object) integer0, (Object) integer0);
      Object object0 = pair0.getLeft();
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePair<ImmutablePair<Object, Object>, Object> mutablePair0 = new MutablePair<ImmutablePair<Object, Object>, Object>();
      Object object0 = mutablePair0.getKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImmutablePair<String, String> immutablePair0 = ImmutablePair.of("org.apache.commons.lang3.tuple.Pair", "");
      Pair<String, String> pair0 = Pair.of("", "");
      int int0 = immutablePair0.compareTo(pair0);
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>> mutablePair0 = new MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>> mutablePair1 = MutablePair.of(abstractMap_SimpleImmutableEntry0, immutablePair0);
      int int0 = mutablePair0.compareTo((Pair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>>) mutablePair1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "org.apache.commons.lang3.tuple.Pair");
      ImmutablePair<AbstractMap.SimpleEntry<Integer, String>, Integer> immutablePair0 = new ImmutablePair<AbstractMap.SimpleEntry<Integer, String>, Integer>(abstractMap_SimpleEntry0, integer0);
      // Undeclared exception!
      try { 
        immutablePair0.toString("u,T~O!%&Qj$A;$[w{");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '&'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePair<String, Object> mutablePair0 = MutablePair.of("org.apache.commons.lang3.tuple.MutablePair", (Object) "org.apache.commons.lang3.tuple.MutablePair");
      MutablePair<String, MutablePair<String, Object>> mutablePair1 = new MutablePair<String, MutablePair<String, Object>>("org.apache.commons.lang3.tuple.MutablePair", mutablePair0);
      // Undeclared exception!
      try { 
        mutablePair1.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1065);
      MutablePair<Integer, MutablePair<Object, Object>> mutablePair0 = new MutablePair<Integer, MutablePair<Object, Object>>(integer0, (MutablePair<Object, Object>) null);
      // Undeclared exception!
      try { 
        mutablePair0.compareTo((Pair<Integer, MutablePair<Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0);
      Object object0 = new Object();
      Pair<Integer, Object> pair1 = Pair.of(integer0, object0);
      // Undeclared exception!
      try { 
        pair0.compareTo(pair1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePair<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> mutablePair0 = new MutablePair<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      mutablePair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePair<ImmutablePair<Integer, Object>, Object> mutablePair0 = new MutablePair<ImmutablePair<Integer, Object>, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("", "");
      ImmutablePair<String, Object> immutablePair0 = ImmutablePair.of("", (Object) abstractMap_SimpleEntry0);
      MutablePair<AbstractMap.SimpleEntry<Object, Object>, ImmutablePair<String, Object>> mutablePair1 = MutablePair.of(abstractMap_SimpleEntry0, immutablePair0);
      Object object0 = mutablePair1.getValue();
      boolean boolean0 = mutablePair0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePair<MutablePair<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> mutablePair0 = new MutablePair<MutablePair<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      boolean boolean0 = mutablePair0.equals("[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePair<Integer, ImmutablePair<Integer, Object>> mutablePair0 = new MutablePair<Integer, ImmutablePair<Integer, Object>>();
      MutablePair<Object, String> mutablePair1 = new MutablePair<Object, String>();
      MutablePair<Integer, Integer> mutablePair2 = new MutablePair<Integer, Integer>();
      MutablePair<MutablePair<Integer, Integer>, Object> mutablePair3 = new MutablePair<MutablePair<Integer, Integer>, Object>(mutablePair2, mutablePair0);
      Object object0 = mutablePair3.getRight();
      boolean boolean0 = mutablePair1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutablePair<String, Object> mutablePair0 = new MutablePair<String, Object>();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(mutablePair0, object0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(mutablePair0);
      MutablePair<AbstractMap.SimpleEntry<Object, Object>, String> mutablePair1 = new MutablePair<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry1, "[");
      boolean boolean0 = mutablePair1.equals(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutablePair<String, Object> mutablePair0 = new MutablePair<String, Object>();
      String string0 = mutablePair0.toString("[");
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0);
      int int0 = pair0.compareTo(pair0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePair<ImmutablePair<Integer, String>, Object> mutablePair0 = new MutablePair<ImmutablePair<Integer, String>, Object>();
      String string0 = mutablePair0.toString();
      assertEquals("(null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1075));
      MutablePair<Object, Object> mutablePair0 = MutablePair.of((Object) integer0, (Object) null);
      MutablePair<Integer, Integer> mutablePair1 = new MutablePair<Integer, Integer>(integer0, integer0);
      ImmutablePair<Pair<Object, Object>, MutablePair<Integer, Integer>> immutablePair0 = new ImmutablePair<Pair<Object, Object>, MutablePair<Integer, Integer>>(mutablePair0, mutablePair1);
      Object object0 = immutablePair0.getKey();
      boolean boolean0 = mutablePair0.equals(object0);
      assertTrue(boolean0);
  }
}
