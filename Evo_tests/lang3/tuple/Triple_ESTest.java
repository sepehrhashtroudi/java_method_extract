/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 13:58:27 GMT 2022
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatFlagsException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Triple_ESTest extends Triple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      ImmutableTriple<MutableTriple<Object, Object, String>, String, String> immutableTriple0 = ImmutableTriple.of(mutableTriple0, "8PrQ]29", "8PrQ]29");
      immutableTriple0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImmutableTriple<String, Object, String> immutableTriple0 = new ImmutableTriple<String, Object, String>("n7L-KZ/]A5~36", (Object) null, "n7L-KZ/]A5~36");
      MutableTriple<ImmutableTriple<String, Object, String>, Object, Object> mutableTriple0 = MutableTriple.of(immutableTriple0, (Object) "n7L-KZ/]A5~36", (Object) "n7L-KZ/]A5~36");
      String string0 = mutableTriple0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableTriple<Object, Object, Integer> mutableTriple0 = new MutableTriple<Object, Object, Integer>();
      Object object0 = mutableTriple0.getRight();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>();
      mutableTriple0.setRight("V/>Jq@c@@)kAVlDSyU");
      String string0 = mutableTriple0.getRight();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-219));
      ImmutableTriple<Object, Object, Integer> immutableTriple0 = new ImmutableTriple<Object, Object, Integer>("558sC0>", (Object) null, integer0);
      Object object0 = immutableTriple0.getMiddle();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableTriple<ImmutableTriple<Object, Object, Integer>, MutableTriple<Integer, Object, Object>, Triple<String, String, String>> mutableTriple0 = new MutableTriple<ImmutableTriple<Object, Object, Integer>, MutableTriple<Integer, Object, Object>, Triple<String, String, String>>();
      Triple<String, Object, String> triple0 = Triple.of("Y/!*`2TPP{2qG2", (Object) mutableTriple0, "Y/!*`2TPP{2qG2");
      Object object0 = triple0.getMiddle();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1444);
      ImmutableTriple<Integer, Object, Object> immutableTriple0 = ImmutableTriple.of(integer0, (Object) "", (Object) integer0);
      ImmutableTriple<String, Object, ImmutableTriple<Integer, Object, Object>> immutableTriple1 = new ImmutableTriple<String, Object, ImmutableTriple<Integer, Object, Object>>("", integer0, immutableTriple0);
      String string0 = immutableTriple1.getLeft();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MutableTriple<Integer, Object, Object> mutableTriple0 = new MutableTriple<Integer, Object, Object>(integer0, integer0, integer0);
      ImmutableTriple<Integer, Object, Object> immutableTriple0 = new ImmutableTriple<Integer, Object, Object>(integer0, integer0, integer0);
      int int0 = mutableTriple0.compareTo((Triple<Integer, Object, Object>) immutableTriple0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableTriple<String, Object, Object> mutableTriple0 = MutableTriple.of("G;6Zd78Pw.|G]% >", (Object) "G;6Zd78Pw.|G]% >", (Object) "");
      MutableTriple<String, Object, Object> mutableTriple1 = new MutableTriple<String, Object, Object>();
      int int0 = mutableTriple0.compareTo((Triple<String, Object, Object>) mutableTriple1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>();
      Integer integer0 = new Integer(491);
      Triple<Integer, Integer, String> triple0 = Triple.of(integer0, integer0, "T(=LAX,8*I");
      int int0 = mutableTriple0.compareTo(triple0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1444);
      MutableTriple<Object, Integer, Integer> mutableTriple0 = new MutableTriple<Object, Integer, Integer>("", integer0, integer0);
      // Undeclared exception!
      try { 
        mutableTriple0.toString("[5Ix'%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>();
      Integer integer0 = new Integer(210);
      ImmutableTriple<Object, Object, Object> immutableTriple0 = ImmutableTriple.of((Object) mutableTriple0, (Object) mutableTriple0, (Object) integer0);
      // Undeclared exception!
      try { 
        immutableTriple0.toString("e<t]%+ g`Z_;sk\"");
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = '+ '
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      Integer integer0 = new Integer((-2003));
      Triple<Triple<Object, Object, String>, Object, Integer> triple0 = Triple.of((Triple<Object, Object, String>) mutableTriple0, (Object) mutableTriple0, integer0);
      // Undeclared exception!
      try { 
        triple0.toString(",4%cG@ag");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != org.apache.commons.lang3.tuple.MutableTriple
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableTriple<ImmutableTriple<Object, String, Object>, String, Triple<Object, String, Object>> mutableTriple0 = new MutableTriple<ImmutableTriple<Object, String, Object>, String, Triple<Object, String, Object>>();
      MutableTriple<String, Object, Object> mutableTriple1 = MutableTriple.of("6z;tw", (Object) mutableTriple0, (Object) null);
      // Undeclared exception!
      try { 
        mutableTriple1.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableTriple<MutableTriple<Object, String, Object>, Object, Triple<Object, String, Object>> mutableTriple0 = new MutableTriple<MutableTriple<Object, String, Object>, Object, Triple<Object, String, Object>>((MutableTriple<Object, String, Object>) null, "", (Triple<Object, String, Object>) null);
      MutableTriple<Object, String, Object> mutableTriple1 = mutableTriple0.getLeft();
      MutableTriple<MutableTriple<Object, String, Object>, Object, Triple<Object, String, Object>> mutableTriple2 = MutableTriple.of((MutableTriple<Object, String, Object>) null, (Object) mutableTriple0, (Triple<Object, String, Object>) mutableTriple1);
      // Undeclared exception!
      try { 
        mutableTriple0.compareTo((Triple<MutableTriple<Object, String, Object>, Object, Triple<Object, String, Object>>) mutableTriple2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableTriple<ImmutableTriple<Object, Object, Integer>, MutableTriple<Integer, Object, Object>, Triple<String, String, String>> mutableTriple0 = new MutableTriple<ImmutableTriple<Object, Object, Integer>, MutableTriple<Integer, Object, Object>, Triple<String, String, String>>();
      boolean boolean0 = mutableTriple0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-879));
      ImmutableTriple<Integer, String, String> immutableTriple0 = new ImmutableTriple<Integer, String, String>(integer0, "", "");
      ImmutableTriple<ImmutableTriple<Object, Integer, String>, ImmutableTriple<Integer, String, String>, Triple<Object, String, Object>> immutableTriple1 = ImmutableTriple.of((ImmutableTriple<Object, Integer, String>) null, immutableTriple0, (Triple<Object, String, Object>) null);
      immutableTriple1.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>();
      Integer integer0 = new Integer(210);
      ImmutableTriple<Object, Object, Object> immutableTriple0 = ImmutableTriple.of((Object) mutableTriple0, (Object) mutableTriple0, (Object) integer0);
      ImmutableTriple<Triple<String, Integer, String>, Triple<String, Integer, Object>, Triple<Object, Object, Object>> immutableTriple1 = new ImmutableTriple<Triple<String, Integer, String>, Triple<String, Integer, Object>, Triple<Object, Object, Object>>(mutableTriple0, (Triple<String, Integer, Object>) null, immutableTriple0);
      immutableTriple1.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableTriple<String, Object, Object> mutableTriple0 = new MutableTriple<String, Object, Object>();
      MutableTriple<String, Triple<Object, String, Object>, MutableTriple<String, Object, String>> mutableTriple1 = new MutableTriple<String, Triple<Object, String, Object>, MutableTriple<String, Object, String>>();
      boolean boolean0 = mutableTriple1.equals(mutableTriple0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>();
      Integer integer0 = new Integer(210);
      ImmutableTriple<Object, Object, Object> immutableTriple0 = ImmutableTriple.of((Object) mutableTriple0, (Object) mutableTriple0, (Object) integer0);
      ImmutableTriple<Triple<String, Integer, String>, Triple<String, Integer, Object>, Triple<Object, Object, Object>> immutableTriple1 = new ImmutableTriple<Triple<String, Integer, String>, Triple<String, Integer, Object>, Triple<Object, Object, Object>>(mutableTriple0, (Triple<String, Integer, Object>) null, immutableTriple0);
      boolean boolean0 = immutableTriple0.equals(immutableTriple1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-879));
      MutableTriple<Integer, ImmutableTriple<Object, Object, Object>, ImmutableTriple<Object, Object, Object>> mutableTriple0 = new MutableTriple<Integer, ImmutableTriple<Object, Object, Object>, ImmutableTriple<Object, Object, Object>>();
      ImmutableTriple<Integer, Integer, Triple<Integer, ImmutableTriple<Object, Object, Object>, ImmutableTriple<Object, Object, Object>>> immutableTriple0 = ImmutableTriple.of(integer0, integer0, (Triple<Integer, ImmutableTriple<Object, Object, Object>, ImmutableTriple<Object, Object, Object>>) mutableTriple0);
      MutableTriple<Integer, Integer, String> mutableTriple1 = new MutableTriple<Integer, Integer, String>(integer0, integer0, "");
      MutableTriple<Integer, Object, String> mutableTriple2 = new MutableTriple<Integer, Object, String>();
      ImmutableTriple<String, String, String> immutableTriple1 = new ImmutableTriple<String, String, String>("", "", "");
      Triple<MutableTriple<Integer, Integer, String>, MutableTriple<Integer, Object, String>, ImmutableTriple<String, String, String>> triple0 = Triple.of(mutableTriple1, mutableTriple2, immutableTriple1);
      boolean boolean0 = triple0.equals(immutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableTriple<String, Object, Object> mutableTriple0 = new MutableTriple<String, Object, Object>();
      MutableTriple<Object, Object, MutableTriple<Object, String, String>> mutableTriple1 = MutableTriple.of((Object) mutableTriple0, (Object) "", (MutableTriple<Object, String, String>) null);
      MutableTriple mutableTriple2 = (MutableTriple)mutableTriple1.left;
      boolean boolean0 = mutableTriple0.equals(mutableTriple2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>();
      mutableTriple0.setRight("V/>Jq@c@@)kAVlDSyU");
      MutableTriple<ImmutableTriple<String, String, String>, Integer, Integer> mutableTriple1 = new MutableTriple<ImmutableTriple<String, String, String>, Integer, Integer>();
      boolean boolean0 = mutableTriple1.equals(mutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableTriple<Object, Integer, MutableTriple<Object, Object, String>> mutableTriple0 = new MutableTriple<Object, Integer, MutableTriple<Object, Object, String>>();
      String string0 = mutableTriple0.toString("(java.lang.Object@4e769220,-14,(null,null,null))");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-14));
      MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>();
      ImmutableTriple<Object, Integer, MutableTriple<Object, Object, String>> immutableTriple0 = new ImmutableTriple<Object, Integer, MutableTriple<Object, Object, String>>(object0, integer0, mutableTriple0);
      String string0 = immutableTriple0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-288));
      ImmutableTriple<Object, Object, Integer> immutableTriple0 = ImmutableTriple.of((Object) integer0, (Object) "", integer0);
      ImmutableTriple<String, String, ImmutableTriple<Object, Object, Integer>> immutableTriple1 = new ImmutableTriple<String, String, ImmutableTriple<Object, Object, Integer>>("org.apache.commons.lang3.tuple.MutableTriple", "NV", immutableTriple0);
      // Undeclared exception!
      try { 
        immutableTriple1.compareTo((Triple<String, String, ImmutableTriple<Object, Object, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Triple", e);
      }
  }
}
