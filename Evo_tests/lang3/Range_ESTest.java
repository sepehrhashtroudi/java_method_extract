/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 13:56:06 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range<String> range0 = Range.is("\bUw");
      Range<String> range1 = range0.intersectionWith(range0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0);
      Integer integer0 = new Integer(1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) integer0, comparator1);
      boolean boolean0 = range1.isBeforeRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range<String> range0 = Range.between("", "..");
      boolean boolean0 = range0.isBefore("-fU|!o*[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range<String> range0 = Range.between("z", "");
      boolean boolean0 = range0.isEndedBy("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(674, 674).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0);
      boolean boolean0 = range0.isStartedBy("9apdIVYVD0Icg&f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("Jy0]?g>W @", comparator0);
      String string0 = range0.toString("[Ryu..Ryu]");
      assertEquals("[Ryu..Ryu]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "r.Ngw'UzA", comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class));
      Range<Range<Object>> range1 = Range.between(range0, range0, comparator1);
      String string0 = range1.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(614);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(614, 614).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isBeforeRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1665));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.between(integer0, integer0, comparator0);
      Integer integer1 = new Integer((-1190));
      Range<Integer> range1 = Range.between(integer1, integer1);
      boolean boolean0 = range1.isAfterRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-246), 47, (-246)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "j>-m*", comparator0);
      Range<Object> range1 = range0.intersectionWith(range0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      // Undeclared exception!
      try { 
        range0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Object) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between(object0, object0, comparator0);
      Object object1 = range0.getMaximum();
      // Undeclared exception!
      try { 
        Range.is((Object) object1, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.is((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(88);
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      Range<Object> range1 = Range.is((Object) "q", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.intersectionWith(range1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        Range.between((Object) integer0, (Object) "#T8^zn)Hg(VN'", (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("Jy0]?g>W @", comparator0);
      Integer integer0 = new Integer(0);
      Range<Integer> range1 = Range.is(integer0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) ")%J2@=`u[}-J#w|{", (Object) ")%J2@=`u[}-J#w|{", comparator0);
      Range<String> range1 = Range.between(")%J2@=`u[}-J#w|{", "");
      Comparator<String> comparator1 = range1.getComparator();
      Range<String> range2 = Range.is(")%J2@=`u[}-J#w|{", comparator1);
      boolean boolean0 = range2.equals(range0);
      assertTrue(boolean0);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0);
      Range<String> range1 = Range.between("fw", "r.Ngw'UzA");
      Comparator<String> comparator1 = range0.getComparator();
      Range<String> range2 = Range.is("", comparator1);
      range2.isOverlappedBy(range1);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range<String> range0 = Range.is("W]f3!");
      boolean boolean0 = range0.isOverlappedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "r.Ngw'UzA", comparator0);
      boolean boolean0 = range0.isOverlappedBy((Range<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = Integer.valueOf((-779));
      Range<Integer> range0 = Range.is(integer1);
      boolean boolean0 = range0.isBefore(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range<String> range0 = Range.is("@=:haMS w");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between(", element2=", "", comparator0);
      boolean boolean0 = range1.isAfter(", element2=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range<String> range0 = Range.is("@=:haMS w");
      boolean boolean0 = range0.isAfter(", element2=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer((-1382));
      boolean boolean0 = range0.contains(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      boolean boolean0 = range0.contains(", element2=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range<String> range0 = Range.between("", "z-+#]eC");
      boolean boolean0 = range0.contains("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm");
      String string0 = range0.toString();
      assertEquals("[,8A9<~PCQqm..,8A9<~PCQqm]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-246)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "j>-m*", comparator0);
      range0.hashCode();
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = Integer.valueOf((-779));
      Range<Integer> range0 = Range.is(integer1);
      Range<Integer> range1 = Range.between(integer1, integer0);
      Range<Integer> range2 = range0.intersectionWith(range1);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range<String> range0 = Range.is("W]f3!");
      boolean boolean0 = range0.equals("{cG+4e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-246)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "j>-m*", comparator0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(66, 66, (-49)).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.is(">~{f:w[rbE", comparator0);
      Range<String> range2 = range0.intersectionWith(range1);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(674).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0);
      boolean boolean0 = range0.isBeforeRange((Range<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(1851);
      Integer integer1 = new Integer(109);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1851, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.between(integer0, integer1, comparator0);
      boolean boolean0 = range0.isOverlappedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer((-764));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator1);
      // Undeclared exception!
      try { 
        range1.intersectionWith((Range<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(674).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0);
      boolean boolean0 = range0.isAfterRange((Range<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer((-764));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isAfterRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer((-2204));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(217, (-2204), (-907), 1245, (-1981)).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Range<Integer> range1 = Range.is(integer0);
      Range<Integer> range2 = range1.intersectionWith(range0);
      boolean boolean0 = range0.containsRange(range1);
      assertSame(range1, range2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range<String> range0 = Range.is("a2_");
      boolean boolean0 = range0.containsRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null);
      boolean boolean0 = range0.containsRange((Range<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between(object0, object0, comparator0);
      Integer integer0 = new Integer((-1698));
      int int0 = range0.elementCompareTo(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range<String> range0 = Range.between("", "z-+#]eC");
      // Undeclared exception!
      try { 
        range0.elementCompareTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Element is null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("Jy0]?g>W @", comparator0);
      boolean boolean0 = range0.isBefore((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0);
      boolean boolean0 = range0.isEndedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0);
      boolean boolean0 = range0.isEndedBy((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm");
      boolean boolean0 = range0.isEndedBy(">~{f:w[rbE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer((-509));
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isStartedBy(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "O(Bk]v{r&JH8n\"-O", comparator0);
      boolean boolean0 = range0.isStartedBy((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null);
      boolean boolean0 = range0.isStartedBy("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("Qx#K", "Qx#K", comparator0);
      int int0 = range1.elementCompareTo("A");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm");
      boolean boolean0 = range0.isAfter((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm");
      int int0 = range0.elementCompareTo("A");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range<String> range0 = Range.is("Wj9[");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.is("", comparator0);
      boolean boolean0 = range1.containsRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0);
      Range<String> range1 = Range.between("fw", "r.Ngw'UzA");
      range0.isOverlappedBy(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0);
      boolean boolean0 = range0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(674).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer((-1698));
      // Undeclared exception!
      try { 
        Range.between(integer0, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=-1698, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.between((Object) null, (Object) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-416)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      Object object1 = range0.getMinimum();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer((-509));
      Range<Integer> range0 = Range.between(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(250).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      // Undeclared exception!
      try { 
        range1.toString("k(C-Yr9[%}:~>`v");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '}'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Integer> range0 = Range.is(integer0);
      Integer integer1 = new Integer(0);
      Range<Integer> range1 = Range.between(integer0, integer1);
      Range<Integer> range2 = range0.intersectionWith(range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range<String> range0 = Range.is("W]f3!");
      boolean boolean0 = range0.isNaturalOrdering();
      assertTrue(boolean0);
  }
}
