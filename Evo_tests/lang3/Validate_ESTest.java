/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 12:37:46 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatConversionException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.Stack;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.Validate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Validate_ESTest extends Validate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(3180);
      Integer integer1 = new Integer(0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(integer0, integer1, (Comparable<Integer>) integer0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween("mV/", "``B{lZ(`yPe'3^tf)14", (Comparable<String>) "mV/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value mV/ is not in the specified exclusive range of mV/ to ``B{lZ(`yPe'3^tf)14
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Validate.inclusiveBetween("", ";=", (Comparable<String>) ";=", " 8WV$XW_`9~C1", objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLException[] sQLExceptionArray1 = Validate.validIndex(sQLExceptionArray0, 0);
      assertSame(sQLExceptionArray1, sQLExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-2246));
      linkedHashSet0.add(integer0);
      HashSet<Integer> hashSet0 = Validate.validIndex((HashSet<Integer>) linkedHashSet0, 0);
      assertFalse(hashSet0.contains(0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      Object[] objectArray0 = Validate.notEmpty((Object[]) sQLDataExceptionArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, SQLException> hashMap0 = new HashMap<Integer, SQLException>();
      Integer integer0 = new Integer((-1681));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      hashMap0.put(integer0, sQLIntegrityConstraintViolationException0);
      HashMap<Integer, SQLException> hashMap1 = Validate.notEmpty(hashMap0);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoExceptionArray0[0];
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoExceptionArray0[1];
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[7] = sQLClientInfoExceptionArray0[1];
      SQLClientInfoException[] sQLClientInfoExceptionArray1 = Validate.noNullElements(sQLClientInfoExceptionArray0, "null", (Object[]) sQLClientInfoExceptionArray0);
      assertEquals(8, sQLClientInfoExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray1 = Validate.noNullElements(sQLNonTransientConnectionExceptionArray0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.validState(false, "", objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLInvalidAuthorizationSpecExceptionArray0, (-26), "@NvGYy{u@~h9.%P", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The validated collection contains null element at index: %d", "The validated array index is invalid: %d", intArray0, (Throwable) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      // Undeclared exception!
      try { 
        Validate.validIndex(batchUpdateExceptionArray0, (-1766), "The validated array index is invalid: %d", (Object[]) batchUpdateExceptionArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.sql.BatchUpdateException
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLNonTransientConnectionExceptionArray0, 0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.validIndex((Object[]) null, (-2262), "The validated collection is empty", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((SQLNonTransientException[]) null, 2147483623);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedList0, 2297, "]&~g,!o%9'gc~Ph3O", (Object[]) batchUpdateExceptionArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '9'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("#JL%C!NGC");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) sQLTimeoutException0;
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        Validate.validIndex(hashSet0, (-2736), "#JL%C!NGC", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != java.sql.SQLTimeoutException
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.validIndex((EnumSet<Locale.Category>) null, 0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      // Undeclared exception!
      try { 
        Validate.validIndex(hashSet0, (-2722));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection index is invalid: -2722
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1453);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) charBuffer0, 1453, "The validated array contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.nio.HeapCharBuffer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.validIndex((String) null, 0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) null, (-1844));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((SQLNonTransientConnectionException[]) null, "bq`M\"h)P;d!O", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bq`M\"h)P;d!O
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "1_uG.lITxWc%'{7*(#~", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      HashMap<Integer, SQLClientInfoException> hashMap0 = new HashMap<Integer, SQLClientInfoException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "The validated collection index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Object, DataTruncation> hashMap0 = new HashMap<Object, DataTruncation>();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<SQLDataException, SQLRecoverableException> hashMap0 = new HashMap<SQLDataException, SQLRecoverableException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayList0, "?/!XS5p4%9", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '9'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, "', has a length less than 2", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ', has a length less than 2
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        Validate.notBlank("", "The validated array index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null, "eah`>?", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // eah`>?
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((String[]) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLTransactionRollbackException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-8), false, true, (-1890), (-1890));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(dataTruncation0);
      dataTruncation0.initCause(sQLTransactionRollbackException0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      Validate.noNullElements(dataTruncation0, "The validated expression is false", objectArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLIntegrityConstraintViolationException) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PwO", "PwO", 5);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "PwO", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      Validate.noNullElements((SQLNonTransientException) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((Stack<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "\"xX6k _9$SeFpZ?*|i", "\"xX6k _9$SeFpZ?*|i", objectArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 15
         // \"xX6k _9$SeFpZ?*|i
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(343);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "The validated collection contains null element at index: %d";
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) charBuffer0, "Z2+T", "The validated collection contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) null, "gpW`K:!_ZF>Rn3_V<-+", "gpW`K:!_ZF>Rn3_V<-+", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "h*%+_~", "Jm?i#_\"V$;WhO^:iA", "lw{9\"$a1`G", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "&5uz{<tT~$v.ExxAo", "&5uz{<tT~$v.ExxAo");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // &5uz{<tT~$v.ExxAo
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) null, ".rLn.%od,/FU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(384);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) stringBuffer0, "#om/]o\"F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "The string %s does not match the pattern %s", 2901L);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "The validated object is null", 2901L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<SQLException> class1 = SQLException.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 'R';
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, "S{=%gBL;mrS#0~AE|", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.Character
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLException sQLException0 = new SQLException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLException0);
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(sQLSyntaxErrorException0, sQLSyntaxErrorException0, (Comparable<SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((CharBuffer) null, (CharBuffer) null, (Comparable<CharBuffer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.validIndex("sbc2iyErB^6qk", (-1008), (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.validIndex("", 2986, "VT.{OBg=&9!Zq|", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // VT.{OBg=&9!Zq|
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = Validate.validIndex("|", 0, "(\"9Z", objectArray0);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLSyntaxErrorExceptionArray0, (-1), "", (Object[]) sQLSyntaxErrorExceptionArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        Validate.validIndex(integerArray0, 70, "The value %s is not in the specified inclusive range of %s to %s", (Object[]) integerArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-8), false, true, (-1890), (-1890));
      Object[] objectArray0 = new Object[1];
      DataTruncation dataTruncation1 = Validate.noNullElements(dataTruncation0, "The validated expression is false", objectArray0);
      assertEquals("01004", dataTruncation1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      // Undeclared exception!
      try { 
        Validate.noNullElements(sQLClientInfoExceptionArray0, "null", (Object[]) sQLClientInfoExceptionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.notBlank("", "The validated array index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array index is invalid: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = Validate.notBlank("aHb>", "aHb>", objectArray0);
      assertEquals("aHb>", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = Validate.notEmpty("VHSm", "VHSm", objectArray0);
      assertEquals("VHSm", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty("", "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      SQLWarning[] sQLWarningArray1 = Validate.noNullElements(sQLWarningArray0, "", (Object[]) sQLWarningArray0);
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null, "Lv|[<", (Object[]) sQLWarningArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Lv|[<
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<SQLRecoverableException, DataTruncation>) null, "3K}zcEvUYjwj9kd)", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 3K}zcEvUYjwj9kd)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.notEmpty((ArrayList<String>) null, ";MWPp-V,~", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ;MWPp-V,~
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(sQLClientInfoExceptionArray0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.notEmpty((SQLSyntaxErrorException[]) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = Validate.notNull((Object) locale_Category0, "6xjb=H!~5sg", objectArray0);
      assertEquals(Locale.Category.FORMAT, object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Object object0 = Validate.notNull((Object) sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException0, object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<SQLException> class1 = SQLException.class;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, "S{=%gBL;mrS#0~AE|", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // S{=nullBL;mrS#0~AE|
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Validate.isAssignableFrom(class0, class0, "r&\"){9ZH\"(B", objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot assign a java.sql.SQLClientInfoException to a java.sql.BatchUpdateException
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Validate.isAssignableFrom(class0, class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0, "8.=u", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8.=u
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[5];
      Validate.isInstanceOf((Class<?>) class0, (Object) class0, "The validated collection contains null element at index: %d", objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.sql.SQLClientInfoException, actual: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf(class0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.lang.Integer, actual: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      Validate.isInstanceOf((Class<?>) class0, (Object) sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween("``B{lZ(`yPe'3^tf)14", "``B{lZ(`yPe'3^tf)14", (Comparable<String>) "mV/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value mV/ is not in the specified exclusive range of ``B{lZ(`yPe'3^tf)14 to ``B{lZ(`yPe'3^tf)14
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Validate.inclusiveBetween(locale_Category0, locale_Category0, (Comparable<Locale.Category>) locale_Category0, "ouc+)d|u$D@b-5!", objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer(759);
      Integer integer1 = new Integer(4);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(integer0, integer1, (Comparable<Integer>) integer1, "{P5|fyTN;R#Ae% -*^", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ' '
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = new Integer(2089);
      Integer integer1 = new Integer((-3466));
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(integer0, integer1, (Comparable<Integer>) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 2089 is not in the specified inclusive range of 2089 to -3466
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "jzbs4V", "*?9XJ3P}", "Rl2a", objectArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Rl2a
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Validate.matchesPattern((CharSequence) "~>AIXTbCk6", "~>AIXTbCk6", "8YGA0Mzbw9P", objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "~>AIXTbCk6", "The validated array is empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string ~>AIXTbCk6 does not match the pattern The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Validate.matchesPattern((CharSequence) "#JL%C!NGC", "#JL%C!NGC");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.validState(false, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Validate.validState(true, "A ", objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Validate.validState(true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Validate.validIndex("~>AIXTbCk6", 0);
      assertEquals("~>AIXTbCk6", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex("", (-483));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated character sequence index is invalid: -483
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      linkedList0.add(sQLIntegrityConstraintViolationException0);
      Object[] objectArray0 = new Object[1];
      LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = Validate.validIndex(linkedList0, 0, "wwOq}cU$+yEuJVt", objectArray0);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedList0, 0, "wwOq}cU$+yEuJVt", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // wwOq}cU$+yEuJVt
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedList0, (-835), (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLTimeoutExceptionArray0, 1353);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated array index is invalid: 1353
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLRecoverableException[] sQLRecoverableExceptionArray1 = Validate.validIndex(sQLRecoverableExceptionArray0, 0, "rI;:xh<M;w9^:w@2", objectArray0);
      assertSame(sQLRecoverableExceptionArray1, sQLRecoverableExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<Object>[] stackArray0 = (Stack<Object>[]) Array.newInstance(Stack.class, 6);
      Stack<Object> stack0 = new Stack<Object>();
      stackArray0[0] = stack0;
      stackArray0[1] = stack0;
      stackArray0[2] = stackArray0[0];
      stackArray0[3] = stack0;
      stackArray0[4] = stackArray0[1];
      stackArray0[5] = stack0;
      Stack<Object>[] stackArray1 = Validate.noNullElements(stackArray0);
      assertEquals(6, stackArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharSequence charSequence0 = Validate.notBlank((CharSequence) "jzbs4V");
      assertEquals("jzbs4V", charSequence0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.notBlank((String) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException("*?9XJ3P}", "I2<o sb", (-286), sQLTimeoutException0);
      hashMap0.put((DataTruncation) null, sQLDataException0);
      Object[] objectArray0 = new Object[0];
      HashMap<DataTruncation, SQLDataException> hashMap1 = Validate.notEmpty(hashMap0, "Rl2a", objectArray0);
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "Rl2a", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Rl2a
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      linkedList0.add((SQLException) sQLNonTransientException0);
      LinkedList<SQLException> linkedList1 = Validate.notEmpty(linkedList0);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((Vector<SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException>[] arrayListArray0 = (ArrayList<SQLFeatureNotSupportedException>[]) Array.newInstance(ArrayList.class, 0);
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayListArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category[] locale_CategoryArray1 = Validate.notEmpty(locale_CategoryArray0, "[5!yW9ithCki6mM{", (Object[]) locale_CategoryArray0);
      assertEquals(1, locale_CategoryArray1.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Validate.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "74xF@y_5Y[xNzj'|Hzq", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 74xF@y_5Y[xNzj'|Hzq
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Validate.isTrue(true, "aHb>", objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "", 488.274048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Validate.isTrue(true, "", 488.274048);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "Oo`%f `(r*V[eG%Q", (-7L));
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Validate.isTrue(true, "RIB_<,;s>2d!", 1164L);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<Object>[] stackArray0 = (Stack<Object>[]) Array.newInstance(Stack.class, 6);
      // Undeclared exception!
      try { 
        Validate.noNullElements(stackArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Validate.notEmpty("nW55u!");
      assertEquals("nW55u!", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Validate validate0 = new Validate();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("A#j2#<[P;*", "");
      SQLWarning sQLWarning1 = Validate.noNullElements(sQLWarning0);
      assertEquals("", sQLWarning1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashSet<Object>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((ArrayDeque<SQLSyntaxErrorException>) null, (-3429));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<SQLDataException, DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
