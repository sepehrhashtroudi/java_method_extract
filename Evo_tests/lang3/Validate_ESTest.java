/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:40:08 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatConversionException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.Validate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Validate_ESTest extends Validate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("The validated object is null", "The validated object is null");
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1943, 0).when(comparable0).compareTo(any());
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((Object) "c&>P/E", (Object) sQLTransientConnectionException0, comparable0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween("The validated array is empty", "?S00_,Bql{$", (Comparable<String>) "?S00_,Bql{$", "The validated array is empty", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(locale_FilteringMode0, locale_FilteringMode1, (Comparable<Locale.FilteringMode>) locale_FilteringMode1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value MAP_EXTENDED_RANGES is not in the specified exclusive range of AUTOSELECT_FILTERING to MAP_EXTENDED_RANGES
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(integer0, integer1, (Comparable<Integer>) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 0 is not in the specified exclusive range of 0 to 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Validate.inclusiveBetween("", "^QZBq#Nj+eZNBD&]!v", (Comparable<String>) "^QZBq#Nj+eZNBD&]!v", "H9?ha^o}Q*,8Hl", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        Validate.validIndex(linkedHashSet0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection index is invalid: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Validate.validIndex(stringArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated array index is invalid: 2
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Validate.validIndex("D0yCkn", 1);
      assertEquals("D0yCkn", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Object object0 = Validate.notNull((Object) sQLTransactionRollbackException0);
      assertSame(sQLTransactionRollbackException0, object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<SQLSyntaxErrorException, CharBuffer> hashMap0 = new HashMap<SQLSyntaxErrorException, CharBuffer>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("dFD6FZ", "The validated character sequence index is invalid: %d");
      CharBuffer charBuffer0 = CharBuffer.allocate(2241);
      hashMap0.putIfAbsent(sQLSyntaxErrorException0, charBuffer0);
      HashMap<SQLSyntaxErrorException, CharBuffer> hashMap1 = Validate.notEmpty(hashMap0);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.lang3.StringUtils");
      linkedHashSet0.add(sQLInvalidAuthorizationSpecException0);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = Validate.notEmpty((HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0);
      assertTrue(hashSet0.contains(sQLInvalidAuthorizationSpecException0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = Validate.noNullElements(integerArray0, "", (Object[]) integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Stack<SQLDataException>[] stackArray0 = (Stack<SQLDataException>[]) Array.newInstance(Stack.class, 9);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      stackArray0[0] = stack0;
      stackArray0[1] = stack0;
      stackArray0[2] = stackArray0[1];
      stackArray0[3] = stackArray0[1];
      stackArray0[4] = stackArray0[3];
      stackArray0[5] = stackArray0[3];
      stackArray0[6] = stackArray0[4];
      stackArray0[7] = stackArray0[3];
      stackArray0[8] = stackArray0[4];
      Stack<SQLDataException>[] stackArray1 = Validate.noNullElements(stackArray0);
      assertEquals(9, stackArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.validState(false, "mK%}Pk:9!", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '}'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.validState(false, "The value %s is not in the specified exclusive range of %s to %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLSyntaxErrorExceptionArray0, 41, "<]Sos;BhU%L,R", (Object[]) sQLSyntaxErrorExceptionArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'L'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      // Undeclared exception!
      try { 
        Validate.validIndex(clientInfoStatusArray0, 2508, "The validated array index is invalid: %d", (Object[]) clientInfoStatusArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.sql.ClientInfoStatus
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      // Undeclared exception!
      try { 
        Validate.validIndex(locale_FilteringModeArray0, 1212, (String) null, (Object[]) locale_FilteringModeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.validIndex((Integer[]) null, (-959), "gcNG", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashSet<SQLNonTransientException> hashSet0 = new HashSet<SQLNonTransientException>();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.validIndex(hashSet0, (-1018), "4S%=yFhY+?wI6", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '='
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 1444, (int[]) null);
      DataTruncation dataTruncation0 = new DataTruncation((-527), true, true, 2, (-1613), batchUpdateException0);
      dataTruncationArray0[0] = dataTruncation0;
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      // Undeclared exception!
      try { 
        Validate.validIndex(priorityQueue0, (-527), "The validated array contains null element at index: %d", (Object[]) dataTruncationArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.sql.DataTruncation
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayList0, (-2740), (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.validIndex((LinkedHashSet<SQLDataException>) null, 13, "%z[X~iD", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((LinkedList<SQLNonTransientException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.validIndex("#%?*bQP#<@*", 3137, "#%?*bQP#<@*", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '?'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.validIndex(charBuffer0, 2, "The value %s is not in the specified exclusive range of %s to %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "i%xg";
      // Undeclared exception!
      try { 
        Validate.validIndex("i%xg", (-1), "i%xg", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      // Undeclared exception!
      try { 
        Validate.validIndex((CharBuffer) null, 2748, "", (Object[]) locale_FilteringModeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, ",1,]-gc*", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ,1,]-gc*
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(batchUpdateExceptionArray0, (String) null, (Object[]) batchUpdateExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((SQLClientInfoException[]) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((SQLTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(sQLSyntaxErrorExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<CharBuffer, SQLFeatureNotSupportedException> hashMap0 = new HashMap<CharBuffer, SQLFeatureNotSupportedException>();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "(%U6mD(7U0o~er ", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'U'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(3);
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<String, ClientInfoStatus>) hashMap0, "The value %s is not in the specified exclusive range of %s to %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      HashMap<SQLException, SQLRecoverableException> hashMap0 = new HashMap<SQLException, SQLRecoverableException>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) hashSet0;
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "The validated array contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.util.HashSet
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<SQLIntegrityConstraintViolationException, SQLException>) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(vector0, "0mhZz%{Of", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '{'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayList0, "The string %s does not match the pattern %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) arrayList0;
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayList0, "The validated array contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.util.ArrayList
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayList0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((Collection<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.notEmpty("", "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.notBlank("", "YE1i1%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.notBlank("", "<9u#:$bW", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // <9u#:$bW
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLInvalidAuthorizationSpecException[]) null, "J0:`UasFb+}D$uaI", (Object[]) sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      // Undeclared exception!
      try { 
        Validate.noNullElements(sQLDataExceptionArray0, "a2;g*J%w9XrdLk4p", (Object[]) sQLDataExceptionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((ClientInfoStatus[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.lang3.StringUtils");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.lang3.StringUtils", sQLTransactionRollbackException0);
      // Undeclared exception!
      Validate.noNullElements(sQLDataException0, "e<VW", objectArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.noNullElements((DataTruncation) null, "d6BTO$\"dL:zb;( [T", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("S", "T", (-1));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("9N.+Q3:Z`bloP8F_", "org.apache.commons.lang3.ArrayUtils", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLTransientConnectionException0);
      // Undeclared exception!
      Validate.noNullElements(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLRecoverableException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "", "p{InCombiningDiacriticalMarks}+", ", Length: ", objectArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "Index: ", ":<H^>y8905OutM\u00002tU", "*ee3AEjiXM%b", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%b'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) null, "The validated array is empty", "The validated array is empty", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "", "@y^t]#1`x&", "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "6cG]>I{L|+BPpl", "6cG]>I{L|+BPpl");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 5
         // 6cG]>I{L|+BPpl
         //      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) null, "[yvF\"nqn*s7>Y]h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "'}Uk]v}\"Gil;qF:d}", "'}Uk]v}\"Gil;qF:d}");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "]\"dOWHD`#7}k%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "The validated collection contains null element at index: %d";
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "The validated collection contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "The validated state is false", 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "The validated array contains null element at index: %d", 1131.9751952046406);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.Double
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLWarning sQLWarning0 = new SQLWarning();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) sQLWarning0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(250);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(integer0, (Integer) null, (Comparable<Integer>) null, "-!@Qkj+L8`6tU96", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException0, (Comparable<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((String) null, (String) null, (Comparable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.validIndex("i%xg", (-1), "i%xg", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // inullg
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      enumSet0.add(locale_FilteringMode2);
      EnumSet<Locale.FilteringMode> enumSet1 = Validate.validIndex(enumSet0, 2, "", (Object[]) locale_FilteringModeArray0);
      assertSame(enumSet1, enumSet0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.validIndex(enumSet0, 916, "", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      Locale.FilteringMode[] locale_FilteringModeArray1 = Validate.validIndex(locale_FilteringModeArray0, 0, "The value %s is not in the specified exclusive range of %s to %s", (Object[]) locale_FilteringModeArray0);
      assertSame(locale_FilteringModeArray0, locale_FilteringModeArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLNonTransientConnectionExceptionArray0, (-2458), "", (Object[]) sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.lang3.StringUtils");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.lang3.StringUtils", sQLTransactionRollbackException0);
      SQLDataException sQLDataException1 = Validate.noNullElements(sQLDataException0, "e<VW", objectArray0);
      assertEquals("java.sql.SQLDataException: org.apache.commons.lang3.StringUtils", sQLDataException1.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutExceptionArray0[0];
      SQLTimeoutException[] sQLTimeoutExceptionArray1 = Validate.noNullElements(sQLTimeoutExceptionArray0, "@y^t]#1`x&", (Object[]) sQLTimeoutExceptionArray0);
      assertSame(sQLTimeoutExceptionArray0, sQLTimeoutExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharSequence charSequence0 = Validate.notBlank((CharSequence) "6cG]>I{L|+BPpl", "aF&2rPDM-,1;", (Object[]) null);
      assertEquals("6cG]>I{L|+BPpl", charSequence0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) charBuffer0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.notEmpty("", (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Validate.notEmpty("%z[X~iD", "", objectArray0);
      assertEquals("%z[X~iD", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<SQLDataException, SQLRecoverableException> hashMap0 = new HashMap<SQLDataException, SQLRecoverableException>();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<SQLNonTransientException, SQLClientInfoException>) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = Validate.notEmpty(integerArray0, "", (Object[]) integerArray0);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, "<]Sos;BhU%L,R", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'L'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.notNull(objectArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<SQLException> class1 = SQLException.class;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, ",z", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ,z
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[3];
      Validate.isAssignableFrom(class0, class0, "The validated collection is empty", objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot assign a java.lang.Integer to a java.nio.CharBuffer
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Validate.isAssignableFrom(class0, class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) linkedList0;
      Object object0 = Validate.notNull(objectArray0[0], "", objectArray0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf(class0, object0, "&{TrMW90/D1@:l5", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // &{TrMW90/D1@:l5
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[3];
      Validate.isInstanceOf((Class<?>) class0, (Object) class0, "org.apache.commons.lang3.StringUtils", objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf(class0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.lang.String, actual: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.util.Locale$FilteringMode, actual: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLTimeoutException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      Class<Object> class0 = Object.class;
      Validate.isInstanceOf((Class<?>) class0, (Object) sQLDataExceptionArray0[0]);
      assertEquals(4, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween("o;|", "1c)5Rh`Ek\"ec", (Comparable<String>) "o;|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value o;| is not in the specified inclusive range of o;| to 1c)5Rh`Ek\"ec
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Validate.inclusiveBetween(locale_FilteringMode0, locale_FilteringMode0, (Comparable<Locale.FilteringMode>) locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween("%z[X~iD", "", (Comparable<String>) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value  is not in the specified inclusive range of %z[X~iD to 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "%l/:M!w6lC%KQ+NIc=", "S", "%l/:M!w6lC%KQNIc=", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'l'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      Validate.matchesPattern((CharSequence) "", "", "", (Object[]) sQLFeatureNotSupportedExceptionArray0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "Xa}%)9~bh", "V`Y}_E$M1Q&?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string Xa}%)9~bh does not match the pattern V`Y}_E$M1Q&?
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Validate.matchesPattern((CharSequence) "", "");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      // Undeclared exception!
      try { 
        Validate.validState(false, "++^@19+P", (Object[]) sQLTransientExceptionArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // ++^@19+P
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object[] objectArray0 = new Object[13];
      Validate.validState(true, "", objectArray0);
      assertEquals(13, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Validate.validState(true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      // Undeclared exception!
      try { 
        Validate.validIndex("", 6, (String) null, (Object[]) sQLIntegrityConstraintViolationExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Validate.validIndex("6cG]>I{L|+BPpl", 0, "6cG]>I{L|+BPpl", (Object[]) null);
      assertEquals("6cG]>I{L|+BPpl", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(".F\"K`NJ:");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLIntegrityConstraintViolationException0);
      linkedHashSet0.add(sQLFeatureNotSupportedException0);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = Validate.validIndex((HashSet<SQLFeatureNotSupportedException>) linkedHashSet0, 0);
      assertTrue(hashSet0.contains(sQLFeatureNotSupportedException0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation[] dataTruncationArray1 = Validate.validIndex(dataTruncationArray0, 0);
      assertEquals(2, dataTruncationArray1.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      // Undeclared exception!
      try { 
        Validate.noNullElements(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        Validate.noNullElements(objectArray0, "e<VW", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // e<VW
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      SQLNonTransientException[] sQLNonTransientExceptionArray1 = Validate.noNullElements(sQLNonTransientExceptionArray0);
      assertEquals(0, sQLNonTransientExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.notBlank((CharBuffer) null, "iC<HPiM-e", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iC<HPiM-e
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null, ">+3y,8=BE7tl", (Object[]) dataTruncationArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // >+3y,8=BE7tl
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<SQLIntegrityConstraintViolationException, DataTruncation> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("S3uV/*/:o.BVZoF\"", "S3uV/*/:o.BVZoF\"");
      hashMap0.put(sQLIntegrityConstraintViolationException0, (DataTruncation) null);
      HashMap<SQLIntegrityConstraintViolationException, DataTruncation> hashMap1 = Validate.notEmpty(hashMap0, "S3uV/*/:o.BVZoF\"", (Object[]) stringArray0);
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<String, SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      EnumSet<Locale.FilteringMode> enumSet1 = Validate.notEmpty(enumSet0, "6cG]>I{L|+BPpl", (Object[]) locale_FilteringModeArray0);
      assertEquals(1, enumSet1.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.notEmpty((ArrayList<DataTruncation>) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(batchUpdateExceptionArray0, "\" E7sgku#cnnBttM", (Object[]) batchUpdateExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \" E7sgku#cnnBttM
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty((ClientInfoStatus[]) null, "%z[X~iD", (Object[]) sQLNonTransientExceptionArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Validate.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "The validated collection contains null element at index: %d", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection contains null element at index: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Validate.isTrue(true, "W>^;`wEmj@H;Ur", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "Cannot assign a %s to a %s", 1499.8341970085498);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Validate.isTrue(true, "", 199.739098175266);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "%l/:M!w6lC%KQ+NIc=", (-1L));
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'l'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Validate.isTrue(true, "The validated expression is false", (-729L));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[9];
      // Undeclared exception!
      try { 
        Validate.noNullElements(sQLWarningArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = Validate.notBlank("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = Validate.notEmpty("%l/:M!w6lC%KQ+NIc=");
      assertEquals("%l/:M!w6lC%KQ+NIc=", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((SQLTransientException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode[] locale_FilteringModeArray1 = Validate.notEmpty(locale_FilteringModeArray0);
      assertSame(locale_FilteringModeArray1, locale_FilteringModeArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Validate validate0 = new Validate();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Validate.validIndex(charBuffer0, (-1243));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated character sequence index is invalid: -1243
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = Validate.noNullElements(sQLNonTransientConnectionException0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<SQLSyntaxErrorException, CharBuffer> hashMap0 = new HashMap<SQLSyntaxErrorException, CharBuffer>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
