/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 13:14:54 GMT 2022
 */

package org.apache.commons.lang3.concurrent;

import org.evosuite.shaded.org.mockito.MockSettings;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentException;
import org.apache.commons.lang3.concurrent.ConcurrentInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentRuntimeException;
import org.apache.commons.lang3.concurrent.ConcurrentUtils;
import org.apache.commons.lang3.concurrent.ConstantInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentUtils_ESTest extends ConcurrentUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException0);
      concurrentUtils_ConstantFuture0.isCancelled();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      ConcurrentUtils.constantFuture(integer0);
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("&Ai%LuR{*j s)B");
      ConstantInitializer<RuntimeException> constantInitializer0 = new ConstantInitializer<RuntimeException>(mockRuntimeException0);
      RuntimeException runtimeException0 = ConcurrentUtils.initialize((ConcurrentInitializer<RuntimeException>) constantInitializer0);
      constantInitializer0.equals(runtimeException0);
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      int int0 = 372;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(372);
      scheduledThreadPoolExecutor0.shutdownNow();
      scheduledThreadPoolExecutor0.shutdownNow();
      mockRuntimeException0.getLocalizedMessage();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initialize((ConcurrentInitializer<String>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
      Object object0 = new Object();
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>(object0);
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Object, Object>) concurrentHashMap0, (Object) concurrentHashMap0, (ConcurrentInitializer<Object>) constantInitializer0);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>("9");
      concurrentUtils_ConstantFuture0.isCancelled();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Object> forkJoinTask0 = forkJoinPool0.submit(callable0);
      ConcurrentUtils.ConstantFuture<ForkJoinTask<Object>> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<ForkJoinTask<Object>>(forkJoinTask0);
      concurrentUtils_ConstantFuture1.isCancelled();
      MockError mockError0 = new MockError("{Afh>dm\"{E8?bj!/Q&");
      MockError mockError1 = new MockError(mockError0);
      MockThrowable mockThrowable0 = new MockThrowable(mockError1);
      ExecutionException executionException0 = new ExecutionException("g", mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // g
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>((String) null);
      concurrentUtils_ConstantFuture0.isCancelled();
      TreeMap<Error, Callable<RuntimeException>> treeMap0 = new TreeMap<Error, Callable<RuntimeException>>();
      ConcurrentSkipListMap<Error, Callable<RuntimeException>> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Callable<RuntimeException>>((SortedMap<Error, ? extends Callable<RuntimeException>>) treeMap0);
      MockError mockError0 = new MockError((String) null);
      Callable<Callable<RuntimeException>> callable0 = (Callable<Callable<RuntimeException>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<RuntimeException>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<RuntimeException>>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Callable<RuntimeException>>) concurrentSkipListMap0, (Error) mockError0, (ConcurrentInitializer<Callable<RuntimeException>>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getStackTrace();
      mockRuntimeException0.toString();
      ExecutionException executionException0 = new ExecutionException("oH'SBX|{i", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentHashMap<Callable<RuntimeException>, Callable<RuntimeException>> concurrentHashMap0 = new ConcurrentHashMap<Callable<RuntimeException>, Callable<RuntimeException>>();
      Callable<Callable<RuntimeException>> callable0 = (Callable<Callable<RuntimeException>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<RuntimeException>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<RuntimeException>>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Callable<RuntimeException>, Callable<RuntimeException>>) concurrentHashMap0, (Callable<RuntimeException>) null, (ConcurrentInitializer<Callable<RuntimeException>>) callableBackgroundInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockError mockError0 = new MockError("org.apache.commons.lang3.concurrent.ConcurrentUtils");
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException("eUH_", (Throwable) null);
      ConcurrentUtils.extractCause(executionException0);
      Callable<RuntimeException> callable0 = (Callable<RuntimeException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      scheduledThreadPoolExecutor0.setRejectedExecutionHandler(threadPoolExecutor_AbortPolicy0);
      CallableBackgroundInitializer<RuntimeException> callableBackgroundInitializer0 = new CallableBackgroundInitializer<RuntimeException>(callable0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<RuntimeException>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentInitializer<String> concurrentInitializer0 = null;
      ConcurrentUtils.initialize((ConcurrentInitializer<String>) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError(mockRuntimeException0);
      ExecutionException executionException0 = new ExecutionException((String) null, mockError0);
      mockRuntimeException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("#'>2Db", "#'>2Db", "#'>2Db", 2);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("#'>2Db", "?", "#'>2Db", 2);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("?", "Not a checked exception: ", (String) null, 2);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("?", "kzF", "kzF", 2);
      stackTraceElementArray0[3] = stackTraceElement3;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("#'>2Db", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError(mockThrowable0);
      MockError mockError1 = new MockError("ConstantInitializer@%d [ object = %s ]", mockError0);
      ExecutionException executionException0 = new ExecutionException("ConstantInitializer@%d [ object = %s ]", mockError1);
      executionException0.printStackTrace();
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException();
      mockRuntimeException0.addSuppressed(mockRuntimeException1);
      MockError mockError0 = new MockError("", mockRuntimeException0);
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError0);
      ConcurrentUtils.initialize((ConcurrentInitializer<Error>) constantInitializer0);
      ConcurrentUtils.constantFuture("");
      ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
      MockRuntimeException mockRuntimeException2 = new MockRuntimeException();
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Object, Object>) concurrentHashMap0, (Object) "", (Object) mockRuntimeException2);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockRuntimeException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentHashMap<String, Integer> concurrentHashMap0 = new ConcurrentHashMap<String, Integer>();
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      concurrentHashMap0.compute("6", biFunction0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<String, Integer>) concurrentHashMap0, "6", (ConcurrentInitializer<Integer>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Callable<String>>) null);
      String string0 = "org.apache.commons.lang3.concurrent.ConcurrentException";
      MockError mockError0 = new MockError("org.apache.commons.lang3.concurrent.ConcurrentException");
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockError mockError0 = new MockError("Wrapped ThreadFactory must not be null!", (Throwable) null);
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      ExecutionException executionException0 = new ExecutionException("org.apache.commons.lang3.concurrent.ConcurrentUtils", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 833;
      Integer integer0 = new Integer(833);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      concurrentUtils_ConstantFuture0.get();
      MockError mockError0 = new MockError();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("6y7;<muZ&(Ogu", "6y7;<muZ&(Ogu", "6y7;<muZ&(Ogu", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("6y7;<muZ&(Ogu", "", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      executionException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentUtils.constantFuture((RuntimeException) null);
      ConcurrentSkipListMap<Object, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Delayed>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      // Undeclared exception!
      try { 
        ConcurrentUtils.putIfAbsent((ConcurrentMap<Object, Delayed>) concurrentSkipListMap0, (Object) null, (Delayed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      long long0 = 2524L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      MockError mockError1 = (MockError)concurrentUtils_ConstantFuture0.get(2524L, timeUnit0);
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<String>("iJq--[xO");
      ExecutionException executionException0 = new ExecutionException("u9>[kIcZO/<", mockError1);
      executionException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      mockThrowable0.getLocalizedMessage();
      executionException0.getLocalizedMessage();
      ConcurrentRuntimeException concurrentRuntimeException0 = ConcurrentUtils.extractCauseUnchecked(executionException0);
      assertNotNull(concurrentRuntimeException0);
      
      Integer integer0 = new Integer(4378);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      boolean boolean0 = concurrentUtils_ConstantFuture0.cancel(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ConcurrentUtils.checkedException(mockThrowable0);
      Integer integer0 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Integer integer1 = concurrentUtils_ConstantFuture0.get(0L, timeUnit0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Object>();
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>((Object) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<String, Object>) concurrentSkipListMap0, (String) null, (ConcurrentInitializer<Object>) constantInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockError mockError0 = new MockError("");
      MockError mockError1 = new MockError(mockError0);
      MockThrowable mockThrowable0 = new MockThrowable("`)ytTF''", mockError1);
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: `)ytTF''
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockError mockError0 = new MockError();
      ExecutionException executionException0 = new ExecutionException("", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockError mockError0 = new MockError((Throwable) null);
      ExecutionException executionException0 = new ExecutionException("@", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Callable<RuntimeException> callable1 = (Callable<RuntimeException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<RuntimeException> callableBackgroundInitializer0 = new CallableBackgroundInitializer<RuntimeException>(callable1);
      callableBackgroundInitializer0.getExternalExecutor();
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Delayed>(callable0, (ExecutorService) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initialize((ConcurrentInitializer<Delayed>) callableBackgroundInitializer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", mockThrowable0);
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>("jCx1#bM]f`3");
      concurrentUtils_ConstantFuture0.cancel(false);
      Integer integer0 = new Integer(0);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      concurrentUtils_ConstantFuture1.get((long) 0, timeUnit0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.toString();
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockRuntimeException0);
      ExecutionException executionException0 = new ExecutionException("", mockRuntimeException1);
      mockRuntimeException0.addSuppressed(executionException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentSkipListMap0.forEach(biConsumer0);
      MockError mockError0 = new MockError();
      concurrentSkipListMap0.keySet();
      MockError mockError1 = new MockError(mockError0);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) mockError1, (ConcurrentInitializer<Error>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "E|\\o0fXM";
      String string1 = "h~5IR/ME$";
      MockError mockError0 = new MockError("");
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      ConcurrentException concurrentException0 = ConcurrentUtils.extractCause(executionException0);
      ConcurrentUtils.extractCause(executionException0);
      ConcurrentRuntimeException concurrentRuntimeException0 = ConcurrentUtils.extractCauseUnchecked(executionException0);
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>(concurrentRuntimeException0);
      mockThrowable0.getStackTrace();
      concurrentUtils_ConstantFuture0.cancel(false);
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>(concurrentException0);
      ConcurrentSkipListMap<Object, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Error>();
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Object, Error>) concurrentSkipListMap0, (Object) concurrentRuntimeException0, (ConcurrentInitializer<Error>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Throwable throwable0 = null;
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(",XZ=(1L<KQkdX");
      ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException0);
      concurrentUtils_ConstantFuture0.isDone();
      mockRuntimeException0.getLocalizedMessage();
      ExecutionException executionException0 = new ExecutionException("", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("ermaiz=qsc\" x~t@cO8", "", "", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("P}~gMhU)AT?4,_O5!", "ermaiz=qsc\" x~t@cO8", "", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "wUkdA39Kx@", "", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockRuntimeException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConcurrentException concurrentException0 = ConcurrentUtils.extractCause((ExecutionException) null);
      assertNull(concurrentException0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);
      boolean boolean0 = concurrentUtils_ConstantFuture0.isCancelled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExecutionException executionException0 = new ExecutionException("V+$Sma", (Throwable) null);
      ConcurrentUtils.handleCause(executionException0);
      ConcurrentUtils.handleCauseUnchecked(executionException0);
      ConcurrentUtils.handleCause(executionException0);
      assertEquals("V+$Sma", executionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException("org.apache.commons.lang3.concurrent.LazyInitializer", mockThrowable0);
      mockThrowable0.printStackTrace();
      ConcurrentException concurrentException0 = ConcurrentUtils.extractCause(executionException0);
      ExecutionException executionException1 = new ExecutionException(concurrentException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      int int0 = 0;
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.lang3.concurrent.LazyInitializer", "", "org.apache.commons.lang3.concurrent.LazyInitializer", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      int int1 = (-2062);
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", (-2062));
      stackTraceElementArray0[1] = stackTraceElement1;
      mockThrowable0.setOriginForDelegate(stackTraceElement1);
      executionException0.setStackTrace(stackTraceElementArray0);
      mockThrowable0.printStackTrace();
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.commons.lang3.concurrent.LazyInitializer
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      forkJoinPool0.getPoolSize();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0, forkJoinPool0);
      callableBackgroundInitializer0.setExternalExecutor(forkJoinPool0);
      callableBackgroundInitializer0.setExternalExecutor(forkJoinPool0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Integer>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>();
      ConstantInitializer<String> constantInitializer0 = new ConstantInitializer<String>("");
      ConcurrentUtils.createIfAbsent((ConcurrentMap<String, String>) concurrentSkipListMap0, "", (ConcurrentInitializer<String>) constantInitializer0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>((Integer) null);
      boolean boolean0 = concurrentUtils_ConstantFuture0.cancel(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockError mockError0 = new MockError("rR+m?6&)VD'");
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.isDone();
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<String>("rR+m?6&)VD'");
      concurrentUtils_ConstantFuture1.get();
      boolean boolean0 = concurrentUtils_ConstantFuture0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("No child initializer with name ");
      ExecutionException executionException0 = new ExecutionException(mockRuntimeException0);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("No child initializer with name ", executionException0);
      ConstantInitializer<RuntimeException> constantInitializer0 = new ConstantInitializer<RuntimeException>(mockRuntimeException1);
      constantInitializer0.equals(mockRuntimeException0);
      constantInitializer0.toString();
      constantInitializer0.toString();
      constantInitializer0.equals("No child initializer with name ");
      constantInitializer0.toString();
      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<RuntimeException>) constantInitializer0);
      ExecutionException executionException1 = new ExecutionException(mockRuntimeException1);
      executionException1.getSuppressed();
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>((Object) null);
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>((String) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      concurrentUtils_ConstantFuture0.get(0L, timeUnit0);
      constantInitializer0.equals((Object) null);
      Object object0 = ConcurrentUtils.initialize((ConcurrentInitializer<Object>) constantInitializer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConcurrentHashMap<Error, Object> concurrentHashMap0 = new ConcurrentHashMap<Error, Object>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      MockError mockError0 = new MockError("~CNC)d\"$hOgk]rWm", mockRuntimeException0);
      MockError mockError1 = new MockError("~CNC)d\"$hOgk]rWm", mockRuntimeException0);
      Object object0 = ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, Object>) concurrentHashMap0, (Error) mockError0, (Object) mockError1);
      assertSame(object0, mockError1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>("LGh}#[z>CY");
      String string0 = "B";
      ExecutionException executionException0 = new ExecutionException("B", (Throwable) null);
      executionException0.printStackTrace();
      ConcurrentUtils.extractCause(executionException0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Callable<RuntimeException> callable0 = (Callable<RuntimeException>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ConcurrentUtils.constantFuture(callable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Throwable throwable0 = mockRuntimeException0.fillInStackTrace();
      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(mockRuntimeException0);
      mockRuntimeException0.getMessage();
      // Undeclared exception!
      try { 
        mockRuntimeException0.addSuppressed(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
      concurrentHashMap0.mappingCount();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Object, Object>) concurrentHashMap0, (Object) mockRuntimeException0, (ConcurrentInitializer<Object>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>("|vLSfJ0^&t?");
      concurrentUtils_ConstantFuture0.get();
      MockThrowable mockThrowable0 = new MockThrowable("");
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "tI~", (String) null, 1);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      ExecutionException executionException0 = new ExecutionException("|vLSfJ0^&t?", mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // |vLSfJ0^&t?
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockThrowable mockThrowable1 = new MockThrowable("org.apache.commons.lang3.concurrent.ConcurrentUtils", mockThrowable0);
      ExecutionException executionException0 = new ExecutionException(mockThrowable1);
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.commons.lang3.concurrent.ConcurrentUtils
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, Error>) null, (Error) mockError0, (Error) mockError0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0, (ExecutorService) null);
      Error error0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Error>) null, (RuntimeException) mockRuntimeException0, (ConcurrentInitializer<Error>) callableBackgroundInitializer0);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, (MockSettings) new ViolatedAssumptionAnswer());
      ConcurrentUtils.ConstantFuture<Callable<String>> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Callable<String>>(callable0);
      ConcurrentUtils.extractCauseUnchecked((ExecutionException) null);
      ConcurrentHashMap<ForkJoinTask<String>, Object> concurrentHashMap0 = new ConcurrentHashMap<ForkJoinTask<String>, Object>();
      Callable<String> callable1 = (Callable<String>) mock(Callable.class, (MockSettings) new ViolatedAssumptionAnswer());
      ForkJoinTask<String> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends String>) callable1);
      forkJoinTask0.isCancelled();
      int int0 = 1465;
      Integer integer0 = new Integer(1465);
      concurrentHashMap0.remove((Object) concurrentUtils_ConstantFuture0, (Object) integer0);
      ConcurrentInitializer<Object> concurrentInitializer0 = null;
      ConcurrentUtils.createIfAbsent((ConcurrentMap<ForkJoinTask<String>, Object>) concurrentHashMap0, forkJoinTask0, (ConcurrentInitializer<Object>) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }
}
