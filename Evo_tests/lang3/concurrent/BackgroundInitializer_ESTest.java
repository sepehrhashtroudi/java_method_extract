/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 13:09:21 GMT 2022
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BackgroundInitializer_ESTest extends BackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(56, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      Callable<MockThread> callable0 = (Callable<MockThread>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<MockThread> callableBackgroundInitializer0 = new CallableBackgroundInitializer<MockThread>(callable0);
      callableBackgroundInitializer0.getExternalExecutor();
      callableBackgroundInitializer0.initialize();
      Callable<Delayed> callable1 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Delayed>(callable1, (ExecutorService) null);
      callableBackgroundInitializer1.getActiveExecutor();
      Callable<Integer> callable2 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Integer>(callable2, (ExecutorService) null);
      multiBackgroundInitializer0.addInitializer("", callableBackgroundInitializer2);
      multiBackgroundInitializer0.getTaskCount();
      Callable<Object> callable3 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable3).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer3 = new CallableBackgroundInitializer<Object>(callable3);
      callableBackgroundInitializer1.initialize();
      callableBackgroundInitializer3.initialize();
      callableBackgroundInitializer3.start();
      Callable<String> callable4 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable4).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer4 = new CallableBackgroundInitializer<String>(callable4, (ExecutorService) null);
      callableBackgroundInitializer4.start();
      Callable<ForkJoinTask<Delayed>> callable5 = (Callable<ForkJoinTask<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable5).call();
      CallableBackgroundInitializer<ForkJoinTask<Delayed>> callableBackgroundInitializer5 = new CallableBackgroundInitializer<ForkJoinTask<Delayed>>(callable5);
      callableBackgroundInitializer5.initialize();
      ForkJoinPool forkJoinPool1 = new ForkJoinPool();
      callableBackgroundInitializer1.setExternalExecutor(forkJoinPool1);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer4.setExternalExecutor((ExecutorService) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0);
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(481, threadFactory0);
      callableBackgroundInitializer0.setExternalExecutor(scheduledThreadPoolExecutor0);
      String string0 = "&MArzs";
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      scheduledThreadPoolExecutor0.getRejectedExecutionHandler();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0, scheduledThreadPoolExecutor0);
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.getExternalExecutor();
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable1).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1, scheduledThreadPoolExecutor0);
      callableBackgroundInitializer1.initialize();
      callableBackgroundInitializer1.initialize();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0, (ExecutorService) null);
      ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      multiBackgroundInitializer0.start();
      multiBackgroundInitializer0.initialize();
      Callable<Callable<Callable<String>>> callable0 = (Callable<Callable<Callable<String>>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ExecutorService executorService0 = null;
      multiBackgroundInitializer0.get();
      CallableBackgroundInitializer<Callable<Callable<String>>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Callable<String>>>(callable0, (ExecutorService) null);
      callableBackgroundInitializer0.getTaskCount();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.isStarted();
      Callable<Callable<String>> callable1 = (Callable<Callable<String>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Callable<String>> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Callable<String>>(callable1);
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer1.get();
      ExecutorService executorService0 = null;
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer((ExecutorService) null);
      multiBackgroundInitializer0.initialize();
      CallableBackgroundInitializer<String> callableBackgroundInitializer2 = null;
      try {
        callableBackgroundInitializer2 = new CallableBackgroundInitializer<String>((Callable<String>) null, (ExecutorService) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.CallableBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.getTaskCount();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getActiveExecutor();
      assertTrue(callableBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer((ExecutorService) null);
      multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer0.initialize();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>((Callable<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.CallableBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      CallableBackgroundInitializer<Callable<String>> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<String>>((Callable<Callable<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.CallableBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0, (ExecutorService) null);
      boolean boolean0 = callableBackgroundInitializer0.isStarted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getExternalExecutor();
      callableBackgroundInitializer0.getFuture();
      Callable<Callable<String>> callable1 = (Callable<Callable<String>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Callable<String>> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Callable<String>>(callable1);
      callableBackgroundInitializer1.setExternalExecutor((ExecutorService) null);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer1.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      callableBackgroundInitializer0.getTaskCount();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1507);
      MockThread mockThread0 = new MockThread("");
      MockThread.interrupted();
      MockThread mockThread1 = new MockThread(mockThread0, "");
      mockThread1.getStackTrace();
      MockThread.dumpStack();
      forkJoinPool0.execute((Runnable) mockThread1);
      forkJoinPool0.isTerminated();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.getFuture();
      callableBackgroundInitializer0.getFuture();
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1, forkJoinPool0);
      forkJoinPool0.getAsyncMode();
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer1.getTaskCount();
      ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.setExternalExecutor(forkJoinPool0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        forkJoinPool0.submit((Callable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinTask$AdaptedCallable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1), 1589, (-1), timeUnit0, priorityBlockingQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
}
