/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 13:05:54 GMT 2022
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.TimedSemaphore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimedSemaphore_ESTest extends TimedSemaphore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1465L, timeUnit0, (-2259));
      timedSemaphore0.setLimit((-2259));
      timedSemaphore0.acquire();
      timedSemaphore0.getLimit();
      timedSemaphore0.acquire();
      timedSemaphore0.setLimit((-6103));
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.startTimer();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.getLastAcquiresPerPeriod();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1932L, timeUnit0, 0);
      timedSemaphore0.getLimit();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 0);
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit((-627));
      timedSemaphore0.endOfPeriod();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardOldestPolicy0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      int int0 = 354;
      scheduledThreadPoolExecutor0.getLargestPoolSize();
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, (-1L), timeUnit0, 354);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(0L, timeUnit0, (-4507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null, (Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1868, threadFactory0);
      scheduledThreadPoolExecutor0.toString();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1868, timeUnit0, 2841);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit(586);
      timedSemaphore0.startTimer();
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      scheduledThreadPoolExecutor0.getQueue();
      timedSemaphore0.getLimit();
      timedSemaphore0.setLimit(2841);
      timedSemaphore0.startTimer();
      timedSemaphore0.getUnit();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.startTimer();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      int int0 = 0;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1758L, timeUnit0, 0);
      timedSemaphore0.acquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.shutdown();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.setLimit(0);
      timedSemaphore0.setLimit(0);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getPeriod();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.getPeriod();
      timedSemaphore0.isShutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@124da254 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@6583e1f2[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(69L, timeUnit0, (-1629));
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit((-1629));
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      int int0 = TimedSemaphore.NO_LIMIT;
      timedSemaphore0.startTimer();
      timedSemaphore0.getLimit();
      timedSemaphore0.startTimer();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.getLimit();
      timedSemaphore0.isShutdown();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.getLastAcquiresPerPeriod();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(3996L, timeUnit0, (-3253));
      timedSemaphore0.shutdown();
      timedSemaphore0.getPeriod();
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.shutdown();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.isShutdown();
      timedSemaphore0.getLimit();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1202L, timeUnit0, 3462);
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getPeriod();
      timedSemaphore0.isShutdown();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1, timeUnit0, 1);
      int int1 = (-1315);
      timedSemaphore0.shutdown();
      scheduledThreadPoolExecutor0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@41229a6e rejected from java.util.concurrent.ScheduledThreadPoolExecutor@723a3fbe[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 1);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit(1);
      timedSemaphore0.getUnit();
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2105);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 2105, timeUnit0, 2105);
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertNotNull(timedSemaphore0);
      assertEquals(TimeUnit.DAYS, timedSemaphore0.getUnit());
      assertFalse(timedSemaphore0.isShutdown());
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(2105, timedSemaphore0.getLimit());
      assertEquals(2105, timedSemaphore0.getAvailablePermits());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(2105L, timedSemaphore0.getPeriod());
      
      timedSemaphore0.acquire();
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(TimeUnit.DAYS, timedSemaphore0.getUnit());
      assertFalse(timedSemaphore0.isShutdown());
      assertEquals(1, timedSemaphore0.getAcquireCount());
      assertEquals(2105, timedSemaphore0.getLimit());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(2105L, timedSemaphore0.getPeriod());
      assertEquals(2104, timedSemaphore0.getAvailablePermits());
      
      timedSemaphore0.endOfPeriod();
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(TimeUnit.DAYS, timedSemaphore0.getUnit());
      assertFalse(timedSemaphore0.isShutdown());
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(2105, timedSemaphore0.getLimit());
      assertEquals(2105, timedSemaphore0.getAvailablePermits());
      assertEquals(1.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(2105L, timedSemaphore0.getPeriod());
      assertEquals(1, timedSemaphore0.getLastAcquiresPerPeriod());
      
      timedSemaphore0.shutdown();
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(TimeUnit.DAYS, timedSemaphore0.getUnit());
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(2105, timedSemaphore0.getLimit());
      assertEquals(2105, timedSemaphore0.getAvailablePermits());
      assertEquals(1.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(2105L, timedSemaphore0.getPeriod());
      assertTrue(timedSemaphore0.isShutdown());
      assertEquals(1, timedSemaphore0.getLastAcquiresPerPeriod());
      
      TimeUnit timeUnit1 = timedSemaphore0.getUnit();
      assertSame(timeUnit0, timeUnit1);
      assertSame(timeUnit1, timeUnit0);
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(TimeUnit.DAYS, timedSemaphore0.getUnit());
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(2105, timedSemaphore0.getLimit());
      assertEquals(2105, timedSemaphore0.getAvailablePermits());
      assertEquals(1.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(2105L, timedSemaphore0.getPeriod());
      assertTrue(timedSemaphore0.isShutdown());
      assertEquals(1, timedSemaphore0.getLastAcquiresPerPeriod());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 619);
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertNotNull(timedSemaphore0);
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(619, timedSemaphore0.getAvailablePermits());
      assertEquals(619, timedSemaphore0.getLimit());
      assertEquals(TimeUnit.MINUTES, timedSemaphore0.getUnit());
      assertFalse(timedSemaphore0.isShutdown());
      assertEquals(1L, timedSemaphore0.getPeriod());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      
      timedSemaphore0.acquire();
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(1, timedSemaphore0.getAcquireCount());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(618, timedSemaphore0.getAvailablePermits());
      assertEquals(619, timedSemaphore0.getLimit());
      assertEquals(TimeUnit.MINUTES, timedSemaphore0.getUnit());
      assertFalse(timedSemaphore0.isShutdown());
      assertEquals(1L, timedSemaphore0.getPeriod());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      
      TimeUnit timeUnit1 = timedSemaphore0.getUnit();
      assertSame(timeUnit0, timeUnit1);
      assertSame(timeUnit1, timeUnit0);
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(1, timedSemaphore0.getAcquireCount());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(618, timedSemaphore0.getAvailablePermits());
      assertEquals(619, timedSemaphore0.getLimit());
      assertEquals(TimeUnit.MINUTES, timedSemaphore0.getUnit());
      assertFalse(timedSemaphore0.isShutdown());
      assertEquals(1L, timedSemaphore0.getPeriod());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(73, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 0L, timeUnit0, 73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      int int0 = 0;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(0L, timeUnit0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore((-698L), timeUnit0, 2652);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1571L, timeUnit0, 0);
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertNotNull(timedSemaphore0);
      assertEquals(0, timedSemaphore0.getAvailablePermits());
      assertEquals(TimeUnit.MICROSECONDS, timedSemaphore0.getUnit());
      assertFalse(timedSemaphore0.isShutdown());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(0, timedSemaphore0.getLimit());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      assertEquals(1571L, timedSemaphore0.getPeriod());
      
      timedSemaphore0.shutdown();
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(0, timedSemaphore0.getAvailablePermits());
      assertEquals(TimeUnit.MICROSECONDS, timedSemaphore0.getUnit());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(0, timedSemaphore0.getLimit());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      assertTrue(timedSemaphore0.isShutdown());
      assertEquals(1571L, timedSemaphore0.getPeriod());
      
      double double0 = timedSemaphore0.getAverageCallsPerPeriod();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(0, timedSemaphore0.getAvailablePermits());
      assertEquals(TimeUnit.MICROSECONDS, timedSemaphore0.getUnit());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(0, timedSemaphore0.getLimit());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      assertTrue(timedSemaphore0.isShutdown());
      assertEquals(1571L, timedSemaphore0.getPeriod());
      
      boolean boolean0 = timedSemaphore0.isShutdown();
      assertTrue(boolean0);
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(0, timedSemaphore0.getAvailablePermits());
      assertEquals(TimeUnit.MICROSECONDS, timedSemaphore0.getUnit());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(0, timedSemaphore0.getLimit());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      assertTrue(timedSemaphore0.isShutdown());
      assertEquals(1571L, timedSemaphore0.getPeriod());
      
      timedSemaphore0.endOfPeriod();
      assertEquals(0, TimedSemaphore.NO_LIMIT);
      assertEquals(0, timedSemaphore0.getAvailablePermits());
      assertEquals(TimeUnit.MICROSECONDS, timedSemaphore0.getUnit());
      assertEquals(0.0, timedSemaphore0.getAverageCallsPerPeriod(), 0.01);
      assertEquals(0, timedSemaphore0.getAcquireCount());
      assertEquals(0, timedSemaphore0.getLimit());
      assertEquals(0, timedSemaphore0.getLastAcquiresPerPeriod());
      assertTrue(timedSemaphore0.isShutdown());
      assertEquals(1571L, timedSemaphore0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 656);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(232, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor1);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 232, timeUnit0, 232);
      timedSemaphore0.getUnit();
      timedSemaphore0.getLimit();
      MockThread mockThread1 = new MockThread();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      timedSemaphore0.isShutdown();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.shutdown();
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.getExecutorService();
      assertTrue(timedSemaphore0.isShutdown());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2593, threadFactory0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 2593, timeUnit0, (-803));
      ScheduledExecutorService scheduledExecutorService0 = timedSemaphore0.getExecutorService();
      int int0 = timedSemaphore0.getAcquireCount();
      assertEquals((-803), timedSemaphore0.getAvailablePermits());
      assertEquals(2593L, timedSemaphore0.getPeriod());
      assertSame(scheduledThreadPoolExecutor0, scheduledExecutorService0);
      assertEquals(0, int0);
  }
}
