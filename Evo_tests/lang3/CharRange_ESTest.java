/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 12:40:26 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.commons.lang3.CharRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharRange_ESTest extends CharRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharRange charRange0 = CharRange.is('v');
      CharRange charRange1 = CharRange.isIn('%', 's');
      charRange0.equals(charRange1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharRange charRange0 = CharRange.is('K');
      CharRange charRange1 = CharRange.isIn('', 'K');
      charRange1.contains(charRange0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('b');
      CharRange charRange1 = CharRange.isIn('%', 's');
      charRange0.contains(charRange1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('8');
      CharRange charRange1 = CharRange.is('8');
      charRange0.contains(charRange1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('5');
      CharRange charRange1 = CharRange.isNotIn('5', '`');
      charRange0.contains(charRange1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      charRange0.contains('#');
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      charRange0.isNegated();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('6', '6');
      charRange0.getStart();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharRange charRange0 = CharRange.is('p');
      charRange0.getStart();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharRange charRange0 = CharRange.is('`');
      charRange0.getEnd();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('6');
      charRange0.getEnd();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('$', '#');
      assertFalse(charRange0.isNegated());
      
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.forEach(consumer0);
      assertEquals('$', charRange0.getEnd());
      assertEquals('#', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('\\');
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      charRange0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('o');
      charRange0.iterator();
      assertTrue(charRange0.isNegated());
      assertEquals('o', charRange0.getEnd());
      assertEquals('o', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      String string0 = charRange0.toString();
      assertEquals("^#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      charRange0.hashCode();
      assertEquals('#', charRange0.getStart());
      assertEquals('#', charRange0.getEnd());
      assertTrue(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('$', '#');
      charRange0.hashCode();
      assertEquals('#', charRange0.getStart());
      assertFalse(charRange0.isNegated());
      assertEquals('$', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('M');
      CharRange charRange1 = CharRange.is('M');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('M', charRange1.getEnd());
      assertFalse(boolean0);
      assertEquals('M', charRange0.getStart());
      assertFalse(charRange1.isNegated());
      assertEquals('M', charRange1.getStart());
      assertEquals('M', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('M');
      CharRange charRange1 = CharRange.isNot('M');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('M', charRange1.getEnd());
      assertTrue(boolean0);
      assertTrue(charRange1.isNegated());
      assertEquals('M', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('o');
      CharRange charRange1 = CharRange.isIn('@', 'G');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('G', charRange1.getEnd());
      assertEquals('@', charRange1.getStart());
      assertEquals('o', charRange0.getEnd());
      assertFalse(boolean0);
      assertTrue(charRange0.isNegated());
      assertFalse(charRange1.isNegated());
      assertEquals('o', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      CharRange charRange1 = CharRange.isIn('$', '#');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('#', charRange0.getStart());
      assertFalse(boolean0);
      assertEquals('#', charRange1.getStart());
      assertFalse(charRange1.isNegated());
      assertEquals('#', charRange0.getEnd());
      assertEquals('$', charRange1.getEnd());
      assertTrue(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      Object object0 = new Object();
      boolean boolean0 = charRange0.equals(object0);
      assertEquals('#', charRange0.getStart());
      assertEquals('#', charRange0.getEnd());
      assertTrue(charRange0.isNegated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharRange charRange0 = CharRange.is('8');
      CharRange charRange1 = CharRange.is('u');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('u', charRange1.getStart());
      assertFalse(boolean0);
      assertEquals('u', charRange1.getEnd());
      assertFalse(charRange1.isNegated());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharRange charRange0 = CharRange.is('p');
      CharRange charRange1 = CharRange.is('=');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('=', charRange1.getEnd());
      assertFalse(charRange1.isNegated());
      assertFalse(boolean0);
      assertEquals('=', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      CharRange charRange1 = CharRange.isIn('$', '#');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('#', charRange0.getStart());
      assertEquals('#', charRange1.getStart());
      assertFalse(charRange1.isNegated());
      assertEquals('$', charRange1.getEnd());
      assertFalse(boolean0);
      assertEquals('#', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('}', '}');
      CharRange charRange1 = CharRange.isNotIn('o', ']');
      boolean boolean0 = charRange1.contains(charRange0);
      assertTrue(boolean0);
      assertEquals('o', charRange1.getEnd());
      assertEquals('}', charRange0.getStart());
      assertEquals(']', charRange1.getStart());
      assertEquals('}', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('Z', 'X');
      CharRange charRange1 = CharRange.isIn('1', '1');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('1', charRange1.getEnd());
      assertEquals('X', charRange0.getStart());
      assertEquals('1', charRange1.getStart());
      assertTrue(boolean0);
      assertEquals('Z', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('y', '9');
      CharRange charRange1 = CharRange.isNot('7');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('y', charRange0.getEnd());
      assertEquals('7', charRange1.getEnd());
      assertFalse(boolean0);
      assertEquals('7', charRange1.getStart());
      assertTrue(charRange0.isNegated());
      assertEquals('9', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn(':', ':');
      CharRange charRange1 = CharRange.isNotIn('.', '.');
      boolean boolean0 = charRange1.contains(charRange0);
      assertFalse(boolean0);
      assertEquals('.', charRange1.getStart());
      assertEquals('.', charRange1.getEnd());
      assertTrue(charRange1.isNegated());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      boolean boolean0 = charRange0.contains(charRange0);
      assertTrue(boolean0);
      assertEquals('#', charRange0.getEnd());
      assertTrue(charRange0.isNegated());
      assertEquals('#', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('o');
      // Undeclared exception!
      try { 
        charRange0.contains((CharRange) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Range must not be null
         //
         verifyException("org.apache.commons.lang3.CharRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharRange charRange0 = CharRange.is('p');
      boolean boolean0 = charRange0.contains(charRange0);
      assertEquals('p', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('p', charRange0.getEnd());
      assertFalse(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharRange charRange0 = CharRange.is('=');
      boolean boolean0 = charRange0.contains('p');
      assertEquals('=', charRange0.getEnd());
      assertFalse(boolean0);
      assertEquals('=', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('z', 'I');
      boolean boolean0 = charRange0.contains('I');
      assertEquals('z', charRange0.getEnd());
      assertTrue(boolean0);
      assertEquals('I', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('o');
      boolean boolean0 = charRange0.contains('4');
      assertEquals('o', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('o', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('z', 'I');
      char char0 = charRange0.getEnd();
      assertEquals('z', char0);
      assertFalse(charRange0.isNegated());
      assertEquals('I', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharRange charRange0 = CharRange.is('p');
      boolean boolean0 = charRange0.isNegated();
      assertFalse(boolean0);
      assertEquals('p', charRange0.getEnd());
      assertEquals('p', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('}', '}');
      char char0 = charRange0.getStart();
      assertEquals('}', charRange0.getEnd());
      assertFalse(charRange0.isNegated());
      assertEquals('}', char0);
  }
}
