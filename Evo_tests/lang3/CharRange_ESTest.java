/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 03:47:42 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.commons.lang3.CharRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharRange_ESTest extends CharRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('&', 'L');
      CharRange charRange1 = CharRange.is('&');
      boolean boolean0 = charRange1.equals(charRange0);
      assertFalse(charRange0.equals((Object)charRange1));
      assertEquals('&', charRange1.getEnd());
      assertFalse(charRange1.isNegated());
      assertEquals('L', charRange0.getEnd());
      assertEquals('&', charRange1.getStart());
      assertFalse(boolean0);
      assertEquals('&', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('M', 'M');
      CharRange charRange1 = CharRange.isNot('L');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('M', charRange0.getEnd());
      assertEquals('L', charRange1.getStart());
      assertTrue(charRange1.isNegated());
      assertFalse(boolean0);
      assertEquals('M', charRange0.getStart());
      assertTrue(charRange0.isNegated());
      assertEquals('L', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      CharRange charRange1 = CharRange.isIn(']', '&');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('&', charRange1.getStart());
      assertEquals('6', charRange0.getEnd());
      assertTrue(boolean0);
      assertEquals(']', charRange1.getEnd());
      assertEquals('6', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('h', 'h');
      CharRange charRange1 = CharRange.isNot('h');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('h', charRange1.getEnd());
      assertFalse(boolean0);
      assertEquals('h', charRange0.getEnd());
      assertEquals('h', charRange1.getStart());
      assertEquals('h', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\'', '~');
      CharRange charRange1 = CharRange.isNot('M');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('\'', charRange0.getStart());
      assertEquals('M', charRange1.getEnd());
      assertEquals('~', charRange0.getEnd());
      assertTrue(boolean0);
      assertEquals('M', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('j', 'y');
      boolean boolean0 = charRange0.contains('j');
      assertEquals('j', charRange0.getStart());
      assertFalse(boolean0);
      assertEquals('y', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('%');
      boolean boolean0 = charRange0.isNegated();
      assertEquals('%', charRange0.getEnd());
      assertTrue(boolean0);
      assertEquals('%', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('&', '*');
      char char0 = charRange0.getStart();
      assertEquals('*', charRange0.getEnd());
      assertEquals('&', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharRange charRange0 = CharRange.is('w');
      char char0 = charRange0.getStart();
      assertEquals('w', charRange0.getEnd());
      assertFalse(charRange0.isNegated());
      assertEquals('w', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('9', '9');
      char char0 = charRange0.getEnd();
      assertEquals('9', char0);
      assertTrue(charRange0.isNegated());
      assertEquals('9', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharRange charRange0 = CharRange.is('o');
      char char0 = charRange0.getEnd();
      assertFalse(charRange0.isNegated());
      assertEquals('o', charRange0.getStart());
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('w', ')');
      assertFalse(charRange0.isNegated());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.forEach(consumer0);
      assertEquals('w', charRange0.getEnd());
      assertEquals(')', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharRange charRange0 = CharRange.is('w');
      String string0 = charRange0.toString();
      assertNotNull(string0);
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      charRange0.hashCode();
      assertEquals('#', charRange0.getEnd());
      assertTrue(charRange0.isNegated());
      assertEquals('#', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      charRange0.hashCode();
      assertEquals('6', charRange0.getEnd());
      assertFalse(charRange0.isNegated());
      assertEquals('6', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('#');
      CharRange charRange1 = CharRange.is('#');
      boolean boolean0 = charRange0.equals(charRange1);
      assertEquals('#', charRange0.getStart());
      assertFalse(charRange1.isNegated());
      assertEquals('#', charRange1.getStart());
      assertEquals('#', charRange0.getEnd());
      assertFalse(boolean0);
      assertEquals('#', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('.', 'L');
      CharRange charRange1 = CharRange.is('.');
      boolean boolean0 = charRange0.equals(charRange1);
      assertFalse(boolean0);
      assertEquals('.', charRange0.getStart());
      assertEquals('L', charRange0.getEnd());
      assertEquals('.', charRange1.getEnd());
      assertFalse(charRange1.isNegated());
      assertEquals('.', charRange1.getStart());
      assertTrue(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('%');
      CharRange charRange1 = CharRange.isNot('#');
      boolean boolean0 = charRange0.equals(charRange1);
      assertEquals('#', charRange1.getEnd());
      assertTrue(charRange1.isNegated());
      assertFalse(boolean0);
      assertEquals('#', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('%');
      CharRange charRange1 = CharRange.isNot('%');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('%', charRange1.getEnd());
      assertTrue(charRange1.isNegated());
      assertEquals('%', charRange1.getStart());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('h', 'h');
      boolean boolean0 = charRange0.equals(charRange0);
      assertFalse(charRange0.isNegated());
      assertEquals('h', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('h', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      Object object0 = new Object();
      boolean boolean0 = charRange0.equals(object0);
      assertEquals('6', charRange0.getStart());
      assertFalse(charRange0.isNegated());
      assertFalse(boolean0);
      assertEquals('6', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharRange charRange0 = CharRange.is('B');
      CharRange charRange1 = CharRange.is('e');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('e', charRange1.getStart());
      assertFalse(boolean0);
      assertFalse(charRange1.isNegated());
      assertEquals('e', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharRange charRange0 = CharRange.is('w');
      CharRange charRange1 = CharRange.is('A');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('A', charRange1.getEnd());
      assertFalse(charRange1.isNegated());
      assertFalse(boolean0);
      assertEquals('A', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('{', '~');
      CharRange charRange1 = CharRange.isIn('U', 'n');
      boolean boolean0 = charRange1.contains(charRange0);
      assertFalse(boolean0);
      assertEquals('~', charRange0.getEnd());
      assertEquals('U', charRange1.getStart());
      assertEquals('n', charRange1.getEnd());
      assertFalse(charRange1.isNegated());
      assertTrue(charRange0.isNegated());
      assertEquals('{', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('1');
      CharRange charRange1 = CharRange.is(';');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('1', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals(';', charRange1.getEnd());
      assertEquals('1', charRange0.getEnd());
      assertEquals(';', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('{', '~');
      CharRange charRange1 = CharRange.isIn('U', 'n');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('{', charRange0.getStart());
      assertEquals('U', charRange1.getStart());
      assertEquals('n', charRange1.getEnd());
      assertTrue(boolean0);
      assertEquals('~', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('{', '~');
      CharRange charRange1 = CharRange.isNotIn('k', 'U');
      boolean boolean0 = charRange0.contains(charRange1);
      assertTrue(charRange1.isNegated());
      assertEquals('k', charRange1.getEnd());
      assertEquals('U', charRange1.getStart());
      assertEquals('~', charRange0.getEnd());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('%');
      CharRange charRange1 = CharRange.isNot('#');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('#', charRange1.getEnd());
      assertTrue(charRange1.isNegated());
      assertFalse(boolean0);
      assertEquals('#', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('%');
      boolean boolean0 = charRange0.contains(charRange0);
      assertTrue(charRange0.isNegated());
      assertEquals('%', charRange0.getStart());
      assertEquals('%', charRange0.getEnd());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      CharRange charRange1 = CharRange.isNotIn('&', '');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('6', charRange0.getStart());
      assertFalse(charRange0.isNegated());
      assertFalse(boolean0);
      assertEquals('&', charRange1.getStart());
      assertEquals('', charRange1.getEnd());
      assertEquals('6', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharRange charRange0 = CharRange.is(',');
      // Undeclared exception!
      try { 
        charRange0.contains((CharRange) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Range must not be null
         //
         verifyException("org.apache.commons.lang3.CharRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      boolean boolean0 = charRange0.contains(charRange0);
      assertTrue(boolean0);
      assertEquals('6', charRange0.getStart());
      assertFalse(charRange0.isNegated());
      assertEquals('6', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('%');
      boolean boolean0 = charRange0.contains('n');
      assertEquals('%', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('%', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      boolean boolean0 = charRange0.contains('6');
      assertEquals('6', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('6', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharRange charRange0 = CharRange.is('X');
      boolean boolean0 = charRange0.contains('4');
      assertEquals('X', charRange0.getStart());
      assertFalse(boolean0);
      assertEquals('X', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('{', '~');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      charRange0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('{', '~');
      char char0 = charRange0.getEnd();
      assertEquals('{', charRange0.getStart());
      assertTrue(charRange0.isNegated());
      assertEquals('~', char0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      boolean boolean0 = charRange0.isNegated();
      assertEquals('6', charRange0.getStart());
      assertEquals('6', charRange0.getEnd());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      charRange0.iterator();
      assertFalse(charRange0.isNegated());
      assertEquals('6', charRange0.getStart());
      assertEquals('6', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      char char0 = charRange0.getStart();
      assertEquals('6', char0);
      assertEquals('6', charRange0.getEnd());
      assertFalse(charRange0.isNegated());
  }
}
