/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 14:15:58 GMT 2022
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((char[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-135));
      hashCodeBuilder0.append((byte[]) null);
      assertEquals(135, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-3515), (-3515));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((double[]) null);
      hashCodeBuilder1.append(';');
      int int0 = hashCodeBuilder1.toHashCode();
      assertEquals((-478942856), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "Caught a SecurityException reading the system property '", (String[]) null);
      assertEquals((-303289051), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "xkb85|OPM@*:Q`vn~", true);
      assertEquals((-917342914), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) " in an array of ", (Collection<String>) linkedList0);
      assertEquals((-112815341), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[5];
      int int0 = HashCodeBuilder.reflectionHashCode(1, (int)  (-99), integer0, true, (Class<? super Integer>) class0, stringArray0);
      assertEquals((-95), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = HashCodeBuilder.reflectionHashCode((-1), (-1), (Object) hashCodeBuilder0, false);
      assertEquals(0, int0);
      assertEquals(17, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode(1489, (-3041), (Object) "", false);
      assertEquals((-4528045), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1547, (-1));
      int int0 = HashCodeBuilder.reflectionHashCode((-1), (-1), (Object) hashCodeBuilder0);
      assertEquals(1547, (int)hashCodeBuilder0.build());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = HashCodeBuilder.reflectionHashCode(3781, 17, (Object) hashCodeBuilder0);
      assertEquals(1092782, int0);
      assertEquals(17, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode((-251), 693, object0);
      assertEquals((-251), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder.register(hashCodeBuilder0);
      boolean boolean0 = HashCodeBuilder.isRegistered(hashCodeBuilder0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean boolean0 = HashCodeBuilder.isRegistered(hashCodeBuilder0);
      assertFalse(boolean0);
      assertEquals(17, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short) (-2700));
      hashCodeBuilder0.build();
      assertEquals((-2071), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1227L));
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(false);
      hashCodeBuilder3.append((double[]) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      hashCodeBuilder2.append(charArray0);
      hashCodeBuilder1.build();
      assertEquals(1283560960, (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1, 1);
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '9';
      charArray0[2] = 'K';
      charArray0[3] = 'y';
      charArray0[4] = 'G';
      charArray0[5] = '7';
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(charArray0);
      Integer integer0 = hashCodeBuilder1.build();
      assertEquals(425, hashCodeBuilder0.toHashCode());
      assertEquals(425, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1));
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      hashCodeBuilder1.append(booleanArray0);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1919), 3337);
      short[] shortArray0 = new short[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(shortArray0);
      assertEquals((-1919), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2433, (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(2433);
      long[] longArray0 = new long[2];
      hashCodeBuilder1.append(longArray0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-927));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-927));
      hashCodeBuilder1.append((float[]) null);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-135));
      float[] floatArray0 = new float[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      assertEquals((-1), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-135));
      double[] doubleArray0 = new double[2];
      hashCodeBuilder0.append(doubleArray0);
      assertEquals((-18225), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      hashCodeBuilder1.append((char[]) null);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) hashCodeBuilder0;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0);
      hashCodeBuilder1.append(true);
      assertEquals((-509656162), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1547, (-1));
      hashCodeBuilder0.append((short)1547);
      hashCodeBuilder0.append((byte[]) null);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-2483), (-2483));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-1));
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((Object[]) null);
      boolean[] booleanArray0 = new boolean[2];
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(booleanArray0);
      hashCodeBuilder3.append((Object) hashCodeBuilder2);
      assertEquals((-562609377), (int)hashCodeBuilder1.build());
      assertEquals((-562609377), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2433, (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(2433);
      hashCodeBuilder1.append((long) (-1));
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-173), Integer.MAX_VALUE);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short)0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper(0);
      hashCodeBuilder2.append((-538L));
      assertEquals((-2147482938), (int)hashCodeBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((-69));
      assertEquals(560, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-135));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      hashCodeBuilder0.append(objectArray0);
      hashCodeBuilder0.append(18);
      assertEquals((-1740004613), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float) (-1));
      assertEquals((-1082129803), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(1.0);
      assertEquals(1072693877, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      int[] intArray0 = new int[9];
      long[] longArray0 = new long[3];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('|');
      hashCodeBuilder1.append(intArray0);
      hashCodeBuilder0.append(longArray0);
      hashCodeBuilder0.append('I');
      assertEquals((-52), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(false);
      assertEquals(630, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(3901, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires a non zero multiplier
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder((-1230), (-1230));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires a non zero initial value
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[2];
      int int0 = HashCodeBuilder.reflectionHashCode((-1313), (-1313), hashCodeBuilder0, false, (Class<? super HashCodeBuilder>) class0, stringArray0);
      assertEquals(2031390752, int0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(754, 231, (String) null, false, (Class<? super String>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1));
      hashCodeBuilder1.append(true);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      String[] stringArray0 = new String[8];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, stringArray0);
      assertEquals(23426, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2433, (-1));
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals(2433, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short[]) null);
      char[] charArray0 = new char[7];
      charArray0[2] = 'V';
      hashCodeBuilder0.append(charArray0);
      hashCodeBuilder0.append((byte)0);
      assertEquals((-1406769565), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[4];
      hashCodeBuilder0.append(shortArray0);
      assertEquals(31860737, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "", false);
      assertEquals(633, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((long[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1547, (-1));
      long[] longArray0 = new long[5];
      hashCodeBuilder0.append(longArray0);
      assertEquals((-1547), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((int[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[6];
      hashCodeBuilder0.append(floatArray0);
      assertEquals(667675993, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1547, (-1));
      hashCodeBuilder0.append((byte[]) null);
      assertEquals((-1547), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[5];
      hashCodeBuilder0.append(byteArray0);
      assertEquals(1178847269, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((boolean[]) null);
      char[] charArray0 = new char[4];
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(charArray0);
      hashCodeBuilder2.append(1400L);
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals((-1065740235), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder((-1367), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer((-25));
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-25), 0, (Object) integer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires a non zero multiplier
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.unregister(object0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = HashCodeBuilder.reflectionHashCode(17, 17, (Object) linkedList0, false);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashCodeBuilder.register(linkedList0);
      int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedList0, true);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((double) (byte) (-98));
      assertEquals((-1067941259), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(0.0F);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-242), 0, (Object) "/sUU~r<7NSP$J?gcAY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.hashCode();
      assertEquals(17, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer((-1369));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) integer0, (Collection<String>) linkedList0);
      //  // Unstable assertion: assertEquals(647, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.appendSuper((byte)0);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(17, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte) (-68));
      assertEquals(561, (int)hashCodeBuilder0.build());
  }
}
