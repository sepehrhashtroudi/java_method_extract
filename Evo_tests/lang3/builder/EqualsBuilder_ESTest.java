/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 14:22:41 GMT 2022
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.function.Consumer;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EqualsBuilder_ESTest extends EqualsBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1700.0576F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((float[]) null, floatArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short) (-1), (short) (-1));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append('\\', '1');
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-1), (byte)2);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(1700.0576F, 1700.0576F);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf(true);
      IDKey iDKey0 = new IDKey(equalsBuilder1);
      ImmutablePair<Boolean, Object> immutablePair0 = new ImmutablePair<Boolean, Object>(boolean0, iDKey0);
      IDKey iDKey1 = new IDKey(immutablePair0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EqualsBuilder.reflectionEquals(object0, (Object) iDKey1, (Collection<String>) linkedList0);
      equalsBuilder5.append(190, 190);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short)1835, (short)1180);
      assertSame(equalsBuilder6, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1421L, 1421L);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte) (-23), (byte) (-23));
      IDKey iDKey0 = new IDKey(equalsBuilder2);
      IDKey iDKey1 = new IDKey(equalsBuilder1);
      EqualsBuilder.reflectionEquals((Object) iDKey0, (Object) iDKey1, (String[]) null);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-23);
      intArray0[1] = (int) (byte) (-23);
      intArray0[2] = (int) (byte) (-23);
      intArray0[3] = 0;
      intArray0[4] = (int) (byte) (-23);
      intArray0[5] = 2605;
      intArray0[6] = (int) (byte) (-23);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      equalsBuilder2.append((Object[]) null, (Object[]) null);
      intArray0[7] = (int) (byte) (-23);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((int[]) null, intArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-23);
      equalsBuilder3.append(shortArray0, shortArray0);
      equalsBuilder3.append((double) (byte) (-23), 0.0);
      Object object0 = new Object();
      EqualsBuilder.register("", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1.5, 1.5);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder1;
      objectArray0[4] = (Object) equalsBuilder1;
      objectArray0[5] = (Object) equalsBuilder1;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = 1578L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 2097L;
      longArray0[4] = (-1575L);
      longArray0[5] = 1L;
      longArray0[6] = 0L;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, (long[]) null);
      double[] doubleArray0 = new double[0];
      equalsBuilder0.append(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((float) 0L, 1616.6923F);
      assertSame(equalsBuilder5, equalsBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[9];
      longArray0[0] = 1276L;
      longArray0[1] = (-984L);
      longArray0[2] = 1226L;
      longArray0[3] = (-5396L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[7] = (-462L);
      longArray0[8] = (-1L);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 0);
      assertTrue(equalsBuilder2.isEquals());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray0[7] = (-363);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((double) 0, (double) (-1L));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-116), (byte) (-116));
      equalsBuilder5.append(false, false);
      assertFalse(equalsBuilder5.isEquals());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[9];
      longArray0[0] = 1276L;
      longArray0[1] = (-984L);
      longArray0[2] = 1226L;
      longArray0[3] = 1276L;
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[7] = (-462L);
      longArray0[8] = (-1L);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray1);
      assertTrue(equalsBuilder3.build());
      
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((double) 0, (double) (-1L));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-116), (byte) (-116));
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(false, false);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(equalsBuilder6.isEquals());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[7];
      longArray0[0] = (-4616189618054758400L);
      longArray0[1] = 1L;
      longArray0[2] = 629L;
      longArray0[3] = (-1261L);
      longArray0[4] = 1720L;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      byte[] byteArray0 = new byte[0];
      equalsBuilder2.append(byteArray0, byteArray0);
      longArray0[5] = (-1815L);
      longArray0[6] = 2093L;
      EqualsBuilder equalsBuilder3 = equalsBuilder0.append(longArray0, longArray0);
      EqualsBuilder.isRegistered(equalsBuilder3, (Object) null);
      assertTrue(equalsBuilder3.isEquals());
      
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      equalsBuilder0.append(booleanArray0, booleanArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[7];
      longArray0[0] = (-4616189618054758400L);
      longArray0[1] = 1L;
      longArray0[2] = 629L;
      longArray0[3] = (-1261L);
      longArray0[4] = 1720L;
      boolean[] booleanArray0 = new boolean[22];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      byte[] byteArray0 = new byte[0];
      equalsBuilder2.append(byteArray0, byteArray0);
      longArray0[5] = (-1815L);
      longArray0[6] = 2093L;
      EqualsBuilder equalsBuilder3 = equalsBuilder0.append(longArray0, longArray0);
      EqualsBuilder.isRegistered(equalsBuilder3, (Object) null);
      assertTrue(equalsBuilder3.isEquals());
      
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      equalsBuilder0.append(booleanArray0, booleanArray1);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EqualsBuilder.unregister("Unexpected IllegalAccessException", "Unexpected IllegalAccessException");
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[5];
      intArray0[0] = 1376;
      intArray0[1] = (-6918);
      intArray0[2] = 1531;
      intArray0[3] = (-2200);
      intArray0[4] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2200);
      objectArray0[1] = (Object) equalsBuilder2;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) (-2200);
      equalsBuilder0.append(true, true);
      objectArray0[4] = (Object) "Unexpected IllegalAccessException";
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) (-2200);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((double) (-2200), (double) 1531);
      Integer integer0 = new Integer((-2115));
      Integer integer1 = new Integer(1376);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unexpected IllegalAccessException";
      stringArray0[1] = "Unexpected IllegalAccessException";
      stringArray0[2] = "Unexpected IllegalAccessException";
      stringArray0[3] = "Unexpected IllegalAccessException";
      stringArray0[4] = "Unexpected IllegalAccessException";
      stringArray0[5] = "9p8:S\"|o|Lk";
      EqualsBuilder.reflectionEquals((Object) integer0, (Object) integer1, true, (Class<?>) class0, stringArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-67);
      longArray0[1] = (long) 1376;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(18, 1531);
      assertSame(equalsBuilder3, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1439);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('b', 'b');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) equalsBuilder0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'b';
      doubleArray0[1] = 2046.634;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(doubleArray0, doubleArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      equalsBuilder4.reset();
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(charArray0, charArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'b';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'b';
      longArray0[4] = (long) 'b';
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 'b';
      objectArray0[0] = (Object) (-1439);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 'b';
      longArray1[4] = (long) 'b';
      longArray1[6] = (long) 0;
      equalsBuilder5.append(longArray0, longArray1);
      equalsBuilder5.append(809.0F, (float) 0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((long) (-1439), (long) 0);
      assertFalse(equalsBuilder6.isEquals());
      assertFalse(equalsBuilder6.build());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      long[] longArray0 = new long[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-251);
      int[] intArray1 = new int[7];
      Integer integer0 = new Integer((-251));
      EqualsBuilder.register(equalsBuilder0, integer0);
      //  // Unstable assertion: assertTrue(equalsBuilder0.build());
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-251);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-413.235F), (-813.0F));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(true, true);
      equalsBuilder5.appendSuper(false);
      EqualsBuilder equalsBuilder6 = equalsBuilder3.append((byte) (-11), (byte) (-11));
      boolean boolean0 = EqualsBuilder.isRegistered(equalsBuilder6, integer0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) equalsBuilder0;
      objectArray1[1] = (Object) equalsBuilder0;
      objectArray1[2] = (Object) equalsBuilder0;
      Object object0 = new Object();
      objectArray1[3] = object0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1443);
      intArray0[1] = (-2335);
      intArray0[2] = (-1);
      intArray0[3] = 47;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(intArray0, intArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1443);
      floatArray0[1] = (float) (-1443);
      floatArray0[2] = (float) (-2335);
      floatArray0[3] = (float) (-1443);
      floatArray0[4] = (float) (-2335);
      floatArray0[5] = (float) (-1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0);
      equalsBuilder3.append((byte)98, (byte)98);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 4061.6345F;
      float[] floatArray1 = new float[1];
      floatArray1[0] = 4061.6345F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      long[] longArray0 = new long[4];
      longArray0[1] = 0L;
      longArray0[1] = 3412L;
      long[] longArray1 = new long[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0L, 0L);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('0', '0');
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      equalsBuilder3.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(false);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((Object) equalsBuilder0, (Object) equalsBuilder4);
      assertSame(equalsBuilder4, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      IDKey iDKey0 = new IDKey(object0);
      IDKey iDKey1 = new IDKey(iDKey0);
      IDKey iDKey2 = new IDKey(object0);
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) iDKey1, (Object) iDKey2, false);
      assertFalse(boolean0);
      
      EqualsBuilder.getRegisterPair(iDKey2, ".9VfX]t6sdTS=");
      boolean boolean1 = EqualsBuilder.isRegistered(".9VfX]t6sdTS=", iDKey2);
      assertFalse(boolean1);
      
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object[]) null, (Object[]) null);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)36;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2861;
      shortArray0[5] = (short)2454;
      shortArray0[6] = (short)67;
      shortArray0[7] = (short) (-377);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      equalsBuilder2.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append((Object) false, (Object) false);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(doubleArray0, doubleArray1);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-377);
      longArray0[2] = 0L;
      equalsBuilder4.append(longArray0, longArray0);
      assertTrue(equalsBuilder4.isEquals());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(false);
      Integer integer0 = new Integer((-1));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) integer0, (Object) equalsBuilder0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, (float[]) null);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-404.0413F), (-404.0413F));
      int[] intArray0 = new int[9];
      intArray0[0] = 1499;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      equalsBuilder3.reset();
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((-137), 168);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      EqualsBuilder equalsBuilder6 = equalsBuilder4.append(intArray0, intArray0);
      assertFalse(equalsBuilder3.isEquals());
      
      equalsBuilder6.append((long) (-1), 4615L);
      EqualsBuilder equalsBuilder7 = equalsBuilder1.append((Object) equalsBuilder3, (Object) null);
      equalsBuilder7.append((Object) equalsBuilder2, (Object) equalsBuilder5);
      equalsBuilder4.appendSuper(true);
      Boolean boolean0 = equalsBuilder2.build();
      Boolean boolean1 = new Boolean("6.2");
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6.2";
      stringArray0[1] = "Unexpected IllegalAccessException";
      stringArray0[2] = "6.2";
      stringArray0[3] = "6.2";
      boolean boolean2 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean1, false, (Class<?>) class0, stringArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1439);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('b', 'b');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) equalsBuilder0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'b';
      doubleArray0[1] = 2046.634;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(doubleArray0, doubleArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      equalsBuilder4.reset();
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(charArray0, charArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'b';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (-2592L);
      longArray0[4] = (long) 'b';
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 'b';
      longArray1[1] = (long) (-1439);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 'b';
      longArray1[4] = (long) 'b';
      longArray1[5] = (long) 'b';
      longArray1[6] = (long) 0;
      equalsBuilder5.append(longArray0, longArray1);
      equalsBuilder5.append(809.0F, (float) 0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((long) (-1439), (long) 0);
      assertSame(equalsBuilder4, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(true);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 1738L;
      IDKey iDKey0 = new IDKey((Object) null);
      EqualsBuilder.register(equalsBuilder1, iDKey0);
      assertTrue(equalsBuilder1.isEquals());
      
      longArray0[2] = 871L;
      longArray0[3] = (-916L);
      longArray0[4] = 2056L;
      longArray0[5] = (-499L);
      equalsBuilder1.append((long[]) null, longArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(' ', '3');
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(false, false);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.appendSuper(false);
      ImmutablePair<String, Object> immutablePair0 = ImmutablePair.of((String) null, (Object) null);
      ImmutablePair<String, Pair<String, Object>> immutablePair1 = ImmutablePair.of((String) null, (Pair<String, Object>) immutablePair0);
      EqualsBuilder.reflectionEquals((Object) immutablePair0, (Object) immutablePair1, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)0;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(byteArray0, byteArray1);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte)1, (byte)0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.appendSuper(false);
      equalsBuilder0.append((byte)0, (byte) (-1));
      Pair<IDKey, IDKey> pair0 = EqualsBuilder.getRegisterPair(equalsBuilder6, (Object) null);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[9];
      longArray0[0] = 1276L;
      longArray0[1] = (-984L);
      longArray0[2] = 1226L;
      longArray0[3] = (-5396L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[7] = (-462L);
      longArray0[8] = (-1L);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 0);
      assertTrue(equalsBuilder2.isEquals());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-363);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((double) 0, 1.0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-116), (byte) (-116));
      equalsBuilder5.append(false, false);
      assertFalse(equalsBuilder4.isEquals());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-840.2);
      doubleArray0[2] = (-359.27441171207);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1200.993);
      equalsBuilder0.append(doubleArray0, doubleArray0);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "4P.a=@epBFGJI";
      stringArray0[4] = "";
      stringArray0[5] = "";
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) null, (Object) equalsBuilder0, false, (Class<?>) class0, stringArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3062;
      intArray0[1] = 2754;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte)99, (byte)99);
      assertTrue(equalsBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[4];
      longArray0[0] = 190L;
      longArray0[1] = 0L;
      longArray0[2] = (-1180L);
      longArray0[3] = 1300L;
      long[] longArray1 = new long[1];
      longArray1[0] = 190L;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-32);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-705L), (long) (byte)83);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short) (byte)0, (short) (-2160));
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-32);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-32);
      intArray0[6] = 1;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((int) (byte)83, 1);
      assertSame(equalsBuilder1, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "kf%A";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      EqualsBuilder.reflectionEquals((Object) "", (Object) null, false, (Class<?>) class0, stringArray0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder.register("kf%A", "");
      equalsBuilder0.reset();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-3716), 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3716);
      doubleArray0[1] = (double) (-3716);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-3716);
      equalsBuilder1.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((double) (-3716), 1083.3849871818957);
      assertSame(equalsBuilder0, equalsBuilder2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[5] = (Object) equalsBuilder0;
      objectArray0[6] = (Object) equalsBuilder0;
      objectArray0[7] = (Object) equalsBuilder0;
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) equalsBuilder0;
      objectArray1[1] = (Object) equalsBuilder0;
      objectArray1[2] = (Object) equalsBuilder0;
      objectArray1[3] = (Object) equalsBuilder0;
      objectArray1[4] = (Object) equalsBuilder0;
      objectArray1[5] = (Object) equalsBuilder0;
      objectArray1[6] = (Object) equalsBuilder0;
      objectArray1[7] = (Object) equalsBuilder0;
      objectArray1[8] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      int[] intArray0 = new int[8];
      intArray0[0] = 44;
      intArray0[1] = 41;
      intArray0[2] = 476;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2627;
      intArray0[7] = 1152;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(901.9302F, 0.0F);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(true, false);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((short)0, (short)0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte) (-1), (byte)54);
      assertSame(equalsBuilder2, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1304;
      shortArray0[2] = (short)2;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) equalsBuilder0, (Object) equalsBuilder0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)1304;
      objectArray0[1] = (Object) (short)0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) equalsBuilder2;
      objectArray0[4] = (Object) (short)1304;
      objectArray0[5] = (Object) equalsBuilder1;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (byte)0;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0);
      assertTrue(equalsBuilder3.build());
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (short)1304;
      doubleArray1[1] = (double) (short)2;
      doubleArray1[2] = (double) (short)1304;
      doubleArray1[3] = 1480.7553951;
      doubleArray1[4] = (double) (byte)0;
      doubleArray1[5] = (double) (byte)0;
      doubleArray1[6] = (double) (short)2;
      equalsBuilder5.append(doubleArray1, doubleArray0);
      assertFalse(equalsBuilder3.isEquals());
      assertFalse(equalsBuilder4.build());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-755.27F);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      assertTrue(equalsBuilder1.isEquals());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '~';
      char[] charArray1 = new char[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-3552L), (-3552L));
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = ", '";
      stringArray0[2] = "";
      stringArray0[3] = ", Length: 0";
      stringArray0[4] = "";
      stringArray0[5] = "ZtA{5wt4ZkD(Lb$";
      stringArray0[6] = "";
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder3, (Object) equalsBuilder0, false, (Class<?>) class0, stringArray0);
      assertFalse(equalsBuilder1.isEquals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short)0, (short)0);
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'u';
      charArray0[2] = 'n';
      charArray0[3] = '2';
      charArray0[4] = '.';
      charArray0[5] = '6';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((char[]) null, charArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (float) 'u';
      floatArray0[2] = (float) '_';
      floatArray0[3] = (float) '2';
      floatArray0[4] = (float) '6';
      floatArray0[5] = (float) 'u';
      floatArray0[6] = (float) '2';
      floatArray0[7] = (float) '_';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(false, true);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-1), (byte) (-33));
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short)0, (short) (byte) (-1));
      assertSame(equalsBuilder0, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0.0, 0.0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'k';
      charArray0[2] = 'h';
      charArray0[3] = '@';
      charArray0[4] = 'W';
      charArray0[5] = 'b';
      charArray0[6] = 'w';
      charArray0[7] = '*';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      Object object0 = new Object();
      IDKey iDKey0 = new IDKey(object0);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) iDKey0, true, (Class<?>) class0, stringArray0);
      assertFalse(boolean0);
      
      equalsBuilder2.reset();
      assertTrue(equalsBuilder2.isEquals());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(object0, object0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((double[]) null, (double[]) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'p';
      charArray0[2] = 'A';
      charArray0[3] = 'r';
      charArray0[4] = '$';
      charArray0[5] = '1';
      charArray0[6] = 'k';
      charArray0[7] = '/';
      charArray0[8] = 'a';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray0);
      byte[] byteArray0 = new byte[0];
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(byteArray0, byteArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'r';
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(longArray0, longArray0);
      assertTrue(equalsBuilder3.build());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) '/';
      doubleArray0[2] = (double) 'k';
      doubleArray0[3] = (double) 'a';
      equalsBuilder5.append((double[]) null, doubleArray0);
      assertFalse(equalsBuilder1.build());
      assertFalse(equalsBuilder4.build());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 489.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2878.8503F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1099.2603F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1455.0F);
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2878.8503F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3219;
      shortArray0[1] = (short)36;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-229), 664);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1231L, (-1L));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((short) (-2426), (short) (-2636));
      equalsBuilder5.setEquals(true);
      assertTrue(equalsBuilder1.isEquals());
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 4061.6345F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = 4061.6345F;
      floatArray1[1] = 4061.6345F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 3412L;
      longArray0[3] = 0L;
      long[] longArray1 = new long[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0L, 0L);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('0', '0');
      EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(false);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((Object) equalsBuilder0, (Object) equalsBuilder4);
      assertSame(equalsBuilder0, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(3044.51, 3044.51);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((boolean[]) null, (boolean[]) null);
      assertTrue(equalsBuilder3.build());
      
      Object object0 = new Object();
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(object0, (Object) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(byteArray0, byteArray0);
      equalsBuilder5.append((float) (byte)1, (float) (byte)1);
      assertFalse(equalsBuilder1.isEquals());
      assertFalse(equalsBuilder5.build());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short)102, (short)102);
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'X';
      charArray0[2] = '(';
      charArray0[3] = 'c';
      charArray0[4] = 'a';
      charArray0[5] = '3';
      charArray0[6] = 'p';
      equalsBuilder1.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte) (-1), (byte) (-1));
      assertTrue(equalsBuilder2.build());
      
      Integer integer0 = new Integer((short)102);
      equalsBuilder2.append((Object) integer0, (Object) null);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object0 = new Object();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) null, object0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short)0, (short) (-594));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-594);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(longArray0, longArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-594L);
      objectArray0[1] = null;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0);
      long[] longArray1 = new long[4];
      longArray1[0] = (-3884L);
      longArray1[1] = (long) (short)0;
      longArray1[2] = (long) (short)0;
      longArray1[3] = (long) (short) (-594);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(longArray1, longArray0);
      assertSame(equalsBuilder6, equalsBuilder2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 'F';
      longArray1[1] = (long) 'F';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'F';
      intArray0[1] = (int) 'F';
      intArray0[2] = (int) 'F';
      equalsBuilder2.append(intArray0, intArray0);
      longArray1[2] = (long) 'F';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)0;
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append(byteArray0, byteArray0);
      assertTrue(equalsBuilder3.build());
      
      longArray1[3] = (long) 'F';
      longArray1[4] = (long) 'F';
      EqualsBuilder equalsBuilder4 = equalsBuilder2.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(true);
      EqualsBuilder.unregister(object0, equalsBuilder5);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      equalsBuilder0.append(shortArray0, shortArray0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[1];
      intArray0[0] = 41;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 41;
      doubleArray0[1] = (double) 41;
      doubleArray0[2] = (double) 41;
      doubleArray0[3] = (double) 41;
      doubleArray0[4] = (double) 41;
      doubleArray0[5] = (double) 41;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, false);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.appendSuper(true);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((float[]) null, (float[]) null);
      boolean boolean0 = equalsBuilder5.isEquals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short) (-3585), (short)779);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(968.32F, (float) 0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.appendSuper(false);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3585);
      shortArray0[1] = (short)779;
      shortArray0[2] = (short) (-3585);
      shortArray0[3] = (short)779;
      equalsBuilder1.setEquals(true);
      shortArray0[4] = (short) (-3585);
      shortArray0[5] = (short)779;
      shortArray0[6] = (short)779;
      EqualsBuilder.getRegisterPair("", equalsBuilder0);
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)779;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(shortArray0, shortArray1);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte)0, (byte)56);
      assertSame(equalsBuilder0, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Object object0 = new Object();
      linkedHashSet0.contains(object0);
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "'mEt&Y1R", (Object) "'mEt&Y1R", (Collection<String>) linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0.0F, 0.0F);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((double) 0.0F, (double) 0.0F);
      short[] shortArray0 = new short[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(true, false);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1998);
      intArray0[2] = (-1522);
      intArray0[3] = 2935;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = (-1522);
      intArray1[1] = (-1998);
      intArray1[2] = (-1522);
      intArray1[3] = 2935;
      intArray1[4] = 2935;
      intArray1[5] = 2935;
      intArray1[6] = (-1998);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(intArray0, intArray1);
      assertSame(equalsBuilder6, equalsBuilder4);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1735L, (-2233L));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte)0, (byte)71);
      Object[] objectArray0 = new Object[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      equalsBuilder3.setEquals(false);
      Object object0 = new Object();
      EqualsBuilder.unregister(equalsBuilder3, object0);
      EqualsBuilder.unregister(equalsBuilder2, equalsBuilder1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)12;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)12;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int[] intArray1 = new int[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((double) (byte)0, 1049.0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(true, false);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte)0, (byte)0);
      equalsBuilder5.appendSuper(false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2336.444841724;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 12;
      doubleArray0[7] = (double) (byte)12;
      doubleArray0[8] = 666.70303;
      EqualsBuilder equalsBuilder6 = equalsBuilder2.append(doubleArray0, doubleArray0);
      assertSame(equalsBuilder6, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)36;
      byteArray1[7] = (byte)36;
      byteArray1[8] = (byte)0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float[]) null, (float[]) null);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = 0L;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((int) (byte)0, (int) (byte)0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) 0L, 0.0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((long) (byte)36, 0L);
      assertSame(equalsBuilder6, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1670.8F);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      Boolean boolean0 = equalsBuilder1.build();
      assertTrue(boolean0);
      
      EqualsBuilder.isRegistered(boolean0, boolean0);
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "";
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) equalsBuilder1, object0, false, (Class<?>) class0, stringArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      equalsBuilder0.append((byte) (-1), (byte)84);
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[5] = (Object) equalsBuilder0;
      objectArray0[6] = (Object) equalsBuilder0;
      objectArray0[7] = (Object) equalsBuilder0;
      equalsBuilder0.append(objectArray0, objectArray0);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1.0, 1.0);
      assertTrue(equalsBuilder1.build());
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(106, 1283);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((char[]) null, (char[]) null);
      equalsBuilder4.append((short)0, (short)0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("Z:Mq");
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) "F.c|}u$", object0, (Collection<String>) linkedHashSet0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      IDKey iDKey0 = new IDKey("Z:Mq");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Z:Mq";
      stringArray0[1] = "Z:Mq";
      stringArray0[2] = "Z:Mq";
      stringArray0[3] = "F.c|}u$";
      stringArray0[4] = "F.c|}u$";
      stringArray0[5] = "F.c|}u$";
      boolean boolean2 = EqualsBuilder.reflectionEquals((Object) boolean1, (Object) iDKey0, stringArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)40;
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short) (-633);
      shortArray1[3] = (short) (-2086);
      shortArray1[4] = (short) (-1);
      shortArray1[5] = (short)40;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(false);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((long) (short)40, 496L);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short)1, (short) (-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EqualsBuilder.reflectionEquals((Object) "", (Object) null, (Collection<String>) linkedList0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append('?', '?');
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((int) (short)40, (int) (short) (-2086));
      assertSame(equalsBuilder0, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.lang3.builder.EqualsBuilder";
      stringArray0[1] = "R6HXYl-/MZ>IR(S>S/1";
      stringArray0[2] = "u";
      stringArray0[3] = "Cannot store ";
      stringArray0[4] = "";
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) null, object0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalAnd(false, false);
      Boolean.compare(false, false);
      Boolean.logicalXor(true, false);
      Boolean.getBoolean("");
      EqualsBuilder.getRegisterPair(object0, boolean0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[0];
      equalsBuilder0.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((double) 0, (double) 0);
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short)41, (short)41);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte)0, (byte)0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.appendSuper(true);
      int[] intArray0 = new int[0];
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((Object) "", (Object) equalsBuilder2);
      assertFalse(equalsBuilder4.isEquals());
      
      equalsBuilder5.setEquals(true);
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte[]) null, (byte[]) null);
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(true, true);
      equalsBuilder2.append(0.0, 1.0);
      EqualsBuilder equalsBuilder3 = equalsBuilder1.append((-229.8406), 0.0);
      assertFalse(equalsBuilder1.build());
      
      equalsBuilder3.reset();
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true);
      Object object0 = new Object();
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(object0, object0);
      assertTrue(equalsBuilder2.build());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 132.80904;
      doubleArray0[1] = (-1662.7148128219212);
      doubleArray0[2] = (-430.9);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 132.80904;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 132.80904;
      doubleArray1[3] = (-430.9);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-430.9);
      doubleArray1[6] = 132.80904;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-2632.444222626), (-2632.444222626));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 132.80904;
      objectArray0[2] = (Object) equalsBuilder1;
      objectArray0[3] = (Object) 0.0;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0);
      Boolean boolean0 = equalsBuilder5.build();
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      equalsBuilder0.append(booleanArray0, booleanArray0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte)5, (byte)0);
      assertFalse(equalsBuilder0.build());
      
      equalsBuilder1.reset();
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) "", (Object) "");
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((-2243L), 0L);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((boolean[]) null, (boolean[]) null);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) equalsBuilder3;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder2;
      objectArray0[5] = (Object) equalsBuilder2;
      objectArray0[6] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(objectArray0, (Object[]) null);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(true);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte) (-1), (byte) (-10));
      assertSame(equalsBuilder5, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[5] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, (Object[]) null);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(1640.36, 1.0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1806.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0);
      Object object0 = new Object();
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(object0, objectArray0[5]);
      int[] intArray0 = new int[3];
      intArray0[0] = 1660;
      intArray0[1] = 2570;
      intArray0[2] = (-1);
      int[] intArray1 = new int[5];
      intArray1[0] = 2570;
      intArray1[1] = 1660;
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = 1660;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray1);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2843);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(shortArray0, shortArray0);
      assertSame(equalsBuilder1, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)77;
      shortArray0[1] = (short) (-396);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      assertTrue(equalsBuilder1.isEquals());
      
      Object object0 = new Object();
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(object0, (Object) equalsBuilder0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append('}', 'c');
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-396);
      longArray0[1] = (long) (short)77;
      longArray0[2] = (long) (short)77;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(false, false);
      equalsBuilder5.append((Object) "Unexpected IllegalAccessException", (Object) "Unexpected IllegalAccessException");
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Pair<IDKey, IDKey> pair0 = EqualsBuilder.getRegisterPair((Object) null, (Object) null);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[0];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0.0, 0.0);
      assertTrue(equalsBuilder2.isEquals());
      
      EqualsBuilder equalsBuilder3 = equalsBuilder2.appendSuper(false);
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((Object) iDKey0, (Object) equalsBuilder0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(false, false);
      equalsBuilder5.append(charArray0, charArray0);
      boolean boolean0 = equalsBuilder1.isEquals();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EqualsBuilder.getRegistry();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.build());
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(637.15F, (-2629.1492F));
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(3796, 3796);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, true);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1035L, (long) 3796);
      Object object0 = new Object();
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(object0, (Object) null);
      equalsBuilder5.append('i', 'i');
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<EqualsBuilder> class0 = EqualsBuilder.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-iPhb";
      stringArray0[1] = "-iPhb";
      EqualsBuilder.reflectionEquals((Object) "-iPhb", (Object) "-iPhb", false, (Class<?>) class0, stringArray0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1.0, 1.0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('z', '+');
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 'z';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0.0F, 0.0F);
      EqualsBuilder.unregister(equalsBuilder4, "CoIRP@C_");
      assertSame(equalsBuilder4, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);
      double[] doubleArray0 = new double[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-200), (-200));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-200);
      floatArray0[1] = (float) (-200);
      floatArray0[2] = (float) (-200);
      floatArray0[3] = (float) (-200);
      floatArray0[4] = (float) (-200);
      floatArray0[5] = (-1051.0251F);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((Object) equalsBuilder2, (Object) equalsBuilder2);
      assertTrue(equalsBuilder5.isEquals());
      
      equalsBuilder5.appendSuper(false);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "A<|N";
      EqualsBuilder.reflectionEquals(object0, object1, false, class0, stringArray0);
      EqualsBuilder.getRegistry();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object object2 = new Object();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(object2, (Object) "9_2");
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((-1755), (-1755));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, true);
      assertSame(equalsBuilder1, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1060), (short)36);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      charArray0[2] = 'l';
      char[] charArray1 = new char[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) 'J';
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((long[]) null, (long[]) null);
      equalsBuilder5.setEquals(true);
      assertTrue(equalsBuilder5.build());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1700.0576F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short) (-1), (short) (-1));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append('\\', 'L');
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-1), (byte)0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(1700.0576F, 1700.0576F);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short)1835, (short)1180);
      assertSame(equalsBuilder5, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte[]) null, (byte[]) null);
      equalsBuilder1.append((byte)51, (byte)51);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('\\', 'd');
      assertFalse(equalsBuilder1.build());
      
      equalsBuilder1.reset();
      equalsBuilder0.build();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'd';
      equalsBuilder1.append(floatArray0, floatArray0);
      Boolean boolean0 = equalsBuilder2.build();
      boolean boolean1 = EqualsBuilder.isRegistered(boolean0, equalsBuilder2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      IDKey iDKey0 = new IDKey(equalsBuilder0);
      equalsBuilder0.append((Object) iDKey0, (Object) iDKey0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      equalsBuilder0.append(objectArray0, objectArray0);
      EqualsBuilder.unregister(equalsBuilder0, equalsBuilder0);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-3223), (-3223));
      assertTrue(equalsBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      equalsBuilder0.append((-1.0), (-1.0));
      assertTrue(equalsBuilder0.build());
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short)0, (short) (-1602));
      equalsBuilder1.append((Object) "wZGt", (Object) "7fGHF&q7>@AN`hV");
      EqualsBuilder.getRegistry();
      equalsBuilder1.append((byte) (-93), (byte) (-93));
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 956.02435;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 303.623961121963;
      doubleArray0[3] = 0.0;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[0];
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(byteArray0, byteArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0.0, 956.02435);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(false, true);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((int[]) null, (int[]) null);
      assertFalse(equalsBuilder6.build());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('u', 'u');
      assertTrue(equalsBuilder2.isEquals());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean0, false);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1.0, 1.0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-9689);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((byte) (-58), (byte) (-58));
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('?', '?');
      assertTrue(equalsBuilder4.build());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-58);
      floatArray0[1] = (float) (short) (-9689);
      floatArray0[2] = (float) (byte) (-58);
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) '?';
      floatArray1[1] = (float) (short) (-9689);
      floatArray1[2] = (float) '?';
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray1);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(floatArray1, floatArray0);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder6.isEquals());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-814);
      intArray0[3] = 3;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((int[]) null, intArray0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)96;
      shortArray0[1] = (short) (-559);
      shortArray0[2] = (short) (-3068);
      shortArray0[3] = (short) (-2007);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, false);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short) (-4068), (short)96);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append('M', 'M');
      float[] floatArray0 = new float[1];
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-2007);
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) (short) (-3068);
      longArray0[3] = (long) 0;
      equalsBuilder5.append(longArray0, longArray0);
      floatArray0[0] = (float) 1;
      equalsBuilder5.append(floatArray0, floatArray0);
      Object object0 = new Object();
      EqualsBuilder.getRegisterPair(equalsBuilder5, object0);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) equalsBuilder0;
      objectArray0[1] = (Object) equalsBuilder0;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder0;
      objectArray0[4] = (Object) equalsBuilder0;
      objectArray0[5] = (Object) equalsBuilder0;
      objectArray0[6] = (Object) equalsBuilder0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1306.565008796995;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-153.95036);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)429;
      shortArray0[1] = (short) (-23);
      shortArray0[2] = (short)516;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-9689);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-32768);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(shortArray0, shortArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3260.11F);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = 2793.0F;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short) (-23);
      floatArray0[7] = (float) (short) (-9689);
      floatArray0[8] = (float) (short)516;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-23);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)429;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-106);
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = (int) (short) (-1);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray0);
      assertTrue(equalsBuilder5.build());
      
      equalsBuilder5.append(shortArray0, (short[]) null);
      assertFalse(equalsBuilder5.isEquals());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[9];
      longArray0[0] = 1276L;
      longArray0[1] = (-984L);
      longArray0[2] = 1226L;
      longArray0[3] = (-5396L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[7] = (-462L);
      longArray0[8] = (-1L);
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 0);
      assertTrue(equalsBuilder2.build());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-363);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((double) 0, (double) (-1L));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-116), (byte) (-116));
      equalsBuilder5.append(false, false);
      assertFalse(equalsBuilder1.build());
      assertFalse(equalsBuilder5.build());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1421L, 1421L);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte) (-23), (byte) (-23));
      IDKey iDKey0 = new IDKey(equalsBuilder2);
      IDKey iDKey1 = new IDKey(equalsBuilder1);
      EqualsBuilder.reflectionEquals((Object) iDKey0, (Object) iDKey1, (String[]) null);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-23);
      intArray0[1] = (int) (byte) (-23);
      intArray0[2] = (int) (byte) (-23);
      intArray0[3] = 0;
      intArray0[4] = (int) (byte) (-23);
      intArray0[5] = 2605;
      intArray0[6] = (int) (byte) (-23);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      equalsBuilder1.append(booleanArray0, booleanArray1);
      equalsBuilder2.append((Object[]) null, (Object[]) null);
      intArray0[7] = (int) (byte) (-23);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((int[]) null, intArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-23);
      equalsBuilder3.append(shortArray0, shortArray0);
      equalsBuilder3.append((double) (byte) (-23), 0.0);
      Object object0 = new Object();
      EqualsBuilder.register("", object0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0, 0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) 0, 0.0F);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short[]) null, (short[]) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      EqualsBuilder.isRegistered(boolean0, object0);
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) "ni)<gm", (Object) "~u IQlwrw", (Collection<String>) linkedList0);
      assertFalse(boolean1);
      
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(false, false);
      equalsBuilder5.append((short[]) null, (short[]) null);
      IDKey iDKey0 = new IDKey(equalsBuilder5);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      EqualsBuilder.reflectionEquals((Object) equalsBuilder4, (Object) iDKey0, false, (Class<?>) class0, stringArray0);
      IDKey iDKey1 = new IDKey(boolean0);
      EqualsBuilder.getRegisterPair(iDKey1, "~u IQlwrw");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)0;
      equalsBuilder5.append(byteArray0, byteArray0);
      assertTrue(equalsBuilder5.build());
      assertTrue(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'J';
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = (double) 'p';
      doubleArray0[3] = (double) 'p';
      doubleArray0[4] = (double) 'p';
      doubleArray0[5] = (double) 'p';
      doubleArray0[6] = (double) 'p';
      doubleArray0[7] = (double) 'J';
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 'J';
      doubleArray1[1] = 1086.43102;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1);
      charArray0[1] = 'J';
      equalsBuilder0.append(charArray0, charArray0);
      ImmutablePair<EqualsBuilder, Object> immutablePair0 = new ImmutablePair<EqualsBuilder, Object>(equalsBuilder1, equalsBuilder0);
      EqualsBuilder.unregister(immutablePair0, equalsBuilder0);
      Object object0 = new Object();
      Object object1 = new Object();
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(object0, object1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 112.0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0);
      IDKey iDKey0 = new IDKey(object1);
      EqualsBuilder.register(equalsBuilder4, iDKey0);
      equalsBuilder2.append('J', 'J');
      equalsBuilder1.append(1610L, 2109L);
      EqualsBuilder equalsBuilder5 = equalsBuilder1.append((float) 2109L, (float) 1610L);
      assertSame(equalsBuilder5, equalsBuilder2);
      assertFalse(equalsBuilder5.isEquals());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      long[] longArray0 = new long[15];
      longArray0[0] = (-4616189618054758400L);
      longArray0[1] = 1L;
      longArray0[2] = 629L;
      longArray0[3] = (-1261L);
      longArray0[4] = 1720L;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[1] = false;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0);
      byte[] byteArray0 = new byte[0];
      equalsBuilder2.append(byteArray0, byteArray0);
      longArray0[5] = (-1815L);
      longArray0[6] = 2093L;
      EqualsBuilder equalsBuilder3 = equalsBuilder0.append(longArray0, longArray0);
      EqualsBuilder.isRegistered(equalsBuilder3, (Object) null);
      assertTrue(equalsBuilder3.build());
      
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      equalsBuilder0.append(booleanArray0, booleanArray1);
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      EqualsBuilder.unregister("Unexpected IllegalAccessException", "Unexpected IllegalAccessException");
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[5];
      intArray0[3] = (-2200);
      intArray0[4] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2200);
      objectArray0[1] = (Object) equalsBuilder2;
      objectArray0[3] = (Object) (-2200);
      EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
      objectArray0[4] = (Object) "Unexpected IllegalAccessException";
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) (-2200);
      EqualsBuilder equalsBuilder4 = equalsBuilder2.append(objectArray0, objectArray1);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) (-2200), (double) 1531);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-67);
      equalsBuilder1.setEquals(true);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(longArray0, longArray0);
      equalsBuilder6.append(1054, 0);
      EqualsBuilder equalsBuilder7 = equalsBuilder3.append(587, (-2740));
      equalsBuilder7.append(intArray0, intArray0);
      assertFalse(equalsBuilder0.build());
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 4061.6345F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = 4061.6345F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      long[] longArray0 = new long[4];
      longArray0[1] = 0L;
      longArray0[2] = 3412L;
      long[] longArray1 = new long[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0L, 0L);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('0', '0');
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      equalsBuilder3.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(false);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((Object) equalsBuilder0, (Object) equalsBuilder4);
      assertSame(equalsBuilder6, equalsBuilder2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 4061.6345F;
      float[] floatArray1 = new float[1];
      floatArray1[0] = 4061.6345F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      long[] longArray0 = new long[4];
      longArray0[1] = 0L;
      longArray0[1] = 3412L;
      long[] longArray1 = new long[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0L, 0L);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('0', '0');
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      equalsBuilder0.reset();
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      equalsBuilder3.append(charArray0, charArray0);
      ImmutablePair<String, Object> immutablePair0 = new ImmutablePair<String, Object>("!Cd(", equalsBuilder3);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EqualsBuilder.reflectionEquals((Object) immutablePair0, (Object) immutablePair0, (Collection<String>) linkedHashSet0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.appendSuper(false);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((Object) equalsBuilder0, (Object) equalsBuilder4);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) equalsBuilder4;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) equalsBuilder6;
      objectArray0[3] = (Object) '0';
      equalsBuilder4.append(objectArray0, objectArray0);
      assertFalse(equalsBuilder0.isEquals());
      assertFalse(equalsBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Integer integer0 = new Integer((-5854));
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) integer0, (Object) integer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)117;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte) (-110);
      byteArray1[3] = (byte)64;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-50);
      objectArray0[1] = (Object) (byte)106;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder1;
      objectArray0[4] = (Object) (byte) (-118);
      objectArray0[5] = (Object) (byte) (-110);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('w', '_');
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(0.0, (double) (byte) (-118));
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short) (-122), (short) (byte)106);
      assertSame(equalsBuilder6, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      Integer integer0 = new Integer((-5854));
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) integer0, (Object) integer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)64;
      byteArray0[5] = (byte) (-110);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)117;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)64;
      byteArray0[2] = (byte) (-110);
      byteArray1[3] = (byte)64;
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-50);
      objectArray0[1] = (Object) (byte)106;
      objectArray0[2] = (Object) equalsBuilder0;
      objectArray0[3] = (Object) equalsBuilder1;
      objectArray0[4] = (Object) (byte) (-118);
      objectArray0[5] = (Object) (byte)0;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('w', '_');
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(0.0, (double) (byte) (-118));
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short) (-122), (short) (byte)106);
      assertFalse(equalsBuilder6.isEquals());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1700.0576F;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short) (-1), (short) (-1));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append('\\', '1');
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-1), (byte)0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(1700.0576F, 1700.0576F);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf(true);
      IDKey iDKey0 = new IDKey(equalsBuilder1);
      ImmutablePair<Boolean, Object> immutablePair0 = new ImmutablePair<Boolean, Object>(boolean0, iDKey0);
      IDKey iDKey1 = new IDKey(immutablePair0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EqualsBuilder.reflectionEquals(object0, (Object) iDKey1, (Collection<String>) linkedList0);
      equalsBuilder5.append(190, 190);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short)1835, (short)1180);
      assertSame(equalsBuilder6, equalsBuilder2);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-80), (byte)22);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(true, true);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-80);
      intArray0[1] = (int) (byte) (-80);
      intArray0[2] = (int) (byte) (-80);
      intArray0[3] = (int) (byte) (-80);
      intArray0[4] = (int) (byte)22;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-80);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte) (-80);
      floatArray0[3] = (float) (-80);
      floatArray0[4] = (float) (byte)22;
      intArray0[0] = (-80);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = '9';
      charArray0[3] = '^';
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(0.0F, 92.8075F);
      assertSame(equalsBuilder6, equalsBuilder1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      long[] longArray0 = new long[0];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-251);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-251);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-1);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-413.235F), (-813.0F));
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(true, true);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.appendSuper(false);
      assertSame(equalsBuilder2, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Object object0 = new Object();
      EqualsBuilder.register(object0, object0);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertTrue(equalsBuilder0.isEquals());
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-456.55264F), 0.0F);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) "", (Object) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'R';
      charArray0[3] = 'w';
      charArray0[4] = 'G';
      charArray0[5] = 'v';
      charArray0[6] = 'm';
      charArray0[7] = 'b';
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray0);
      int[] intArray0 = new int[16];
      intArray0[0] = (int) 'z';
      intArray0[1] = (int) 'R';
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) 'v';
      intArray0[4] = (int) 'z';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'R';
      intArray0[7] = (int) 'b';
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(intArray0, intArray0);
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(118, 118);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)2;
      equalsBuilder5.append(byteArray0, byteArray0);
      assertFalse(equalsBuilder0.isEquals());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      EqualsBuilder.unregister("Unexpected IllegalAccessException", "Unexpected IllegalAccessException");
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      int[] intArray0 = new int[5];
      intArray0[0] = 1376;
      intArray0[1] = (-6918);
      intArray0[2] = 1531;
      intArray0[3] = (-2200);
      intArray0[4] = 0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2200);
      objectArray0[1] = (Object) equalsBuilder2;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) (-2200);
      equalsBuilder0.append(true, true);
      objectArray0[4] = (Object) "Unexpected IllegalAccessException";
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) (-2200);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray1);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((double) (-2200), (double) 1531);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-67);
      longArray0[1] = (long) 1376;
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(longArray0, longArray0);
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(0, 1531);
      assertSame(equalsBuilder3, equalsBuilder6);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0L, 0L);
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "', is neither of type Map.Entry nor an Array";
      Object object1 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("rGTPJTlvB8");
      EqualsBuilder.reflectionEquals((Object) equalsBuilder1, (Object) null, (Collection<String>) linkedHashSet0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(570.7051829804, 570.7051829804);
      EqualsBuilder.unregister(object1, equalsBuilder2);
      stringArray0[1] = "";
      stringArray0[2] = " 7c^M0E#r]T%";
      stringArray0[3] = "FS6z\u0004([uF*Ha";
      stringArray0[4] = ", Length: ";
      EqualsBuilder.reflectionEquals((Object) equalsBuilder0, object0, false, (Class<?>) class0, stringArray0);
      equalsBuilder1.reset();
      equalsBuilder0.setEquals(false);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0.0, 2116.79736909);
      assertSame(equalsBuilder1, equalsBuilder3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)40;
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short) (-633);
      shortArray1[3] = (short) (-2086);
      shortArray1[4] = (short) (-1);
      shortArray1[5] = (short)40;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(false);
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((long) (short) (-633), 496L);
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short)1, (short) (-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((int) (short)40, (int) (short) (-2086));
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '?';
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) (short) (-633);
      objectArray0[1] = (Object) (short) (-1);
      objectArray0[2] = (Object) (short)40;
      objectArray0[3] = (Object) '?';
      objectArray0[4] = (Object) (short) (-1);
      objectArray0[5] = (Object) equalsBuilder5;
      equalsBuilder2.append(objectArray0, objectArray0);
      charArray0[6] = '?';
      charArray0[7] = '?';
      EqualsBuilder equalsBuilder6 = equalsBuilder3.append(charArray0, charArray0);
      assertFalse(equalsBuilder6.isEquals());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      EqualsBuilder.getRegistry();
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'r';
      charArray0[2] = '}';
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(2109L, (-1L));
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((Object) equalsBuilder0, (Object) equalsBuilder1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) equalsBuilder2;
      objectArray0[1] = (Object) equalsBuilder1;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0.0F, (float) (byte)2);
      byteArray0[7] = (byte) (-114);
      equalsBuilder2.append((byte[]) null, byteArray0);
      objectArray0[2] = (Object) '}';
      EqualsBuilder equalsBuilder5 = equalsBuilder3.append(objectArray0, objectArray0);
      assertSame(equalsBuilder5, equalsBuilder4);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Object object0 = new Object();
      IDKey iDKey0 = new IDKey(object0);
      IDKey iDKey1 = new IDKey(iDKey0);
      IDKey iDKey2 = new IDKey(object0);
      EqualsBuilder.reflectionEquals((Object) iDKey1, (Object) iDKey2, false);
      EqualsBuilder.getRegisterPair(iDKey2, ".9VfX]t6sdTS=");
      EqualsBuilder.isRegistered(".9VfX]t6sdTS=", iDKey2);
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object[]) null, (Object[]) null);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)36;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2865;
      shortArray0[5] = (short)2454;
      shortArray0[6] = (short)67;
      shortArray0[7] = (short) (-377);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(booleanArray0, booleanArray0);
      assertTrue(equalsBuilder1.build());
      
      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short)67, (short)1652);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray1);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-377);
      longArray0[2] = 0L;
      EqualsBuilder equalsBuilder6 = equalsBuilder5.append(longArray0, longArray0);
      assertFalse(equalsBuilder1.build());
      assertFalse(equalsBuilder6.isEquals());
  }
}
