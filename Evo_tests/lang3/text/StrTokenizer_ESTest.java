/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 13:54:49 GMT 2022
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'G', '\u0000');
      assertEquals(9, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher_CharSetMatcher0);
      assertEquals(9, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 's', 'C');
      assertEquals(0, charArray0.length);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(strTokenizer0);
      
      List<String> list0 = strTokenizer0.tokenize(charArray0, 1786, (-1443));
      assertEquals(0, charArray0.length);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = ',';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      String string0 = strTokenizer0.nextToken();
      assertEquals("", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string0);
      
      String string1 = strTokenizer1.next();
      assertEquals(7, charArray0.length);
      assertEquals("", string1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.previousIndex());
      assertEquals(2, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.previousIndex());
      assertEquals(2, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String string2 = strTokenizer0.previousToken();
      assertEquals("", string2);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[8];
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('I');
      assertNotNull(strMatcher_CharMatcher0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher_CharMatcher0, strMatcher_NoMatcher0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrMatcher strMatcher1 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher1);
      
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, strMatcher0, strMatcher1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("=V<GEos?Xd", 'F', '!');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      char[] charArray0 = new char[7];
      List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36);
      assertEquals(7, charArray0.length);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      char[] charArray0 = new char[7];
      List<String> list0 = strTokenizer0.tokenize(charArray0, 0, 2);
      assertEquals(7, charArray0.length);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(list0.contains(""));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("wT#y?+X");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset("");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      
      int int0 = strTokenizer1.size();
      assertEquals(0, int0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("N<w+hrWoJ_H$&?");
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.next();
      assertEquals("N<w+hrWoJ_H$&?", string0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertNotNull(string0);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[22];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertNotNull(strTokenizer1);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setTrimmerMatcher(strMatcher0);
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer2.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer2.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer2.previousIndex());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer2);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer2);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer0);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer1);
      //  // Unstable assertion: assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      //  // Unstable assertion: assertEquals(5, charArray0.length);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      //  // Unstable assertion: assertNotNull(strMatcher0);
      
      String string0 = strTokenizer0.nextToken();
      //  // Unstable assertion: assertEquals(5, charArray0.length);
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(1, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      //  // Unstable assertion: assertNull(string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);
      //  // Unstable assertion: assertEquals(5, charArray0.length);
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(1, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.previousIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(1, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      //  // Unstable assertion: assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher_TrimMatcher0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[7];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "org.apache.commons.lang3.text.StrMatcher$TrimMatcher");
      assertEquals(7, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(7, charArray0.length);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setQuoteMatcher(strMatcher0);
      assertEquals(7, charArray0.length);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.next();
      assertEquals("Nl22#", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNotNull(string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('@');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", "Nc5,");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('*');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#");
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setQuoteChar('@');
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid");
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      String string0 = strTokenizer0.next();
      assertEquals("length must be valid", string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher_TrimMatcher0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[7];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "org.apache.commons.lang3.text.StrMatcher$TrimMatcher");
      assertEquals(7, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(7, charArray0.length);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredMatcher(strMatcher_NoMatcher0);
      assertEquals(7, charArray0.length);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = ',';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      String string0 = strTokenizer0.nextToken();
      assertEquals("", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string0);
      
      String string1 = strTokenizer0.next();
      assertEquals("", string1);
      assertEquals(2, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string1);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('_');
      assertEquals(7, charArray0.length);
      assertEquals(2, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(2, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer1.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer2.previousIndex());
      assertEquals(2, strTokenizer2.nextIndex());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      char[] charArray0 = new char[7];
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      String string0 = strTokenizer0.nextToken();
      assertEquals("", string0);
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string0);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('f');
      assertEquals(7, charArray0.length);
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.previousIndex());
      assertEquals(1, strTokenizer2.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("org.apache.commons.lang3.text.StrMatcher$StringMatcher", ',', ',');
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('S');
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      //  // Unstable assertion: assertEquals(3, charArray0.length);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      //  // Unstable assertion: assertEquals(3, charArray0.length);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      //  // Unstable assertion: assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('\\');
      //  // Unstable assertion: assertEquals(3, charArray0.length);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer2.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer2.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer2.previousIndex());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer2);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer2);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer0);
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      //  // Unstable assertion: assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer1.forEachRemaining(consumer0);
      assertEquals(5, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setIgnoreEmptyTokens(false);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer2.nextIndex());
      assertEquals(0, strTokenizer2.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("HO", "k,*=iMdn!:7_#XW");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setIgnoreEmptyTokens(true);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.next();
      assertEquals("Nl22#", string0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNotNull(string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("?f");
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.next();
      //  // Unstable assertion: assertEquals("?f", string0);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(1, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertNotNull(string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("?f");
      //  // Unstable assertion: assertEquals(0, strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(1, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.previousIndex());
      //  // Unstable assertion: assertEquals(1, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(4, charArray0.length);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterString("X0/k1)OeoZ>(*J8");
      assertEquals(4, charArray0.length);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("N<w+hrWoJ_H$&?");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.next();
      assertEquals("N<w+hrWoJ_H$&?", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNotNull(string0);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.previousIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setDelimiterMatcher(strMatcher0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.next();
      assertEquals("Nl22#", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNotNull(string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('q');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(1, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", "B_9");
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('K');
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[22];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setDelimiterChar('c');
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer2.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals((-1), strTokenizer2.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer2.nextIndex());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer2);
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer0);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer1);
      //  // Unstable assertion: assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertNotNull(strTokenizer1);
      
      char[] charArray0 = new char[7];
      StrTokenizer strTokenizer2 = strTokenizer1.reset(charArray0);
      //  // Unstable assertion: assertEquals(7, charArray0.length);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertTrue(strTokenizer2.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer2.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer2.previousIndex());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer2);
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer2);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer0);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer1);
      //  // Unstable assertion: assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      //  // Unstable assertion: assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer1.reset("");
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer0.reset();
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer2.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer2.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer2.isEmptyTokenAsNull());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer2);
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer2, strTokenizer0);
      //  // Unstable assertion: assertNotNull(strTokenizer2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance((char[]) null);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset("set() is unsupported");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      
      String string0 = strTokenizer0.nextToken();
      assertEquals("set() is unsupported", string0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string0);
      
      String string1 = strTokenizer0.previousToken();
      assertEquals("set() is unsupported", string1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("HO", "k,*=iMdn!:7_#XW");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.next();
      assertEquals("HO", string0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(string0);
      
      int int0 = strTokenizer0.previousIndex();
      assertEquals(0, int0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.nextToken();
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      int int0 = strTokenizer0.nextIndex();
      assertEquals(3, charArray0.length);
      assertEquals(1, int0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[22];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex());
      //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertSame(strTokenizer1, strTokenizer0);
      //  // Unstable assertion: assertNotNull(strTokenizer1);
      
      String string0 = strTokenizer0.next();
      //  // Unstable assertion: assertEquals(22, charArray0.length);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(1, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertSame(strTokenizer0, strTokenizer1);
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("");
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("HO", "k,*=iMdn!:7_#XW");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      
      boolean boolean0 = strTokenizer1.isEmptyTokenAsNull();
      assertTrue(boolean0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("wT#y?+X");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset("");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      
      List<String> list0 = strTokenizer0.getTokenList();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(strTokenizer0, strTokenizer1);
      assertFalse(list0.contains(""));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", 'R');
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.getContent();
      assertEquals("", string0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertNotSame(strTokenizer0, strTokenizer1);
      assertNotSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer1.equals((Object)strTokenizer0));
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("yOgWC&@FPSz*OgO$", 'O');
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strTokenizer0.tokenize(charArray0, 0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "Invalid startIndex: ");
      assertEquals(1, charArray0.length);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher((StrMatcher) null);
      assertEquals(1, charArray0.length);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[6];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'H');
      assertEquals(6, charArray0.length);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher((StrMatcher) null);
      assertEquals(6, charArray0.length);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported");
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.nextToken();
      assertEquals("add()", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(string0);
      
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertTrue(boolean0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("?f");
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher0 = strTokenizer0.getTrimmerMatcher();
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertNotNull(strMatcher0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("#jonI");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher0 = strTokenizer0.getQuoteMatcher();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strMatcher0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.reset();
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      boolean boolean0 = strTokenizer0.isEmptyTokenAsNull();
      assertFalse(boolean0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, strMatcher_TrimMatcher0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(false);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("4bjp3Al/L#k$VA", strMatcher0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("vj|n-cJ.4(");
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher0 = strTokenizer0.getDelimiterMatcher();
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strMatcher0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher0 = strTokenizer0.getIgnoredMatcher();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strMatcher0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported");
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strTokenizer0);
      
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertTrue(boolean0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[not tokenized yet]", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      assertNotNull(strMatcher_StringMatcher0);
      
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone();
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertNotSame(strTokenizer0, strTokenizer1);
      assertNotSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer1.equals((Object)strTokenizer0));
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.getContent();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: ");
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      String string0 = strTokenizer0.getContent();
      //  // Unstable assertion: assertEquals("Invaid startIndex: ", string0);
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("oaKy'LB", 'E');
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(strTokenizer0);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("oaKy'LB");
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", 'u');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher((StrMatcher) null);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, (StrMatcher) null, (StrMatcher) null);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strTokenizer0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher((StrMatcher) null);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: ");
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      
      boolean boolean0 = strTokenizer0.hasNext();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '9';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'G', '\u0000');
      assertEquals(9, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher_CharSetMatcher0);
      assertEquals(9, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setIgnoredMatcher(strMatcher_CharSetMatcher0);
      assertEquals(9, charArray0.length);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer2);
      
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '9';
      charArray0[3] = '9';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'G', '\u0000');
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'G', '\u0000');
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      strTokenizer0.setQuoteMatcher(strMatcher_CharSetMatcher0);
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.setDelimiterChar(' ');
      String string0 = strTokenizer0.previousToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", "");
      strTokenizer0.reset((char[]) null);
      boolean boolean0 = strTokenizer0.hasNext();
      assertFalse(boolean0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0);
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      strTokenizer1.next();
      assertEquals(0, strTokenizer1.previousIndex());
      
      String string0 = strTokenizer0.previous();
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0);
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0);
      String string0 = strTokenizer0.nextToken();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      char[] charArray0 = new char[22];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      String[] stringArray0 = strTokenizer0.getTokenArray();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "org.apache.commons.lang3.text.StrMatcher");
      int int0 = strTokenizer0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      String[] stringArray0 = strTokenizer0.getTokenArray();
      //  // Unstable assertion: assertEquals(1, stringArray0.length);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "org.apache.commons.lang3.text.StrMatcher");
      // Undeclared exception!
      try { 
        strTokenizer0.set("kMz@kC}RZ^NI");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, ')', '$');
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: ");
      int int0 = strTokenizer0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0);
      // Undeclared exception!
      try { 
        strTokenizer0.add("add() is unsupported");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("Pi", strMatcher0, strMatcher0);
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertFalse(boolean0);
      
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[Pi]", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      char[] charArray0 = new char[22];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      List<String> list0 = strTokenizer1.getTokenList();
      assertEquals(1, list0.size());
  }
}
