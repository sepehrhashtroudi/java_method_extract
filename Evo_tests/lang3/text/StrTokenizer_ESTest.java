/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 04:05:38 GMT 2021
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      strTokenizer0.setQuoteChar('e');
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      boolean boolean0 = strTokenizer1.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[6] = '0';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      strTokenizer0.next();
      strTokenizer0.previous();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher_NoMatcher0, strMatcher0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("");
      StrMatcher strMatcher1 = StrMatcher.charMatcher('2');
      StrTokenizer strTokenizer0 = new StrTokenizer("U", strMatcher0, strMatcher1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("O;I", 'U', 'r');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("UWYmf)=ep:q", "");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f");
      char[] charArray0 = new char[6];
      List<String> list0 = strTokenizer0.tokenize(charArray0, 1, (-463));
      assertTrue(list0.isEmpty());
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.size();
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported");
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer1.forEachRemaining(consumer0);
      strTokenizer1.previousToken();
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0);
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0);
      assertEquals(2, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrBuilder");
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0);
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.setTrimmerMatcher((StrMatcher) null);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[2] = 'B';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      strTokenizer0.next();
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("BW ]-a", strMatcher_NoMatcher0);
      strTokenizer0.nextToken();
      strTokenizer0.setQuoteMatcher(strMatcher_NoMatcher0);
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      strTokenizer0.setEmptyTokenAsNull(true);
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/.");
      strTokenizer0.setDelimiterMatcher(strMatcher0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setQuoteChar('e');
      assertEquals(1, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setQuoteChar('e');
      //  // Unstable assertion: assertEquals(1, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0);
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('<');
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('5');
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher_NoMatcher0);
      String string0 = strTokenizer0.next();
      assertEquals("\u0000\u0000", string0);
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('D');
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher_CharMatcher0);
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      strTokenizer1.setIgnoredMatcher(strMatcher0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[6] = '0';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      String string0 = strTokenizer0.next();
      assertEquals("0", string0);
      
      strTokenizer0.setIgnoredChar('u');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("BW ]-a", strMatcher_NoMatcher0);
      strTokenizer0.nextToken();
      strTokenizer0.setIgnoredChar('J');
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('5');
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported");
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer1.forEachRemaining(consumer0);
      strTokenizer0.previousToken();
      strTokenizer1.setIgnoreEmptyTokens(true);
      assertEquals(1, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setIgnoreEmptyTokens(true);
      assertEquals(2, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false);
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[6] = '0';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      strTokenizer0.next();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("nFgu8hR=<", strMatcher0);
      strTokenizer0.next();
      strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0QND2L");
      //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(false);
      //  // Unstable assertion: assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[6] = '0';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      strTokenizer0.next();
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("rcJP~");
      assertSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "set() is unsupported");
      String string0 = strTokenizer0.next();
      assertEquals("\u0000\u0000\u0000", string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("set() is unsupported");
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("&c_&");
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("L=x.TI0z4D9");
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterString("TsNCo]&_$I5.aM");
      assertEquals(0, strTokenizer2.nextIndex());
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[6] = '0';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      StrMatcher strMatcher1 = StrMatcher.stringMatcher("end < start");
      String string0 = strTokenizer0.next();
      assertEquals("0", string0);
      
      strTokenizer0.setDelimiterMatcher(strMatcher1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/.");
      strTokenizer0.next();
      strTokenizer0.setDelimiterMatcher(strMatcher0);
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("QOc-$");
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterMatcher(strMatcher0);
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer2.nextIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[2] = 'B';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      strTokenizer0.next();
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('H');
      assertSame(strTokenizer0, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f");
      strTokenizer0.nextToken();
      strTokenizer0.setDelimiterChar('S');
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.setDelimiterChar('*');
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      StrTokenizer strTokenizer1 = strTokenizer0.reset("");
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.reset("set() is unsupported");
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      strTokenizer0.reset();
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.reset();
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/.");
      strTokenizer0.setDelimiterMatcher(strMatcher0);
      strTokenizer0.nextToken();
      strTokenizer0.previousToken();
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("kfk");
      assertEquals(0, strTokenizer0.nextIndex());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      int int0 = strTokenizer0.previousIndex();
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[6] = '0';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.next();
      strTokenizer0.next();
      int int0 = strTokenizer0.previousIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/.");
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0);
      strTokenizer1.nextToken();
      assertEquals(0, strTokenizer1.previousIndex());
      
      strTokenizer0.previous();
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("");
      char[] charArray0 = new char[6];
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertEquals(0, strTokenizer1.nextIndex());
      
      strTokenizer1.nextToken();
      assertEquals(1, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f");
      String string0 = strTokenizer0.nextToken();
      assertNotNull(string0);
      
      int int0 = strTokenizer0.nextIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.next();
      assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported");
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher0);
      char[] charArray1 = new char[4];
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '[';
      charArray1[3] = '[';
      strTokenizer1.reset(charArray1);
      strTokenizer0.setIgnoreEmptyTokens(false);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      String string0 = strTokenizer1.next();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertTrue(boolean0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "set() is unsupported");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      boolean boolean0 = strTokenizer0.isEmptyTokenAsNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0);
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      strTokenizer0.hasNext();
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      List<String> list0 = strTokenizer0.getTokenList();
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("");
      strTokenizer0.getContent();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "set() is unsupported");
      strTokenizer0.next();
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.getTrimmerMatcher();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("`<j[.Hj#z$ak.1\"Rd", strMatcher0);
      strTokenizer0.getQuoteMatcher();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '\'');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported", strMatcher0);
      boolean boolean0 = strTokenizer0.isEmptyTokenAsNull();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0);
      strTokenizer0.getDelimiterMatcher();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f");
      strTokenizer0.getIgnoredMatcher();
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"Li");
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone();
      assertNotSame(strTokenizer1, strTokenizer0);
      assertEquals((-1), strTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      strTokenizer0.isIgnoreEmptyTokens();
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrBuilder");
      String string0 = strTokenizer0.toString();
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals("StrTokenizer[not tokenized yet]", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.toString();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset();
      assertEquals(0, strTokenizer1.nextIndex());
      assertNotSame(strTokenizer1, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.getContent();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"Li");
      String string0 = strTokenizer0.getContent();
      assertEquals(0, strTokenizer0.nextIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0QND2L");
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher((StrMatcher) null);
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher((StrMatcher) null);
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("");
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher((StrMatcher) null);
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("UQ&ZFv0Je_(b+/.");
      strTokenizer0.setQuoteChar('e');
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      boolean boolean0 = strTokenizer1.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'B';
      charArray0[3] = 'r';
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      strTokenizer0.setDelimiterChar('B');
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('\u0000');
      boolean boolean0 = strTokenizer1.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      strTokenizer0.setQuoteChar('e');
      char[] charArray0 = new char[10];
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      boolean boolean0 = strTokenizer1.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");
      strTokenizer0.setQuoteChar('e');
      char[] charArray0 = new char[10];
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      boolean boolean0 = strTokenizer1.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid offset: ", "Invalid offset: ");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("Invalid offset: ");
      strTokenizer0.setQuoteMatcher(strMatcher0);
      strTokenizer0.setTrimmerMatcher(strMatcher0);
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('%');
      String[] stringArray0 = strTokenizer1.getTokenArray();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.setIgnoredChar(',');
      String[] stringArray0 = strTokenizer0.getTokenArray();
      assertEquals(2, stringArray0.length);
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      int int0 = strTokenizer1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, strMatcher0);
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null);
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("");
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, 'I');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.reset((char[]) null);
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.previousToken();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "Invalid offset: ");
      // Undeclared exception!
      try { 
        strTokenizer0.set((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'c', 'O');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      // Undeclared exception!
      try { 
        strTokenizer0.tokenize(charArray0, 0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupportKd", 'C', 'C');
      int int0 = strTokenizer0.nextIndex();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"Li");
      // Undeclared exception!
      try { 
        strTokenizer0.add("\"Li");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, strMatcher0);
      strTokenizer0.nextToken();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid offset: ", "Invalid offset: ");
      int int0 = strTokenizer0.previousIndex();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "Invalid offset: ");
      List<String> list0 = strTokenizer0.getTokenList();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(list0.isEmpty());
  }
}
