/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 12:30:08 GMT 2022
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Properties;
import java.util.function.ToIntFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-4389));
      Integer integer1 = ObjectUtils.cloneIfPossible(integer0);
      assertEquals((-4389), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "T=MeZ<N71! hMK+\"w;";
      String string0 = ObjectUtils.median(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1);
      Integer integer1 = ObjectUtils.defaultIfNull((Integer) null, integer0);
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-3568));
      Integer integer1 = new Integer(187);
      Integer integer2 = ObjectUtils.defaultIfNull(integer0, integer1);
      assertEquals((-3568), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Integer integer0 = new Integer(0);
      ObjectUtils.identityToString(stringBuffer0, (Object) integer0);
      assertEquals(19, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RenderingHints[] renderingHintsArray0 = new RenderingHints[6];
      LinkedHashMap<RenderingHints.Key, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<RenderingHints.Key, MockSimpleDateFormat>();
      RenderingHints renderingHints0 = new RenderingHints(linkedHashMap0);
      renderingHintsArray0[0] = renderingHints0;
      renderingHintsArray0[1] = renderingHints0;
      renderingHintsArray0[2] = renderingHintsArray0[0];
      renderingHintsArray0[5] = renderingHintsArray0[0];
      RenderingHints renderingHints1 = ObjectUtils.mode(renderingHintsArray0);
      assertSame(renderingHints1, renderingHints0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToIntFunction<BufferCapabilities> toIntFunction0 = (ToIntFunction<BufferCapabilities>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(10, 0, 0, 448, (-32768)).when(toIntFunction0).applyAsInt(any(java.awt.BufferCapabilities.class));
      Comparator<BufferCapabilities> comparator0 = Comparator.comparingInt((ToIntFunction<? super BufferCapabilities>) toIntFunction0);
      BufferCapabilities[] bufferCapabilitiesArray0 = new BufferCapabilities[3];
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      bufferCapabilitiesArray0[0] = bufferCapabilities0;
      bufferCapabilitiesArray0[1] = bufferCapabilities0;
      bufferCapabilitiesArray0[2] = bufferCapabilities0;
      BufferCapabilities bufferCapabilities1 = ObjectUtils.median(comparator0, bufferCapabilitiesArray0);
      assertFalse(bufferCapabilities1.isFullScreenRequired());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1689));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals((-1664653280), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = ObjectUtils.compare("Cannot clone Cloneable type ", ")EdL#bH:4wY+'X{N!=");
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ObjectUtils.compare("%8YOm\"JXn@N-", "Cannot get the toString of a null identity");
      assertEquals((-30), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Properties properties0 = ObjectUtils.CONST((Properties) null);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = ObjectUtils.CONST((long) 663);
      assertEquals(663L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float float0 = ObjectUtils.CONST(256.03F);
      assertEquals(256.03F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char char0 = ObjectUtils.CONST('?');
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char char0 = ObjectUtils.CONST('0');
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)31);
      assertEquals((byte)31, byte0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DecimalFormat[] decimalFormatArray0 = new DecimalFormat[6];
      DecimalFormat decimalFormat0 = new DecimalFormat("}l}Y92%$PEOvF:i`B4");
      decimalFormatArray0[0] = decimalFormat0;
      decimalFormatArray0[1] = decimalFormatArray0[0];
      decimalFormatArray0[2] = decimalFormatArray0[1];
      decimalFormatArray0[3] = decimalFormatArray0[0];
      decimalFormatArray0[4] = decimalFormat0;
      decimalFormatArray0[5] = decimalFormatArray0[0];
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<DecimalFormat>) null, decimalFormatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null comparator
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RuleBasedCollator ruleBasedCollator0 = new RuleBasedCollator("'$WSJKZCiV4OR0,m^AN");
      Comparator<ImageCapabilities> comparator0 = Comparator.nullsLast((Comparator<? super ImageCapabilities>) ruleBasedCollator0);
      ImageCapabilities[] imageCapabilitiesArray0 = new ImageCapabilities[6];
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      imageCapabilitiesArray0[0] = imageCapabilities0;
      imageCapabilitiesArray0[1] = imageCapabilitiesArray0[0];
      imageCapabilitiesArray0[2] = imageCapabilitiesArray0[0];
      imageCapabilitiesArray0[3] = imageCapabilitiesArray0[1];
      imageCapabilitiesArray0[4] = imageCapabilitiesArray0[0];
      imageCapabilitiesArray0[5] = imageCapabilities0;
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, imageCapabilitiesArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.ImageCapabilities cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = new Locale("", "j8O%Xfy>", "j8O%Xfy>");
      BreakIterator breakIterator0 = BreakIterator.getWordInstance(locale0);
      // Undeclared exception!
      try { 
        ObjectUtils.cloneIfPossible(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance(locale0);
      // Undeclared exception!
      try { 
        ObjectUtils.clone((Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot clone Cloneable type sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MockGregorianCalendar mockGregorianCalendar1 = ObjectUtils.clone(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = ObjectUtils.compare("iXo/@Up~&'vFS:vfZ", "/DZ/MUVJ_", true);
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      int int0 = ObjectUtils.compare((Integer) null, (Integer) dimension0.height, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer((-1689));
      int int0 = ObjectUtils.compare(integer0, integer0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) imageCapabilities0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(0, 0);
      boolean boolean0 = ObjectUtils.equals((Object) dimension0, (Object) rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        ObjectUtils.CONST_SHORT(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [2147483647]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(2245);
      assertEquals((short)2245, short0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      try { 
        ObjectUtils.CONST_SHORT((-2147483618));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-2147483618]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      try { 
        ObjectUtils.CONST_BYTE(187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [187]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      try { 
        ObjectUtils.CONST_BYTE((short) (-222));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-222]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ChronoLocalDate chronoLocalDate0 = ObjectUtils.cloneIfPossible((ChronoLocalDate) null);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("", 0);
      Object object0 = ObjectUtils.cloneIfPossible((Object) stringCharacterIterator0);
      assertNotSame(object0, stringCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = ObjectUtils.mode(objectArray0);
      Object object1 = ObjectUtils.clone(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale[] localeArray0 = new Locale[9];
      Locale locale0 = Locale.FRANCE;
      localeArray0[0] = locale0;
      localeArray0[1] = localeArray0[0];
      Locale locale1 = new Locale("^=fVF`yAs", "\"nn=9zTb");
      localeArray0[2] = locale1;
      localeArray0[3] = localeArray0[2];
      localeArray0[4] = localeArray0[2];
      localeArray0[6] = localeArray0[0];
      Locale locale2 = ObjectUtils.mode(localeArray0);
      assertNull(locale2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RenderingHints[] renderingHintsArray0 = new RenderingHints[0];
      RenderingHints renderingHints0 = ObjectUtils.mode(renderingHintsArray0);
      assertNull(renderingHints0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@1";
      stringArray0[1] = "org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@1";
      String string0 = ObjectUtils.min(stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((-260));
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = ObjectUtils.max(mutableIntArray0);
      assertEquals("-260", mutableInt1.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = ObjectUtils.min(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ObjectUtils.mode(objectArray0);
      String string0 = ObjectUtils.toString(object0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Float float0 = new Float((double) (short)127);
      MutableInt mutableInt0 = new MutableInt(float0);
      String string0 = ObjectUtils.toString((Object) mutableInt0, "java.lang.Float@2");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      String string0 = ObjectUtils.toString((Object) gridBagConstraints0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null identity
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ObjectUtils.mode(objectArray0);
      String string0 = ObjectUtils.identityToString(object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      String string0 = ObjectUtils.identityToString((Object) mockSimpleDateFormat0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      boolean boolean0 = ObjectUtils.notEqual(chronoUnit0, "v.n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp((-1));
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) timestamp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = ObjectUtils.notEqual((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("v.n");
      boolean boolean0 = ObjectUtils.equals((Object) choiceFormat0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("", 0);
      objectArray0[2] = (Object) stringCharacterIterator0;
      StringCharacterIterator stringCharacterIterator1 = (StringCharacterIterator)ObjectUtils.firstNonNull(objectArray0);
      assertEquals(0, stringCharacterIterator1.getIndex());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ObjectUtils.firstNonNull(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ArrayList<Collator> arrayList0 = ObjectUtils.firstNonNull((ArrayList<Collator>[]) null);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PageAttributes pageAttributes0 = ObjectUtils.defaultIfNull((PageAttributes) null, (PageAttributes) null);
      assertNull(pageAttributes0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      RuleBasedCollator ruleBasedCollator0 = new RuleBasedCollator("'$WSJKZCiV4OR0,m^AN");
      Comparator<ImageCapabilities> comparator0 = Comparator.nullsLast((Comparator<? super ImageCapabilities>) ruleBasedCollator0);
      ImageCapabilities[] imageCapabilitiesArray0 = new ImageCapabilities[6];
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, imageCapabilitiesArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) (-422L));
      assertEquals((-422.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ImageCapabilities imageCapabilities1 = ObjectUtils.CONST(imageCapabilities0);
      assertTrue(imageCapabilities1.isAccelerated());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double double0 = ObjectUtils.CONST(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)1665);
      assertEquals((short)1665, short0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char char0 = ObjectUtils.CONST('e');
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-79));
      assertEquals((byte) (-79), byte0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      long long0 = ObjectUtils.CONST((long) (-422));
      assertEquals((-422L), long0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = ObjectUtils.CONST(1425);
      assertEquals(1425, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = ObjectUtils.compare((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
      ObjectUtils.hashCode((Object) objectUtils_Null0);
  }
}
