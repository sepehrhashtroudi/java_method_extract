/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:17:47 GMT 2021
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.TimedSemaphore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimedSemaphore_ESTest extends TimedSemaphore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1426L, timeUnit0, 1867);
      timedSemaphore0.setLimit(1867);
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      timedSemaphore0.setLimit(1867);
      timedSemaphore0.acquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.acquire();
      timedSemaphore0.getUnit();
      timedSemaphore0.setLimit(1867);
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@74d9667a rejected from java.util.concurrent.ScheduledThreadPoolExecutor@757fd6b1[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(830L, timeUnit0, 0);
      timedSemaphore0.setLimit(0);
      timedSemaphore0.setLimit(0);
      timedSemaphore0.acquire();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.getLimit();
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.isShutdown();
      timedSemaphore0.getLimit();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1462L, timeUnit0, 1);
      timedSemaphore0.setLimit((-675));
      timedSemaphore0.startTimer();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(1);
      timedSemaphore0.shutdown();
      timedSemaphore0.endOfPeriod();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@45bfb728 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@65649c18[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(120L, timeUnit0, 1089);
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(1089);
      timedSemaphore0.isShutdown();
      timedSemaphore0.getPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.getPeriod();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.isShutdown();
      timedSemaphore0.endOfPeriod();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(2908L, timeUnit0, 1553);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.endOfPeriod();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(2677L, timeUnit0, 2907);
      timedSemaphore0.setLimit((-840));
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit(2907);
      timedSemaphore0.acquire();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.isShutdown();
      timedSemaphore0.getPeriod();
      timedSemaphore0.isShutdown();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.getPeriod();
      timedSemaphore0.getAverageCallsPerPeriod();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, (-2622));
      timedSemaphore0.startTimer();
      timedSemaphore0.shutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getLimit();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1556L, timeUnit0, (-1));
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.startTimer();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.getUnit();
      timedSemaphore0.getPeriod();
      timedSemaphore0.acquire();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(4173L, timeUnit0, 2041);
      timedSemaphore0.isShutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getPeriod();
      timedSemaphore0.setLimit(2041);
      timedSemaphore0.getUnit();
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.getLimit();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1, timeUnit0, (-3225));
      timedSemaphore0.setLimit(1);
      timedSemaphore0.setLimit((-1156));
      scheduledThreadPoolExecutor0.getKeepAliveTime(timeUnit0);
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, (-1));
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit((-1));
      timedSemaphore0.shutdown();
      int int0 = 0;
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      int int0 = (-706);
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore((ScheduledExecutorService) null, 0L, timeUnit0, (-706));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore((ScheduledExecutorService) null, 2992L, timeUnit0, 1);
      timedSemaphore0.startTimer();
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      int int0 = 976;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(0L, timeUnit0, 976);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      int int0 = 342;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(0L, timeUnit0, 342);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.getThreadFactory();
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "");
      mockThread0.getContextClassLoader();
      MockThread mockThread1 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      Thread[] threadArray0 = new Thread[4];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[3] = (Thread) mockThread0;
      MockThread.enumerate(threadArray0);
      scheduledThreadPoolExecutor0.shutdownNow();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread.reset();
      // Undeclared exception!
      try { 
        scheduledThreadPoolExecutor0.submit((Runnable) mockThread0);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@3af1ebb6 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@29e0b06f[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(97L, timeUnit0, (-1));
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.getUnit();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.startTimer();
      timedSemaphore0.shutdown();
      timedSemaphore0.getPeriod();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.isShutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.shutdown();
      timedSemaphore0.getPeriod();
      timedSemaphore0.getUnit();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-5923), threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      int int0 = 1;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(0L, timeUnit0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-858);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(114L, timeUnit0, 1);
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@4f3bb10d rejected from java.util.concurrent.ScheduledThreadPoolExecutor@70b8275c[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 0, timeUnit0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater 0!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "");
      MockThread mockThread3 = new MockThread(mockThread2);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(501, threadFactory0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread3, scheduledThreadPoolExecutor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(501, threadPoolExecutor_DiscardPolicy0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor1, 501, timeUnit0, 501);
      timedSemaphore0.isShutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.acquire();
      timedSemaphore0.startTimer();
      assertEquals(1, timedSemaphore0.getAcquireCount());
  }
}
