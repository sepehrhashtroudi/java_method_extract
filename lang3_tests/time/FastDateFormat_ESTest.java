/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 03:36:24 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, (Locale) null);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3318, 3318);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3318
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("E\\E", timeZone0, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("1/1/70 12:00 AM", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("fHHU7%+T");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateFormat0.parse("12:00:00 AM GMT", parsePosition0);
      assertEquals("java.text.ParsePosition[index=15,errorIndex=-1]", parsePosition0.toString());
      assertEquals(15, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0);
      Date date0 = fastDateFormat0.parse("Jan 1, 1970");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "The validated state is false");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-5588), "The validated state is false");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "The validated state is false", 3, 3, 3, 0, 0, 2, 3, 2, 2);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("N~]M Dl\"[|z%i7m2");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      assertEquals(1, FastDateFormat.LONG);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("&", timeZone0);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(":\u0002", locale0);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("fHHU7%+T");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format(calendar0, stringBuffer0);
      assertEquals("8:21:21 PM GMT", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2);
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1225), ";3q^1Hv3rK6");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 13);
      fastDateFormat0.format((Object) calendar0, stringBuffer0, fieldPosition0);
      assertEquals("8:21:20 PM", stringBuffer0.toString());
      assertEquals("8:21:20 PM", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(65);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1133, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, (TimeZone) simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(1078);
      // Undeclared exception!
      try { 
        fastDateFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2537, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2537
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-176), (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -176
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1780), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1780
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-221));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -221
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("N~]M Dl\"[|z%i7m2");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(165, "$k]Vbl`iJ/Lx?oy5]");
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("yb9K+j{P", (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("", locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("w");
      Locale locale0 = fastDateFormat0.getLocale();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[MMM d, yyyy h:mm:ss a z,en,GMT]", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern character '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$1", 950, 0, 950, 950, 100, 0, 0, 0);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(100, 100, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 100
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(766, 1927, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1927
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(5, 0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-545), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -545
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1931), "Ps*/x)_pvI>o$srwe4");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(10, (TimeZone) simpleTimeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3370), "^y");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3370), (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3370
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2881));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2881
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("qrsR/%M!clftM");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      MockDate mockDate0 = new MockDate(1336, 3, 41);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0, 3, 2);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Illegal pattern character '");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      FieldPosition fieldPosition0 = new FieldPosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "Illegal pattern character '", (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("'");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, "(p{IsNd}++)");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringWriter stringWriter0 = new StringWriter(1072);
      mockGregorianCalendar0.set(0, 1072);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",ES[HI-h>'lM]-?7");
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat(",ES[HI-h>'lM]-?7", timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "::G8$6y3b<M/>dH65", 0, 0, 0, 0, 1, 0, 0, 916, 198);
      Locale locale0 = Locale.forLanguageTag("::G8$6y3b<M/>dH65");
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("::G8$6y3b<M/>dH65", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      boolean boolean0 = fastDateFormat0.equals(";3q^1H>3r}6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, "(p{IsNd}++)");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0);
      StringWriter stringWriter0 = new StringWriter(1072);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDateFormat0.format((long) 1, stringBuffer0);
      assertEquals(37, stringBuffer0.length());
      assertEquals("January 1, 1970 12:00:01 AM GMT+00:00", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0);
      String string0 = fastDateFormat0.format(1L);
      assertEquals("Jan 1, 1970", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W#E");
      MockDate mockDate0 = new MockDate(1);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertEquals("1#Thu", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2, 1, 0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("0002\u5E743\u67082\u65E5 1\u664200\u520600\u79D2 GMT", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("'");
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0);
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("Feb 14, 2014", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FormatCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("CGnq5w2>W6Y47X");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      fastDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 0, 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertEquals(24, stringBuffer0.length());
      assertEquals("1899\u5E7412\u670831\u65E5 1\u664200\u520601\u79D2 GMT", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[M/d/yy h:mm a,en,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      MockDate mockDate0 = new MockDate(3, 1, (-309), (-2011), (-2011), 3);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) mockDate0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("CGnq5w2>W6Y47X");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(3);
      Date date0 = fastDateFormat0.parse("FastDateFormat[M/d/yy h:mm a,en,GMT]", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("CGnq5w2>W6Y47X");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      String string0 = fastDateFormat0.getPattern();
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      try { 
        fastDateFormat0.parse("=)5gFIXM");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"=)5gFIXM\" does not match (\\Q\u4E0A\u5348\\E|\\Q\u4E0B\u5348\\E|\\Qa\\E|\\Qp\\E)(\\p{IsNd}++)\\Q\u6642\\E(\\p{IsNd}++)\\Q\u5206\\E(\\p{IsNd}++)\\Q\u79D2\\E\\Q \\E(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|\\QACDT\\E|\\QAcre \u6642\u9593\\E|\\QACST\\E|\\QACT\\E|\\QACWST\\E|\\QADT\\E|\\QAEDT\\E|\\QAEST\\E|\\QAFT\\E|\\QAKDT\\E|\\QAKST\\E|\\QAlma-Ata \u6642\u9593\\E|\\QALMT\\E|\\QAMT\\E|\\QANAT\\E|\\QAqtau \u6642\u9593\\E|\\QAqtobe \u6642\u9593\\E|\\QAQTT\\E|\\QART\\E|\\QAST\\E|\\QAWST\\E|\\QAZOST\\E|\\QAZOT\\E|\\QAZT\\E|\\QBDT\\E|\\QBNT\\E|\\QBOT\\E|\\QBougainville Standard Time\\E|\\QBRT\\E|\\QBST\\E|\\QBTT\\E|\\QCAT\\E|\\QCCT\\E|\\QCDT\\E|\\QCEST\\E|\\QCET\\E|\\QCHADT\\E|\\QCHAST\\E|\\QCHOT\\E|\\QChST\\E|\\QCHUT\\E|\\QCKT\\E|\\QCLST\\E|\\QCLT\\E|\\QCOT\\E|\\QCST\\E|\\QCVT\\E|\\QCXT\\E|\\QDAVT\\E|\\QDDUT\\E|\\QDumont-d'Urville \u6642\u9593\\E|\\QEASST\\E|\\QEAST\\E|\\QEAT\\E|\\QECT\\E|\\QEDT\\E|\\QEEST\\E|\\QEET\\E|\\QEGST\\E|\\QEGT\\E|\\QEST\\E|\\QFJST\\E|\\QFJT\\E|\\QFKT\\E|\\QFNT\\E|\\QGALT\\E|\\QGAMT\\E|\\QGET\\E|\\QGFT\\E|\\QGILT\\E|\\QGMT\\E|\\QGMT+01:00\\E|\\QGMT+02:00\\E|\\QGMT+03:00\\E|\\QGMT+04:00\\E|\\QGMT+05:00\\E|\\QGMT+06:00\\E|\\QGMT+07:00\\E|\\QGMT+08:00\\E|\\QGMT+09:00\\E|\\QGMT+10:00\\E|\\QGMT+11:00\\E|\\QGMT+12:00\\E|\\QGMT+13:00\\E|\\QGMT+14:00\\E|\\QGMT-01:00\\E|\\QGMT-02:00\\E|\\QGMT-03:00\\E|\\QGMT-04:00\\E|\\QGMT-05:00\\E|\\QGMT-06:00\\E|\\QGMT-07:00\\E|\\QGMT-08:00\\E|\\QGMT-09:00\\E|\\QGMT-10:00\\E|\\QGMT-11:00\\E|\\QGMT-12:00\\E|\\QGST\\E|\\QGYT\\E|\\QHDT\\E|\\QHKT\\E|\\QHOVT\\E|\\QHST\\E|\\QICT\\E|\\QIDT\\E|\\QIOT\\E|\\QIRDT\\E|\\QIRKT\\E|\\QIrkutsk \u6642\u9593\\E|\\QIRST\\E|\\QIST\\E|\\QJST\\E|\\QKGT\\E|\\QKirgizstan \u6642\u9593\\E|\\QKosrae \u6642\u9593\\E|\\QKOST\\E|\\QKostanay Standard Time\\E|\\QKRAT\\E|\\QKST\\E|\\QLHDT\\E|\\QLHST\\E|\\QLine Is. \u6642\u9593\\E|\\QLINT\\E|\\QMagadan \u6642\u9593\\E|\\QMAGT\\E|\\QMART\\E|\\QMAWT\\E|\\QMDT\\E|\\QMEST\\E|\\QMET\\E|\\QMHT\\E|\\QMIST\\E|\\QMMT\\E|\\QMSK\\E|\\QMST\\E|\\QMUT\\E|\\QMVT\\E|\\QMYT\\E|\\QNCT\\E|\\QNDT\\E|\\QNFST\\E|\\QNFT\\E|\\QNovosibirsk \u6642\u9593\\E|\\QNOVT\\E|\\QNPT\\E|\\QNRT\\E|\\QNST\\E|\\QNUT\\E|\\QNZDT\\E|\\QNZST\\E|\\QOMST\\E|\\QORAT\\E|\\QPDT\\E|\\QPET\\E|\\QPetropavlovsk-Kamchatski \u6642\u9593\\E|\\QPETT\\E|\\QPGT\\E|\\QPhilippines Standard Time\\E|\\QPHOT\\E|\\QPKT\\E|\\QPMDT\\E|\\QPMST\\E|\\QPONT\\E|\\QPST\\E|\\QPWT\\E|\\QPYST\\E|\\QPYT\\E|\\QQOST\\E|\\QQYZT\\E|\\QQyzylorda \u6642\u9593\\E|\\QRET\\E|\\QROTT\\E|\\QSAKT\\E|\\QSAMT\\E|\\QSAST\\E|\\QSBT\\E|\\QSCT\\E|\\QSGT\\E|\\QSrednekolymsk Time\\E|\\QSRET\\E|\\QSRT\\E|\\QSST\\E|\\QSYOT\\E|\\QTAHT\\E|\\QTFT\\E|\\QTJT\\E|\\QTKT\\E|\\QTLT\\E|\\QTMT\\E|\\QTOT\\E|\\QTST\\E|\\QTVT\\E|\\QULAT\\E|\\QUTC\\E|\\QUYT\\E|\\QUZT\\E|\\QVET\\E|\\QVLAT\\E|\\QVOST\\E|\\QVUT\\E|\\QWAKT\\E|\\QWAT\\E|\\QWEST\\E|\\QWET\\E|\\QWFT\\E|\\QWGST\\E|\\QWGT\\E|\\QWIB\\E|\\QWIT\\E|\\QWITA\\E|\\QWSDT\\E|\\QWSST\\E|\\QXJT\\E|\\QYAKT\\E|\\QYekaterinburg \u6642\u9593\\E|\\QYEKT\\E|\\Q\u4E0D\u4E39\u6642\u9593\\E|\\Q\u4E2D\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593\\E|\\Q\u4E2D\u570B\u6A19\u6E96\u6642\u9593\\E|\\Q\u4E2D\u592E\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u4E2D\u592E\u6A19\u6E96\u6642\u9593\\E|\\Q\u4E2D\u6B50\u590F\u4EE4\u6642\u9593\\E|\\Q\u4E2D\u6B50\u6642\u9593\\E|\\Q\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\u9593 (\u6FB3\u5927\u5229\u4E9E)\\E|\\Q\u4E2D\u90E8\u590F\u4EE4\u6642\u9593 (\u6FB3\u5927\u5229\u4E9E\u5357\u5340)\\E|\\Q\u4E2D\u90E8\u590F\u4EE4\u6642\u9593 (\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF)\\E|\\Q\u4E2D\u90E8\u6A19\u6E96\u6642\u9593 (\u5317\u90E8\u5404\u5730\u5340)\\E|\\Q\u4E2D\u90E8\u6A19\u6E96\u6642\u9593 (\u6FB3\u5927\u5229\u4E9E\u5357\u5340/\u65B0\u5357\u5A01\u723E\u65AF)\\E|\\Q\u4E2D\u90E8\u6A19\u6E96\u6642\u9593 (\u6FB3\u5927\u5229\u4E9E\u5357\u90E8)\\E|\\Q\u4E2D\u975E\u6642\u9593\\E|\\Q\u4E9E\u585E\u62DC\u7136\u6642\u9593\\E|\\Q\u4E9E\u5EAB\u6B21\u514B\u6642\u9593\\E|\\Q\u4E9E\u7F8E\u5C3C\u4E9E\u6642\u9593\\E|\\Q\u4E9E\u901F\u723E\u7FA4\u5CF6\u590F\u4EE4\u6642\u9593\\E|\\Q\u4E9E\u901F\u723E\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u4E9E\u99AC\u905C\u6642\u9593\\E|\\Q\u4EE5\u8272\u5217\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u4EE5\u8272\u5217\u6A19\u6E96\u6642\u9593\\E|\\Q\u4F0A\u6717\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u4F0A\u6717\u6A19\u6E96\u6642\u9593\\E|\\Q\u4F5B\u5FB7\u89D2\u6642\u9593\\E|\\Q\u4F5B\u65AF\u6258 (Vostok) \u6642\u9593\\E|\\Q\u4FAF\u5FB7 (Hovd) \u6642\u9593\\E|\\Q\u514B\u62C9\u65AF\u8AFE\u4E9E\u723E\u65AF\u514B\u6642\u9593\\E|\\Q\u52A0\u62C9\u5DF4\u54E5\u6642\u9593\\E|\\Q\u5354\u8ABF\u4E16\u754C\u6642\u9593\\E|\\Q\u5357\u55AC\u6CBB\u4E9E\u6A19\u6E96\u6642\u9593\\E|\\Q\u5357\u975E\u6A19\u6E96\u6642\u9593\\E|\\Q\u5370\u5EA6\u652F\u90A3\u6642\u9593\\E|\\Q\u5370\u5EA6\u6A19\u6E96\u6642\u9593\\E|\\Q\u5370\u5EA6\u6D0B\u5730\u5340\u6642\u9593\\E|\\Q\u5384\u74DC\u591A\u723E\u6642\u9593\\E|\\Q\u53E4\u5DF4\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u53E4\u5DF4\u6A19\u6E96\u6642\u9593\\E|\\Q\u53EF\u53EF\u65AF\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u53F0\u7063\u6A19\u6E96\u6642\u9593\\E|\\Q\u5409\u4F2F\u7279\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u5410\u9B6F\u74E6\u6642\u9593\\E|\\Q\u54E5\u502B\u6BD4\u4E9E\u6642\u9593\\E|\\Q\u55AC\u6CBB\u4E9E\u6642\u9593\\E|\\Q\u571F\u5EAB\u66FC\u6642\u9593\\E|\\Q\u5854\u5409\u514B\u6642\u9593\\E|\\Q\u585E\u5E2D\u723E\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u590F\u5A01\u5937\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u590F\u5A01\u5937\u6A19\u6E96\u6642\u9593\\E|\\Q\u5915\u6B50\u74E6 (Syowa) \u6642\u9593\\E|\\Q\u5927\u6EAA\u5730\u5CF6\u6642\u9593\\E|\\Q\u5927\u897F\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u5927\u897F\u6D0B\u6A19\u6E96\u6642\u9593\\E|\\Q\u592A\u5E73\u6D0B\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u592A\u5E73\u6D0B\u6A19\u6E96\u6642\u9593\\E|\\Q\u59D4\u5167\u745E\u62C9\u6642\u9593\\E|\\Q\u5A01\u514B\u6642\u9593\\E|\\Q\u5B5F\u52A0\u62C9\u6642\u9593\\E|\\Q\u5C3C\u6CCA\u723E\u6642\u9593\\E|\\Q\u5C71\u5340\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u5C71\u5340\u6A19\u6E96\u6642\u9593\\E|\\Q\u5DE7\u5DF4\u5C71 (Choibalsan) \u6642\u9593\\E|\\Q\u5DF4\u57FA\u65AF\u5766\u6642\u9593\\E|\\Q\u5DF4\u5E03\u4E9E\u65B0\u5E7E\u5167\u4E9E\u6642\u9593\\E|\\Q\u5DF4\u62C9\u572D\u590F\u4EE4\u6642\u9593\\E|\\Q\u5DF4\u62C9\u572D\u6642\u9593\\E|\\Q\u5DF4\u897F\u5229\u4E9E\u6642\u9593\\E|\\Q\u5E1B\u7409\u6642\u9593\\E|\\Q\u5EAB\u502B\u6642\u9593\\E|\\Q\u5EAB\u514B\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u5EAB\u9801\u5CF6\u6642\u9593\\E|\\Q\u5FA9\u6D3B\u5CF6\u590F\u4EE4\u6642\u9593\\E|\\Q\u5FA9\u6D3B\u5CF6\u6642\u9593\\E|\\Q\u611B\u723E\u862D\u590F\u4EE4\u6642\u9593\\E|\\Q\u6240\u7F85\u9580\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u6258\u514B\u52DE\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u6469\u91CC\u897F\u65AF\u6642\u9593\\E|\\Q\u6590\u6FDF\u590F\u4EE4\u6642\u9593\\E|\\Q\u6590\u6FDF\u6642\u9593\\E|\\Q\u65B0\u52A0\u52D2\u591A\u5C3C\u4E9E\u6642\u9593\\E|\\Q\u65B0\u52A0\u5761\u6642\u9593\\E|\\Q\u65E5\u672C\u6A19\u6E96\u6642\u9593\\E|\\Q\u667A\u5229\u590F\u4EE4\u6642\u9593\\E|\\Q\u667A\u5229\u6642\u9593\\E|\\Q\u6771\u52A0\u6642\u9593\\E|\\Q\u6771\u5370\u5EA6\u5C3C\u897F\u4E9E\u6642\u9593\\E|\\Q\u6771\u5E1D\u6C76\u6642\u9593\\E|\\Q\u6771\u65B9\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u6771\u65B9\u6A19\u6E96\u6642\u9593\\E|\\Q\u6771\u683C\u6797\u5CF6\u590F\u4EE4\u6642\u9593\\E|\\Q\u6771\u683C\u6797\u5CF6\u6642\u9593\\E|\\Q\u6771\u6B50\u590F\u4EE4\u6642\u9593\\E|\\Q\u6771\u6B50\u6642\u9593\\E|\\Q\u6771\u90E8\u590F\u4EE4\u6642\u9593 (\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6)\\E|\\Q\u6771\u90E8\u590F\u4EE4\u6642\u9593 (\u65B0\u5357\u5A01\u723E\u65AF)\\E|\\Q\u6771\u90E8\u590F\u4EE4\u6642\u9593 (\u7DAD\u591A\u5229\u4E9E\u90A6)\\E|\\Q\u6771\u90E8\u6A19\u6E96\u6642\u9593 (\u5854\u65AF\u6885\u5C3C\u4E9E\u5CF6)\\E|\\Q\u6771\u90E8\u6A19\u6E96\u6642\u9593 (\u65B0\u5357\u5A01\u723E\u65AF)\\E|\\Q\u6771\u90E8\u6A19\u6E96\u6642\u9593 (\u6606\u58EB\u862D)\\E|\\Q\u6771\u90E8\u6A19\u6E96\u6642\u9593 (\u7DAD\u591A\u5229\u4E9E\u90A6)\\E|\\Q\u6771\u975E\u6642\u9593\\E|\\Q\u67E5\u5766\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u67E5\u5766\u6A19\u6E96\u6642\u9593\\E|\\Q\u67E5\u83AB\u6D1B\u6A19\u6E96\u6642\u9593\\E|\\Q\u683C\u6797\u5A01\u6CBB\u5E73\u5747\u6642\u9593\\E|\\Q\u683C\u6797\u5A01\u6CBB\u6642\u9593\\E|\\Q\u695A\u514B\u6642\u9593\\E|\\Q\u6B50\u4F5B\u6642\u9593\\E|\\Q\u6B50\u59C6\u65AF\u514B (Omsk) \u6642\u9593\\E|\\Q\u6C76\u840A\u6642\u9593\\E|\\Q\u6C99\u99AC\u62C9\u6642\u9593\\E|\\Q\u6CD5\u570B\u5357\u534A\u7403\u53CA\u5357\u6975\u5C6C\u5730\u6642\u9593\\E|\\Q\u6CD5\u5C6C\u572D\u4E9E\u90A3\u6642\u9593\\E|\\Q\u6CE2\u65AF\u7063\u6A19\u6E96\u6642\u9593\\E|\\Q\u6CE2\u7D0D\u4F69\u6642\u9593\\E|\\Q\u6D77\u53C3\u5D34\u6642\u9593\\E|\\Q\u70CF\u62C9\u572D\u6642\u9593\\E|\\Q\u70CF\u65AF\u5167\u62C9 (Ust-Nera) \u6642\u9593\\E|\\Q\u70CF\u8332\u5225\u514B\u65AF\u5766\u6642\u9593\\E|\\Q\u73BB\u5229\u7DAD\u4E9E\u6642\u9593\\E|\\Q\u74E6\u5229\u65AF\u53CA\u798F\u675C\u7D0D\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u74E6\u5974\u963F\u5716\u6642\u9593\\E|\\Q\u7518\u6BD4\u723E\u6642\u9593\\E|\\Q\u7559\u5C3C\u65FA\u5CF6\u6642\u9593\\E|\\Q\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u76AE\u57C3\u723E\u5CF6\u53CA\u5BC6\u514B\u9686\u5CF6\u6A19\u6E96\u6642\u9593\\E|\\Q\u76AE\u7279\u5EB7\u6A19\u6E96\u6642\u9593\\E|\\Q\u7955\u9B6F\u6642\u9593\\E|\\Q\u798F\u514B\u862D\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u7D10\u5A01\u5CF6\u6642\u9593\\E|\\Q\u7D10\u82AC\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u7D10\u82AC\u862D\u6A19\u6E96\u6642\u9593\\E|\\Q\u7D10\u897F\u862D\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u7D10\u897F\u862D\u6A19\u6E96\u6642\u9593\\E|\\Q\u7DEC\u7538\u6642\u9593\\E|\\Q\u7F85\u897F\u62C9\u6642\u9593\\E|\\Q\u8056\u8A95\u5CF6\u6642\u9593\\E|\\Q\u81FA\u7DAD\u65AF\u6642\u9593\\E|\\Q\u82F1\u570B\u590F\u4EE4\u6642\u9593\\E|\\Q\u83AB\u65AF\u79D1\u6A19\u6E96\u6642\u9593\\E|\\Q\u83AB\u68EE\u6642\u9593\\E|\\Q\u83F2\u5C3C\u514B\u65AF\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u84CB\u4E9E\u90A3\u6642\u9593\\E|\\Q\u85A9\u6469\u4E9E\u6A19\u6E96\u6642\u9593\\E|\\Q\u8607\u5229\u5357\u6642\u9593\\E|\\Q\u897F\u5370\u5C3C\u6642\u9593\\E|\\Q\u897F\u683C\u6797\u862D\u5CF6\u590F\u4EE4\u6642\u9593\\E|\\Q\u897F\u683C\u6797\u862D\u5CF6\u6642\u9593\\E|\\Q\u897F\u6B50\u590F\u4EE4\u6642\u9593\\E|\\Q\u897F\u6B50\u6642\u9593\\E|\\Q\u897F\u85A9\u6469\u4E9E\u590F\u4EE4\u6642\u9593\\E|\\Q\u897F\u85A9\u6469\u4E9E\u6642\u9593\\E|\\Q\u897F\u90E8\u6A19\u6E96\u6642\u9593 (\u6FB3\u5927\u5229\u4E9E)\\E|\\Q\u897F\u975E\u6642\u9593\\E|\\Q\u8AFE\u798F\u514B\u590F\u4EE4\u6642\u9593\\E|\\Q\u8AFE\u798F\u514B\u6642\u9593\\E|\\Q\u8AFE\u9B6F\u6642\u9593\\E|\\Q\u8C6A\u52F3\u7235\u5CF6\u590F\u4EE4\u6642\u9593\\E|\\Q\u8C6A\u52F3\u7235\u5CF6\u6A19\u6E96\u6642\u9593\\E|\\Q\u8CBB\u723E\u5357\u591A-\u8FEA\u8AFE\u7F85\u5C3C\u4E9E\u6642\u9593\\E|\\Q\u8FE6\u7D0D\u5E73\u5747\u6642\u9593\\E|\\Q\u963F\u5BCC\u6C57\u6642\u9593\\E|\\Q\u963F\u62C9\u4F2F\u6A19\u6E96\u6642\u9593\\E|\\Q\u963F\u62C9\u65AF\u52A0\u65E5\u5149\u7BC0\u7D04\u6642\u9593\\E|\\Q\u963F\u62C9\u65AF\u52A0\u6A19\u6E96\u6642\u9593\\E|\\Q\u963F\u6839\u5EF7\u6642\u9593\\E|\\Q\u963F\u90A3\u5E95\u6CB3\u6642\u9593\\E|\\Q\u97D3\u570B\u6A19\u6E96\u6642\u9593\\E|\\Q\u9999\u6E2F\u6642\u9593\\E|\\Q\u99AC\u4F86\u897F\u4E9E\u6642\u9593\\E|\\Q\u99AC\u514B\u85A9\u65AF\u6642\u9593\\E|\\Q\u99AC\u723E\u5730\u592B\u6642\u9593\\E|\\Q\u99AC\u7D39\u723E\u7FA4\u5CF6\u6642\u9593\\E|\\Q\u9EA5\u5938\u5229\u5CF6\u590F\u4EE4\u6642\u9593\\E|\\Q\u9EA5\u5938\u5229\u5CF6\u6642\u9593\\E)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("", timeZone0, locale0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(31, " locale does not support dates before 1868 AD)\nUnparseable date: \"");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }
}
