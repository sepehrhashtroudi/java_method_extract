/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:38:36 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import org.apache.commons.lang3.EnumUtils;
import org.apache.commons.lang3.JavaVersion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnumUtils_ESTest extends EnumUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion[] javaVersionArray0 = new JavaVersion[3];
      JavaVersion javaVersion0 = JavaVersion.JAVA_0_9;
      javaVersionArray0[0] = javaVersion0;
      JavaVersion javaVersion1 = JavaVersion.JAVA_1_6;
      javaVersionArray0[1] = javaVersion1;
      javaVersionArray0[2] = javaVersion0;
      long[] longArray0 = EnumUtils.generateBitVectors(class0, javaVersionArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {65L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion[] javaVersionArray0 = new JavaVersion[5];
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_1;
      javaVersionArray0[0] = javaVersion0;
      javaVersionArray0[1] = javaVersionArray0[0];
      javaVersionArray0[2] = javaVersionArray0[0];
      javaVersionArray0[3] = javaVersionArray0[0];
      javaVersionArray0[4] = javaVersionArray0[1];
      long long0 = EnumUtils.generateBitVector(class0, javaVersionArray0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      boolean boolean0 = EnumUtils.isValidEnum(class0, "JAVA_1_3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion javaVersion0 = EnumUtils.getEnum(class0, "JAVA_1_8");
      assertEquals(JavaVersion.JAVA_1_8, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion[] javaVersionArray0 = new JavaVersion[0];
      long long0 = EnumUtils.generateBitVector(class0, javaVersionArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      LinkedHashSet<JavaVersion> linkedHashSet0 = new LinkedHashSet<JavaVersion>();
      ArrayDeque<JavaVersion> arrayDeque0 = new ArrayDeque<JavaVersion>(linkedHashSet0);
      long long0 = EnumUtils.generateBitVector(class0, (Iterable<JavaVersion>) arrayDeque0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      // Undeclared exception!
      try { 
        EnumUtils.processBitVectors(class0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.processBitVector((Class<JavaVersion>) null, 256L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // EnumClass must be defined.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.isValidEnum((Class<JavaVersion>) null, "k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.getEnumMap((Class<JavaVersion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.EnumUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.getEnumList((Class<JavaVersion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.EnumUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtils.getEnum((Class<JavaVersion>) null, "o*I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, (JavaVersion[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion[] javaVersionArray0 = new JavaVersion[6];
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, javaVersionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      ArrayList<JavaVersion> arrayList0 = new ArrayList<JavaVersion>();
      List<JavaVersion> list0 = arrayList0.subList(0, 0);
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_4;
      arrayList0.add(javaVersion0);
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, (Iterable<JavaVersion>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, (Iterable<JavaVersion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, (JavaVersion[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      ArrayList<JavaVersion> arrayList0 = new ArrayList<JavaVersion>();
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_1;
      List<JavaVersion> list0 = arrayList0.subList(0, 0);
      arrayList0.add(javaVersion0);
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, (Iterable<JavaVersion>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, (Iterable<JavaVersion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      long[] longArray0 = new long[4];
      EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0);
      assertEquals(0, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      long[] longArray0 = new long[0];
      EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0);
      assertEquals(0, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      HashSet<JavaVersion> hashSet0 = new HashSet<JavaVersion>(0, 1.0F);
      hashSet0.add((JavaVersion) null);
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVectors(class0, (Iterable<JavaVersion>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null elements not permitted
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      Comparator<JavaVersion> comparator0 = (Comparator<JavaVersion>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-852)).when(comparator0).compare(any(org.apache.commons.lang3.JavaVersion.class) , any(org.apache.commons.lang3.JavaVersion.class));
      TreeSet<JavaVersion> treeSet0 = new TreeSet<JavaVersion>(comparator0);
      treeSet0.add((JavaVersion) null);
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, (Iterable<JavaVersion>) treeSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null elements not permitted
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVector(class0, (-944L));
      long long0 = EnumUtils.generateBitVector(class0, (Iterable<JavaVersion>) enumSet0);
      assertEquals(80L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      EnumUtils.getEnum(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      EnumUtils.getEnum(class0, "k");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      boolean boolean0 = EnumUtils.isValidEnum(class0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      boolean boolean0 = EnumUtils.isValidEnum(class0, "k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      Map<String, JavaVersion> map0 = EnumUtils.getEnumMap(class0);
      assertEquals(9, map0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      List<JavaVersion> list0 = EnumUtils.getEnumList(class0);
      long[] longArray0 = EnumUtils.generateBitVectors(class0, (Iterable<JavaVersion>) list0);
      EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0);
      assertEquals(9, enumSet0.size());
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<JavaVersion> class0 = JavaVersion.class;
      JavaVersion[] javaVersionArray0 = new JavaVersion[1];
      // Undeclared exception!
      try { 
        EnumUtils.generateBitVector(class0, javaVersionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EnumUtils enumUtils0 = new EnumUtils();
  }
}
