/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 04:35:37 GMT 2021
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodUtils_ESTest extends MethodUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "toLowerCase", "toLowerCase", (Object[]) null, (Class<?>[]) null);
      assertEquals("tolowercase", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "hashCode", (Class<?>[]) null);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[6];
      accessibleObjectArray0[0] = (AccessibleObject) method0;
      accessibleObjectArray0[1] = (AccessibleObject) method0;
      accessibleObjectArray0[2] = (AccessibleObject) method0;
      accessibleObjectArray0[3] = (AccessibleObject) method0;
      accessibleObjectArray0[4] = (AccessibleObject) method0;
      accessibleObjectArray0[5] = (AccessibleObject) method0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertNotNull(method1);
      assertEquals(1, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "9fkHgXX>`e<", (Class<?>[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, (String) null, objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeMethod((Object) "nx$!x/IyLM", "wait", (Object[]) null, (Class<?>[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      try { 
        MethodUtils.invokeMethod((Object) "endsWith", "endsWith", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "vD=8Rvx9=c8ON Z";
      try { 
        MethodUtils.invokeMethod((Object) string0, "vD=8Rvx9=c8ON Z", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: vD=8Rvx9=c8ON Z() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "U!y6fAhJgVQYy6/#@?", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: U!y6fAhJgVQYy6/#@?() on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) "endsWith", "toCharArray", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(objectArray0[1], "toLowerCase", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "wait", classArray0);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertEquals(17, method1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[8];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "signum", objectArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 9);
      try { 
        MethodUtils.invokeStaticMethod(class0, "byteValue", objectArray0, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: byteValue() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      try { 
        MethodUtils.invokeStaticMethod(class0, "5hv", (Object[]) null, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 5hv() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "toLowerCase", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[5];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "() on object: ", objectArray0, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: () on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      try { 
        MethodUtils.invokeExactMethod((Object) "getChars", "getChars", (Object[]) null, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getChars() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = MethodUtils.invokeExactMethod((Object) "hashCode", "hashCode", (Object[]) null, (Class<?>[]) null);
      assertEquals(147696667, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(objectArray0[3], "=QOh.-)B6$+", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      try { 
        MethodUtils.invokeMethod((Object) "", "", (Object[]) null, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class0 = String.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getChars", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "endsWith", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        MethodUtils.invokeStaticMethod(class0, "() on object: ", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: () on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      try { 
        MethodUtils.invokeStaticMethod(class0, "intern", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: intern() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "toString", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<String> class0 = String.class;
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "0.9", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 0.9() on class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "7P!D&uVIG?Y'eXeO", "7P!D&uVIG?Y'eXeO", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 7P!D&uVIG?Y'eXeO() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = MethodUtils.invokeExactMethod((Object) "L", "toString", (Object[]) null);
      assertEquals("L", object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) ";", "trim", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = MethodUtils.invokeMethod(object0, "toString", (Object[]) null);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod(objectArray0[1], "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
