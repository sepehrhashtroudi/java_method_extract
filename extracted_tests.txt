@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');	      boolean boolean0 = cSVFormat1.isCommentingEnabled();	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');	      boolean boolean0 = cSVFormat1.isCommentingEnabled();	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');	      boolean boolean0 = cSVFormat1.isCommentingEnabled();	      assertEquals('\uFFFF', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testwithCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');	      boolean boolean0 = cSVFormat1.isCommentingEnabled();	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');	      boolean boolean0 = cSVFormat1.isCommentingEnabled();	      assertFalse(cSVFormat0.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');	      boolean boolean0 = cSVFormat1.isCommentingEnabled();	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');	      boolean boolean0 = cSVFormat1.isCommentingEnabled();	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFF');	      boolean boolean0 = cSVFormat1.isCommentingEnabled();	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withDelimiter('\t');	      assertEquals('\t', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testwithDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withDelimiter('\t');	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withDelimiter('\t');	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withDelimiter('\t');	      assertFalse(cSVFormat1.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withDelimiter('\t');	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withDelimiter('\t');	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withDelimiter('\t');	      assertTrue(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testvalidate()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      cSVFormat0.validate();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      cSVFormat0.validate();	      assertEquals(',', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");	      assertEquals(',', cSVFormat2.getDelimiter());	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");	      assertEquals('\"', cSVFormat2.getEncapsulator());	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");	      assertEquals('\uFFFE', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");	      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");	      assertTrue(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithLineSeparator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("");	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");	      assertEquals(',', cSVFormat2.getDelimiter());	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");	      assertEquals('\"', cSVFormat1.getEncapsulator());	      assertEquals('\"', cSVFormat2.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");	      assertEquals(']', cSVFormat2.getCommentStart());	      assertEquals(']', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testwithCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");	      assertTrue(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithLineSeparator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(']');	      CSVFormat cSVFormat2 = cSVFormat1.withLineSeparator("=>I^Jz");	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\'');	      assertEquals('\t', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\'');	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\'');	      assertFalse(cSVFormat1.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\'');	      assertEquals('\'', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testwithEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\'');	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\'');	      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\'');	      assertTrue(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');	      assertFalse(cSVFormat1.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');	      assertEquals('e', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testwithEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('e');	      assertTrue(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');	      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');	      assertEquals(',', cSVFormat1.getDelimiter());	      assertEquals(',', cSVFormat2.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');	      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');	      assertEquals('\"', cSVFormat2.getEncapsulator());	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');	      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');	      assertEquals('F', cSVFormat1.getCommentStart());	      assertEquals('F', cSVFormat2.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testwithCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');	      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');	      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');	      assertEquals('v', cSVFormat2.getEscape());	  }		  
@Test(timeout = 4000)	  public void testwithEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');	      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');	      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentStart('F');	      CSVFormat cSVFormat2 = cSVFormat1.withEscape('v');	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);', cSVFormat3.getEncapsulator());	      assertEquals('\t', cSVFormat3.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);', cSVFormat3.getEncapsulator());	      assertEquals('\uFFFE', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testwithEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);', cSVFormat3.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);', cSVFormat3.getEncapsulator());	      assertEquals('\uFFFE', cSVFormat3.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);	      assertEquals('\\', cSVFormat3.getEscape());', cSVFormat3.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);', cSVFormat3.getEncapsulator());	      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);', cSVFormat3.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);', cSVFormat3.getEncapsulator());	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(true);	      CSVFormat cSVFormat2 = cSVFormat1.withEncapsulator(';');	      CSVFormat cSVFormat3 = cSVFormat2.withEmptyLinesIgnored(true);', cSVFormat3.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(true);	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(true);	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(true);	      assertEquals('\uFFFE', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(true);	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(true);	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(true);	      assertTrue(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(true);	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertFalse(cSVFormat1.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');	      assertEquals('\t', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');	      assertEquals('\"', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testwithCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');	      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\"');	      assertTrue(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFE');	      assertEquals('\t', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFE');	      assertEquals('\uFFFE', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFE');	      assertEquals('\uFFFE', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testwithCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFE');	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFE');	      assertEquals('\\', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFE');	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\uFFFE');	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      boolean boolean0 = cSVFormat0.isSurroundingSpacesIgnored();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');	      boolean boolean0 = cSVFormat1.isEscaping();	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');	      boolean boolean0 = cSVFormat1.isEscaping();	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');	      boolean boolean0 = cSVFormat1.isEscaping();	      assertFalse(cSVFormat1.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');	      boolean boolean0 = cSVFormat1.isEscaping();	      assertEquals('C', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testwithEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');	      boolean boolean0 = cSVFormat1.isEscaping();	  }		  
@Test(timeout = 4000)	  public void testisEscaping()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');	      boolean boolean0 = cSVFormat1.isEscaping();	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');	      boolean boolean0 = cSVFormat1.isEscaping();	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');	      boolean boolean0 = cSVFormat1.isEscaping();	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEscaping()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      boolean boolean0 = cSVFormat0.isEscaping();	  }		  
@Test(timeout = 4000)	  public void testisEncapsulating()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      boolean boolean0 = cSVFormat0.isEncapsulating();	  }		  
@Test(timeout = 4000)	  public void testisEncapsulating()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      boolean boolean0 = cSVFormat0.isEncapsulating();	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      boolean boolean0 = cSVFormat0.isEmptyLinesIgnored();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);	      cSVFormat1.getLineSeparator();	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);	      cSVFormat1.getLineSeparator();	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);	      cSVFormat1.getLineSeparator();	      assertFalse(cSVFormat1.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);	      cSVFormat1.getLineSeparator();	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);	      cSVFormat1.getLineSeparator();	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);	      cSVFormat1.getLineSeparator();	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetLineSeparator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);	      cSVFormat1.getLineSeparator();	  }		  
@Test(timeout = 4000)	  public void testwithLineSeparator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      CSVFormat cSVFormat1 = cSVFormat0.withLineSeparator((String) null);	      cSVFormat1.getLineSeparator();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('n', 'n', 'N', 'J', false, false, "", stringArray0);	      cSVFormat0.getLineSeparator();	      assertEquals('n', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('n', 'n', 'N', 'J', false, false, "", stringArray0);	      cSVFormat0.getLineSeparator();	      assertEquals('n', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('n', 'n', 'N', 'J', false, false, "", stringArray0);	      cSVFormat0.getLineSeparator();	      assertEquals('N', cSVFormat0.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('n', 'n', 'N', 'J', false, false, "", stringArray0);	      cSVFormat0.getLineSeparator();	      assertEquals('J', cSVFormat0.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('n', 'n', 'N', 'J', false, false, "", stringArray0);	      cSVFormat0.getLineSeparator();	      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('n', 'n', 'N', 'J', false, false, "", stringArray0);	      cSVFormat0.getLineSeparator();	      assertFalse(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetLineSeparator()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('n', 'n', 'N', 'J', false, false, "", stringArray0);	      cSVFormat0.getLineSeparator();	  }		  
@Test(timeout = 4000)	  public void testgetHeader()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      String[] stringArray0 = cSVFormat0.getHeader();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[4];	      CSVFormat cSVFormat0 = new CSVFormat('F', 'F', 'E', 'F', true, true, "rhbtg3{m/[", stringArray0);	      cSVFormat0.getHeader();	      assertEquals('F', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[4];	      CSVFormat cSVFormat0 = new CSVFormat('F', 'F', 'E', 'F', true, true, "rhbtg3{m/[", stringArray0);	      cSVFormat0.getHeader();	      assertEquals('F', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[4];	      CSVFormat cSVFormat0 = new CSVFormat('F', 'F', 'E', 'F', true, true, "rhbtg3{m/[", stringArray0);	      cSVFormat0.getHeader();	      assertEquals('E', cSVFormat0.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[4];	      CSVFormat cSVFormat0 = new CSVFormat('F', 'F', 'E', 'F', true, true, "rhbtg3{m/[", stringArray0);	      cSVFormat0.getHeader();	      assertEquals('F', cSVFormat0.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[4];	      CSVFormat cSVFormat0 = new CSVFormat('F', 'F', 'E', 'F', true, true, "rhbtg3{m/[", stringArray0);	      cSVFormat0.getHeader();	      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[4];	      CSVFormat cSVFormat0 = new CSVFormat('F', 'F', 'E', 'F', true, true, "rhbtg3{m/[", stringArray0);	      cSVFormat0.getHeader();	      assertTrue(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetHeader()  throws Throwable  {	      String[] stringArray0 = new String[4];	      CSVFormat cSVFormat0 = new CSVFormat('F', 'F', 'E', 'F', true, true, "rhbtg3{m/[", stringArray0);	      cSVFormat0.getHeader();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      cSVFormat1.getHeader();	      assertEquals(',', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      cSVFormat1.getHeader();	      assertEquals('\"', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      cSVFormat1.getHeader();	      assertEquals('\uFFFE', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      cSVFormat1.getHeader();	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      cSVFormat1.getHeader();	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      cSVFormat1.getHeader();	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetHeader()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      cSVFormat1.getHeader();	  }		  
@Test(timeout = 4000)	  public void testwithHeader()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      cSVFormat1.getHeader();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertEquals('d', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertEquals('a', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertEquals('S', cSVFormat0.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      char char0 = cSVFormat0.getEscape();	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertFalse(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertEquals('C', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertEquals('W', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertEquals('C', cSVFormat0.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getEscape();	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getEscape();	      assertFalse(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');	      char char0 = cSVFormat1.getEncapsulator();	      assertEquals('d', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');	      char char0 = cSVFormat1.getEncapsulator();	      assertEquals('a', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testwithEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');	      char char0 = cSVFormat1.getEncapsulator();	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');	      char char0 = cSVFormat1.getEncapsulator();	      assertEquals('S', cSVFormat0.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');	      char char0 = cSVFormat1.getEncapsulator();	      assertTrue(cSVFormat1.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');	      char char0 = cSVFormat1.getEncapsulator();	      assertEquals('8', cSVFormat1.getEscape());	      assertEquals('8', cSVFormat0.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');	      char char0 = cSVFormat1.getEncapsulator();	      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[0];	      CSVFormat cSVFormat0 = new CSVFormat('d', 'a', 'S', '8', false, false, "<^pgx,", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('8');	      char char0 = cSVFormat1.getEncapsulator();	      assertFalse(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEncapsulator('K');	      char char0 = cSVFormat1.getEncapsulator();	      assertEquals('\t', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEncapsulator('K');	      char char0 = cSVFormat1.getEncapsulator();	  }		  
@Test(timeout = 4000)	  public void testwithEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEncapsulator('K');	      char char0 = cSVFormat1.getEncapsulator();	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEncapsulator('K');	      char char0 = cSVFormat1.getEncapsulator();	      assertEquals('\uFFFE', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEncapsulator('K');	      char char0 = cSVFormat1.getEncapsulator();	      assertEquals('\uFFFE', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEncapsulator('K');	      char char0 = cSVFormat1.getEncapsulator();	      assertTrue(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.TDF;	      CSVFormat cSVFormat1 = cSVFormat0.TDF.withEncapsulator('K');	      char char0 = cSVFormat1.getEncapsulator();	      assertTrue(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');	      char char0 = cSVFormat1.getDelimiter();	  }		  
@Test(timeout = 4000)	  public void testwithDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');	      char char0 = cSVFormat1.getDelimiter();	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');	      char char0 = cSVFormat1.getDelimiter();	      assertEquals('M', cSVFormat1.getEncapsulator());	      assertEquals('M', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');	      char char0 = cSVFormat1.getDelimiter();	      assertEquals('h', cSVFormat0.getCommentStart());	      assertEquals('h', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');	      char char0 = cSVFormat1.getDelimiter();	      assertEquals('M', cSVFormat0.getEscape());	      assertEquals('M', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');	      char char0 = cSVFormat1.getDelimiter();	      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');	      char char0 = cSVFormat1.getDelimiter();	      assertFalse(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getDelimiter();	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getDelimiter();	      assertEquals('W', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getDelimiter();	      assertEquals('C', cSVFormat0.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getDelimiter();	      assertEquals('W', cSVFormat0.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getDelimiter();	      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[7];	      CSVFormat cSVFormat0 = new CSVFormat('C', 'W', 'C', 'W', true, false, "", stringArray0);	      char char0 = cSVFormat0.getDelimiter();	      assertFalse(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      char char0 = cSVFormat0.getCommentStart();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = new CSVFormat('M', 'Y', '9', '9', true, true, "S8s(dq", (String[]) null);	      char char0 = cSVFormat0.getCommentStart();	      assertEquals('M', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = new CSVFormat('M', 'Y', '9', '9', true, true, "S8s(dq", (String[]) null);	      char char0 = cSVFormat0.getCommentStart();	      assertEquals('Y', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = new CSVFormat('M', 'Y', '9', '9', true, true, "S8s(dq", (String[]) null);	      char char0 = cSVFormat0.getCommentStart();	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = new CSVFormat('M', 'Y', '9', '9', true, true, "S8s(dq", (String[]) null);	      char char0 = cSVFormat0.getCommentStart();	      assertEquals('9', cSVFormat0.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = new CSVFormat('M', 'Y', '9', '9', true, true, "S8s(dq", (String[]) null);	      char char0 = cSVFormat0.getCommentStart();	      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = new CSVFormat('M', 'Y', '9', '9', true, true, "S8s(dq", (String[]) null);	      char char0 = cSVFormat0.getCommentStart();	      assertTrue(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      String[] stringArray0 = new String[1];	      String string0 = cSVFormat0.RFC4180.format(stringArray0);	      assertEquals(',', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testformat()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      String[] stringArray0 = new String[1];	      String string0 = cSVFormat0.RFC4180.format(stringArray0);	  }		  
@Test(timeout = 4000)	  public void testformat()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String[] stringArray0 = new String[0];	      String string0 = cSVFormat0.EXCEL.format(stringArray0);	  }		  
@Test(timeout = 4000)	  public void testparse()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      // Undeclared exception!	      try { 	        cSVFormat0.MYSQL.parse((Reader) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.io.Reader", e);	      }	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      boolean boolean0 = cSVFormat0.isCommentingEnabled();	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      boolean boolean0 = cSVFormat0.isSurroundingSpacesIgnored();	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      char char0 = cSVFormat0.getEscape();	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      char char0 = cSVFormat0.getEncapsulator();	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      boolean boolean0 = cSVFormat0.isEmptyLinesIgnored();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      char char0 = cSVFormat0.getCommentStart();	      assertEquals('<', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      char char0 = cSVFormat0.getCommentStart();	      assertEquals('M', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      char char0 = cSVFormat0.getCommentStart();	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      char char0 = cSVFormat0.getCommentStart();	      assertEquals('M', cSVFormat0.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      char char0 = cSVFormat0.getCommentStart();	      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('<', 'M', 'h', 'M', false, false, "*<yK", stringArray0);	      char char0 = cSVFormat0.getCommentStart();	      assertFalse(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      char char0 = cSVFormat0.getDelimiter();	  }		  
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      String string0 = cSVFormat0.toString();	  }		  
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      String string0 = cSVFormat0.TDF.toString();	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      StringReader stringReader0 = new StringReader("9l9mc%wGF#**|w");	      cSVFormat0.parse(stringReader0);	      assertEquals(',', cSVFormat0.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      StringReader stringReader0 = new StringReader("9l9mc%wGF#**|w");	      cSVFormat0.parse(stringReader0);	      assertEquals('\"', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      StringReader stringReader0 = new StringReader("9l9mc%wGF#**|w");	      cSVFormat0.parse(stringReader0);	      assertFalse(cSVFormat0.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testparse()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      StringReader stringReader0 = new StringReader("9l9mc%wGF#**|w");	      cSVFormat0.parse(stringReader0);	  }		  
@Test(timeout = 4000)	  public void testwithEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      // Undeclared exception!	      try { 	        cSVFormat0.withEscape('\n');	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The escape character cannot be a line break	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');	      StringReader stringReader0 = new StringReader("ru-.");	      cSVFormat1.parse(stringReader0);	      assertEquals('\t', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');	      StringReader stringReader0 = new StringReader("ru-.");	      cSVFormat1.parse(stringReader0);	      assertEquals('\uFFFF', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testwithEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');	      StringReader stringReader0 = new StringReader("ru-.");	      cSVFormat1.parse(stringReader0);	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');	      StringReader stringReader0 = new StringReader("ru-.");	      cSVFormat1.parse(stringReader0);	      assertFalse(cSVFormat1.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');	      StringReader stringReader0 = new StringReader("ru-.");	      cSVFormat1.parse(stringReader0);	      assertEquals('\\', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');	      StringReader stringReader0 = new StringReader("ru-.");	      cSVFormat1.parse(stringReader0);	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');	      StringReader stringReader0 = new StringReader("ru-.");	      cSVFormat1.parse(stringReader0);	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testparse()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      CSVFormat cSVFormat1 = cSVFormat0.withEncapsulator('\uFFFF');	      StringReader stringReader0 = new StringReader("ru-.");	      cSVFormat1.parse(stringReader0);	  }		  
@Test(timeout = 4000)	  public void testwithDelimiter()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.MYSQL;	      // Undeclared exception!	      try { 	        cSVFormat0.withDelimiter('\n');	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The delimiter cannot be a line break	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');	      assertEquals('w', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testwithDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');	      assertEquals('w', cSVFormat1.getEncapsulator());	      assertEquals('w', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');	      assertEquals('w', cSVFormat0.getCommentStart());	      assertEquals('w', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');	      assertEquals('w', cSVFormat0.getEscape());	      assertEquals('w', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');	      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');	      assertTrue(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testvalidate()  throws Throwable  {	      CSVFormat cSVFormat0 = new CSVFormat('h', 'M', '0', '0', false, false, "OW;[;:=edc", (String[]) null);	      try { 	        cSVFormat0.validate();	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The comment start and the escape character cannot be the same (\"0\")	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testformat()  throws Throwable  {	      String[] stringArray0 = new String[25];	      CSVFormat cSVFormat0 = new CSVFormat('\u0011', '7', '7', '7', false, false, "3", stringArray0);	      // Undeclared exception!	      try { 	        cSVFormat0.format(stringArray0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The comment start character and the encapsulator cannot be the same (\"7\")	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testvalidate()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(',');	      try { 	        cSVFormat1.validate();	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The comment start character and the delimiter cannot be the same (\",\")	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testwithCommentStart()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.RFC4180;	      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(',');	      try { 	        cSVFormat1.validate();	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The comment start character and the delimiter cannot be the same (\",\")	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testparse()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u001B', ')', '\u001B', '\u001B', false, false, "^_?~%}7@J~3", stringArray0);	      StringReader stringReader0 = new StringReader("^_?~%}7@J~3");	      // Undeclared exception!	      try { 	        cSVFormat0.parse(stringReader0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The escape character and the delimiter cannot be the same (\"\u001B\")	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testparse()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      StringReader stringReader0 = new StringReader("oSG4>o_P >`mg z{<5");	      // Undeclared exception!	      try { 	        cSVFormat0.parse(stringReader0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The encapsulator character and the delimiter cannot be the same (\"\u0002\")	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testwithEncapsulator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;	      // Undeclared exception!	      try { 	        cSVFormat0.withEncapsulator('\r');	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The encapsulator cannot be a line break	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testwithCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[2];	      CSVFormat cSVFormat0 = new CSVFormat('\n', '\n', '\n', '\n', false, false, "2oG4>eo_PD >`mz{<5", stringArray0);	      // Undeclared exception!	      try { 	        cSVFormat0.withCommentStart('\n');	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The comment start character cannot be a line break	         //	         verifyException("org.apache.commons.csv.CSVFormat", e);	      }	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      assertEquals('w', cSVFormat0.getDelimiter());	      assertEquals('w', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      assertEquals('w', cSVFormat1.getEncapsulator());	      assertEquals('w', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      assertEquals('w', cSVFormat1.getCommentStart());	      assertEquals('w', cSVFormat0.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      assertEquals('w', cSVFormat1.getEscape());	      assertEquals('w', cSVFormat0.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      assertTrue(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	      assertTrue(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithHeader()  throws Throwable  {	      String[] stringArray0 = new String[6];	      CSVFormat cSVFormat0 = new CSVFormat('w', 'w', 'w', 'w', true, true, "(", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withLineSeparator(stringArray0[0]);	      String string0 = cSVFormat1.toString();	      assertEquals('\u0002', cSVFormat0.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withLineSeparator(stringArray0[0]);	      String string0 = cSVFormat1.toString();	      assertTrue(cSVFormat0.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testwithLineSeparator()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withLineSeparator(stringArray0[0]);	      String string0 = cSVFormat1.toString();	  }		  
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withLineSeparator(stringArray0[0]);	      String string0 = cSVFormat1.toString();	  }		  
@Test(timeout = 4000)	  public void testformat()  throws Throwable  {	      CSVFormat cSVFormat0 = new CSVFormat('/', '/', '>', '>', false, false, "Escape=<", (String[]) null);	      // Undeclared exception!	      try { 	        cSVFormat0.TDF.format((String[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.csv.CSVPrinter", e);	      }	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertEquals('\u0002', cSVFormat0.getDelimiter());	      assertEquals('\u0002', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertEquals('\u0002', cSVFormat0.getEncapsulator());	      assertEquals('\u0002', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertEquals('\u0002', cSVFormat1.getCommentStart());	      assertEquals('\u0002', cSVFormat0.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertEquals('\u0002', cSVFormat1.getEscape());	      assertEquals('\u0002', cSVFormat0.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertFalse(cSVFormat0.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	      assertFalse(cSVFormat1.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withEmptyLinesIgnored(false);	  }		  
@Test(timeout = 4000)	  public void testgetDelimiter()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);	      assertEquals('\u0002', cSVFormat0.getDelimiter());	      assertEquals('\u0002', cSVFormat1.getDelimiter());	  }		  
@Test(timeout = 4000)	  public void testgetEncapsulator()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);	      assertEquals('\u0002', cSVFormat0.getEncapsulator());	      assertEquals('\u0002', cSVFormat1.getEncapsulator());	  }		  
@Test(timeout = 4000)	  public void testgetCommentStart()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);	      assertEquals('\u0002', cSVFormat1.getCommentStart());	  }		  
@Test(timeout = 4000)	  public void testisCommentingEnabled()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);	      assertTrue(cSVFormat0.isCommentingEnabled());	  }		  
@Test(timeout = 4000)	  public void testgetEscape()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);	      assertEquals('\u0002', cSVFormat0.getEscape());	      assertEquals('\u0002', cSVFormat1.getEscape());	  }		  
@Test(timeout = 4000)	  public void testisSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);	      assertFalse(cSVFormat1.isSurroundingSpacesIgnored());	  }		  
@Test(timeout = 4000)	  public void testwithSurroundingSpacesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);	  }		  
@Test(timeout = 4000)	  public void testisEmptyLinesIgnored()  throws Throwable  {	      String[] stringArray0 = new String[15];	      CSVFormat cSVFormat0 = new CSVFormat('\u0002', '\u0002', '\u0002', '\u0002', false, false, "oSG4>o_P >`mg z{<5", stringArray0);	      CSVFormat cSVFormat1 = cSVFormat0.withSurroundingSpacesIgnored(false);	      assertFalse(cSVFormat0.isEmptyLinesIgnored());	  }		  
@Test(timeout = 4000)	  public void testgetLineSeparator()  throws Throwable  {	      CSVFormat cSVFormat0 = CSVFormat.EXCEL;	      String string0 = cSVFormat0.getLineSeparator();	  }	}	
