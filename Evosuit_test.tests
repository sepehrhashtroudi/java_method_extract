@Test(timeout = 4000) [EOL]   public void testgetSplitNanoTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitNanoTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = "Index: "; [EOL]       String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.repeat("Index: ", (-2787)); [EOL]        [EOL]       Stack<String> stack0 = new Stack<String>(); [EOL]        [EOL]       Iterator<String> iterator0 = stack0.iterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, ""); [EOL]        [EOL]       Locale locale0 = Locale.US; [EOL]        [EOL]       boolean boolean0 = locale0.hasExtensions(); [EOL]        [EOL]       String string3 = StringUtils.lowerCase("E+~9zT(!M4GYK$\"r", locale0); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithIgnoreCase("Index: ", ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "E+~9zT(!M4GYK$\"r", 16, 16); [EOL]        [EOL]       String string4 = StringUtils.removeStartIgnoreCase("", "p{InCombiningDiacriticalMarks}+"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substring("", 993, 256); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'c'); [EOL]        [EOL]       String string1 = StringUtils.strip(""); [EOL]        [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       objectArray0[1] = (Object) ""; [EOL]       objectArray0[2] = (Object) ""; [EOL]       objectArray0[4] = (Object) ""; [EOL]       objectArray0[5] = (Object) ""; [EOL]       objectArray0[6] = (Object) ""; [EOL]       objectArray0[7] = (Object) ""; [EOL]       objectArray0[8] = (Object) ""; [EOL]       String string2 = StringUtils.join(objectArray0, 'c'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "cccccccc", 1986); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(); [EOL]       assertTrue(arrayDeque0.isEmpty()); [EOL]        [EOL]       Iterator<Integer> iterator0 = arrayDeque0.descendingIterator(); [EOL]       assertTrue(arrayDeque0.isEmpty()); [EOL]        [EOL]       String string3 = StringUtils.join(iterator0, ""); [EOL]       assertTrue(arrayDeque0.isEmpty()); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.split("", 'c'); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetLeft()  throws Throwable  { [EOL]       MutableTriple<Object, Object, Object> mutableTriple0 = MutableTriple.of((Object) null, (Object) null, (Object) null); [EOL]       Object object0 = mutableTriple0.getLeft(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       compareToBuilder0.append((boolean[]) null, booleanArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetShortValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       short short0 = bitField0.getShortValue((short)3); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMatchingAccessibleConstructor()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Constructor<Object> constructor0 = ConstructorUtils.getMatchingAccessibleConstructor(class0, (Class<?>[]) null); [EOL]       Constructor<Object> constructor1 = ConstructorUtils.getAccessibleConstructor(constructor0); [EOL]       assertSame(constructor1, constructor0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(0); [EOL]       assertEquals('0', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFragmentInHours()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       Calendar calendar0 = DateUtils.toCalendar(mockDate0); [EOL]       long long0 = DateUtils.getFragmentInHours(calendar0, 2); [EOL]       assertEquals(408L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotTrue()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.isNotTrue((Boolean) false); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       short[] shortArray0 = new short[4]; [EOL]       short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0); [EOL]       assertEquals(4, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoCalendar()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       Calendar calendar0 = DateUtils.toCalendar(mockDate0); [EOL]       boolean boolean0 = DateUtils.isSameLocalTime(calendar0, calendar0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("oaKy'LB", 'E'); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("oaKy'LB"); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: "); [EOL]        [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[6] = "[P-D%P32})["; [EOL]       CharSet charSet0 = CharSet.getInstance(stringArray0); [EOL]       assertNotNull(charSet0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority((-1)); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals((-1), (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0); [EOL]       reflectionToStringBuilder0.setUpToClass((Class<?>) null); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.StringUtils"; [EOL]       String string1 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = "IwP"; [EOL]       int int0 = 1639; [EOL]       String string3 = StringUtils.leftPad("IwP", 1639, "Y"); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) string3); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'p'; [EOL]       charArray0[1] = 'E'; [EOL]       charArray0[2] = '@'; [EOL]       charArray0[3] = '`'; [EOL]       charArray0[4] = 'l'; [EOL]       charArray0[5] = 'd'; [EOL]       charArray0[6] = 't'; [EOL]       // Undeclared exception! [EOL]       StringUtils.containsNone((CharSequence) string3, charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-14.831459754745751)); [EOL]       mutableDouble0.hashCode(); [EOL]       assertEquals((-14.831459754745751), mutableDouble0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageCanonicalName("I"); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetClass()  throws Throwable  { [EOL]       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); [EOL]       Class<?> class0 = ClassUtils.getClass(classLoader0, "[C", false); [EOL]       assertFalse(class0.isInterface()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       shortArray0[1] = (short)122; [EOL]       shortArray0[3] = (short) (-1182); [EOL]       shortArray0[4] = (short)0; [EOL]       String string0 = StringUtils.join(shortArray0, 'o', 13, (int) (short) (-1182)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", ""); [EOL]        [EOL]       String string1 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'o'); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>(); [EOL]        [EOL]       SortedSet<String> sortedSet0 = treeSet0.headSet("D1CDQwpG"); [EOL]        [EOL]       String string2 = StringUtils.join((Iterable<?>) sortedSet0, 'o'); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable("Abrting t prtect against StackOverflwErrr - utput f ne lp is the input f anther"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[7]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "org.apache.commons.lang3.text.StrMatcher$TrimMatcher"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer2.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       char[] charArray0 = new char[0]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((char[]) null, charArray0); [EOL]       Object object0 = new Object(); [EOL]       compareToBuilder1.append(object0, (Object) compareToBuilder0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       mutableDouble0.setValue(1578.9262693); [EOL]       int int0 = mutableDouble0.intValue(); [EOL]       assertEquals(1578, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeXml((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = Fraction.THREE_QUARTERS; [EOL]       fraction0.ONE_HALF.hashCode(); [EOL]       fraction0.toString(); [EOL]       Fraction fraction2 = fraction1.abs(); [EOL]       Fraction fraction3 = Fraction.getFraction((-1623), (-1623)); [EOL]       Fraction fraction4 = fraction1.invert(); [EOL]       Fraction fraction5 = fraction4.ONE_FIFTH.abs(); [EOL]       Fraction fraction6 = fraction4.ZERO.negate(); [EOL]       String string0 = fraction0.toProperString(); [EOL]        [EOL]       fraction1.ONE_FIFTH.abs(); [EOL]       fraction0.equals(fraction4); [EOL]       Fraction fraction7 = fraction1.negate(); [EOL]       Fraction fraction8 = Fraction.getFraction((-1623), (-1623)); [EOL]       fraction8.ONE_HALF.reduce(); [EOL]       Fraction fraction9 = Fraction.TWO_THIRDS; [EOL]       Fraction fraction10 = fraction9.add(fraction7); [EOL]        [EOL]       Fraction fraction11 = fraction2.ONE_QUARTER.subtract(fraction9); [EOL]        [EOL]       Fraction fraction12 = Fraction.ONE_FIFTH; [EOL]       Fraction fraction13 = fraction2.reduce(); [EOL]       Fraction fraction14 = Fraction.THREE_FIFTHS; [EOL]       Fraction fraction15 = fraction2.add(fraction14); [EOL]       Fraction fraction16 = fraction4.ONE_HALF.divideBy(fraction13); [EOL]       Fraction fraction17 = Fraction.getReducedFraction((-1623), (-1623)); [EOL]       Fraction fraction18 = Fraction.getReducedFraction((-3838), 58); [EOL]        [EOL]       Fraction fraction19 = fraction15.reduce(); [EOL]        [EOL]       fraction17.longValue(); [EOL]       assertEquals(1, fraction17.getNumerator()); [EOL]        [EOL]       int int0 = fraction13.compareTo(fraction0); [EOL]        [EOL]       fraction6.toString(); [EOL]       fraction5.invert(); [EOL]       int int1 = fraction13.intValue(); [EOL]        [EOL]       fraction3.toString(); [EOL]        [EOL]       fraction2.divideBy(fraction16); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendContentStart(stringBuffer0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertFalse(strTokenizer1.isIgnoreEmptyTokens()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       String string1 = strTokenizer1.next(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertFalse(strTokenizer1.isIgnoreEmptyTokens()); [EOL]        [EOL]       String string2 = strTokenizer0.previousToken(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder((Object) null, toStringStyle0); [EOL]       Object object0 = toStringBuilder0.getObject(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       Fraction fraction1 = fraction0.multiplyBy(fraction0); [EOL]       assertEquals(0, fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       LinkedList<Short> linkedList0 = new LinkedList<Short>(); [EOL]       toStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "l-;.dS5ip<{0\"rzsjK", linkedList0); [EOL]       assertEquals("[]", stringBuffer0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(0L, 1170L); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcount()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       int int0 = CharSetUtils.count("", stringArray0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentEnd("]"); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer2.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0); [EOL]       Thread thread0 = MockThread.currentThread(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Thread thread1 = basicThreadFactory0.newThread(thread0); [EOL]       assertFalse(thread1.isInterrupted()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetMilliseconds()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate('t', 't', 6); [EOL]       Date date0 = DateUtils.setMilliseconds(mockDate0, 500); [EOL]       assertEquals("Sat Sep 06 00:00:00 GMT 2025", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigitMsb0()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0((short)2); [EOL]       assertEquals('4', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       booleanArray0[1] = true; [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.normalizeSpace("Cannot store "); [EOL]        [EOL]       String string1 = StringUtils.rightPad(".a", 0, "Minimum abbreviation width is 4"); [EOL]        [EOL]       int int0 = StringUtils.countMatches(".a", "Minimum abbreviation width is 4"); [EOL]        [EOL]       String string2 = StringUtils.substring("anviMwY@MG{3],,+q#0", 4096, (-714)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = ';'; [EOL]       charArray0[1] = 'P'; [EOL]       charArray0[2] = 'f'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is 4", charArray0); [EOL]       assertEquals(3, charArray0.length); [EOL]        [EOL]       int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is 4", (CharSequence) ".a", 2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBetween("", " ", "&9M29u!)M&\""); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = '*'; [EOL]       charArray0[1] = 'I'; [EOL]       charArray0[2] = '5'; [EOL]       charArray0[3] = '3'; [EOL]       charArray0[4] = '['; [EOL]       charArray0[5] = '('; [EOL]       charArray0[6] = '$'; [EOL]       String string1 = StringUtils.join(charArray0, '$'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       String string2 = StringUtils.chop(" "); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       int[] intArray0 = new int[4]; [EOL]       intArray0[0] = (int) 'I'; [EOL]       intArray0[1] = 992; [EOL]       intArray0[2] = (int) '3'; [EOL]       intArray0[3] = 1150; [EOL]       String string3 = StringUtils.join(intArray0, '['); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "73[992[51[1150"; [EOL]       charSequenceArray0[3] = (CharSequence) "*$I$5$3$[$($$"; [EOL]       charSequenceArray0[4] = (CharSequence) " "; [EOL]       charSequenceArray0[5] = (CharSequence) "&9M29u!)M&\""; [EOL]       String string4 = StringUtils.join(intArray0, '$'); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) "73$992$51$1150"; [EOL]       String string5 = StringUtils.substringAfter("*$I$5$3$[$($$", "clone"); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]        [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(2044); [EOL]       int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, 0, 187); [EOL]       assertEquals(187, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       assertNotNull(randomStringUtils0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '.'; [EOL]       charArray0[1] = '\\'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random((-1), charArray0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Requested random string length -1 is less than 0. [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.RandomStringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfirstNonNull()  throws Throwable  { [EOL]       ArrayList<Collator> arrayList0 = ObjectUtils.firstNonNull((ArrayList<Collator>[]) null); [EOL]       assertNull(arrayList0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       MutableFloat mutableFloat1 = new MutableFloat(); [EOL]       mutableFloat0.decrement(); [EOL]       int int0 = mutableFloat0.compareTo(mutableFloat1); [EOL]       assertEquals((-1.0F), mutableFloat0.toFloat(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: "); [EOL]        [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.reset(""); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]       assertEquals(0, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       compareToBuilder0.append((byte)79, (byte) (-103)); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('1'); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_QUARTER; [EOL]       Fraction fraction1 = fraction0.ONE.negate(); [EOL]       Fraction fraction2 = Fraction.getFraction(1, 1); [EOL]       Fraction fraction3 = fraction1.add(fraction2); [EOL]       float float0 = fraction3.floatValue(); [EOL]       assertEquals(1.0F, fraction2.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.below((-6334)); [EOL]       String string0 = unicodeEscaper0.translate((CharSequence) "FFFFEE34"); [EOL]       assertEquals("FFFFEE34", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong((-854L)); [EOL]       double double0 = mutableLong0.doubleValue(); [EOL]       assertEquals((-854.0), double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1.0, 1669.776002828); [EOL]       compareToBuilder1.append(325, 325); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((-69)); [EOL]       assertEquals(560, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = "zw.xpl05aC9HV'_s"; [EOL]       String string1 = StringUtils.substringBetween("zw.xpl05aC9HV'_s", "", "zw.xpl05aC9HV'_s"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = 0; [EOL]       int int1 = StringUtils.lastOrdinalIndexOf("", "", 0); [EOL]        [EOL]       int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "zw.xpl05aC9HV'_s", (CharSequence) "zw.xpl05aC9HV'_s"); [EOL]        [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[0] = (long) 0; [EOL]       longArray0[1] = (long) 0; [EOL]       longArray0[2] = (long) 0; [EOL]       longArray0[3] = (long) (-1); [EOL]       longArray0[4] = (long) 0; [EOL]       longArray0[5] = (long) 0; [EOL]       longArray0[6] = (long) 0; [EOL]       longArray0[7] = (long) 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(longArray0, 'B', 7, 16); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 8 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       boolean boolean0 = ArrayUtils.contains(booleanArray0, false); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotFalse()  throws Throwable  { [EOL]       Boolean boolean0 = new Boolean("0`{a"); [EOL]       boolean boolean1 = BooleanUtils.isNotFalse(boolean0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       int int0 = ArrayUtils.indexOf(byteArray0, (byte)31, (int) (byte)31); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Integer[] integerArray0 = new Integer[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integerArray0[2], (-509)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[1] = (-1.0); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 115); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((-1174)); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRootCause()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0); [EOL]       String string0 = ExceptionUtils.getRootCauseMessage(mockThrowable1); [EOL]       assertEquals("MockThrowable: ", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(false); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       Byte byte0 = new Byte((byte) (-1)); [EOL]       mutableFloat0.setValue((Number) byte0); [EOL]       float float0 = mutableFloat0.floatValue(); [EOL]       assertEquals((-1.0F), float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'h'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = unicodeUnescaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testiterator()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, (-1748), 5, 6, 1001, 6); [EOL]       Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 5); [EOL]       DateUtils.iterator(calendar0, 3); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-66479961600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=138,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=126,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertFalse(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageName("os.arch"); [EOL]       assertEquals("os", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = new String[16]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "t*4Sq/^>f"; [EOL]       stringArray0[2] = "\r"; [EOL]       stringArray0[4] = ""; [EOL]       stringArray0[5] = ""; [EOL]       stringArray0[6] = ""; [EOL]       String string0 = StringUtils.getCommonPrefix(stringArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace(""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("x6.Kwu*w3rqLnTt;?|"); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) stringArray0[3]); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Strings must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((char[]) null); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisShutdown()  throws Throwable  { [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]        [EOL]       TimeUnit timeUnit0 = TimeUnit.MINUTES; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 619); [EOL]       assertFalse(timedSemaphore0.isShutdown()); [EOL]        [EOL]       timedSemaphore0.acquire(); [EOL]       assertFalse(timedSemaphore0.isShutdown()); [EOL]        [EOL]       TimeUnit timeUnit1 = timedSemaphore0.getUnit(); [EOL]       assertFalse(timedSemaphore0.isShutdown()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasPrevious(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDigits()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isDigits("Lg6'yZWEmRH.bA`"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       Locale locale0 = new Locale("'KT'HH:mm:sZZ"); [EOL]       String string0 = DateFormatUtils.format((long) (-1827), "'KT'HH:mm:sZZ", locale0); [EOL]       assertEquals("KT23:59:58+00:00", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentStart(""); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("670DJ/'5"); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((double) '['); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoClass()  throws Throwable  { [EOL]       Class<?>[] classArray0 = ClassUtils.toClass((Object[]) null); [EOL]       assertNull(classArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       boolean boolean0 = ObjectUtils.CONST(true); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[1]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, 'F'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArrayContentDetail(true); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1), (-1), 9, (-1), 9); [EOL]       Date date0 = DateUtils.ceiling((Date) mockDate0, 9); [EOL]       assertEquals("Fri Dec 09 00:00:00 GMT 1898", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArrayContentDetail(true); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) " "; [EOL]       String string1 = StringUtils.leftPad(">20vl%B]Z&", 0, " "); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ">20vl%B]Z&"; [EOL]       String string2 = StringUtils.substringBefore("SEPMfbF1", "The Array must not be null"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "SEPMfbF1"; [EOL]       CharSequence[] charSequenceArray1 = new CharSequence[7]; [EOL]        [EOL]       charSequenceArray1[0] = (CharSequence) ""; [EOL]       charSequenceArray1[1] = (CharSequence) "The Array must not be null"; [EOL]       charSequenceArray1[2] = (CharSequence) "The Array must not be null"; [EOL]       charSequenceArray1[3] = (CharSequence) "SEPMfbF1"; [EOL]       charSequenceArray1[4] = (CharSequence) ""; [EOL]       charSequenceArray1[5] = (CharSequence) " "; [EOL]       charSequenceArray1[6] = (CharSequence) "SEPMfbF1"; [EOL]       String string3 = StringUtils.prependIfMissing("SEPMfbF1", "SEPMfbF1", charSequenceArray1); [EOL]       assertEquals(7, charSequenceArray1.length); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "SEPMfbF1"; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) " "; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       String string4 = StringUtils.appendIfMissingIgnoreCase("", " ", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 's', 'C'); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 1786, (-1443)); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setUseFieldNames(false); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testapplyPattern()  throws Throwable  { [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("u?j4SKXER;Wx'", hashMap0); [EOL]       extendedMessageFormat0.applyPattern("u?j4SKXER;Wx'"); [EOL]       assertEquals("u?j4SKXER;Wx", extendedMessageFormat0.toPattern()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[1] = 2614.775F; [EOL]       float float0 = IEEE754rUtils.max(floatArray0); [EOL]       assertEquals(2614.775F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetUserDir()  throws Throwable  { [EOL]       File file0 = SystemUtils.getUserDir(); [EOL]       assertTrue(file0.canWrite()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       int[] intArray0 = new int[8]; [EOL]       ArrayUtils.reverse(intArray0); [EOL]       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       short[] shortArray1 = new short[7]; [EOL]       compareToBuilder0.append(shortArray0, shortArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetImplicitUpperBounds()  throws Throwable  { [EOL]       ParameterizedType parameterizedType0; [EOL]       parameterizedType0 = mock(ParameterizedType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       Type[] typeArray0 = new Type[6]; [EOL]       typeArray0[1] = (Type) parameterizedType0; [EOL]       WildcardType wildcardType0; [EOL]       wildcardType0 = mock(WildcardType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getUpperBounds(); [EOL]       Type[] typeArray1 = TypeUtils.getImplicitUpperBounds(wildcardType0); [EOL]       assertEquals(1, typeArray1.length); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.setValue((Number) mutableInt0); [EOL]       assertEquals((byte)0, mutableInt0.byteValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMinimum()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-416)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is(object0, comparator0); [EOL]       Object object1 = range0.getMinimum(); [EOL]       assertSame(object0, object1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) "r.Ngw'UzA", comparator0); [EOL]       boolean boolean0 = range0.isOverlappedBy((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = strTokenizer0.getDelimiterMatcher(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.toDouble(); [EOL]       assertEquals(1.0F, mutableDouble0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertEquals(0, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((double) (byte) (-98)); [EOL]       assertEquals((-1067941259), (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.TWO_THIRDS.add(fraction0); [EOL]       Fraction fraction2 = fraction1.negate(); [EOL]       long long0 = fraction2.longValue(); [EOL]       assertEquals(12, fraction1.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isDefaultFullDetail(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentEnd("]"); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       mutableDouble0.subtract(1.0); [EOL]       float float0 = mutableDouble0.floatValue(); [EOL]       assertEquals((-1.0), mutableDouble0.getValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "["); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendSuper(stringBuffer0, "["); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'v'; [EOL]       charArray0[1] = 'm'; [EOL]       charArray0[2] = 'D'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(3, charBuffer0.length()); [EOL]       assertEquals(3, charArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) charBuffer0, (CharSequence) charBuffer0); [EOL]       assertEquals(3, charBuffer0.length()); [EOL]       assertEquals(3, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("N<w+hrWoJ_H$&?"); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertFalse(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       int int0 = ObjectUtils.compare("%8YOm\"JXn@N-", "Cannot get the toString of a null identity"); [EOL]       assertEquals((-30), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) "N^zX$"; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) "N^zX$"; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       objectArray0[4] = (Object) "N^zX$"; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       Object object0 = strBuilder_StrBuilderTokenizer0.clone(); [EOL]       objectArray0[5] = object0; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       strBuilder0.append("N^zX$", objectArray0); [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]       strBuilder1.delete(0, 0); [EOL]       strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]       strBuilder0.append(false); [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('9'); [EOL]       strBuilder0.lastIndexOf(strMatcher0, 0); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1515); [EOL]       boolean boolean0 = BooleanUtils.toBoolean(integer0, (Integer) null, integer0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("N<w+hrWoJ_H$&?"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]       assertEquals(1, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(false, true); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       String string0 = ToStringBuilder.reflectionToString((Object) null, toStringStyle0, true); [EOL]       assertEquals("<null>", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       String[] stringArray0 = new String[7]; [EOL]       String string0 = CharSetUtils.delete("", stringArray0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       Object object1 = new Object(); [EOL]       assertFalse(object1.equals((Object)object0)); [EOL]        [EOL]       objectArray0[1] = object1; [EOL]       Object object2 = new Object(); [EOL]       assertFalse(object2.equals((Object)object1)); [EOL]       assertFalse(object2.equals((Object)object0)); [EOL]        [EOL]       objectArray0[2] = object2; [EOL]       Object object3 = new Object(); [EOL]       assertFalse(object3.equals((Object)object0)); [EOL]       assertFalse(object3.equals((Object)object1)); [EOL]       assertFalse(object3.equals((Object)object2)); [EOL]        [EOL]       objectArray0[3] = object3; [EOL]       Object object4 = new Object(); [EOL]       assertFalse(object4.equals((Object)object2)); [EOL]       assertFalse(object4.equals((Object)object3)); [EOL]       assertFalse(object4.equals((Object)object1)); [EOL]       assertFalse(object4.equals((Object)object0)); [EOL]        [EOL]       objectArray0[4] = object4; [EOL]       Object object5 = new Object(); [EOL]       assertFalse(object5.equals((Object)object4)); [EOL]       assertFalse(object5.equals((Object)object1)); [EOL]       assertFalse(object5.equals((Object)object0)); [EOL]       assertFalse(object5.equals((Object)object3)); [EOL]       assertFalse(object5.equals((Object)object2)); [EOL]        [EOL]       objectArray0[5] = object5; [EOL]       Object object6 = new Object(); [EOL]       assertFalse(object6.equals((Object)object5)); [EOL]       assertFalse(object6.equals((Object)object3)); [EOL]       assertFalse(object6.equals((Object)object4)); [EOL]       assertFalse(object6.equals((Object)object2)); [EOL]       assertFalse(object6.equals((Object)object0)); [EOL]       assertFalse(object6.equals((Object)object1)); [EOL]        [EOL]       objectArray0[6] = object6; [EOL]       Object object7 = new Object(); [EOL]       assertFalse(object7.equals((Object)object4)); [EOL]       assertFalse(object7.equals((Object)object1)); [EOL]       assertFalse(object7.equals((Object)object0)); [EOL]       assertFalse(object7.equals((Object)object6)); [EOL]       assertFalse(object7.equals((Object)object5)); [EOL]       assertFalse(object7.equals((Object)object2)); [EOL]       assertFalse(object7.equals((Object)object3)); [EOL]        [EOL]       objectArray0[7] = object7; [EOL]       String string0 = StringUtils.join(objectArray0, '-', 0, 0); [EOL]        [EOL]       String string1 = "\\u0"; [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, "{uI!7g>vc\u0002CU2", 0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(string1); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "{uI!7g>vc\u0002CU2", (CharSequence) "{uI!7g>vc\u0002CU2"); [EOL]        [EOL]       String string2 = StringUtils.trimToNull(string1); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = "\\u"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replaceEachRepeatedly(string4, stringArray0, stringArray0); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // Aborting to protect against StackOverflowError - output of one loop is the input of another [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       float[] floatArray0 = new float[8]; [EOL]       int[] intArray0 = new int[0]; [EOL]       float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0); [EOL]       assertEquals(8, floatArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('#'); [EOL]       CharRange charRange1 = CharRange.isIn('$', '#'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]       assertEquals('#', charRange0.getStart()); [EOL]       assertEquals('#', charRange1.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       mutableByte0.setValue((byte)27); [EOL]       assertEquals("27", mutableByte0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3950.07061040265)); [EOL]       Fraction fraction1 = fraction0.reduce(); [EOL]       assertEquals(6897, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.uncapitalize("6# 7,|)c"); [EOL]       assertEquals("6# 7,|)c", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisInstance()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       boolean boolean0 = TypeUtils.isInstance(object0, (Type) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("z", ""); [EOL]       boolean boolean0 = range0.isEndedBy(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("D"); [EOL]       Class<Throwable> class0 = Throwable.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcreateInteger()  throws Throwable  { [EOL]       Integer integer0 = NumberUtils.createInteger("0x9"); [EOL]       assertEquals(9, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.toBoolean(0, (-2729), 0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = '9'; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'G', '\u0000'); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher_CharSetMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strTokenizer0.previous(); [EOL]         fail("Expecting exception: NoSuchElementException"); [EOL]        [EOL]       } catch(NoSuchElementException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrTokenizer", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, 0.0F); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[9]; [EOL]       doubleArray0[5] = 14.0; [EOL]       double double0 = NumberUtils.max(doubleArray0); [EOL]       assertEquals(14.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       short[] shortArray0 = new short[0]; [EOL]       compareToBuilder0.append(shortArray0, (short[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-246)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) "j>-m*", comparator0); [EOL]       boolean boolean0 = range0.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("Wj9["); [EOL]       Comparator<String> comparator0 = range0.getComparator(); [EOL]       Range<String> range1 = Range.is("", comparator0); [EOL]       boolean boolean0 = range1.containsRange(range0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: "); [EOL]        [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       MutableTriple<Object, Object, Integer> mutableTriple0 = new MutableTriple<Object, Object, Integer>(); [EOL]       Object object0 = mutableTriple0.getRight(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetReducedFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(0, 47); [EOL]       Fraction fraction1 = fraction0.ZERO.pow(1); [EOL]       assertSame(fraction1, fraction0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFalse()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(true); [EOL]       Object object0 = new Object(); [EOL]       boolean boolean0 = mutableBoolean0.equals(object0); [EOL]       assertFalse(mutableBoolean0.isFalse()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("", ""); [EOL]       boolean boolean0 = range0.contains(", element2="); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(","); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Date date0 = fastDateFormat0.parse(",", parsePosition0); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContextValues()  throws Throwable  { [EOL]       ContextedException contextedException0 = new ContextedException(); [EOL]       List<Object> list0 = contextedException0.getContextValues((String) null); [EOL]       assertEquals(0, list0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testshortToHex()  throws Throwable  { [EOL]       String string0 = Conversion.shortToHex((byte) (-68), (byte) (-68), "", (byte) (-68), 0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('q'); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]       assertEquals(0, strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("HO", "k,*=iMdn!:7_#XW"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       int int0 = strTokenizer0.previousIndex(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("z", ""); [EOL]       boolean boolean0 = range0.isEndedBy(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_FIFTH; [EOL]       Fraction fraction1 = Fraction.getFraction((-938.4003844737051)); [EOL]       Fraction fraction2 = fraction1.divideBy(fraction0); [EOL]       assertEquals(5722, fraction2.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       int int0 = NumberUtils.max((int) (byte)40, 0, 0); [EOL]       assertEquals(40, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTokenArray()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       String[] stringArray0 = strTokenizer0.getTokenArray(); [EOL]       assertEquals(1, stringArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("["); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       standardToStringStyle0.append(stringBuffer0, "", (int[]) null, boolean0); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       Float float0 = new Float((-2.317804F)); [EOL]       MutableFloat mutableFloat0 = new MutableFloat((Number) float0); [EOL]       int int0 = mutableFloat0.intValue(); [EOL]       assertEquals((-2), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testelementCompareTo()  throws Throwable  { [EOL]       Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm"); [EOL]       Comparator<String> comparator0 = range0.getComparator(); [EOL]       Range<String> range1 = Range.between("Qx#K", "Qx#K", comparator0); [EOL]       int int0 = range1.elementCompareTo("A"); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1547, (-1)); [EOL]       hashCodeBuilder0.append((byte[]) null); [EOL]       assertEquals((-1547), (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       byteArray1[0] = (byte) (-3); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1); [EOL]       compareToBuilder1.append('R', 'R'); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertFalse(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeCsv()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeCsv(" ia}[2m~Vh(rmigNCbq"); [EOL]       assertEquals(" ia}[2m~Vh(rmigNCbq", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetComparator()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("@=:haMS w"); [EOL]       Comparator<String> comparator0 = range0.getComparator(); [EOL]       Range<String> range1 = Range.between(", element2=", "", comparator0); [EOL]       boolean boolean0 = range1.isAfter(", element2="); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArraySeparator(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0, 2259); [EOL]       Fraction fraction1 = fraction0.reduce(); [EOL]       assertFalse(fraction1.equals((Object)fraction0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Locale locale0 = Locale.ITALIAN; [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0); [EOL]       MockGregorianCalendar mockGregorianCalendar1 = ObjectUtils.clone(mockGregorianCalendar0); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(","); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Date date0 = fastDateFormat0.parse(",", parsePosition0); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("-3535 9/10"); [EOL]       assertEquals((-3535.9), fraction0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[8]; [EOL]       doubleArray0[0] = (-2806.1031); [EOL]       double[] doubleArray1 = new double[8]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("", ""); [EOL]       strTokenizer0.reset((char[]) null); [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[3]; [EOL]       shortArray0[0] = (short)0; [EOL]       shortArray0[1] = (short)1304; [EOL]       shortArray0[2] = (short)2; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) equalsBuilder0, (Object) equalsBuilder0); [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) (short)1304; [EOL]       objectArray0[1] = (Object) (short)0; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[2] = object0; [EOL]       objectArray0[3] = (Object) equalsBuilder2; [EOL]       objectArray0[4] = (Object) (short)1304; [EOL]       objectArray0[5] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)0); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (double) (short)0; [EOL]       doubleArray0[1] = (double) (short)2; [EOL]       doubleArray0[2] = (double) (short)2; [EOL]       doubleArray0[3] = (double) (byte)0; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0); [EOL]        [EOL]       double[] doubleArray1 = new double[7]; [EOL]       doubleArray1[0] = (double) (short)1304; [EOL]       doubleArray1[1] = (double) (short)2; [EOL]       doubleArray1[2] = (double) (short)1304; [EOL]       doubleArray1[3] = 1480.7553951; [EOL]       doubleArray1[4] = (double) (byte)0; [EOL]       doubleArray1[5] = (double) (byte)0; [EOL]       doubleArray1[6] = (double) (short)2; [EOL]       equalsBuilder5.append(doubleArray1, doubleArray0); [EOL]       assertFalse(equalsBuilder3.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       String string0 = StringUtils.join(longArray0, 'R'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "2qY<k 8[{rvB"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "2qY<k 8[{rvB"; [EOL]       String string1 = StringUtils.repeat("pa<yhD-&$$*H/W#'", "2qY<k 8[{rvB", 256); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) string1; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       String string2 = StringUtils.prependIfMissingIgnoreCase("2qY<k 8[{rvB", "", charSequenceArray0); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf(charSequenceArray0[5], 0); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "2qY<k 8[{rvB"); [EOL]        [EOL]       byte[] byteArray0 = new byte[6]; [EOL]       byteArray0[0] = (byte) (-128); [EOL]       byteArray0[1] = (byte)127; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)0; [EOL]       byteArray0[4] = (byte)107; [EOL]       byteArray0[5] = (byte) (-10); [EOL]       String string3 = StringUtils.join(byteArray0, ')', 256, 256); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       standardToStringStyle0.append(stringBuffer0, "$> y@oXv:", (float[]) null, boolean0); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.toDouble(); [EOL]       assertEquals(1.0F, mutableDouble0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetVariableSuffix()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("java.lang.Object@0000000003"); [EOL]       StrMatcher strMatcher1 = StrMatcher.noneMatcher(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, strMatcher0, strMatcher1, '='); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('$'); [EOL]       assertEquals('=', strSubstitutor1.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       int int0 = mutableByte0.compareTo(mutableByte0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTimeInstance()  throws Throwable  { [EOL]       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(805, ",Xb<AK6ybxbA}TP"); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0); [EOL]       TimeZone timeZone0 = fastDateFormat0.getTimeZone(); [EOL]       assertSame(timeZone0, simpleTimeZone0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = basicThreadFactory0.getUncaughtExceptionHandler(); [EOL]       assertNull(thread_UncaughtExceptionHandler0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat("287.0"); [EOL]       assertEquals(287.0F, mutableFloat0.getValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('$', '#'); [EOL]       charRange0.hashCode(); [EOL]       assertEquals('#', charRange0.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceOnce("Threshold must not be negative", "O=#yl", "Threshold must not be negative"); [EOL]        [EOL]       String string1 = StringUtils.difference("Threshold must not be negative", "The character must not be null"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterType("1dS@*;h"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace("Threshold must not be negative"); [EOL]        [EOL]       String string2 = StringUtils.chop("Threshold must not be negative"); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "e character must not be null", "Threshold must not be negative"); [EOL]        [EOL]       String string3 = StringUtils.abbreviateMiddle("$mn<`_$Ajg'Wy%T", "O=#yl", 1355); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isEmpty("\n"); [EOL]        [EOL]       String string4 = StringUtils.replace("O=#yl", "The character must not be null", "1dS@*;h", (-1)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]        [EOL]       String string5 = "\\u"; [EOL]       Locale locale0 = Locale.TAIWAN; [EOL]        [EOL]       String string6 = StringUtils.upperCase(string5, locale0); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace("$mn<`_$Ajg'Wy%T"); [EOL]        [EOL]       boolean boolean4 = StringUtils.endsWithAny("O=#yl", stringArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("N,"); [EOL]       standardToStringStyle0.append(stringBuffer0, "<", 0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpow()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_HALF; [EOL]       Fraction fraction1 = fraction0.pow(1); [EOL]       assertSame(fraction1, fraction0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       ImmutableTriple<Object, String, String> immutableTriple0 = new ImmutableTriple<Object, String, String>((Object) null, "org.apache.commons.lang3.tuple.ImmutableTriple", "org.apache.commons.lang3.tuple.ImmutableTriple"); [EOL]       String string0 = immutableTriple0.getRight(); [EOL]       assertEquals("org.apache.commons.lang3.tuple.ImmutableTriple", string0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(false); [EOL]       Integer integer0 = new Integer((-1)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) integer0, (Object) equalsBuilder0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, (float[]) null); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-404.0413F), (-404.0413F)); [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[0] = 1499; [EOL]       intArray0[1] = (-1); [EOL]       intArray0[2] = (-1); [EOL]       intArray0[3] = (-1); [EOL]       equalsBuilder3.reset(); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((-137), 168); [EOL]       intArray0[4] = (-1); [EOL]       intArray0[5] = (-1); [EOL]       intArray0[6] = (-1); [EOL]       intArray0[7] = (-1); [EOL]       intArray0[8] = (-1); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder4.append(intArray0, intArray0); [EOL]       assertFalse(equalsBuilder3.isEquals()); [EOL]        [EOL]       equalsBuilder6.append((long) (-1), 4615L); [EOL]       EqualsBuilder equalsBuilder7 = equalsBuilder1.append((Object) equalsBuilder3, (Object) null); [EOL]       equalsBuilder7.append((Object) equalsBuilder2, (Object) equalsBuilder5); [EOL]       equalsBuilder4.appendSuper(true); [EOL]       Boolean boolean0 = equalsBuilder2.build(); [EOL]       Boolean boolean1 = new Boolean("6.2"); [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[4]; [EOL]       stringArray0[0] = "6.2"; [EOL]       stringArray0[1] = "Unexpected IllegalAccessException"; [EOL]       stringArray0[2] = "6.2"; [EOL]       stringArray0[3] = "6.2"; [EOL]       boolean boolean2 = EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean1, false, (Class<?>) class0, stringArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 1); [EOL]       assertEquals('4', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[7]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "org.apache.commons.lang3.text.StrMatcher$TrimMatcher"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertTrue(strTokenizer1.isEmptyTokenAsNull()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredMatcher(strMatcher_NoMatcher0); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertTrue(strTokenizer1.isEmptyTokenAsNull()); [EOL]       assertTrue(strTokenizer2.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       StringUtils.uncapitalize(""); [EOL]       StringUtils.splitByWholeSeparator("", "A{M+8", 1676); [EOL]       String string0 = StringUtils.LF; [EOL]       StringUtils.splitByWholeSeparator("", "{}"); [EOL]       StringUtils.chomp("{}", ""); [EOL]       StringUtils.substringBetween("", "(/rB[*", ""); [EOL]       String string1 = StringUtils.repeat("", "{}", 1676); [EOL]       StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils"); [EOL]       StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "(/rB[*"); [EOL]       StringUtils.leftPad("Array and element cannot both be null", (-1), 'a'); [EOL]       String string2 = StringUtils.rightPad("AFP|T", 1676, 'a'); [EOL]       StringUtils.center(string2, (-1)); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       StringUtils.join(byteArray0, 'P', 97, (int) (byte)0); [EOL]       StringUtils.left("%,D)K.6*P!\"&U", 1042); [EOL]       StringUtils.left("", 1985); [EOL]       String string3 = StringUtils.join((short[]) null, 'q', 97, 1895); [EOL]       assertNull(string3); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1958.0)); [EOL]       int int0 = fraction0.intValue(); [EOL]       assertEquals(1, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = ObjectUtils.firstNonNull(objectArray0); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('M'); [EOL]       CharRange charRange1 = CharRange.isNot('M'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertEquals('M', charRange1.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[7]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "org.apache.commons.lang3.text.StrMatcher$TrimMatcher"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredMatcher(strMatcher_NoMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]       assertEquals(0, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = " u2$K*+(}VBnq5[k"; [EOL]       String string1 = StringUtils.trimToEmpty(" u2$K*+(}VBnq5[k"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short)10; [EOL]       shortArray0[1] = (short)3304; [EOL]       shortArray0[2] = (short) (-1); [EOL]       shortArray0[3] = (short)1653; [EOL]       short short0 = (short)2757; [EOL]       shortArray0[4] = (short)2757; [EOL]       shortArray0[5] = (short) (-1899); [EOL]       shortArray0[6] = (short) (-556); [EOL]       shortArray0[7] = (short)0; [EOL]       char char0 = ''; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(shortArray0, '', 0, (int) (short)1653); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 8 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteArrayToInt()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[3]; [EOL]       int int0 = Conversion.byteArrayToInt(byteArray0, (byte) (-123), (-1648), (byte) (-123), (byte) (-123)); [EOL]       assertEquals((-1648), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[4] = 1L; [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, 1L); [EOL]       assertEquals(4, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer(649); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendSuper(stringBuffer0, ""); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.reset(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer2.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = "l&x+>@D!zOI^t"; [EOL]       String[] stringArray0 = StringUtils.split("l&x+>@D!zOI^t", "l&x+>@D!zOI^t"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "l&x+>@D!zOI^t", (CharSequence) "l&x+>@D!zOI^t", 64); [EOL]        [EOL]       Locale locale0 = Locale.ITALY; [EOL]       assertEquals("it_IT", locale0.toString()); [EOL]        [EOL]       LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(); [EOL]        [EOL]       Spliterator<Locale.LanguageRange> spliterator0 = linkedList0.spliterator(); [EOL]        [EOL]       int int1 = 3589; [EOL]       Locale.LanguageRange locale_LanguageRange0 = null; [EOL]       try { [EOL]         locale_LanguageRange0 = new Locale.LanguageRange("l&x+>@D!zOI^t"); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // range=l&x+>@d!zoi^t [EOL]          // [EOL]          verifyException("java.util.Locale$LanguageRange", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1)); [EOL]       String[] stringArray0 = new String[8]; [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, stringArray0); [EOL]       assertEquals(23426, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Locale.FilteringMode>) hashMap0, "'/||`uE^3H9V:awk`", "'\"", '1'); [EOL]       StrLookup<?> strLookup0 = strSubstitutor0.getVariableResolver(); [EOL]       HashMap<String, Object> hashMap1 = new HashMap<String, Object>(); [EOL]       String string0 = StrSubstitutor.replace((Object) strLookup0, (Map<String, Object>) hashMap1, "", "UUFKgHx`vs/r\"e\""); [EOL]       assertEquals('1', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(); [EOL]       String[] stringArray0 = strTokenizer0.getTokenArray(); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('$', '#'); [EOL]       charRange0.hashCode(); [EOL]       assertEquals('$', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendStart((StringBuffer) null, (Object) null); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)1); [EOL]       mutableShort0.subtract((short) (-743)); [EOL]       assertEquals(744, mutableShort0.intValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       float[] floatArray0 = new float[6]; [EOL]       hashCodeBuilder0.append(floatArray0); [EOL]       assertEquals(667675993, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder((Object) null, standardToStringStyle0); [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("@'26(YTM-[", byteArray0, true); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetShortClassName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getShortClassName("[[Long"); [EOL]       assertEquals("Long[][]", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null); [EOL]       assertNull(comparable0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0); [EOL]       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0); [EOL]       dateUtils_DateIterator0.hasNext(); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167564800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString()); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, false); [EOL]       char[] charArray0 = new char[7]; [EOL]       compareToBuilder1.append(charArray0, charArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       long long0 = ObjectUtils.CONST((long) (-422)); [EOL]       assertEquals((-422L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAscii('\u0080'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat((-3220.7F)); [EOL]       mutableFloat0.setValue(3455.5F); [EOL]       long long0 = mutableFloat0.longValue(); [EOL]       assertEquals(3455.5, mutableFloat0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate('t', 't', 6); [EOL]       Date date0 = DateUtils.setMilliseconds(mockDate0, 500); [EOL]       assertEquals("Sat Sep 06 00:00:00 GMT 2025", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join(floatArray0, 'f', 7, 7); [EOL]        [EOL]       String string2 = StringUtils.swapCase(", '"); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsWhitespace(", '"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", ', ',", (CharSequence) ", ', ',"); [EOL]        [EOL]       String string3 = StringUtils.difference("Naa./KW8?O/y3WGCL)", ", '"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split(", '"); [EOL]        [EOL]       Stack<String> stack0 = new Stack<String>(); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       Iterator<String> iterator0 = stack0.iterator(); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       String string4 = StringUtils.join(iterator0, "Naa./KW8?O/y3WGCL)"); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       String string5 = StringUtils.difference(", ', ',", ", '"); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ", '", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.center("dEi#@+HAi*tkA$", 0, "$ug'LnL0;\"NGNVp'Z4"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ", '", 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsIgnoreCase("dEi#@+HAi*tkA$", ""); [EOL]        [EOL]       int int3 = StringUtils.indexOf((CharSequence) ", '", (CharSequence) ", '", 2147483645); [EOL]        [EOL]       int int4 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "$ug'LnL0;\"NGNVp'Z4"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("9q1LAZWB!I", "9q1LAZWB!I", "Y.83v&eFU[<IS6{b", "Y.83v&eFU[<IS6{b"); [EOL]       Boolean[] booleanArray0 = new Boolean[8]; [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       booleanArray0[2] = boolean0; [EOL]       booleanArray0[3] = boolean0; [EOL]       booleanArray0[4] = boolean0; [EOL]       booleanArray0[5] = boolean0; [EOL]       booleanArray0[6] = boolean0; [EOL]       booleanArray0[7] = boolean0; [EOL]       Boolean boolean1 = BooleanUtils.xor(booleanArray0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeXml(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.overlay("Hn'Owi<+(|%", "_t", 911, 911); [EOL]        [EOL]       String string1 = StringUtils.remove("Hn'Owi<+(|%", ")gnwYXSZBb.6m"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf(")gnwYXSZBb.6m", "Hn'Owi<+(|%_t", (-1077)); [EOL]        [EOL]       String string2 = StringUtils.removeEnd(";GdEi#@+HAi*tkA$", "Hn'Owi<+(|%_t"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.substring("<4vqh^tj^sV", (-1), 911); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunicodeEscaped()  throws Throwable  { [EOL]       String string0 = CharUtils.unicodeEscaped('\n'); [EOL]       assertEquals("\\u000a", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetCause()  throws Throwable  { [EOL]       String[] stringArray0 = new String[0]; [EOL]       Throwable throwable0 = ExceptionUtils.getCause((Throwable) null, stringArray0); [EOL]       assertNull(throwable0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       char[] charArray0 = new char[10]; [EOL]       StrMatcher strMatcher0 = StrMatcher.spaceMatcher(); [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0, 0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(); [EOL]       ContextedRuntimeException contextedRuntimeException1 = new ContextedRuntimeException("2v|/6-", contextedRuntimeException0); [EOL]       String string0 = contextedRuntimeException1.getRawMessage(); [EOL]       assertEquals("2v|/6-", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRootCause()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(" in an array of "); [EOL]       StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4]; [EOL]       StackTraceElement stackTraceElement0 = new StackTraceElement("tzS-GT4K8T3", "OpenBSD", "OpenBSD", 1902); [EOL]       stackTraceElementArray0[0] = stackTraceElement0; [EOL]       stackTraceElementArray0[1] = stackTraceElement0; [EOL]       StackTraceElement stackTraceElement1 = new StackTraceElement("at", "tzS-GT4K8T3", "tzS-GT4K8T3", (-1)); [EOL]       stackTraceElementArray0[2] = stackTraceElement1; [EOL]       stackTraceElementArray0[3] = stackTraceElement0; [EOL]       mockThrowable0.setStackTrace(stackTraceElementArray0); [EOL]       String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(mockThrowable0); [EOL]       assertEquals(2, stringArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       int[] intArray0 = new int[2]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionEquals()  throws Throwable  { [EOL]       Class<EqualsBuilder> class0 = EqualsBuilder.class; [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "-iPhb"; [EOL]       stringArray0[1] = "-iPhb"; [EOL]       EqualsBuilder.reflectionEquals((Object) "-iPhb", (Object) "-iPhb", false, (Class<?>) class0, stringArray0); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1.0, 1.0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append('z', '+'); [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = 1.0; [EOL]       double[] doubleArray1 = new double[1]; [EOL]       doubleArray1[0] = (double) 'z'; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0.0F, 0.0F); [EOL]       EqualsBuilder.unregister(equalsBuilder4, "CoIRP@C_"); [EOL]       assertSame(equalsBuilder4, equalsBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.clone(shortArray0); [EOL]       assertFalse(shortArray1.equals((Object)shortArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[25]; [EOL]       charSequenceArray0[0] = (CharSequence) "FK_9&Ikf2KWZwC'(o)"; [EOL]       String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.ArrayUtils", '<'); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils"; [EOL]       charSequenceArray0[2] = (CharSequence) "FK_9&Ikf2KWZwC'(o)"; [EOL]       charSequenceArray0[3] = (CharSequence) "FK_9&Ikf2KWZwC'(o)"; [EOL]       charSequenceArray0[4] = (CharSequence) "FK_9&Ikf2KWZwC'(o)"; [EOL]       charSequenceArray0[5] = (CharSequence) "FK_9&Ikf2KWZwC'(o)"; [EOL]       charSequenceArray0[6] = (CharSequence) "FK_9&Ikf2KWZwC'(o)"; [EOL]       charSequenceArray0[7] = (CharSequence) "FK_9&Ikf2KWZwC'(o)"; [EOL]       String string1 = StringUtils.prependIfMissing("FK_9&Ikf2KWZwC'(o)", "FK_9&Ikf2KWZwC'(o)", charSequenceArray0); [EOL]       assertEquals(25, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithAny("FK_9&Ikf2KWZwC'(o)", charSequenceArray0); [EOL]       assertEquals(25, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[4], charSequenceArray0); [EOL]       assertEquals(25, charSequenceArray0.length); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]       assertEquals(25, charSequenceArray0.length); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (float) 0; [EOL]       floatArray0[1] = (float) '<'; [EOL]       floatArray0[2] = (-504.29617F); [EOL]       floatArray0[2] = 497.75266F; [EOL]       floatArray0[4] = (float) '<'; [EOL]       floatArray0[5] = (float) 0; [EOL]       String string2 = StringUtils.join(floatArray0, '<'); [EOL]       assertEquals(6, floatArray0.length); [EOL]        [EOL]       String string3 = StringUtils.join((long[]) null, '<', 0, 14); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSet()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.errorIfNoSemiColon; [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[0]; [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       boolean boolean0 = numericEntityUnescaper0.isSet(numericEntityUnescaper_OPTION0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = "tn"; [EOL]       String string0 = StringUtils.replaceEach("tn", stringArray0, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("tn", "tn"); [EOL]        [EOL]       String string1 = StringUtils.replace("tn", "P5Nf2R.^", ""); [EOL]        [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = 0.0F; [EOL]       floatArray0[1] = (-1.0F); [EOL]       floatArray0[2] = (-2656.2554F); [EOL]       String string2 = StringUtils.join(floatArray0, '\'', 0, 2); [EOL]       assertEquals(3, floatArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("9q1LAZWB!I", "9q1LAZWB!I", "Y.83v&eFU[<IS6{b", "Y.83v&eFU[<IS6{b"); [EOL]       Boolean[] booleanArray0 = new Boolean[8]; [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       booleanArray0[2] = boolean0; [EOL]       booleanArray0[3] = boolean0; [EOL]       booleanArray0[4] = boolean0; [EOL]       booleanArray0[5] = boolean0; [EOL]       booleanArray0[6] = boolean0; [EOL]       booleanArray0[7] = boolean0; [EOL]       Boolean boolean1 = BooleanUtils.or(booleanArray0); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOfThrowable()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(""); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0); [EOL]       mockThrowable0.initCause(mockThrowable1); [EOL]       Class<String> class0 = String.class; [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((-1), (-1), (Object) hashCodeBuilder0, false); [EOL]       assertEquals(17, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendTransients()  throws Throwable  { [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null); [EOL]       Class<String> class0 = String.class; [EOL]       reflectionToStringBuilder0.setUpToClass(class0); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendTransients()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       boolean boolean0 = ObjectUtils.CONST(false); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(); [EOL]       //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]       //  // Unstable assertion: assertTrue(strTokenizer1.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.reset(); [EOL]       //  // Unstable assertion: assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]       //  // Unstable assertion: assertTrue(strTokenizer2.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoIntValue()  throws Throwable  { [EOL]       int int0 = CharUtils.toIntValue((Character) null, (-1412)); [EOL]       assertEquals((-1412), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(1, 1, 1, 1, 1); [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy"); [EOL]       String string0 = DateFormatUtils.format((Date) mockDate0, "&3S", timeZone0, (Locale) null); [EOL]       assertEquals("&30", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       long long0 = stopWatch0.getStartTime(); [EOL]       assertEquals(1392409281320L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replace(";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t", ";GdEi#@+HAi*tkA$Hn'Owi<+(|%_t", "o4f==Fs\"G", 523); [EOL]        [EOL]       String string1 = StringUtils.swapCase("iL!"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       boolean boolean0 = mutableFloat0.equals(mutableFloat0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSet()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-281)); [EOL]       boolean boolean0 = bitField0.isSet((short) (-3518)); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetContextValue()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(""); [EOL]       Object object0 = new Object(); [EOL]       ContextedRuntimeException contextedRuntimeException1 = contextedRuntimeException0.setContextValue((String) null, object0); [EOL]       MockThrowable mockThrowable0 = new MockThrowable(contextedRuntimeException1); [EOL]       ContextedException contextedException0 = new ContextedException((String) null, mockThrowable0, contextedRuntimeException0); [EOL]       List<Object> list0 = contextedException0.getContextValues((String) null); [EOL]       assertFalse(list0.contains("")); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte) (-3); [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = new Boolean("0`{a"); [EOL]       Boolean[] booleanArray0 = new Boolean[9]; [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       booleanArray0[2] = boolean0; [EOL]       booleanArray0[3] = boolean0; [EOL]       booleanArray0[4] = boolean0; [EOL]       booleanArray0[5] = boolean0; [EOL]       booleanArray0[6] = boolean0; [EOL]       booleanArray0[7] = boolean0; [EOL]       Integer integer0 = new Integer((-1820)); [EOL]       Boolean boolean1 = BooleanUtils.toBooleanObject(integer0); [EOL]       booleanArray0[8] = boolean1; [EOL]       Boolean boolean2 = BooleanUtils.xor(booleanArray0); [EOL]       assertTrue(boolean2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT(0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInt()  throws Throwable  { [EOL]       int int0 = NumberUtils.toInt((String) null); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("?f"); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = strTokenizer0.getTrimmerMatcher(); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAccessibleMethod()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0); [EOL]       Method method0 = MethodUtils.getAccessibleMethod(class0, "notify", classArray0); [EOL]       assertFalse(method0.isBridge()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join(floatArray0, 'f', 7, 7); [EOL]        [EOL]       String string2 = StringUtils.swapCase(", '"); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsWhitespace(", '"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", ', ',", (CharSequence) ", ', ',"); [EOL]        [EOL]       String string3 = StringUtils.difference("Naa./KW8?O/y3WGCL)", ", '"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split(", '"); [EOL]        [EOL]       Stack<String> stack0 = new Stack<String>(); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       Iterator<String> iterator0 = stack0.iterator(); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       String string4 = StringUtils.join(iterator0, "Naa./KW8?O/y3WGCL)"); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       String string5 = StringUtils.difference(", ', ',", ", '"); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ", '", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.center("dEi#@+HAi*tkA$", 0, "$ug'LnL0;\"NGNVp'Z4"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ", '", 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsIgnoreCase("dEi#@+HAi*tkA$", ""); [EOL]        [EOL]       int int3 = StringUtils.indexOf((CharSequence) ", '", (CharSequence) ", '", 2147483645); [EOL]        [EOL]       int int4 = StringUtils.indexOf((CharSequence) "dEi#@+HAi*tkA$", 7, Integer.MAX_VALUE); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "dEi#@+HAi*tkA$"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ", '"; [EOL]       charSequenceArray0[4] = (CharSequence) "dEi#@+HAi*tkA$"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ", '"; [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       int[] intArray0 = new int[4]; [EOL]       intArray0[0] = Integer.MAX_VALUE; [EOL]       intArray0[1] = (-1); [EOL]       intArray0[2] = 7; [EOL]       intArray0[3] = (-1); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, 'f', 10, Integer.MAX_VALUE); [EOL]         fail("Expecting exception: NegativeArraySizeException"); [EOL]        [EOL]       } catch(NegativeArraySizeException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       booleanArray0[5] = true; [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]       assertEquals('2', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       compareToBuilder0.append((-0.2838075618630732), (-392.0189162241246)); [EOL]       compareToBuilder0.append((short)5633, (short) (-1422)); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-135)); [EOL]       double[] doubleArray0 = new double[2]; [EOL]       hashCodeBuilder0.append(doubleArray0); [EOL]       assertEquals((-18225), (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Locale.FilteringMode>) hashMap0, "", ""); [EOL]       String string0 = strSubstitutor0.replace((char[]) null, (-857), (-549)); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEndedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm"); [EOL]       boolean boolean0 = range0.isEndedBy(">~{f:w[rbE"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcharSetMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher("=,C@~+e5(:X"); [EOL]       assertNotNull(strMatcher0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSimpleName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getSimpleName((Object) null, ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '\u0015'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches(charBuffer0, false, 0, charBuffer0, 1, 1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsqueeze()  throws Throwable  { [EOL]       String[] stringArray0 = new String[13]; [EOL]       stringArray0[7] = " 3-;hr$|"; [EOL]       String string0 = CharSetUtils.squeeze(" 3-;hr$|", stringArray0); [EOL]       assertEquals(" 3-;hr$|", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("W]f3!"); [EOL]       boolean boolean0 = range0.isOverlappedBy(range0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0, 25, 1790); [EOL]       assertEquals(0.01396648F, fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-1.0)); [EOL]       mutableDouble0.setValue(0.0); [EOL]       mutableDouble0.toDouble(); [EOL]       assertEquals(0.0, mutableDouble0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.subtract(446); [EOL]       float float0 = mutableInt0.floatValue(); [EOL]       assertEquals((-446), (int)mutableInt0.getValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-564)); [EOL]       mutableInt0.increment(); [EOL]       MutableInt mutableInt1 = new MutableInt(mutableInt0); [EOL]       mutableInt1.subtract((-564)); [EOL]       mutableInt1.subtract((Number) mutableInt0); [EOL]       mutableInt0.add((Number) mutableInt1); [EOL]       long long0 = mutableInt0.longValue(); [EOL]       assertEquals(1L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0); [EOL]       assertEquals(6, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexToShort()  throws Throwable  { [EOL]       short short0 = Conversion.hexToShort("9m@?@(H\"?~G", 0, (short) (-3287), 0, 0); [EOL]       assertEquals((short) (-3287), short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.append(stringBuffer0, (String) null, booleanArray0, (Boolean) true); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, (-1107L)); [EOL]       compareToBuilder1.appendSuper((short)0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(480); [EOL]       int int0 = ArrayUtils.indexOf((Object[]) null, (Object) mutableInt0, 480); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(1); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Thread thread0 = MockThread.currentThread(); [EOL]       basicThreadFactory0.newThread(thread0); [EOL]       assertEquals(1, (int)basicThreadFactory0.getPriority()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoStringYesNo()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(77, 77, 77, (-2147483645)); [EOL]       String string0 = BooleanUtils.toStringYesNo((boolean) boolean0); [EOL]       assertEquals("yes", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 0); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(false); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("?f"); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("?f"); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsqueeze()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       String string0 = CharSetUtils.squeeze("", stringArray0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "["); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendSuper(stringBuffer0, "["); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = CharSequenceUtils.indexOf(charBuffer0, charBuffer0, 2947); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substring("*SE8h@D", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "*SE8h@D", (CharSequence) "*SE8h@D"); [EOL]        [EOL]       String string1 = StringUtils.trimToNull(""); [EOL]        [EOL]       String[] stringArray0 = new String[8]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = "*SE8h@D"; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = ""; [EOL]       stringArray0[5] = "org.apache.commons.lang3.StringUtils"; [EOL]       stringArray0[6] = "*SE8h@D"; [EOL]       stringArray0[7] = "*SE8h@D"; [EOL]       String string2 = StringUtils.replaceEach("*SE8h@D", stringArray0, stringArray0); [EOL]       assertEquals(8, stringArray0.length); [EOL]        [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[0] = (long) 0; [EOL]       longArray0[1] = (long) 0; [EOL]       longArray0[2] = (long) 0; [EOL]       longArray0[3] = (long) 0; [EOL]       longArray0[4] = (long) 0; [EOL]       longArray0[5] = 2476L; [EOL]       String string3 = StringUtils.join(longArray0, '5'); [EOL]       assertEquals(6, longArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setSummaryObjectStartText((String) null); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ", Length: ", 1350); [EOL]        [EOL]       String string0 = StringUtils.replaceEachRepeatedly("&pMIARCF#|", stringArray0, stringArray0); [EOL]        [EOL]       String string1 = StringUtils.deleteWhitespace("&pMIARCF#|"); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'H'; [EOL]       charArray0[1] = 'Z'; [EOL]       charArray0[2] = 'Y'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)0; [EOL]       String string2 = StringUtils.join(shortArray0, 'Y', 1350, (int) (short)0); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       Class<Object> class0 = Object.class; [EOL]       ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0); [EOL]        [EOL]       Class<String> class1 = String.class; [EOL]       ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, (ClassLoader) null); [EOL]        [EOL]       Iterator<Object> iterator0 = serviceLoader0.iterator(); [EOL]        [EOL]       String string3 = StringUtils.join(iterator0, 'p'); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       int[] intArray0 = new int[2]; [EOL]       intArray0[0] = (int) (short)0; [EOL]       intArray0[1] = (int) 'Y'; [EOL]       String string4 = StringUtils.join(intArray0, 'H', 89, (int) (short)0); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       Long long0 = mutableLong0.getValue(); [EOL]       assertEquals(0L, (long)long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testshortToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       boolean[] booleanArray1 = Conversion.shortToBinary((short)0, (short)0, booleanArray0, 64, 0); [EOL]       short short0 = Conversion.binaryToShort(booleanArray1, 56, (short)0, 0, (short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(""); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0); [EOL]       mockThrowable0.initCause(mockThrowable1); [EOL]       Class<String> class0 = String.class; [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcloneIfPossible()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-4389)); [EOL]       Integer integer1 = ObjectUtils.cloneIfPossible(integer0); [EOL]       assertEquals((-4389), (int)integer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArrayContentDetail(true); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArraySeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.isAlphanumeric("6Q]Qf.L"); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", (CharSequence[]) null); [EOL]        [EOL]       LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = linkedHashSet0.iterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) null, (String) null); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       boolean boolean2 = linkedHashSet0.add(object0); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, ""); [EOL]        [EOL]       String string2 = StringUtils.removeEndIgnoreCase("p{InCombiningDiacriticalMarks}+", "Aborting to protect against StackOverflowError - output of one loop is the input of another"); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       String string3 = StringUtils.join(floatArray0, 'M', 256, (-2414)); [EOL]       assertEquals(0, floatArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteArrayToLong()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       long long0 = Conversion.byteArrayToLong(byteArray0, 0, (byte)0, (-1173), (byte) (-33)); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Character"); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendSummary(stringBuffer0, "", ""); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "<size=", hashMap0); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.below((-444)); [EOL]       CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[3]; [EOL]       charSequenceTranslatorArray0[0] = (CharSequenceTranslator) numericEntityEscaper0; [EOL]       charSequenceTranslatorArray0[1] = (CharSequenceTranslator) numericEntityEscaper0; [EOL]       charSequenceTranslatorArray0[2] = (CharSequenceTranslator) numericEntityEscaper0; [EOL]       AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0); [EOL]       int int0 = aggregateTranslator0.translate((CharSequence) "\uFFFFF566", 0, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetObject()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder((Object) null, toStringStyle0); [EOL]       Object object0 = toStringBuilder0.getObject(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Properties properties0 = ObjectUtils.CONST((Properties) null); [EOL]       assertNull(properties0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappendDetail()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       LinkedList<Short> linkedList0 = new LinkedList<Short>(); [EOL]       toStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "l-;.dS5ip<{0\"rzsjK", linkedList0); [EOL]       assertEquals("[]", stringBuffer0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Character"); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendSummary(stringBuffer0, "", ""); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       strSubstitutor0.getVariableResolver(); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetJavaHome()  throws Throwable  { [EOL]       EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre"); [EOL]       FileSystemHandling.createFolder(evoSuiteFile0); [EOL]       File file0 = SystemUtils.getJavaHome(); [EOL]       assertFalse(file0.isFile()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("Z\u001DGD=-TUU 6iq?uit", 0.0F); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((int[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       long[] longArray0 = new long[3]; [EOL]       long[] longArray1 = new long[6]; [EOL]       compareToBuilder0.append(longArray0, longArray1); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("#", "yes", "#", "0j]0"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPackageName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageName("Long"); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 1700.0576F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((float[]) null, floatArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short) (-1), (short) (-1)); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append('\\', '1'); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-1), (byte)2); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(1700.0576F, 1700.0576F); [EOL]       Object object0 = new Object(); [EOL]       Boolean boolean0 = Boolean.valueOf(true); [EOL]       IDKey iDKey0 = new IDKey(equalsBuilder1); [EOL]       ImmutablePair<Boolean, Object> immutablePair0 = new ImmutablePair<Boolean, Object>(boolean0, iDKey0); [EOL]       IDKey iDKey1 = new IDKey(immutablePair0); [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       EqualsBuilder.reflectionEquals(object0, (Object) iDKey1, (Collection<String>) linkedList0); [EOL]       equalsBuilder5.append(190, 190); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short)1835, (short)1180); [EOL]       assertSame(equalsBuilder6, equalsBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Class<Object> class1 = Object.class; [EOL]       ParameterizedType parameterizedType0 = mock(ParameterizedType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(class0).when(parameterizedType0).getRawType(); [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class1, parameterizedType0); [EOL]       assertNull(map0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("yOgWC&@FPSz*OgO$", 'O'); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strTokenizer0.tokenize(charArray0, 0, 32); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('z', 'I'); [EOL]       boolean boolean0 = charRange0.contains('I'); [EOL]       assertEquals('z', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcenter()  throws Throwable  { [EOL]       StringUtils.uncapitalize(""); [EOL]       StringUtils.splitByWholeSeparator("", "A{M+8", 1676); [EOL]       String string0 = StringUtils.LF; [EOL]       StringUtils.splitByWholeSeparator("", "{}"); [EOL]       StringUtils.chomp("{}", ""); [EOL]       StringUtils.substringBetween("", "(/rB[*", ""); [EOL]       String string1 = StringUtils.repeat("", "{}", 1676); [EOL]       StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils"); [EOL]       StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "(/rB[*"); [EOL]       StringUtils.leftPad("Array and element cannot both be null", (-1), 'a'); [EOL]       String string2 = StringUtils.rightPad("AFP|T", 1676, 'a'); [EOL]       StringUtils.center(string2, (-1)); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       StringUtils.join(byteArray0, 'P', 97, (int) (byte)0); [EOL]       StringUtils.left("%,D)K.6*P!\"&U", 1042); [EOL]       StringUtils.left("", 1985); [EOL]       String string3 = StringUtils.join((short[]) null, 'q', 97, 1895); [EOL]       assertNull(string3); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       float[] floatArray0 = new float[9]; [EOL]       floatArray0[7] = Float.NaN; [EOL]       float float0 = NumberUtils.min(floatArray0); [EOL]       assertEquals(Float.NaN, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDone()  throws Throwable  { [EOL]       MockError mockError0 = new MockError("rR+m?6&)VD'"); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       concurrentUtils_ConstantFuture0.isDone(); [EOL]       ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<String>("rR+m?6&)VD'"); [EOL]       concurrentUtils_ConstantFuture1.get(); [EOL]       boolean boolean0 = concurrentUtils_ConstantFuture0.isDone(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setFieldSeparatorAtEnd(true); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("Jy0]?g>W @", comparator0); [EOL]       String string0 = range0.toString("[Ryu..Ryu]"); [EOL]       assertEquals("[Ryu..Ryu]", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-198)); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsWhitespace(""); [EOL]        [EOL]       String string0 = StringUtils.repeat("", (-198)); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'R'; [EOL]       charArray0[1] = '\''; [EOL]       charArray0[2] = '6'; [EOL]       charArray0[3] = ','; [EOL]       charArray0[4] = '^'; [EOL]       charArray0[5] = '?'; [EOL]       String string1 = StringUtils.join(charArray0, '3', (-198), (-565)); [EOL]        [EOL]       String string2 = StringUtils.uncapitalize("#,IAu-|& {"); [EOL]        [EOL]       Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(); [EOL]       assertTrue(vector0.isEmpty()); [EOL]        [EOL]       LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>(); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES; [EOL]       List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0); [EOL]       assertTrue(vector0.isEmpty()); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]       assertTrue(list0.isEmpty()); [EOL]        [EOL]       Locale locale0 = Locale.lookup(vector0, list0); [EOL]       assertTrue(vector0.isEmpty()); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]       assertTrue(list0.isEmpty()); [EOL]        [EOL]       String string3 = StringUtils.upperCase((String) null, (Locale) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       booleanArray0[0] = true; [EOL]       Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0); [EOL]       assertEquals(3, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       int int0 = CompareToBuilder.reflectionCompare(object0, object0, true); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       String[] stringArray0 = new String[5]; [EOL]       int int0 = HashCodeBuilder.reflectionHashCode(1, (int)  (-99), integer0, true, (Class<? super Integer>) class0, stringArray0); [EOL]       assertEquals((-95), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens(""); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 571.2558F; [EOL]       floatArray0[1] = 3791.1F; [EOL]       floatArray0[2] = (-1.0F); [EOL]       floatArray0[3] = (-1.0F); [EOL]       floatArray0[4] = (-1011.8F); [EOL]       floatArray0[5] = 0.0F; [EOL]       String string0 = StringUtils.join(floatArray0, 'n'); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0"); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0", '-'); [EOL]       assertFalse(stringArray2.equals((Object)stringArray1)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray0)); [EOL]        [EOL]       String string1 = StringUtils.mid("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0", 517, 604); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short) (-1795); [EOL]       String string2 = StringUtils.join(shortArray0, '-'); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.substring("571.2558n3791.1n-1.0n-1.0n-1011.8n0.0", 3, 64); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = StringUtils.join(floatArray0, '-', 517, (int) (short) (-1795)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithAny(".2558n3791.1n-1.0n-1.0n-1011.8n0.0", stringArray0); [EOL]       assertFalse(stringArray0.equals((Object)stringArray2)); [EOL]       assertFalse(stringArray0.equals((Object)stringArray1)); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(1225); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsAny((CharSequence) charBuffer0, (CharSequence) ""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSupported()  throws Throwable  { [EOL]       boolean boolean0 = CharEncoding.isSupported("UTF-8"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append((Object) integer0, (Object) null, (Comparator<?>) comparator0); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(charArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-946)); [EOL]       MutableByte mutableByte0 = new MutableByte(integer0); [EOL]       float float0 = mutableByte0.floatValue(); [EOL]       assertEquals(78.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0, (int) (byte)0); [EOL]       assertEquals('8', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       short[] shortArray0 = new short[6]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "["); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendSuper(stringBuffer0, "["); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = ",]`*Dhn}>}E"; [EOL]       String string1 = StringUtils.chomp(",]`*Dhn}>}E", ",]`*Dhn}>}E"); [EOL]        [EOL]       String string2 = "Ty9I'"; [EOL]       String[] stringArray0 = StringUtils.splitByCharacterType("Ty9I'"); [EOL]        [EOL]       String string3 = null; [EOL]       String string4 = "):,e}$'B>@H"; [EOL]       String string5 = StringUtils.replaceOnce((String) null, "):,e}$'B>@H", ""); [EOL]        [EOL]       String string6 = StringUtils.leftPad("", 2); [EOL]        [EOL]       HashSet<Object> hashSet0 = new HashSet<Object>(); [EOL]       assertTrue(hashSet0.isEmpty()); [EOL]        [EOL]       Iterator<Object> iterator0 = hashSet0.iterator(); [EOL]       assertTrue(hashSet0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = hashSet0.add((Object) null); [EOL]       assertFalse(hashSet0.isEmpty()); [EOL]        [EOL]       char char0 = 'E'; [EOL]       String string7 = StringUtils.join(iterator0, 'E'); [EOL]       assertFalse(hashSet0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.removePattern("", (String) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexToInt((String) null, 1841, 1841, 0, 0); [EOL]       assertEquals(1841, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.decrement(); [EOL]       long long0 = mutableFloat0.longValue(); [EOL]       assertEquals((-1.0F), mutableFloat0.toFloat(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = 117.0; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 0.0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(doubleArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       String string0 = ":7~;40.\\uqU5cSp,B 8"; [EOL]       stringArray0[0] = string0; [EOL]       CharSet charSet0 = CharSet.getInstance(stringArray0); [EOL]       CharRange[] charRangeArray0 = charSet0.getCharRanges(); [EOL]       assertEquals(19, charRangeArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       ArrayUtils.reverse(shortArray0); [EOL]       assertArrayEquals(new short[] {}, shortArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) equalsBuilder0; [EOL]       objectArray0[1] = (Object) equalsBuilder0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[5] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0); [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[0] = 1306.565008796995; [EOL]       doubleArray0[1] = 1.0; [EOL]       doubleArray0[2] = 1.0; [EOL]       doubleArray0[3] = 1.5; [EOL]       doubleArray0[4] = (-1.0); [EOL]       doubleArray0[5] = (-153.95036); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray0); [EOL]       short[] shortArray0 = new short[7]; [EOL]       shortArray0[0] = (short)429; [EOL]       shortArray0[1] = (short) (-23); [EOL]       shortArray0[2] = (short)516; [EOL]       shortArray0[3] = (short)0; [EOL]       shortArray0[4] = (short) (-9689); [EOL]       shortArray0[5] = (short) (-1); [EOL]       shortArray0[6] = (short) (-32768); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(shortArray0, shortArray0); [EOL]       float[] floatArray0 = new float[9]; [EOL]       floatArray0[0] = 0.0F; [EOL]       floatArray0[1] = (-3260.11F); [EOL]       floatArray0[2] = (float) (short) (-1); [EOL]       floatArray0[3] = (float) (short)0; [EOL]       floatArray0[4] = 2793.0F; [EOL]       floatArray0[5] = (float) (short)0; [EOL]       floatArray0[6] = (float) (short) (-23); [EOL]       floatArray0[7] = (float) (short) (-9689); [EOL]       floatArray0[8] = (float) (short)516; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(floatArray0, floatArray0); [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[0] = (int) (short) (-23); [EOL]       intArray0[1] = (int) (short)0; [EOL]       intArray0[2] = (int) (short)429; [EOL]       intArray0[3] = (int) (short)0; [EOL]       intArray0[4] = (-106); [EOL]       intArray0[5] = (int) (short) (-1); [EOL]       intArray0[6] = (int) (short) (-1); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(intArray0, intArray0); [EOL]        [EOL]       equalsBuilder5.append(shortArray0, (short[]) null); [EOL]       assertFalse(equalsBuilder5.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, Integer.MAX_VALUE); [EOL]        [EOL]       String string0 = StringUtils.chomp(""); [EOL]        [EOL]       String string1 = StringUtils.join((Object[]) null, '?'); [EOL]        [EOL]       String string2 = StringUtils.stripToNull("~Ma9 vn-1R$$G"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha("~Ma9 vn-1R$$G"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("w", (String) null, 862); [EOL]       assertEquals(1, stringArray1.length); [EOL]        [EOL]       String string3 = StringUtils.removeEnd("", "~Ma9 vn-1R$$G"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) "~Ma9 vn-1R$$G"; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "w"; [EOL]       String string4 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("~Ma9 vn-1R$$G"); [EOL]        [EOL]       String string5 = StringUtils.upperCase(""); [EOL]        [EOL]       String string6 = StringUtils.replace("r)s4\"Q%$E", " vs ", "*R!", (-1461)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.subarray((char[]) null, (-59), (-59)); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.increment(); [EOL]       mutableFloat0.getValue(); [EOL]       assertEquals(1.0F, mutableFloat0.getValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       int int0 = bitField0.setBoolean((short)0, false); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[0]; [EOL]       Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0); [EOL]       assertNotSame(byteArray1, byteArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]       assertEquals(1, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststringMatcher()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("iJ"); [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('o'); [EOL]       boolean boolean0 = charRange0.contains('4'); [EOL]       assertEquals('o', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("HtPm+"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, (String) null); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoCharacterObject()  throws Throwable  { [EOL]       Character character0 = CharUtils.toCharacterObject(""); [EOL]       assertNull(character0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testuuidToByteArray()  throws Throwable  { [EOL]       UUID uUID0 = MockUUID.randomUUID(); [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = Conversion.uuidToByteArray(uUID0, byteArray0, (-1), (byte) (-61)); [EOL]       assertSame(byteArray0, byteArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.center("3r|Ld<o", 90, "-^@eL[xD"); [EOL]        [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[0] = (long) 90; [EOL]       longArray0[1] = (long) 90; [EOL]       longArray0[2] = (long) 90; [EOL]       longArray0[3] = (long) 90; [EOL]       longArray0[4] = (long) 90; [EOL]       longArray0[5] = (long) 90; [EOL]       longArray0[6] = (long) 90; [EOL]       longArray0[7] = (-1L); [EOL]       String string1 = StringUtils.join(longArray0, 'S'); [EOL]       assertEquals(8, longArray0.length); [EOL]        [EOL]       String string2 = StringUtils.defaultString(""); [EOL]        [EOL]       String string3 = StringUtils.center("", 90, 'S'); [EOL]        [EOL]       String string4 = StringUtils.rightPad("", 90, "-^@eL[xD"); [EOL]        [EOL]       String string5 = StringUtils.abbreviate("-^@eL[xD", 90); [EOL]        [EOL]       int int0 = StringUtils.lastOrdinalIndexOf("-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-3r|Ld<o-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^", "90S90S90S90S90S90S90S-1", 90); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("90S90S90S90S90S90S90S-1", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlpha(""); [EOL]        [EOL]       String string6 = StringUtils.normalizeSpace(""); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)66; [EOL]       byteArray0[1] = (byte)35; [EOL]       byteArray0[2] = (byte)1; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       String string7 = StringUtils.join(byteArray0, ']', 90, (int) (byte)1); [EOL]       assertEquals(4, byteArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setSummaryObjectStartText((String) null); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAscii('y'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[11]; [EOL]       charArray0[0] = 'R'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = CharSequenceUtils.indexOf(charBuffer0, 0, (-315)); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.appendSuper((byte)0); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)38); [EOL]       int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0); [EOL]       assertArrayEquals(new int[] {38}, intArray2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[5] = '&'; [EOL]       charArray0[6] = '&'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[0]; [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       numericEntityUnescaper0.translate((CharSequence) charBuffer0, (Writer) stringWriter0); [EOL]       assertEquals(9, charBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentStart(""); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Character"); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendSummary(stringBuffer0, "", ""); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetContextValue()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       defaultExceptionContext0.setContextValue((String) null, (Object) null); [EOL]       List<Object> list0 = defaultExceptionContext0.getContextValues((String) null); [EOL]       assertEquals(1, list0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoShort()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       Short short0 = mutableShort0.toShort(); [EOL]       assertEquals((short)0, (short)short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0); [EOL]       assertEquals(6, floatArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiNumeric('5'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.ArrayUtils", '<'); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils"; [EOL]       charSequenceArray0[2] = (CharSequence) "FK_9&Ikf2KWZw'(o)"; [EOL]       charSequenceArray0[3] = (CharSequence) "FK_9&Ikf2KWZw'(o)"; [EOL]       charSequenceArray0[4] = (CharSequence) "FK_9&Ikf2KWZw'(o)"; [EOL]       charSequenceArray0[5] = (CharSequence) "FK_9&Ikf2KWZw'(o)"; [EOL]       charSequenceArray0[6] = (CharSequence) "FK_9&Ikf2KWZw'(o)"; [EOL]       charSequenceArray0[7] = (CharSequence) "FK_9&Ikf2KWZw'(o)"; [EOL]       String string1 = StringUtils.prependIfMissing("FK_9&Ikf2KWZw'(o)", "FK_9&Ikf2KWZw'(o)", charSequenceArray0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithAny("FK_9&Ikf2KWZw'(o)", charSequenceArray0); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[4], charSequenceArray0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (float) 0; [EOL]       floatArray0[1] = (float) '<'; [EOL]       floatArray0[2] = (-528.95856F); [EOL]       floatArray0[3] = 497.75266F; [EOL]       floatArray0[4] = (float) '<'; [EOL]       floatArray0[5] = (float) 0; [EOL]       String string2 = StringUtils.join(floatArray0, '<'); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.left("FK_9&Ikf2KWZw'(o)", (-3490)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder((Object) null, toStringStyle0); [EOL]       String string0 = toStringBuilder0.toString(); [EOL]       assertEquals("<null>", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       String string0 = WordUtils.capitalize((String) null, charArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnormalizeUpperBounds()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[0]; [EOL]       Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0); [EOL]       assertSame(typeArray1, typeArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.substring("", 993, 256); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'c'); [EOL]        [EOL]       String string1 = StringUtils.strip(""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       objectArray0[1] = (Object) ""; [EOL]       objectArray0[2] = (Object) ""; [EOL]       objectArray0[3] = (Object) ""; [EOL]       objectArray0[4] = (Object) ""; [EOL]       objectArray0[5] = (Object) ""; [EOL]       objectArray0[6] = (Object) ""; [EOL]       objectArray0[7] = (Object) ""; [EOL]       objectArray0[8] = (Object) ""; [EOL]       String string2 = StringUtils.join(objectArray0, 'c'); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "cccccccc", 1986); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       String string3 = StringUtils.join(iterator0, ""); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.split("", 'c'); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((-69)); [EOL]       assertEquals(560, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction((-181), (-1)); [EOL]       assertEquals(181.0, fraction0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher((StrMatcher) null); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       int int0 = BooleanUtils.toInteger(true, 1, 1793); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('6', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.reset(); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer2.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbelow()  throws Throwable  { [EOL]       JavaUnicodeEscaper javaUnicodeEscaper0 = JavaUnicodeEscaper.below(2100); [EOL]       assertNotNull(javaUnicodeEscaper0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetShortValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       short short0 = bitField0.setShortValue((short) (-1424), (short)287); [EOL]       assertEquals((short) (-1424), short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Class<Character> class0 = Character.class; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.getShortClassName(class0); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFragment()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       Date date0 = DateUtils.addSeconds(mockDate0, 9); [EOL]       Calendar calendar0 = DateUtils.toCalendar(date0); [EOL]       long long0 = DateUtils.getFragmentInMilliseconds(calendar0, 6); [EOL]       assertEquals(9000L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexDigitMsb0ToInt('5'); [EOL]       assertEquals(10, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetVariableSuffixMatcher()  throws Throwable  { [EOL]       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, ")pB}%]", ")pB}%]"); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariableSuffixMatcher(strSubstitutor0.DEFAULT_SUFFIX); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(1.0); [EOL]       MutableDouble mutableDouble1 = new MutableDouble((-748.4067104)); [EOL]       int int0 = mutableDouble0.compareTo(mutableDouble1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp("Arguments cannot both be null"); [EOL]        [EOL]       int int0 = StringUtils.countMatches("Arguments cannot both be null", "Arguments cannot both be null"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null", 1); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace("Arguments cannot both be null"); [EOL]        [EOL]       String string1 = StringUtils.removeStart("Arguments cannot both be null", "Arguments cannot both be null"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.right("y`i@+9R6[6UP", (-1219)); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "Arguments cannot both be null", 1); [EOL]        [EOL]       String string3 = StringUtils.trimToNull("%gj}z"); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "Search and Replace array lengths don't match: "); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAvailablePermits()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.MICROSECONDS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(1571L, timeUnit0, 0); [EOL]       assertEquals(0, timedSemaphore0.getAvailablePermits()); [EOL]        [EOL]       timedSemaphore0.shutdown(); [EOL]       assertEquals(0, timedSemaphore0.getAvailablePermits()); [EOL]        [EOL]       double double0 = timedSemaphore0.getAverageCallsPerPeriod(); [EOL]       assertEquals(0, timedSemaphore0.getAvailablePermits()); [EOL]        [EOL]       boolean boolean0 = timedSemaphore0.isShutdown(); [EOL]       assertEquals(0, timedSemaphore0.getAvailablePermits()); [EOL]        [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       assertEquals(0, timedSemaphore0.getAvailablePermits()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.reset(); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(1722, (-3368)); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       boolean boolean0 = unicodeEscaper0.translate(1722, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStackFrames()  throws Throwable  { [EOL]       String[] stringArray0 = ExceptionUtils.getStackFrames((Throwable) null); [EOL]       assertEquals(0, stringArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: "); [EOL]        [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.below(2); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       String string0 = numericEntityEscaper0.translate((CharSequence) stringBuffer0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviate("null/empty items", 7, 37); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "null/empty items", (CharSequence) null); [EOL]        [EOL]       String string1 = StringUtils.remove("3/d$6 .+nE6`d)qj", '@'); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.leftPad("D]p};:PD715", 32, '@'); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.center("| !5q1/", (-1), 'f'); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "| !5q1/", "-%0'8&SdBy-69b,p, '"); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       String string4 = StringUtils.join(iterator0, '/'); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((long[]) null, (-1L), 49); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalizeFully()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.capitalizeFully("java.class.version", charArray0); [EOL]       assertEquals("java.class.version", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubSequence()  throws Throwable  { [EOL]       CharSequence charSequence0 = CharSequenceUtils.subSequence("A7cm", 0); [EOL]       assertEquals("A7cm", charSequence0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentEnd("]"); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformatDurationHMS()  throws Throwable  { [EOL]       DurationFormatUtils.formatDurationHMS(3809L); [EOL]       String string0 = DurationFormatUtils.formatDurationWords(2362L, false, false); [EOL]       DurationFormatUtils.formatPeriodISO(2362L, 2362L); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[4]; [EOL]       ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(thaiBuddhistDate0, 920); [EOL]       durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("java.lang.StringBuilder@00000000380java.lang.StringBuilder@00000000390java.lang.StringBuilder@00000000400java.lang.StringBuilder@00000000410java.lang.StringBuilder@00000000420java.lang.StringBuilder@00000000430java.lang.StringBuilder@0000000044000java.lang.StringBuilder@0000000045"); [EOL]       durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1; [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(920); [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0); [EOL]       StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(920); [EOL]       stringBuilder1.appendCodePoint(1806); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(stringBuilder2); [EOL]       durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2; [EOL]       Object object0 = new Object(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(object0); [EOL]       durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3; [EOL]       String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 920, 14, 920, 14, 14, 14, 14, false); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0, 0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between(object0, object0, comparator0); [EOL]       Integer integer0 = new Integer((-1698)); [EOL]       int int0 = range0.elementCompareTo(integer0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((short) (-2700)); [EOL]       hashCodeBuilder0.build(); [EOL]       assertEquals((-2071), (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, standardToStringStyle0); [EOL]       reflectionToStringBuilder0.toString(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnoNullElements()  throws Throwable  { [EOL]       DataTruncation dataTruncation0 = new DataTruncation((-8), false, true, (-1890), (-1890)); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       DataTruncation dataTruncation1 = Validate.noNullElements(dataTruncation0, "The validated expression is false", objectArray0); [EOL]       assertEquals("01004", dataTruncation1.getSQLState()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = true; [EOL]       int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)106); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       CharRange charRange1 = CharRange.is('='); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]       assertEquals('=', charRange1.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       long[] longArray0 = new long[8]; [EOL]       long[] longArray1 = new long[7]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       long[] longArray0 = new long[5]; [EOL]       long[] longArray1 = ArrayUtils.nullToEmpty(longArray0); [EOL]       assertEquals(5, longArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.deleteWhitespace("]8t6!j-57L]8t6!j-57L"); [EOL]        [EOL]       short[] shortArray0 = new short[0]; [EOL]       String string1 = StringUtils.join(shortArray0, 'T'); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, (-1572)); [EOL]        [EOL]       String string2 = StringUtils.deleteWhitespace("]8t6!j-57L]8t6!j-57L"); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'T'; [EOL]       charArray0[1] = 'T'; [EOL]       charArray0[2] = 'T'; [EOL]       charArray0[3] = 'T'; [EOL]       charArray0[4] = 'T'; [EOL]       charArray0[5] = 'T'; [EOL]       charArray0[6] = 'T'; [EOL]       charArray0[7] = 'T'; [EOL]       charArray0[8] = 'R'; [EOL]       String string3 = StringUtils.join(charArray0, 'T'); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "TTTTTTTTTTTTTTTTR", (CharSequence) "]8t6!j-57L]8t6!j-57L"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("N<w+hrWoJ_H$&?"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]       assertEquals(0, strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetByte()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       byte byte0 = bitField0.setByteBoolean((byte) (-100), true); [EOL]       assertEquals((byte) (-99), byte0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0); [EOL]       assertEquals(18, longArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = IEEE754rUtils.max((-2510.288F), (-2510.288F), (-2510.288F)); [EOL]       assertEquals((-2510.288F), float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetCSVInstance()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       int int0 = strTokenizer0.nextIndex(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnotEmpty()  throws Throwable  { [EOL]       HashMap<Integer, SQLException> hashMap0 = new HashMap<Integer, SQLException>(); [EOL]       Integer integer0 = new Integer((-1681)); [EOL]       SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(); [EOL]       hashMap0.put(integer0, sQLIntegrityConstraintViolationException0); [EOL]       HashMap<Integer, SQLException> hashMap1 = Validate.notEmpty(hashMap0); [EOL]       assertSame(hashMap1, hashMap0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       String string0 = "wj!Jg\"YklZk\\u4bZ&7"; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(string0, (Object) toStringBuilder0, true); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisInstanceOf()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""); [EOL]       Validate.isInstanceOf((Class<?>) class0, (Object) sQLIntegrityConstraintViolationException0); [EOL]       assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendStart((StringBuffer) null, (Object) null); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('M'); [EOL]       CharRange charRange1 = CharRange.isNot('M'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertTrue(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", " is not in the range '0' - '9'"); [EOL]        [EOL]       ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       Locale locale0 = Locale.ITALY; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertTrue(set0.isEmpty()); [EOL]        [EOL]       List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]       assertTrue(set0.isEmpty()); [EOL]       assertTrue(list0.isEmpty()); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) list0, ""); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]       assertTrue(set0.isEmpty()); [EOL]       assertTrue(list0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '>'; [EOL]       charArray0[1] = 'n'; [EOL]       charArray0[2] = 'T'; [EOL]       charArray0[3] = 'n'; [EOL]       charArray0[4] = 'V'; [EOL]       charArray0[5] = 'K'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((-1), (-1), (Object) hashCodeBuilder0, false); [EOL]       assertEquals(17, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.toBoolean(0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("hTSA L[6|ryhb5"); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendFieldEnd(stringBuffer0, "Yn/wM^~/pS.V\u0004{"); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       byte byte0 = bitField0.setByte((byte)37); [EOL]       assertEquals((byte)37, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       ConstantInitializer<String> constantInitializer0 = new ConstantInitializer<String>((String) null); [EOL]       String string0 = constantInitializer0.get(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1)); [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[0] = (-1); [EOL]       intArray0[1] = (-1); [EOL]       intArray0[2] = (-1); [EOL]       intArray0[3] = (-1); [EOL]       intArray0[4] = (-1); [EOL]       intArray0[5] = (-1); [EOL]       intArray0[6] = (-1); [EOL]       intArray0[7] = (-1); [EOL]       intArray0[8] = (-1); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0); [EOL]       hashCodeBuilder1.append((char[]) null); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("N<w+hrWoJ_H$&?"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousToken()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = ' '; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       strTokenizer0.setDelimiterChar(' '); [EOL]       String string0 = strTokenizer0.previousToken(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[4]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder.register(hashCodeBuilder0); [EOL]       boolean boolean0 = HashCodeBuilder.isRegistered(hashCodeBuilder0); [EOL]       assertEquals(17, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       char[] charArray0 = new char[31]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, (int) '\u0000', (int) '\u0000'); [EOL]       charSequenceArray0[0] = (CharSequence) charBuffer1; [EOL]       CharSequence[] charSequenceArray1 = new CharSequence[2]; [EOL]       charSequenceArray1[0] = (CharSequence) charBuffer0; [EOL]       CharSequence[][] charSequenceArray2 = new CharSequence[2][0]; [EOL]       charSequenceArray2[0] = charSequenceArray0; [EOL]       charSequenceArray2[1] = charSequenceArray1; [EOL]       LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray2); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       int int0 = lookupTranslator0.translate((CharSequence) charBuffer1, (int) '\u0000', (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST_BYTE()  throws Throwable  { [EOL]       byte byte0 = ObjectUtils.CONST_BYTE(127); [EOL]       assertEquals((byte)127, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(674).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0); [EOL]       boolean boolean0 = range0.isBeforeRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeStartText(); [EOL]       assertEquals("<size=", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       compareToBuilder0.append(floatArray0, (float[]) null); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens(" in an array of "); [EOL]        [EOL]       String[] stringArray1 = StringUtils.split(" in an array of "); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       String string0 = StringUtils.join(stringArray0); [EOL]       assertFalse(stringArray0.equals((Object)stringArray1)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.removePattern("inanarrayof", "\"+CvN#fut1>(TNA"); [EOL]         fail("Expecting exception: PatternSyntaxException"); [EOL]        [EOL]       } catch(PatternSyntaxException e) { [EOL]          // [EOL]          // Unclosed group near index 16 [EOL]          // \"+CvN#fut1>(TNA [EOL]          // [EOL]          verifyException("java.util.regex.Pattern", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('b'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("tzS-G?4K8JT3"); [EOL]       Class<Throwable> class0 = Throwable.class; [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0, 98); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(","); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Object object0 = fastDateFormat0.parseObject("|(ADDNMDo;OhmaJ", parsePosition0); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       Class<ClassUtils> class0 = ClassUtils.class; [EOL]       Class<Short> class1 = Short.TYPE; [EOL]       boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); [EOL]       assertFalse(boolean0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('f'); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]       assertEquals(1, strTokenizer1.nextIndex()); [EOL]       assertEquals(1, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentEnd(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(); [EOL]       StrLookup<Integer> strLookup0 = StrLookup.mapLookup((Map<String, Integer>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "\u0000$$", "z i+Y e}Y", 'B'); [EOL]       strSubstitutor0.replace((String) null); [EOL]       assertEquals('B', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '\\'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       int int0 = octalUnescaper0.translate((CharSequence) charBuffer0, (int) '\u0000', (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       long long0 = mutableDouble0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetImplicitUpperBounds()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       ParameterizedType parameterizedType0 = mock(ParameterizedType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(class0, class0).when(parameterizedType0).getRawType(); [EOL]       Class<Integer> class1 = Integer.class; [EOL]       Type[] typeArray0 = new Type[6]; [EOL]       typeArray0[0] = (Type) class1; [EOL]       typeArray0[1] = (Type) parameterizedType0; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getUpperBounds(); [EOL]       Type[] typeArray1 = TypeUtils.getImplicitUpperBounds(wildcardType0); [EOL]       assertEquals(1, typeArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcreateBigInteger()  throws Throwable  { [EOL]       BigInteger bigInteger0 = NumberUtils.createBigInteger("-9"); [EOL]       assertEquals((byte) (-9), bigInteger0.byteValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double double0 = IEEE754rUtils.max((double) 0.0F, 0.0); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendTransients()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer(156); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("Mqy?`3lp^", (ToStringStyle) null, stringBuffer0, (Class<? super String>) class0, true, true); [EOL]       Class<String> class1 = String.class; [EOL]       reflectionToStringBuilder0.setUpToClass(class1); [EOL]       reflectionToStringBuilder0.toString(); [EOL]       assertTrue(reflectionToStringBuilder0.isAppendTransients()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisTrue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(true); [EOL]       boolean boolean0 = mutableBoolean0.isTrue(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBetween("", " ", "&9M29u!)M&\""); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = '*'; [EOL]       charArray0[1] = 'I'; [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = '3'; [EOL]       charArray0[6] = '['; [EOL]       charArray0[5] = '('; [EOL]       charArray0[6] = '$'; [EOL]       String string1 = StringUtils.join(charArray0, '#'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumeric("*#I#I#3#\u0000#(#$"); [EOL]        [EOL]       String string2 = StringUtils.swapCase((String) null); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       charSequenceArray0[1] = (CharSequence) "*#I#I#3#\u0000#(#$"; [EOL]       String string3 = StringUtils.trimToEmpty((String) null); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) null; [EOL]       boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0); [EOL]        [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[0] = (int) '$'; [EOL]       intArray0[1] = (int) 'I'; [EOL]       intArray0[2] = (int) '*'; [EOL]       intArray0[3] = (int) '*'; [EOL]       intArray0[4] = (int) '('; [EOL]       intArray0[5] = (int) '3'; [EOL]       intArray0[6] = (int) 'I'; [EOL]       String string4 = StringUtils.join(intArray0, '0'); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "36073042042040051073"); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Strings must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteArrayToInt()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[6]; [EOL]       int int0 = Conversion.byteArrayToInt(byteArray0, (-2656), 347, 0, 0); [EOL]       assertEquals(347, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetShortValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-1686)); [EOL]       short short0 = bitField0.getShortValue((short) (-2304)); [EOL]       assertEquals((short) (-1920), short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = fraction0.add(fraction0); [EOL]       assertEquals(4, fraction1.getNumerator()); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       short[] shortArray0 = new short[6]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short[]) null, shortArray0); [EOL]       char[] charArray0 = new char[3]; [EOL]       compareToBuilder1.append(charArray0, charArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("&8J2I8M>C@QrCd", (int[]) null); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("HtPm+"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, (String) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendContentStart(stringBuffer0); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(1.0, 1669.776002828); [EOL]       compareToBuilder1.append(325, 325); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte) (-98)); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       mutableLong0.setValue((-490L)); [EOL]       Long long0 = mutableLong0.toLong(); [EOL]       assertEquals((-490L), (long)long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       int int0 = ArrayUtils.indexOf(longArray0, 3384L); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphaUpper()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       String[] stringArray0 = new String[4]; [EOL]       int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder0, stringArray0); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testatLeast()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.JAVA_1_5; [EOL]       boolean boolean0 = javaVersion0.atLeast(javaVersion0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('#'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertEquals('#', charRange0.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[0]; [EOL]       String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.repeat('=', 2024); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) string1); [EOL]        [EOL]       String string2 = StringUtils.rightPad((String) null, 0, '='); [EOL]        [EOL]       String string3 = StringUtils.join((Object[]) charSequenceArray0, "g,>Z&", 0, 0); [EOL]        [EOL]       String string4 = StringUtils.leftPad(string1, 0, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty("g,>Z&"); [EOL]        [EOL]       String string5 = StringUtils.repeat(string4, 2042); [EOL]        [EOL]       int int1 = StringUtils.length(string1); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.isEmpty((CharSequence) null); [EOL]        [EOL]       int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1466)); [EOL]        [EOL]       String string6 = StringUtils.replace((String) null, "g,>Z&", "%74EI"); [EOL]        [EOL]       String string7 = StringUtils.trimToEmpty("cWbnmu&<>@+h27`^tBN"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlpha("cWbnmu&<>@+h27`^tBN"); [EOL]        [EOL]       String string8 = StringUtils.center("", 2024); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '='; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals("=", charBuffer0.toString()); [EOL]        [EOL]       boolean boolean3 = StringUtils.containsOnly((CharSequence) charBuffer0, charArray0); [EOL]       assertEquals("=", charBuffer0.toString()); [EOL]        [EOL]       String string9 = StringUtils.rightPad((String) null, 2042, "l:Zt{d#Qtgh"); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsWhitespace("cWbnmu&<>@+h27`^tBN"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetShortClassName()  throws Throwable  { [EOL]       Class<Double> class0 = Double.class; [EOL]       String string0 = ClassUtils.getShortClassName(class0); [EOL]       assertEquals("Double", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("\n"); [EOL]        [EOL]       int int0 = StringUtils.countMatches("", "\n"); [EOL]        [EOL]       String string1 = StringUtils.stripEnd("\r", "\n"); [EOL]        [EOL]       ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '='; [EOL]       charArray0[1] = '4'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       boolean boolean0 = arrayList0.add(charBuffer0); [EOL]       assertTrue(arrayList0.contains(charBuffer0)); [EOL]        [EOL]       boolean boolean1 = arrayList0.add(charBuffer0); [EOL]       assertTrue(arrayList0.contains(charBuffer0)); [EOL]        [EOL]       Iterator<CharBuffer> iterator0 = arrayList0.iterator(); [EOL]       assertTrue(arrayList0.contains(charBuffer0)); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, '8'); [EOL]       assertTrue(arrayList0.contains(charBuffer0)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isBlank(""); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) "\r"; [EOL]       objectArray0[1] = (Object) "\r"; [EOL]       objectArray0[2] = (Object) "=48=4"; [EOL]       objectArray0[3] = (Object) iterator0; [EOL]       objectArray0[4] = (Object) '4'; [EOL]       objectArray0[5] = (Object) "\r"; [EOL]       boolean boolean3 = arrayList0.add(charBuffer0); [EOL]       assertTrue(arrayList0.contains(charBuffer0)); [EOL]        [EOL]       String string3 = StringUtils.join(objectArray0, "\r", 14, 14); [EOL]        [EOL]       String string4 = StringUtils.replaceChars("\"QRien*Gh6+:y", "=48=4", "\n"); [EOL]        [EOL]       String string5 = StringUtils.capitalize("{}"); [EOL]        [EOL]       String string6 = StringUtils.abbreviateMiddle("?JH", "{>Wm;>H", (-1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer(649); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendSuper(stringBuffer0, ""); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(false); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableTriple<ImmutableTriple<Object, Object, Integer>, MutableTriple<Integer, Object, Object>, Triple<String, String, String>> mutableTriple0 = new MutableTriple<ImmutableTriple<Object, Object, Integer>, MutableTriple<Integer, Object, Object>, Triple<String, String, String>>(); [EOL]       boolean boolean0 = mutableTriple0.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       MutableByte mutableByte1 = new MutableByte(); [EOL]       mutableByte1.increment(); [EOL]       int int0 = mutableByte1.compareTo(mutableByte0); [EOL]       assertEquals(1.0F, mutableByte1.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "<size="); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('\\'); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer2.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testrepeat()  throws Throwable  { [EOL]       StringUtils.uncapitalize(""); [EOL]       StringUtils.splitByWholeSeparator("", "A{M+8", 1676); [EOL]       String string0 = StringUtils.LF; [EOL]       StringUtils.splitByWholeSeparator("", "{}"); [EOL]       StringUtils.chomp("{}", ""); [EOL]       StringUtils.substringBetween("", "(/rB[*", ""); [EOL]       String string1 = StringUtils.repeat("", "{}", 1676); [EOL]       StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils"); [EOL]       StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "(/rB[*"); [EOL]       StringUtils.leftPad("Array and element cannot both be null", (-1), 'a'); [EOL]       String string2 = StringUtils.rightPad("AFP|T", 1676, 'a'); [EOL]       StringUtils.center(string2, (-1)); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       StringUtils.join(byteArray0, 'P', 97, (int) (byte)0); [EOL]       StringUtils.left("%,D)K.6*P!\"&U", 1042); [EOL]       StringUtils.left("", 1985); [EOL]       String string3 = StringUtils.join((short[]) null, 'q', 97, 1895); [EOL]       assertNull(string3); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("", toStringStyle0); [EOL]       float[] floatArray0 = new float[5]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", floatArray0, false); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoByte()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       Byte byte0 = mutableByte0.toByte(); [EOL]       assertEquals((byte)0, (byte)byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("HO", "k,*=iMdn!:7_#XW"); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertTrue(strTokenizer1.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer1.isEmptyTokenAsNull(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertTrue(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "{#\"g)H,SIQy", "{#\"g)H,SIQy"); [EOL]       StrMatcher strMatcher0 = strSubstitutor0.getVariablePrefixMatcher(); [EOL]       HashMap<String, StrLookup.MapStrLookup<Object>> hashMap1 = new HashMap<String, StrLookup.MapStrLookup<Object>>(); [EOL]       StrSubstitutor.replace((Object) strMatcher0, (Map<String, StrLookup.MapStrLookup<Object>>) hashMap1); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, "$> y@oXv:", "$> y@oXv:"); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(byteArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("N<w+hrWoJ_H$&?"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]       assertEquals(0, strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) 3075L; [EOL]       float float0 = NumberUtils.min(floatArray0); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSet()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.errorIfNoSemiColon; [EOL]       boolean boolean0 = numericEntityUnescaper0.isSet(numericEntityUnescaper_OPTION0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setSummaryObjectStartText((String) null); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(true, true); [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(object0, object0); [EOL]       assertTrue(equalsBuilder2.build()); [EOL]        [EOL]       double[] doubleArray0 = new double[5]; [EOL]       doubleArray0[0] = 132.80904; [EOL]       doubleArray0[1] = (-1662.7148128219212); [EOL]       doubleArray0[2] = (-430.9); [EOL]       doubleArray0[3] = 0.0; [EOL]       doubleArray0[4] = 0.0; [EOL]       double[] doubleArray1 = new double[7]; [EOL]       doubleArray1[0] = 132.80904; [EOL]       doubleArray1[1] = 0.0; [EOL]       doubleArray1[2] = 132.80904; [EOL]       doubleArray1[3] = (-430.9); [EOL]       doubleArray1[4] = 0.0; [EOL]       doubleArray1[5] = (-430.9); [EOL]       doubleArray1[6] = 132.80904; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-2632.444222626), (-2632.444222626)); [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) 132.80904; [EOL]       objectArray0[2] = (Object) equalsBuilder1; [EOL]       objectArray0[3] = (Object) 0.0; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0); [EOL]       Boolean boolean0 = equalsBuilder5.build(); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("#jonI"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrMatcher strMatcher0 = strTokenizer0.getQuoteMatcher(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.6"); [EOL]       assertEquals(JavaVersion.JAVA_1_6, javaVersion0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoIntegerObject()  throws Throwable  { [EOL]       Integer integer0 = BooleanUtils.toIntegerObject(false); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '!'; [EOL]       StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('!'); [EOL]       int int0 = strMatcher_CharMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, '%', 2868); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte) (-98)); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       mutableLong0.setValue((-490L)); [EOL]       Long long0 = mutableLong0.toLong(); [EOL]       assertEquals((-490L), (long)long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       StringUtils.uncapitalize(""); [EOL]       StringUtils.splitByWholeSeparator("", "A{M+8", 1676); [EOL]       String string0 = StringUtils.LF; [EOL]       StringUtils.splitByWholeSeparator("", "{}"); [EOL]       StringUtils.chomp("{}", ""); [EOL]       StringUtils.substringBetween("", "(/rB[*", ""); [EOL]       String string1 = StringUtils.repeat("", "{}", 1676); [EOL]       StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils"); [EOL]       StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "(/rB[*"); [EOL]       StringUtils.leftPad("Array and element cannot both be null", (-1), 'a'); [EOL]       String string2 = StringUtils.rightPad("AFP|T", 1676, 'a'); [EOL]       StringUtils.center(string2, (-1)); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       StringUtils.join(byteArray0, 'P', 97, (int) (byte)0); [EOL]       StringUtils.left("%,D)K.6*P!\"&U", 1042); [EOL]       StringUtils.left("", 1985); [EOL]       String string3 = StringUtils.join((short[]) null, 'q', 97, 1895); [EOL]       assertNull(string3); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("yOgWC&@FPSz*OgO$", 'O'); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strTokenizer0.tokenize(charArray0, 0, 32); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       long[] longArray0 = new long[3]; [EOL]       long[] longArray1 = new long[3]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiControl()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiControl('\r'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer((String) null, strMatcher0, strMatcher1); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = (-1L); [EOL]       String string0 = StringUtils.join(longArray0, 'i'); [EOL]       assertEquals(1, longArray0.length); [EOL]        [EOL]       String[] stringArray0 = new String[7]; [EOL]       stringArray0[0] = "-1"; [EOL]       stringArray0[1] = "-1"; [EOL]       stringArray0[2] = "-1"; [EOL]       stringArray0[3] = "-1"; [EOL]       stringArray0[4] = "-1"; [EOL]       stringArray0[5] = "-1"; [EOL]       stringArray0[6] = "-1"; [EOL]       String string1 = StringUtils.getCommonPrefix(stringArray0); [EOL]       assertEquals(7, stringArray0.length); [EOL]        [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]        [EOL]       Iterator<String> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.equals((CharSequence) "-1", (CharSequence) ""); [EOL]        [EOL]       int int0 = (-1114); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.getLevenshteinDistance((CharSequence) "-1", (CharSequence) null, (-1114)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Strings must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.trim("W6TVN6=>CjoqovK}W{o"); [EOL]        [EOL]       String string1 = StringUtils.center("W6TVN6=>CjoqovK}W{o", 0); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Class<Character> class0 = Character.class; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.getShortClassName(class0); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)15, 3257.0); [EOL]       assertEquals(6, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetProperWhole()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.FOUR_FIFTHS; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testquoteMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       byteArray1[0] = (byte) (-3); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1); [EOL]       compareToBuilder1.append('R', 'R'); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "f!m 0,^Lk1QHk'=Z#N"; [EOL]       String string1 = StringUtils.substringAfterLast("f!m 0,^Lk1QHk'=Z#N", "f!m 0,^Lk1QHk'=Z#N"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("f!m 0,^Lk1QHk'=Z#N"); [EOL]       assertEquals(16, stringArray0.length); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "", (-3455), (-3455)); [EOL]        [EOL]       String string2 = ";v,)#3v,-2T+"; [EOL]       int int1 = 64; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Object[]) stringArray0, ";v,)#3v,-2T+", 64, 1159); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 64 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("G", 'D'); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("G", "44"); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.leftPad("", 256, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty("                                                                                                                                                                                                                                                                "); [EOL]        [EOL]       String[] stringArray1 = new String[3]; [EOL]        [EOL]       stringArray1[0] = "G"; [EOL]       stringArray1[1] = "G"; [EOL]       stringArray1[2] = "44"; [EOL]       String[] stringArray2 = StringUtils.stripAll(stringArray1); [EOL]       assertEquals(3, stringArray1.length); [EOL]       assertEquals(3, stringArray2.length); [EOL]        [EOL]       String string2 = StringUtils.chop(""); [EOL]        [EOL]       String string3 = StringUtils.repeat("", 256); [EOL]        [EOL]       String string4 = StringUtils.trim(""); [EOL]        [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)7; [EOL]       byteArray0[3] = (byte)0; [EOL]       byteArray0[4] = (byte)84; [EOL]       String string5 = StringUtils.join(byteArray0, '='); [EOL]       assertEquals(5, byteArray0.length); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "0=0=7=0=84", (CharSequence) "44", 4301); [EOL]        [EOL]       String string6 = StringUtils.rightPad("44", 4096, ""); [EOL]        [EOL]       String string7 = StringUtils.chomp(string6); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isDefaultFullDetail(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('a'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('o'); [EOL]       boolean boolean0 = charRange0.contains('4'); [EOL]       assertEquals('o', charRange0.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       MutableInt mutableInt1 = new MutableInt(mutableInt0); [EOL]       mutableInt1.setValue(4441); [EOL]       boolean boolean0 = mutableInt0.equals(mutableInt1); [EOL]       assertEquals(4441L, mutableInt1.longValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendAsObjectToString(object0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = new Boolean("0`{a"); [EOL]       boolean boolean1 = BooleanUtils.toBoolean(boolean0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplaceSystemProperties()  throws Throwable  { [EOL]       String string0 = StrSubstitutor.replaceSystemProperties(""); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.isEmptyTokenAsNull(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       Integer integer0 = new Integer(0); [EOL]       Integer integer1 = BooleanUtils.toIntegerObject((boolean) boolean0, integer0, integer0); [EOL]       assertEquals(0, (int)integer1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendToString(""); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("HtPm+"); [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       Boolean boolean0 = Boolean.valueOf(false); [EOL]       standardToStringStyle0.append(stringBuffer0, "HtPm+", booleanArray0, boolean0); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byteArray0[0] = (byte)49; [EOL]       byteArray0[1] = (byte) (-80); [EOL]       String string0 = StringUtils.join(byteArray0, '{'); [EOL]       assertEquals(2, byteArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "49{-80", (CharSequence) "49{-80"); [EOL]        [EOL]       String string1 = StringUtils.lowerCase("49{-80"); [EOL]        [EOL]       String string2 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "49{-80"); [EOL]        [EOL]       String string3 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", ""); [EOL]        [EOL]       String string4 = StringUtils.stripToEmpty("49{-80"); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "49{-80"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       String string5 = StringUtils.overlay("49{-80", ":G,e", (byte) (-80), 64); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ":G,e"; [EOL]       charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils"; [EOL]       charSequenceArray0[2] = (CharSequence) "49{-80"; [EOL]       charSequenceArray0[3] = (CharSequence) "49{-80"; [EOL]       charSequenceArray0[4] = (CharSequence) "49{-80"; [EOL]       String string6 = StringUtils.appendIfMissing("49{-80", "49{-80", charSequenceArray0); [EOL]       assertEquals(5, charSequenceArray0.length); [EOL]        [EOL]       String string7 = StringUtils.removeEnd("&>:M=P8n", "org.apache.commons.lang3.CharUtils"); [EOL]        [EOL]       String string8 = StringUtils.lowerCase("d=]`&5fvyds"); [EOL]        [EOL]       boolean boolean2 = StringUtils.equalsIgnoreCase("d=]`&5fvyds", charSequenceArray0[1]); [EOL]       assertEquals(5, charSequenceArray0.length); [EOL]        [EOL]       String string9 = StringUtils.repeat("", 0); [EOL]        [EOL]       String string10 = StringUtils.trimToEmpty("The character "); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-246)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) "j>-m*", comparator0); [EOL]       boolean boolean0 = range0.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiPrintable()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\r'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.ObjectUtils$Null", "org.apache.commons.lang3.ObjectUtils$Null"); [EOL]        [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[0] = 13; [EOL]       intArray0[1] = 8; [EOL]       intArray0[2] = 17; [EOL]       intArray0[3] = 3152; [EOL]       intArray0[4] = 20; [EOL]       intArray0[5] = 62; [EOL]       intArray0[6] = 35; [EOL]       String string0 = StringUtils.join(intArray0, 'u'); [EOL]        [EOL]       LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       Iterator<Object> iterator0 = linkedHashSet0.iterator(); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       String string1 = StringUtils.join(iterator0, 'u'); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       String string2 = StringUtils.join((long[]) null, 'u', 7, (-1322)); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Object[]) stringArray0, "13u8u17u3152u20u62u35", (-1), 2); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       Character character0 = CharUtils.toCharacterObject(""); [EOL]       assertNull(character0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       booleanArray0[3] = true; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(false); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, "$> y@oXv:", "$> y@oXv:"); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isDefaultFullDetail(); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '9'; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'G', '\u0000'); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher_CharSetMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.setIgnoredMatcher(strMatcher_CharSetMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer2.nextIndex()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strTokenizer0.previous(); [EOL]         fail("Expecting exception: NoSuchElementException"); [EOL]        [EOL]       } catch(NoSuchElementException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrTokenizer", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "]"); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.removeLastFieldSeparator(stringBuffer0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm"); [EOL]       String string0 = range0.toString(); [EOL]       assertEquals("[,8A9<~PCQqm..,8A9<~PCQqm]", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer(649); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendSuper(stringBuffer0, ""); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArraySeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(9); [EOL]       assertEquals('9', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.removeStart("l:Zt{d#Qtgh", "Strings must not be null"); [EOL]        [EOL]       String string1 = StringUtils.join((Object[]) null); [EOL]        [EOL]       String string2 = StringUtils.removeStartIgnoreCase("l:Zt{d#Qtgh", "l:Zt{d#Qtgh"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.repeat("", 2118); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha(""); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = "l:Zt{d#Qtgh"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = "Strings must not be null"; [EOL]       stringArray0[5] = "Strings must not be null"; [EOL]       stringArray0[6] = "l:Zt{d#Qtgh"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       String string4 = StringUtils.stripToNull("l:Zt{d#Qtgh"); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertTrue(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNotEmpty(""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Cannot store ", ""); [EOL]       assertFalse(stringArray2.equals((Object)stringArray0)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray1)); [EOL]        [EOL]       String string5 = StringUtils.join((Iterable<?>) null, '^'); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]        [EOL]       String string6 = StringUtils.upperCase("l:Zt{d#Qtgh", locale0); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]        [EOL]       String string7 = StringUtils.defaultString("", "\r"); [EOL]       assertTrue(string7.equals((Object)string3)); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertTrue(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]        [EOL]       String string8 = StringUtils.trimToEmpty(""); [EOL]       assertTrue(string8.equals((Object)string7)); [EOL]       assertTrue(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertFalse(string8.equals((Object)string0)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertTrue(string8.equals((Object)string3)); [EOL]        [EOL]       boolean boolean2 = StringUtils.endsWithIgnoreCase("", "l:Zt{d#Qtgh"); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllLowerCase("\r"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<Long> class0 = Long.class; [EOL]       Class<?> class1 = ClassUtils.wrapperToPrimitive(class0); [EOL]       Class<?> class2 = ClassUtils.primitiveToWrapper(class1); [EOL]       assertFalse(class2.isPrimitive()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "*SE8h@D", (CharSequence) "*SE8h@D"); [EOL]        [EOL]       String string0 = StringUtils.trimToNull(""); [EOL]        [EOL]       String[] stringArray0 = new String[8]; [EOL]       stringArray0[0] = "*SE8h@D"; [EOL]       stringArray0[2] = "*SE8h@D"; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = ""; [EOL]       stringArray0[5] = "org.apache.commons.lang3.StringUtils"; [EOL]       stringArray0[6] = "*SE8h@D"; [EOL]       stringArray0[7] = "*SE8h@D"; [EOL]       String string1 = StringUtils.replaceEach("*SE8h@D", stringArray0, stringArray0); [EOL]       assertEquals(8, stringArray0.length); [EOL]        [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[0] = (long) 0; [EOL]       longArray0[1] = (long) 0; [EOL]       longArray0[5] = (long) 0; [EOL]       longArray0[3] = (long) 0; [EOL]       longArray0[4] = (long) 0; [EOL]       longArray0[5] = 0L; [EOL]       String string2 = StringUtils.removePattern("*SE8h@D", "kR"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string3 = StringUtils.removeStart("*SE8h@D", "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string4 = StringUtils.strip(">1zFG%4U30\" UK1", "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlpha(">1zFG%4U30\" UK1"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.substring("", 2, 48); [EOL]        [EOL]       String string1 = StringUtils.rightPad("", 0, ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.defaultString(""); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'j'; [EOL]       charArray0[1] = '7'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]        [EOL]       long[] longArray0 = new long[0]; [EOL]       String string3 = StringUtils.join(longArray0, '7'); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank(""); [EOL]        [EOL]       String string4 = StringUtils.defaultIfBlank("", "1Fc$<;6o{OHl_g.#"); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat((-3223.9314F)); [EOL]       mutableFloat0.hashCode(); [EOL]       assertEquals((-3223.9314F), mutableFloat0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       int[] intArray1 = ArrayUtils.clone(intArray0); [EOL]       assertEquals(1, intArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRegisterPair()  throws Throwable  { [EOL]       Pair<IDKey, IDKey> pair0 = EqualsBuilder.getRegisterPair((Object) null, (Object) null); [EOL]       assertNotNull(pair0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setSummaryObjectStartText((String) null); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnotEqual()  throws Throwable  { [EOL]       ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS; [EOL]       boolean boolean0 = ObjectUtils.notEqual(chronoUnit0, "v.n"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0((short)2); [EOL]       assertEquals('4', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       Locale locale0 = Locale.FRANCE; [EOL]       ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 1); [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 2, timeZone0, locale0); [EOL]       assertEquals(2, FastDateFormat.MEDIUM); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4105.586979868256), Integer.MAX_VALUE); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[3]; [EOL]       Character character0 = new Character('T'); [EOL]       characterArray0[0] = character0; [EOL]       characterArray0[1] = character0; [EOL]       characterArray0[2] = characterArray0[0]; [EOL]       char[] charArray0 = ArrayUtils.toPrimitive(characterArray0); [EOL]       assertArrayEquals(new char[] {'T', 'T', 'T'}, charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisOSNameMatch()  throws Throwable  { [EOL]       boolean boolean0 = SystemUtils.isOSNameMatch("k21k dC0Dww", "k21k dC0Dww"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("Arguments cannot both be null", "", 34); [EOL]       assertEquals(5, stringArray0.length); [EOL]        [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (float) 34; [EOL]       String string0 = StringUtils.join(floatArray0, ']', 34, 34); [EOL]       assertEquals(1, floatArray0.length); [EOL]        [EOL]       byte[] byteArray0 = new byte[6]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte)107; [EOL]       byteArray0[2] = (byte)10; [EOL]       byteArray0[3] = (byte)0; [EOL]       byteArray0[4] = (byte) (-1); [EOL]       byteArray0[5] = (byte)0; [EOL]       String string1 = StringUtils.join(byteArray0, ']', 3386, 0); [EOL]       assertEquals(6, byteArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.removeStart("l:Zt{d#Qtgh", "Strings must not be null"); [EOL]        [EOL]       String string1 = StringUtils.join((Object[]) null); [EOL]        [EOL]       String string2 = StringUtils.removeStartIgnoreCase("l:Zt{d#Qtgh", "l:Zt{d#Qtgh"); [EOL]        [EOL]       String string3 = StringUtils.repeat("", 2118); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha(""); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = "l:Zt{d#Qtgh"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = "Strings must not be null"; [EOL]       stringArray0[5] = "Strings must not be null"; [EOL]       stringArray0[6] = "l:Zt{d#Qtgh"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       String string4 = StringUtils.stripToNull("l:Zt{d#Qtgh"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNotEmpty(""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Cannot store ", ""); [EOL]        [EOL]       String string5 = StringUtils.join((Iterable<?>) null, '^'); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]       assertEquals("", locale0.toString()); [EOL]        [EOL]       String string6 = StringUtils.upperCase("l:Zt{d#Qtgh", locale0); [EOL]       assertEquals("", locale0.toString()); [EOL]        [EOL]       String string7 = StringUtils.defaultString("", "\r"); [EOL]        [EOL]       String string8 = StringUtils.trimToEmpty(""); [EOL]        [EOL]       boolean boolean2 = StringUtils.endsWithIgnoreCase("", "l:Zt{d#Qtgh"); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllLowerCase("\r"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       long[] longArray0 = new long[9]; [EOL]       longArray0[0] = 1276L; [EOL]       longArray0[1] = (-984L); [EOL]       longArray0[2] = 1226L; [EOL]       longArray0[3] = (-5396L); [EOL]       longArray0[4] = 0L; [EOL]       longArray0[5] = (-1L); [EOL]       longArray0[6] = 0L; [EOL]       longArray0[7] = (-462L); [EOL]       longArray0[8] = (-1L); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 0); [EOL]       assertTrue(equalsBuilder2.build()); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = 0; [EOL]       intArray0[1] = 0; [EOL]       intArray0[3] = 0; [EOL]       intArray0[4] = 0; [EOL]       intArray0[5] = 0; [EOL]       intArray0[6] = 0; [EOL]       intArray0[7] = 0; [EOL]       int[] intArray1 = new int[8]; [EOL]       intArray1[0] = 0; [EOL]       intArray1[1] = 0; [EOL]       intArray1[2] = (-363); [EOL]       intArray1[3] = 0; [EOL]       intArray1[4] = 0; [EOL]       intArray1[5] = 0; [EOL]       intArray1[6] = 0; [EOL]       intArray1[7] = 0; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((double) 0, (double) (-1L)); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-116), (byte) (-116)); [EOL]       equalsBuilder5.append(false, false); [EOL]       assertFalse(equalsBuilder1.build()); [EOL]       assertFalse(equalsBuilder5.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testclear()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-887)); [EOL]       byte byte0 = bitField0.clearByte((byte)0); [EOL]       assertEquals((byte)0, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameDay()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1001, (-2866), 6, 3, 1, 1909); [EOL]       boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.appendClassName(stringBuffer0, (Object) null); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentEnd("]"); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append('h'); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       shortArray0[0] = (short)0; [EOL]       shortArray0[1] = (short)122; [EOL]       shortArray0[2] = (short) (-1); [EOL]       shortArray0[3] = (short) (-1182); [EOL]       shortArray0[4] = (short)0; [EOL]       String string0 = StringUtils.join(shortArray0, 'o', 13, (int) (short) (-1182)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", ""); [EOL]        [EOL]       String string1 = StringUtils.rightPad("", 2977); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.remove("", 'o'); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>(); [EOL]        [EOL]       SortedSet<String> sortedSet0 = treeSet0.headSet("D1CDQwpG"); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) sortedSet0, '\''); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String) null, (String) null, 267); [EOL]        [EOL]       String string2 = StringUtils.removeStartIgnoreCase((String) null, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.replace("", (String) null, ""); [EOL]        [EOL]       String string4 = StringUtils.replace("C47+}uBC", (String) null, "bPuF"); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]        [EOL]       String string5 = StringUtils.defaultString((String) null); [EOL]       assertTrue(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "C47+}uBC", (CharSequence) "", 267); [EOL]        [EOL]       String string6 = StringUtils.chomp(" in an array of "); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]        [EOL]       String string7 = StringUtils.trimToEmpty(""); [EOL]       assertTrue(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertTrue(string7.equals((Object)string3)); [EOL]        [EOL]       String string8 = StringUtils.stripToEmpty(""); [EOL]       assertTrue(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertTrue(string8.equals((Object)string7)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertTrue(string8.equals((Object)string3)); [EOL]        [EOL]       int int3 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-132)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'F'; [EOL]       charArray0[1] = '#'; [EOL]       charArray0[2] = 'f'; [EOL]       String string9 = StringUtils.join(charArray0, 'F'); [EOL]       assertFalse(string9.equals((Object)string4)); [EOL]       assertFalse(string9.equals((Object)string7)); [EOL]       assertFalse(string9.equals((Object)string6)); [EOL]       assertFalse(string9.equals((Object)string5)); [EOL]       assertFalse(string9.equals((Object)string8)); [EOL]       assertFalse(string9.equals((Object)string3)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(","); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Date date0 = fastDateFormat0.parse("v", parsePosition0); [EOL]       assertNull(date0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isDefaultFullDetail(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       String string0 = DateFormatUtils.formatUTC((Date) mockDate0, "}+)"); [EOL]       assertEquals("}+)", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigitMsb0()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(10); [EOL]       assertEquals('5', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setUseShortClassName(true); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRootCause()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null); [EOL]       Throwable throwable0 = ExceptionUtils.getRootCause(mockThrowable0); [EOL]       assertNull(throwable0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)1); [EOL]       long long0 = mutableShort0.longValue(); [EOL]       assertEquals(1L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArrayContentDetail(true); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       Byte byte0 = new Byte((byte) (-104)); [EOL]       mutableInt0.subtract((Number) byte0); [EOL]       mutableInt0.subtract((Number) byte0); [EOL]       mutableInt0.add((Number) byte0); [EOL]       mutableInt0.subtract(446); [EOL]       Integer integer0 = mutableInt0.getValue(); [EOL]       assertEquals((-342), (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0); [EOL]       assertEquals(8, byteArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0); [EOL]       assertTrue(map0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "{#\"g)H,SIQy", "{#\"g)H,SIQy"); [EOL]       String string0 = strSubstitutor0.replace((StrBuilder) null, (-1020), (-1020)); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) "r.Ngw'UzA", comparator0); [EOL]       Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class)); [EOL]       Range<Range<Object>> range1 = Range.between(range0, range0, comparator1); [EOL]       String string0 = range1.toString(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       long long0 = stopWatch0.getNanoTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAccessible()  throws Throwable  { [EOL]       boolean boolean0 = MemberUtils.isAccessible((Member) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.CR; [EOL]        [EOL]       boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r"); [EOL]        [EOL]       String string1 = StringUtils.right("\r", 351); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) "\r"; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[1] = object0; [EOL]       Object object1 = new Object(); [EOL]        [EOL]       objectArray0[2] = object1; [EOL]       objectArray0[3] = (Object) "\r"; [EOL]       String string2 = StringUtils.join(objectArray0, "24/"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) "\r"; [EOL]       charSequenceArray0[1] = (CharSequence) "\r24/java.lang.Object@20b6e6ac24/java.lang.Object@7ce5ecb624/\r"; [EOL]       charSequenceArray0[2] = (CharSequence) "\r"; [EOL]       int int0 = StringUtils.lastIndexOfAny("\r24/java.lang.Object@20b6e6ac24/java.lang.Object@7ce5ecb624/\r", charSequenceArray0); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "\r24/java.lang.Object@20b6e6ac24/java.lang.Object@7ce5ecb624/\r", (CharSequence) "\r", 351); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("J*^HJL'O=", "", 60); [EOL]        [EOL]       String string3 = StringUtils.getCommonPrefix(stringArray0); [EOL]        [EOL]       String string4 = StringUtils.substringBefore(", '", "The Array must not be null"); [EOL]        [EOL]       String string5 = StringUtils.upperCase("J*^HJL'O="); [EOL]        [EOL]       String string6 = StringUtils.trimToEmpty("p{InCombiningDiacriticalMarks}+"); [EOL]        [EOL]       ArrayList<String> arrayList0 = new ArrayList<String>(); [EOL]       assertFalse(arrayList0.contains("")); [EOL]        [EOL]       Iterator<String> iterator0 = arrayList0.iterator(); [EOL]       assertFalse(arrayList0.contains("")); [EOL]        [EOL]       String string7 = StringUtils.join(iterator0, 'Y'); [EOL]       assertFalse(arrayList0.contains("")); [EOL]        [EOL]       String string8 = StringUtils.chop("', is neither of type Map.Entry nor an Array"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       RenderingHints[] renderingHintsArray0 = new RenderingHints[0]; [EOL]       RenderingHints renderingHints0 = ObjectUtils.mode(renderingHintsArray0); [EOL]       assertNull(renderingHints0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       Locale locale0 = Locale.ITALIAN; [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0); [EOL]       MockGregorianCalendar mockGregorianCalendar1 = ObjectUtils.clone(mockGregorianCalendar0); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetBoolean()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       int int0 = bitField0.setBoolean((short)0, false); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("=V<GEos?Xd", 'F', '!'); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte)95); [EOL]       mutableByte0.add((byte)97); [EOL]       double double0 = mutableByte0.doubleValue(); [EOL]       assertEquals((-64.0), double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(boolean0); [EOL]       mutableBoolean0.setValue(boolean0); [EOL]       assertTrue(mutableBoolean0.isTrue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(false, true); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       CharRange charRange1 = CharRange.is('='); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]       assertFalse(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = ObjectUtils.mode(objectArray0); [EOL]       String string0 = ObjectUtils.toString(object0, ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-2439)); [EOL]       int int0 = bitField0.getRawValue((-2439)); [EOL]       assertEquals((-2439), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat("FTzE7|#o=<", 256); [EOL]        [EOL]       String string1 = StringUtils.stripToEmpty((String) null); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'G'; [EOL]       charArray0[1] = '%'; [EOL]       charArray0[2] = 'q'; [EOL]       charArray0[3] = ';'; [EOL]       charArray0[4] = 'Y'; [EOL]       charArray0[5] = '_'; [EOL]       charArray0[6] = '#'; [EOL]       charArray0[7] = ']'; [EOL]       String string2 = StringUtils.join(charArray0, '_', 256, 16); [EOL]       assertEquals(8, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 1700.0576F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((float[]) null, floatArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((short) (-1), (short) (-1)); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append('\\', '1'); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-1), (byte)2); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(1700.0576F, 1700.0576F); [EOL]       Object object0 = new Object(); [EOL]       Boolean boolean0 = Boolean.valueOf(true); [EOL]       IDKey iDKey0 = new IDKey(equalsBuilder1); [EOL]       ImmutablePair<Boolean, Object> immutablePair0 = new ImmutablePair<Boolean, Object>(boolean0, iDKey0); [EOL]       IDKey iDKey1 = new IDKey(immutablePair0); [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       EqualsBuilder.reflectionEquals(object0, (Object) iDKey1, (Collection<String>) linkedList0); [EOL]       equalsBuilder5.append(190, 190); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((short)1835, (short)1180); [EOL]       assertSame(equalsBuilder6, equalsBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetProperWhole()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1), (-1)); [EOL]       Fraction fraction1 = fraction0.abs(); [EOL]       assertEquals(1, fraction1.getProperWhole()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("...", '\u0087'); [EOL]        [EOL]       int int0 = StringUtils.countMatches("...", "..."); [EOL]        [EOL]       String string1 = StringUtils.defaultString("Array and element cannot both be null"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.upperCase("..."); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.lowerCase("Threshold must not be negative"); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = (float) '\u0087'; [EOL]       floatArray0[1] = (float) 1; [EOL]       String string4 = StringUtils.join(floatArray0, '\u0087'); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllLowerCase("135.0\u00871.0"); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "...", 1); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "Threshold must not be negative"); [EOL]        [EOL]       String string5 = StringUtils.stripEnd("Threshold must not be negative", (String) null); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]        [EOL]       String string6 = StringUtils.substringAfterLast(" ", "Threshold must not be negative"); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]        [EOL]       String string7 = StringUtils.replaceChars(" ", "The String must not be empty", "threshold must not be negative"); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]        [EOL]       String string8 = StringUtils.overlay("", "Threshold must not be negative", 0, 10); [EOL]       assertFalse(string8.equals((Object)string1)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]       assertFalse(string8.equals((Object)string3)); [EOL]       assertTrue(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string0)); [EOL]        [EOL]       String string9 = "\\u"; [EOL]       String string10 = StringUtils.substringBetween(" ", string9, "e"); [EOL]       assertFalse(string9.equals((Object)string4)); [EOL]       assertFalse(string9.equals((Object)string0)); [EOL]       assertFalse(string9.equals((Object)string3)); [EOL]       assertFalse(string9.equals((Object)string7)); [EOL]       assertFalse(string9.equals((Object)string2)); [EOL]       assertFalse(string9.equals((Object)string6)); [EOL]       assertFalse(string9.equals((Object)string1)); [EOL]       assertFalse(string9.equals((Object)string5)); [EOL]       assertFalse(string9.equals((Object)string8)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("d$:;<v*+^}bqn|_", " "); [EOL]        [EOL]       String string11 = StringUtils.removePattern("d$:;<v*+^}bqn|_", "e"); [EOL]       assertFalse(string11.equals((Object)string0)); [EOL]       assertFalse(string11.equals((Object)string6)); [EOL]       assertFalse(string11.equals((Object)string5)); [EOL]       assertFalse(string11.equals((Object)string1)); [EOL]       assertFalse(string11.equals((Object)string2)); [EOL]       assertFalse(string11.equals((Object)string4)); [EOL]       assertFalse(string11.equals((Object)string9)); [EOL]       assertFalse(string11.equals((Object)string3)); [EOL]       assertFalse(string11.equals((Object)string7)); [EOL]       assertFalse(string11.equals((Object)string8)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "d$:;<v*+^}bqn|_", (-1)); [EOL]        [EOL]       String string12 = StringUtils.strip("7[E{g*V1CTDxItCu&IN"); [EOL]       assertFalse(string12.equals((Object)string8)); [EOL]       assertFalse(string12.equals((Object)string9)); [EOL]       assertFalse(string12.equals((Object)string6)); [EOL]       assertFalse(string12.equals((Object)string7)); [EOL]       assertFalse(string12.equals((Object)string4)); [EOL]       assertFalse(string12.equals((Object)string0)); [EOL]       assertFalse(string12.equals((Object)string11)); [EOL]       assertFalse(string12.equals((Object)string2)); [EOL]       assertFalse(string12.equals((Object)string3)); [EOL]       assertFalse(string12.equals((Object)string5)); [EOL]       assertFalse(string12.equals((Object)string1)); [EOL]        [EOL]       int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) "7[E{g*V1CTDxItCu&IN", 31); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPattern()  throws Throwable  { [EOL]       Locale locale0 = Locale.ITALIAN; [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("org.apache.commons.lang3.text.StrMatcher$TrimMatcher", locale0, hashMap0); [EOL]       boolean boolean0 = extendedMessageFormat0.equals("J_S>h:*7 DBX~)-7L"); [EOL]       assertEquals("org.apache.commons.lang3.text.StrMatcher$TrimMatcher", extendedMessageFormat0.toPattern()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("wj"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.add(1575.9F); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals("1575.9", mutableFloat0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: "); [EOL]        [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       float float0 = NumberUtils.toFloat("gUmd%;", (-1.0F)); [EOL]       assertEquals((-1.0F), float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("", toStringStyle0); [EOL]       float[] floatArray0 = new float[5]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", floatArray0, false); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       double[] doubleArray0 = new double[8]; [EOL]       double[] doubleArray1 = new double[1]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunescapeJava()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJava("\u2227"); [EOL]       assertEquals("\u2227", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("w!'DJYWCKl<gbgS>nt.", "Strings must not be null"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       String string1 = StringUtils.upperCase("J8jGuS4t}"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "J8JGUS4T}"; [EOL]       charSequenceArray0[1] = (CharSequence) "Strings must not be null"; [EOL]       charSequenceArray0[2] = (CharSequence) "w!'DJYWCKl<gbgS>nt."; [EOL]       charSequenceArray0[3] = (CharSequence) "w!'DJYWCKl<gbgS>nt."; [EOL]       int int0 = StringUtils.lastIndexOfAny("w!'DJYWCKl<gbgS>nt.", charSequenceArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[0]); [EOL]        [EOL]       int[] intArray0 = new int[6]; [EOL]       intArray0[0] = 0; [EOL]       intArray0[1] = 0; [EOL]       intArray0[2] = 0; [EOL]       intArray0[3] = 0; [EOL]       intArray0[4] = 0; [EOL]       intArray0[5] = 0; [EOL]       String string2 = StringUtils.join(intArray0, 'm', 1471, 0); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[0]); [EOL]        [EOL]       ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>(); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "w!'DJYWCKl<gbgS>nt."); [EOL]       assertEquals("w!'DJYWCKl<gbgS>nt.", charBuffer0.toString()); [EOL]        [EOL]       Buffer buffer0 = charBuffer0.position(1); [EOL]       assertEquals("!'DJYWCKl<gbgS>nt.", charBuffer0.toString()); [EOL]        [EOL]       boolean boolean1 = arrayDeque0.add(charBuffer0); [EOL]       assertEquals("!'DJYWCKl<gbgS>nt.", charBuffer0.toString()); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) arrayDeque0, '1'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, '-', 122, 2327); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 122 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAccessibleMethod()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toLowerCase", (Class<?>[]) null); [EOL]       Method method1 = MethodUtils.getAccessibleMethod(method0); [EOL]       assertFalse(method1.isVarArgs()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Character"); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendSummary(stringBuffer0, "", ""); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.defaultIfBlank("00]y-}8@", "00]y-}8@"); [EOL]        [EOL]       String string1 = StringUtils.rightPad("Cannot store ", 16); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("00]y-}8@", 'I'); [EOL]        [EOL]       String string2 = StringUtils.remove("Cannot store    ", "C=FHF&y|8fD@~Od~/"); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.uncapitalize("NtbpoT?}`_X.z 93zh"); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.trim("Cannot store "); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("Cannot store", "Cannot store "); [EOL]        [EOL]       String string5 = StringUtils.chomp("ntbpoT?}`_X.z 93zh"); [EOL]       assertTrue(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]        [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) 16; [EOL]       floatArray0[1] = (float) 16; [EOL]       floatArray0[2] = (float) 'I'; [EOL]       String string6 = StringUtils.join(floatArray0, 'I'); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]        [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Cannot store    ", (CharSequence) "Cannot store "); [EOL]       assertFalse(charSequence0.equals((Object)string5)); [EOL]       assertFalse(charSequence0.equals((Object)string6)); [EOL]       assertFalse(charSequence0.equals((Object)string4)); [EOL]       assertTrue(charSequence0.equals((Object)string1)); [EOL]       assertFalse(charSequence0.equals((Object)string0)); [EOL]       assertTrue(charSequence0.equals((Object)string2)); [EOL]       assertFalse(charSequence0.equals((Object)string3)); [EOL]        [EOL]       int int0 = StringUtils.countMatches("ntbpoT?}`_X.z 93zh", "Cannot store    "); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "Cannot store ", "C=FHF&y|8fD@~Od~/"); [EOL]        [EOL]       String string7 = StringUtils.appendIfMissing("", "00]y-}8@", stringArray0); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)charSequence0)); [EOL]       assertTrue(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]        [EOL]       long[] longArray0 = new long[9]; [EOL]       longArray0[0] = (long) 'I'; [EOL]       longArray0[1] = (long) 0; [EOL]       longArray0[2] = (long) 16; [EOL]       longArray0[3] = (long) 16; [EOL]       longArray0[4] = (long) 0; [EOL]       longArray0[5] = (long) 0; [EOL]       longArray0[6] = (long) 16; [EOL]       longArray0[7] = (long) 16; [EOL]       longArray0[8] = (long) 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(longArray0, '4', 16, 128); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 16 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = ObjectUtils.mode(objectArray0); [EOL]       String string0 = ObjectUtils.identityToString(object0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0); [EOL]       assertEquals(8, byteArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setSummaryObjectStartText((String) null); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(""); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens(); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmode()  throws Throwable  { [EOL]       Locale[] localeArray0 = new Locale[9]; [EOL]       Locale locale0 = Locale.FRANCE; [EOL]       localeArray0[0] = locale0; [EOL]       localeArray0[1] = localeArray0[0]; [EOL]       Locale locale1 = new Locale("^=fVF`yAs", "\"nn=9zTb"); [EOL]       localeArray0[2] = locale1; [EOL]       localeArray0[3] = localeArray0[2]; [EOL]       localeArray0[4] = localeArray0[2]; [EOL]       localeArray0[6] = localeArray0[0]; [EOL]       Locale locale2 = ObjectUtils.mode(localeArray0); [EOL]       assertNull(locale2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoArray()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       Object[] objectArray1 = ArrayUtils.toArray(objectArray0); [EOL]       assertEquals(1, objectArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short[] shortArray0 = new short[6]; [EOL]       shortArray0[2] = (short)301; [EOL]       short short0 = NumberUtils.max(shortArray0); [EOL]       assertEquals((short)301, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte) (-33), (byte) (-100)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertEquals(0, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunregister()  throws Throwable  { [EOL]       Class<EqualsBuilder> class0 = EqualsBuilder.class; [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "-iPhb"; [EOL]       stringArray0[1] = "-iPhb"; [EOL]       EqualsBuilder.reflectionEquals((Object) "-iPhb", (Object) "-iPhb", false, (Class<?>) class0, stringArray0); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1.0, 1.0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append('z', '+'); [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = 1.0; [EOL]       double[] doubleArray1 = new double[1]; [EOL]       doubleArray1[0] = (double) 'z'; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0.0F, 0.0F); [EOL]       EqualsBuilder.unregister(equalsBuilder4, "CoIRP@C_"); [EOL]       assertSame(equalsBuilder4, equalsBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCharSet()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.EMPTY; [EOL]       boolean boolean0 = charSet0.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = 2659; [EOL]       int int0 = NumberUtils.min(intArray0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)36, (short)36); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toString(true, (String) null, ""); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ImmutableTriple<String, Object, String> immutableTriple0 = new ImmutableTriple<String, Object, String>("n7L-KZ/]A5~36", (Object) null, "n7L-KZ/]A5~36"); [EOL]       MutableTriple<ImmutableTriple<String, Object, String>, Object, Object> mutableTriple0 = MutableTriple.of(immutableTriple0, (Object) "n7L-KZ/]A5~36", (Object) "n7L-KZ/]A5~36"); [EOL]       String string0 = mutableTriple0.toString(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('b'); [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcreateInteger()  throws Throwable  { [EOL]       Integer integer0 = NumberUtils.createInteger("0"); [EOL]       assertEquals(0, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       shortArray0[0] = (short)4467; [EOL]       int int0 = ArrayUtils.indexOf(shortArray0, (short)4467); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToInt()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       int int0 = Conversion.binaryToInt(booleanArray0, 50, 50, 50, 0); [EOL]       assertEquals(50, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte) (-62)); [EOL]       Byte byte0 = new Byte((byte) (-87)); [EOL]       mutableByte0.subtract((Number) byte0); [EOL]       assertEquals((byte)25, mutableByte0.byteValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 2139674616); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetVariableSuffix()  throws Throwable  { [EOL]       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, ")pB}%]", ")pB}%]"); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariableSuffixMatcher(strSubstitutor0.DEFAULT_SUFFIX); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = "\\u00"; [EOL]       String string1 = StringUtils.uncapitalize(string0); [EOL]        [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = 1L; [EOL]       String string2 = StringUtils.join(longArray0, 'k'); [EOL]        [EOL]       String string3 = StringUtils.repeat("", 1246); [EOL]        [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       objectArray0[0] = (Object) 1L; [EOL]       objectArray0[1] = (Object) string0; [EOL]       String string4 = StringUtils.join(objectArray0, '#', 1246, 5); [EOL]        [EOL]       Stack<String> stack0 = new Stack<String>(); [EOL]       assertEquals("[]", stack0.toString()); [EOL]        [EOL]       Iterator<String> iterator0 = stack0.iterator(); [EOL]       assertEquals("[]", stack0.toString()); [EOL]        [EOL]       String string5 = StringUtils.join(iterator0, 'k'); [EOL]       assertEquals("[]", stack0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       int int0 = bitField0.setValue(0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       ConstantInitializer<String> constantInitializer0 = new ConstantInitializer<String>("ConstantInitializer@1 [ object = null ]"); [EOL]       ConstantInitializer<ConstantInitializer<String>> constantInitializer1 = new ConstantInitializer<ConstantInitializer<String>>(constantInitializer0); [EOL]       Object object0 = constantInitializer1.get(); [EOL]       boolean boolean0 = constantInitializer0.equals(object0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       long long0 = NumberUtils.min(4056L, (long) (byte)0, 0L); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]        [EOL]       String string1 = strTokenizer0.next(); [EOL]       assertEquals(2, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('_'); [EOL]       assertEquals(2, strTokenizer0.nextIndex()); [EOL]       assertEquals(2, strTokenizer1.nextIndex()); [EOL]       assertEquals(2, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDefaultStyle()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       char[] charArray0 = new char[14]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((String) null, charArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)1); [EOL]       Double double0 = new Double((short)1); [EOL]       mutableShort0.add((Number) double0); [EOL]       MutableShort mutableShort1 = new MutableShort((short)1); [EOL]       int int0 = mutableShort0.compareTo(mutableShort1); [EOL]       assertEquals(2.0F, mutableShort0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("wT#y?+X"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(""); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]       List<String> list0 = strTokenizer0.getTokenList(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.CR; [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("\r", "\r"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", "\r"); [EOL]        [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[0] = 2833L; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[2] = (-2488L); [EOL]       longArray0[3] = 1L; [EOL]       longArray0[4] = 3731L; [EOL]       longArray0[5] = 0L; [EOL]       String string1 = StringUtils.join(longArray0, '*'); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace("2833*0*-2488*1*3731*0"); [EOL]        [EOL]       String string2 = StringUtils.join((float[]) null, '*', (-370), (-370)); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "2833*0*-2488*1*3731*0", 0, 565); [EOL]        [EOL]       String string3 = StringUtils.difference("\r", "{}"); [EOL]        [EOL]       String string4 = StringUtils.abbreviateMiddle((String) null, "2833*0*-2488*1*3731*0", 0); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       ArrayList arrayList1 = (ArrayList)arrayList0.clone(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]       assertTrue(arrayList1.isEmpty()); [EOL]        [EOL]       String string5 = StringUtils.join((Iterable<?>) arrayList0, 'T'); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       String string6 = StringUtils.replace("", (String) null, "9HV4i@", 0); [EOL]        [EOL]       String string7 = StringUtils.strip((String) null, "\r"); [EOL]        [EOL]       int int1 = StringUtils.ordinalIndexOf("{}", "", 8192); [EOL]        [EOL]       String string8 = StringUtils.leftPad("{}", (-632), "{}"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       long[] longArray0 = new long[3]; [EOL]       longArray0[0] = 0L; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[2] = 221L; [EOL]       String string0 = StringUtils.join(longArray0, '@'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[0]; [EOL]       String string1 = StringUtils.prependIfMissing("0@0@221", "0@0@221", charSequenceArray0); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.center("0@0@221", (-3651), "0@0@221"); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "0@0@221", (CharSequence) "0@0@221", (-3651)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace("0@0@221"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumeric("0@0@221"); [EOL]        [EOL]       String string3 = StringUtils.leftPad("0@0@221", (-3651)); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = StringUtils.stripToEmpty("0@0@221"); [EOL]       assertTrue(string4.equals((Object)string2)); [EOL]       assertTrue(string4.equals((Object)string1)); [EOL]       assertTrue(string4.equals((Object)string3)); [EOL]       assertTrue(string4.equals((Object)string0)); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = 0; [EOL]       intArray0[1] = (-2317); [EOL]       intArray0[2] = (int) '@'; [EOL]       intArray0[3] = (int) '@'; [EOL]       intArray0[4] = (int) '@'; [EOL]       intArray0[5] = (-3651); [EOL]       intArray0[6] = 0; [EOL]       intArray0[7] = (-3651); [EOL]       String string5 = StringUtils.join(intArray0, '@'); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace("0@-2317@64@64@64@-3651@0@-3651"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphanumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('0'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       char char0 = CharUtils.toChar("Z"); [EOL]       assertEquals('Z', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       Locale locale0 = Locale.US; [EOL]       ZoneId zoneId0 = ZoneId.systemDefault(); [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0); [EOL]       String string0 = DateFormatUtils.format(1885L, ":", timeZone0, locale0); [EOL]       assertEquals(":", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.lowerCase("M(eu_"); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = '('; [EOL]       charArray0[2] = '$'; [EOL]       charArray0[3] = 'l'; [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "m(eu_", charArray0); [EOL]       assertEquals(4, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("Df", "Df", "Df", "=.dF|[\"=g"); [EOL]       boolean boolean1 = BooleanUtils.isTrue(boolean0); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, "\","); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       char[] charArray0 = new char[8]; [EOL]       StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('I'); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher_CharMatcher0, strMatcher_NoMatcher0); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMessage()  throws Throwable  { [EOL]       String string0 = ExceptionUtils.getMessage((Throwable) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetCSVInstance()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = ' '; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       strTokenizer0.setDelimiterChar(' '); [EOL]       String string0 = strTokenizer0.previousToken(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("Jy0]?g>W @", comparator0); [EOL]       String string0 = range0.toString("[Ryu..Ryu]"); [EOL]       assertEquals("[Ryu..Ryu]", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       Character character0 = Character.valueOf('8'); [EOL]       char char0 = CharUtils.toChar(character0, 'j'); [EOL]       assertEquals('8', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('@'); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]       assertEquals(0, strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       String string1 = StringUtils.substring("", (-3736)); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substringBeforeLast("", ""); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]        [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       objectArray0[1] = (Object) ""; [EOL]       String string3 = StringUtils.join(objectArray0, 'k'); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       char char0 = 'c'; [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("k", 'c'); [EOL]        [EOL]       Stack<String> stack0 = new Stack<String>(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stack0.listIterator((-3736)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // Index: -3736 [EOL]          // [EOL]          verifyException("java.util.Vector", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1806)); [EOL]       Pair<String, Integer> pair0 = Pair.of("org.apache.commons.lang3.tuple.MutablePair", integer0); [EOL]       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("org.apache.commons.lang3.tuple.MutablePair", integer0); [EOL]       ImmutablePair<Object, Integer> immutablePair0 = new ImmutablePair<Object, Integer>(integer0, integer0); [EOL]       MutablePair<AbstractMap.SimpleEntry<String, Object>, Pair<Object, Integer>> mutablePair0 = new MutablePair<AbstractMap.SimpleEntry<String, Object>, Pair<Object, Integer>>(abstractMap_SimpleEntry0, immutablePair0); [EOL]       Object object0 = mutablePair0.getLeft(); [EOL]       boolean boolean0 = pair0.equals(object0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('#'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertTrue(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(1.5, 1.5); [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) equalsBuilder0; [EOL]       objectArray0[1] = (Object) equalsBuilder0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder1; [EOL]       objectArray0[4] = (Object) equalsBuilder1; [EOL]       objectArray0[5] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = 1578L; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[2] = 0L; [EOL]       longArray0[3] = 2097L; [EOL]       longArray0[4] = (-1575L); [EOL]       longArray0[5] = 1L; [EOL]       longArray0[6] = 0L; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, (long[]) null); [EOL]       double[] doubleArray0 = new double[0]; [EOL]       equalsBuilder0.append(doubleArray0, doubleArray0); [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       booleanArray0[0] = false; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((float) 0L, 1616.6923F); [EOL]       assertSame(equalsBuilder5, equalsBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[1]; [EOL]       Double double0 = new Double(1.0); [EOL]       doubleArray0[0] = double0; [EOL]       Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) double0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetImplicitLowerBounds()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[2]; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getLowerBounds(); [EOL]       Type[] typeArray1 = TypeUtils.getImplicitLowerBounds(wildcardType0); [EOL]       assertEquals(2, typeArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(longArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       int int0 = bitField0.getRawValue(1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(toStringStyle0, toStringStyle0); [EOL]       String string0 = toStringBuilder0.build(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRegistry()  throws Throwable  { [EOL]       EqualsBuilder.getRegistry(); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = ')'; [EOL]       charArray0[1] = 'r'; [EOL]       charArray0[2] = '}'; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(2109L, (-1L)); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((Object) equalsBuilder0, (Object) equalsBuilder1); [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       objectArray0[0] = (Object) equalsBuilder2; [EOL]       objectArray0[1] = (Object) equalsBuilder1; [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       byteArray0[0] = (byte) (-74); [EOL]       byteArray0[1] = (byte) (-1); [EOL]       byteArray0[2] = (byte)117; [EOL]       byteArray0[3] = (byte)2; [EOL]       byteArray0[4] = (byte) (-38); [EOL]       byteArray0[5] = (byte)0; [EOL]       byteArray0[6] = (byte)0; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0.0F, (float) (byte)2); [EOL]       byteArray0[7] = (byte) (-114); [EOL]       equalsBuilder2.append((byte[]) null, byteArray0); [EOL]       objectArray0[2] = (Object) '}'; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append(objectArray0, objectArray0); [EOL]       assertSame(equalsBuilder5, equalsBuilder4); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMatchingAccessibleMethod()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6); [EOL]       Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "notify", classArray0); [EOL]       assertNull(method0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcreateIfAbsentUnchecked()  throws Throwable  { [EOL]       MockError mockError0 = new MockError(); [EOL]       ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, Error>) null, (Error) mockError0, (Error) mockError0); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(); [EOL]       Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0, (ExecutorService) null); [EOL]       Error error0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Error>) null, (RuntimeException) mockRuntimeException0, (ConcurrentInitializer<Error>) callableBackgroundInitializer0); [EOL]       assertNull(error0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("-1"); [EOL]       assertEquals((-1.0F), fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.reverseDelimited((String) null, 'A'); [EOL]        [EOL]       String string1 = StringUtils.stripAccents(""); [EOL]        [EOL]       Locale locale0 = Locale.JAPAN; [EOL]        [EOL]       String string2 = StringUtils.lowerCase("ogiO'", locale0); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String[] stringArray0 = new String[0]; [EOL]       String string3 = StringUtils.replaceEach("", stringArray0, stringArray0); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       String string0 = toStringBuilder0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       Byte byte0 = new Byte((byte) (-41)); [EOL]       mutableShort0.setValue((Number) byte0); [EOL]       assertEquals("-41", mutableShort0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "The Character must not be null"; [EOL]       String string1 = StringUtils.uncapitalize("The Character must not be null"); [EOL]        [EOL]       String string2 = ""; [EOL]       String string3 = StringUtils.chop(""); [EOL]        [EOL]       String string4 = ""; [EOL]       String string5 = "{}"; [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", "{}"); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       String string6 = StringUtils.chomp("{}", "The Character must not be null"); [EOL]        [EOL]       String string7 = StringUtils.substringBetween("", "(/rB[*", ""); [EOL]        [EOL]       String string8 = StringUtils.repeat("the Character must not be null", "{}", 1676); [EOL]        [EOL]       String string9 = StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils"); [EOL]        [EOL]       // Undeclared exception! [EOL]       StringUtils.lastIndexOfIgnoreCase((CharSequence) string8, (CharSequence) "(/rB[*"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1L)); [EOL]       Date date0 = DateUtils.ceiling((Date) mockDate0, 1001); [EOL]       assertEquals("Mon Dec 01 00:00:00 GMT 1969", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       int[] intArray0 = new int[1]; [EOL]       intArray0[0] = 41; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0); [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[0] = (double) 41; [EOL]       doubleArray0[1] = (double) 41; [EOL]       doubleArray0[2] = (double) 41; [EOL]       doubleArray0[3] = (double) 41; [EOL]       doubleArray0[4] = (double) 41; [EOL]       doubleArray0[5] = (double) 41; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, false); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.appendSuper(true); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((float[]) null, (float[]) null); [EOL]       boolean boolean0 = equalsBuilder5.isEquals(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSimpleName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getSimpleName((Class<?>) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       int int0 = NumberUtils.max(0, 0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = (-2456); [EOL]       String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (-2456)); [EOL]        [EOL]       String string0 = StringUtils.join((Object[]) stringArray0, 'G'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       Vector<Integer> vector0 = new Vector<Integer>(); [EOL]        [EOL]       Integer integer0 = new Integer((-2456)); [EOL]       assertFalse(integer0.equals((Object)int1)); [EOL]       assertTrue(integer0.equals((Object)int0)); [EOL]        [EOL]       boolean boolean0 = vector0.add(integer0); [EOL]       assertFalse(integer0.equals((Object)int1)); [EOL]       assertTrue(integer0.equals((Object)int0)); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) vector0, "&|w#KCqFbZ(Sp1F"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumeric("&|w#KCqFbZ(Sp1F"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("", "org.apache.commons.lang3.StringUtils"); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "org.apache.commons.lang3.StringUtils", 0); [EOL]        [EOL]       String string2 = StringUtils.substringAfterLast("pL@V", ""); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.join((Object[]) stringArray1, 'g'); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.center("", (-1), 'G'); [EOL]       assertTrue(string4.equals((Object)string0)); [EOL]       assertTrue(string4.equals((Object)string3)); [EOL]       assertTrue(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]        [EOL]       HashSet<Object> hashSet0 = null; [EOL]       try { [EOL]         hashSet0 = new HashSet<Object>(0, 0.0F); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Illegal load factor: 0.0 [EOL]          // [EOL]          verifyException("java.util.HashMap", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1)); [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[0] = (-1); [EOL]       intArray0[1] = (-1); [EOL]       intArray0[2] = (-1); [EOL]       intArray0[3] = (-1); [EOL]       intArray0[4] = (-1); [EOL]       intArray0[5] = (-1); [EOL]       intArray0[6] = (-1); [EOL]       intArray0[7] = (-1); [EOL]       intArray0[8] = (-1); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0); [EOL]       hashCodeBuilder1.append((char[]) null); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       Object object1 = new Object(); [EOL]        [EOL]       objectArray0[1] = object1; [EOL]       Object object2 = new Object(); [EOL]        [EOL]       objectArray0[2] = object2; [EOL]       String string0 = "sbb+|#1F.bmgU"; [EOL]       String string1 = StringUtils.join(objectArray0, "sbb+|#1F.bmgU"); [EOL]       assertEquals(3, objectArray0.length); [EOL]        [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)4; [EOL]       shortArray0[1] = (short)3030; [EOL]       char char0 = '{'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(shortArray0, '{', (int) (short)3030, 3757); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 3030 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("N<w+hrWoJ_H$&?"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]       assertEquals(0, strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double double0 = IEEE754rUtils.max((-1583.6), 504.419321); [EOL]       assertEquals(504.419321, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Dimension dimension0 = new Dimension(); [EOL]       Rectangle rectangle0 = new Rectangle(0, 0); [EOL]       boolean boolean0 = ObjectUtils.equals((Object) dimension0, (Object) rectangle0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testinclusiveBetween()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Validate.inclusiveBetween("", ";=", (Comparable<String>) ";=", " 8WV$XW_`9~C1", objectArray0); [EOL]       assertEquals(7, objectArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((double) 0); [EOL]       assertEquals(0.0, fraction0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetShort()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       short short0 = bitField0.setShortValue((short) (-1424), (short)287); [EOL]       assertEquals((short) (-1424), short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.TYPE; [EOL]       Class<Integer> class1 = Integer.class; [EOL]       boolean boolean0 = ClassUtils.isAssignable(class0, class1, false); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetShort()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       short short0 = bitField0.setShort((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHex()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(0); [EOL]       assertEquals('0', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.removeStart("N", "N"); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(); [EOL]        [EOL]       Spliterator<Integer> spliterator0 = arrayDeque0.spliterator(); [EOL]        [EOL]       Iterator<Integer> iterator0 = arrayDeque0.iterator(); [EOL]        [EOL]       arrayDeque0.clear(); [EOL]        [EOL]       String string1 = StringUtils.join(iterator0, ",{Np;&"); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.leftPad("`-$]/.Rl$", (-2090)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.join((byte[]) null, '/'); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "N"); [EOL]        [EOL]       String string4 = StringUtils.uncapitalize("SBb$`\"3*}VeFPPMZ"); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       int int1 = StringUtils.countMatches("", "`-$]/.Rl$"); [EOL]        [EOL]       String string5 = StringUtils.leftPad("S.tGoe|8O;,zMc", (-2090), "sBb$`\"3*}VeFPPMZ"); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("8$iW]\"|eV;0?", "(?: s|[s&&[^ ]])s*", (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastOrdinalIndexOf("", "(?: s|[s&&[^ ]])s*", (-1)); [EOL]        [EOL]       String string6 = "\\u"; [EOL]       String string7 = StringUtils.replaceChars("R,&CK;v,)#3v,-2T+", ",{Np;&", string6); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "N", (CharSequence) "RCKv)#3v-2T+"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Class<Character> class0 = Character.class; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.getShortClassName(class0); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 0); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisStartedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.isStartedBy(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       Integer integer0 = new Integer((-14)); [EOL]       MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, Object, String>(); [EOL]       ImmutableTriple<Object, Integer, MutableTriple<Object, Object, String>> immutableTriple0 = new ImmutableTriple<Object, Integer, MutableTriple<Object, Object, String>>(object0, integer0, mutableTriple0); [EOL]       String string0 = immutableTriple0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("", "", 661); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1646), 0); [EOL]        [EOL]       String string0 = StringUtils.replaceEachRepeatedly("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray0); [EOL]        [EOL]       String string1 = StringUtils.stripAccents("0_pySh4w?B|Il>uv"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int1 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "0_pySh4w?B|Il>uv"); [EOL]        [EOL]       String string2 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "0_pySh4w?B|Il>uv"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.replace("", "", "0_pySh4w?B|Il>uv"); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = StringUtils.substringBetween("", "+hv?f @", ""); [EOL]        [EOL]       int int2 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 661); [EOL]        [EOL]       String string5 = StringUtils.leftPad("0_pySh4w?B|Il>uv", 3, '^'); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertTrue(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null); [EOL]        [EOL]       int int3 = StringUtils.lastIndexOf((CharSequence) "+hv?f @", (-1846), (-1646)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1851); [EOL]       Integer integer1 = new Integer(109); [EOL]       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(1851, 0, 0).when(comparator0).compare(anyInt() , anyInt()); [EOL]       Range<Integer> range0 = Range.between(integer0, integer1, comparator0); [EOL]       boolean boolean0 = range0.isOverlappedBy(range0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcharSetMatcher()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertNotNull(strMatcher0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_HALF; [EOL]       int int0 = fraction0.compareTo(fraction0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArrayContentDetail(true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, (-1748), 5, 6, 1001, 6); [EOL]       Calendar calendar0 = DateUtils.ceiling((Calendar) mockGregorianCalendar0, 5); [EOL]       DateUtils.iterator(calendar0, 3); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-66479961600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=138,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=126,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       int int0 = fraction0.getNumerator(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("", "B_9"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('K'); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("true"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('b'); [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm"); [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(66, 66, (-49)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range1 = Range.is(">~{f:w[rbE", comparator0); [EOL]       Range<String> range2 = range0.intersectionWith(range1); [EOL]       boolean boolean0 = range2.equals(range0); [EOL]       assertFalse(range2.equals((Object)range1)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetCharRanges()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       CharSet charSet0 = CharSet.getInstance(stringArray0); [EOL]       CharRange[] charRangeArray0 = charSet0.getCharRanges(); [EOL]       assertEquals(0, charRangeArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("oaKy'LB", 'E'); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("oaKy'LB"); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (-923.8F); [EOL]       float[] floatArray1 = new float[6]; [EOL]       compareToBuilder0.append(floatArray0, floatArray1); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisInnerClass()  throws Throwable  { [EOL]       boolean boolean0 = ClassUtils.isInnerClass((Class<?>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0, true, true); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       long long0 = ObjectUtils.CONST((long) 663); [EOL]       assertEquals(663L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("<null>"); [EOL]       boolean boolean0 = reflectionToStringBuilder0.isAppendTransients(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("W]f3!"); [EOL]       boolean boolean0 = range0.equals("{cG+4e"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       Float float0 = new Float((-1.0)); [EOL]       mutableByte0.setValue((Number) float0); [EOL]       float float1 = mutableByte0.floatValue(); [EOL]       assertEquals((-1.0F), float1, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.difference("%/hqC>J!>DO^]~t", "%/hqC>J!>DO^]~t"); [EOL]        [EOL]       String string1 = StringUtils.center("%/hqC>J!>DO^]~t", 122, ""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) "%/hqC>J!>DO^]~t"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "                                                     %/hqC>J!>DO^]~t                                                     "; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "%/hqC>J!>DO^]~t"; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[1], charSequenceArray0[5]); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) "%/hqC>J!>DO^]~t"; [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       charSequenceArray0[8] = (CharSequence) "                                                     %/hqC>J!>DO^]~t                                                     "; [EOL]       boolean boolean0 = StringUtils.endsWithAny("%/hqC>J!>DO^]~t", charSequenceArray0); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((double[]) null, (-1857.47193494), (-1857.47193494)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdefaultIfNull()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-3568)); [EOL]       Integer integer1 = new Integer(187); [EOL]       Integer integer2 = ObjectUtils.defaultIfNull(integer0, integer1); [EOL]       assertEquals((-3568), (int)integer2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendContentStart(stringBuffer0); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("oaKy'LB", 'E'); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("oaKy'LB"); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1), (-1)); [EOL]       Fraction fraction1 = fraction0.abs(); [EOL]       assertEquals(1, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.wrappedFactory(basicThreadFactory0); [EOL]       BasicThreadFactory basicThreadFactory1 = basicThreadFactory_Builder1.build(); [EOL]       assertEquals(0L, basicThreadFactory1.getThreadCount()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-20), 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetActiveExecutor()  throws Throwable  { [EOL]       Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0, (ExecutorService) null); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor(); [EOL]       assertNull(executorService0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       Integer[] integerArray0 = ArrayUtils.toObject(intArray0); [EOL]       assertEquals(0, integerArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3694.44890757516, 0.0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplaceEach()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null); [EOL]       assertFalse(boolean0); [EOL]        [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "org.apache.commons.lang3.ArrayUtils"; [EOL]       stringArray0[1] = "org.apache.commons.lang3.ArrayUtils"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.ArrayUtils", stringArray0, stringArray0); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // Aborting to protect against StackOverflowError - output of one loop is the input of another [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[0]; [EOL]       float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-60)); [EOL]       assertArrayEquals(new float[] {}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContextLabels()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(); [EOL]       contextedRuntimeException0.addContextValue("g&')17T", "g&')17T"); [EOL]       Set<String> set0 = contextedRuntimeException0.getContextLabels(); [EOL]       assertFalse(set0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       int int0 = strTokenizer0.previousIndex(); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Object object0 = new Object(); [EOL]       toStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "8", object0); [EOL]       assertEquals(25, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null); [EOL]       assertArrayEquals(new long[] {}, longArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testinitials()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.initials("d`W9h~MX3\"&", charArray0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, false, 3); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'p'; [EOL]       double[] doubleArray0 = new double[8]; [EOL]       doubleArray0[0] = (double) 'J'; [EOL]       doubleArray0[1] = (double) 'p'; [EOL]       doubleArray0[2] = (double) 'p'; [EOL]       doubleArray0[3] = (double) 'p'; [EOL]       doubleArray0[4] = (double) 'p'; [EOL]       doubleArray0[5] = (double) 'p'; [EOL]       doubleArray0[6] = (double) 'p'; [EOL]       doubleArray0[7] = (double) 'J'; [EOL]       double[] doubleArray1 = new double[2]; [EOL]       doubleArray1[0] = (double) 'J'; [EOL]       doubleArray1[1] = 1086.43102; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1); [EOL]       charArray0[1] = 'J'; [EOL]       equalsBuilder0.append(charArray0, charArray0); [EOL]       ImmutablePair<EqualsBuilder, Object> immutablePair0 = new ImmutablePair<EqualsBuilder, Object>(equalsBuilder1, equalsBuilder0); [EOL]       EqualsBuilder.unregister(immutablePair0, equalsBuilder0); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append(object0, object1); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) 112.0; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(objectArray0, objectArray0); [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = false; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(booleanArray0, booleanArray0); [EOL]       IDKey iDKey0 = new IDKey(object1); [EOL]       EqualsBuilder.register(equalsBuilder4, iDKey0); [EOL]       equalsBuilder2.append('J', 'J'); [EOL]       equalsBuilder1.append(1610L, 2109L); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder1.append((float) 2109L, (float) 1610L); [EOL]       assertFalse(equalsBuilder5.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[3]; [EOL]       Character character0 = new Character('`'); [EOL]       Character[] characterArray1 = ArrayUtils.add(characterArray0, character0); [EOL]       assertEquals(4, characterArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) null, object0); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (-1.0F); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short)0, (short) (-594)); [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = (long) (short) (-594); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(longArray0, longArray0); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       objectArray0[0] = (Object) (-594L); [EOL]       objectArray0[1] = null; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0); [EOL]       long[] longArray1 = new long[4]; [EOL]       longArray1[0] = (-3884L); [EOL]       longArray1[1] = (long) (short)0; [EOL]       longArray1[2] = (long) (short)0; [EOL]       longArray1[3] = (long) (short) (-594); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append(longArray1, longArray0); [EOL]       assertSame(equalsBuilder6, equalsBuilder2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = Fraction.THREE_QUARTERS; [EOL]       Fraction fraction2 = fraction0.subtract(fraction1); [EOL]       Fraction fraction3 = fraction2.invert(); [EOL]       boolean boolean0 = fraction0.equals(fraction3); [EOL]       assertEquals((-20), fraction3.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((int[]) null, (int[]) null); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentEnd(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('2'); [EOL]       Conversion.binaryToLong(booleanArray0, (-263), (byte)0, (byte)0, (byte)0); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendTransients()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, standardToStringStyle0); [EOL]       reflectionToStringBuilder0.toString(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendTransients()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       Byte byte0 = mutableByte0.getValue(); [EOL]       mutableByte0.add((Number) byte0); [EOL]       assertEquals((byte)0, mutableByte0.byteValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendContentStart(stringBuffer0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentEnd(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       String string0 = toStringStyle0.getSizeStartText(); [EOL]       assertEquals("<size=", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Short[] shortArray0 = new Short[3]; [EOL]       Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0); [EOL]       assertEquals(3, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.substringAfterLast("", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("", "org.apache.commons.lang3.ArrayUtils", 13); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsWhitespace("org.apache.commons.lang3.ArrayUtils"); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0); [EOL]        [EOL]       String string1 = StringUtils.leftPad("", 13, 'g'); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ggggggggggggg", (CharSequence) "ggggggggggggg", 13); [EOL]        [EOL]       String string2 = StringUtils.leftPad("", (-2043), "V"); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.difference("", ""); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ggggggggggggg", 0, 10); [EOL]        [EOL]       CharBuffer charBuffer1 = charBuffer0.duplicate(); [EOL]       assertTrue(charBuffer1.equals((Object)charBuffer0)); [EOL]        [EOL]       CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0); [EOL]       assertTrue(charBuffer0.equals((Object)charBuffer1)); [EOL]       assertTrue(charBuffer2.equals((Object)charBuffer1)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace(""); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsNone((CharSequence) "V", ", '"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) "xkb85|OPM@*:Q`vn~", true); [EOL]       assertEquals((-917342914), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder((Object) null, toStringStyle0); [EOL]       double[] doubleArray0 = new double[9]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", doubleArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0); [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       String string0 = fastDateFormat0.format((Date) mockDate0); [EOL]       assertEquals("Friday, February 14, 2014 8:21:21 PM GMT", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("%Me2EGPl0k<046Gfjv!", ':'); [EOL]        [EOL]       String string1 = StringUtils.remove((String) null, ':'); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null); [EOL]        [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       objectArray0[0] = (Object) "%Me2EGPl0k<046Gfjv!"; [EOL]       objectArray0[1] = (Object) "%Me2EGPl0k<046Gfjv!"; [EOL]       String string2 = StringUtils.join(objectArray0, ':', 0, 0); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.rightPad((String) null, (-2334), "%Me2EGPl0k<046Gfjv!"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("%Me2EGPl0k<046Gfjv!", (String) null); [EOL]        [EOL]       String string4 = StringUtils.lowerCase((String) null); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = ':'; [EOL]       charArray0[2] = ':'; [EOL]       charArray0[3] = ':'; [EOL]       charArray0[4] = '%'; [EOL]       charArray0[5] = ':'; [EOL]       charArray0[6] = ':'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) null, (-1)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAsciiPrintable((CharSequence) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short[] shortArray0 = new short[2]; [EOL]       short short0 = NumberUtils.max(shortArray0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("hTSA L[6|ryhb5"); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendFieldEnd(stringBuffer0, "Yn/wM^~/pS.V\u0004{"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setSummaryObjectStartText((String) null); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       compareToBuilder0.append((byte)79, (byte) (-103)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnotEqual()  throws Throwable  { [EOL]       boolean boolean0 = ObjectUtils.notEqual((Object) null, (Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('2', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       short[] shortArray1 = new short[7]; [EOL]       compareToBuilder0.append(shortArray0, shortArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[6]; [EOL]       byte[] byteArray1 = Conversion.longToByteArray(620L, (-173), byteArray0, 97, 0); [EOL]       assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, "$> y@oXv:", "$> y@oXv:"); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(0); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals(0, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprimitivesToWrappers()  throws Throwable  { [EOL]       Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3); [EOL]       Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0); [EOL]       boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.capitalizeFully("JAVA_0_9", (char[]) null); [EOL]       assertEquals("Java_0_9", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAfter()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("@=:haMS w"); [EOL]       Comparator<String> comparator0 = range0.getComparator(); [EOL]       Range<String> range1 = Range.between(", element2=", "", comparator0); [EOL]       boolean boolean0 = range1.isAfter(", element2="); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byteArray0[1] = (byte)69; [EOL]       byte byte0 = NumberUtils.min(byteArray0); [EOL]       assertEquals((byte)0, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       double double0 = fraction0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("=", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAscii('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintArrayToLong()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       long long0 = Conversion.intArrayToLong(intArray0, 0, 480L, 0, 0); [EOL]       assertEquals(480L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentEnd("]"); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeXml(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.namingPattern("1~Xo7N-eu"); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       String string0 = basicThreadFactory0.getNamingPattern(); [EOL]       assertEquals("1~Xo7N-eu", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad("(O-S!4T8|]igu", 867); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence|]igu", (CharSequence) "(O-S!4T8|]igu"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split|]igu"); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeEndIgnoreCase("The Array must not be null", "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "(O-S!4T8|]igu", 1); [EOL]        [EOL]       String string2 = StringUtils.join((Iterator<?>) null, 'U'); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "The Array must not be null", (CharSequence) "The Array must not be null"); [EOL]        [EOL]       String string3 = StringUtils.defaultString("(O-S!4T8|]igu", "&xj"); [EOL]        [EOL]       String string4 = StringUtils.substringBeforeLast("", "W)c8YBz&&W6e\"K"); [EOL]        [EOL]       String string5 = StringUtils.removePattern("The Array must not be null", "93c\"m/OA!i4}4kTv"); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithAny("", stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'U'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = 'U'; [EOL]       int int3 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.StringUtils", charArray0); [EOL]       assertEquals(4, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(1236, 1236, 1236); [EOL]       Fraction fraction1 = fraction0.reduce(); [EOL]       assertEquals(1237, fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       int int0 = mutableInt0.intValue(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[6]; [EOL]       shortArray0[0] = (short)1898; [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1898); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-102)); [EOL]       ImmutablePair<Integer, String> immutablePair0 = ImmutablePair.of(integer0, "-lXga&mw}csmS,"); [EOL]       Pair<Object, ImmutablePair<Integer, String>> pair0 = Pair.of((Object) null, immutablePair0); [EOL]       String string0 = pair0.toString("iJS6P"); [EOL]       assertEquals("iJS6P", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-376.55114416522), 0, 0.0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoStringExclude()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       String[] stringArray0 = new String[1]; [EOL]       String string0 = ReflectionToStringBuilder.toStringExclude(object0, stringArray0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[0]; [EOL]       AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]       int int0 = aggregateTranslator0.translate((CharSequence) null, (-1274), (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.capitalize("%?x+ 6<"); [EOL]       assertEquals("%?x+ 6<", string0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       StringEscapeUtils.CsvEscaper stringEscapeUtils_CsvEscaper0 = new StringEscapeUtils.CsvEscaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       stringEscapeUtils_CsvEscaper0.translate((CharSequence) "`+&]L26w9j~", 0, (Writer) stringWriter0); [EOL]       assertEquals("`+&]L26w9j~", stringWriter0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendSuper((String) null); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       Float float0 = new Float((-1.0)); [EOL]       mutableByte0.setValue((Number) float0); [EOL]       float float1 = mutableByte0.floatValue(); [EOL]       assertEquals((-1.0F), float1, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetComparator()  throws Throwable  { [EOL]       Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm"); [EOL]       Comparator<String> comparator0 = range0.getComparator(); [EOL]       Range<String> range1 = Range.between("Qx#K", "Qx#K", comparator0); [EOL]       int int0 = range1.elementCompareTo("A"); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(""); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 0, 2); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       short[] shortArray1 = new short[7]; [EOL]       short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1); [EOL]       assertEquals(0, shortArray2.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       MutableInt mutableInt0 = new MutableInt((-940.0F)); [EOL]       int int0 = ArrayUtils.indexOf(objectArray0, (Object) mutableInt0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       doubleArray0[4] = (-1.0); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.stripAccents((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.replace("l:Zt{d#Qtgh", (String) null, ""); [EOL]        [EOL]       String string3 = StringUtils.replace("C47+}uBC", (String) null, "bPuF"); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       String string4 = StringUtils.defaultString((String) null); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "C47+}uBC", (CharSequence) "", 267); [EOL]        [EOL]       String string5 = StringUtils.appendIfMissingIgnoreCase("E_G!9hv+", (CharSequence) null, (CharSequence[]) null); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]        [EOL]       String string6 = StringUtils.chomp(" in an array of "); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]        [EOL]       String string7 = StringUtils.trimToEmpty(""); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertTrue(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]        [EOL]       String string8 = StringUtils.stripToEmpty(""); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string3)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertTrue(string8.equals((Object)string7)); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]       assertTrue(string8.equals((Object)string4)); [EOL]        [EOL]       int int3 = StringUtils.indexOf((CharSequence) "E_G!9hv+", (CharSequence) "", (-132)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'F'; [EOL]       charArray0[1] = '#'; [EOL]       charArray0[2] = 'f'; [EOL]       String string9 = StringUtils.join(charArray0, '#'); [EOL]       assertFalse(string9.equals((Object)string3)); [EOL]       assertFalse(string9.equals((Object)string2)); [EOL]       assertFalse(string9.equals((Object)string6)); [EOL]       assertFalse(string9.equals((Object)string5)); [EOL]       assertFalse(string9.equals((Object)string8)); [EOL]       assertFalse(string9.equals((Object)string7)); [EOL]       assertFalse(string9.equals((Object)string4)); [EOL]        [EOL]       int int4 = StringUtils.getLevenshteinDistance((CharSequence) "C47+}uBC", (CharSequence) "", 3520); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoCalendar()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       Date date0 = DateUtils.addSeconds(mockDate0, 9); [EOL]       Calendar calendar0 = DateUtils.toCalendar(date0); [EOL]       long long0 = DateUtils.getFragmentInMilliseconds(calendar0, 6); [EOL]       assertEquals(9000L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.add(1575.9F); [EOL]       int int0 = mutableFloat0.intValue(); [EOL]       assertEquals(1575L, mutableFloat0.longValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = ArrayUtils.removeAll(charArray0, (int[]) null); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       shortArray0[0] = (short)0; [EOL]       shortArray0[1] = (short)122; [EOL]       shortArray0[2] = (short) (-1); [EOL]       shortArray0[3] = (short) (-1182); [EOL]       shortArray0[4] = (short)0; [EOL]       String string0 = StringUtils.join(shortArray0, 'o', 13, (int) (short) (-1182)); [EOL]       assertEquals(5, shortArray0.length); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", ""); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.remove("", 'o'); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>(); [EOL]        [EOL]       SortedSet<String> sortedSet0 = treeSet0.headSet("D1CDQwpG"); [EOL]        [EOL]       String string2 = StringUtils.join((Iterable<?>) sortedSet0, '\''); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[5] = true; [EOL]       booleanArray0[6] = true; [EOL]       booleanArray0[7] = true; [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]       assertEquals('e', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       boolean[] booleanArray1 = Conversion.byteToBinary((byte)0, 0, booleanArray0, (byte)0, 0); [EOL]       assertEquals(4, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(111); [EOL]       boolean boolean1 = BooleanUtils.toBoolean(boolean0); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       long long0 = basicThreadFactory0.getThreadCount(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisShutdown()  throws Throwable  { [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(232, threadPoolExecutor_DiscardPolicy0); [EOL]       ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer()); [EOL]       MockThread mockThread0 = new MockThread(threadGroup0, ""); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0); [EOL]       threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor1); [EOL]       TimeUnit timeUnit0 = TimeUnit.SECONDS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 232, timeUnit0, 232); [EOL]       timedSemaphore0.getUnit(); [EOL]       timedSemaphore0.getLimit(); [EOL]       MockThread mockThread1 = new MockThread(); [EOL]       threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.getAvailablePermits(); [EOL]       timedSemaphore0.shutdown(); [EOL]       timedSemaphore0.getLastAcquiresPerPeriod(); [EOL]       timedSemaphore0.getExecutorService(); [EOL]       assertTrue(timedSemaphore0.isShutdown()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       compareToBuilder0.append(1.5, (-1125.6897033605487)); [EOL]       int int0 = compareToBuilder0.toComparison(); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       long long0 = mutableFloat0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[26]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[8]; [EOL]       NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonRequired; [EOL]       numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[3] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[4] = numericEntityUnescaper_OPTIONArray0[0]; [EOL]       numericEntityUnescaper_OPTIONArray0[5] = numericEntityUnescaper_OPTIONArray0[3]; [EOL]       numericEntityUnescaper_OPTIONArray0[6] = numericEntityUnescaper_OPTIONArray0[0]; [EOL]       numericEntityUnescaper_OPTIONArray0[7] = numericEntityUnescaper_OPTION0; [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[4] = '&'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(377); [EOL]       numericEntityUnescaper0.translate((CharSequence) charBuffer0, (Writer) stringWriter0); [EOL]       assertEquals(6, charBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) "r.Ngw'UzA", comparator0); [EOL]       Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator1).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class)); [EOL]       Range<Range<Object>> range1 = Range.between(range0, range0, comparator1); [EOL]       String string0 = range1.toString(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_FIFTH; [EOL]       Fraction fraction1 = Fraction.getFraction((-1766.6)); [EOL]       Fraction fraction2 = fraction0.TWO_FIFTHS.divideBy(fraction1); [EOL]       assertEquals((-2.2642364E-4F), fraction2.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "<size="); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad("The character must not be null", 3, "The character must not be null"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable("The character must not be null"); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (-1), (-1)); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) ""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) "The character must not be null"; [EOL]       charSequenceArray0[1] = (CharSequence) "The character must not be null"; [EOL]       charSequenceArray0[2] = (CharSequence) " "; [EOL]       charSequenceArray0[3] = (CharSequence) "\n"; [EOL]       charSequenceArray0[4] = (CharSequence) "\r"; [EOL]       String string1 = StringUtils.remove("3|76I^", 'v'); [EOL]        [EOL]       String string2 = StringUtils.leftPad("\n", 0, "5h?<cgq1PGdcg2"); [EOL]        [EOL]       charSequenceArray0[5] = (CharSequence) "\n"; [EOL]       charSequenceArray0[6] = (CharSequence) "The character must not be null"; [EOL]       charSequenceArray0[7] = (CharSequence) " "; [EOL]       charSequenceArray0[8] = (CharSequence) " "; [EOL]       String string3 = StringUtils.prependIfMissingIgnoreCase("", "The character must not be null", charSequenceArray0); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)122; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)31; [EOL]       byteArray0[3] = (byte)69; [EOL]       String string4 = StringUtils.join(byteArray0, '@'); [EOL]       assertEquals(4, byteArray0.length); [EOL]        [EOL]       String string5 = StringUtils.strip("^,`JpbAk{!6?3o,l"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[2] = 117.0; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 117.0, (-1848)); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('$', '#'); [EOL]        [EOL]       Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       charRange0.forEach(consumer0); [EOL]       assertEquals('#', charRange0.getStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[5]; [EOL]       Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0); [EOL]       assertEquals(5, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isDefaultFullDetail(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       char[] charArray0 = new char[3]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       assertTrue(equalsBuilder0.isEquals()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) equalsBuilder0; [EOL]       objectArray0[1] = (Object) equalsBuilder0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       Object[] objectArray1 = new Object[4]; [EOL]       objectArray1[0] = (Object) equalsBuilder0; [EOL]       objectArray1[1] = (Object) equalsBuilder0; [EOL]       objectArray1[2] = (Object) equalsBuilder0; [EOL]       Object object0 = new Object(); [EOL]       objectArray1[3] = object0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1); [EOL]       int[] intArray0 = new int[4]; [EOL]       intArray0[0] = (-1443); [EOL]       intArray0[1] = (-2335); [EOL]       intArray0[2] = (-1); [EOL]       intArray0[3] = 47; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(intArray0, intArray0); [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (float) (-1443); [EOL]       floatArray0[1] = (float) (-1443); [EOL]       floatArray0[2] = (float) (-2335); [EOL]       floatArray0[3] = (float) (-1443); [EOL]       floatArray0[4] = (float) (-2335); [EOL]       floatArray0[5] = (float) (-1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0); [EOL]       equalsBuilder3.append((byte)98, (byte)98); [EOL]       assertFalse(equalsBuilder0.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisOSMatch()  throws Throwable  { [EOL]       boolean boolean0 = SystemUtils.isOSMatch("1.8", "1.8", "1.8", "1.8"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((Object) null); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       FormattableUtils formattableUtils0 = new FormattableUtils(); [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(0); [EOL]       Formatter formatter0 = new Formatter(); [EOL]       Formatter formatter1 = FormattableUtils.append((CharSequence) charBuffer0, formatter0, 0, 2213, (-3072), ';', (CharSequence) charBuffer0); [EOL]       Formatter formatter2 = FormattableUtils.append((CharSequence) charBuffer0, formatter1, 3665, 0, 0, (CharSequence) charBuffer0); [EOL]       assertSame(formatter2, formatter1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "<size=", hashMap0); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (-1791.5265F); [EOL]       float float0 = NumberUtils.max(floatArray0); [EOL]       assertEquals((-1791.5265F), float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "*SE8h@D", (CharSequence) "*SE8h@D"); [EOL]        [EOL]       String string0 = StringUtils.trimToNull(""); [EOL]        [EOL]       String[] stringArray0 = new String[8]; [EOL]       stringArray0[0] = "*SE8h@D"; [EOL]       stringArray0[2] = "*SE8h@D"; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = ""; [EOL]       stringArray0[5] = "org.apache.commons.lang3.StringUtils"; [EOL]       stringArray0[6] = "*SE8h@D"; [EOL]       stringArray0[7] = "*SE8h@D"; [EOL]       String string1 = StringUtils.replaceEach("*SE8h@D", stringArray0, stringArray0); [EOL]        [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[0] = (long) 0; [EOL]       longArray0[1] = (long) 0; [EOL]       longArray0[5] = (long) 0; [EOL]       longArray0[3] = (long) 0; [EOL]       longArray0[4] = (long) 0; [EOL]       longArray0[5] = 0L; [EOL]       String string2 = StringUtils.removePattern("*SE8h@D", "kR"); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string3 = StringUtils.removeStart("*SE8h@D", "org.apache.commons.lang3.StringUtils"); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       String string4 = StringUtils.strip(">1zFG%4U30\" UK1", "org.apache.commons.lang3.StringUtils"); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlpha(">1zFG%4U30\" UK1"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       char[] charArray0 = new char[2]; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 1, (int) '!', 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("#jonI"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = strTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0F, 0.0F); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte) (-3); [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       Integer integer0 = hashCodeBuilder0.build(); [EOL]       assertEquals(17, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "<size="); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.getFieldSeparator(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Integer integer0 = new Integer((-2540)); [EOL]       Object[] objectArray0 = new Object[5]; [EOL]       objectArray0[2] = (Object) integer0; [EOL]       standardToStringStyle0.appendDetail(stringBuffer0, ",", objectArray0); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[8]; [EOL]       floatArray0[0] = 489.0F; [EOL]       floatArray0[1] = 0.0F; [EOL]       floatArray0[2] = 0.0F; [EOL]       floatArray0[3] = 2878.8503F; [EOL]       floatArray0[4] = (-1.0F); [EOL]       floatArray0[5] = 1099.2603F; [EOL]       floatArray0[6] = 0.0F; [EOL]       floatArray0[7] = (-1455.0F); [EOL]       float[] floatArray1 = new float[4]; [EOL]       floatArray1[0] = 2878.8503F; [EOL]       floatArray1[1] = 0.0F; [EOL]       floatArray1[2] = 0.0F; [EOL]       floatArray1[3] = 0.0F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)3219; [EOL]       shortArray0[1] = (short)36; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-229), 664); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1231L, (-1L)); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((short) (-2426), (short) (-2636)); [EOL]       equalsBuilder5.setEquals(true); [EOL]       assertTrue(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontainsRange()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("a2_"); [EOL]       boolean boolean0 = range0.containsRange(range0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("=V<GEos?Xd", 'F', '!'); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongToHex()  throws Throwable  { [EOL]       String string0 = Conversion.longToHex((-1404L), 0, "", 0, 0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       strSubstitutor0.replace((StringBuffer) null); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)91); [EOL]       assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)91}, byteArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("3r|Ld<o", 90, "-^@eL[xD"); [EOL]        [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[0] = (long) 90; [EOL]       longArray0[1] = (long) 90; [EOL]       longArray0[2] = (long) 90; [EOL]       longArray0[3] = (long) 90; [EOL]       longArray0[4] = (long) 90; [EOL]       longArray0[5] = (long) 90; [EOL]       longArray0[6] = (long) 90; [EOL]       longArray0[7] = (-1L); [EOL]       String string1 = StringUtils.join(longArray0, 'S'); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.defaultString(""); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.center("", 90, 'S'); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = StringUtils.rightPad("", 90, "-^@eL[xD"); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]        [EOL]       String string5 = StringUtils.abbreviate("-^@eL[xD", 90); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]        [EOL]       int int0 = StringUtils.lastOrdinalIndexOf("-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-3r|Ld<o-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^@eL[xD-^", "90S90S90S90S90S90S90S-1", 90); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("90S90S90S90S90S90S90S-1", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlpha(""); [EOL]        [EOL]       String string6 = StringUtils.normalizeSpace(""); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertTrue(string6.equals((Object)string2)); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)66; [EOL]       byteArray0[1] = (byte)35; [EOL]       byteArray0[2] = (byte)1; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       String string7 = StringUtils.join(byteArray0, ']', 90, (int) (byte)1); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertTrue(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertTrue(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmapLookup()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0); [EOL]       assertNotNull(strLookup0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFirstContextValue()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("org.apache.commons.lang3.exception.ContextedRuntimeException"); [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException("org.apache.commons.lang3.exception.ContextedRuntimeException", mockThrowable0); [EOL]       Object object0 = contextedRuntimeException0.getFirstContextValue("os?)_Lm://B<o"); [EOL]       assertNull(object0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       IDKey iDKey0 = new IDKey(object0); [EOL]       IDKey iDKey1 = new IDKey(iDKey0); [EOL]       IDKey iDKey2 = new IDKey(object0); [EOL]       EqualsBuilder.reflectionEquals((Object) iDKey1, (Object) iDKey2, false); [EOL]       EqualsBuilder.getRegisterPair(iDKey2, ".9VfX]t6sdTS="); [EOL]       EqualsBuilder.isRegistered(".9VfX]t6sdTS=", iDKey2); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object[]) null, (Object[]) null); [EOL]       short[] shortArray0 = new short[9]; [EOL]       shortArray0[0] = (short)1; [EOL]       shortArray0[1] = (short)36; [EOL]       shortArray0[2] = (short)0; [EOL]       shortArray0[3] = (short)0; [EOL]       shortArray0[4] = (short)2865; [EOL]       shortArray0[5] = (short)2454; [EOL]       shortArray0[6] = (short)67; [EOL]       shortArray0[7] = (short) (-377); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0); [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = false; [EOL]       booleanArray0[3] = true; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(booleanArray0, booleanArray0); [EOL]        [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short)67, (short)1652); [EOL]       double[] doubleArray0 = new double[0]; [EOL]       double[] doubleArray1 = new double[0]; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray1); [EOL]       long[] longArray0 = new long[3]; [EOL]       longArray0[0] = (long) (short)0; [EOL]       longArray0[1] = (long) (short) (-377); [EOL]       longArray0[2] = 0L; [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append(longArray0, longArray0); [EOL]       assertFalse(equalsBuilder6.isEquals()); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('e'); [EOL]       assertEquals(4, booleanArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("-"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[2] = (Object) (short)2447; [EOL]       int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetClass()  throws Throwable  { [EOL]       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); [EOL]       Class<?> class0 = ClassUtils.getClass(classLoader0, "short"); [EOL]       assertTrue(class0.isPrimitive()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArrayContentDetail(true); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testand()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("9q1LAZWB!I", "9q1LAZWB!I", "Y.83v&eFU[<IS6{b", "Y.83v&eFU[<IS6{b"); [EOL]       Boolean[] booleanArray0 = new Boolean[1]; [EOL]       booleanArray0[0] = boolean0; [EOL]       Boolean boolean1 = BooleanUtils.and(booleanArray0); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = Fraction.THREE_QUARTERS; [EOL]       Fraction fraction2 = fraction0.subtract(fraction1); [EOL]       Fraction fraction3 = fraction2.invert(); [EOL]       int int0 = fraction3.getProperWhole(); [EOL]       assertEquals(20, fraction2.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       booleanArray0[0] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("}hR", "YKj,:?", 0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string0 = StringUtils.join((Object[]) stringArray0, "}hR", 0, 0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       String string1 = StringUtils.join(doubleArray0, 'H'); [EOL]       assertEquals(1, doubleArray0.length); [EOL]        [EOL]       String string2 = StringUtils.appendIfMissing("WWc.ec,Or)(,|RTQ", "YKj,:?", stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string3 = StringUtils.removeEndIgnoreCase("}hR", "\n"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType(""); [EOL]       assertEquals(0, stringArray1.length); [EOL]        [EOL]       String string4 = StringUtils.center("}hR", (-2907)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Character"); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendSummary(stringBuffer0, "", ""); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-135)); [EOL]       float[] floatArray0 = new float[0]; [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0); [EOL]       assertEquals((-1), hashCodeBuilder1.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       MutableTriple<String, Object, Object> mutableTriple0 = MutableTriple.of("G;6Zd78Pw.|G]% >", (Object) "G;6Zd78Pw.|G]% >", (Object) ""); [EOL]       MutableTriple<String, Object, Object> mutableTriple1 = new MutableTriple<String, Object, Object>(); [EOL]       int int0 = mutableTriple0.compareTo((Triple<String, Object, Object>) mutableTriple1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(); [EOL]       StrLookup.MapStrLookup<Integer> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Integer>(hashMap0); [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('p'); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, strMatcher0, strMatcher0, 'O'); [EOL]       strSubstitutor0.replace(""); [EOL]       assertEquals('O', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1689)); [EOL]       int int0 = ObjectUtils.compare(integer0, integer0, false); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0); [EOL]       HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1227L)); [EOL]       HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(false); [EOL]       hashCodeBuilder3.append((double[]) null); [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = ''; [EOL]       hashCodeBuilder2.append(charArray0); [EOL]       hashCodeBuilder1.build(); [EOL]       assertEquals(1283560960, (int)hashCodeBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentEnd("]"); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = 0.0; [EOL]       String string0 = StringUtils.join(doubleArray0, '2', 404, 404); [EOL]       assertEquals(1, doubleArray0.length); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       Class<Object> class0 = Object.class; [EOL]       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); [EOL]        [EOL]       ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) serviceLoader0, ""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "\n"; [EOL]       charSequenceArray0[2] = (CharSequence) "\r"; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) "\n"; [EOL]       charSequenceArray0[7] = (CharSequence) " "; [EOL]       String string2 = StringUtils.appendIfMissing("", "", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Object[]) charSequenceArray0, 'V', (-931), (-1)); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -931 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       long long0 = stopWatch0.getNanoTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       double double0 = mutableInt0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer(649); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendSuper(stringBuffer0, ""); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       booleanArray0[1] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0, 0); [EOL]       assertEquals('2', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       ImmutablePair<Integer, String> immutablePair0 = new ImmutablePair<Integer, String>((Integer) null, "A"); [EOL]       Integer integer0 = new Integer((-2155)); [EOL]       MutablePair<Integer, String> mutablePair0 = MutablePair.of(integer0, ""); [EOL]       int int0 = immutablePair0.compareTo((Pair<Integer, String>) mutablePair0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       float[] floatArray0 = new float[3]; [EOL]       compareToBuilder0.append((float[]) null, floatArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, (Integer) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append(false); [EOL]       assertEquals(630, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       char char0 = '/'; [EOL]       String string0 = StringUtils.join((Object[]) null, '/', 2089, 2089); [EOL]        [EOL]       String string1 = "7gz<l`vEP<"; [EOL]       String string2 = StringUtils.deleteWhitespace("7gz<l`vEP<"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "7gz<l`vEP<", 2089); [EOL]        [EOL]       String string3 = StringUtils.removeEnd("7gz<l`vEP<", ""); [EOL]        [EOL]       Stack<String> stack0 = new Stack<String>(); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stack0.listIterator(1); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // Index: 1 [EOL]          // [EOL]          verifyException("java.util.Vector", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.appendClassName(stringBuffer0, (Object) null); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(""); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 0, 2); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       double[] doubleArray0 = new double[6]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", doubleArray0, false); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendFieldSeparator(stringBuffer0); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("java.lang.Object@0000000003"); [EOL]       StrMatcher strMatcher1 = StrMatcher.noneMatcher(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, strMatcher0, strMatcher1, '='); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('$'); [EOL]       assertEquals('=', strSubstitutor1.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiControl()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiControl(' '); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetContextValue()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       DefaultExceptionContext defaultExceptionContext1 = defaultExceptionContext0.setContextValue((String) null, (Object) null); [EOL]       Set<String> set0 = defaultExceptionContext1.getContextLabels(); [EOL]       assertFalse(set0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(674).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0); [EOL]       boolean boolean0 = range0.isNaturalOrdering(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       float[] floatArray0 = new float[7]; [EOL]       float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0); [EOL]       assertEquals(7, floatArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 117.0, (-1848)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisBeforeRange()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(674).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0); [EOL]       boolean boolean0 = range0.isBeforeRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       int int1 = 0; [EOL]       boolean boolean0 = false; [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'V'; [EOL]       charArray0[1] = 'l'; [EOL]       charArray0[2] = '}'; [EOL]       charArray0[3] = 'l'; [EOL]       charArray0[4] = '*'; [EOL]       charArray0[5] = 's'; [EOL]       charArray0[6] = '\\'; [EOL]       charArray0[7] = 'm'; [EOL]       charArray0[8] = '~'; [EOL]       MockRandom mockRandom0 = new MockRandom(); [EOL]       assertNotNull(mockRandom0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         mockRandom0.longs((long) 0, (-839L)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // bound must be greater than origin [EOL]          // [EOL]          verifyException("java.util.Random", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(77, 77, 77, (-2147483645)); [EOL]       boolean boolean1 = BooleanUtils.isNotTrue(boolean0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testidentityToString()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = ObjectUtils.mode(objectArray0); [EOL]       String string0 = ObjectUtils.identityToString(object0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       Fraction fraction1 = fraction0.ZERO.divideBy(fraction0); [EOL]       assertEquals(0.0F, fraction1.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       DurationFormatUtils.lexx("S_Tx+i,r9"); [EOL]       DurationFormatUtils.formatPeriod(2834L, 2834L, "dgvCWS>84#BLI"); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("0java.lang.StringBuilder@00000000070java.lang.StringBuilder@0000000008"); [EOL]        [EOL]       String string0 = (String)DurationFormatUtils.s; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("s"); [EOL]       String string1 = durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray1 = new DurationFormatUtils.Token[1]; [EOL]       durationFormatUtils_TokenArray1[0] = durationFormatUtils_Token0; [EOL]       String string2 = DurationFormatUtils.format(durationFormatUtils_TokenArray1, 0, 0, 0, 0, 0, 0, 0, true); [EOL]       String string3 = DurationFormatUtils.formatDurationHMS(0); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       String string4 = durationFormatUtils_Token0.toString(); [EOL]       //  // Unstable assertion: assertFalse(string4.equals((Object)string1)); [EOL]        [EOL]       String string5 = DurationFormatUtils.formatDurationWords(1000L, true, true); [EOL]       //  // Unstable assertion: assertFalse(string5.equals((Object)string3)); [EOL]        [EOL]       String string6 = (String)DurationFormatUtils.m; [EOL]       durationFormatUtils_Token0.equals("m"); [EOL]       String string7 = DurationFormatUtils.formatPeriodISO(795L, 0); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(" 0 seconds", (-1797)); [EOL]       durationFormatUtils_Token1.increment(); [EOL]       DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils(); [EOL]       durationFormatUtils_Token1.equals(durationFormatUtils_Token0); [EOL]       String string8 = DurationFormatUtils.formatDuration((-1913L), "S", false); [EOL]        [EOL]       String string9 = DurationFormatUtils.formatPeriod((-865L), 2834L, ""); [EOL]       //  // Unstable assertion: assertTrue(string9.equals((Object)string2)); [EOL]       //  // Unstable assertion: assertFalse(string9.equals((Object)string4)); [EOL]       //  // Unstable assertion: assertFalse(string9.equals((Object)string1)); [EOL]        [EOL]       String string10 = DurationFormatUtils.formatPeriod(0L, (long) (-1797), "JX&Lexs/y$lC7wxNh"); [EOL]       //  // Unstable assertion: assertFalse(string10.equals((Object)string7)); [EOL]       //  // Unstable assertion: assertFalse(string10.equals((Object)string9)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.strip("", ""); [EOL]        [EOL]       String string1 = "\\u"; [EOL]       String string2 = StringUtils.removeEnd(",]`*Dhn}>}E,]`*Dhn}>}E", string1); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.length(",]`*Dhn}>}E,]`*Dhn}>}E"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1); [EOL]       Integer integer1 = Integer.valueOf((-779)); [EOL]       Range<Integer> range0 = Range.is(integer1); [EOL]       boolean boolean0 = range0.isBefore(integer0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       Byte byte0 = new Byte((byte) (-41)); [EOL]       mutableShort0.setValue((Number) byte0); [EOL]       assertEquals("-41", mutableShort0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmultiplyBy()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       Fraction fraction1 = fraction0.multiplyBy(fraction0); [EOL]       assertEquals(1L, fraction1.longValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoMap()  throws Throwable  { [EOL]       Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null); [EOL]       assertNull(map0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[0]; [EOL]       String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0); [EOL]       assertEquals(0, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.repeat('=', 2024); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) string1); [EOL]        [EOL]       String string2 = StringUtils.upperCase(string1); [EOL]        [EOL]       String string3 = StringUtils.join((Object[]) charSequenceArray0, "g,>Z&", 0, 0); [EOL]       assertEquals(0, charSequenceArray0.length); [EOL]        [EOL]       String string4 = StringUtils.leftPad(string1, 0, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty("g,>Z&"); [EOL]        [EOL]       String string5 = StringUtils.repeat(string4, 2042); [EOL]        [EOL]       int int1 = StringUtils.length(string1); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.isEmpty((CharSequence) null); [EOL]        [EOL]       int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1466)); [EOL]        [EOL]       String string6 = StringUtils.replace((String) null, "g,>Z&", "%74EI"); [EOL]        [EOL]       String string7 = StringUtils.trimToEmpty("cWbnmu&<>@+h27`^tBN"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlpha("cWbnmu&<>@+h27`^tBN"); [EOL]        [EOL]       String string8 = StringUtils.center("", 2024); [EOL]        [EOL]       String string9 = StringUtils.join((char[]) null, '=', 1141, 0); [EOL]        [EOL]       LinkedList<Object> linkedList0 = new LinkedList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = linkedList0.listIterator(); [EOL]        [EOL]       String string10 = StringUtils.join((Iterator<?>) listIterator0, ""); [EOL]        [EOL]       short[] shortArray0 = new short[6]; [EOL]       shortArray0[0] = (short)5; [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)2434; [EOL]       shortArray0[3] = (short)2315; [EOL]       shortArray0[4] = (short)117; [EOL]       shortArray0[5] = (short)58; [EOL]       String string11 = StringUtils.join(shortArray0, 'i', 2, (int) (short)5); [EOL]       assertEquals(6, shortArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.add(1575.9F); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals("1575.9", mutableFloat0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]        [EOL]       standardToStringStyle0.setArrayStart((String) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       float float0 = ObjectUtils.CONST(0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testshortArrayToInt()  throws Throwable  { [EOL]       short[] shortArray0 = new short[2]; [EOL]       int int0 = Conversion.shortArrayToInt(shortArray0, 582, 65535, 32, (short)0); [EOL]       assertEquals(65535, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       hashCodeBuilder0.append(byteArray0); [EOL]       assertEquals(1178847269, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.contains((long[]) null, 0L); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Integer integer0 = new Integer(70); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null, integer0, (Integer) null, integer0); [EOL]       boolean boolean1 = BooleanUtils.isFalse(boolean0); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNamingPattern()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.namingPattern(""); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       String string0 = basicThreadFactory0.getNamingPattern(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "Invalid startIndex: "); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher((StrMatcher) null); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertTrue(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       ImmutablePair<Object, Integer> immutablePair0 = new ImmutablePair<Object, Integer>("", (Integer) null); [EOL]       Integer integer0 = immutablePair0.getRight(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3535.9)); [EOL]       Fraction fraction1 = fraction0.subtract(fraction0); [EOL]       Fraction fraction2 = fraction0.multiplyBy(fraction1); [EOL]       assertEquals(1, fraction1.getDenominator()); [EOL]       assertEquals(10, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder.getRegistry(); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = ')'; [EOL]       charArray0[1] = 'r'; [EOL]       charArray0[2] = '}'; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(2109L, (-1L)); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((Object) equalsBuilder0, (Object) equalsBuilder1); [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       objectArray0[0] = (Object) equalsBuilder2; [EOL]       objectArray0[1] = (Object) equalsBuilder1; [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       byteArray0[0] = (byte) (-74); [EOL]       byteArray0[1] = (byte) (-1); [EOL]       byteArray0[2] = (byte)117; [EOL]       byteArray0[3] = (byte)2; [EOL]       byteArray0[4] = (byte) (-38); [EOL]       byteArray0[5] = (byte)0; [EOL]       byteArray0[6] = (byte)0; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(0.0F, (float) (byte)2); [EOL]       byteArray0[7] = (byte) (-114); [EOL]       equalsBuilder2.append((byte[]) null, byteArray0); [EOL]       objectArray0[2] = (Object) '}'; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append(objectArray0, objectArray0); [EOL]       assertSame(equalsBuilder5, equalsBuilder4); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('('); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       String string1 = StringUtils.lowerCase(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0); [EOL]       assertEquals(3, charSequenceArray0.length); [EOL]        [EOL]       int int1 = (-224); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("", (-224), (-3704)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)1); [EOL]       double double0 = mutableShort0.doubleValue(); [EOL]       assertEquals(1.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       boolean boolean0 = range0.isEndedBy((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOfThrowable()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       Class<MockThrowable> class0 = MockThrowable.class; [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.strip("zVj~~!|"); [EOL]        [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       objectArray0[0] = (Object) "zVj~~!|"; [EOL]       objectArray0[1] = (Object) "zVj~~!|"; [EOL]       objectArray0[2] = (Object) "zVj~~!|"; [EOL]       objectArray0[3] = (Object) "zVj~~!|"; [EOL]       objectArray0[4] = (Object) "zVj~~!|"; [EOL]       objectArray0[5] = (Object) "zVj~~!|"; [EOL]       objectArray0[6] = (Object) "zVj~~!|"; [EOL]       objectArray0[7] = (Object) "zVj~~!|"; [EOL]       objectArray0[8] = (Object) "zVj~~!|"; [EOL]       String string1 = StringUtils.join(objectArray0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "zVj~~!|", (-978)); [EOL]        [EOL]       String string2 = StringUtils.removeEndIgnoreCase((String) null, "zVj~~!|"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.split("zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|zVj~~!|", "zVj~~!|"); [EOL]        [EOL]       String string3 = "\\u000"; [EOL]       String string4 = StringUtils.replaceChars(string3, "Minimum abbreviation width is 4", string3); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string5 = StringUtils.removePattern("Xm}", ""); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]        [EOL]       String string6 = StringUtils.substring("Xm}", (-978), (-1)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]        [EOL]       String string7 = StringUtils.stripToNull("\u0000"); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]        [EOL]       String string8 = StringUtils.prependIfMissingIgnoreCase(string3, "Xm}", stringArray1); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string3)); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertFalse(string8.equals((Object)string0)); [EOL]       assertFalse(string8.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string5)); [EOL]       assertFalse(string3.equals((Object)string7)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string4)); [EOL]       assertFalse(string3.equals((Object)string6)); [EOL]        [EOL]       String string9 = StringUtils.appendIfMissingIgnoreCase("", "\u0000", (CharSequence[]) null); [EOL]       assertFalse(string9.equals((Object)string1)); [EOL]       assertFalse(string9.equals((Object)string4)); [EOL]       assertFalse(string9.equals((Object)string5)); [EOL]       assertFalse(string9.equals((Object)string3)); [EOL]       assertFalse(string9.equals((Object)string8)); [EOL]       assertFalse(string9.equals((Object)string0)); [EOL]       assertTrue(string9.equals((Object)string7)); [EOL]       assertFalse(string9.equals((Object)string6)); [EOL]        [EOL]       String string10 = StringUtils.chop("\u0000"); [EOL]       assertFalse(string10.equals((Object)string5)); [EOL]       assertFalse(string10.equals((Object)string7)); [EOL]       assertFalse(string10.equals((Object)string3)); [EOL]       assertFalse(string10.equals((Object)string9)); [EOL]       assertFalse(string10.equals((Object)string6)); [EOL]       assertFalse(string10.equals((Object)string4)); [EOL]       assertFalse(string10.equals((Object)string1)); [EOL]       assertFalse(string10.equals((Object)string0)); [EOL]       assertFalse(string10.equals((Object)string8)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = (-3946.106913278942); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3946.106913278942), 1); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", " is not in the range '0' - '9'"); [EOL]        [EOL]       ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(); [EOL]        [EOL]       Locale locale0 = Locale.ITALY; [EOL]       assertEquals("it_IT", locale0.toString()); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertEquals("it_IT", locale0.toString()); [EOL]        [EOL]       List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0); [EOL]       assertEquals("it_IT", locale0.toString()); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) list0, ""); [EOL]       assertEquals("it_IT", locale0.toString()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '>'; [EOL]       charArray0[1] = 'n'; [EOL]       charArray0[2] = 'T'; [EOL]       charArray0[3] = 'n'; [EOL]       charArray0[4] = 'V'; [EOL]       charArray0[5] = 'K'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer()); [EOL]       String string0 = FormattableUtils.toString(formattable0); [EOL]       assertEquals("", string0); [EOL]        [EOL]       Formatter formatter0 = new Formatter((Appendable) null); [EOL]       int int0 = 1052; [EOL]       char char0 = 'L'; [EOL]       FormattableUtils.append((CharSequence) "", formatter0, 1052, 1052, 1052, 'L'); [EOL]       int int1 = 0; [EOL]       Formatter formatter1 = FormattableUtils.append((CharSequence) "", formatter0, 1052, 0, 1052); [EOL]       Formattable formattable1 = mock(Formattable.class, new ViolatedAssumptionAnswer()); [EOL]       FormattableUtils.toString(formattable1); [EOL]       formatter1.close(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         FormattableUtils.append((CharSequence) "", formatter1, 0, 0, 0, (CharSequence) ""); [EOL]         fail("Expecting exception: FormatterClosedException"); [EOL]        [EOL]       } catch(FormatterClosedException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.util.Formatter", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.remove(floatArray0, 2); [EOL]       assertEquals(2, floatArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "]"); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.removeLastFieldSeparator(stringBuffer0); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('d'); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       String string1 = StringUtils.lowerCase(""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0); [EOL]        [EOL]       int int1 = (-224); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("", (-224), (-3704)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST_SHORT()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT(2245); [EOL]       assertEquals((short)2245, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1001)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer(649); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendSuper(stringBuffer0, ""); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       Date date0 = DateUtils.setMinutes(mockDate0, 1308); [EOL]       assertEquals("Sun Jul 17 00:00:00 GMT 1", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max((float) 96, (float) (-3424), (float) (-3424)); [EOL]       assertEquals(96.0F, float0, 0.01F); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.appendSuper((-2608)); [EOL]       compareToBuilder0.append((byte)27, (byte)27); [EOL]       assertEquals((-2608), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       StringUtils.uncapitalize(""); [EOL]       StringUtils.splitByWholeSeparator("", "A{M+8", 1676); [EOL]       String string0 = StringUtils.LF; [EOL]       StringUtils.splitByWholeSeparator("", "{}"); [EOL]       StringUtils.chomp("{}", ""); [EOL]       StringUtils.substringBetween("", "(/rB[*", ""); [EOL]       String string1 = StringUtils.repeat("", "{}", 1676); [EOL]       StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils"); [EOL]       StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "(/rB[*"); [EOL]       StringUtils.leftPad("Array and element cannot both be null", (-1), 'a'); [EOL]       String string2 = StringUtils.rightPad("AFP|T", 1676, 'a'); [EOL]       StringUtils.center(string2, (-1)); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       StringUtils.join(byteArray0, 'P', 97, (int) (byte)0); [EOL]       StringUtils.left("%,D)K.6*P!\"&U", 1042); [EOL]       StringUtils.left("", 1985); [EOL]       String string3 = StringUtils.join((short[]) null, 'q', 97, 1895); [EOL]       assertNull(string3); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       compareToBuilder0.append((Object[]) null, objectArray0, (Comparator<?>) null); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableObject<String> mutableObject0 = new MutableObject<String>(); [EOL]       String string0 = mutableObject0.getValue(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testconvertClassNamesToClasses()  throws Throwable  { [EOL]       List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses((List<String>) null); [EOL]       assertNull(list0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       char[] charArray1 = ArrayUtils.add(charArray0, 0, 'K'); [EOL]       assertArrayEquals(new char[] {'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (byte)97; [EOL]       shortArray0[1] = (short) (byte)97; [EOL]       shortArray0[2] = (short) (byte)97; [EOL]       shortArray0[3] = (short)2051; [EOL]       shortArray0[4] = (short) (byte)97; [EOL]       shortArray0[5] = (short) (byte)97; [EOL]       shortArray0[6] = (short) (byte)97; [EOL]       shortArray0[7] = (short)64; [EOL]       short short0 = NumberUtils.min(shortArray0); [EOL]       assertEquals((short)64, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoIntegerObject()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1515); [EOL]       Boolean[] booleanArray0 = new Boolean[1]; [EOL]       Boolean boolean0 = Boolean.valueOf(""); [EOL]       booleanArray0[0] = boolean0; [EOL]       Integer integer1 = new Integer(0); [EOL]       Integer integer2 = BooleanUtils.toIntegerObject(booleanArray0[0], integer1, integer0, integer1); [EOL]       assertEquals(1515, (int)integer2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte)35; [EOL]       byteArray0[1] = (byte)127; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)0; [EOL]       byteArray0[4] = (byte)0; [EOL]       byteArray0[5] = (byte)0; [EOL]       byteArray0[6] = (byte)97; [EOL]       String string0 = StringUtils.join(byteArray0, '*'); [EOL]       assertEquals(7, byteArray0.length); [EOL]        [EOL]       int int0 = StringUtils.length("35*127*0*0*0*0*97"); [EOL]        [EOL]       int int1 = StringUtils.lastOrdinalIndexOf("35*127*0*0*0*0*97", "35*127*0*0*0*0*97", (byte)0); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsIgnoreCase("35*127*0*0*0*0*97", "35*127*0*0*0*0*97"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "35*127*0*0*0*0*97", (CharSequence) "35*127*0*0*0*0*97", (int) (byte)0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsIgnoreCase("35*127*0*0*0*0*97", "35*127*0*0*0*0*97"); [EOL]        [EOL]       int int3 = StringUtils.indexOf((CharSequence) "35*127*0*0*0*0*97", 0); [EOL]        [EOL]       String string1 = StringUtils.defaultIfBlank("Threshold must not be negative", (String) null); [EOL]        [EOL]       String string2 = StringUtils.substringBefore((String) null, "35*127*0*0*0*0*97"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       charSequenceArray0[1] = (CharSequence) "35*127*0*0*0*0*97"; [EOL]       charSequenceArray0[3] = (CharSequence) "Threshold must not be negative"; [EOL]       charSequenceArray0[4] = (CharSequence) "Threshold must not be negative"; [EOL]       String string3 = StringUtils.appendIfMissing("Threshold must not be negative", "Threshold must not be negative", charSequenceArray0); [EOL]       assertEquals(5, charSequenceArray0.length); [EOL]        [EOL]       int int4 = StringUtils.lastOrdinalIndexOf("Threshold must not be negative", "Threshold must not be negative", (byte)0); [EOL]        [EOL]       String string4 = StringUtils.stripToNull((String) null); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Threshold must not be negative", (int) (byte)0, (int) (byte)0); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]        [EOL]       CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(0, charBuffer1.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRootCauseStackTrace()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("tzS-G?4K8JT3"); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("tzS-G?4K8JT3", mockThrowable0); [EOL]       mockThrowable0.initCause(mockThrowable1); [EOL]       String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(mockThrowable0); [EOL]       assertEquals(2, stringArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContextValues()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       defaultExceptionContext0.setContextValue((String) null, (Object) null); [EOL]       List<Object> list0 = defaultExceptionContext0.getContextValues((String) null); [EOL]       assertEquals(1, list0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappendSuper()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = true; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0); [EOL]       long[] longArray0 = new long[0]; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(longArray0, longArray0); [EOL]       int[] intArray0 = new int[5]; [EOL]       intArray0[0] = 0; [EOL]       intArray0[1] = 0; [EOL]       intArray0[2] = 0; [EOL]       intArray0[3] = 0; [EOL]       intArray0[4] = (-251); [EOL]       int[] intArray1 = new int[7]; [EOL]       intArray1[0] = 0; [EOL]       intArray1[1] = 0; [EOL]       intArray1[2] = (-251); [EOL]       intArray1[3] = 0; [EOL]       intArray1[4] = 0; [EOL]       intArray1[5] = 0; [EOL]       intArray1[6] = (-1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(intArray0, intArray1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((-413.235F), (-813.0F)); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(true, true); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.appendSuper(false); [EOL]       assertSame(equalsBuilder2, equalsBuilder6); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.reset(); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex()); [EOL]       //  // Unstable assertion: assertEquals(0, strTokenizer2.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double double0 = NumberUtils.max((-2907.0), (double) (-1387), (double) (-2836)); [EOL]       assertEquals((-1387.0), double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       short[] shortArray0 = new short[4]; [EOL]       short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0); [EOL]       assertEquals(4, shortArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetShortRawValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       short short0 = bitField0.getShortRawValue((short)1); [EOL]       assertEquals((short)1, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(674).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0); [EOL]       boolean boolean0 = range0.isNaturalOrdering(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Class<Character> class0 = Character.class; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.getShortClassName(class0); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "]"); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.removeLastFieldSeparator(stringBuffer0); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.subtract(446); [EOL]       double double0 = mutableInt0.doubleValue(); [EOL]       assertEquals((-446), (int)mutableInt0.getValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetMonths()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748), (-1748), (-1748)); [EOL]       Date date0 = DateUtils.setMonths(mockDate0, (-1748)); [EOL]       assertEquals("Tue May 03 22:52:00 GMT 1", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((Object) null); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'i'; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'i'); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (float) 13; [EOL]       floatArray0[1] = (float) 13; [EOL]       floatArray0[2] = (float) 2969; [EOL]       floatArray0[3] = (float) (-900); [EOL]       floatArray0[4] = (float) 470; [EOL]       floatArray0[5] = (float) 470; [EOL]       String string2 = StringUtils.strip("i+PQL`~wAN9Vf0"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("i+PQL`~wAN9Vf0", "ZC6Axe1?SmzqL8x"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) null, (char[]) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0, 25, 1790); [EOL]       assertEquals(0.01396648F, fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('\u0087'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       CharUtils charUtils0 = new CharUtils(); [EOL]       char char0 = CharUtils.toChar((Character) charUtils0.LF, 's'); [EOL]       assertEquals('\n', char0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true, 1854); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentEnd(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)2); [EOL]       int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[1] = '\u0000'; [EOL]       String string0 = StringUtils.join(charArray0, '\u0000', (-1143), (-1143)); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string1 = StringUtils.difference("", ""); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) '\u0000'; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) '\u0000'; [EOL]       objectArray0[3] = (Object) ""; [EOL]       String string2 = StringUtils.join(objectArray0, "", 0, (-1143)); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       String string3 = StringUtils.leftPad("LEf2/", 479, ""); [EOL]        [EOL]       String string4 = StringUtils.center("L$Q=C70&<c5T':*Hz", 0, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumeric("L$Q=C70&<c5T':*Hz"); [EOL]        [EOL]       String string5 = StringUtils.rightPad("", (-1143), 'O'); [EOL]        [EOL]       String string6 = StringUtils.center("", (-804), ""); [EOL]        [EOL]       int[] intArray0 = new int[3]; [EOL]       intArray0[0] = (-804); [EOL]       intArray0[1] = (-804); [EOL]       intArray0[2] = 1776; [EOL]       String string7 = StringUtils.join(intArray0, '\u0000'); [EOL]       assertEquals(3, intArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: "); [EOL]        [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.reset(""); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]       assertEquals((-1), strTokenizer2.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[5] = (int) 'd'; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 100); [EOL]       assertEquals(5, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPattern()  throws Throwable  { [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("%,'.0=o8.l", hashMap0); [EOL]       extendedMessageFormat0.hashCode(); [EOL]       assertEquals("%,.0=o8.l", extendedMessageFormat0.toPattern()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexDigitMsb0ToInt('d'); [EOL]       assertEquals(11, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "]"); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.removeLastFieldSeparator(stringBuffer0); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('@'); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]       assertEquals(1, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer(614); [EOL]       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(614, 614).when(comparator0).compare(anyInt() , anyInt()); [EOL]       Range<Integer> range0 = Range.is(integer0, comparator0); [EOL]       boolean boolean0 = range0.isBeforeRange(range0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[0] = (double) 2301; [EOL]       double[] doubleArray1 = new double[7]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetMinutes()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       Date date0 = DateUtils.setMinutes(mockDate0, 1308); [EOL]       assertEquals("Sun Jul 17 00:00:00 GMT 1", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       String string0 = "wj!Jg\"YklZk\\u4bZ&7"; [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(string0, booleanArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendTransients()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("java.vm.version", (ToStringStyle) standardToStringStyle0, (StringBuffer) null, (Class<? super String>) class0, false, false); [EOL]       reflectionToStringBuilder0.getUpToClass(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendTransients()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       mutableDouble0.setValue(1578.9262693); [EOL]       int int0 = mutableDouble0.intValue(); [EOL]       assertEquals(1578, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-173), Integer.MAX_VALUE); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short)0); [EOL]       HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper(0); [EOL]       hashCodeBuilder2.append((-538L)); [EOL]       assertEquals((-2147482938), (int)hashCodeBuilder2.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("", 'u'); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher((StrMatcher) null); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertTrue(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setUseIdentityHashCode(false); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       boolean[] booleanArray1 = new boolean[5]; [EOL]       compareToBuilder0.append(booleanArray1, booleanArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.toBoolean(4); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testidentityToString()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""); [EOL]       Integer integer0 = new Integer(0); [EOL]       ObjectUtils.identityToString(stringBuffer0, (Object) integer0); [EOL]       assertEquals(19, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       Object object0 = new Object(); [EOL]       String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0, false); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiNumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiNumeric('!'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.appendClassName(stringBuffer0, (Object) null); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentEnd(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintToHexDigitMsb0()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(9); [EOL]       assertEquals('9', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInt()  throws Throwable  { [EOL]       int int0 = NumberUtils.toInt("9"); [EOL]       assertEquals(9, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('\n'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       MutablePair<Object, AbstractMap.SimpleEntry<String, String>> mutablePair0 = new MutablePair<Object, AbstractMap.SimpleEntry<String, String>>(); [EOL]       int int0 = mutablePair0.compareTo((Pair<Object, AbstractMap.SimpleEntry<String, String>>) mutablePair0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnamingPattern()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.namingPattern("|"); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       MockThread mockThread0 = new MockThread("hh'X"); [EOL]       basicThreadFactory0.newThread(mockThread0); [EOL]       long long0 = basicThreadFactory0.getThreadCount(); [EOL]       assertEquals(1L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testclear()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       byte byte0 = bitField0.clearByte((byte) (-25)); [EOL]       assertEquals((byte) (-25), byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       compareToBuilder0.append((Object[]) null, objectArray0, (Comparator<?>) null); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongToIntArray()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = Conversion.longToIntArray(0, 0, intArray0, (-1), (-1383)); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "<size="); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.valueOf(true); [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       ContextedException contextedException0 = new ContextedException(); [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException("", mockThrowable0, contextedException0); [EOL]       String string0 = contextedRuntimeException0.getRawMessage(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcall()  throws Throwable  { [EOL]       Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0, (ExecutorService) null); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor(); [EOL]       assertNull(executorService0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Short short0 = new Short((short) (-558)); [EOL]       MutableInt mutableInt0 = new MutableInt((Number) short0); [EOL]       mutableInt0.add(3181); [EOL]       Integer integer0 = mutableInt0.getValue(); [EOL]       assertEquals(2623, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("S+.LrW?7FtR", "", (String) null, "S+.LrW?7FtR"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInt()  throws Throwable  { [EOL]       int int0 = NumberUtils.toInt("918TxE`S", (int) (byte)0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       int[] intArray0 = new int[5]; [EOL]       int[] intArray1 = new int[0]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1); [EOL]       short[] shortArray0 = new short[4]; [EOL]       compareToBuilder1.append(shortArray0, shortArray0); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode(17, 17, (Object) linkedList0, false); [EOL]       assertEquals(17, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetVariablePrefixMatcher()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefixMatcher(strSubstitutor0.DEFAULT_SUFFIX); [EOL]       assertEquals('$', strSubstitutor1.getEscapeChar()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-135)); [EOL]       hashCodeBuilder0.append((byte[]) null); [EOL]       assertEquals(135, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       char[] charArray0 = new char[15]; [EOL]       char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null); [EOL]       Class<String> class0 = String.class; [EOL]       reflectionToStringBuilder0.setUpToClass(class0); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoStringYesNo()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringYesNo((Boolean) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = (-4616189618054758400L); [EOL]       longArray0[1] = 1L; [EOL]       longArray0[2] = 629L; [EOL]       longArray0[3] = (-1261L); [EOL]       longArray0[4] = 1720L; [EOL]       boolean[] booleanArray0 = new boolean[22]; [EOL]       booleanArray0[0] = false; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = false; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0); [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'l'; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       equalsBuilder2.append(byteArray0, byteArray0); [EOL]       longArray0[5] = (-1815L); [EOL]       longArray0[6] = 2093L; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder0.append(longArray0, longArray0); [EOL]       EqualsBuilder.isRegistered(equalsBuilder3, (Object) null); [EOL]       assertTrue(equalsBuilder3.isEquals()); [EOL]        [EOL]       boolean[] booleanArray1 = new boolean[8]; [EOL]       booleanArray1[0] = true; [EOL]       booleanArray1[1] = true; [EOL]       booleanArray1[2] = false; [EOL]       booleanArray1[3] = false; [EOL]       booleanArray1[4] = false; [EOL]       booleanArray1[5] = true; [EOL]       booleanArray1[6] = true; [EOL]       booleanArray1[7] = false; [EOL]       equalsBuilder0.append(booleanArray0, booleanArray1); [EOL]       assertFalse(equalsBuilder0.isEquals()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmatchesPattern()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       Validate.matchesPattern((CharSequence) "~>AIXTbCk6", "~>AIXTbCk6", "8YGA0Mzbw9P", objectArray0); [EOL]       assertEquals(1, objectArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short)41, (short)41); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((byte)0, (byte)0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.appendSuper(true); [EOL]       int[] intArray0 = new int[0]; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(intArray0, intArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((Object) "", (Object) equalsBuilder2); [EOL]        [EOL]       equalsBuilder5.setEquals(true); [EOL]       assertTrue(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       short[] shortArray0 = new short[2]; [EOL]       Short[] shortArray1 = new Short[4]; [EOL]       shortArray1[0] = (Short) (short)0; [EOL]       short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, shortArray0[0]); [EOL]       assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.subtract((-1163)); [EOL]       MutableInt mutableInt1 = new MutableInt(1); [EOL]       boolean boolean0 = mutableInt0.equals(mutableInt1); [EOL]       assertEquals(1163L, mutableInt0.longValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.TWO_THIRDS.add(fraction0); [EOL]       Fraction fraction2 = fraction1.negate(); [EOL]       long long0 = fraction2.longValue(); [EOL]       assertEquals((-1.1666666F), fraction2.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPeriod()  throws Throwable  { [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2105); [EOL]        [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 2105, timeUnit0, 2105); [EOL]       assertEquals(2105L, timedSemaphore0.getPeriod()); [EOL]        [EOL]       timedSemaphore0.acquire(); [EOL]       assertEquals(2105L, timedSemaphore0.getPeriod()); [EOL]        [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       assertEquals(2105L, timedSemaphore0.getPeriod()); [EOL]        [EOL]       timedSemaphore0.shutdown(); [EOL]       assertEquals(2105L, timedSemaphore0.getPeriod()); [EOL]        [EOL]       TimeUnit timeUnit1 = timedSemaphore0.getUnit(); [EOL]       assertEquals(2105L, timedSemaphore0.getPeriod()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetPriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(1); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals(1, (int)integer0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       shortArray0[0] = (short)0; [EOL]       shortArray0[1] = (short)122; [EOL]       shortArray0[2] = (short) (-1); [EOL]       shortArray0[3] = (short) (-1182); [EOL]       shortArray0[4] = (short)0; [EOL]       String string0 = StringUtils.join(shortArray0, 'o', 13, (int) (short) (-1182)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", ""); [EOL]        [EOL]       String string1 = StringUtils.remove("", 'o'); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>(); [EOL]        [EOL]       SortedSet<String> sortedSet0 = treeSet0.headSet("D1CDQwpG"); [EOL]       assertTrue(sortedSet0.isEmpty()); [EOL]        [EOL]       String string2 = StringUtils.join((Iterable<?>) sortedSet0, '\''); [EOL]       assertTrue(sortedSet0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "["); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendSuper(stringBuffer0, "["); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("", 'u'); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher((StrMatcher) null); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(77, 77, 77, (-2147483645)); [EOL]       String string0 = BooleanUtils.toStringYesNo((boolean) boolean0); [EOL]       assertEquals("yes", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeCsv()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeCsv((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendToString(""); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetMessage()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       MockPrintStream mockPrintStream0 = new MockPrintStream("sun.reflect.GeneratedConstructorAccessor40.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n"); [EOL]       ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintStream) mockPrintStream0); [EOL]       assertNull(mockThrowable0.getMessage()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append((-2146649672), (-663)); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("&8J2I8M>C@QrCd", (int[]) null); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "<size=", hashMap0); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher_TrimMatcher0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlocaleLookupList()  throws Throwable  { [EOL]       List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null); [EOL]       assertTrue(list0.isEmpty()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       Locale locale0 = Locale.KOREAN; [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0); [EOL]       DateUtils.iterator((Calendar) mockGregorianCalendar0, 5); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSupported()  throws Throwable  { [EOL]       boolean boolean0 = CharEncoding.isSupported(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(linkedList0, toStringStyle0); [EOL]       String string0 = reflectionToStringBuilder0.toString(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]        [EOL]       standardToStringStyle0.setArrayContentDetail(false); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertFalse(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(""); [EOL]       char[] charArray0 = new char[2]; [EOL]       int int0 = strMatcher_StringMatcher0.isMatch(charArray0, (-17), 1, 1); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("HO", "k,*=iMdn!:7_#XW"); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       int int0 = strTokenizer0.previousIndex(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphaUpper()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('\r'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte("-56"); [EOL]       assertEquals((-56), mutableByte0.intValue()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       boolean boolean0 = ArrayUtils.contains(charArray0, 'T'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Type[] typeArray0 = new Type[7]; [EOL]       Class<?> class1 = TypeUtils.getRawType(class0, class0); [EOL]       ParameterizedType parameterizedType0 = mock(ParameterizedType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments(); [EOL]       doReturn(typeArray0[1]).when(parameterizedType0).getOwnerType(); [EOL]       doReturn(class1).when(parameterizedType0).getRawType(); [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) parameterizedType0, (Class<?>) class0); [EOL]       assertEquals(0, map0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       mutableDouble0.setValue(1578.9262693); [EOL]       Double double0 = mutableDouble0.getValue(); [EOL]       assertEquals(1578.9262693, (double)double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setSizeStartText((String) null); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       SQLException[] sQLExceptionArray0 = new SQLException[6]; [EOL]       SQLException[] sQLExceptionArray1 = Validate.validIndex(sQLExceptionArray0, 0); [EOL]       assertSame(sQLExceptionArray1, sQLExceptionArray0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testkeep()  throws Throwable  { [EOL]       String[] stringArray0 = new String[6]; [EOL]       String string0 = CharSetUtils.keep("org.apache.commons.lang3.CharSetUtils", stringArray0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm"); [EOL]       boolean boolean0 = range0.isEndedBy(">~{f:w[rbE"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteArrayToShort()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       short short0 = Conversion.byteArrayToShort(byteArray0, (byte) (-104), (byte) (-116), (byte)0, (-1447)); [EOL]       assertEquals((short) (-116), short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       byte byte0 = ObjectUtils.CONST((byte)31); [EOL]       assertEquals((byte)31, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       Locale locale0 = Locale.KOREAN; [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0); [EOL]       DateUtils.iterator((Calendar) mockGregorianCalendar0, 6); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid"); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.isEmptyTokenAsNull(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn(':', ':'); [EOL]       CharRange charRange1 = CharRange.isNotIn('.', '.'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]       assertTrue(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitNanoTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       float float0 = NumberUtils.toFloat("9"); [EOL]       assertEquals(9.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '!'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunescapeHtml4()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeHtml4("Q f$w}_"); [EOL]       assertEquals("Q f$w}_", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(0, 0, 0, (-3695)); [EOL]       int int0 = BooleanUtils.toInteger(boolean0, 1, (-1), 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       byteArray1[0] = (byte) (-3); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1); [EOL]       long[] longArray0 = new long[1]; [EOL]       compareToBuilder1.append(longArray0, longArray0); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT(2245); [EOL]       assertEquals((short)2245, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoByte()  throws Throwable  { [EOL]       byte byte0 = NumberUtils.toByte("8FXn%<q", (byte)0); [EOL]       assertEquals((byte)0, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid"); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher_TrimMatcher0); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]       assertFalse(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("<null>"); [EOL]       reflectionToStringBuilder0.setAppendTransients(false); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       double double0 = NumberUtils.min(538.0, (double) 115, 538.0); [EOL]       assertEquals(115.0, double0, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(true); [EOL]       Boolean boolean0 = mutableBoolean0.getValue(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetDelimiterChar()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = ' '; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       strTokenizer0.setDelimiterChar(' '); [EOL]       String string0 = strTokenizer0.previousToken(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1001, (-2866), 6, 3, 1, 1909); [EOL]       long long0 = DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, 13); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-38114915231000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=762,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=32,SECOND=49,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String) null, (String) null, 267); [EOL]        [EOL]       String string2 = StringUtils.removeStartIgnoreCase((String) null, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.replace("", (String) null, ""); [EOL]        [EOL]       String string4 = StringUtils.replace("C47+}uBC", (String) null, "bPuF"); [EOL]        [EOL]       String string5 = StringUtils.defaultString((String) null); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "C47+}uBC", (CharSequence) "", 267); [EOL]        [EOL]       String string6 = StringUtils.chomp(" in an array of "); [EOL]        [EOL]       String string7 = StringUtils.trimToEmpty(""); [EOL]        [EOL]       String string8 = StringUtils.stripToEmpty(""); [EOL]        [EOL]       int int3 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-132)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'F'; [EOL]       charArray0[1] = '#'; [EOL]       charArray0[2] = 'f'; [EOL]       String string9 = StringUtils.join(charArray0, 'F'); [EOL]       assertEquals(3, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = (-1206L); [EOL]       long long0 = NumberUtils.min(longArray0); [EOL]       assertEquals((-1206L), long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       long long0 = NumberUtils.toLong((String) null, 435L); [EOL]       assertEquals(435L, long0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequalsIgnoreCase()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) "N^zX$"; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) "N^zX$"; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       objectArray0[4] = (Object) "N^zX$"; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       Object object0 = strBuilder_StrBuilderTokenizer0.clone(); [EOL]       objectArray0[5] = object0; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       strBuilder0.append("N^zX$", objectArray0); [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]       strBuilder1.delete(0, 0); [EOL]       strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]       strBuilder0.append(false); [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('9'); [EOL]       strBuilder0.lastIndexOf(strMatcher0, 0); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       Fraction fraction1 = fraction0.ZERO.abs(); [EOL]       assertSame(fraction1, fraction0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       Class<Object> class0 = Object.class; [EOL]       String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0, true, (Class<? super Object>) class0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentEnd("]"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0, 0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "<size=", hashMap0); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testregister()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       IDKey iDKey0 = new IDKey(equalsBuilder0); [EOL]       equalsBuilder0.append((Object) iDKey0, (Object) iDKey0); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       objectArray0[0] = (Object) equalsBuilder0; [EOL]       objectArray0[1] = (Object) equalsBuilder0; [EOL]       equalsBuilder0.append(objectArray0, objectArray0); [EOL]       EqualsBuilder.unregister(equalsBuilder0, equalsBuilder0); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-3223), (-3223)); [EOL]       assertTrue(equalsBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeXml((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) " "; [EOL]       boolean boolean0 = StringUtils.endsWithAny("\r", charSequenceArray0); [EOL]        [EOL]       String string0 = StringUtils.capitalize("AbHQ,\"yg#Ilo'23.8"); [EOL]        [EOL]       String string1 = StringUtils.stripAccents("f|kwyib#~"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "f|kwyib#~", 90); [EOL]        [EOL]       String string2 = StringUtils.stripEnd("", "\r"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphaSpace(""); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable0).call(); [EOL]       ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer()); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0); [EOL]       scheduledThreadPoolExecutor0.getRejectedExecutionHandler(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0, scheduledThreadPoolExecutor0); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.getExternalExecutor(); [EOL]       Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable1).call(); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1, scheduledThreadPoolExecutor0); [EOL]       callableBackgroundInitializer1.initialize(); [EOL]       callableBackgroundInitializer1.initialize(); [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(); [EOL]       MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize(); [EOL]       assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtruncatedEquals()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0); [EOL]       boolean boolean0 = DateUtils.truncatedEquals((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0, 10); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object object0 = new Object(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, object0); [EOL]       compareToBuilder1.append(2790.0, 0.0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("", 'u'); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher((StrMatcher) null); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisSameInstant()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-152), 1881, (-1189), (-383), 1, 2147481972); [EOL]       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(); [EOL]       boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStringBuffer()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       StringBuffer stringBuffer0 = toStringBuilder0.getStringBuffer(); [EOL]       assertEquals(19, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetJavaVersion()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.2"); [EOL]       assertEquals(JavaVersion.JAVA_1_2, javaVersion0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("", "", ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace(""); [EOL]        [EOL]       String string1 = StringUtils.substringAfterLast((String) null, ""); [EOL]        [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       String string2 = StringUtils.join(byteArray0, 'N', 1126, 1126); [EOL]       assertEquals(0, byteArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported"); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join(floatArray0, 'f', 7, 7); [EOL]       assertEquals(6, floatArray0.length); [EOL]        [EOL]       String string2 = StringUtils.swapCase(", '"); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsWhitespace(", '"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", ', ',", (CharSequence) ", ', ',"); [EOL]        [EOL]       String string3 = StringUtils.difference("Naa./KW8?O/y3WGCL)", ", '"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split(", '"); [EOL]       assertEquals(2, stringArray0.length); [EOL]        [EOL]       Stack<String> stack0 = new Stack<String>(); [EOL]        [EOL]       Iterator<String> iterator0 = stack0.iterator(); [EOL]        [EOL]       String string4 = StringUtils.join(iterator0, "Naa./KW8?O/y3WGCL)"); [EOL]        [EOL]       String string5 = StringUtils.difference(", ', ',", ", '"); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ", '", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.center("dEi#@+HAi*tkA$", 0, "$ug'LnL0;\"NGNVp'Z4"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ", '", 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsIgnoreCase("dEi#@+HAi*tkA$", ""); [EOL]        [EOL]       int int3 = StringUtils.indexOf((CharSequence) ", '", (CharSequence) ", '", 2147483645); [EOL]        [EOL]       int int4 = StringUtils.indexOf((CharSequence) "dEi#@+HAi*tkA$", 7, Integer.MAX_VALUE); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "dEi#@+HAi*tkA$"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ", '"; [EOL]       charSequenceArray0[4] = (CharSequence) "dEi#@+HAi*tkA$"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ", '"; [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       int[] intArray0 = new int[4]; [EOL]       intArray0[0] = Integer.MAX_VALUE; [EOL]       intArray0[1] = (-1); [EOL]       intArray0[2] = 7; [EOL]       intArray0[3] = (-1); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, 'f', 10, Integer.MAX_VALUE); [EOL]         fail("Expecting exception: NegativeArraySizeException"); [EOL]        [EOL]       } catch(NegativeArraySizeException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetStackFrameList()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(" in an array of "); [EOL]       StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4]; [EOL]       StackTraceElement stackTraceElement0 = new StackTraceElement("tzS-GT4K8T3", "OpenBSD", "OpenBSD", 1902); [EOL]       stackTraceElementArray0[0] = stackTraceElement0; [EOL]       stackTraceElementArray0[1] = stackTraceElement0; [EOL]       StackTraceElement stackTraceElement1 = new StackTraceElement("at", "tzS-GT4K8T3", "tzS-GT4K8T3", (-1)); [EOL]       stackTraceElementArray0[2] = stackTraceElement1; [EOL]       stackTraceElementArray0[3] = stackTraceElementArray0[1]; [EOL]       mockThrowable0.setStackTrace(stackTraceElementArray0); [EOL]       List<String> list0 = ExceptionUtils.getStackFrameList(mockThrowable0); [EOL]       assertEquals(1, list0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>((Object) null); [EOL]       String string0 = constantInitializer0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('E', 2256); [EOL]        [EOL]       String string1 = StringUtils.upperCase((String) null); [EOL]        [EOL]       String string2 = StringUtils.chomp("/9!yB"); [EOL]        [EOL]       String string3 = StringUtils.leftPad("/9!yB", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace("/9!yB"); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence[]) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("/9!yB", ""); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad((String) null, 5, 'A'); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "/9!yB"); [EOL]        [EOL]       int int2 = StringUtils.countMatches("/9!yB", ""); [EOL]        [EOL]       String string5 = StringUtils.repeat((String) null, "", 0); [EOL]        [EOL]       String string6 = StringUtils.removeEnd("c-L", (String) null); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'A'; [EOL]       charArray0[1] = 'E'; [EOL]       charArray0[2] = 'A'; [EOL]       charArray0[3] = 'E'; [EOL]       charArray0[4] = 'A'; [EOL]       charArray0[5] = 'H'; [EOL]       charArray0[6] = 'A'; [EOL]       charArray0[8] = 'A'; [EOL]       String string7 = StringUtils.join(charArray0, '}'); [EOL]       assertEquals(9, charArray0.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]        [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer1.forEachRemaining(consumer0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer0.setIgnoreEmptyTokens(false); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strTokenizer2.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("org.apache.commons.lang3.builder.ToStringBuilder", (short[]) null, false); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("#"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       StringBuffer stringBuffer0 = toStringBuilder0.getStringBuffer(); [EOL]       assertEquals(19, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]        [EOL]       standardToStringStyle0.setSizeStartText((String) null); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(674, 674).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0); [EOL]       boolean boolean0 = range0.isStartedBy("9apdIVYVD0Icg&f"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetTimeInstance()  throws Throwable  { [EOL]       ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0); [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0); [EOL]       Locale locale0 = Locale.GERMANY; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0, locale0); [EOL]       Date date0 = fastDateFormat0.parse("00:00:00 UTC"); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.join((float[]) null, ')'); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterType((String) null); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       byte[] byteArray0 = new byte[3]; [EOL]       byteArray0[0] = (byte)14; [EOL]       byteArray0[1] = (byte)90; [EOL]       byteArray0[2] = (byte)0; [EOL]       String string1 = StringUtils.join(byteArray0, ''); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.toString(byteArray0, (String) null); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence[]) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlpha((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.join(byteArray0, '', 84, 0); [EOL]        [EOL]       String string4 = StringUtils.substringBeforeLast("', has a length less than 2", (String) null); [EOL]        [EOL]       String string5 = StringUtils.rightPad("", 2516); [EOL]        [EOL]       Class<Object> class0 = Object.class; [EOL]       ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null); [EOL]       assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString()); [EOL]        [EOL]       Iterator<Object> iterator0 = serviceLoader0.iterator(); [EOL]       assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString()); [EOL]        [EOL]       String string6 = StringUtils.join(iterator0, "lw5:nu{;e[YaM9+"); [EOL]       assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testunescapeEcmaScript()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeEcmaScript((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprocessBitVector()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       long[] longArray0 = new long[0]; [EOL]       EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0); [EOL]       assertEquals(0, enumSet0.size()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       Byte[] byteArray1 = ArrayUtils.toObject(byteArray0); [EOL]       assertEquals(5, byteArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-782.0)); [EOL]       assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-782.0)}, doubleArray1, 0.01); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentEnd("]"); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       int int0 = BooleanUtils.toInteger(false, 0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1)); [EOL]       String[] stringArray0 = new String[8]; [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, stringArray0); [EOL]       assertEquals(23426, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("G", 'D'); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("G", "44"); [EOL]        [EOL]       String string1 = StringUtils.leftPad("", 256, ""); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty("                                                                                                                                                                                                                                                                "); [EOL]        [EOL]       String[] stringArray1 = new String[3]; [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       stringArray1[0] = "G"; [EOL]       stringArray1[1] = "G"; [EOL]       stringArray1[2] = "44"; [EOL]       String[] stringArray2 = StringUtils.stripAll(stringArray1); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray1)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray0)); [EOL]        [EOL]       String string2 = StringUtils.chop(""); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.repeat("", 256); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.trim(""); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertTrue(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertTrue(string4.equals((Object)string3)); [EOL]        [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)7; [EOL]       byteArray0[3] = (byte)0; [EOL]       byteArray0[4] = (byte)84; [EOL]       String string5 = StringUtils.join(byteArray0, '='); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "0=0=7=0=84", (CharSequence) "44", 4301); [EOL]        [EOL]       String string6 = StringUtils.left("                                                                                                                                                                                                                                                                ", 32); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable(""); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence) "G", (CharSequence) "0=0=7=0=84"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric("44"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoShort()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)0); [EOL]       mutableShort0.increment(); [EOL]       float float0 = mutableShort0.floatValue(); [EOL]       assertEquals((short)1, (short)mutableShort0.toShort()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "]"); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.removeLastFieldSeparator(stringBuffer0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetAccessibleConstructor()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Constructor<Object> constructor0 = ConstructorUtils.getMatchingAccessibleConstructor(class0, (Class<?>[]) null); [EOL]       Constructor<Object> constructor1 = ConstructorUtils.getAccessibleConstructor(constructor0); [EOL]       assertSame(constructor1, constructor0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.between((-109), (-109)); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       boolean boolean0 = numericEntityEscaper0.translate((-373), (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (float) 13; [EOL]       floatArray0[1] = (float) 13; [EOL]       floatArray0[2] = (float) 2969; [EOL]       floatArray0[3] = (float) (-900); [EOL]       floatArray0[4] = (float) 470; [EOL]       floatArray0[5] = (float) (-1); [EOL]       String string2 = StringUtils.join(floatArray0, '5', 90, (-1)); [EOL]       assertEquals(6, floatArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("", "ZC6Axe1?SmzqL8x"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("                                                                                                                                                                                                                                   ZC6Axe1?SmzqL8x                                                                                                                                                                                                                                   ", "i+PQL`~wAN9Vf0"); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string3 = StringUtils.substringBetween((String) null, (String) null, "org.apache.commons.lang3.ObjectUtils"); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("--"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       StringUtils.uncapitalize(""); [EOL]       StringUtils.splitByWholeSeparator("", "A{M+8", 1676); [EOL]       String string0 = StringUtils.LF; [EOL]       StringUtils.splitByWholeSeparator("", "{}"); [EOL]       StringUtils.chomp("{}", ""); [EOL]       StringUtils.substringBetween("", "(/rB[*", ""); [EOL]       String string1 = StringUtils.repeat("", "{}", 1676); [EOL]       StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org.apache.commons.lang3.CharUtils"); [EOL]       StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "(/rB[*"); [EOL]       StringUtils.leftPad("Array and element cannot both be null", (-1), 'a'); [EOL]       String string2 = StringUtils.rightPad("AFP|T", 1676, 'a'); [EOL]       StringUtils.center(string2, (-1)); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       StringUtils.join(byteArray0, 'P', 97, (int) (byte)0); [EOL]       StringUtils.left("%,D)K.6*P!\"&U", 1042); [EOL]       StringUtils.left("", 1985); [EOL]       String string3 = StringUtils.join((short[]) null, 'q', 97, 1895); [EOL]       assertNull(string3); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[1] = 'k'; [EOL]       charArray0[2] = '!'; [EOL]       charArray0[3] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, 0, 684); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbyteToHex()  throws Throwable  { [EOL]       String string0 = Conversion.byteToHex((byte)0, (-2665), "", (byte)0, 0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisFullDetail()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       Boolean boolean0 = Boolean.valueOf(false); [EOL]       boolean boolean1 = toStringStyle0.isFullDetail(boolean0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[4]; [EOL]       Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]); [EOL]       assertEquals(3, doubleArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Character"); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendSummary(stringBuffer0, "", ""); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testsetByteBoolean()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       byte byte0 = bitField0.setByteBoolean((byte) (-100), true); [EOL]       assertEquals((byte) (-99), byte0); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testtoShort()  throws Throwable  { [EOL]       short short0 = NumberUtils.toShort((String) null, (short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('b'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]       assertEquals('d', char0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('f'); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, (Object) null, comparator0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertTrue(strTokenizer1.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterString("X0/k1)OeoZ>(*J8"); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertTrue(strTokenizer1.isEmptyTokenAsNull()); [EOL]       assertTrue(strTokenizer2.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setSummaryObjectStartText((String) null); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("H;!mZ"); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "<size=", hashMap0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL] 
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('0'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[2]; [EOL]       Boolean boolean0 = Boolean.valueOf("Array element "); [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]       assertEquals(2, booleanArray1.length); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbooleanValue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(); [EOL]       boolean boolean0 = mutableBoolean0.booleanValue(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("\bUw"); [EOL]       Range<String> range1 = range0.intersectionWith(range0); [EOL]       assertSame(range1, range0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_FIFTH; [EOL]       Fraction fraction1 = Fraction.getFraction((-938.4003844737051)); [EOL]       Fraction fraction2 = fraction1.divideBy(fraction0); [EOL]       assertEquals((-4692.002F), fraction2.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testprintRootCauseStackTrace()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       MockPrintStream mockPrintStream0 = new MockPrintStream("sun.reflect.GeneratedConstructorAccessor40.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n"); [EOL]       ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintStream) mockPrintStream0); [EOL]       assertNull(mockThrowable0.getMessage()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       int int0 = bitField0.set(1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("length must be valid"); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.isEmptyTokenAsNull(); [EOL]       assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeJson((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testhexToByte()  throws Throwable  { [EOL]       byte byte0 = Conversion.hexToByte("!Y}17H", 0, (byte)88, 0, (-1)); [EOL]       assertEquals((byte)88, byte0); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0); [EOL]       Range<String> range1 = Range.between("fw", "r.Ngw'UzA"); [EOL]       range0.isOverlappedBy(range1); [EOL]       assertFalse(range1.equals((Object)range0)); [EOL]   } [EOL]  [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       shortArray0[1] = (short)122; [EOL]       shortArray0[3] = (short) (-1182); [EOL]       shortArray0[4] = (short)0; [EOL]       String string0 = StringUtils.join(shortArray0, 'o', 13, (int) (short) (-1182)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", ""); [EOL]        [EOL]       String string1 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'o'); [EOL]        [EOL]       TreeSet<String> treeSet0 = new TreeSet<String>(); [EOL]       assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another")); [EOL]        [EOL]       SortedSet<String> sortedSet0 = treeSet0.headSet("D1CDQwpG"); [EOL]       assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another")); [EOL]       assertFalse(sortedSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another")); [EOL]        [EOL]       String string2 = StringUtils.join((Iterable<?>) sortedSet0, 'o'); [EOL]       assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another")); [EOL]       assertFalse(sortedSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another")); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable("Abrting t prtect against StackOverflwErrr - utput f ne lp is the input f anther"); [EOL]   } [EOL]  [EOL]   
